!function(t){var e={};function n(i){if(e[i])return e[i].exports;var r=e[i]={i:i,l:!1,exports:{}};return t[i].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=t,n.c=e,n.d=function(t,e,i){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)n.d(i,r,function(e){return t[e]}.bind(null,r));return i},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=5)}([function(t,e,n){var i,r,s;(function(a,o){var h=(a=a||n(2)).window,u=a.document,l=new function(){var t=/^(statics|enumerable|beans|preserve)$/,e=[],n=e.slice,i=Object.create,r=Object.getOwnPropertyDescriptor,s=Object.defineProperty,a=e.forEach||function(t,e){for(var n=0,i=this.length;n<i;n++)t.call(e,this[n],n,this)},h=Object.assign||function(t){for(var e=1,n=arguments.length;e<n;e++){var i=arguments[e];for(var r in i)i.hasOwnProperty(r)&&(t[r]=i[r])}return t},u=function(t,e,n){if(t){var i=r(t,"length");(i&&"number"==typeof i.value?a:function(t,e){for(var n in this)this.hasOwnProperty(n)&&t.call(e,this[n],n,this)}).call(t,e,n=n||t)}return n};function l(e,n,i,a,o){var h={};function u(t,u){"string"==typeof(u=u||(u=r(n,t))&&(u.get?u:u.value))&&"#"===u[0]&&(u=e[u.substring(1)]||u);var l,f="function"==typeof u,d=u,p=o||f&&!u.base?u&&u.get?t in e:e[t]:null;o&&p||(f&&p&&(u.base=p),f&&!1!==a&&(l=t.match(/^([gs]et|is)(([A-Z])(.*))$/))&&(h[l[3].toLowerCase()+l[4]]=l[2]),d&&!f&&d.get&&"function"==typeof d.get&&c.isPlainObject(d)||(d={value:d,writable:!0}),(r(e,t)||{configurable:!0}).configurable&&(d.configurable=!0,d.enumerable=null!=i?i:!l),s(e,t,d))}if(n){for(var l in n)n.hasOwnProperty(l)&&!t.test(l)&&u(l);for(var l in h){var f=h[l],d=e["set"+f],p=e["get"+f]||d&&e["is"+f];!p||!0!==a&&0!==p.length||u(l,{get:p,set:d})}}return e}function c(){for(var t=0,e=arguments.length;t<e;t++){var n=arguments[t];n&&h(this,n)}return this}return l(c,{inject:function(t){if(t){var e=!0===t.statics?t:t.statics,n=t.beans,i=t.preserve;e!==t&&l(this.prototype,t,t.enumerable,n,i),l(this,e,null,n,i)}for(var r=1,s=arguments.length;r<s;r++)this.inject(arguments[r]);return this},extend:function(){for(var t,e,n,r=this,a=0,o=arguments.length;a<o&&(!t||!e);a++)n=arguments[a],t=t||n.initialize,e=e||n.prototype;return e=(t=t||function(){r.apply(this,arguments)}).prototype=e||i(this.prototype),s(e,"constructor",{value:t,writable:!0,configurable:!0}),l(t,this),arguments.length&&this.inject.apply(t,arguments),t.base=r,t}}).inject({enumerable:!1,initialize:c,set:c,inject:function(){for(var t=0,e=arguments.length;t<e;t++){var n=arguments[t];n&&l(this,n,n.enumerable,n.beans,n.preserve)}return this},extend:function(){var t=i(this);return t.inject.apply(t,arguments)},each:function(t,e){return u(this,t,e)},clone:function(){return new this.constructor(this)},statics:{set:h,each:u,create:i,define:s,describe:r,clone:function(t){return h(new t.constructor,t)},isPlainObject:function(t){var e=null!=t&&t.constructor;return e&&(e===Object||e===c||"Object"===e.name)},pick:function(t,e){return t!==o?t:e},slice:function(t,e,i){return n.call(t,e,i)}}})};t.exports=l,l.inject({enumerable:!1,toString:function(){return null!=this._id?(this._class||"Object")+(this._name?" '"+this._name+"'":" @"+this._id):"{ "+l.each(this,function(t,e){if(!/^_/.test(e)){var n=typeof t;this.push(e+": "+("number"===n?p.instance.number(t):"string"===n?"'"+t+"'":t))}},[]).join(", ")+" }"},getClassName:function(){return this._class||""},importJSON:function(t){return l.importJSON(t,this)},exportJSON:function(t){return l.exportJSON(this,t)},toJSON:function(){return l.serialize(this)},set:function(t,e){return t&&l.filter(this,t,e,this._prioritize),this}},{beans:!1,statics:{exports:{},extend:function t(){var e=t.base.apply(this,arguments),n=e.prototype._class;return n&&!l.exports[n]&&(l.exports[n]=e),e},equals:function(t,e){if(t===e)return!0;if(t&&t.equals)return t.equals(e);if(e&&e.equals)return e.equals(t);if(t&&e&&"object"==typeof t&&"object"==typeof e){if(Array.isArray(t)&&Array.isArray(e)){if((n=t.length)!==e.length)return!1;for(;n--;)if(!l.equals(t[n],e[n]))return!1}else{var n,i=Object.keys(t);if((n=i.length)!==Object.keys(e).length)return!1;for(;n--;){var r=i[n];if(!e.hasOwnProperty(r)||!l.equals(t[r],e[r]))return!1}}return!0}return!1},read:function(t,e,n,i){if(this===l){var r=this.peek(t,e);return t.__index++,r}var s=this.prototype,a=s._readIndex,h=e||a&&t.__index||0,u=t.length,c=t[h];if(i=i||u-h,c instanceof this||n&&n.readNull&&null==c&&i<=1)return a&&(t.__index=h+1),c&&n&&n.clone?c.clone():c;if(c=l.create(s),a&&(c.__read=!0),c=c.initialize.apply(c,h>0||h+i<u?l.slice(t,h,h+i):t)||c,a){t.__index=h+c.__read;var f=c.__filtered;f&&(t.__filtered=f,c.__filtered=o),c.__read=o}return c},peek:function(t,e){return t[t.__index=e||t.__index||0]},remain:function(t){return t.length-(t.__index||0)},readList:function(t,e,n,i){for(var r,s=[],a=e||0,o=i?a+i:t.length,h=a;h<o;h++)s.push(Array.isArray(r=t[h])?this.read(r,0,n):this.read(t,h,n,1));return s},readNamed:function(t,e,n,i,r){var s=this.getNamed(t,e),a=s!==o;if(a){var h=t.__filtered;h||((h=t.__filtered=l.create(t[0])).__unfiltered=t[0]),h[e]=o}var u=a?[s]:t;return this.read(u,n,i,r)},getNamed:function(t,e){var n=t[0];if(t._hasObject===o&&(t._hasObject=1===t.length&&l.isPlainObject(n)),t._hasObject)return e?n[e]:t.__filtered||n},hasNamed:function(t,e){return!!this.getNamed(t,e)},filter:function(t,e,n,i){var r;function s(i){if(!(n&&i in n||r&&i in r)){var s=e[i];s!==o&&(t[i]=s)}}if(i){for(var a,h={},u=0,l=i.length;u<l;u++)(a=i[u])in e&&(s(a),h[a]=!0);r=h}return Object.keys(e.__unfiltered||e).forEach(s),t},isPlainValue:function(t,e){return l.isPlainObject(t)||Array.isArray(t)||e&&"string"==typeof t},serialize:function(t,e,n,i){e=e||{};var r,s=!i;if(s&&(e.formatter=new p(e.precision),i={length:0,definitions:{},references:{},add:function(t,e){var n="#"+t._id,i=this.references[n];if(!i){this.length++;var r=e.call(t),s=t._class;s&&r[0]!==s&&r.unshift(s),this.definitions[n]=r,i=this.references[n]=[n]}return i}}),t&&t._serialize){r=t._serialize(e,i);var a=t._class;!a||t._compactSerialize||!s&&n||r[0]===a||r.unshift(a)}else if(Array.isArray(t)){r=[];for(var o=0,h=t.length;o<h;o++)r[o]=l.serialize(t[o],e,n,i)}else if(l.isPlainObject(t)){r={};var u=Object.keys(t);for(o=0,h=u.length;o<h;o++){var c=u[o];r[c]=l.serialize(t[c],e,n,i)}}else r="number"==typeof t?e.formatter.number(t,e.precision):t;return s&&i.length>0?[["dictionary",i.definitions],r]:r},deserialize:function(t,e,n,i,r){var s=t,a=!n,o=a&&t&&t.length&&"dictionary"===t[0][0];if(n=n||{},Array.isArray(t)){var h=t[0],u="dictionary"===h;if(1==t.length&&/^#/.test(h))return n.dictionary[h];s=[];for(var c=(h=l.exports[h])?1:0,f=t.length;c<f;c++)s.push(l.deserialize(t[c],e,n,u,o));if(h){var d=s;s=e?e(h,d,a||r):new h(d)}}else if(l.isPlainObject(t))for(var p in s={},i&&(n.dictionary=s),t)s[p]=l.deserialize(t[p],e,n);return o?s[1]:s},exportJSON:function(t,e){var n=l.serialize(t,e);return e&&0==e.asString?n:JSON.stringify(n)},importJSON:function(t,e){return l.deserialize("string"==typeof t?JSON.parse(t):t,function(t,n,i){var r=i&&e&&e.constructor===t,s=r?e:l.create(t.prototype);if(1===n.length&&s instanceof T&&(r||!(s instanceof E))){var a=n[0];l.isPlainObject(a)&&(a.insert=!1)}return(r?s.set:t).apply(s,n),r&&(e=null),s})},push:function(t,e){var n=e.length;if(n<4096)t.push.apply(t,e);else{var i=t.length;t.length+=n;for(var r=0;r<n;r++)t[i+r]=e[r]}return t},splice:function(t,e,n,i){var r=e&&e.length,s=n===o;(n=s?t.length:n)>t.length&&(n=t.length);for(var a=0;a<r;a++)e[a]._index=n+a;if(s)return l.push(t,e),[];var h=[n,i];e&&l.push(h,e);for(var u=t.splice.apply(t,h),c=(a=0,u.length);a<c;a++)u[a]._index=o;for(a=n+r,c=t.length;a<c;a++)t[a]._index=a;return u},capitalize:function(t){return t.replace(/\b[a-z]/g,function(t){return t.toUpperCase()})},camelize:function(t){return t.replace(/-(.)/g,function(t,e){return e.toUpperCase()})},hyphenate:function(t){return t.replace(/([a-z])([A-Z])/g,"$1-$2").toLowerCase()}}});var c={on:function(t,e){if("string"!=typeof t)l.each(t,function(t,e){this.on(e,t)},this);else{var n=this._eventTypes,i=n&&n[t],r=this._callbacks=this._callbacks||{};-1===(r=r[t]=r[t]||[]).indexOf(e)&&(r.push(e),i&&i.install&&1===r.length&&i.install.call(this,t))}return this},off:function(t,e){if("string"==typeof t){var n,i=this._eventTypes,r=i&&i[t],s=this._callbacks&&this._callbacks[t];return s&&(!e||-1!==(n=s.indexOf(e))&&1===s.length?(r&&r.uninstall&&r.uninstall.call(this,t),delete this._callbacks[t]):-1!==n&&s.splice(n,1)),this}l.each(t,function(t,e){this.off(e,t)},this)},once:function(t,e){return this.on(t,function n(){e.apply(this,arguments),this.off(t,n)})},emit:function(t,e){var n=this._callbacks&&this._callbacks[t];if(!n)return!1;var i=l.slice(arguments,1),r=e&&e.target&&!e.currentTarget;n=n.slice(),r&&(e.currentTarget=this);for(var s=0,a=n.length;s<a;s++)if(0==n[s].apply(this,i)){e&&e.stop&&e.stop();break}return r&&delete e.currentTarget,!0},responds:function(t){return!(!this._callbacks||!this._callbacks[t])},attach:"#on",detach:"#off",fire:"#emit",_installEvents:function(t){var e=this._eventTypes,n=this._callbacks,i=t?"install":"uninstall";if(e)for(var r in n)if(n[r].length>0){var s=e[r],a=s&&s[i];a&&a.call(this,r)}},statics:{inject:function t(e){var n=e._events;if(n){var i={};l.each(n,function(t,n){var r="string"==typeof t,s=r?t:n,a=l.capitalize(s),o=s.substring(2).toLowerCase();i[o]=r?{}:t,s="_"+s,e["get"+a]=function(){return this[s]},e["set"+a]=function(t){var e=this[s];e&&this.off(o,e),t&&this.on(o,t),this[s]=t}}),e._eventTypes=i}return t.base.apply(this,arguments)}}},f=l.extend({_class:"PaperScope",initialize:function t(){ct=this,this.settings=new l({applyMatrix:!0,insertItems:!0,handleSize:4,hitTolerance:0}),this.project=null,this.projects=[],this.tools=[],this._id=t._id++,t._scopes[this._id]=this;var e=t.prototype;if(!this.support){var n=ot.getContext(1,1)||{};e.support={nativeDash:"setLineDash"in n||"mozDash"in n,nativeBlendModes:ht.nativeModes},ot.release(n)}if(!this.agent){var i=a.navigator.userAgent.toLowerCase(),r=(/(darwin|win|mac|linux|freebsd|sunos)/.exec(i)||[])[0],s="darwin"===r?"mac":r,o=e.agent=e.browser={platform:s};s&&(o[s]=!0),i.replace(/(opera|chrome|safari|webkit|firefox|msie|trident|atom|node)\/?\s*([.\d]+)(?:.*version\/([.\d]+))?(?:.*rv\:v?([.\d]+))?/g,function(t,e,n,i,r){if(!o.chrome){var s="opera"===e?i:/^(node|trident)$/.test(e)?r:n;o.version=s,o.versionNumber=parseFloat(s),e="trident"===e?"msie":e,o.name=e,o[e]=!0}}),o.chrome&&delete o.webkit,o.atom&&delete o.chrome}},version:"0.12.0",getView:function(){var t=this.project;return t&&t._view},getPaper:function(){return this},execute:function(t,e){var n=ct.PaperScript.execute(t,this,e);return K.updateFocus(),n},install:function(t){var e=this;for(var n in l.each(["project","view","tool"],function(n){l.define(t,n,{configurable:!0,get:function(){return e[n]}})}),this)!/^_/.test(n)&&this[n]&&(t[n]=this[n])},setup:function(t){return ct=this,this.project=new k(t),this},createCanvas:function(t,e){return ot.getCanvas(t,e)},activate:function(){ct=this},clear:function(){for(var t=this.projects,e=this.tools,n=t.length-1;n>=0;n--)t[n].remove();for(n=e.length-1;n>=0;n--)e[n].remove()},remove:function(){this.clear(),delete f._scopes[this._id]},statics:new function(){function t(t){return t+="Attribute",function(e,n){return e[t](n)||e[t]("data-paper-"+n)}}return{_scopes:{},_id:0,get:function(t){return this._scopes[t]||null},getAttribute:t("get"),hasAttribute:t("has")}}}),d=l.extend(c,{initialize:function(t){this._scope=ct,this._index=this._scope[this._list].push(this)-1,!t&&this._scope[this._reference]||this.activate()},activate:function(){if(!this._scope)return!1;var t=this._scope[this._reference];return t&&t!==this&&t.emit("deactivate"),this._scope[this._reference]=this,this.emit("activate",t),!0},isActive:function(){return this._scope[this._reference]===this},remove:function(){return null!=this._index&&(l.splice(this._scope[this._list],null,this._index,1),this._scope[this._reference]==this&&(this._scope[this._reference]=null),this._scope=null,!0)},getView:function(){return this._scope.getView()}}),p=l.extend({initialize:function(t){this.precision=l.pick(t,5),this.multiplier=Math.pow(10,this.precision)},number:function(t){return this.precision<16?Math.round(t*this.multiplier)/this.multiplier:t},pair:function(t,e,n){return this.number(t)+(n||",")+this.number(e)},point:function(t,e){return this.number(t.x)+(e||",")+this.number(t.y)},size:function(t,e){return this.number(t.width)+(e||",")+this.number(t.height)},rectangle:function(t,e){return this.point(t,e)+(e||",")+this.size(t,e)}});p.instance=new p;var g=new function(){var t=[[.5773502691896257],[0,.7745966692414834],[.33998104358485626,.8611363115940526],[0,.5384693101056831,.906179845938664],[.2386191860831969,.6612093864662645,.932469514203152],[0,.4058451513773972,.7415311855993945,.9491079123427585],[.1834346424956498,.525532409916329,.7966664774136267,.9602898564975363],[0,.3242534234038089,.6133714327005904,.8360311073266358,.9681602395076261],[.14887433898163122,.4333953941292472,.6794095682990244,.8650633666889845,.9739065285171717],[0,.26954315595234496,.5190961292068118,.7301520055740494,.8870625997680953,.978228658146057],[.1252334085114689,.3678314989981802,.5873179542866175,.7699026741943047,.9041172563704749,.9815606342467192],[0,.2304583159551348,.44849275103644687,.6423493394403402,.8015780907333099,.9175983992229779,.9841830547185881],[.10805494870734367,.31911236892788974,.5152486363581541,.6872929048116855,.827201315069765,.9284348836635735,.9862838086968123],[0,.20119409399743451,.3941513470775634,.5709721726085388,.7244177313601701,.8482065834104272,.937273392400706,.9879925180204854],[.09501250983763744,.2816035507792589,.45801677765722737,.6178762444026438,.755404408355003,.8656312023878318,.9445750230732326,.9894009349916499]],e=[[1],[.8888888888888888,.5555555555555556],[.6521451548625461,.34785484513745385],[.5688888888888889,.47862867049936647,.23692688505618908],[.46791393457269104,.3607615730481386,.17132449237917036],[.4179591836734694,.3818300505051189,.27970539148927664,.1294849661688697],[.362683783378362,.31370664587788727,.22238103445337448,.10122853629037626],[.3302393550012598,.31234707704000286,.26061069640293544,.1806481606948574,.08127438836157441],[.29552422471475287,.26926671930999635,.21908636251598204,.1494513491505806,.06667134430868814],[.2729250867779006,.26280454451024665,.23319376459199048,.18629021092773426,.1255803694649046,.05566856711617366],[.24914704581340277,.2334925365383548,.20316742672306592,.16007832854334622,.10693932599531843,.04717533638651183],[.2325515532308739,.22628318026289723,.2078160475368885,.17814598076194574,.13887351021978725,.09212149983772845,.04048400476531588],[.2152638534631578,.2051984637212956,.18553839747793782,.15720316715819355,.12151857068790319,.08015808715976021,.03511946033175186],[.2025782419255613,.19843148532711158,.1861610000155622,.16626920581699392,.13957067792615432,.10715922046717194,.07036604748810812,.03075324199611727],[.1894506104550685,.18260341504492358,.16915651939500254,.14959598881657674,.12462897125553388,.09515851168249279,.062253523938647894,.027152459411754096]],n=Math.abs,i=Math.sqrt,r=Math.pow,s=Math.log2||function(t){return Math.log(t)*Math.LOG2E};function a(t,e,n){return t<e?e:t>n?n:t}function o(t,e,i){function r(t){var e=134217729*t,n=t-e+e;return[n,t-n]}var s=e*e-t*i,a=e*e+t*i;if(3*n(s)<a){var o=r(t),h=r(e),u=r(i),l=e*e,c=t*i;s=l-c+(h[0]*h[0]-l+2*h[0]*h[1]+h[1]*h[1]-(o[0]*u[0]-c+o[0]*u[1]+o[1]*u[0]+o[1]*u[1]))}return s}function h(){var t=Math.max.apply(Math,arguments);return t&&(t<1e-8||t>1e8)?r(2,-Math.round(s(t))):0}return{EPSILON:1e-12,MACHINE_EPSILON:1.12e-16,CURVETIME_EPSILON:1e-8,GEOMETRIC_EPSILON:1e-7,TRIGONOMETRIC_EPSILON:1e-8,KAPPA:4*(i(2)-1)/3,isZero:function(t){return t>=-1e-12&&t<=1e-12},clamp:a,integrate:function(n,i,r,s){for(var a=t[s-2],o=e[s-2],h=.5*(r-i),u=h+i,l=0,c=s+1>>1,f=1&s?o[l++]*n(u):0;l<c;){var d=h*a[l];f+=o[l++]*(n(u+d)+n(u-d))}return h*f},findRoot:function(t,e,i,r,s,o,h){for(var u=0;u<o;u++){var l=t(i),c=l/e(i),f=i-c;if(n(c)<h){i=f;break}l>0?(s=i,i=f<=r?.5*(r+s):f):(r=i,i=f>=s?.5*(r+s):f)}return a(i,r,s)},solveQuadratic:function(t,e,r,s,u,l){var c,f=1/0;if(n(t)<1e-12){if(n(e)<1e-12)return n(r)<1e-12?-1:0;c=-r/e}else{var d=o(t,e*=-.5,r);if(d&&n(d)<1.12e-16){var p=h(n(t),n(e),n(r));p&&(d=o(t*=p,e*=p,r*=p))}if(d>=-1.12e-16){var g=d<0?0:i(d),v=e+(e<0?-g:g);0===v?f=-(c=r/t):(c=v/t,f=r/v)}}var _=0,m=null==u,y=u-1e-12,x=l+1e-12;return isFinite(c)&&(m||c>y&&c<x)&&(s[_++]=m?c:a(c,u,l)),f!==c&&isFinite(f)&&(m||f>y&&f<x)&&(s[_++]=m?f:a(f,u,l)),_},solveCubic:function(t,e,s,o,u,l,c){var f,d,p,v,_,m=h(n(t),n(e),n(s),n(o));function y(n){var i=t*(f=n);v=(i+(d=i+e))*f+(p=d*f+s),_=p*f+o}if(m&&(t*=m,e*=m,s*=m,o*=m),n(t)<1e-12)t=e,d=s,p=o,f=1/0;else if(n(o)<1e-12)d=e,p=s,f=0;else{y(-e/t/3);var x=_/t,w=r(n(x),1/3),b=x<0?-1:1,C=-v/t,S=C>0?1.324717957244746*Math.max(w,i(C)):w,k=f-b*S;if(k!==f){do{y(k),k=0===v?f:f-_/v/(1+1.12e-16)}while(b*k>b*f);n(t)*f*f>n(o/f)&&(d=((p=-o/f)-s)/f)}}var T=g.solveQuadratic(t,d,p,u,l,c),A=null==l;return isFinite(f)&&(0===T||T>0&&f!==u[0]&&f!==u[1])&&(A||f>l-1e-12&&f<c+1e-12)&&(u[T++]=A?f:a(f,l,c)),T}}},v={_id:1,_pools:{},get:function(t){if(t){var e=this._pools[t];return e||(e=this._pools[t]={_id:1}),e._id++}return this._id++}},_=l.extend({_class:"Point",_readIndex:!0,initialize:function(t,e){var n=typeof t,i=this.__read,r=0;if("number"===n){var s="number"==typeof e;this._set(t,s?e:t),i&&(r=s?2:1)}else if("undefined"===n||null===t)this._set(0,0),i&&(r=null===t?1:0);else{var a="string"===n?t.split(/[\s,]+/)||[]:t;r=1,Array.isArray(a)?this._set(+a[0],+(a.length>1?a[1]:a[0])):"x"in a?this._set(a.x||0,a.y||0):"width"in a?this._set(a.width||0,a.height||0):"angle"in a?(this._set(a.length||0,0),this.setAngle(a.angle||0)):(this._set(0,0),r=0)}return i&&(this.__read=r),this},set:"#initialize",_set:function(t,e){return this.x=t,this.y=e,this},equals:function(t){return this===t||t&&(this.x===t.x&&this.y===t.y||Array.isArray(t)&&this.x===t[0]&&this.y===t[1])||!1},clone:function(){return new _(this.x,this.y)},toString:function(){var t=p.instance;return"{ x: "+t.number(this.x)+", y: "+t.number(this.y)+" }"},_serialize:function(t){var e=t.formatter;return[e.number(this.x),e.number(this.y)]},getLength:function(){return Math.sqrt(this.x*this.x+this.y*this.y)},setLength:function(t){if(this.isZero()){var e=this._angle||0;this._set(Math.cos(e)*t,Math.sin(e)*t)}else{var n=t/this.getLength();g.isZero(n)&&this.getAngle(),this._set(this.x*n,this.y*n)}},getAngle:function(){return 180*this.getAngleInRadians.apply(this,arguments)/Math.PI},setAngle:function(t){this.setAngleInRadians.call(this,t*Math.PI/180)},getAngleInDegrees:"#getAngle",setAngleInDegrees:"#setAngle",getAngleInRadians:function(){if(arguments.length){var t=_.read(arguments),e=this.getLength()*t.getLength();if(g.isZero(e))return NaN;var n=this.dot(t)/e;return Math.acos(n<-1?-1:n>1?1:n)}return this.isZero()?this._angle||0:this._angle=Math.atan2(this.y,this.x)},setAngleInRadians:function(t){if(this._angle=t,!this.isZero()){var e=this.getLength();this._set(Math.cos(t)*e,Math.sin(t)*e)}},getQuadrant:function(){return this.x>=0?this.y>=0?1:4:this.y>=0?2:3}},{beans:!1,getDirectedAngle:function(){var t=_.read(arguments);return 180*Math.atan2(this.cross(t),this.dot(t))/Math.PI},getDistance:function(){var t=_.read(arguments),e=t.x-this.x,n=t.y-this.y,i=e*e+n*n;return l.read(arguments)?i:Math.sqrt(i)},normalize:function(t){t===o&&(t=1);var e=this.getLength(),n=0!==e?t/e:0,i=new _(this.x*n,this.y*n);return n>=0&&(i._angle=this._angle),i},rotate:function(t,e){if(0===t)return this.clone();t=t*Math.PI/180;var n=e?this.subtract(e):this,i=Math.sin(t),r=Math.cos(t);return n=new _(n.x*r-n.y*i,n.x*i+n.y*r),e?n.add(e):n},transform:function(t){return t?t._transformPoint(this):this},add:function(){var t=_.read(arguments);return new _(this.x+t.x,this.y+t.y)},subtract:function(){var t=_.read(arguments);return new _(this.x-t.x,this.y-t.y)},multiply:function(){var t=_.read(arguments);return new _(this.x*t.x,this.y*t.y)},divide:function(){var t=_.read(arguments);return new _(this.x/t.x,this.y/t.y)},modulo:function(){var t=_.read(arguments);return new _(this.x%t.x,this.y%t.y)},negate:function(){return new _(-this.x,-this.y)},isInside:function(){return w.read(arguments).contains(this)},isClose:function(){var t=_.read(arguments),e=l.read(arguments);return this.getDistance(t)<=e},isCollinear:function(){var t=_.read(arguments);return _.isCollinear(this.x,this.y,t.x,t.y)},isColinear:"#isCollinear",isOrthogonal:function(){var t=_.read(arguments);return _.isOrthogonal(this.x,this.y,t.x,t.y)},isZero:function(){var t=g.isZero;return t(this.x)&&t(this.y)},isNaN:function(){return isNaN(this.x)||isNaN(this.y)},isInQuadrant:function(t){return this.x*(t>1&&t<4?-1:1)>=0&&this.y*(t>2?-1:1)>=0},dot:function(){var t=_.read(arguments);return this.x*t.x+this.y*t.y},cross:function(){var t=_.read(arguments);return this.x*t.y-this.y*t.x},project:function(){var t=_.read(arguments),e=t.isZero()?0:this.dot(t)/t.dot(t);return new _(t.x*e,t.y*e)},statics:{min:function(){var t=_.read(arguments),e=_.read(arguments);return new _(Math.min(t.x,e.x),Math.min(t.y,e.y))},max:function(){var t=_.read(arguments),e=_.read(arguments);return new _(Math.max(t.x,e.x),Math.max(t.y,e.y))},random:function(){return new _(Math.random(),Math.random())},isCollinear:function(t,e,n,i){return Math.abs(t*i-e*n)<=1e-8*Math.sqrt((t*t+e*e)*(n*n+i*i))},isOrthogonal:function(t,e,n,i){return Math.abs(t*n+e*i)<=1e-8*Math.sqrt((t*t+e*e)*(n*n+i*i))}}},l.each(["round","ceil","floor","abs"],function(t){var e=Math[t];this[t]=function(){return new _(e(this.x),e(this.y))}},{})),m=_.extend({initialize:function(t,e,n,i){this._x=t,this._y=e,this._owner=n,this._setter=i},_set:function(t,e,n){return this._x=t,this._y=e,n||this._owner[this._setter](this),this},getX:function(){return this._x},setX:function(t){this._x=t,this._owner[this._setter](this)},getY:function(){return this._y},setY:function(t){this._y=t,this._owner[this._setter](this)},isSelected:function(){return!!(this._owner._selection&this._getSelection())},setSelected:function(t){this._owner._changeSelection(this._getSelection(),t)},_getSelection:function(){return"setPosition"===this._setter?4:0}}),y=l.extend({_class:"Size",_readIndex:!0,initialize:function(t,e){var n=typeof t,i=this.__read,r=0;if("number"===n){var s="number"==typeof e;this._set(t,s?e:t),i&&(r=s?2:1)}else if("undefined"===n||null===t)this._set(0,0),i&&(r=null===t?1:0);else{var a="string"===n?t.split(/[\s,]+/)||[]:t;r=1,Array.isArray(a)?this._set(+a[0],+(a.length>1?a[1]:a[0])):"width"in a?this._set(a.width||0,a.height||0):"x"in a?this._set(a.x||0,a.y||0):(this._set(0,0),r=0)}return i&&(this.__read=r),this},set:"#initialize",_set:function(t,e){return this.width=t,this.height=e,this},equals:function(t){return t===this||t&&(this.width===t.width&&this.height===t.height||Array.isArray(t)&&this.width===t[0]&&this.height===t[1])||!1},clone:function(){return new y(this.width,this.height)},toString:function(){var t=p.instance;return"{ width: "+t.number(this.width)+", height: "+t.number(this.height)+" }"},_serialize:function(t){var e=t.formatter;return[e.number(this.width),e.number(this.height)]},add:function(){var t=y.read(arguments);return new y(this.width+t.width,this.height+t.height)},subtract:function(){var t=y.read(arguments);return new y(this.width-t.width,this.height-t.height)},multiply:function(){var t=y.read(arguments);return new y(this.width*t.width,this.height*t.height)},divide:function(){var t=y.read(arguments);return new y(this.width/t.width,this.height/t.height)},modulo:function(){var t=y.read(arguments);return new y(this.width%t.width,this.height%t.height)},negate:function(){return new y(-this.width,-this.height)},isZero:function(){var t=g.isZero;return t(this.width)&&t(this.height)},isNaN:function(){return isNaN(this.width)||isNaN(this.height)},statics:{min:function(t,e){return new y(Math.min(t.width,e.width),Math.min(t.height,e.height))},max:function(t,e){return new y(Math.max(t.width,e.width),Math.max(t.height,e.height))},random:function(){return new y(Math.random(),Math.random())}}},l.each(["round","ceil","floor","abs"],function(t){var e=Math[t];this[t]=function(){return new y(e(this.width),e(this.height))}},{})),x=y.extend({initialize:function(t,e,n,i){this._width=t,this._height=e,this._owner=n,this._setter=i},_set:function(t,e,n){return this._width=t,this._height=e,n||this._owner[this._setter](this),this},getWidth:function(){return this._width},setWidth:function(t){this._width=t,this._owner[this._setter](this)},getHeight:function(){return this._height},setHeight:function(t){this._height=t,this._owner[this._setter](this)}}),w=l.extend({_class:"Rectangle",_readIndex:!0,beans:!0,initialize:function(t,e,n,i){var r,s=typeof t;if("number"===s?(this._set(t,e,n,i),r=4):"undefined"===s||null===t?(this._set(0,0,0,0),r=null===t?1:0):1===arguments.length&&(Array.isArray(t)?(this._set.apply(this,t),r=1):t.x!==o||t.width!==o?(this._set(t.x||0,t.y||0,t.width||0,t.height||0),r=1):t.from===o&&t.to===o&&(this._set(0,0,0,0),l.filter(this,t),r=1)),r===o){var a,h,u=_.readNamed(arguments,"from"),c=l.peek(arguments),f=u.x,d=u.y;if(c&&c.x!==o||l.hasNamed(arguments,"to")){var p=_.readNamed(arguments,"to");a=p.x-f,h=p.y-d,a<0&&(f=p.x,a=-a),h<0&&(d=p.y,h=-h)}else{var g=y.read(arguments);a=g.width,h=g.height}this._set(f,d,a,h),r=arguments.__index;var v=arguments.__filtered;v&&(this.__filtered=v)}return this.__read&&(this.__read=r),this},set:"#initialize",_set:function(t,e,n,i){return this.x=t,this.y=e,this.width=n,this.height=i,this},clone:function(){return new w(this.x,this.y,this.width,this.height)},equals:function(t){var e=l.isPlainValue(t)?w.read(arguments):t;return e===this||e&&this.x===e.x&&this.y===e.y&&this.width===e.width&&this.height===e.height||!1},toString:function(){var t=p.instance;return"{ x: "+t.number(this.x)+", y: "+t.number(this.y)+", width: "+t.number(this.width)+", height: "+t.number(this.height)+" }"},_serialize:function(t){var e=t.formatter;return[e.number(this.x),e.number(this.y),e.number(this.width),e.number(this.height)]},getPoint:function(t){return new(t?_:m)(this.x,this.y,this,"setPoint")},setPoint:function(){var t=_.read(arguments);this.x=t.x,this.y=t.y},getSize:function(t){return new(t?y:x)(this.width,this.height,this,"setSize")},_fw:1,_fh:1,setSize:function(){var t=y.read(arguments),e=this._sx,n=this._sy,i=t.width,r=t.height;e&&(this.x+=(this.width-i)*e),n&&(this.y+=(this.height-r)*n),this.width=i,this.height=r,this._fw=this._fh=1},getLeft:function(){return this.x},setLeft:function(t){if(!this._fw){var e=t-this.x;this.width-=.5===this._sx?2*e:e}this.x=t,this._sx=this._fw=0},getTop:function(){return this.y},setTop:function(t){if(!this._fh){var e=t-this.y;this.height-=.5===this._sy?2*e:e}this.y=t,this._sy=this._fh=0},getRight:function(){return this.x+this.width},setRight:function(t){if(!this._fw){var e=t-this.x;this.width=.5===this._sx?2*e:e}this.x=t-this.width,this._sx=1,this._fw=0},getBottom:function(){return this.y+this.height},setBottom:function(t){if(!this._fh){var e=t-this.y;this.height=.5===this._sy?2*e:e}this.y=t-this.height,this._sy=1,this._fh=0},getCenterX:function(){return this.x+this.width/2},setCenterX:function(t){this._fw||.5===this._sx?this.x=t-this.width/2:(this._sx&&(this.x+=2*(t-this.x)*this._sx),this.width=2*(t-this.x)),this._sx=.5,this._fw=0},getCenterY:function(){return this.y+this.height/2},setCenterY:function(t){this._fh||.5===this._sy?this.y=t-this.height/2:(this._sy&&(this.y+=2*(t-this.y)*this._sy),this.height=2*(t-this.y)),this._sy=.5,this._fh=0},getCenter:function(t){return new(t?_:m)(this.getCenterX(),this.getCenterY(),this,"setCenter")},setCenter:function(){var t=_.read(arguments);return this.setCenterX(t.x),this.setCenterY(t.y),this},getArea:function(){return this.width*this.height},isEmpty:function(){return 0===this.width||0===this.height},contains:function(t){return t&&t.width!==o||4===(Array.isArray(t)?t:arguments).length?this._containsRectangle(w.read(arguments)):this._containsPoint(_.read(arguments))},_containsPoint:function(t){var e=t.x,n=t.y;return e>=this.x&&n>=this.y&&e<=this.x+this.width&&n<=this.y+this.height},_containsRectangle:function(t){var e=t.x,n=t.y;return e>=this.x&&n>=this.y&&e+t.width<=this.x+this.width&&n+t.height<=this.y+this.height},intersects:function(){var t=w.read(arguments),e=l.read(arguments)||0;return t.x+t.width>this.x-e&&t.y+t.height>this.y-e&&t.x<this.x+this.width+e&&t.y<this.y+this.height+e},intersect:function(){var t=w.read(arguments),e=Math.max(this.x,t.x),n=Math.max(this.y,t.y),i=Math.min(this.x+this.width,t.x+t.width),r=Math.min(this.y+this.height,t.y+t.height);return new w(e,n,i-e,r-n)},unite:function(){var t=w.read(arguments),e=Math.min(this.x,t.x),n=Math.min(this.y,t.y),i=Math.max(this.x+this.width,t.x+t.width),r=Math.max(this.y+this.height,t.y+t.height);return new w(e,n,i-e,r-n)},include:function(){var t=_.read(arguments),e=Math.min(this.x,t.x),n=Math.min(this.y,t.y),i=Math.max(this.x+this.width,t.x),r=Math.max(this.y+this.height,t.y);return new w(e,n,i-e,r-n)},expand:function(){var t=y.read(arguments),e=t.width,n=t.height;return new w(this.x-e/2,this.y-n/2,this.width+e,this.height+n)},scale:function(t,e){return this.expand(this.width*t-this.width,this.height*(e===o?t:e)-this.height)}},l.each([["Top","Left"],["Top","Right"],["Bottom","Left"],["Bottom","Right"],["Left","Center"],["Top","Center"],["Right","Center"],["Bottom","Center"]],function(t,e){var n=t.join(""),i=/^[RL]/.test(n);e>=4&&(t[1]+=i?"Y":"X");var r=t[i?0:1],s=t[i?1:0],a="get"+r,o="get"+s,h="set"+r,u="set"+s,l="set"+n;this["get"+n]=function(t){return new(t?_:m)(this[a](),this[o](),this,l)},this[l]=function(){var t=_.read(arguments);this[h](t.x),this[u](t.y)}},{beans:!0})),b=w.extend({initialize:function(t,e,n,i,r,s){this._set(t,e,n,i,!0),this._owner=r,this._setter=s},_set:function(t,e,n,i,r){return this._x=t,this._y=e,this._width=n,this._height=i,r||this._owner[this._setter](this),this}},new function(){var t=w.prototype;return l.each(["x","y","width","height"],function(t){var e=l.capitalize(t),n="_"+t;this["get"+e]=function(){return this[n]},this["set"+e]=function(t){this[n]=t,this._dontNotify||this._owner[this._setter](this)}},l.each(["Point","Size","Center","Left","Top","Right","Bottom","CenterX","CenterY","TopLeft","TopRight","BottomLeft","BottomRight","LeftCenter","TopCenter","RightCenter","BottomCenter"],function(e){var n="set"+e;this[n]=function(){this._dontNotify=!0,t[n].apply(this,arguments),this._dontNotify=!1,this._owner[this._setter](this)}},{isSelected:function(){return!!(2&this._owner._selection)},setSelected:function(t){var e=this._owner;e._changeSelection&&e._changeSelection(2,t)}}))}),C=l.extend({_class:"Matrix",initialize:function t(e,n){var i=arguments.length,r=!0;if(i>=6?this._set.apply(this,arguments):1===i||2===i?e instanceof t?this._set(e._a,e._b,e._c,e._d,e._tx,e._ty,n):Array.isArray(e)?this._set.apply(this,n?e.concat([n]):e):r=!1:i?r=!1:this.reset(),!r)throw new Error("Unsupported matrix parameters");return this},set:"#initialize",_set:function(t,e,n,i,r,s,a){return this._a=t,this._b=e,this._c=n,this._d=i,this._tx=r,this._ty=s,a||this._changed(),this},_serialize:function(t,e){return l.serialize(this.getValues(),t,!0,e)},_changed:function(){var t=this._owner;t&&(t._applyMatrix?t.transform(null,!0):t._changed(25))},clone:function(){return new C(this._a,this._b,this._c,this._d,this._tx,this._ty)},equals:function(t){return t===this||t&&this._a===t._a&&this._b===t._b&&this._c===t._c&&this._d===t._d&&this._tx===t._tx&&this._ty===t._ty},toString:function(){var t=p.instance;return"[["+[t.number(this._a),t.number(this._c),t.number(this._tx)].join(", ")+"], ["+[t.number(this._b),t.number(this._d),t.number(this._ty)].join(", ")+"]]"},reset:function(t){return this._a=this._d=1,this._b=this._c=this._tx=this._ty=0,t||this._changed(),this},apply:function(t,e){var n=this._owner;return!!n&&(n.transform(null,!0,l.pick(t,!0),e),this.isIdentity())},translate:function(){var t=_.read(arguments),e=t.x,n=t.y;return this._tx+=e*this._a+n*this._c,this._ty+=e*this._b+n*this._d,this._changed(),this},scale:function(){var t=_.read(arguments),e=_.read(arguments,0,{readNull:!0});return e&&this.translate(e),this._a*=t.x,this._b*=t.x,this._c*=t.y,this._d*=t.y,e&&this.translate(e.negate()),this._changed(),this},rotate:function(t){t*=Math.PI/180;var e=_.read(arguments,1),n=e.x,i=e.y,r=Math.cos(t),s=Math.sin(t),a=n-n*r+i*s,o=i-n*s-i*r,h=this._a,u=this._b,l=this._c,c=this._d;return this._a=r*h+s*l,this._b=r*u+s*c,this._c=-s*h+r*l,this._d=-s*u+r*c,this._tx+=a*h+o*l,this._ty+=a*u+o*c,this._changed(),this},shear:function(){var t=_.read(arguments),e=_.read(arguments,0,{readNull:!0});e&&this.translate(e);var n=this._a,i=this._b;return this._a+=t.y*this._c,this._b+=t.y*this._d,this._c+=t.x*n,this._d+=t.x*i,e&&this.translate(e.negate()),this._changed(),this},skew:function(){var t=_.read(arguments),e=_.read(arguments,0,{readNull:!0}),n=Math.PI/180,i=new _(Math.tan(t.x*n),Math.tan(t.y*n));return this.shear(i,e)},append:function(t,e){if(t){var n=this._a,i=this._b,r=this._c,s=this._d,a=t._a,o=t._c,h=t._b,u=t._d,l=t._tx,c=t._ty;this._a=a*n+h*r,this._c=o*n+u*r,this._b=a*i+h*s,this._d=o*i+u*s,this._tx+=l*n+c*r,this._ty+=l*i+c*s,e||this._changed()}return this},prepend:function(t,e){if(t){var n=this._a,i=this._b,r=this._c,s=this._d,a=this._tx,o=this._ty,h=t._a,u=t._c,l=t._b,c=t._d,f=t._tx,d=t._ty;this._a=h*n+u*i,this._c=h*r+u*s,this._b=l*n+c*i,this._d=l*r+c*s,this._tx=h*a+u*o+f,this._ty=l*a+c*o+d,e||this._changed()}return this},appended:function(t){return this.clone().append(t)},prepended:function(t){return this.clone().prepend(t)},invert:function(){var t=this._a,e=this._b,n=this._c,i=this._d,r=this._tx,s=this._ty,a=t*i-e*n,o=null;return a&&!isNaN(a)&&isFinite(r)&&isFinite(s)&&(this._a=i/a,this._b=-e/a,this._c=-n/a,this._d=t/a,this._tx=(n*s-i*r)/a,this._ty=(e*r-t*s)/a,o=this),o},inverted:function(){return this.clone().invert()},concatenate:"#append",preConcatenate:"#prepend",chain:"#appended",_shiftless:function(){return new C(this._a,this._b,this._c,this._d,0,0)},_orNullIfIdentity:function(){return this.isIdentity()?null:this},isIdentity:function(){return 1===this._a&&0===this._b&&0===this._c&&1===this._d&&0===this._tx&&0===this._ty},isInvertible:function(){var t=this._a*this._d-this._c*this._b;return t&&!isNaN(t)&&isFinite(this._tx)&&isFinite(this._ty)},isSingular:function(){return!this.isInvertible()},transform:function(t,e,n){return arguments.length<3?this._transformPoint(_.read(arguments)):this._transformCoordinates(t,e,n)},_transformPoint:function(t,e,n){var i=t.x,r=t.y;return e||(e=new _),e._set(i*this._a+r*this._c+this._tx,i*this._b+r*this._d+this._ty,n)},_transformCoordinates:function(t,e,n){for(var i=0,r=2*n;i<r;i+=2){var s=t[i],a=t[i+1];e[i]=s*this._a+a*this._c+this._tx,e[i+1]=s*this._b+a*this._d+this._ty}return e},_transformCorners:function(t){var e=t.x,n=t.y,i=e+t.width,r=n+t.height,s=[e,n,i,n,i,r,e,r];return this._transformCoordinates(s,s,4)},_transformBounds:function(t,e,n){for(var i=this._transformCorners(t),r=i.slice(0,2),s=r.slice(),a=2;a<8;a++){var o=i[a],h=1&a;o<r[h]?r[h]=o:o>s[h]&&(s[h]=o)}return e||(e=new w),e._set(r[0],r[1],s[0]-r[0],s[1]-r[1],n)},inverseTransform:function(){return this._inverseTransform(_.read(arguments))},_inverseTransform:function(t,e,n){var i=this._a,r=this._b,s=this._c,a=this._d,o=this._tx,h=this._ty,u=i*a-r*s,l=null;if(u&&!isNaN(u)&&isFinite(o)&&isFinite(h)){var c=t.x-this._tx,f=t.y-this._ty;e||(e=new _),l=e._set((c*a-f*s)/u,(f*i-c*r)/u,n)}return l},decompose:function(){var t,e,n,i=this._a,r=this._b,s=this._c,a=this._d,o=i*a-r*s,h=Math.sqrt,u=Math.atan2,l=180/Math.PI;if(0!==i||0!==r){var c=h(i*i+r*r);t=Math.acos(i/c)*(r>0?1:-1),e=[c,o/c],n=[u(i*s+r*a,c*c),0]}else if(0!==s||0!==a){var f=h(s*s+a*a);t=Math.asin(s/f)*(a>0?1:-1),e=[o/f,f],n=[0,u(i*s+r*a,f*f)]}else t=0,n=e=[0,0];return{translation:this.getTranslation(),rotation:t*l,scaling:new _(e),skewing:new _(n[0]*l,n[1]*l)}},getValues:function(){return[this._a,this._b,this._c,this._d,this._tx,this._ty]},getTranslation:function(){return new _(this._tx,this._ty)},getScaling:function(){return this.decompose().scaling},getRotation:function(){return this.decompose().rotation},applyToContext:function(t){this.isIdentity()||t.transform(this._a,this._b,this._c,this._d,this._tx,this._ty)}},l.each(["a","b","c","d","tx","ty"],function(t){var e=l.capitalize(t),n="_"+t;this["get"+e]=function(){return this[n]},this["set"+e]=function(t){this[n]=t,this._changed()}},{})),S=l.extend({_class:"Line",initialize:function(t,e,n,i,r){var s=!1;arguments.length>=4?(this._px=t,this._py=e,this._vx=n,this._vy=i,s=r):(this._px=t.x,this._py=t.y,this._vx=e.x,this._vy=e.y,s=n),s||(this._vx-=this._px,this._vy-=this._py)},getPoint:function(){return new _(this._px,this._py)},getVector:function(){return new _(this._vx,this._vy)},getLength:function(){return this.getVector().getLength()},intersect:function(t,e){return S.intersect(this._px,this._py,this._vx,this._vy,t._px,t._py,t._vx,t._vy,!0,e)},getSide:function(t,e){return S.getSide(this._px,this._py,this._vx,this._vy,t.x,t.y,!0,e)},getDistance:function(t){return Math.abs(this.getSignedDistance(t))},getSignedDistance:function(t){return S.getSignedDistance(this._px,this._py,this._vx,this._vy,t.x,t.y,!0)},isCollinear:function(t){return _.isCollinear(this._vx,this._vy,t._vx,t._vy)},isOrthogonal:function(t){return _.isOrthogonal(this._vx,this._vy,t._vx,t._vy)},statics:{intersect:function(t,e,n,i,r,s,a,o,h,u){h||(n-=t,i-=e,a-=r,o-=s);var l=n*o-i*a;if(!g.isZero(l)){var c=t-r,f=e-s,d=(a*f-o*c)/l,p=(n*f-i*c)/l;if(u||-1e-12<d&&d<1+1e-12&&-1e-12<p&&p<1+1e-12)return u||(d=d<=0?0:d>=1?1:d),new _(t+d*n,e+d*i)}},getSide:function(t,e,n,i,r,s,a,o){a||(n-=t,i-=e);var h=r-t,u=h*i-(s-e)*n;return!o&&g.isZero(u)&&(u=(h*n+h*n)/(n*n+i*i))>=0&&u<=1&&(u=0),u<0?-1:u>0?1:0},getSignedDistance:function(t,e,n,i,r,s,a){return a||(n-=t,i-=e),0===n?i>0?r-t:t-r:0===i?n<0?s-e:e-s:((r-t)*i-(s-e)*n)/Math.sqrt(n*n+i*i)},getDistance:function(t,e,n,i,r,s,a){return Math.abs(S.getSignedDistance(t,e,n,i,r,s,a))}}}),k=d.extend({_class:"Project",_list:"projects",_reference:"project",_compactSerialize:!0,initialize:function(t){d.call(this,!0),this._children=[],this._namedChildren={},this._activeLayer=null,this._currentStyle=new Z(null,null,this),this._view=K.create(this,t||ot.getCanvas(1,1)),this._selectionItems={},this._selectionCount=0,this._updateVersion=0},_serialize:function(t,e){return l.serialize(this._children,t,!0,e)},_changed:function(t,e){if(1&t){var n=this._view;n&&(n._needsUpdate=!0,!n._requested&&n._autoUpdate&&n.requestUpdate())}var i=this._changes;if(i&&e){var r=this._changesById,s=e._id,a=r[s];a?a.flags|=t:i.push(r[s]={item:e,flags:t})}},clear:function(){for(var t=this._children,e=t.length-1;e>=0;e--)t[e].remove()},isEmpty:function(){return!this._children.length},remove:function t(){return!!t.base.call(this)&&(this._view&&this._view.remove(),!0)},getView:function(){return this._view},getCurrentStyle:function(){return this._currentStyle},setCurrentStyle:function(t){this._currentStyle.set(t)},getIndex:function(){return this._index},getOptions:function(){return this._scope.settings},getLayers:function(){return this._children},getActiveLayer:function(){return this._activeLayer||new E({project:this,insert:!0})},getSymbolDefinitions:function(){var t=[],e={};return this.getItems({class:N,match:function(n){var i=n._definition,r=i._id;return e[r]||(e[r]=!0,t.push(i)),!1}}),t},getSymbols:"getSymbolDefinitions",getSelectedItems:function(){var t=this._selectionItems,e=[];for(var n in t){var i=t[n],r=i._selection;1&r&&i.isInserted()?e.push(i):r||this._updateSelection(i)}return e},_updateSelection:function(t){var e=t._id,n=this._selectionItems;t._selection?n[e]!==t&&(this._selectionCount++,n[e]=t):n[e]===t&&(this._selectionCount--,delete n[e])},selectAll:function(){for(var t=this._children,e=0,n=t.length;e<n;e++)t[e].setFullySelected(!0)},deselectAll:function(){var t=this._selectionItems;for(var e in t)t[e].setFullySelected(!1)},addLayer:function(t){return this.insertLayer(o,t)},insertLayer:function(t,e){if(e instanceof E){e._remove(!1,!0),l.splice(this._children,[e],t,0),e._setProject(this,!0);var n=e._name;n&&e.setName(n),this._changes&&e._changed(5),this._activeLayer||(this._activeLayer=e)}else e=null;return e},_insertItem:function(t,e,n){return e=this.insertLayer(t,e)||(this._activeLayer||this._insertItem(o,new E(T.NO_INSERT),!0)).insertChild(t,e),n&&e.activate&&e.activate(),e},getItems:function(t){return T._getItems(this,t)},getItem:function(t){return T._getItems(this,t,null,null,!0)[0]||null},importJSON:function(t){this.activate();var e=this._activeLayer;return l.importJSON(t,e&&e.isEmpty()&&e)},removeOn:function(t){var e=this._removeSets;if(e){"mouseup"===t&&(e.mousedrag=null);var n=e[t];if(n){for(var i in n){var r=n[i];for(var s in e){var a=e[s];a&&a!=n&&delete a[r._id]}r.remove()}e[t]=null}}},draw:function(t,e,n){this._updateVersion++,t.save(),e.applyToContext(t);for(var i=this._children,r=new l({offset:new _(0,0),pixelRatio:n,viewMatrix:e.isIdentity()?null:e,matrices:[new C],updateMatrix:!0}),s=0,a=i.length;s<a;s++)i[s].draw(t,r);if(t.restore(),this._selectionCount>0){t.save(),t.strokeWidth=1;var o=this._selectionItems,h=this._scope.settings.handleSize,u=this._updateVersion;for(var c in o)o[c]._drawSelection(t,e,h,o,u);t.restore()}}}),T=l.extend(c,{statics:{extend:function t(e){return e._serializeFields&&(e._serializeFields=l.set({},this.prototype._serializeFields,e._serializeFields)),t.base.apply(this,arguments)},NO_INSERT:{insert:!1}},_class:"Item",_name:null,_applyMatrix:!0,_canApplyMatrix:!0,_canScaleStroke:!1,_pivot:null,_visible:!0,_blendMode:"normal",_opacity:1,_locked:!1,_guide:!1,_clipMask:!1,_selection:0,_selectBounds:!0,_selectChildren:!1,_serializeFields:{name:null,applyMatrix:null,matrix:new C,pivot:null,visible:!0,blendMode:"normal",opacity:1,locked:!1,guide:!1,clipMask:!1,selected:!1,data:{}},_prioritize:["applyMatrix"]},new function(){var t=["onMouseDown","onMouseUp","onMouseDrag","onClick","onDoubleClick","onMouseMove","onMouseEnter","onMouseLeave"];return l.each(t,function(t){this._events[t]={install:function(t){this.getView()._countItemEvent(t,1)},uninstall:function(t){this.getView()._countItemEvent(t,-1)}}},{_events:{onFrame:{install:function(){this.getView()._animateItem(this,!0)},uninstall:function(){this.getView()._animateItem(this,!1)}},onLoad:{},onError:{}},statics:{_itemHandlers:t}})},{initialize:function(){},_initialize:function(t,e){var n=t&&l.isPlainObject(t),i=n&&!0===t.internal,r=this._matrix=new C,s=n&&t.project||ct.project,a=ct.settings;return this._id=i?null:v.get(),this._parent=this._index=null,this._applyMatrix=this._canApplyMatrix&&a.applyMatrix,e&&r.translate(e),r._owner=this,this._style=new Z(s._currentStyle,this,s),i||n&&0==t.insert||!a.insertItems&&(!n||!0!==t.insert)?this._setProject(s):(n&&t.parent||s)._insertItem(o,this,!0),n&&t!==T.NO_INSERT&&this.set(t,{internal:!0,insert:!0,project:!0,parent:!0}),n},_serialize:function(t,e){var n={},i=this;function r(r){for(var s in r){var a=i[s];l.equals(a,"leading"===s?1.2*r.fontSize:r[s])||(n[s]=l.serialize(a,t,"data"!==s,e))}}return r(this._serializeFields),this instanceof A||r(this._style._defaults),[this._class,n]},_changed:function(t){var e=this._symbol,n=this._parent||e,i=this._project;8&t&&(this._bounds=this._position=this._decomposed=o),16&t&&(this._globalMatrix=o),n&&72&t&&T._clearBoundsCache(n),2&t&&T._clearBoundsCache(this),i&&i._changed(t,this),e&&e._changed(t)},getId:function(){return this._id},getName:function(){return this._name},setName:function(t){if(this._name&&this._removeNamed(),t===+t+"")throw new Error("Names consisting only of numbers are not supported.");var e=this._getOwner();if(t&&e){var n=e._children,i=e._namedChildren;(i[t]=i[t]||[]).push(this),t in n||(n[t]=this)}this._name=t||o,this._changed(256)},getStyle:function(){return this._style},setStyle:function(t){this.getStyle().set(t)}},l.each(["locked","visible","blendMode","opacity","guide"],function(t){var e=l.capitalize(t),n="_"+t,i={locked:256,visible:265};this["get"+e]=function(){return this[n]},this["set"+e]=function(e){e!=this[n]&&(this[n]=e,this._changed(i[t]||257))}},{}),{beans:!0,getSelection:function(){return this._selection},setSelection:function(t){if(t!==this._selection){this._selection=t;var e=this._project;e&&(e._updateSelection(this),this._changed(257))}},_changeSelection:function(t,e){var n=this._selection;this.setSelection(e?n|t:n&~t)},isSelected:function(){if(this._selectChildren)for(var t=this._children,e=0,n=t.length;e<n;e++)if(t[e].isSelected())return!0;return!!(1&this._selection)},setSelected:function(t){if(this._selectChildren)for(var e=this._children,n=0,i=e.length;n<i;n++)e[n].setSelected(t);this._changeSelection(1,t)},isFullySelected:function(){var t=this._children,e=!!(1&this._selection);if(t&&e){for(var n=0,i=t.length;n<i;n++)if(!t[n].isFullySelected())return!1;return!0}return e},setFullySelected:function(t){var e=this._children;if(e)for(var n=0,i=e.length;n<i;n++)e[n].setFullySelected(t);this._changeSelection(1,t)},isClipMask:function(){return this._clipMask},setClipMask:function(t){this._clipMask!=(t=!!t)&&(this._clipMask=t,t&&(this.setFillColor(null),this.setStrokeColor(null)),this._changed(257),this._parent&&this._parent._changed(2048))},getData:function(){return this._data||(this._data={}),this._data},setData:function(t){this._data=t},getPosition:function(t){var e=t?_:m,n=this._position||(this._position=this._getPositionFromBounds());return new e(n.x,n.y,this,"setPosition")},setPosition:function(){this.translate(_.read(arguments).subtract(this.getPosition(!0)))},_getPositionFromBounds:function(t){return this._pivot?this._matrix._transformPoint(this._pivot):(t||this.getBounds()).getCenter(!0)},getPivot:function(){var t=this._pivot;return t?new m(t.x,t.y,this,"setPivot"):null},setPivot:function(){this._pivot=_.read(arguments,0,{clone:!0,readNull:!0}),this._position=o}},l.each({getStrokeBounds:{stroke:!0},getHandleBounds:{handle:!0},getInternalBounds:{internal:!0}},function(t,e){this[e]=function(e){return this.getBounds(e,t)}},{beans:!0,getBounds:function(t,e){var n=e||t instanceof C,i=l.set({},n?e:t,this._boundsOptions);i.stroke&&!this.getStrokeScaling()||(i.cacheItem=this);var r=this._getCachedBounds(n&&t,i).rect;return arguments.length?r:new b(r.x,r.y,r.width,r.height,this,"setBounds")},setBounds:function(){var t=w.read(arguments),e=this.getBounds(),n=this._matrix,i=new C,r=t.getCenter();i.translate(r),t.width==e.width&&t.height==e.height||(n.isInvertible()||(n.set(n._backup||(new C).translate(n.getTranslation())),e=this.getBounds()),i.scale(0!==e.width?t.width/e.width:0,0!==e.height?t.height/e.height:0)),r=e.getCenter(),i.translate(-r.x,-r.y),this.transform(i)},_getBounds:function(t,e){var n=this._children;return n&&n.length?(T._updateBoundsCache(this,e.cacheItem),T._getBounds(n,t,e)):new w},_getBoundsCacheKey:function(t,e){return[t.stroke?1:0,t.handle?1:0,e?1:0].join("")},_getCachedBounds:function(t,e,n){t=t&&t._orNullIfIdentity();var i=e.internal&&!n,r=e.cacheItem,s=i?null:this._matrix._orNullIfIdentity(),a=r&&(!t||t.equals(s))&&this._getBoundsCacheKey(e,i),o=this._bounds;if(T._updateBoundsCache(this._parent||this._symbol,r),a&&o&&a in o)return{rect:(f=o[a]).rect.clone(),nonscaling:f.nonscaling};var h=this._getBounds(t||s,e),u=h.rect||h,l=this._style,c=h.nonscaling||l.hasStroke()&&!l.getStrokeScaling();if(a){o||(this._bounds=o={});var f=o[a]={rect:u.clone(),nonscaling:c,internal:i}}return{rect:u,nonscaling:c}},_getStrokeMatrix:function(t,e){var n=this.getStrokeScaling()?null:e&&e.internal?this:this._parent||this._symbol&&this._symbol._item,i=n?n.getViewMatrix().invert():t;return i&&i._shiftless()},statics:{_updateBoundsCache:function(t,e){if(t&&e){var n=e._id,i=t._boundsCache=t._boundsCache||{ids:{},list:[]};i.ids[n]||(i.list.push(e),i.ids[n]=e)}},_clearBoundsCache:function(t){var e=t._boundsCache;if(e){t._bounds=t._position=t._boundsCache=o;for(var n=0,i=e.list,r=i.length;n<r;n++){var s=i[n];s!==t&&(s._bounds=s._position=o,s._boundsCache&&T._clearBoundsCache(s))}}},_getBounds:function(t,e,n){var i=1/0,r=-i,s=i,a=r,o=!1;n=n||{};for(var h=0,u=t.length;h<u;h++){var l=t[h];if(l._visible&&!l.isEmpty()){var c=l._getCachedBounds(e&&e.appended(l._matrix),n,!0),f=c.rect;i=Math.min(f.x,i),s=Math.min(f.y,s),r=Math.max(f.x+f.width,r),a=Math.max(f.y+f.height,a),c.nonscaling&&(o=!0)}}return{rect:isFinite(i)?new w(i,s,r-i,a-s):new w,nonscaling:o}}}}),{beans:!0,_decompose:function(){return this._applyMatrix?null:this._decomposed||(this._decomposed=this._matrix.decompose())},getRotation:function(){var t=this._decompose();return t?t.rotation:0},setRotation:function(t){var e=this.getRotation();if(null!=e&&null!=t){var n=this._decomposed;this.rotate(t-e),n&&(n.rotation=t,this._decomposed=n)}},getScaling:function(){var t=this._decompose(),e=t&&t.scaling;return new m(e?e.x:1,e?e.y:1,this,"setScaling")},setScaling:function(){var t=this.getScaling(),e=_.read(arguments,0,{clone:!0,readNull:!0});if(t&&e&&!t.equals(e)){var n=this.getRotation(),i=this._decomposed,r=new C,s=this.getPosition(!0);r.translate(s),n&&r.rotate(n),r.scale(e.x/t.x,e.y/t.y),n&&r.rotate(-n),r.translate(s.negate()),this.transform(r),i&&(i.scaling=e,this._decomposed=i)}},getMatrix:function(){return this._matrix},setMatrix:function(){var t=this._matrix;t.initialize.apply(t,arguments)},getGlobalMatrix:function(t){var e=this._globalMatrix;if(e)for(var n=this._parent,i=[];n;){if(!n._globalMatrix){e=null;for(var r=0,s=i.length;r<s;r++)i[r]._globalMatrix=null;break}i.push(n),n=n._parent}e||(e=this._globalMatrix=this._matrix.clone(),(n=this._parent)&&e.prepend(n.getGlobalMatrix(!0)));return t?e:e.clone()},getViewMatrix:function(){return this.getGlobalMatrix().prepend(this.getView()._matrix)},getApplyMatrix:function(){return this._applyMatrix},setApplyMatrix:function(t){(this._applyMatrix=this._canApplyMatrix&&!!t)&&this.transform(null,!0)},getTransformContent:"#getApplyMatrix",setTransformContent:"#setApplyMatrix"},{getProject:function(){return this._project},_setProject:function(t,e){if(this._project!==t){this._project&&this._installEvents(!1),this._project=t;for(var n=this._children,i=0,r=n&&n.length;i<r;i++)n[i]._setProject(t);e=!0}e&&this._installEvents(!0)},getView:function(){return this._project._view},_installEvents:function t(e){t.base.call(this,e);for(var n=this._children,i=0,r=n&&n.length;i<r;i++)n[i]._installEvents(e)},getLayer:function(){for(var t=this;t=t._parent;)if(t instanceof E)return t;return null},getParent:function(){return this._parent},setParent:function(t){return t.addChild(this)},_getOwner:"#getParent",getChildren:function(){return this._children},setChildren:function(t){this.removeChildren(),this.addChildren(t)},getFirstChild:function(){return this._children&&this._children[0]||null},getLastChild:function(){return this._children&&this._children[this._children.length-1]||null},getNextSibling:function(){var t=this._getOwner();return t&&t._children[this._index+1]||null},getPreviousSibling:function(){var t=this._getOwner();return t&&t._children[this._index-1]||null},getIndex:function(){return this._index},equals:function(t){return t===this||t&&this._class===t._class&&this._style.equals(t._style)&&this._matrix.equals(t._matrix)&&this._locked===t._locked&&this._visible===t._visible&&this._blendMode===t._blendMode&&this._opacity===t._opacity&&this._clipMask===t._clipMask&&this._guide===t._guide&&this._equals(t)||!1},_equals:function(t){return l.equals(this._children,t._children)},clone:function(t){var e=new this.constructor(T.NO_INSERT),n=this._children,i=l.pick(t?t.insert:o,t===o||!0===t),r=l.pick(t?t.deep:o,!0);n&&e.copyAttributes(this),n&&!r||e.copyContent(this),n||e.copyAttributes(this),i&&e.insertAbove(this);var s=this._name,a=this._parent;if(s&&a){n=a._children;for(var h=s,u=1;n[s];)s=h+" "+u++;s!==h&&e.setName(s)}return e},copyContent:function(t){for(var e=t._children,n=0,i=e&&e.length;n<i;n++)this.addChild(e[n].clone(!1),!0)},copyAttributes:function(t,e){this.setStyle(t._style);for(var n=["_locked","_visible","_blendMode","_opacity","_clipMask","_guide"],i=0,r=n.length;i<r;i++){var s=n[i];t.hasOwnProperty(s)&&(this[s]=t[s])}e||this._matrix.set(t._matrix,!0),this.setApplyMatrix(t._applyMatrix),this.setPivot(t._pivot),this.setSelection(t._selection);var a=t._data,o=t._name;this._data=a?l.clone(a):null,o&&this.setName(o)},rasterize:function(t,e){var n=this.getStrokeBounds(),i=(t||this.getView().getResolution())/72,r=n.getTopLeft().floor(),s=n.getBottomRight().ceil(),a=new y(s.subtract(r)),h=new I(T.NO_INSERT);if(!a.isZero()){var u=ot.getCanvas(a.multiply(i)),c=u.getContext("2d"),f=(new C).scale(i).translate(r.negate());c.save(),f.applyToContext(c),this.draw(c,new l({matrices:[f]})),c.restore(),h.setCanvas(u)}return h.transform((new C).translate(r.add(a.divide(2))).scale(1/i)),(e===o||e)&&h.insertAbove(this),h},contains:function(){return!!this._contains(this._matrix._inverseTransform(_.read(arguments)))},_contains:function(t){var e=this._children;if(e){for(var n=e.length-1;n>=0;n--)if(e[n].contains(t))return!0;return!1}return t.isInside(this.getInternalBounds())},isInside:function(){return w.read(arguments).contains(this.getBounds())},_asPathItem:function(){return new V.Rectangle({rectangle:this.getInternalBounds(),matrix:this._matrix,insert:!1})},intersects:function(t,e){return t instanceof T&&this._asPathItem().getIntersections(t._asPathItem(),null,e,!0).length>0}},new function(){function t(){return this._hitTest(_.read(arguments),M.getOptions(arguments))}function e(){var t=_.read(arguments),e=M.getOptions(arguments),n=[];return this._hitTest(t,l.set({all:n},e)),n}function n(t,e,n,i){var r=this._children;if(r)for(var s=r.length-1;s>=0;s--){var a=r[s],o=a!==i&&a._hitTest(t,e,n);if(o&&!e.all)return o}return null}return k.inject({hitTest:t,hitTestAll:e,_hitTest:n}),{hitTest:t,hitTestAll:e,_hitTestChildren:n}},{_hitTest:function(t,e,n){if(this._locked||!this._visible||this._guide&&!e.guides||this.isEmpty())return null;var i=this._matrix,r=n?n.appended(i):this.getGlobalMatrix().prepend(this.getView()._matrix),s=Math.max(e.tolerance,1e-12),a=e._tolerancePadding=new y(V._getStrokePadding(s,i._shiftless().invert()));if(!(t=i._inverseTransform(t))||!this._children&&!this.getBounds({internal:!0,stroke:!0,handle:!0}).expand(a.multiply(2))._containsPoint(t))return null;var o,h,u=!(e.guides&&!this._guide||e.selected&&!this.isSelected()||e.type&&e.type!==l.hyphenate(this._class)||e.class&&!(this instanceof e.class)),c=e.match,f=this;function d(t){return t&&c&&!c(t)&&(t=null),t&&e.all&&e.all.push(t),t}function p(e,n){var i=n?o["get"+n]():f.getPosition();if(t.subtract(i).divide(a).length<=1)return new M(e,f,{name:n?l.hyphenate(n):e,point:i})}var g=e.position,v=e.center,_=e.bounds;if(u&&this._parent&&(g||v||_)){if((v||_)&&(o=this.getInternalBounds()),!(h=g&&p("position")||v&&p("center","Center"))&&_)for(var m=["TopLeft","TopRight","BottomLeft","BottomRight","LeftCenter","TopCenter","RightCenter","BottomCenter"],x=0;x<8&&!h;x++)h=p("bounds",m[x]);h=d(h)}return h||(h=this._hitTestChildren(t,e,r)||u&&d(this._hitTestSelf(t,e,r,this.getStrokeScaling()?null:r._shiftless().invert()))||null),h&&h.point&&(h.point=i.transform(h.point)),h},_hitTestSelf:function(t,e){if(e.fill&&this.hasFill()&&this._contains(t))return new M("fill",this)},matches:function(t,e){var n=typeof t;if("object"===n){for(var i in t)if(t.hasOwnProperty(i)&&!this.matches(i,t[i]))return!1;return!0}if("function"===n)return t(this);if("match"===t)return e(this);var r=/^(empty|editable)$/.test(t)?this["is"+l.capitalize(t)]():"type"===t?l.hyphenate(this._class):this[t];if("class"===t){if("function"==typeof e)return this instanceof e;r=this._class}if("function"==typeof e)return!!e(r);if(e){if(e.test)return e.test(r);if(l.isPlainObject(e))return function t(e,n){for(var i in e)if(e.hasOwnProperty(i)){var r=e[i],s=n[i];if(l.isPlainObject(r)&&l.isPlainObject(s)){if(!t(r,s))return!1}else if(!l.equals(r,s))return!1}return!0}(e,r)}return l.equals(r,e)},getItems:function(t){return T._getItems(this,t,this._matrix)},getItem:function(t){return T._getItems(this,t,this._matrix,null,!0)[0]||null},statics:{_getItems:function t(e,n,i,r,s){if(!r){var a="object"==typeof n&&n,o=a&&a.overlapping,h=a&&a.inside,u=(m=o||h)&&w.read([m]);r={items:[],recursive:a&&!1!==a.recursive,inside:!!h,overlapping:!!o,rect:u,path:o&&new V.Rectangle({rectangle:u,insert:!1})},a&&(n=l.filter({},n,{recursive:!0,inside:!0,overlapping:!0}))}var c=e._children,f=r.items;i=(u=r.rect)&&(i||new C);for(var d=0,p=c&&c.length;d<p;d++){var g=c[d],v=i&&i.appended(g._matrix),_=!0;if(u){var m=g.getBounds(v);if(!u.intersects(m))continue;u.contains(m)||r.overlapping&&(m.contains(u)||r.path.intersects(g,v))||(_=!1)}if(_&&g.matches(n)&&(f.push(g),s))break;if(!1!==r.recursive&&t(g,n,v,r,s),s&&f.length>0)break}return f}}},{importJSON:function(t){var e=l.importJSON(t,this);return e!==this?this.addChild(e):e},addChild:function(t){return this.insertChild(o,t)},insertChild:function(t,e){var n=e?this.insertChildren(t,[e]):null;return n&&n[0]},addChildren:function(t){return this.insertChildren(this._children.length,t)},insertChildren:function(t,e){var n=this._children;if(n&&e&&e.length>0){for(var i={},r=(e=l.slice(e)).length-1;r>=0;r--){var s=(u=e[r])&&u._id;!u||i[s]?e.splice(r,1):(u._remove(!1,!0),i[s]=!0)}l.splice(n,e,t,0);for(var a=this._project,o=a._changes,h=(r=0,e.length);r<h;r++){var u,c=(u=e[r])._name;u._parent=this,u._setProject(a,!0),c&&u.setName(c),o&&u._changed(5)}this._changed(11)}else e=null;return e},_insertItem:"#insertChild",_insertAt:function(t,e){var n=t&&t._getOwner(),i=t!==this&&n?this:null;return i&&(i._remove(!1,!0),n._insertItem(t._index+e,i)),i},insertAbove:function(t){return this._insertAt(t,1)},insertBelow:function(t){return this._insertAt(t,0)},sendToBack:function(){var t=this._getOwner();return t?t._insertItem(0,this):null},bringToFront:function(){var t=this._getOwner();return t?t._insertItem(o,this):null},appendTop:"#addChild",appendBottom:function(t){return this.insertChild(0,t)},moveAbove:"#insertAbove",moveBelow:"#insertBelow",addTo:function(t){return t._insertItem(o,this)},copyTo:function(t){return this.clone(!1).addTo(t)},reduce:function(t){var e=this._children;if(e&&1===e.length){var n=e[0].reduce(t);return this._parent?(n.insertAbove(this),this.remove()):n.remove(),n}return this},_removeNamed:function(){var t=this._getOwner();if(t){var e=t._children,n=t._namedChildren,i=this._name,r=n[i],s=r?r.indexOf(this):-1;-1!==s&&(e[i]==this&&delete e[i],r.splice(s,1),r.length?e[i]=r[0]:delete n[i])}},_remove:function(t,e){var n=this._getOwner(),i=this._project,r=this._index;return this._style&&this._style._dispose(),!!n&&(this._name&&this._removeNamed(),null!=r&&(i._activeLayer===this&&(i._activeLayer=this.getNextSibling()||this.getPreviousSibling()),l.splice(n._children,null,r,1)),this._installEvents(!1),t&&i._changes&&this._changed(5),e&&n._changed(11,this),this._parent=null,!0)},remove:function(){return this._remove(!0,!0)},replaceWith:function(t){var e=t&&t.insertBelow(this);return e&&this.remove(),e},removeChildren:function(t,e){if(!this._children)return null;t=t||0,e=l.pick(e,this._children.length);for(var n=l.splice(this._children,null,t,e-t),i=n.length-1;i>=0;i--)n[i]._remove(!0,!1);return n.length>0&&this._changed(11),n},clear:"#removeChildren",reverseChildren:function(){if(this._children){this._children.reverse();for(var t=0,e=this._children.length;t<e;t++)this._children[t]._index=t;this._changed(11)}},isEmpty:function(){var t=this._children;return!t||!t.length},isEditable:function(){for(var t=this;t;){if(!t._visible||t._locked)return!1;t=t._parent}return!0},hasFill:function(){return this.getStyle().hasFill()},hasStroke:function(){return this.getStyle().hasStroke()},hasShadow:function(){return this.getStyle().hasShadow()},_getOrder:function(t){function e(t){var e=[];do{e.unshift(t)}while(t=t._parent);return e}for(var n=e(this),i=e(t),r=0,s=Math.min(n.length,i.length);r<s;r++)if(n[r]!=i[r])return n[r]._index<i[r]._index?1:-1;return 0},hasChildren:function(){return this._children&&this._children.length>0},isInserted:function(){return!!this._parent&&this._parent.isInserted()},isAbove:function(t){return-1===this._getOrder(t)},isBelow:function(t){return 1===this._getOrder(t)},isParent:function(t){return this._parent===t},isChild:function(t){return t&&t._parent===this},isDescendant:function(t){for(var e=this;e=e._parent;)if(e===t)return!0;return!1},isAncestor:function(t){return!!t&&t.isDescendant(this)},isSibling:function(t){return this._parent===t._parent},isGroupedWith:function(t){for(var e=this._parent;e;){if(e._parent&&/^(Group|Layer|CompoundPath)$/.test(e._class)&&t.isDescendant(e))return!0;e=e._parent}return!1}},l.each(["rotate","scale","shear","skew"],function(t){var e="rotate"===t;this[t]=function(){var n=(e?l:_).read(arguments),i=_.read(arguments,0,{readNull:!0});return this.transform((new C)[t](n,i||this.getPosition(!0)))}},{translate:function(){var t=new C;return this.transform(t.translate.apply(t,arguments))},transform:function(t,e,n,i){var r=this._matrix,s=t&&!t.isIdentity(),a=(e||this._applyMatrix)&&(!r.isIdentity()||s||e&&n&&this._children);if(!s&&!a)return this;if(s){!t.isInvertible()&&r.isInvertible()&&(r._backup=r.getValues()),r.prepend(t,!0);var o=this._style,h=o.getFillColor(!0),u=o.getStrokeColor(!0);h&&h.transform(t),u&&u.transform(t)}if(a&&(a=this._transformContent(r,n,i))){var l=this._pivot;l&&r._transformPoint(l,l,!0),r.reset(!0),i&&this._canApplyMatrix&&(this._applyMatrix=!0)}var c=this._bounds,f=this._position;(s||a)&&this._changed(25);var d=s&&c&&t.decompose();if(d&&d.skewing.isZero()&&d.rotation%90==0){for(var p in c){var g=c[p];if(g.nonscaling)delete c[p];else if(a||!g.internal){var v=g.rect;t._transformBounds(v,v)}}this._bounds=c;var _=c[this._getBoundsCacheKey(this._boundsOptions||{})];_&&(this._position=this._getPositionFromBounds(_.rect))}else s&&f&&this._pivot&&(this._position=t._transformPoint(f,f));return this},_transformContent:function(t,e,n){var i=this._children;if(i){for(var r=0,s=i.length;r<s;r++)i[r].transform(t,!0,e,n);return!0}},globalToLocal:function(){return this.getGlobalMatrix(!0)._inverseTransform(_.read(arguments))},localToGlobal:function(){return this.getGlobalMatrix(!0)._transformPoint(_.read(arguments))},parentToLocal:function(){return this._matrix._inverseTransform(_.read(arguments))},localToParent:function(){return this._matrix._transformPoint(_.read(arguments))},fitBounds:function(t,e){t=w.read(arguments);var n=this.getBounds(),i=n.height/n.width,r=t.height/t.width,s=(e?i>r:i<r)?t.width/n.width:t.height/n.height,a=new w(new _,new y(n.width*s,n.height*s));a.setCenter(t.getCenter()),this.setBounds(a)}}),{_setStyles:function(t,e,n){var i=this._style,r=this._matrix;if(i.hasFill()&&(t.fillStyle=i.getFillColor().toCanvasStyle(t,r)),i.hasStroke()){t.strokeStyle=i.getStrokeColor().toCanvasStyle(t,r),t.lineWidth=i.getStrokeWidth();var s=i.getStrokeJoin(),a=i.getStrokeCap(),o=i.getMiterLimit();if(s&&(t.lineJoin=s),a&&(t.lineCap=a),o&&(t.miterLimit=o),ct.support.nativeDash){var h=i.getDashArray(),u=i.getDashOffset();h&&h.length&&("setLineDash"in t?(t.setLineDash(h),t.lineDashOffset=u):(t.mozDash=h,t.mozDashOffset=u))}}if(i.hasShadow()){var l=e.pixelRatio||1,c=n._shiftless().prepend((new C).scale(l,l)),f=c.transform(new _(i.getShadowBlur(),0)),d=c.transform(this.getShadowOffset());t.shadowColor=i.getShadowColor().toCanvasStyle(t),t.shadowBlur=f.getLength(),t.shadowOffsetX=d.x,t.shadowOffsetY=d.y}},draw:function(t,e,n){this._updateVersion=this._project._updateVersion;if(this._visible&&0!==this._opacity){var i=e.matrices,r=e.viewMatrix,s=this._matrix,a=i[i.length-1].appended(s);if(a.isInvertible()){r=r?r.appended(a):a,i.push(a),e.updateMatrix&&(this._globalMatrix=a);var o,h,u,l=this._blendMode,c=this._opacity,f="normal"===l,d=ht.nativeModes[l],p=f&&1===c||e.dontStart||e.clip||(d||f&&c<1)&&this._canComposite(),g=e.pixelRatio||1;if(!p){var v=this.getStrokeBounds(r);if(!v.width||!v.height)return void i.pop();u=e.offset,h=e.offset=v.getTopLeft().floor(),o=t,t=ot.getContext(v.getSize().ceil().add(1).multiply(g)),1!==g&&t.scale(g,g)}t.save();var _=n?n.appended(s):this._canScaleStroke&&!this.getStrokeScaling(!0)&&r,m=!p&&e.clipItem,y=!_||m;if(p?(t.globalAlpha=c,d&&(t.globalCompositeOperation=l)):y&&t.translate(-h.x,-h.y),y&&(p?s:r).applyToContext(t),m&&e.clipItem.draw(t,e.extend({clip:!0})),_){t.setTransform(g,0,0,g,0,0);var x=e.offset;x&&t.translate(-x.x,-x.y)}this._draw(t,e,r,_),t.restore(),i.pop(),e.clip&&!e.dontFinish&&t.clip(),p||(ht.process(l,t,o,c,h.subtract(u).multiply(g)),ot.release(t),e.offset=u)}}},_isUpdated:function(t){var e=this._parent;if(e instanceof B)return e._isUpdated(t);var n=this._updateVersion===t;return!n&&e&&e._visible&&e._isUpdated(t)&&(this._updateVersion=t,n=!0),n},_drawSelection:function(t,e,n,i,r){var s=this._selection,a=1&s,o=2&s||a&&this._selectBounds,h=4&s;if(this._drawSelected||(a=!1),(a||o||h)&&this._isUpdated(r)){var u,l=this.getSelectedColor(!0)||(u=this.getLayer())&&u.getSelectedColor(!0),c=e.appended(this.getGlobalMatrix(!0)),f=n/2;if(t.strokeStyle=t.fillStyle=l?l.toCanvasStyle(t):"#009dec",a&&this._drawSelected(t,c,i),h){var d=this.getPosition(!0),p=this._parent,g=p?p.localToGlobal(d):d,v=g.x,_=g.y;t.beginPath(),t.arc(v,_,f,0,2*Math.PI,!0),t.stroke();for(var m=[[0,-1],[1,0],[0,1],[-1,0]],y=f,x=n+1,w=0;w<4;w++){var b=m[w],C=b[0],S=b[1];t.moveTo(v+C*y,_+S*y),t.lineTo(v+C*x,_+S*x),t.stroke()}}if(o){var k=c._transformCorners(this.getInternalBounds());t.beginPath();for(w=0;w<8;w++)t[w?"lineTo":"moveTo"](k[w],k[++w]);t.closePath(),t.stroke();for(w=0;w<8;w++)t.fillRect(k[w]-f,k[++w]-f,n,n)}}},_canComposite:function(){return!1}},l.each(["down","drag","up","move"],function(t){this["removeOn"+l.capitalize(t)]=function(){var e={};return e[t]=!0,this.removeOn(e)}},{removeOn:function(t){for(var e in t)if(t[e]){var n="mouse"+e,i=this._project,r=i._removeSets=i._removeSets||{};r[n]=r[n]||{},r[n][this._id]=this}return this}}),{tween:function(t,e,n){n||(n=e,e=t,t=null,n||(n=e,e=null));var i=n&&n.easing,r=n&&n.start,s=null!=n&&("number"==typeof n?n:n.duration),a=new st(this,t,e,s,i,r);return s&&this.on("frame",function t(e){a._handleFrame(1e3*e.time),a.running||this.off("frame",t)}),a},tweenTo:function(t,e){return this.tween(null,t,e)},tweenFrom:function(t,e){return this.tween(t,null,e)}}),A=T.extend({_class:"Group",_selectBounds:!1,_selectChildren:!0,_serializeFields:{children:[]},initialize:function(t){this._children=[],this._namedChildren={},this._initialize(t)||this.addChildren(Array.isArray(t)?t:arguments)},_changed:function t(e){t.base.call(this,e),2050&e&&(this._clipItem=o)},_getClipItem:function(){var t=this._clipItem;if(t===o){t=null;for(var e=this._children,n=0,i=e.length;n<i;n++)if(e[n]._clipMask){t=e[n];break}this._clipItem=t}return t},isClipped:function(){return!!this._getClipItem()},setClipped:function(t){var e=this.getFirstChild();e&&e.setClipMask(t)},_getBounds:function t(e,n){var i=this._getClipItem();return i?i._getCachedBounds(e&&e.appended(i._matrix),l.set({},n,{stroke:!1})):t.base.call(this,e,n)},_hitTestChildren:function t(e,n,i){var r=this._getClipItem();return(!r||r.contains(e))&&t.base.call(this,e,n,i,r)},_draw:function(t,e){var n=e.clip,i=!n&&this._getClipItem();e=e.extend({clipItem:i,clip:!1}),n?(t.beginPath(),e.dontStart=e.dontFinish=!0):i&&i.draw(t,e.extend({clip:!0}));for(var r=this._children,s=0,a=r.length;s<a;s++){var o=r[s];o!==i&&o.draw(t,e)}}}),E=A.extend({_class:"Layer",initialize:function(){A.apply(this,arguments)},_getOwner:function(){return this._parent||null!=this._index&&this._project},isInserted:function t(){return this._parent?t.base.call(this):null!=this._index},activate:function(){this._project._activeLayer=this},_hitTestSelf:function(){}}),P=T.extend({_class:"Shape",_applyMatrix:!1,_canApplyMatrix:!1,_canScaleStroke:!0,_serializeFields:{type:null,size:null,radius:null},initialize:function(t,e){this._initialize(t,e)},_equals:function(t){return this._type===t._type&&this._size.equals(t._size)&&l.equals(this._radius,t._radius)},copyContent:function(t){this.setType(t._type),this.setSize(t._size),this.setRadius(t._radius)},getType:function(){return this._type},setType:function(t){this._type=t},getShape:"#getType",setShape:"#setType",getSize:function(){var t=this._size;return new x(t.width,t.height,this,"setSize")},setSize:function(){var t=y.read(arguments);if(this._size){if(!this._size.equals(t)){var e=this._type,n=t.width,i=t.height;"rectangle"===e?this._radius.set(y.min(this._radius,t.divide(2))):"circle"===e?(n=i=(n+i)/2,this._radius=n/2):"ellipse"===e&&this._radius._set(n/2,i/2),this._size._set(n,i),this._changed(9)}}else this._size=t.clone()},getRadius:function(){var t=this._radius;return"circle"===this._type?t:new x(t.width,t.height,this,"setRadius")},setRadius:function(t){var e=this._type;if("circle"===e){if(t===this._radius)return;var n=2*t;this._radius=t,this._size._set(n,n)}else if(t=y.read(arguments),this._radius){if(this._radius.equals(t))return;if(this._radius.set(t),"rectangle"===e){n=y.max(this._size,t.multiply(2));this._size.set(n)}else"ellipse"===e&&this._size._set(2*t.width,2*t.height)}else this._radius=t.clone();this._changed(9)},isEmpty:function(){return!1},toPath:function(t){var e=new(V[l.capitalize(this._type)])({center:new _,size:this._size,radius:this._radius,insert:!1});return e.copyAttributes(this),ct.settings.applyMatrix&&e.setApplyMatrix(!0),(t===o||t)&&e.insertAbove(this),e},toShape:"#clone",_asPathItem:function(){return this.toPath(!1)},_draw:function(t,e,n,i){var r=this._style,s=r.hasFill(),a=r.hasStroke(),o=e.dontFinish||e.clip,h=!i;if(s||a||o){var u=this._type,l=this._radius,c="circle"===u;if(e.dontStart||t.beginPath(),h&&c)t.arc(0,0,l,0,2*Math.PI,!0);else{var f=c?l:l.width,d=c?l:l.height,p=this._size,g=p.width,v=p.height;if(h&&"rectangle"===u&&0===f&&0===d)t.rect(-g/2,-v/2,g,v);else{var _=g/2,m=v/2,y=.44771525016920644,x=f*y,w=d*y,b=[-_,-m+d,-_,-m+w,-_+x,-m,-_+f,-m,_-f,-m,_-x,-m,_,-m+w,_,-m+d,_,m-d,_,m-w,_-x,m,_-f,m,-_+f,m,-_+x,m,-_,m-w,-_,m-d];i&&i.transform(b,b,32),t.moveTo(b[0],b[1]),t.bezierCurveTo(b[2],b[3],b[4],b[5],b[6],b[7]),_!==f&&t.lineTo(b[8],b[9]),t.bezierCurveTo(b[10],b[11],b[12],b[13],b[14],b[15]),m!==d&&t.lineTo(b[16],b[17]),t.bezierCurveTo(b[18],b[19],b[20],b[21],b[22],b[23]),_!==f&&t.lineTo(b[24],b[25]),t.bezierCurveTo(b[26],b[27],b[28],b[29],b[30],b[31])}}t.closePath()}o||!s&&!a||(this._setStyles(t,e,n),s&&(t.fill(r.getFillRule()),t.shadowColor="rgba(0,0,0,0)"),a&&t.stroke())},_canComposite:function(){return!(this.hasFill()&&this.hasStroke())},_getBounds:function(t,e){var n=new w(this._size).setCenter(0,0),i=this._style,r=e.stroke&&i.hasStroke()&&i.getStrokeWidth();return t&&(n=t._transformBounds(n)),r?n.expand(V._getStrokePadding(r,this._getStrokeMatrix(t,e))):n}},new function(){function t(t,e,n){var i=t._radius;if(!i.isZero())for(var r=t._size.divide(2),s=1;s<=4;s++){var a=new _(s>1&&s<4?-1:1,s>2?-1:1),o=a.multiply(r),h=o.subtract(a.multiply(i));if(new w(n?o.add(a.multiply(n)):o,h).contains(e))return{point:h,quadrant:s}}}function e(t,e,n,i){var r=t.divide(e);return(!i||r.isInQuadrant(i))&&r.subtract(r.normalize()).multiply(e).divide(n).length<=1}return{_contains:function e(n){if("rectangle"===this._type){var i=t(this,n);return i?n.subtract(i.point).divide(this._radius).getLength()<=1:e.base.call(this,n)}return n.divide(this.size).getLength()<=.5},_hitTestSelf:function n(i,r,s,a){var o=!1,h=this._style,u=r.stroke&&h.hasStroke(),l=r.fill&&h.hasFill();if(u||l){var c=this._type,f=this._radius,d=u?h.getStrokeWidth()/2:0,p=r._tolerancePadding.add(V._getStrokePadding(d,!h.getStrokeScaling()&&a));if("rectangle"===c){var g=p.multiply(2),v=t(this,i,g);if(v)o=e(i.subtract(v.point),f,p,v.quadrant);else{var _=new w(this._size).setCenter(0,0),m=_.expand(g),y=_.expand(g.negate());o=m._containsPoint(i)&&!y._containsPoint(i)}}else o=e(i,f,p)}return o?new M(u?"stroke":"fill",this):n.base.apply(this,arguments)}}},{statics:new function(){function t(t,e,n,i,r){var s=new P(l.getNamed(r),e);return s._type=t,s._size=n,s._radius=i,s}return{Circle:function(){var e=_.readNamed(arguments,"center"),n=l.readNamed(arguments,"radius");return t("circle",e,new y(2*n),n,arguments)},Rectangle:function(){var e=w.readNamed(arguments,"rectangle"),n=y.min(y.readNamed(arguments,"radius"),e.getSize(!0).divide(2));return t("rectangle",e.getCenter(!0),e.getSize(!0),n,arguments)},Ellipse:function(){var e=P._readEllipse(arguments),n=e.radius;return t("ellipse",e.center,n.multiply(2),n,arguments)},_readEllipse:function(t){var e,n;if(l.hasNamed(t,"radius"))e=_.readNamed(t,"center"),n=y.readNamed(t,"radius");else{var i=w.readNamed(t,"rectangle");e=i.getCenter(!0),n=i.getSize(!0).divide(2)}return{center:e,radius:n}}}}}),I=T.extend({_class:"Raster",_applyMatrix:!1,_canApplyMatrix:!1,_boundsOptions:{stroke:!1,handle:!1},_serializeFields:{crossOrigin:null,source:null},_prioritize:["crossOrigin"],_smoothing:!0,initialize:function(t,e){if(!this._initialize(t,e!==o&&_.read(arguments,1))){var n="string"==typeof t?u.getElementById(t):t;n?this.setImage(n):this.setSource(t)}this._size||(this._size=new y,this._loaded=!1)},_equals:function(t){return this.getSource()===t.getSource()},copyContent:function(t){var e=t._image,n=t._canvas;if(e)this._setImage(e);else if(n){var i=ot.getCanvas(t._size);i.getContext("2d").drawImage(n,0,0),this._setImage(i)}this._crossOrigin=t._crossOrigin},getSize:function(){var t=this._size;return new x(t?t.width:0,t?t.height:0,this,"setSize")},setSize:function(){var t=y.read(arguments);if(!t.equals(this._size))if(t.width>0&&t.height>0){var e=this.getElement();this._setImage(ot.getCanvas(t)),e&&this.getContext(!0).drawImage(e,0,0,t.width,t.height)}else this._canvas&&ot.release(this._canvas),this._size=t.clone()},getWidth:function(){return this._size?this._size.width:0},setWidth:function(t){this.setSize(t,this.getHeight())},getHeight:function(){return this._size?this._size.height:0},setHeight:function(t){this.setSize(this.getWidth(),t)},getLoaded:function(){return this._loaded},isEmpty:function(){var t=this._size;return!t||0===t.width&&0===t.height},getResolution:function(){var t=this._matrix,e=new _(0,0).transform(t),n=new _(1,0).transform(t).subtract(e),i=new _(0,1).transform(t).subtract(e);return new y(72/n.getLength(),72/i.getLength())},getPpi:"#getResolution",getImage:function(){return this._image},setImage:function(t){var e=this;function n(t){var n=e.getView(),i=t&&t.type||"load";n&&e.responds(i)&&(ct=n._scope,e.emit(i,new Y(t)))}this._setImage(t),this._loaded?setTimeout(n,0):t&&Q.add(t,{load:function(i){e._setImage(t),n(i)},error:n})},_setImage:function(t){this._canvas&&ot.release(this._canvas),t&&t.getContext?(this._image=null,this._canvas=t,this._loaded=!0):(this._image=t,this._canvas=null,this._loaded=!!(t&&t.src&&t.complete)),this._size=new y(t?t.naturalWidth||t.width:0,t?t.naturalHeight||t.height:0),this._context=null,this._changed(1033)},getCanvas:function(){if(!this._canvas){var t=ot.getContext(this._size);try{this._image&&t.drawImage(this._image,0,0),this._canvas=t.canvas}catch(e){ot.release(t)}}return this._canvas},setCanvas:"#setImage",getContext:function(t){return this._context||(this._context=this.getCanvas().getContext("2d")),t&&(this._image=null,this._changed(1025)),this._context},setContext:function(t){this._context=t},getSource:function(){var t=this._image;return t&&t.src||this.toDataURL()},setSource:function(t){var e=new a.Image,n=this._crossOrigin;n&&(e.crossOrigin=n),e.src=t,this.setImage(e)},getCrossOrigin:function(){var t=this._image;return t&&t.crossOrigin||this._crossOrigin||""},setCrossOrigin:function(t){this._crossOrigin=t;var e=this._image;e&&(e.crossOrigin=t)},getSmoothing:function(){return this._smoothing},setSmoothing:function(t){this._smoothing=t,this._changed(257)},getElement:function(){return this._canvas||this._loaded&&this._image}},{beans:!1,getSubCanvas:function(){var t=w.read(arguments),e=ot.getContext(t.getSize());return e.drawImage(this.getCanvas(),t.x,t.y,t.width,t.height,0,0,t.width,t.height),e.canvas},getSubRaster:function(){var t=w.read(arguments),e=new I(T.NO_INSERT);return e._setImage(this.getSubCanvas(t)),e.translate(t.getCenter().subtract(this.getSize().divide(2))),e._matrix.prepend(this._matrix),e.insertAbove(this),e},toDataURL:function(){var t=this._image,e=t&&t.src;if(/^data:/.test(e))return e;var n=this.getCanvas();return n?n.toDataURL.apply(n,arguments):null},drawImage:function(t){var e=_.read(arguments,1);this.getContext(!0).drawImage(t,e.x,e.y)},getAverageColor:function(t){var e,n;if(t?t instanceof j?(n=t,e=t.getBounds()):"object"==typeof t&&("width"in t?e=new w(t):"x"in t&&(e=new w(t.x-.5,t.y-.5,1,1))):e=this.getBounds(),!e)return null;var i=Math.min(e.width,32),r=Math.min(e.height,32),s=I._sampleContext;s?s.clearRect(0,0,33,33):s=I._sampleContext=ot.getContext(new y(32)),s.save();var a=(new C).scale(i/e.width,r/e.height).translate(-e.x,-e.y);a.applyToContext(s),n&&n.draw(s,new l({clip:!0,matrices:[a]})),this._matrix.applyToContext(s);var o=this.getElement(),h=this._size;o&&s.drawImage(o,-h.width/2,-h.height/2),s.restore();for(var u=s.getImageData(.5,.5,Math.ceil(i),Math.ceil(r)).data,c=[0,0,0],f=0,d=0,p=u.length;d<p;d+=4){var g=u[d+3];f+=g,g/=255,c[0]+=u[d]*g,c[1]+=u[d+1]*g,c[2]+=u[d+2]*g}for(d=0;d<3;d++)c[d]/=f;return f?W.read(c):null},getPixel:function(){var t=_.read(arguments),e=this.getContext().getImageData(t.x,t.y,1,1).data;return new W("rgb",[e[0]/255,e[1]/255,e[2]/255],e[3]/255)},setPixel:function(){var t=_.read(arguments),e=W.read(arguments),n=e._convert("rgb"),i=e._alpha,r=this.getContext(!0),s=r.createImageData(1,1),a=s.data;a[0]=255*n[0],a[1]=255*n[1],a[2]=255*n[2],a[3]=null!=i?255*i:255,r.putImageData(s,t.x,t.y)},createImageData:function(){var t=y.read(arguments);return this.getContext().createImageData(t.width,t.height)},getImageData:function(){var t=w.read(arguments);return t.isEmpty()&&(t=new w(this._size)),this.getContext().getImageData(t.x,t.y,t.width,t.height)},setImageData:function(t){var e=_.read(arguments,1);this.getContext(!0).putImageData(t,e.x,e.y)},_getBounds:function(t,e){var n=new w(this._size).setCenter(0,0);return t?t._transformBounds(n):n},_hitTestSelf:function(t){if(this._contains(t)){var e=this;return new M("pixel",e,{offset:t.add(e._size.divide(2)).round(),color:{get:function(){return e.getPixel(this.offset)}}})}},_draw:function(t,e,n){var i=this.getElement();i&&i.width>0&&i.height>0&&(t.globalAlpha=this._opacity,this._setStyles(t,e,n),X.setPrefixed(t,"imageSmoothingEnabled",this._smoothing),t.drawImage(i,-this._size.width/2,-this._size.height/2))},_canComposite:function(){return!0}}),N=T.extend({_class:"SymbolItem",_applyMatrix:!1,_canApplyMatrix:!1,_boundsOptions:{stroke:!0},_serializeFields:{symbol:null},initialize:function(t,e){this._initialize(t,e!==o&&_.read(arguments,1))||this.setDefinition(t instanceof L?t:new L(t))},_equals:function(t){return this._definition===t._definition},copyContent:function(t){this.setDefinition(t._definition)},getDefinition:function(){return this._definition},setDefinition:function(t){this._definition=t,this._changed(9)},getSymbol:"#getDefinition",setSymbol:"#setDefinition",isEmpty:function(){return this._definition._item.isEmpty()},_getBounds:function(t,e){var n=this._definition._item;return n._getCachedBounds(n._matrix.prepended(t),e)},_hitTestSelf:function(t,e,n){var i=this._definition._item._hitTest(t,e,n);return i&&(i.item=this),i},_draw:function(t,e){this._definition._item.draw(t,e)}}),L=l.extend({_class:"SymbolDefinition",initialize:function(t,e){this._id=v.get(),this.project=ct.project,t&&this.setItem(t,e)},_serialize:function(t,e){return e.add(this,function(){return l.serialize([this._class,this._item],t,!1,e)})},_changed:function(t){8&t&&T._clearBoundsCache(this),1&t&&this.project._changed(t)},getItem:function(){return this._item},setItem:function(t,e){t._symbol&&(t=t.clone()),this._item&&(this._item._symbol=null),this._item=t,t.remove(),t.setSelected(!1),e||t.setPosition(new _),t._symbol=this,this._changed(9)},getDefinition:"#getItem",setDefinition:"#setItem",place:function(t){return new N(this,t)},clone:function(){return new L(this._item.clone(!1))},equals:function(t){return t===this||t&&this._item.equals(t._item)||!1}}),M=l.extend({_class:"HitResult",initialize:function(t,e,n){this.type=t,this.item=e,n&&this.inject(n)},statics:{getOptions:function(t){var e=t&&l.read(t);return l.set({type:null,tolerance:ct.settings.hitTolerance,fill:!e,stroke:!e,segments:!e,handles:!1,ends:!1,position:!1,center:!1,bounds:!1,guides:!1,selected:!1},e)}}}),O=l.extend({_class:"Segment",beans:!0,_selection:0,initialize:function(t,e,n,i,r,s){var a,h,u,l,c=arguments.length;c>0&&(null==t||"object"==typeof t?1===c&&t&&"point"in t?(a=t.point,h=t.handleIn,u=t.handleOut,l=t.selection):(a=t,h=e,u=n,l=i):(a=[t,e],h=n!==o?[n,i]:null,u=r!==o?[r,s]:null)),new D(a,this,"_point"),new D(h,this,"_handleIn"),new D(u,this,"_handleOut"),l&&this.setSelection(l)},_serialize:function(t,e){var n=this._point,i=this._selection,r=i||this.hasHandles()?[n,this._handleIn,this._handleOut]:n;return i&&r.push(i),l.serialize(r,t,!0,e)},_changed:function(t){var e=this._path;if(e){var n,i=e._curves,r=this._index;i&&(t&&t!==this._point&&t!==this._handleIn||!(n=r>0?i[r-1]:e._closed?i[i.length-1]:null)||n._changed(),t&&t!==this._point&&t!==this._handleOut||!(n=i[r])||n._changed()),e._changed(41)}},getPoint:function(){return this._point},setPoint:function(){this._point.set(_.read(arguments))},getHandleIn:function(){return this._handleIn},setHandleIn:function(){this._handleIn.set(_.read(arguments))},getHandleOut:function(){return this._handleOut},setHandleOut:function(){this._handleOut.set(_.read(arguments))},hasHandles:function(){return!this._handleIn.isZero()||!this._handleOut.isZero()},isSmooth:function(){var t=this._handleIn,e=this._handleOut;return!t.isZero()&&!e.isZero()&&t.isCollinear(e)},clearHandles:function(){this._handleIn._set(0,0),this._handleOut._set(0,0)},getSelection:function(){return this._selection},setSelection:function(t){var e=this._selection,n=this._path;this._selection=t=t||0,n&&t!==e&&(n._updateSelection(this,e,t),n._changed(257))},_changeSelection:function(t,e){var n=this._selection;this.setSelection(e?n|t:n&~t)},isSelected:function(){return!!(7&this._selection)},setSelected:function(t){this._changeSelection(7,t)},getIndex:function(){return this._index!==o?this._index:null},getPath:function(){return this._path||null},getCurve:function(){var t=this._path,e=this._index;return t?(e>0&&!t._closed&&e===t._segments.length-1&&e--,t.getCurves()[e]||null):null},getLocation:function(){var t=this.getCurve();return t?new z(t,this===t._segment1?0:1):null},getNext:function(){var t=this._path&&this._path._segments;return t&&(t[this._index+1]||this._path._closed&&t[0])||null},smooth:function(t,e,n){var i=t||{},r=i.type,s=i.factor,a=this.getPrevious(),h=this.getNext(),u=(a||this)._point,l=this._point,c=(h||this)._point,f=u.getDistance(l),d=l.getDistance(c);if(r&&"catmull-rom"!==r){if("geometric"!==r)throw new Error("Smoothing method '"+r+"' not supported.");if(a&&h){var p=u.subtract(c),g=s===o?.4:s,v=g*f/(f+d);e||this.setHandleIn(p.multiply(v)),n||this.setHandleOut(p.multiply(v-g))}}else{var m=s===o?.5:s,y=Math.pow(f,m),x=y*y,w=Math.pow(d,m),b=w*w;if(!e&&a){var C=2*b+3*w*y+x,S=3*w*(w+y);this.setHandleIn(0!==S?new _((b*u._x+C*l._x-x*c._x)/S-l._x,(b*u._y+C*l._y-x*c._y)/S-l._y):new _)}if(!n&&h){C=2*x+3*y*w+b,S=3*y*(y+w);this.setHandleOut(0!==S?new _((x*c._x+C*l._x-b*u._x)/S-l._x,(x*c._y+C*l._y-b*u._y)/S-l._y):new _)}}},getPrevious:function(){var t=this._path&&this._path._segments;return t&&(t[this._index-1]||this._path._closed&&t[t.length-1])||null},isFirst:function(){return!this._index},isLast:function(){var t=this._path;return t&&this._index===t._segments.length-1||!1},reverse:function(){var t=this._handleIn,e=this._handleOut,n=t.clone();t.set(e),e.set(n)},reversed:function(){return new O(this._point,this._handleOut,this._handleIn)},remove:function(){return!!this._path&&!!this._path.removeSegment(this._index)},clone:function(){return new O(this._point,this._handleIn,this._handleOut)},equals:function(t){return t===this||t&&this._class===t._class&&this._point.equals(t._point)&&this._handleIn.equals(t._handleIn)&&this._handleOut.equals(t._handleOut)||!1},toString:function(){var t=["point: "+this._point];return this._handleIn.isZero()||t.push("handleIn: "+this._handleIn),this._handleOut.isZero()||t.push("handleOut: "+this._handleOut),"{ "+t.join(", ")+" }"},transform:function(t){this._transformCoordinates(t,new Array(6),!0),this._changed()},interpolate:function(t,e,n){var i=1-n,r=n,s=t._point,a=e._point,o=t._handleIn,h=e._handleIn,u=e._handleOut,l=t._handleOut;this._point._set(i*s._x+r*a._x,i*s._y+r*a._y,!0),this._handleIn._set(i*o._x+r*h._x,i*o._y+r*h._y,!0),this._handleOut._set(i*l._x+r*u._x,i*l._y+r*u._y,!0),this._changed()},_transformCoordinates:function(t,e,n){var i=this._point,r=n&&this._handleIn.isZero()?null:this._handleIn,s=n&&this._handleOut.isZero()?null:this._handleOut,a=i._x,o=i._y,h=2;return e[0]=a,e[1]=o,r&&(e[h++]=r._x+a,e[h++]=r._y+o),s&&(e[h++]=s._x+a,e[h++]=s._y+o),t&&(t._transformCoordinates(e,e,h/2),a=e[0],o=e[1],n?(i._x=a,i._y=o,h=2,r&&(r._x=e[h++]-a,r._y=e[h++]-o),s&&(s._x=e[h++]-a,s._y=e[h++]-o)):(r||(e[h++]=a,e[h++]=o),s||(e[h++]=a,e[h++]=o))),e}}),D=_.extend({initialize:function(t,e,n){var i,r,s;if(t)if((i=t[0])!==o)r=t[1];else{var a=t;(i=a.x)===o&&(i=(a=_.read(arguments)).x),r=a.y,s=a.selected}else i=r=0;this._x=i,this._y=r,this._owner=e,e[n]=this,s&&this.setSelected(!0)},_set:function(t,e){return this._x=t,this._y=e,this._owner._changed(this),this},getX:function(){return this._x},setX:function(t){this._x=t,this._owner._changed(this)},getY:function(){return this._y},setY:function(t){this._y=t,this._owner._changed(this)},isZero:function(){var t=g.isZero;return t(this._x)&&t(this._y)},isSelected:function(){return!!(this._owner._selection&this._getSelection())},setSelected:function(t){this._owner._changeSelection(this._getSelection(),t)},_getSelection:function(){var t=this._owner;return this===t._point?1:this===t._handleIn?2:this===t._handleOut?4:0}}),R=l.extend({_class:"Curve",beans:!0,initialize:function(t,e,n,i,r,s,a,o){var h,u,l,c,f,d,p=arguments.length;3===p?(this._path=t,h=e,u=n):p?1===p?"segment1"in t?(h=new O(t.segment1),u=new O(t.segment2)):"point1"in t?(l=t.point1,f=t.handle1,d=t.handle2,c=t.point2):Array.isArray(t)&&(l=[t[0],t[1]],c=[t[6],t[7]],f=[t[2]-t[0],t[3]-t[1]],d=[t[4]-t[6],t[5]-t[7]]):2===p?(h=new O(t),u=new O(e)):4===p?(l=t,f=e,d=n,c=i):8===p&&(l=[t,e],c=[a,o],f=[n-t,i-e],d=[r-a,s-o]):(h=new O,u=new O),this._segment1=h||new O(l,null,f),this._segment2=u||new O(c,d,null)},_serialize:function(t,e){return l.serialize(this.hasHandles()?[this.getPoint1(),this.getHandle1(),this.getHandle2(),this.getPoint2()]:[this.getPoint1(),this.getPoint2()],t,!0,e)},_changed:function(){this._length=this._bounds=o},clone:function(){return new R(this._segment1,this._segment2)},toString:function(){var t=["point1: "+this._segment1._point];return this._segment1._handleOut.isZero()||t.push("handle1: "+this._segment1._handleOut),this._segment2._handleIn.isZero()||t.push("handle2: "+this._segment2._handleIn),t.push("point2: "+this._segment2._point),"{ "+t.join(", ")+" }"},classify:function(){return R.classify(this.getValues())},remove:function(){var t=!1;if(this._path){var e=this._segment2,n=e._handleOut;(t=e.remove())&&this._segment1._handleOut.set(n)}return t},getPoint1:function(){return this._segment1._point},setPoint1:function(){this._segment1._point.set(_.read(arguments))},getPoint2:function(){return this._segment2._point},setPoint2:function(){this._segment2._point.set(_.read(arguments))},getHandle1:function(){return this._segment1._handleOut},setHandle1:function(){this._segment1._handleOut.set(_.read(arguments))},getHandle2:function(){return this._segment2._handleIn},setHandle2:function(){this._segment2._handleIn.set(_.read(arguments))},getSegment1:function(){return this._segment1},getSegment2:function(){return this._segment2},getPath:function(){return this._path},getIndex:function(){return this._segment1._index},getNext:function(){var t=this._path&&this._path._curves;return t&&(t[this._segment1._index+1]||this._path._closed&&t[0])||null},getPrevious:function(){var t=this._path&&this._path._curves;return t&&(t[this._segment1._index-1]||this._path._closed&&t[t.length-1])||null},isFirst:function(){return!this._segment1._index},isLast:function(){var t=this._path;return t&&this._segment1._index===t._curves.length-1||!1},isSelected:function(){return this.getPoint1().isSelected()&&this.getHandle1().isSelected()&&this.getHandle2().isSelected()&&this.getPoint2().isSelected()},setSelected:function(t){this.getPoint1().setSelected(t),this.getHandle1().setSelected(t),this.getHandle2().setSelected(t),this.getPoint2().setSelected(t)},getValues:function(t){return R.getValues(this._segment1,this._segment2,t)},getPoints:function(){for(var t=this.getValues(),e=[],n=0;n<8;n+=2)e.push(new _(t[n],t[n+1]));return e}},{getLength:function(){return null==this._length&&(this._length=R.getLength(this.getValues(),0,1)),this._length},getArea:function(){return R.getArea(this.getValues())},getLine:function(){return new S(this._segment1._point,this._segment2._point)},getPart:function(t,e){return new R(R.getPart(this.getValues(),t,e))},getPartLength:function(t,e){return R.getLength(this.getValues(),t,e)},divideAt:function(t){return this.divideAtTime(t&&t.curve===this?t.time:this.getTimeAt(t))},divideAtTime:function(t,e){var n=null;if(t>=1e-8&&t<=1-1e-8){var i=R.subdivide(this.getValues(),t),r=i[0],s=i[1],a=e||this.hasHandles(),o=this._segment1,h=this._segment2,u=this._path;a&&(o._handleOut._set(r[2]-r[0],r[3]-r[1]),h._handleIn._set(s[4]-s[6],s[5]-s[7]));var l=r[6],c=r[7],f=new O(new _(l,c),a&&new _(r[4]-l,r[5]-c),a&&new _(s[2]-l,s[3]-c));u?(u.insert(o._index+1,f),n=this.getNext()):(this._segment2=f,this._changed(),n=new R(f,h))}return n},splitAt:function(t){var e=this._path;return e?e.splitAt(t):null},splitAtTime:function(t){return this.splitAt(this.getLocationAtTime(t))},divide:function(t,e){return this.divideAtTime(t===o?.5:e?t:this.getTimeAt(t))},split:function(t,e){return this.splitAtTime(t===o?.5:e?t:this.getTimeAt(t))},reversed:function(){return new R(this._segment2.reversed(),this._segment1.reversed())},clearHandles:function(){this._segment1._handleOut._set(0,0),this._segment2._handleIn._set(0,0)},statics:{getValues:function(t,e,n,i){var r=t._point,s=t._handleOut,a=e._handleIn,o=e._point,h=r.x,u=r.y,l=o.x,c=o.y,f=i?[h,u,h,u,l,c,l,c]:[h,u,h+s._x,u+s._y,l+a._x,c+a._y,l,c];return n&&n._transformCoordinates(f,f,4),f},subdivide:function(t,e){var n=t[0],i=t[1],r=t[2],s=t[3],a=t[4],h=t[5],u=t[6],l=t[7];e===o&&(e=.5);var c=1-e,f=c*n+e*r,d=c*i+e*s,p=c*r+e*a,g=c*s+e*h,v=c*a+e*u,_=c*h+e*l,m=c*f+e*p,y=c*d+e*g,x=c*p+e*v,w=c*g+e*_,b=c*m+e*x,C=c*y+e*w;return[[n,i,f,d,m,y,b,C],[b,C,x,w,v,_,u,l]]},getMonoCurves:function(t,e){var n=[],i=e?0:1,r=t[i+0],s=t[i+2],a=t[i+4],o=t[i+6];if(r>=s==s>=a&&s>=a==a>=o||R.isStraight(t))n.push(t);else{var h=3*(s-a)-r+o,u=2*(r+a)-4*s,l=s-r,c=[],f=g.solveQuadratic(h,u,l,c,1e-8,1-1e-8);if(f){c.sort();var d=c[0],p=R.subdivide(t,d);n.push(p[0]),f>1&&(d=(c[1]-d)/(1-d),p=R.subdivide(p[1],d),n.push(p[0])),n.push(p[1])}else n.push(t)}return n},solveCubic:function(t,e,n,i,r,s){var a=t[e],o=t[e+2],h=t[e+4],u=t[e+6],l=0;if(!(a<n&&u<n&&o<n&&h<n||a>n&&u>n&&o>n&&h>n)){var c=3*(o-a),f=3*(h-o)-c,d=u-a-c-f;l=g.solveCubic(d,f,c,a-n,i,r,s)}return l},getTimeOf:function(t,e){var n=new _(t[0],t[1]),i=new _(t[6],t[7]);if(null===(e.isClose(n,1e-12)?0:e.isClose(i,1e-12)?1:null))for(var r=[e.x,e.y],s=[],a=0;a<2;a++)for(var o=R.solveCubic(t,a,r[a],s,0,1),h=0;h<o;h++){var u=s[h];if(e.isClose(R.getPoint(t,u),1e-7))return u}return e.isClose(n,1e-7)?0:e.isClose(i,1e-7)?1:null},getNearestTime:function(t,e){if(R.isStraight(t)){var n=t[0],i=t[1],r=t[6]-n,s=t[7]-i,a=r*r+s*s;if(0===a)return 0;var o=((e.x-n)*r+(e.y-i)*s)/a;return o<1e-12?0:o>.999999999999?1:R.getTimeOf(t,new _(n+o*r,i+o*s))}var h=1/0,u=0;function l(n){if(n>=0&&n<=1){var i=e.getDistance(R.getPoint(t,n),!0);if(i<h)return h=i,u=n,!0}}for(var c=0;c<=100;c++)l(c/100);for(var f=.005;f>1e-8;)l(u-f)||l(u+f)||(f/=2);return u},getPart:function(t,e,n){var i=e>n;if(i){var r=e;e=n,n=r}return e>0&&(t=R.subdivide(t,e)[1]),n<1&&(t=R.subdivide(t,(n-e)/(1-e))[0]),i?[t[6],t[7],t[4],t[5],t[2],t[3],t[0],t[1]]:t},isFlatEnough:function(t,e){var n=t[0],i=t[1],r=t[2],s=t[3],a=t[4],o=t[5],h=t[6],u=t[7],l=3*r-2*n-h,c=3*s-2*i-u,f=3*a-2*h-n,d=3*o-2*u-i;return Math.max(l*l,f*f)+Math.max(c*c,d*d)<=16*e*e},getArea:function(t){var e=t[0],n=t[1],i=t[2],r=t[3],s=t[4],a=t[5],o=t[6],h=t[7];return 3*((h-n)*(i+s)-(o-e)*(r+a)+r*(e-s)-i*(n-a)+h*(s+e/3)-o*(a+n/3))/20},getBounds:function(t){for(var e=t.slice(0,2),n=e.slice(),i=[0,0],r=0;r<2;r++)R._addBounds(t[r],t[r+2],t[r+4],t[r+6],r,0,e,n,i);return new w(e[0],e[1],n[0]-e[0],n[1]-e[1])},_addBounds:function(t,e,n,i,r,s,a,o,h){function u(t,e){var n=t-e,i=t+e;n<a[r]&&(a[r]=n),i>o[r]&&(o[r]=i)}s/=2;var l=a[r]-s,c=o[r]+s;if(t<l||e<l||n<l||i<l||t>c||e>c||n>c||i>c)if(e<t!=e<i&&n<t!=n<i)u(t,s),u(i,s);else{var f=3*(e-n)-t+i,d=2*(t+n)-4*e,p=e-t,v=g.solveQuadratic(f,d,p,h);u(i,0);for(var _=0;_<v;_++){var m=h[_],y=1-m;1e-8<=m&&m<=1-1e-8&&u(y*y*y*t+3*y*y*m*e+3*y*m*m*n+m*m*m*i,s)}}}}},l.each(["getBounds","getStrokeBounds","getHandleBounds"],function(t){this[t]=function(){this._bounds||(this._bounds={});var e=this._bounds[t];return e||(e=this._bounds[t]=V[t]([this._segment1,this._segment2],!1,this._path)),e.clone()}},{}),l.each({isStraight:function(t,e,n,i){if(e.isZero()&&n.isZero())return!0;var r=i.subtract(t);if(r.isZero())return!1;if(r.isCollinear(e)&&r.isCollinear(n)){var s=new S(t,i);if(s.getDistance(t.add(e))<1e-7&&s.getDistance(i.add(n))<1e-7){var a=r.dot(r),o=r.dot(e)/a,h=r.dot(n)/a;return o>=0&&o<=1&&h<=0&&h>=-1}}return!1},isLinear:function(t,e,n,i){var r=i.subtract(t).divide(3);return e.equals(r)&&n.negate().equals(r)}},function(t,e){this[e]=function(e){var n=this._segment1,i=this._segment2;return t(n._point,n._handleOut,i._handleIn,i._point,e)},this.statics[e]=function(e,n){var i=e[0],r=e[1],s=e[6],a=e[7];return t(new _(i,r),new _(e[2]-i,e[3]-r),new _(e[4]-s,e[5]-a),new _(s,a),n)}},{statics:{},hasHandles:function(){return!this._segment1._handleOut.isZero()||!this._segment2._handleIn.isZero()},hasLength:function(t){return(!this.getPoint1().equals(this.getPoint2())||this.hasHandles())&&this.getLength()>(t||0)},isCollinear:function(t){return t&&this.isStraight()&&t.isStraight()&&this.getLine().isCollinear(t.getLine())},isHorizontal:function(){return this.isStraight()&&Math.abs(this.getTangentAtTime(.5).y)<1e-8},isVertical:function(){return this.isStraight()&&Math.abs(this.getTangentAtTime(.5).x)<1e-8}}),{beans:!1,getLocationAt:function(t,e){return this.getLocationAtTime(e?t:this.getTimeAt(t))},getLocationAtTime:function(t){return null!=t&&t>=0&&t<=1?new z(this,t):null},getTimeAt:function(t,e){return R.getTimeAt(this.getValues(),t,e)},getParameterAt:"#getTimeAt",getTimesWithTangent:function(){var t=_.read(arguments);return t.isZero()?[]:R.getTimesWithTangent(this.getValues(),t)},getOffsetAtTime:function(t){return this.getPartLength(0,t)},getLocationOf:function(){return this.getLocationAtTime(this.getTimeOf(_.read(arguments)))},getOffsetOf:function(){var t=this.getLocationOf.apply(this,arguments);return t?t.getOffset():null},getTimeOf:function(){return R.getTimeOf(this.getValues(),_.read(arguments))},getParameterOf:"#getTimeOf",getNearestLocation:function(){var t=_.read(arguments),e=this.getValues(),n=R.getNearestTime(e,t),i=R.getPoint(e,n);return new z(this,n,i,null,t.getDistance(i))},getNearestPoint:function(){var t=this.getNearestLocation.apply(this,arguments);return t?t.getPoint():t}},new function(){var t=["getPoint","getTangent","getNormal","getWeightedTangent","getWeightedNormal","getCurvature"];return l.each(t,function(t){this[t+"At"]=function(e,n){var i=this.getValues();return R[t](i,n?e:R.getTimeAt(i,e))},this[t+"AtTime"]=function(e){return R[t](this.getValues(),e)}},{statics:{_evaluateMethods:t}})},new function(){function t(t){var e=t[0],n=t[1],i=t[2],r=t[3],s=t[4],a=t[5],o=t[6],h=t[7],u=9*(i-s)+3*(o-e),l=6*(e+s)-12*i,c=3*(i-e),f=9*(r-a)+3*(h-n),d=6*(n+a)-12*r,p=3*(r-n);return function(t){var e=(u*t+l)*t+c,n=(f*t+d)*t+p;return Math.sqrt(e*e+n*n)}}function e(t,e){return Math.max(2,Math.min(16,Math.ceil(32*Math.abs(e-t))))}function n(t,e,n,i){if(null==e||e<0||e>1)return null;var r=t[0],s=t[1],a=t[2],o=t[3],h=t[4],u=t[5],l=t[6],c=t[7],f=g.isZero;f(a-r)&&f(o-s)&&(a=r,o=s),f(h-l)&&f(u-c)&&(h=l,u=c);var d,p,v=3*(a-r),m=3*(h-a)-v,y=l-r-v-m,x=3*(o-s),w=3*(u-o)-x,b=c-s-x-w;if(0===n)d=0===e?r:1===e?l:((y*e+m)*e+v)*e+r,p=0===e?s:1===e?c:((b*e+w)*e+x)*e+s;else{if(e<1e-8?(d=v,p=x):e>1-1e-8?(d=3*(l-h),p=3*(c-u)):(d=(3*y*e+2*m)*e+v,p=(3*b*e+2*w)*e+x),i){0===d&&0===p&&(e<1e-8||e>1-1e-8)&&(d=h-a,p=u-o);var C=Math.sqrt(d*d+p*p);C&&(d/=C,p/=C)}if(3===n){h=6*y*e+2*m,u=6*b*e+2*w;var S=Math.pow(d*d+p*p,1.5);d=0!==S?(d*u-p*h)/S:0,p=0}}return 2===n?new _(p,-d):new _(d,p)}return{statics:{classify:function(t){var e=t[0],n=t[1],i=t[2],r=t[3],s=t[4],a=t[5],h=t[6],u=t[7],l=i*(n-u)+r*(h-e)+e*u-n*h,c=3*(s*(r-n)+a*(e-i)+i*n-r*e),f=c-l,d=f-l+(e*(u-a)+n*(s-h)+h*a-u*s),p=Math.sqrt(d*d+f*f+c*c),v=0!==p?1/p:0,_=g.isZero;function m(t,e,n){var i=e!==o,r=i&&e>0&&e<1,s=i&&n>0&&n<1;return!i||(r||s)&&("loop"!==t||r&&s)||(t="arch",r=s=!1),{type:t,roots:r||s?r&&s?e<n?[e,n]:[n,e]:[r?e:n]:null}}if(f*=v,c*=v,_(d*=v))return _(f)?m(_(c)?"line":"quadratic"):m("serpentine",c/(3*f));var y=3*f*f-4*d*c;if(_(y))return m("cusp",f/(2*d));var x=y>0?Math.sqrt(y/3):Math.sqrt(-y),w=2*d;return m(y>0?"serpentine":"loop",(f+x)/w,(f-x)/w)},getLength:function(n,i,r,s){if(i===o&&(i=0),r===o&&(r=1),R.isStraight(n)){var a=n;r<1&&(a=R.subdivide(a,r)[0],i/=r),i>0&&(a=R.subdivide(a,i)[1]);var h=a[6]-a[0],u=a[7]-a[1];return Math.sqrt(h*h+u*u)}return g.integrate(s||t(n),i,r,e(i,r))},getTimeAt:function(n,i,r){if(r===o&&(r=i<0?1:0),0===i)return r;var s=Math.abs,a=i>0,h=a?r:0,u=a?1:r,l=t(n),c=R.getLength(n,h,u,l),f=s(i)-c;if(s(f)<1e-12)return a?u:h;if(f>1e-12)return null;var d=i/c,p=0;return g.findRoot(function(t){return p+=g.integrate(l,r,t,e(r,t)),r=t,p-i},l,r+d,h,u,32,1e-12)},getPoint:function(t,e){return n(t,e,0,!1)},getTangent:function(t,e){return n(t,e,1,!0)},getWeightedTangent:function(t,e){return n(t,e,1,!1)},getNormal:function(t,e){return n(t,e,2,!0)},getWeightedNormal:function(t,e){return n(t,e,2,!1)},getCurvature:function(t,e){return n(t,e,3,!1).x},getPeaks:function(t){var e=t[0],n=t[1],i=t[2],r=t[3],s=t[4],a=t[5],o=3*i-e-3*s+t[6],h=3*e-6*i+3*s,u=-3*e+3*i,l=3*r-n-3*a+t[7],c=3*n-6*r+3*a,f=-3*n+3*r,d=[];return g.solveCubic(9*(o*o+l*l),9*(o*h+c*l),2*(h*h+c*c)+3*(u*o+f*l),u*h+c*f,d,1e-8,1-1e-8),d.sort()}}}},new function(){function t(t,e,n,i,r,s,a){var o=!a&&n.getPrevious()===r,h=!a&&n!==r&&n.getNext()===r;if(null!==i&&i>=(o?1e-8:0)&&i<=(h?1-1e-8:1)&&null!==s&&s>=(h?1e-8:0)&&s<=(o?1-1e-8:1)){var u=new z(n,i,null,a),l=new z(r,s,null,a);u._intersection=l,l._intersection=u,e&&!e(u)||z.insert(t,u,!0)}}function e(t,e,i,r){return t[0][1]<i?n(t,!0,i):e[0][1]>r?n(e,!1,r):t[0][0]}function n(t,e,n){for(var i=t[0][0],r=t[0][1],s=1,a=t.length;s<a;s++){var o=t[s][0],h=t[s][1];if(e?h>=n:h<=n)return h===n?o:i+(n-r)*(o-i)/(h-r);i=o,r=h}return null}function i(t,e,n,i,r){var s=g.isZero;if(s(i)&&s(r)){var a=R.getTimeOf(t,new _(e,n));return null===a?[]:[a]}for(var o=Math.atan2(-r,i),h=Math.sin(o),u=Math.cos(o),l=[],c=[],f=0;f<8;f+=2){var d=t[f]-e,p=t[f+1]-n;l.push(d*u-p*h,d*h+p*u)}return R.solveCubic(l,1,0,c,0,1),c}function r(n,r,s,o,h,u){var l=Math.min,c=Math.max;if(c(n[0],n[2],n[4],n[6])+1e-12>l(r[0],r[2],r[4],r[6])&&l(n[0],n[2],n[4],n[6])-1e-12<c(r[0],r[2],r[4],r[6])&&c(n[1],n[3],n[5],n[7])+1e-12>l(r[1],r[3],r[5],r[7])&&l(n[1],n[3],n[5],n[7])-1e-12<c(r[1],r[3],r[5],r[7])){var f=a(n,r);if(f)for(var d=0;d<2;d++){var p=f[d];t(h,u,s,p[0],o,p[1],!0)}else{var g=R.isStraight(n),v=R.isStraight(r),m=g&&v,y=g&&!v,x=h.length;if((m?function(e,n,i,r,s,a){var o=S.intersect(e[0],e[1],e[6],e[7],n[0],n[1],n[6],n[7]);o&&t(s,a,i,R.getTimeOf(e,o),r,R.getTimeOf(n,o))}:g||v?function(e,n,r,s,a,o,h){for(var u=n[0],l=n[1],c=i(e,u,l,n[6]-u,n[7]-l),f=0,d=c.length;f<d;f++){var p=c[f],g=R.getPoint(e,p),v=R.getTimeOf(n,g);null!==v&&t(a,o,h?s:r,h?v:p,h?r:s,h?p:v)}}:function n(i,r,s,a,o,h,u,l,c,f,d,p,g){if(++c>=4096||++l>=40)return c;var v,_,m=r[0],y=r[1],x=r[6],w=r[7],b=S.getSignedDistance,C=b(m,y,x,w,r[2],r[3]),k=b(m,y,x,w,r[4],r[5]),T=C*k>0?.75:4/9,A=T*Math.min(0,C,k),E=T*Math.max(0,C,k),P=b(m,y,x,w,i[0],i[1]),I=b(m,y,x,w,i[2],i[3]),N=b(m,y,x,w,i[4],i[5]),L=b(m,y,x,w,i[6],i[7]),M=function(t,e,n,i){var r,s=[0,t],a=[1/3,e],o=[2/3,n],h=[1,i],u=e-(2*t+i)/3,l=n-(t+2*i)/3;if(u*l<0)r=[[s,a,h],[s,o,h]];else{var c=u/l;r=[c>=2?[s,a,h]:c<=.5?[s,o,h]:[s,a,o,h],[s,h]]}return(u||l)<0?r.reverse():r}(P,I,N,L),O=M[0],D=M[1];if(0===C&&0===k&&0===P&&0===I&&0===N&&0===L||null==(v=e(O,D,A,E))||null==(_=e(O.reverse(),D.reverse(),A,E)))return c;var z=f+(d-f)*v,j=f+(d-f)*_;if(Math.max(g-p,j-z)<1e-9){var V=(z+j)/2,B=(p+g)/2;t(o,h,u?a:s,u?B:V,u?s:a,u?V:B)}else if(i=R.getPart(i,v,_),_-v>.8)if(j-z>g-p)V=(z+j)/2,c=n(r,(F=R.subdivide(i,.5))[0],a,s,o,h,!u,l,c,p,g,z,V),c=n(r,F[1],a,s,o,h,!u,l,c,p,g,V,j);else{var F;B=(p+g)/2,c=n((F=R.subdivide(r,.5))[0],i,a,s,o,h,!u,l,c,p,B,z,j),c=n(F[1],i,a,s,o,h,!u,l,c,B,g,z,j)}else c=g-p>=1e-9?n(r,i,a,s,o,h,!u,l,c,p,g,z,j):n(i,r,s,a,o,h,u,l,c,z,j,p,g);return c})(y?r:n,y?n:r,y?o:s,y?s:o,h,u,y,0,0,0,1,0,1),!m||h.length===x)for(d=0;d<4;d++){var w=d>>1,b=1&d,C=6*w,k=6*b,T=new _(n[C],n[C+1]),A=new _(r[k],r[k+1]);T.isClose(A,1e-12)&&t(h,u,s,w,o,b)}}}return h}function s(e,n,i,r){var s=R.classify(e);if("loop"===s.type){var a=s.roots;t(i,r,n,a[0],n,a[1])}return i}function a(t,e){function n(t){var e=t[6]-t[0],n=t[7]-t[1];return e*e+n*n}var i=Math.abs,r=S.getDistance,s=R.isStraight(t),a=R.isStraight(e),o=s&&a,h=n(t)<n(e),u=h?e:t,l=h?t:e,c=u[0],f=u[1],d=u[6]-c,p=u[7]-f;if(r(c,f,d,p,l[0],l[1],!0)<1e-7&&r(c,f,d,p,l[6],l[7],!0)<1e-7)!o&&r(c,f,d,p,u[2],u[3],!0)<1e-7&&r(c,f,d,p,u[4],u[5],!0)<1e-7&&r(c,f,d,p,l[2],l[3],!0)<1e-7&&r(c,f,d,p,l[4],l[5],!0)<1e-7&&(s=a=o=!0);else if(o)return null;if(s^a)return null;for(var g=[t,e],v=[],m=0;m<4&&v.length<2;m++){var y=1&m,x=1^y,w=m>>1,b=R.getTimeOf(g[y],new _(g[x][w?6:0],g[x][w?7:1]));if(null!=b){var C=y?[w,b]:[b,w];(!v.length||i(C[0]-v[0][0])>1e-8&&i(C[1]-v[0][1])>1e-8)&&v.push(C)}if(m>2&&!v.length)break}if(2!==v.length)v=null;else if(!o){var k=R.getPart(t,v[0][0],v[1][0]),T=R.getPart(e,v[0][1],v[1][1]);(i(T[2]-k[2])>1e-7||i(T[3]-k[3])>1e-7||i(T[4]-k[4])>1e-7||i(T[5]-k[5])>1e-7)&&(v=null)}return v}return{getIntersections:function(t){var e=this.getValues(),n=t&&t!==this&&t.getValues();return n?r(e,n,this,t,[]):s(e,this,[])},statics:{getOverlaps:a,getIntersections:function(t,e,n,i,a,o){var h=!e;h&&(e=t);for(var u,c,f=t.length,d=e.length,p=[],g=[],v=0;v<d;v++)p[v]=e[v].getValues(a);for(v=0;v<f;v++){var _=t[v],m=h?p[v]:_.getValues(i),y=_.getPath();y!==c&&(c=y,u=[],g.push(u)),h&&s(m,_,u,n);for(var x=h?v+1:0;x<d;x++){if(o&&u.length)return u;r(m,p[x],_,e[x],u,n)}}u=[],v=0;for(var w=g.length;v<w;v++)l.push(u,g[v]);return u},getCurveLineIntersections:i,getTimesWithTangent:function(t,e){var n=t[0],i=t[1],r=t[2],s=t[3],a=t[4],o=t[5],h=t[6],u=t[7],l=e.normalize(),c=l.x,f=l.y,d=3*h-9*a+9*r-3*n,p=3*u-9*o+9*s-3*i,v=6*a-12*r+6*n,_=6*o-12*s+6*i,m=3*r-3*n,y=3*s-3*i,x=2*d*f-2*p*c,w=[];if(Math.abs(x)<g.CURVETIME_EPSILON){if(0!=(x=d*_-p*v)){var b=-(d*y-p*m)/x;b>=0&&b<=1&&w.push(b)}}else{var C=(v*v-4*d*m)*f*f+(-2*v*_+4*p*m+4*d*y)*c*f+(_*_-4*p*y)*c*c,S=v*f-_*c;if(C>=0&&0!=x){var k=Math.sqrt(C),T=-(S+k)/x,A=(-S+k)/x;T>=0&&T<=1&&w.push(T),A>=0&&A<=1&&w.push(A)}}return w}}}}),z=l.extend({_class:"CurveLocation",initialize:function(t,e,n,i,r){if(e>=.99999999){var s=t.getNext();s&&(e=0,t=s)}this._setCurve(t),this._time=e,this._point=n||t.getPointAtTime(e),this._overlap=i,this._distance=r,this._intersection=this._next=this._previous=null},_setCurve:function(t){var e=t._path;this._path=e,this._version=e?e._version:0,this._curve=t,this._segment=null,this._segment1=t._segment1,this._segment2=t._segment2},_setSegment:function(t){this._setCurve(t.getCurve()),this._segment=t,this._time=t===this._segment1?0:1,this._point=t._point.clone()},getSegment:function(){var t=this._segment;if(!t){var e=this.getCurve(),n=this.getTime();0===n?t=e._segment1:1===n?t=e._segment2:null!=n&&(t=e.getPartLength(0,n)<e.getPartLength(n,1)?e._segment1:e._segment2),this._segment=t}return t},getCurve:function(){var t=this._path,e=this;function n(t){var n=t&&t.getCurve();if(n&&null!=(e._time=n.getTimeOf(e._point)))return e._setCurve(n),n}return t&&t._version!==this._version&&(this._time=this._offset=this._curveOffset=this._curve=null),this._curve||n(this._segment)||n(this._segment1)||n(this._segment2.getPrevious())},getPath:function(){var t=this.getCurve();return t&&t._path},getIndex:function(){var t=this.getCurve();return t&&t.getIndex()},getTime:function(){var t=this.getCurve(),e=this._time;return t&&null==e?this._time=t.getTimeOf(this._point):e},getParameter:"#getTime",getPoint:function(){return this._point},getOffset:function(){var t=this._offset;if(null==t){t=0;var e=this.getPath(),n=this.getIndex();if(e&&null!=n)for(var i=e.getCurves(),r=0;r<n;r++)t+=i[r].getLength();this._offset=t+=this.getCurveOffset()}return t},getCurveOffset:function(){var t=this._curveOffset;if(null==t){var e=this.getCurve(),n=this.getTime();this._curveOffset=t=null!=n&&e&&e.getPartLength(0,n)}return t},getIntersection:function(){return this._intersection},getDistance:function(){return this._distance},divide:function(){var t=this.getCurve(),e=t&&t.divideAtTime(this.getTime());return e&&this._setSegment(e._segment1),e},split:function(){var t=this.getCurve(),e=t._path,n=t&&t.splitAtTime(this.getTime());return n&&this._setSegment(e.getLastSegment()),n},equals:function(t,e){var n=this===t;if(!n&&t instanceof z){var i=this.getCurve(),r=t.getCurve(),s=i._path;if(s===r._path){var a=Math.abs,o=a(this.getOffset()-t.getOffset()),h=!e&&this._intersection,u=!e&&t._intersection;n=(o<1e-7||s&&a(s.getLength()-o)<1e-7)&&(!h&&!u||h&&u&&h.equals(u,!0))}}return n},toString:function(){var t=[],e=this.getPoint(),n=p.instance;e&&t.push("point: "+e);var i=this.getIndex();null!=i&&t.push("index: "+i);var r=this.getTime();return null!=r&&t.push("time: "+n.number(r)),null!=this._distance&&t.push("distance: "+n.number(this._distance)),"{ "+t.join(", ")+" }"},isTouching:function(){var t=this._intersection;if(t&&this.getTangent().isCollinear(t.getTangent())){var e=this.getCurve(),n=t.getCurve();return!(e.isStraight()&&n.isStraight()&&e.getLine().intersect(n.getLine()))}return!1},isCrossing:function(){var t=this._intersection;if(!t)return!1;var e=this.getTime(),n=t.getTime(),i=e>=1e-8&&e<=1-1e-8,r=n>=1e-8&&n<=1-1e-8;if(i&&r)return!this.isTouching();var s=this.getCurve(),a=e<1e-8?s.getPrevious():s,o=t.getCurve(),h=n<1e-8?o.getPrevious():o;if(e>1-1e-8&&(s=s.getNext()),n>1-1e-8&&(o=o.getNext()),!(a&&s&&h&&o))return!1;var u=[];function l(t,e){var n=t.getValues(),i=R.classify(n).roots||R.getPeaks(n),r=i.length,s=e&&r>1?i[r-1]:r>0?i[0]:.5;u.push(R.getLength(n,e?s:0,e?1:s)/2)}function c(t,e,n){return e<n?t>e&&t<n:t>e||t<n}i||(l(a,!0),l(s,!1)),r||(l(h,!0),l(o,!1));var f=this.getPoint(),d=Math.min.apply(Math,u),p=i?s.getTangentAtTime(e):s.getPointAt(d).subtract(f),g=i?p.negate():a.getPointAt(-d).subtract(f),v=r?o.getTangentAtTime(n):o.getPointAt(d).subtract(f),_=r?v.negate():h.getPointAt(-d).subtract(f),m=g.getAngle(),y=p.getAngle(),x=_.getAngle(),w=v.getAngle();return!!(i?c(m,x,w)^c(y,x,w)&&c(m,w,x)^c(y,w,x):c(x,m,y)^c(w,m,y)&&c(x,y,m)^c(w,y,m))},hasOverlap:function(){return!!this._overlap}},l.each(R._evaluateMethods,function(t){var e=t+"At";this[t]=function(){var t=this.getCurve(),n=this.getTime();return null!=n&&t&&t[e](n,!0)}},{preserve:!0}),new function(){function t(t,e,n){var i=t.length,r=0,s=i-1;function a(n,r){for(var s=n+r;s>=-1&&s<=i;s+=r){var a=t[(s%i+i)%i];if(!e.getPoint().isClose(a.getPoint(),1e-7))break;if(e.equals(a))return a}return null}for(;r<=s;){var o,h=r+s>>>1,u=t[h];if(n&&(o=e.equals(u)?u:a(h,-1)||a(h,1)))return e._overlap&&(o._overlap=o._intersection._overlap=!0),o;var l=e.getPath(),c=u.getPath();(l!==c?l._id-c._id:e.getIndex()+e.getTime()-(u.getIndex()+u.getTime()))<0?s=h-1:r=h+1}return t.splice(r,0,e),e}return{statics:{insert:t,expand:function(e){for(var n=e.slice(),i=e.length-1;i>=0;i--)t(n,e[i]._intersection,!1);return n}}}}),j=T.extend({_class:"PathItem",_selectBounds:!1,_canScaleStroke:!0,beans:!0,initialize:function(){},statics:{create:function(t){var e,n,i;if(l.isPlainObject(t)?(n=t.segments,e=t.pathData):Array.isArray(t)?n=t:"string"==typeof t&&(e=t),n){var r=n[0];i=r&&Array.isArray(r[0])}else e&&(i=(e.match(/m/gi)||[]).length>1||/z\s*\S+/i.test(e));return new(i?B:V)(t)}},_asPathItem:function(){return this},isClockwise:function(){return this.getArea()>=0},setClockwise:function(t){this.isClockwise()!=(t=!!t)&&this.reverse()},setPathData:function(t){var e,n,i,r=t&&t.match(/[mlhvcsqtaz][^mlhvcsqtaz]*/gi),s=!1,a=new _,o=new _;function h(t,n){var i=+e[t];return s&&(i+=a[n]),i}function u(t){return new _(h(t,"x"),h(t+1,"y"))}this.clear();for(var l=0,c=r&&r.length;l<c;l++){var f=r[l],d=f[0],p=d.toLowerCase(),g=(e=f.match(/[+-]?(?:\d*\.\d+|\d+\.?)(?:[eE][+-]?\d+)?/g))&&e.length;switch(s=d===p,"z"!==n||/[mz]/.test(p)||this.moveTo(a),p){case"m":case"l":for(var v="m"===p,m=0;m<g;m+=2)this[v?"moveTo":"lineTo"](a=u(m)),v&&(o=a,v=!1);i=a;break;case"h":case"v":var x="h"===p?"x":"y";a=a.clone();for(m=0;m<g;m++)a[x]=h(m,x),this.lineTo(a);i=a;break;case"c":for(m=0;m<g;m+=6)this.cubicCurveTo(u(m),i=u(m+2),a=u(m+4));break;case"s":for(m=0;m<g;m+=4)this.cubicCurveTo(/[cs]/.test(n)?a.multiply(2).subtract(i):a,i=u(m),a=u(m+2)),n=p;break;case"q":for(m=0;m<g;m+=4)this.quadraticCurveTo(i=u(m),a=u(m+2));break;case"t":for(m=0;m<g;m+=2)this.quadraticCurveTo(i=/[qt]/.test(n)?a.multiply(2).subtract(i):a,a=u(m)),n=p;break;case"a":for(m=0;m<g;m+=7)this.arcTo(a=u(m+5),new y(+e[m],+e[m+1]),+e[m+2],+e[m+4],+e[m+3]);break;case"z":this.closePath(1e-12),a=o}n=p}},_canComposite:function(){return!(this.hasFill()&&this.hasStroke())},_contains:function(t){var e=t.isInside(this.getBounds({internal:!0,handle:!0}))?this._getWinding(t):{};return e.onPath||!!("evenodd"===this.getFillRule()?1&e.windingL||1&e.windingR:e.winding)},getIntersections:function(t,e,n,i){var r=this===t||!t,s=this._matrix._orNullIfIdentity(),a=r?s:(n||t._matrix)._orNullIfIdentity();return r||this.getBounds(s).intersects(t.getBounds(a),1e-12)?R.getIntersections(this.getCurves(),!r&&t.getCurves(),e,s,a,i):[]},getCrossings:function(t){return this.getIntersections(t,function(t){return t.hasOverlap()||t.isCrossing()})},getNearestLocation:function(){for(var t=_.read(arguments),e=this.getCurves(),n=1/0,i=null,r=0,s=e.length;r<s;r++){var a=e[r].getNearestLocation(t);a._distance<n&&(n=a._distance,i=a)}return i},getNearestPoint:function(){var t=this.getNearestLocation.apply(this,arguments);return t?t.getPoint():t},interpolate:function(t,e,n){var i=!this._children,r=i?"_segments":"_children",s=t[r],a=e[r],o=this[r];if(!s||!a||s.length!==a.length)throw new Error("Invalid operands in interpolate() call: "+t+", "+e);var h=o.length,u=a.length;if(h<u)for(var l=i?O:V,c=h;c<u;c++)this.add(new l);else h>u&&this[i?"removeSegments":"removeChildren"](u,h);for(c=0;c<u;c++)o[c].interpolate(s[c],a[c],n);i&&(this.setClosed(t._closed),this._changed(9))},compare:function(t){var e=!1;if(t){var n=this._children||[this],i=t._children?t._children.slice():[t],r=n.length,s=i.length,a=[],o=0;e=!0;for(var h=r-1;h>=0&&e;h--){var u=n[h];e=!1;for(var l=s-1;l>=0&&!e;l--)u.compare(i[l])&&(a[l]||(a[l]=!0,o++),e=!0)}e=e&&o===s}return e}}),V=j.extend({_class:"Path",_serializeFields:{segments:[],closed:!1},initialize:function(t){this._closed=!1,this._segments=[],this._version=0;var e=Array.isArray(t)?"object"==typeof t[0]?t:arguments:!t||t.size!==o||t.x===o&&t.point===o?null:arguments;e&&e.length>0?this.setSegments(e):(this._curves=o,this._segmentSelection=0,e||"string"!=typeof t||(this.setPathData(t),t=null)),this._initialize(!e&&t)},_equals:function(t){return this._closed===t._closed&&l.equals(this._segments,t._segments)},copyContent:function(t){this.setSegments(t._segments),this._closed=t._closed},_changed:function t(e){if(t.base.call(this,e),8&e){if(this._length=this._area=o,32&e)this._version++;else if(this._curves)for(var n=0,i=this._curves.length;n<i;n++)this._curves[n]._changed()}else 64&e&&(this._bounds=o)},getStyle:function(){var t=this._parent;return(t instanceof B?t:this)._style},getSegments:function(){return this._segments},setSegments:function(t){var e=this.isFullySelected(),n=t&&t.length;if(this._segments.length=0,this._segmentSelection=0,this._curves=o,n){var i=t[n-1];"boolean"==typeof i&&(this.setClosed(i),n--),this._add(O.readList(t,0,{},n))}e&&this.setFullySelected(!0)},getFirstSegment:function(){return this._segments[0]},getLastSegment:function(){return this._segments[this._segments.length-1]},getCurves:function(){var t=this._curves,e=this._segments;if(!t){var n=this._countCurves();t=this._curves=new Array(n);for(var i=0;i<n;i++)t[i]=new R(this,e[i],e[i+1]||e[0])}return t},getFirstCurve:function(){return this.getCurves()[0]},getLastCurve:function(){var t=this.getCurves();return t[t.length-1]},isClosed:function(){return this._closed},setClosed:function(t){if(this._closed!=(t=!!t)){if(this._closed=t,this._curves){var e=this._curves.length=this._countCurves();t&&(this._curves[e-1]=new R(this,this._segments[e-1],this._segments[0]))}this._changed(41)}}},{beans:!0,getPathData:function(t,e){var n,i,r,s,a,o,h,u,l=this._segments,c=l.length,f=new p(e),d=new Array(6),g=!0,v=[];function _(e,l){if(e._transformCoordinates(t,d),n=d[0],i=d[1],g)v.push("M"+f.pair(n,i)),g=!1;else if(a=d[2],o=d[3],a===n&&o===i&&h===r&&u===s){if(!l){var c=n-r,p=i-s;v.push(0===c?"v"+f.number(p):0===p?"h"+f.number(c):"l"+f.pair(c,p))}}else v.push("c"+f.pair(h-r,u-s)+" "+f.pair(a-r,o-s)+" "+f.pair(n-r,i-s));r=n,s=i,h=d[4],u=d[5]}if(!c)return"";for(var m=0;m<c;m++)_(l[m]);return this._closed&&c>0&&(_(l[0],!0),v.push("z")),v.join("")},isEmpty:function(){return!this._segments.length},_transformContent:function(t){for(var e=this._segments,n=new Array(6),i=0,r=e.length;i<r;i++)e[i]._transformCoordinates(t,n,!0);return!0},_add:function(t,e){for(var n=this._segments,i=this._curves,r=t.length,s=null==e,a=(e=s?n.length:e,0);a<r;a++){var o=t[a];o._path&&(o=t[a]=o.clone()),o._path=this,o._index=e+a,o._selection&&this._updateSelection(o,0,o._selection)}if(s)l.push(n,t);else{n.splice.apply(n,[e,0].concat(t));a=e+r;for(var h=n.length;a<h;a++)n[a]._index=a}if(i){var u=this._countCurves(),c=e>0&&e+r-1===u?e-1:e,f=c,d=Math.min(c+r,u);t._curves&&(i.splice.apply(i,[c,0].concat(t._curves)),f+=t._curves.length);for(a=f;a<d;a++)i.splice(a,0,new R(this,null,null));this._adjustCurves(c,d)}return this._changed(41),t},_adjustCurves:function(t,e){for(var n,i=this._segments,r=this._curves,s=t;s<e;s++)(n=r[s])._path=this,n._segment1=i[s],n._segment2=i[s+1]||i[0],n._changed();(n=r[this._closed&&!t?i.length-1:t-1])&&(n._segment2=i[t]||i[0],n._changed()),(n=r[e])&&(n._segment1=i[e],n._changed())},_countCurves:function(){var t=this._segments.length;return!this._closed&&t>0?t-1:t},add:function(t){return arguments.length>1&&"number"!=typeof t?this._add(O.readList(arguments)):this._add([O.read(arguments)])[0]},insert:function(t,e){return arguments.length>2&&"number"!=typeof e?this._add(O.readList(arguments,1),t):this._add([O.read(arguments,1)],t)[0]},addSegment:function(){return this._add([O.read(arguments)])[0]},insertSegment:function(t){return this._add([O.read(arguments,1)],t)[0]},addSegments:function(t){return this._add(O.readList(t))},insertSegments:function(t,e){return this._add(O.readList(e),t)},removeSegment:function(t){return this.removeSegments(t,t+1)[0]||null},removeSegments:function(t,e,n){t=t||0,e=l.pick(e,this._segments.length);var i=this._segments,r=this._curves,s=i.length,a=i.splice(t,e-t),o=a.length;if(!o)return a;for(var h=0;h<o;h++){var u=a[h];u._selection&&this._updateSelection(u,u._selection,0),u._index=u._path=null}h=t;for(var c=i.length;h<c;h++)i[h]._index=h;if(r){var f=t>0&&e===s+(this._closed?1:0)?t-1:t;for(h=(r=r.splice(f,o)).length-1;h>=0;h--)r[h]._path=null;n&&(a._curves=r.slice(1)),this._adjustCurves(f,f)}return this._changed(41),a},clear:"#removeSegments",hasHandles:function(){for(var t=this._segments,e=0,n=t.length;e<n;e++)if(t[e].hasHandles())return!0;return!1},clearHandles:function(){for(var t=this._segments,e=0,n=t.length;e<n;e++)t[e].clearHandles()},getLength:function(){if(null==this._length){for(var t=this.getCurves(),e=0,n=0,i=t.length;n<i;n++)e+=t[n].getLength();this._length=e}return this._length},getArea:function(){var t=this._area;if(null==t){var e=this._segments,n=this._closed;t=0;for(var i=0,r=e.length;i<r;i++){var s=i+1===r;t+=R.getArea(R.getValues(e[i],e[s?0:i+1],null,s&&!n))}this._area=t}return t},isFullySelected:function(){var t=this._segments.length;return this.isSelected()&&t>0&&this._segmentSelection===7*t},setFullySelected:function(t){t&&this._selectSegments(!0),this.setSelected(t)},setSelection:function t(e){1&e||this._selectSegments(!1),t.base.call(this,e)},_selectSegments:function(t){var e=this._segments,n=e.length,i=t?7:0;this._segmentSelection=i*n;for(var r=0;r<n;r++)e[r]._selection=i},_updateSelection:function(t,e,n){t._selection=n,(this._segmentSelection+=n-e)>0&&this.setSelected(!0)},divideAt:function(t){var e,n=this.getLocationAt(t);return n&&(e=n.getCurve().divideAt(n.getCurveOffset()))?e._segment1:null},splitAt:function(t){var e=this.getLocationAt(t),n=e&&e.index,i=e&&e.time;i>1-1e-8&&(n++,i=0);var r=this.getCurves();if(n>=0&&n<r.length){i>=1e-8&&r[n++].divideAtTime(i);var s,a=this.removeSegments(n,this._segments.length,!0);return this._closed?(this.setClosed(!1),s=this):((s=new V(T.NO_INSERT)).insertAbove(this),s.copyAttributes(this)),s._add(a,0),this.addSegment(a[0]),s}return null},split:function(t,e){var n,i=e===o?t:(n=this.getCurves()[t])&&n.getLocationAtTime(e);return null!=i?this.splitAt(i):null},join:function(t,e){var n=e||0;if(t&&t!==this){var i=t._segments,r=this.getLastSegment(),s=t.getLastSegment();if(!s)return this;r&&r._point.isClose(s._point,n)&&t.reverse();var a=t.getFirstSegment();if(r&&r._point.isClose(a._point,n))r.setHandleOut(a._handleOut),this._add(i.slice(1));else{var o=this.getFirstSegment();o&&o._point.isClose(a._point,n)&&t.reverse(),s=t.getLastSegment(),o&&o._point.isClose(s._point,n)?(o.setHandleIn(s._handleIn),this._add(i.slice(0,i.length-1),0)):this._add(i.slice())}t._closed&&this._add([i[0]]),t.remove()}var h=this.getFirstSegment(),u=this.getLastSegment();return h!==u&&h._point.isClose(u._point,n)&&(h.setHandleIn(u._handleIn),u.remove(),this.setClosed(!0)),this},reduce:function(t){for(var e=this.getCurves(),n=t&&t.simplify,i=n?1e-7:0,r=e.length-1;r>=0;r--){var s=e[r];!s.hasHandles()&&(!s.hasLength(i)||n&&s.isCollinear(s.getNext()))&&s.remove()}return this},reverse:function(){this._segments.reverse();for(var t=0,e=this._segments.length;t<e;t++){var n=this._segments[t],i=n._handleIn;n._handleIn=n._handleOut,n._handleOut=i,n._index=t}this._curves=null,this._changed(9)},flatten:function(t){for(var e=new F(this,t||.25,256,!0).parts,n=e.length,i=[],r=0;r<n;r++)i.push(new O(e[r].curve.slice(0,2)));!this._closed&&n>0&&i.push(new O(e[n-1].curve.slice(6))),this.setSegments(i)},simplify:function(t){var e=new q(this).fit(t||2.5);return e&&this.setSegments(e),!!e},smooth:function(t){var e=this,n=t||{},i=n.type||"asymmetric",r=this._segments,s=r.length,a=this._closed;function h(t,n){var i=t&&t.index;if(null!=i){var r=t.path;if(r&&r!==e)throw new Error(t._class+" "+i+" of "+r+" is not part of "+e);n&&t instanceof R&&i++}else i="number"==typeof t?t:n;return Math.min(i<0&&a?i%s:i<0?i+s:i,s-1)}var u=a&&n.from===o&&n.to===o,l=h(n.from,0),c=h(n.to,s-1);if(l>c)if(a)l-=s;else{var f=l;l=c,c=f}if(/^(?:asymmetric|continuous)$/.test(i)){var d="asymmetric"===i,p=Math.min,g=c-l+1,v=g-1,_=u?p(g,4):1,m=_,y=_,x=[];if(a||(m=p(1,l),y=p(1,s-c-1)),(v+=m+y)<=1)return;for(var w=0,b=l-m;w<=v;w++,b++)x[w]=r[(b<0?b+s:b)%s]._point;var C=x[0]._x+2*x[1]._x,S=x[0]._y+2*x[1]._y,k=2,T=v-1,A=[C],E=[S],P=[k],I=[],N=[];for(w=1;w<v;w++){var L=w<T,M=L?4:d?2:7,O=L?4:d?3:8,D=L?2:d?0:1,z=(L?1:d?1:2)/k;k=P[w]=M-z,C=A[w]=O*x[w]._x+D*x[w+1]._x-z*C,S=E[w]=O*x[w]._y+D*x[w+1]._y-z*S}I[T]=A[T]/P[T],N[T]=E[T]/P[T];for(w=v-2;w>=0;w--)I[w]=(A[w]-I[w+1])/P[w],N[w]=(E[w]-N[w+1])/P[w];I[v]=(3*x[v]._x-I[T])/2,N[v]=(3*x[v]._y-N[T])/2;w=m;var j=v-y;for(b=l;w<=j;w++,b++){var V=r[b<0?b+s:b],B=V._point,F=I[w]-B._x,q=N[w]-B._y;(u||w<j)&&V.setHandleOut(F,q),(u||w>m)&&V.setHandleIn(-F,-q)}}else for(w=l;w<=c;w++)r[w<0?w+s:w].smooth(n,!u&&w===l,!u&&w===c)},toShape:function(t){if(!this._closed)return null;var e,n,i,r,s,a,h,u=this._segments;function l(t,e){var n=u[t],i=n.getNext(),r=u[e],s=r.getNext();return n._handleOut.isZero()&&i._handleIn.isZero()&&r._handleOut.isZero()&&s._handleIn.isZero()&&i._point.subtract(n._point).isCollinear(s._point.subtract(r._point))}function c(t){var e=u[t],n=e.getNext(),i=e._handleOut,r=n._handleIn;if(i.isOrthogonal(r)){var s=e._point,a=n._point,o=new S(s,i,!0).intersect(new S(a,r,!0),!0);return o&&g.isZero(i.getLength()/o.subtract(s).getLength()-.5522847498307936)&&g.isZero(r.getLength()/o.subtract(a).getLength()-.5522847498307936)}return!1}function f(t,e){return u[t]._point.getDistance(u[e]._point)}if(!this.hasHandles()&&4===u.length&&l(0,2)&&l(1,3)&&(s=u[1],a=s.getPrevious(),h=s.getNext(),a._handleOut.isZero()&&s._handleIn.isZero()&&s._handleOut.isZero()&&h._handleIn.isZero()&&s._point.subtract(a._point).isOrthogonal(h._point.subtract(s._point)))?(e=P.Rectangle,n=new y(f(0,3),f(0,1)),r=u[1]._point.add(u[2]._point).divide(2)):8===u.length&&c(0)&&c(2)&&c(4)&&c(6)&&l(1,5)&&l(3,7)?(e=P.Rectangle,i=(n=new y(f(1,6),f(0,3))).subtract(new y(f(0,7),f(1,2))).divide(2),r=u[3]._point.add(u[4]._point).divide(2)):4===u.length&&c(0)&&c(1)&&c(2)&&c(3)&&(g.isZero(f(0,2)-f(1,3))?(e=P.Circle,i=f(0,2)/2):(e=P.Ellipse,i=new y(f(2,0)/2,f(3,1)/2)),r=u[1]._point),e){var d=this.getPosition(!0),p=new e({center:d,size:n,radius:i,insert:!1});return p.copyAttributes(this,!0),p._matrix.prepend(this._matrix),p.rotate(r.subtract(d).getAngle()+90),(t===o||t)&&p.insertAbove(this),p}return null},toPath:"#clone",compare:function t(e){if(!e||e instanceof B)return t.base.call(this,e);var n=this.getCurves(),i=e.getCurves(),r=n.length,s=i.length;if(!r||!s)return r==s;for(var a,o,h=n[0].getValues(),u=[],l=0,c=0,f=0;f<s;f++){var d=i[f].getValues();if(u.push(d),v=R.getOverlaps(h,d)){a=!f&&v[0][0]>0?s-1:f,o=v[0][1];break}}var p,g=Math.abs;for(d=u[a];h&&d;){var v;if(v=R.getOverlaps(h,d))if(g(v[0][0]-c)<1e-8){1===(c=v[1][0])&&(h=++l<r?n[l].getValues():null,c=0);var _=v[0][1];if(g(_-o)<1e-8){if(p||(p=[a,_]),1===(o=v[1][1])&&(++a>=s&&(a=0),d=u[a]||i[a].getValues(),o=0),!h)return p[0]===a&&p[1]===o;continue}}break}return!1},_hitTestSelf:function(t,e,n,i){var r,s,a,o,h,u,l=this,c=this.getStyle(),f=this._segments,d=f.length,p=this._closed,g=e._tolerancePadding,v=g,_=e.stroke&&c.hasStroke(),m=e.fill&&c.hasFill(),y=e.curves,x=_?c.getStrokeWidth()/2:m&&e.tolerance>0||y?0:null;function w(e,n){return t.subtract(e).divide(n).length<=1}function b(t,n,i){if(!e.selected||n.isSelected()){var r=t._point;if(n!==r&&(n=n.add(r)),w(n,v))return new M(i,l,{segment:t,point:n})}}function C(t,n){return(n||e.segments)&&b(t,t._point,"segment")||!n&&e.handles&&(b(t,t._handleIn,"handle-in")||b(t,t._handleOut,"handle-out"))}function S(t){o.add(t)}function k(e){var n,h=p||e._index>0&&e._index<d-1;return"round"===(h?r:s)?w(e._point,v):(o=new V({internal:!0,closed:!0}),h?e.isSmooth()||V._addBevelJoin(e,r,x,a,null,i,S,!0):"square"===s&&V._addSquareCap(e,s,x,null,i,S,!0),o.isEmpty()?void 0:o.contains(t)||(n=o.getNearestLocation(t))&&w(n.getPoint(),g))}if(null!==x&&(x>0?(r=c.getStrokeJoin(),s=c.getStrokeCap(),a=c.getMiterLimit(),v=v.add(V._getStrokePadding(x,i))):r=s="round"),!e.ends||e.segments||p){if(e.segments||e.handles)for(var T=0;T<d;T++)if(u=C(f[T]))return u}else if(u=C(f[0],!0)||C(f[d-1],!0))return u;if(null!==x){if(h=this.getNearestLocation(t)){var A=h.getTime();0===A||1===A&&d>1?k(h.getSegment())||(h=null):w(h.getPoint(),v)||(h=null)}if(!h&&"miter"===r&&d>1)for(T=0;T<d;T++){var E=f[T];if(t.getDistance(E._point)<=a*x&&k(E)){h=E.getLocation();break}}}return!h&&m&&this._contains(t)||h&&!_&&!y?new M("fill",this):h?new M(_?"stroke":"curve",this,{location:h,point:h.getPoint()}):null}},l.each(R._evaluateMethods,function(t){this[t+"At"]=function(e){var n=this.getLocationAt(e);return n&&n[t]()}},{beans:!1,getLocationOf:function(){for(var t=_.read(arguments),e=this.getCurves(),n=0,i=e.length;n<i;n++){var r=e[n].getLocationOf(t);if(r)return r}return null},getOffsetOf:function(){var t=this.getLocationOf.apply(this,arguments);return t?t.getOffset():null},getLocationAt:function(t){if("number"==typeof t){for(var e=this.getCurves(),n=0,i=0,r=e.length;i<r;i++){var s=n,a=e[i];if((n+=a.getLength())>t)return a.getLocationAt(t-s)}if(e.length>0&&t<=this.getLength())return new z(e[e.length-1],1)}else if(t&&t.getPath&&t.getPath()===this)return t;return null},getOffsetsWithTangent:function(){var t=_.read(arguments);if(t.isZero())return[];for(var e=[],n=0,i=this.getCurves(),r=0,s=i.length;r<s;r++){for(var a=i[r],o=a.getTimesWithTangent(t),h=0,u=o.length;h<u;h++){var l=n+a.getOffsetAtTime(o[h]);e.indexOf(l)<0&&e.push(l)}n+=a.length}return e}}),new function(){function t(t,e,n){var i,r,s,a,o,h,u,l,c=e._segments,f=c.length,d=new Array(6),p=!0;function g(e){if(n)e._transformCoordinates(n,d),i=d[0],r=d[1];else{var c=e._point;i=c._x,r=c._y}if(p)t.moveTo(i,r),p=!1;else{if(n)o=d[2],h=d[3];else{var f=e._handleIn;o=i+f._x,h=r+f._y}o===i&&h===r&&u===s&&l===a?t.lineTo(i,r):t.bezierCurveTo(u,l,o,h,i,r)}if(s=i,a=r,n)u=d[4],l=d[5];else{f=e._handleOut;u=s+f._x,l=a+f._y}}for(var v=0;v<f;v++)g(c[v]);e._closed&&f>0&&g(c[0])}return{_draw:function(e,n,i,r){var s=n.dontStart,a=n.dontFinish||n.clip,o=this.getStyle(),h=o.hasFill(),u=o.hasStroke(),l=o.getDashArray(),c=!ct.support.nativeDash&&u&&l&&l.length;function f(t){return l[(t%c+c)%c]}if(s||e.beginPath(),(h||u&&!c||a)&&(t(e,this,r),this._closed&&e.closePath()),!a&&(h||u)&&(this._setStyles(e,n,i),h&&(e.fill(o.getFillRule()),e.shadowColor="rgba(0,0,0,0)"),u)){if(c){s||e.beginPath();var d,p=new F(this,.25,32,!1,r),g=p.length,v=-o.getDashOffset(),_=0;for(v%=g;v>0;)v-=f(_--)+f(_--);for(;v<g;)d=v+f(_++),(v>0||d>0)&&p.drawPart(e,Math.max(v,0),Math.max(d,0)),v=d+f(_++)}e.stroke()}},_drawSelected:function(e,n){e.beginPath(),t(e,this,n),e.stroke(),function(t,e,n,i){var r,s,a=i/2,o=new Array(6);function h(e){var n=o[e],i=o[e+1];r==n&&s==i||(t.beginPath(),t.moveTo(r,s),t.lineTo(n,i),t.stroke(),t.beginPath(),t.arc(n,i,a,0,2*Math.PI,!0),t.fill())}for(var u=0,l=e.length;u<l;u++){var c=e[u],f=c._selection;if(c._transformCoordinates(n,o),r=o[0],s=o[1],2&f&&h(2),4&f&&h(4),t.fillRect(r-a,s-a,i,i),!(1&f)){var d=t.fillStyle;t.fillStyle="#ffffff",t.fillRect(r-a+1,s-a+1,i-2,i-2),t.fillStyle=d}}}(e,this._segments,n,ct.settings.handleSize)}}},new function(){function t(t){var e=t._segments;if(!e.length)throw new Error("Use a moveTo() command first");return e[e.length-1]}return{moveTo:function(){var t=this._segments;1===t.length&&this.removeSegment(0),t.length||this._add([new O(_.read(arguments))])},moveBy:function(){throw new Error("moveBy() is unsupported on Path items.")},lineTo:function(){this._add([new O(_.read(arguments))])},cubicCurveTo:function(){var e=_.read(arguments),n=_.read(arguments),i=_.read(arguments),r=t(this);r.setHandleOut(e.subtract(r._point)),this._add([new O(i,n.subtract(i))])},quadraticCurveTo:function(){var e=_.read(arguments),n=_.read(arguments),i=t(this)._point;this.cubicCurveTo(e.add(i.subtract(e).multiply(1/3)),e.add(n.subtract(e).multiply(1/3)),n)},curveTo:function(){var e=_.read(arguments),n=_.read(arguments),i=l.pick(l.read(arguments),.5),r=1-i,s=t(this)._point,a=e.subtract(s.multiply(r*r)).subtract(n.multiply(i*i)).divide(2*i*r);if(a.isNaN())throw new Error("Cannot put a curve through points with parameter = "+i);this.quadraticCurveTo(a,n)},arcTo:function(){var e,n,i,r,s=Math.abs,a=Math.sqrt,o=t(this),h=o._point,u=_.read(arguments),c=l.peek(arguments);if("boolean"==typeof(m=l.pick(c,!0)))var f=(w=h.add(u).divide(2)).add(w.subtract(h).rotate(m?-90:90));else if(l.remain(arguments)<=2)f=u,u=_.read(arguments);else{var d=y.read(arguments),p=g.isZero;if(p(d.width)||p(d.height))return this.lineTo(u);var v=l.read(arguments),m=!!l.read(arguments),x=!!l.read(arguments),w=h.add(u).divide(2),b=($=h.subtract(w).rotate(-v)).x,k=$.y,T=s(d.width),A=s(d.height),E=T*T,P=A*A,I=b*b,N=k*k,L=a(I/E+N/P);if(L>1&&(E=(T*=L)*T,P=(A*=L)*A),s(L=(E*P-E*N-P*I)/(E*N+P*I))<1e-12&&(L=0),L<0)throw new Error("Cannot create an arc with the given arguments");e=new _(T*k/A,-A*b/T).multiply((x===m?-1:1)*a(L)).rotate(v).add(w),n=(i=(r=(new C).translate(e).rotate(v).scale(T,A))._inverseTransform(h)).getDirectedAngle(r._inverseTransform(u)),!m&&n>0?n-=360:m&&n<0&&(n+=360)}if(f){var M=new S(h.add(f).divide(2),f.subtract(h).rotate(90),!0),D=new S(f.add(u).divide(2),u.subtract(f).rotate(90),!0),R=new S(h,u),z=R.getSide(f);if(!(e=M.intersect(D,!0))){if(!z)return this.lineTo(u);throw new Error("Cannot create an arc with the given arguments")}n=(i=h.subtract(e)).getDirectedAngle(u.subtract(e));var j=R.getSide(e,!0);0===j?n=z*s(n):z===j&&(n+=n<0?360:-360)}for(var V=s(n),B=V>=360?4:Math.ceil((V-1e-7)/90),F=n/B,q=F*Math.PI/360,H=4/3*Math.sin(q)/(1+Math.cos(q)),U=[],W=0;W<=B;W++){var $=u,G=null;if(W<B&&(G=i.rotate(90).multiply(H),r?($=r._transformPoint(i),G=r._transformPoint(i.add(G)).subtract($)):$=e.add(i)),W){var Z=i.rotate(-90).multiply(H);r&&(Z=r._transformPoint(i.add(Z)).subtract($)),U.push(new O($,Z,G))}else o.setHandleOut(G);i=i.rotate(F)}this._add(U)},lineBy:function(){var e=_.read(arguments),n=t(this)._point;this.lineTo(n.add(e))},curveBy:function(){var e=_.read(arguments),n=_.read(arguments),i=l.read(arguments),r=t(this)._point;this.curveTo(r.add(e),r.add(n),i)},cubicCurveBy:function(){var e=_.read(arguments),n=_.read(arguments),i=_.read(arguments),r=t(this)._point;this.cubicCurveTo(r.add(e),r.add(n),r.add(i))},quadraticCurveBy:function(){var e=_.read(arguments),n=_.read(arguments),i=t(this)._point;this.quadraticCurveTo(i.add(e),i.add(n))},arcBy:function(){var e=t(this)._point,n=e.add(_.read(arguments)),i=l.pick(l.peek(arguments),!0);"boolean"==typeof i?this.arcTo(n,i):this.arcTo(n,e.add(_.read(arguments)))},closePath:function(t){this.setClosed(!0),this.join(this,t)}}},{_getBounds:function(t,e){var n=e.handle?"getHandleBounds":e.stroke?"getStrokeBounds":"getBounds";return V[n](this._segments,this._closed,this,t,e)},statics:{getBounds:function(t,e,n,i,r,s){var a=t[0];if(!a)return new w;var o=new Array(6),h=a._transformCoordinates(i,new Array(6)),u=h.slice(0,2),l=u.slice(),c=new Array(2);function f(t){t._transformCoordinates(i,o);for(var e=0;e<2;e++)R._addBounds(h[e],h[e+4],o[e+2],o[e],e,s?s[e]:0,u,l,c);var n=h;h=o,o=n}for(var d=1,p=t.length;d<p;d++)f(t[d]);return e&&f(a),new w(u[0],u[1],l[0]-u[0],l[1]-u[1])},getStrokeBounds:function(t,e,n,i,r){var s=n.getStyle(),a=s.hasStroke(),o=s.getStrokeWidth(),h=a&&n._getStrokeMatrix(i,r),u=a&&V._getStrokePadding(o,h),l=V.getBounds(t,e,n,i,r,u);if(!a)return l;var c=o/2,f=s.getStrokeJoin(),d=s.getStrokeCap(),p=s.getMiterLimit(),g=new w(new y(u));function v(t){l=l.include(t)}function _(t){l=l.unite(g.setCenter(t._point.transform(i)))}function m(t,e){"round"===e||t.isSmooth()?_(t):V._addBevelJoin(t,e,c,p,i,h,v)}function x(t,e){"round"===e?_(t):V._addSquareCap(t,e,c,i,h,v)}for(var b=t.length-(e?0:1),C=1;C<b;C++)m(t[C],f);return e?m(t[0],f):b>0&&(x(t[0],d),x(t[t.length-1],d)),l},_getStrokePadding:function(t,e){if(!e)return[t,t];var n=new _(t,0).transform(e),i=new _(0,t).transform(e),r=n.getAngleInRadians(),s=n.getLength(),a=i.getLength(),o=Math.sin(r),h=Math.cos(r),u=Math.tan(r),l=Math.atan2(a*u,s),c=Math.atan2(a,u*s);return[Math.abs(s*Math.cos(l)*h+a*Math.sin(l)*o),Math.abs(a*Math.sin(c)*h+s*Math.cos(c)*o)]},_addBevelJoin:function(t,e,n,i,r,s,a,o){var h=t.getCurve(),u=h.getPrevious(),l=h.getPoint1().transform(r),c=u.getNormalAtTime(1).multiply(n).transform(s),f=h.getNormalAtTime(0).multiply(n).transform(s);if(c.getDirectedAngle(f)<0&&(c=c.negate(),f=f.negate()),o&&a(l),a(l.add(c)),"miter"===e){var d=new S(l.add(c),new _(-c.y,c.x),!0).intersect(new S(l.add(f),new _(-f.y,f.x),!0),!0);d&&l.getDistance(d)<=i*n&&a(d)}a(l.add(f))},_addSquareCap:function(t,e,n,i,r,s,a){var o=t._point.transform(i),h=t.getLocation(),u=h.getNormal().multiply(0===h.getTime()?n:-n).transform(r);"square"===e&&(a&&(s(o.subtract(u)),s(o.add(u))),o=o.add(u.rotate(-90))),s(o.add(u)),s(o.subtract(u))},getHandleBounds:function(t,e,n,i,r){var s,a,o=n.getStyle();if(r.stroke&&o.hasStroke()){var h=n._getStrokeMatrix(i,r),u=o.getStrokeWidth()/2,l=u;"miter"===o.getStrokeJoin()&&(l=u*o.getMiterLimit()),"square"===o.getStrokeCap()&&(l=Math.max(l,u*Math.SQRT2)),s=V._getStrokePadding(u,h),a=V._getStrokePadding(l,h)}for(var c=new Array(6),f=1/0,d=-f,p=f,g=d,v=0,_=t.length;v<_;v++){t[v]._transformCoordinates(i,c);for(var m=0;m<6;m+=2){var y=m?s:a,x=y?y[0]:0,b=y?y[1]:0,C=c[m],S=c[m+1],k=C-x,T=C+x,A=S-b,E=S+b;k<f&&(f=k),T>d&&(d=T),A<p&&(p=A),E>g&&(g=E)}}return new w(f,p,d-f,g-p)}}});V.inject({statics:new function(){var t=.5522847498307936,e=[new O([-1,0],[0,t],[0,-t]),new O([0,-1],[-t,0],[t,0]),new O([1,0],[0,-t],[0,t]),new O([0,1],[t,0],[-t,0])];function n(t,e,n){var i=l.getNamed(n),r=new V(i&&0==i.insert&&T.NO_INSERT);return r._add(t),r._closed=e,r.set(i,{insert:!0})}function i(t,i,r){for(var s=new Array(4),a=0;a<4;a++){var o=e[a];s[a]=new O(o._point.multiply(i).add(t),o._handleIn.multiply(i),o._handleOut.multiply(i))}return n(s,!0,r)}return{Line:function(){return n([new O(_.readNamed(arguments,"from")),new O(_.readNamed(arguments,"to"))],!1,arguments)},Circle:function(){var t=_.readNamed(arguments,"center"),e=l.readNamed(arguments,"radius");return i(t,new y(e),arguments)},Rectangle:function(){var e,i=w.readNamed(arguments,"rectangle"),r=y.readNamed(arguments,"radius",0,{readNull:!0}),s=i.getBottomLeft(!0),a=i.getTopLeft(!0),o=i.getTopRight(!0),h=i.getBottomRight(!0);if(!r||r.isZero())e=[new O(s),new O(a),new O(o),new O(h)];else{var u=(r=y.min(r,i.getSize(!0).divide(2))).width,l=r.height,c=u*t,f=l*t;e=[new O(s.add(u,0),null,[-c,0]),new O(s.subtract(0,l),[0,f]),new O(a.add(0,l),null,[0,-f]),new O(a.add(u,0),[-c,0],null),new O(o.subtract(u,0),null,[c,0]),new O(o.add(0,l),[0,-f],null),new O(h.subtract(0,l),null,[0,f]),new O(h.subtract(u,0),[c,0])]}return n(e,!0,arguments)},RoundRectangle:"#Rectangle",Ellipse:function(){var t=P._readEllipse(arguments);return i(t.center,t.radius,arguments)},Oval:"#Ellipse",Arc:function(){var t=_.readNamed(arguments,"from"),e=_.readNamed(arguments,"through"),n=_.readNamed(arguments,"to"),i=l.getNamed(arguments),r=new V(i&&0==i.insert&&T.NO_INSERT);return r.moveTo(t),r.arcTo(e,n),r.set(i)},RegularPolygon:function(){for(var t=_.readNamed(arguments,"center"),e=l.readNamed(arguments,"sides"),i=l.readNamed(arguments,"radius"),r=360/e,s=e%3==0,a=new _(0,s?-i:i),o=s?-1:.5,h=new Array(e),u=0;u<e;u++)h[u]=new O(t.add(a.rotate((u+o)*r)));return n(h,!0,arguments)},Star:function(){for(var t=_.readNamed(arguments,"center"),e=2*l.readNamed(arguments,"points"),i=l.readNamed(arguments,"radius1"),r=l.readNamed(arguments,"radius2"),s=360/e,a=new _(0,-1),o=new Array(e),h=0;h<e;h++)o[h]=new O(t.add(a.rotate(s*h).multiply(h%2?r:i)));return n(o,!0,arguments)}}}});var B=j.extend({_class:"CompoundPath",_serializeFields:{children:[]},beans:!0,initialize:function(t){this._children=[],this._namedChildren={},this._initialize(t)||("string"==typeof t?this.setPathData(t):this.addChildren(Array.isArray(t)?t:arguments))},insertChildren:function t(e,n){var i=n,r=i[0];r&&"number"==typeof r[0]&&(i=[i]);for(var s=n.length-1;s>=0;s--){var a=i[s];i!==n||a instanceof V||(i=l.slice(i)),Array.isArray(a)?i[s]=new V({segments:a,insert:!1}):a instanceof B&&(i.splice.apply(i,[s,1].concat(a.removeChildren())),a.remove())}return t.base.call(this,e,i)},reduce:function t(e){for(var n=this._children,i=n.length-1;i>=0;i--){var r;(r=n[i].reduce(e)).isEmpty()&&r.remove()}return n.length?t.base.call(this):((r=new V(T.NO_INSERT)).copyAttributes(this),r.insertAbove(this),this.remove(),r)},isClosed:function(){for(var t=this._children,e=0,n=t.length;e<n;e++)if(!t[e]._closed)return!1;return!0},setClosed:function(t){for(var e=this._children,n=0,i=e.length;n<i;n++)e[n].setClosed(t)},getFirstSegment:function(){var t=this.getFirstChild();return t&&t.getFirstSegment()},getLastSegment:function(){var t=this.getLastChild();return t&&t.getLastSegment()},getCurves:function(){for(var t=this._children,e=[],n=0,i=t.length;n<i;n++)l.push(e,t[n].getCurves());return e},getFirstCurve:function(){var t=this.getFirstChild();return t&&t.getFirstCurve()},getLastCurve:function(){var t=this.getLastChild();return t&&t.getLastCurve()},getArea:function(){for(var t=this._children,e=0,n=0,i=t.length;n<i;n++)e+=t[n].getArea();return e},getLength:function(){for(var t=this._children,e=0,n=0,i=t.length;n<i;n++)e+=t[n].getLength();return e},getPathData:function(t,e){for(var n=this._children,i=[],r=0,s=n.length;r<s;r++){var a=n[r],o=a._matrix;i.push(a.getPathData(t&&!o.isIdentity()?t.appended(o):t,e))}return i.join("")},_hitTestChildren:function t(e,n,i){return t.base.call(this,e,n.class===V||"path"===n.type?n:l.set({},n,{fill:!1}),i)},_draw:function(t,e,n,i){var r=this._children;if(r.length){e=e.extend({dontStart:!0,dontFinish:!0}),t.beginPath();for(var s=0,a=r.length;s<a;s++)r[s].draw(t,e,i);if(!e.clip){this._setStyles(t,e,n);var o=this._style;o.hasFill()&&(t.fill(o.getFillRule()),t.shadowColor="rgba(0,0,0,0)"),o.hasStroke()&&t.stroke()}}},_drawSelected:function(t,e,n){for(var i=this._children,r=0,s=i.length;r<s;r++){var a=i[r],o=a._matrix;n[a._id]||a._drawSelected(t,o.isIdentity()?e:e.appended(o))}}},new function(){function t(t,e){var n=t._children;if(e&&!n.length)throw new Error("Use a moveTo() command first");return n[n.length-1]}return l.each(["lineTo","cubicCurveTo","quadraticCurveTo","curveTo","arcTo","lineBy","cubicCurveBy","quadraticCurveBy","curveBy","arcBy"],function(e){this[e]=function(){var n=t(this,!0);n[e].apply(n,arguments)}},{moveTo:function(){var e=t(this),n=e&&e.isEmpty()?e:new V(T.NO_INSERT);n!==e&&this.addChild(n),n.moveTo.apply(n,arguments)},moveBy:function(){var e=t(this,!0),n=e&&e.getLastSegment(),i=_.read(arguments);this.moveTo(n?i.add(n._point):i)},closePath:function(e){t(this,!0).closePath(e)}})},l.each(["reverse","flatten","simplify","smooth"],function(t){this[t]=function(e){for(var n,i=this._children,r=0,s=i.length;r<s;r++)n=i[r][t](e)||n;return n}},{}));j.inject(new function(){var t=Math.min,e=Math.max,n=Math.abs,i={unite:{1:!0,2:!0},intersect:{2:!0},subtract:{1:!0},exclude:{1:!0,"-1":!0}};function r(t,e){var n=t.clone(!1).reduce({simplify:!0}).transform(null,!0,!0);return e?n.resolveCrossings().reorient("nonzero"===n.getFillRule(),!0):n}function s(t,e,n,i,r){var s=new B(T.NO_INSERT);return s.addChildren(t,!0),s=s.reduce({simplify:e}),r&&0==r.insert||s.insertAbove(i&&n.isSibling(i)&&n.getIndex()<i.getIndex()?i:n),s.copyAttributes(n,!0),s}function a(t,e,n,a){if(a&&(0==a.trace||a.stroke)&&/^(subtract|intersect)$/.test(n))return h(t,e,n);var o=r(t,!0),u=e&&t!==e&&r(e,!0),c=i[n];c[n]=!0,u&&(c.subtract||c.exclude)^u.isClockwise()^o.isClockwise()&&u.reverse();var p,g=d(z.expand(o.getCrossings(u))),m=o._children||[o],y=u&&(u._children||[u]),x=[],w=[];function b(t){for(var e=0,n=t.length;e<n;e++){var i=t[e];l.push(x,i._segments),l.push(w,i.getCurves()),i._overlapsOnly=!0}}if(g.length){b(m),y&&b(y);for(var C=0,S=g.length;C<S;C++)v(g[C]._segment,o,u,w,c);for(C=0,S=x.length;C<S;C++){var k=x[C],T=k._intersection;k._winding||v(k,o,u,w,c),T&&T._overlap||(k._path._overlapsOnly=!1)}p=_(x,c)}else p=f(y?m.concat(y):m.slice(),function(t){return!!c[t]});return s(p,!0,t,e,a)}function h(t,e,n){var i=r(t),a=r(e),o=i.getCrossings(a),h="subtract"===n,u="divide"===n,l={},c=[];function f(t){if(!l[t._id]&&(u||a.contains(t.getPointAt(t.getLength()/2))^h))return c.unshift(t),l[t._id]=!0}for(var d=o.length-1;d>=0;d--){var p=o[d].split();p&&(f(p)&&p.getFirstSegment().setHandleIn(0,0),i.getLastSegment().setHandleOut(0,0))}return f(i),s(c,!1,t,e)}function u(t,e){for(var n=t;n;){if(n===e)return;n=n._previous}for(;t._next&&t._next!==e;)t=t._next;if(!t._next){for(;e._previous;)e=e._previous;t._next=e,e._previous=t}}function c(t){for(var e=t.length-1;e>=0;e--)t[e].clearHandles()}function f(t,e,i){var r=t&&t.length;if(r){var s=l.each(t,function(t,e){this[t._id]={container:null,winding:t.isClockwise()?1:-1,index:e}},{}),a=t.slice().sort(function(t,e){return n(e.getArea())-n(t.getArea())}),o=a[0];null==i&&(i=o.isClockwise());for(var h=0;h<r;h++){for(var u=a[h],c=s[u._id],f=u.getInteriorPoint(),d=0,p=h-1;p>=0;p--){var g=a[p];if(g.contains(f)){var v=s[g._id];d=v.winding,c.winding+=d,c.container=v.exclude?v.container:g;break}}if(e(c.winding)===e(d))c.exclude=!0,t[c.index]=null;else{var _=c.container;u.setClockwise(_?!_.isClockwise():i)}}}return t}function d(t,e,n){var i,r,s,a=e&&[],o=!1,h=n||[],l=n&&{};function f(t){return t._path._id+"."+t._segment1._index}for(var d=(n&&n.length)-1;d>=0;d--){(p=n[d])._path&&(l[f(p)]=!0)}for(d=t.length-1;d>=0;d--){var p,g,v=t[d],_=v._time,m=_,y=e&&!e(v);if((p=v._curve)&&(p!==r?(o=!p.hasHandles()||l&&l[f(p)],i=[],s=null,r=p):s>=1e-8&&(_/=s)),y)i&&i.push(v);else{if(e&&a.unshift(v),s=m,_<1e-8)g=p._segment1;else if(_>1-1e-8)g=p._segment2;else{var x=p.divideAtTime(_,!0);o&&h.push(p,x),g=x._segment1;for(var w=i.length-1;w>=0;w--){var b=i[w];b._time=(b._time-_)/(1-_)}}v._setSegment(g);var C=g._intersection,S=v._intersection;if(C){u(C,S);for(var k=C;k;)u(k._intersection,C),k=k._next}else g._intersection=S}}return n||c(h),a||t}function p(i,r,s,a,o){var h,u,l=s?1:0,c=1^l,f=[i.x,i.y],d=f[l],g=f[c],v=1e-6,_=d-1e-9,m=d+1e-9,y=0,x=0,w=0,b=0,C=!1,S=!1,k=1,T=[];function A(n){var u=n[c+0],f=n[c+6];if(!(g<t(u,f)||g>e(u,f))){var y=n[l+0],x=n[l+2],S=n[l+4],A=n[l+6];if(u!==f){var E=g===u?0:g===f?1:_>e(y,x,S,A)||m<t(y,x,S,A)?1:R.solveCubic(n,c,g,T,0,1)>0?T[0]:1,P=0===E?y:1===E?A:R.getPoint(n,E)[s?"y":"x"],I=u>f?1:-1,N=h[c]>h[c+6]?1:-1,L=h[l+6];return g!==u?(P<_?w+=I:P>m?b+=I:C=!0,P>d-v&&P<d+v&&(k/=2)):(I!==N?y<_?w+=I:y>m&&(b+=I):y!=L&&(L<m&&P>m?(b+=I,C=!0):L>_&&P<_&&(w+=I,C=!0)),k=0),h=n,!o&&P>_&&P<m&&0===R.getTangent(n,E)[s?"x":"y"]&&p(i,r,!s,a,!0)}(y<m&&A>_||A<m&&y>_)&&(C=!0)}}function E(n){var i=n[c+0],r=n[c+2],a=n[c+4],o=n[c+6];if(g<=e(i,r,a,o)&&g>=t(i,r,a,o))for(var h,u=n[l+0],f=n[l+2],d=n[l+4],p=n[l+6],v=_>e(u,f,d,p)||m<t(u,f,d,p)?[n]:R.getMonoCurves(n,s),y=0,x=v.length;y<x;y++)if(h=A(v[y]))return h}for(var P=0,I=r.length;P<I;P++){var N,L=r[P],M=L._path,O=L.getValues();if(!(P&&r[P-1]._path===M||(h=null,M._closed||(u=R.getValues(M.getLastCurve().getSegment2(),L.getSegment1(),null,!a))[c]!==u[c+6]&&(h=u),h))){h=O;for(var D=M.getLastCurve();D&&D!==L;){var z=D.getValues();if(z[c]!==z[c+6]){h=z;break}D=D.getPrevious()}}if(N=E(O))return N;if(P+1===I||r[P+1]._path!==M){if(u&&(N=E(u)))return N;!C||w||b||(w=b=M.isClockwise(a)^s?1:-1),y+=w,x+=b,w=b=0,C&&(S=!0,C=!1),u=null}}return y=n(y),x=n(x),{winding:e(y,x),windingL:y,windingR:x,quality:k,onPath:S}}function v(t,e,i,r,s){var a=[],o=t,h=0;do{var u=(y=t.getCurve()).getLength();a.push({segment:t,curve:y,length:u}),h+=u,t=t.getNext()}while(t&&!t._intersection&&t!==o);for(var l=[.5,.25,.75],c={winding:0,quality:-1},f=0;f<l.length&&c.quality<.5;f++){u=h*l[f];for(var d=0,v=a.length;d<v;d++){var _=a[d],m=_.length;if(u<=m){var y,x=(y=_.curve)._path,w=x._parent,b=w instanceof B?w:x,C=g.clamp(y.getTimeAt(u),1e-8,1-1e-8),S=y.getPointAtTime(C),k=n(y.getTangentAtTime(C).y)<Math.SQRT1_2,T=null;if(s.subtract&&i){var A=b===e?i._getWinding(S,k,!0):e._getWinding(S,k,!0);if(b===e&&A.winding||b===i&&!A.winding){if(A.quality<1)continue;T={winding:0,quality:1}}}(T=T||p(S,r,k,!0)).quality>c.quality&&(c=T);break}u-=m}}for(d=a.length-1;d>=0;d--)a[d].segment._winding=c}function _(t,e){var n,i=[];function r(t){var n;return!(!t||t._visited||e&&(!e[(n=t._winding||{}).winding]||e.unite&&2===n.winding&&n.windingL&&n.windingR))}function s(t){if(t)for(var e=0,i=n.length;e<i;e++)if(t===n[e])return!0;return!1}function a(t){for(var e=t._segments,n=0,i=e.length;n<i;n++)e[n]._visited=!0}function o(t,e){var i=t._intersection,a=i,o=[];function h(i,a){for(;i&&i!==a;){var h=i._segment,u=h&&h._path;if(u){var l=h.getNext()||u.getFirstSegment(),c=l._intersection;h!==t&&(s(h)||s(l)||l&&r(h)&&(r(l)||c&&r(c._segment)))&&o.push(h),e&&n.push(h)}i=i._next}}if(e&&(n=[t]),i){for(h(i);i&&i._prev;)i=i._prev;h(i,a)}return o}t.sort(function(t,e){var n=t._intersection,i=e._intersection,r=!(!n||!n._overlap),s=!(!i||!i._overlap),a=t._path,o=e._path;return r^s?r?1:-1:!n^!i?n?1:-1:a!==o?a._id-o._id:t._index-e._index});for(var h=0,u=t.length;h<u;h++){var l,c,f,d=t[h],p=r(d),g=null,v=!1,_=!0,m=[];if(p&&d._path._overlapsOnly){var y=d._path,x=d._intersection._segment._path;y.compare(x)&&(y.getArea()&&i.push(y.clone(!1)),a(y),a(x),p=!1)}for(;p;){var w=!g,b=o(d,w),C=b.shift(),S=!(v=!w&&(s(d)||s(C)))&&C;if(w&&(g=new V(T.NO_INSERT),l=null),v){(d.isFirst()||d.isLast())&&(_=d._path._closed),d._visited=!0;break}if(S&&l&&(m.push(l),l=null),l||(S&&b.push(d),l={start:g._segments.length,crossings:b,visited:c=[],handleIn:f}),S&&(d=C),!r(d)){g.removeSegments(l.start);for(var k=0,A=c.length;k<A;k++)c[k]._visited=!1;c.length=0;do{(d=l&&l.crossings.shift())&&d._path||(d=null,(l=m.pop())&&(c=l.visited,f=l.handleIn))}while(l&&!r(d));if(!d)break}var E=d.getNext();g.add(new O(d._point,f,E&&d._handleOut)),d._visited=!0,c.push(d),d=E||d._path.getFirstSegment(),f=E&&E._handleIn}v&&(_&&(g.getFirstSegment().setHandleIn(f),g.setClosed(_)),0!==g.getArea()&&i.push(g))}return i}return{_getWinding:function(t,e,n){return p(t,this.getCurves(),e,n)},unite:function(t,e){return a(this,t,"unite",e)},intersect:function(t,e){return a(this,t,"intersect",e)},subtract:function(t,e){return a(this,t,"subtract",e)},exclude:function(t,e){return a(this,t,"exclude",e)},divide:function(t,e){return e&&(0==e.trace||e.stroke)?h(this,t,"divide"):s([this.subtract(t,e),this.intersect(t,e)],!0,this,t,e)},resolveCrossings:function(){var t=this._children,e=t||[this];function n(t,e){var n=t&&t._intersection;return n&&n._overlap&&n._path===e}var i=!1,r=!1,s=this.getIntersections(null,function(t){return t.hasOverlap()&&(i=!0)||t.isCrossing()&&(r=!0)}),a=i&&r&&[];if(s=z.expand(s),i)for(var o=d(s,function(t){return t.hasOverlap()},a),h=o.length-1;h>=0;h--){var u=o[h],f=u._path,p=u._segment,g=p.getPrevious(),v=p.getNext();n(g,f)&&n(v,f)&&(p.remove(),g._handleOut._set(0,0),v._handleIn._set(0,0),g===p||g.getCurve().hasLength()||(v._handleIn.set(g._handleIn),g.remove()))}r&&(d(s,i&&function(t){var e=t.getCurve(),n=t.getSegment(),i=t._intersection,r=i._curve,s=i._segment;if(e&&r&&e._path&&r._path)return!0;n&&(n._intersection=null),s&&(s._intersection=null)},a),a&&c(a),e=_(l.each(e,function(t){l.push(this,t._segments)},[])));var m,y=e.length;return y>1&&t?(e!==t&&this.setChildren(e),m=this):1!==y||t||(e[0]!==this&&this.setSegments(e[0].removeSegments()),m=this),m||((m=new B(T.NO_INSERT)).addChildren(e),(m=m.reduce()).copyAttributes(this),this.replaceWith(m)),m},reorient:function(t,e){var n=this._children;return n&&n.length?this.setChildren(f(this.removeChildren(),function(e){return!!(t?e:1&e)},e)):e!==o&&this.setClockwise(e),this},getInteriorPoint:function(){var n=this.getBounds().getCenter(!0);if(!this.contains(n)){for(var i=this.getCurves(),r=n.y,s=[],a=[],o=0,h=i.length;o<h;o++){var u=i[o].getValues(),l=u[1],c=u[3],f=u[5],d=u[7];if(r>=t(l,c,f,d)&&r<=e(l,c,f,d))for(var p=R.getMonoCurves(u),g=0,v=p.length;g<v;g++){var _=p[g],m=_[1],y=_[7];if(m!==y&&(r>=m&&r<=y||r>=y&&r<=m)){var x=r===m?_[0]:r===y?_[6]:1===R.solveCubic(_,1,r,a,0,1)?R.getPoint(_,a[0]).x:(_[0]+_[6])/2;s.push(x)}}}s.length>1&&(s.sort(function(t,e){return t-e}),n.x=(s[0]+s[1])/2)}return n}}});var F=l.extend({_class:"PathFlattener",initialize:function(t,e,n,i,r){var s,a=[],o=[],h=0,u=1/(n||32),l=t._segments,c=l[0];function f(t,n){var s=R.getValues(t,n,r);a.push(s),function t(n,r,s,a){if(!(a-s>u)||i&&R.isStraight(n)||R.isFlatEnough(n,e||.25)){var l=n[6]-n[0],c=n[7]-n[1],f=Math.sqrt(l*l+c*c);f>0&&(h+=f,o.push({offset:h,curve:n,index:r,time:a}))}else{var d=R.subdivide(n,.5),p=(s+a)/2;t(d[0],r,s,p),t(d[1],r,p,a)}}(s,t._index,0,1)}for(var d=1,p=l.length;d<p;d++)f(c,s=l[d]),c=s;t._closed&&f(s||c,l[0]),this.curves=a,this.parts=o,this.length=h,this.index=0},_get:function(t){for(var e,n=this.parts,i=n.length,r=this.index;e=r,r&&!(n[--r].offset<t););for(;e<i;e++){var s=n[e];if(s.offset>=t){this.index=e;var a=n[e-1],o=a&&a.index===s.index?a.time:0,h=a?a.offset:0;return{index:s.index,time:o+(s.time-o)*(t-h)/(s.offset-h)}}}return{index:n[i-1].index,time:1}},drawPart:function(t,e,n){for(var i=this._get(e),r=this._get(n),s=i.index,a=r.index;s<=a;s++){var o=R.getPart(this.curves[s],s===i.index?i.time:0,s===r.index?r.time:1);s===i.index&&t.moveTo(o[0],o[1]),t.bezierCurveTo.apply(t,o.slice(2))}}},l.each(R._evaluateMethods,function(t){this[t+"At"]=function(e){var n=this._get(e);return R[t](this.curves[n.index],n.time)}},{})),q=l.extend({initialize:function(t){for(var e,n=this.points=[],i=t._segments,r=t._closed,s=0,a=i.length;s<a;s++){var o=i[s].point;e&&e.equals(o)||n.push(e=o.clone())}r&&(n.unshift(n[n.length-1]),n.push(n[1])),this.closed=r},fit:function(t){var e=this.points,n=e.length,i=null;return n>0&&(i=[new O(e[0])],n>1&&(this.fitCubic(i,t,0,n-1,e[1].subtract(e[0]),e[n-2].subtract(e[n-1])),this.closed&&(i.shift(),i.pop()))),i},fitCubic:function(t,e,n,i,r,s){var a=this.points;if(i-n!=1){for(var o,h=this.chordLengthParameterize(n,i),u=Math.max(e,e*e),l=!0,c=0;c<=4;c++){var f=this.generateBezier(n,i,h,r,s),d=this.findMaxError(n,i,f,h);if(d.error<e&&l)return void this.addCurve(t,f);if(o=d.index,d.error>=u)break;l=this.reparameterize(n,i,h,f),u=d.error}var p=a[o-1].subtract(a[o+1]);this.fitCubic(t,e,n,o,r,p),this.fitCubic(t,e,o,i,p.negate(),s)}else{var g=a[n],v=a[i],_=g.getDistance(v)/3;this.addCurve(t,[g,g.add(r.normalize(_)),v.add(s.normalize(_)),v])}},addCurve:function(t,e){t[t.length-1].setHandleOut(e[1].subtract(e[0])),t.push(new O(e[3],e[2].subtract(e[3])))},generateBezier:function(t,e,n,i,r){for(var s=Math.abs,a=this.points,o=a[t],h=a[e],u=[[0,0],[0,0]],l=[0,0],c=0,f=e-t+1;c<f;c++){var d=n[c],p=1-d,g=3*d*p,v=p*p*p,_=g*p,m=g*d,y=d*d*d,x=i.normalize(_),w=r.normalize(m),b=a[t+c].subtract(o.multiply(v+_)).subtract(h.multiply(m+y));u[0][0]+=x.dot(x),u[0][1]+=x.dot(w),u[1][0]=u[0][1],u[1][1]+=w.dot(w),l[0]+=x.dot(b),l[1]+=w.dot(b)}var C,S,k=u[0][0]*u[1][1]-u[1][0]*u[0][1];if(s(k)>1e-12){var T=u[0][0]*l[1]-u[1][0]*l[0];C=(l[0]*u[1][1]-l[1]*u[0][1])/k,S=T/k}else{var A=u[0][0]+u[0][1],E=u[1][0]+u[1][1];C=S=s(A)>1e-12?l[0]/A:s(E)>1e-12?l[1]/E:0}var P,I,N=h.getDistance(o),L=1e-12*N;if(C<L||S<L)C=S=N/3;else{var M=h.subtract(o);P=i.normalize(C),I=r.normalize(S),P.dot(M)-I.dot(M)>N*N&&(C=S=N/3,P=I=null)}return[o,o.add(P||i.normalize(C)),h.add(I||r.normalize(S)),h]},reparameterize:function(t,e,n,i){for(var r=t;r<=e;r++)n[r-t]=this.findRoot(i,this.points[r],n[r-t]);r=1;for(var s=n.length;r<s;r++)if(n[r]<=n[r-1])return!1;return!0},findRoot:function(t,e,n){for(var i=[],r=[],s=0;s<=2;s++)i[s]=t[s+1].subtract(t[s]).multiply(3);for(s=0;s<=1;s++)r[s]=i[s+1].subtract(i[s]).multiply(2);var a=this.evaluate(3,t,n),o=this.evaluate(2,i,n),h=this.evaluate(1,r,n),u=a.subtract(e),l=o.dot(o)+u.dot(h);return g.isZero(l)?n:n-u.dot(o)/l},evaluate:function(t,e,n){for(var i=e.slice(),r=1;r<=t;r++)for(var s=0;s<=t-r;s++)i[s]=i[s].multiply(1-n).add(i[s+1].multiply(n));return i[0]},chordLengthParameterize:function(t,e){for(var n=[0],i=t+1;i<=e;i++)n[i-t]=n[i-t-1]+this.points[i].getDistance(this.points[i-1]);i=1;for(var r=e-t;i<=r;i++)n[i]/=n[r];return n},findMaxError:function(t,e,n,i){for(var r=Math.floor((e-t+1)/2),s=0,a=t+1;a<e;a++){var o=this.evaluate(3,n,i[a-t]).subtract(this.points[a]),h=o.x*o.x+o.y*o.y;h>=s&&(s=h,r=a)}return{error:s,index:r}}}),H=T.extend({_class:"TextItem",_applyMatrix:!1,_canApplyMatrix:!1,_serializeFields:{content:null},_boundsOptions:{stroke:!1,handle:!1},initialize:function(t){this._content="",this._lines=[];var e=t&&l.isPlainObject(t)&&t.x===o&&t.y===o;this._initialize(e&&t,!e&&_.read(arguments))},_equals:function(t){return this._content===t._content},copyContent:function(t){this.setContent(t._content)},getContent:function(){return this._content},setContent:function(t){this._content=""+t,this._lines=this._content.split(/\r\n|\n|\r/gm),this._changed(521)},isEmpty:function(){return!this._content},getCharacterStyle:"#getStyle",setCharacterStyle:"#setStyle",getParagraphStyle:"#getStyle",setParagraphStyle:"#setStyle"}),U=H.extend({_class:"PointText",initialize:function(){H.apply(this,arguments)},getPoint:function(){var t=this._matrix.getTranslation();return new m(t.x,t.y,this,"setPoint")},setPoint:function(){var t=_.read(arguments);this.translate(t.subtract(this._matrix.getTranslation()))},_draw:function(t,e,n){if(this._content){this._setStyles(t,e,n);var i=this._lines,r=this._style,s=r.hasFill(),a=r.hasStroke(),o=r.getLeading(),h=t.shadowColor;t.font=r.getFontStyle(),t.textAlign=r.getJustification();for(var u=0,l=i.length;u<l;u++){t.shadowColor=h;var c=i[u];s&&(t.fillText(c,0,0),t.shadowColor="rgba(0,0,0,0)"),a&&t.strokeText(c,0,0),t.translate(0,o)}}},_getBounds:function(t,e){var n=this._style,i=this._lines,r=i.length,s=n.getJustification(),a=n.getLeading(),o=this.getView().getTextWidth(n.getFontStyle(),i),h=0;"left"!==s&&(h-=o/("center"===s?2:1));var u=new w(h,r?-.75*a:0,o,r*a);return t?t._transformBounds(u,u):u}}),W=l.extend(new function(){var t,e={gray:["gray"],rgb:["red","green","blue"],hsb:["hue","saturation","brightness"],hsl:["hue","saturation","lightness"],gradient:["gradient","origin","destination","highlight"]},n={},i={transparent:[0,0,0,0]};var r=[[0,3,1],[2,0,1],[1,0,3],[1,2,0],[3,1,0],[0,1,2]],s={"rgb-hsb":function(t,e,n){var i=Math.max(t,e,n),r=i-Math.min(t,e,n);return[0===r?0:60*(i==t?(e-n)/r+(e<n?6:0):i==e?(n-t)/r+2:(t-e)/r+4),0===i?0:r/i,i]},"hsb-rgb":function(t,e,n){var i,s=(t=(t/60%6+6)%6)-(i=Math.floor(t)),a=[n,n*(1-e),n*(1-e*s),n*(1-e*(1-s))];return[a[(i=r[i])[0]],a[i[1]],a[i[2]]]},"rgb-hsl":function(t,e,n){var i=Math.max(t,e,n),r=Math.min(t,e,n),s=i-r,a=0===s,o=(i+r)/2;return[a?0:60*(i==t?(e-n)/s+(e<n?6:0):i==e?(n-t)/s+2:(t-e)/s+4),a?0:o<.5?s/(i+r):s/(2-i-r),o]},"hsl-rgb":function(t,e,n){if(0===e)return[n,n,n];for(var i=[(t=(t/360%1+1)%1)+1/3,t,t-1/3],r=n<.5?n*(1+e):n+e-n*e,s=2*n-r,a=[],o=0;o<3;o++){var h=i[o];h<0&&(h+=1),h>1&&(h-=1),a[o]=6*h<1?s+6*(r-s)*h:2*h<1?r:3*h<2?s+(r-s)*(2/3-h)*6:s}return a},"rgb-gray":function(t,e,n){return[.2989*t+.587*e+.114*n]},"gray-rgb":function(t){return[t,t,t]},"gray-hsb":function(t){return[0,0,t]},"gray-hsl":function(t){return[0,0,t]},"gradient-rgb":function(){return[]},"rgb-gradient":function(){return[]}};return l.each(e,function(t,i){n[i]=[],l.each(t,function(t,r){var s=l.capitalize(t),a=/^(hue|saturation)$/.test(t),o=n[i][r]="gradient"===i?"gradient"===t?function(t){var e=this._components[0];return e!==(t=$.read(Array.isArray(t)?t:arguments,0,{readNull:!0}))&&(e&&e._removeOwner(this),t&&t._addOwner(this)),t}:function(){return _.read(arguments,0,{readNull:"highlight"===t,clone:!0})}:function(t){return null==t||isNaN(t)?0:+t};this["get"+s]=function(){return this._type===i||a&&/^hs[bl]$/.test(this._type)?this._components[r]:this._convert(i)[r]},this["set"+s]=function(t){this._type===i||a&&/^hs[bl]$/.test(this._type)||(this._components=this._convert(i),this._properties=e[i],this._type=i),this._components[r]=o.call(this,t),this._changed()}},this)},{_class:"Color",_readIndex:!0,initialize:function r(s){var a,o,u,c,f=arguments,d=this.__read,p=0;Array.isArray(s)&&(s=(f=s)[0]);var g=null!=s&&typeof s;if("string"===g&&s in e&&(a=s,s=f[1],Array.isArray(s)?(o=s,u=f[2]):(d&&(p=1),f=l.slice(f,1),g=typeof s)),!o){if(c="number"===g?f:"object"===g&&null!=s.length?s:null){a||(a=c.length>=3?"rgb":"gray");var v=e[a].length;u=c[v],d&&(p+=c===arguments?v+(null!=u?1:0):1),c.length>v&&(c=l.slice(c,0,v))}else if("string"===g){var _=function(e){var n,r=e.match(/^#([\da-f]{2})([\da-f]{2})([\da-f]{2})([\da-f]{2})?$/i)||e.match(/^#([\da-f])([\da-f])([\da-f])([\da-f])?$/i),s="rgb";if(r){var a=r[4]?4:3;n=new Array(a);for(var o=0;o<a;o++){var u=r[o+1];n[o]=parseInt(1==u.length?u+u:u,16)/255}}else if(r=e.match(/^(rgb|hsl)a?\((.*)\)$/)){s=r[1],n=r[2].split(/[,\s]+/g);for(var l="hsl"===s,c=(o=0,Math.min(n.length,4));o<c;o++){var f=n[o];if(u=parseFloat(f),l)if(0===o){var d=f.match(/([a-z]*)$/)[1];u*={turn:360,rad:180/Math.PI,grad:.9}[d]||1}else o<3&&(u/=100);else o<3&&(u/=255);n[o]=u}}else{var p=i[e];if(!p)if(h){t||((t=ot.getContext(1,1)).globalCompositeOperation="copy"),t.fillStyle="rgba(0,0,0,0)",t.fillStyle=e,t.fillRect(0,0,1,1);var g=t.getImageData(0,0,1,1).data;p=i[e]=[g[0]/255,g[1]/255,g[2]/255]}else p=[0,0,0];n=p.slice()}return[s,n]}(s);a=_[0],4===(o=_[1]).length&&(u=o[3],o.length--)}else if("object"===g)if(s.constructor===r){if(a=s._type,o=s._components.slice(),u=s._alpha,"gradient"===a)for(var m=1,y=o.length;m<y;m++){var x=o[m];x&&(o[m]=x.clone())}}else if(s.constructor===$)a="gradient",c=f;else{var w=e[a="hue"in s?"lightness"in s?"hsl":"hsb":"gradient"in s||"stops"in s||"radial"in s?"gradient":"gray"in s?"gray":"rgb"],b=n[a];this._components=o=[];for(m=0,y=w.length;m<y;m++){null==(C=s[w[m]])&&!m&&"gradient"===a&&"stops"in s&&(C={stops:s.stops,radial:s.radial}),null!=(C=b[m].call(this,C))&&(o[m]=C)}u=s.alpha}d&&a&&(p=1)}if(this._type=a||"rgb",!o){this._components=o=[];for(m=0,y=(b=n[this._type]).length;m<y;m++){var C;null!=(C=b[m].call(this,c&&c[m]))&&(o[m]=C)}}return this._components=o,this._properties=e[this._type],this._alpha=u,d&&(this.__read=p),this},set:"#initialize",_serialize:function(t,e){var n=this.getComponents();return l.serialize(/^(gray|rgb)$/.test(this._type)?n:[this._type].concat(n),t,!0,e)},_changed:function(){this._canvasStyle=null,this._owner&&this._owner._changed(129)},_convert:function(t){var e;return this._type===t?this._components.slice():(e=s[this._type+"-"+t])?e.apply(this,this._components):s["rgb-"+t].apply(this,s[this._type+"-rgb"].apply(this,this._components))},convert:function(t){return new W(t,this._convert(t),this._alpha)},getType:function(){return this._type},setType:function(t){this._components=this._convert(t),this._properties=e[t],this._type=t},getComponents:function(){var t=this._components.slice();return null!=this._alpha&&t.push(this._alpha),t},getAlpha:function(){return null!=this._alpha?this._alpha:1},setAlpha:function(t){this._alpha=null==t?null:Math.min(Math.max(t,0),1),this._changed()},hasAlpha:function(){return null!=this._alpha},equals:function(t){var e=l.isPlainValue(t,!0)?W.read(arguments):t;return e===this||e&&this._class===e._class&&this._type===e._type&&this.getAlpha()===e.getAlpha()&&l.equals(this._components,e._components)||!1},toString:function(){for(var t=this._properties,e=[],n="gradient"===this._type,i=p.instance,r=0,s=t.length;r<s;r++){var a=this._components[r];null!=a&&e.push(t[r]+": "+(n?a:i.number(a)))}return null!=this._alpha&&e.push("alpha: "+i.number(this._alpha)),"{ "+e.join(", ")+" }"},toCSS:function(t){var e=this._convert("rgb"),n=t||null==this._alpha?1:this._alpha;function i(t){return Math.round(255*(t<0?0:t>1?1:t))}return e=[i(e[0]),i(e[1]),i(e[2])],n<1&&e.push(n<0?0:n),t?"#"+((1<<24)+(e[0]<<16)+(e[1]<<8)+e[2]).toString(16).slice(1):(4==e.length?"rgba(":"rgb(")+e.join(",")+")"},toCanvasStyle:function(t,e){if(this._canvasStyle)return this._canvasStyle;if("gradient"!==this._type)return this._canvasStyle=this.toCSS();var n,i=this._components,r=i[0],s=r._stops,a=i[1],o=i[2],h=i[3],u=e&&e.inverted();if(u&&(a=u._transformPoint(a),o=u._transformPoint(o),h&&(h=u._transformPoint(h))),r._radial){var l=o.getDistance(a);if(h){var c=h.subtract(a);c.getLength()>l&&(h=a.add(c.normalize(l-.1)))}var f=h||a;n=t.createRadialGradient(f.x,f.y,0,a.x,a.y,l)}else n=t.createLinearGradient(a.x,a.y,o.x,o.y);for(var d=0,p=s.length;d<p;d++){var g=s[d],v=g._offset;n.addColorStop(null==v?d/(p-1):v,g._color.toCanvasStyle())}return this._canvasStyle=n},transform:function(t){if("gradient"===this._type){for(var e=this._components,n=1,i=e.length;n<i;n++){var r=e[n];t._transformPoint(r,r,!0)}this._changed()}},statics:{_types:e,random:function(){var t=Math.random;return new W(t(),t(),t())}}})},new function(){return l.each({add:function(t,e){return t+e},subtract:function(t,e){return t-e},multiply:function(t,e){return t*e},divide:function(t,e){return t/e}},function(t,e){this[e]=function(e){e=W.read(arguments);for(var n=this._type,i=this._components,r=e._convert(n),s=0,a=i.length;s<a;s++)r[s]=t(i[s],r[s]);return new W(n,r,null!=this._alpha?t(this._alpha,e.getAlpha()):null)}},{})}),$=l.extend({_class:"Gradient",initialize:function(t,e){this._id=v.get(),t&&l.isPlainObject(t)&&(this.set(t),t=e=null),null==this._stops&&this.setStops(t||["white","black"]),null==this._radial&&this.setRadial("string"==typeof e&&"radial"===e||e||!1)},_serialize:function(t,e){return e.add(this,function(){return l.serialize([this._stops,this._radial],t,!0,e)})},_changed:function(){for(var t=0,e=this._owners&&this._owners.length;t<e;t++)this._owners[t]._changed()},_addOwner:function(t){this._owners||(this._owners=[]),this._owners.push(t)},_removeOwner:function(t){var e=this._owners?this._owners.indexOf(t):-1;-1!=e&&(this._owners.splice(e,1),this._owners.length||(this._owners=o))},clone:function(){for(var t=[],e=0,n=this._stops.length;e<n;e++)t[e]=this._stops[e].clone();return new $(t,this._radial)},getStops:function(){return this._stops},setStops:function(t){if(t.length<2)throw new Error("Gradient stop list needs to contain at least two stops.");var e=this._stops;if(e)for(var n=0,i=e.length;n<i;n++)e[n]._owner=o;for(n=0,i=(e=this._stops=G.readList(t,0,{clone:!0})).length;n<i;n++)e[n]._owner=this;this._changed()},getRadial:function(){return this._radial},setRadial:function(t){this._radial=t,this._changed()},equals:function(t){if(t===this)return!0;if(t&&this._class===t._class){var e=this._stops,n=t._stops,i=e.length;if(i===n.length){for(var r=0;r<i;r++)if(!e[r].equals(n[r]))return!1;return!0}}return!1}}),G=l.extend({_class:"GradientStop",initialize:function(t,e){var n=t,i=e;"object"==typeof t&&e===o&&(Array.isArray(t)&&"number"!=typeof t[0]?(n=t[0],i=t[1]):("color"in t||"offset"in t||"rampPoint"in t)&&(n=t.color,i=t.offset||t.rampPoint||0)),this.setColor(n),this.setOffset(i)},clone:function(){return new G(this._color.clone(),this._offset)},_serialize:function(t,e){var n=this._color,i=this._offset;return l.serialize(null==i?[n]:[n,i],t,!0,e)},_changed:function(){this._owner&&this._owner._changed(129)},getOffset:function(){return this._offset},setOffset:function(t){this._offset=t,this._changed()},getRampPoint:"#getOffset",setRampPoint:"#setOffset",getColor:function(){return this._color},setColor:function(){var t=W.read(arguments,0,{clone:!0});t&&(t._owner=this),this._color=t,this._changed()},equals:function(t){return t===this||t&&this._class===t._class&&this._color.equals(t._color)&&this._offset==t._offset||!1}}),Z=l.extend(new function(){var t={fillColor:null,fillRule:"nonzero",strokeColor:null,strokeWidth:1,strokeCap:"butt",strokeJoin:"miter",strokeScaling:!0,miterLimit:10,dashOffset:0,dashArray:[],shadowColor:null,shadowBlur:0,shadowOffset:new _,selectedColor:null},e=l.set({},t,{fontFamily:"sans-serif",fontWeight:"normal",fontSize:12,leading:null,justification:"left"}),n=l.set({},e,{fillColor:new W}),i={strokeWidth:193,strokeCap:193,strokeJoin:193,strokeScaling:201,miterLimit:193,fontFamily:9,fontWeight:9,fontSize:9,font:9,leading:9,justification:9},r={beans:!0},s={_class:"Style",beans:!0,initialize:function(i,r,s){this._values={},this._owner=r,this._project=r&&r._project||s||ct.project,this._defaults=!r||r instanceof A?e:r instanceof H?n:t,i&&this.set(i)}};return l.each(e,function(t,e){var n=/Color$/.test(e),a="shadowOffset"===e,h=l.capitalize(e),u=i[e],c="set"+h,f="get"+h;s[c]=function(t){var i=this._owner,r=i&&i._children,s=r&&r.length>0&&!(i instanceof B);if(s)for(var a=0,h=r.length;a<h;a++)r[a]._style[c](t);if(("selectedColor"===e||!s)&&e in this._defaults){var l=this._values[e];l!==t&&(n&&(l&&l._owner!==o&&(l._owner=o,l._canvasStyle=null),t&&t.constructor===W&&(t._owner&&(t=t.clone()),t._owner=i)),this._values[e]=t,i&&i._changed(u||129))}},s[f]=function(t){var i,r=this._owner,s=r&&r._children;if(e in this._defaults&&(!s||!s.length||t||r instanceof B))if((i=this._values[e])===o)(i=this._defaults[e])&&i.clone&&(i=i.clone());else{var h=n?W:a?_:null;!h||i&&i.constructor===h||(this._values[e]=i=h.read([i],0,{readNull:!0,clone:!0}),i&&n&&(i._owner=r))}else if(s)for(var u=0,c=s.length;u<c;u++){var d=s[u]._style[f]();if(u){if(!l.equals(i,d))return o}else i=d}return i},r[f]=function(t){return this._style[f](t)},r[c]=function(t){this._style[c](t)}}),l.each({Font:"FontFamily",WindingRule:"FillRule"},function(t,e){var n="get"+e,i="set"+e;s[n]=r[n]="#get"+t,s[i]=r[i]="#set"+t}),T.inject(r),s},{set:function(t){var e=t instanceof Z,n=e?t._values:t;if(n)for(var i in n)if(i in this._defaults){var r=n[i];this[i]=r&&e&&r.clone?r.clone():r}},equals:function(t){function e(t,e,n){var i=t._values,r=e._values,s=e._defaults;for(var a in i){var h=i[a],u=r[a];if(!(n&&a in r||l.equals(h,u===o?s[a]:u)))return!1}return!0}return t===this||t&&this._class===t._class&&e(this,t)&&e(t,this,!0)||!1},_dispose:function(){var t;(t=this.getFillColor())&&(t._canvasStyle=null),(t=this.getStrokeColor())&&(t._canvasStyle=null),(t=this.getShadowColor())&&(t._canvasStyle=null)},hasFill:function(){var t=this.getFillColor();return!!t&&t.alpha>0},hasStroke:function(){var t=this.getStrokeColor();return!!t&&t.alpha>0&&this.getStrokeWidth()>0},hasShadow:function(){var t=this.getShadowColor();return!!t&&t.alpha>0&&(this.getShadowBlur()>0||!this.getShadowOffset().isZero())},getView:function(){return this._project._view},getFontStyle:function(){var t=this.getFontSize();return this.getFontWeight()+" "+t+(/[a-z]/i.test(t+"")?" ":"px ")+this.getFontFamily()},getFont:"#getFontFamily",setFont:"#setFontFamily",getLeading:function t(){var e=t.base.call(this),n=this.getFontSize();return/pt|em|%|px/.test(n)&&(n=this.getView().getPixelSize(n)),null!=e?e:1.2*n}}),X=new function(){function t(t,e,n,i){for(var r=["","webkit","moz","Moz","ms","o"],s=e[0].toUpperCase()+e.substring(1),a=0;a<6;a++){var o=r[a],h=o?o+s:e;if(h in t){if(!n)return t[h];t[h]=i;break}}}return{getStyles:function(t){var e=t&&9!==t.nodeType?t.ownerDocument:t,n=e&&e.defaultView;return n&&n.getComputedStyle(t,"")},getBounds:function(t,e){var n,i=t.ownerDocument,r=i.body,s=i.documentElement;try{n=t.getBoundingClientRect()}catch(t){n={left:0,top:0,width:0,height:0}}var a=n.left-(s.clientLeft||r.clientLeft||0),o=n.top-(s.clientTop||r.clientTop||0);if(!e){var h=i.defaultView;a+=h.pageXOffset||s.scrollLeft||r.scrollLeft,o+=h.pageYOffset||s.scrollTop||r.scrollTop}return new w(a,o,n.width,n.height)},getViewportBounds:function(t){var e=t.ownerDocument,n=e.defaultView,i=e.documentElement;return new w(0,0,n.innerWidth||i.clientWidth,n.innerHeight||i.clientHeight)},getOffset:function(t,e){return X.getBounds(t,e).getPoint()},getSize:function(t){return X.getBounds(t,!0).getSize()},isInvisible:function(t){return X.getSize(t).equals(new y(0,0))},isInView:function(t){return!X.isInvisible(t)&&X.getViewportBounds(t).intersects(X.getBounds(t,!0))},isInserted:function(t){return u.body.contains(t)},getPrefixed:function(e,n){return e&&t(e,n)},setPrefixed:function(e,n,i){if("object"==typeof n)for(var r in n)t(e,r,!0,n[r]);else t(e,n,!0,i)}}},Q={add:function(t,e){if(t)for(var n in e)for(var i=e[n],r=n.split(/[\s,]+/g),s=0,a=r.length;s<a;s++){var o=r[s],h=t===u&&("touchstart"===o||"touchmove"===o)&&{passive:!1};t.addEventListener(o,i,h)}},remove:function(t,e){if(t)for(var n in e)for(var i=e[n],r=n.split(/[\s,]+/g),s=0,a=r.length;s<a;s++)t.removeEventListener(r[s],i,!1)},getPoint:function(t){var e=t.targetTouches?t.targetTouches.length?t.targetTouches[0]:t.changedTouches[0]:t;return new _(e.pageX||e.clientX+u.documentElement.scrollLeft,e.pageY||e.clientY+u.documentElement.scrollTop)},getTarget:function(t){return t.target||t.srcElement},getRelatedTarget:function(t){return t.relatedTarget||t.toElement},getOffset:function(t,e){return Q.getPoint(t).subtract(X.getOffset(e||Q.getTarget(t)))}};Q.requestAnimationFrame=new function(){var t,e=X.getPrefixed(h,"requestAnimationFrame"),n=!1,i=[];function r(){var t=i;i=[];for(var s=0,a=t.length;s<a;s++)t[s]();(n=e&&i.length)&&e(r)}return function(s){i.push(s),e?n||(e(r),n=!0):t||(t=setInterval(r,1e3/60))}};var K=l.extend(c,{_class:"View",initialize:function t(e,n){function i(t){return n[t]||parseInt(n.getAttribute(t),10)}function r(){var t=X.getSize(n);return t.isNaN()||t.isZero()?new y(i("width"),i("height")):t}var s;if(h&&n){this._id=n.getAttribute("id"),null==this._id&&n.setAttribute("id",this._id="view-"+t._id++),Q.add(n,this._viewEvents);if(X.setPrefixed(n.style,{userDrag:"none",userSelect:"none",touchCallout:"none",contentZooming:"none",tapHighlightColor:"rgba(0,0,0,0)"}),f.hasAttribute(n,"resize")){var a=this;Q.add(h,this._windowEvents={resize:function(){a.setViewSize(r())}})}if(s=r(),f.hasAttribute(n,"stats")&&"undefined"!=typeof Stats){this._stats=new Stats;var o=this._stats.domElement,l=o.style,c=X.getOffset(n);l.position="absolute",l.left=c.x+"px",l.top=c.y+"px",u.body.appendChild(o)}}else s=new y(n),n=null;this._project=e,this._scope=e._scope,this._element=n,this._pixelRatio||(this._pixelRatio=h&&h.devicePixelRatio||1),this._setElementSize(s.width,s.height),this._viewSize=s,t._views.push(this),t._viewsById[this._id]=this,(this._matrix=new C)._owner=this,t._focused||(t._focused=this),this._frameItems={},this._frameItemCount=0,this._itemEvents={native:{},virtual:{}},this._autoUpdate=!ct.agent.node,this._needsUpdate=!1},remove:function(){if(!this._project)return!1;K._focused===this&&(K._focused=null),K._views.splice(K._views.indexOf(this),1),delete K._viewsById[this._id];var t=this._project;return t._view===this&&(t._view=null),Q.remove(this._element,this._viewEvents),Q.remove(h,this._windowEvents),this._element=this._project=null,this.off("frame"),this._animate=!1,this._frameItems={},!0},_events:l.each(T._itemHandlers.concat(["onResize","onKeyDown","onKeyUp"]),function(t){this[t]={}},{onFrame:{install:function(){this.play()},uninstall:function(){this.pause()}}}),_animate:!1,_time:0,_count:0,getAutoUpdate:function(){return this._autoUpdate},setAutoUpdate:function(t){this._autoUpdate=t,t&&this.requestUpdate()},update:function(){},draw:function(){this.update()},requestUpdate:function(){if(!this._requested){var t=this;Q.requestAnimationFrame(function(){if(t._requested=!1,t._animate){t.requestUpdate();var e=t._element;X.getPrefixed(u,"hidden")&&"true"!==f.getAttribute(e,"keepalive")||!X.isInView(e)||t._handleFrame()}t._autoUpdate&&t.update()}),this._requested=!0}},play:function(){this._animate=!0,this.requestUpdate()},pause:function(){this._animate=!1},_handleFrame:function(){ct=this._scope;var t=Date.now()/1e3,e=this._last?t-this._last:0;this._last=t,this.emit("frame",new l({delta:e,time:this._time+=e,count:this._count++})),this._stats&&this._stats.update()},_animateItem:function(t,e){var n=this._frameItems;e?(n[t._id]={item:t,time:0,count:0},1==++this._frameItemCount&&this.on("frame",this._handleFrameItems)):(delete n[t._id],0==--this._frameItemCount&&this.off("frame",this._handleFrameItems))},_handleFrameItems:function(t){for(var e in this._frameItems){var n=this._frameItems[e];n.item.emit("frame",new l(t,{time:n.time+=t.delta,count:n.count++}))}},_changed:function(){this._project._changed(4097),this._bounds=this._decomposed=o},getElement:function(){return this._element},getPixelRatio:function(){return this._pixelRatio},getResolution:function(){return 72*this._pixelRatio},getViewSize:function(){var t=this._viewSize;return new x(t.width,t.height,this,"setViewSize")},setViewSize:function(){var t=y.read(arguments),e=t.subtract(this._viewSize);e.isZero()||(this._setElementSize(t.width,t.height),this._viewSize.set(t),this._changed(),this.emit("resize",{size:t,delta:e}),this._autoUpdate&&this.update())},_setElementSize:function(t,e){var n=this._element;n&&(n.width!==t&&(n.width=t),n.height!==e&&(n.height=e))},getBounds:function(){return this._bounds||(this._bounds=this._matrix.inverted()._transformBounds(new w(new _,this._viewSize))),this._bounds},getSize:function(){return this.getBounds().getSize()},isVisible:function(){return X.isInView(this._element)},isInserted:function(){return X.isInserted(this._element)},getPixelSize:function(t){var e,n=this._element;if(n){var i=n.parentNode,r=u.createElement("div");r.style.fontSize=t,i.appendChild(r),e=parseFloat(X.getStyles(r).fontSize),i.removeChild(r)}else e=parseFloat(e);return e},getTextWidth:function(t,e){return 0}},l.each(["rotate","scale","shear","skew"],function(t){var e="rotate"===t;this[t]=function(){var n=(e?l:_).read(arguments),i=_.read(arguments,0,{readNull:!0});return this.transform((new C)[t](n,i||this.getCenter(!0)))}},{_decompose:function(){return this._decomposed||(this._decomposed=this._matrix.decompose())},translate:function(){var t=new C;return this.transform(t.translate.apply(t,arguments))},getCenter:function(){return this.getBounds().getCenter()},setCenter:function(){var t=_.read(arguments);this.translate(this.getCenter().subtract(t))},getZoom:function(){var t=this._decompose().scaling;return(t.x+t.y)/2},setZoom:function(t){this.transform((new C).scale(t/this.getZoom(),this.getCenter()))},getRotation:function(){return this._decompose().rotation},setRotation:function(t){var e=this.getRotation();null!=e&&null!=t&&this.rotate(t-e)},getScaling:function(){var t=this._decompose().scaling;return new m(t.x,t.y,this,"setScaling")},setScaling:function(){var t=this.getScaling(),e=_.read(arguments,0,{clone:!0,readNull:!0});t&&e&&this.scale(e.x/t.x,e.y/t.y)},getMatrix:function(){return this._matrix},setMatrix:function(){var t=this._matrix;t.initialize.apply(t,arguments)},transform:function(t){this._matrix.append(t)},scrollBy:function(){this.translate(_.read(arguments).negate())}}),{projectToView:function(){return this._matrix._transformPoint(_.read(arguments))},viewToProject:function(){return this._matrix._inverseTransform(_.read(arguments))},getEventPoint:function(t){return this.viewToProject(Q.getOffset(t,this._element))}},{statics:{_views:[],_viewsById:{},_id:0,create:function(t,e){return u&&"string"==typeof e&&(e=u.getElementById(e)),new(h?J:K)(t,e)}}},new function(){if(h){var t,e,n,i,r,s=!1,a=!1,o=h.navigator;o.pointerEnabled||o.msPointerEnabled?(n="pointerdown MSPointerDown",i="pointermove MSPointerMove",r="pointerup pointercancel MSPointerUp MSPointerCancel"):(n="touchstart",i="touchmove",r="touchend touchcancel","ontouchstart"in h&&o.userAgent.match(/mobile|tablet|ip(ad|hone|od)|android|silk/i)||(n+=" mousedown",i+=" mousemove",r+=" mouseup"));var l={},c={mouseout:function(t){var e=K._focused,n=Q.getRelatedTarget(t);if(e&&(!n||"HTML"===n.nodeName)){var i=Q.getOffset(t,e._element),r=i.x,s=Math.abs,a=s(r),o=a-(1<<25);i.x=s(o)<a?o*(r<0?-1:1):r,A(e,t,e.viewToProject(i))}},scroll:T};l[n]=function(t){var e=K._focused=k(t);s||(s=!0,e._handleMouseEvent("mousedown",t))},c[i]=function(n){var i=K._focused;if(!a){var r=k(n);r?i!==r&&(i&&A(i,n),t||(t=i),i=K._focused=e=r):e&&e===i&&(t&&!t.isInserted()&&(t=null),i=K._focused=t,t=null,T())}i&&A(i,n)},c[n]=function(){a=!0},c[r]=function(t){var e=K._focused;e&&s&&e._handleMouseEvent("mouseup",t),a=s=!1},Q.add(u,c),Q.add(h,{load:T});var f,d,p,g,v,_,m,y,x=!1,w=!1,b={doubleclick:"click",mousedrag:"mousemove"},C=!1,S={mousedown:{mousedown:1,mousedrag:1,click:1,doubleclick:1},mouseup:{mouseup:1,mousedrag:1,click:1,doubleclick:1},mousemove:{mousedrag:1,mousemove:1,mouseenter:1,mouseleave:1}};return{_viewEvents:l,_handleMouseEvent:function(t,e,n){var i=this._itemEvents,r=i.native[t],a="mousemove"===t,o=this._scope.tool,h=this;function u(t){return i.virtual[t]||h.responds(t)||o&&o.responds(t)}a&&s&&u("mousedrag")&&(t="mousedrag"),n||(n=this.getEventPoint(e));var l=this.getBounds().contains(n),c=r&&l&&h._project.hitTest(n,{tolerance:0,fill:!0,stroke:!0}),b=c&&c.item||null,S=!1,k={};if(k[t.substr(5)]=!0,r&&b!==g&&(g&&E(g,null,"mouseleave",e,n),b&&E(b,null,"mouseenter",e,n),g=b),C^l&&(E(this,null,l?"mouseenter":"mouseleave",e,n),l?this:null,S=!0),!l&&!k.drag||n.equals(d)||(P(this,b,a?t:"mousemove",e,n,d),S=!0),C=l,k.down&&l||k.up&&f){if(P(this,b,t,e,n,f),k.down){if(y=b===_&&Date.now()-m<300,p=_=b,!w&&b){for(var T=b;T&&!T.responds("mousedrag");)T=T._parent;T&&(v=b)}f=n}else k.up&&(w||b!==p||(m=Date.now(),P(this,b,y?"doubleclick":"click",e,n,f),y=!1),p=v=null);C=!1,S=!0}d=n,S&&o&&(x=o._handleMouseEvent(t,e,n,k)||x),!1!==e.cancelable&&(x&&!k.move||k.down&&u("mouseup"))&&e.preventDefault()},_handleKeyEvent:function(t,e,n,i){var r,s=this._scope,a=s.tool;function o(a){a.responds(t)&&(ct=s,a.emit(t,r=r||new tt(t,e,n,i)))}this.isVisible()&&(o(this),a&&a.responds(t)&&o(a))},_countItemEvent:function(t,e){var n=this._itemEvents,i=n.native,r=n.virtual;for(var s in S)i[s]=(i[s]||0)+(S[s][t]||0)*e;r[t]=(r[t]||0)+e},statics:{updateFocus:T,_resetState:function(){s=a=x=C=!1,t=e=f=d=p=g=v=_=m=y=null}}}}function k(t){var e=Q.getTarget(t);return e.getAttribute&&K._viewsById[e.getAttribute("id")]}function T(){var t=K._focused;if(!t||!t.isVisible())for(var n=0,i=K._views.length;n<i;n++)if((t=K._views[n]).isVisible()){K._focused=e=t;break}}function A(t,e,n){t._handleMouseEvent("mousemove",e,n)}function E(t,e,n,i,r,s,a){var o,h=!1;function u(t,n){if(t.responds(n)){if(o||(o=new nt(n,i,r,e||t,s?r.subtract(s):null)),t.emit(n,o)&&(x=!0,o.prevented&&(w=!0),o.stopped))return h=!0}else{var a=b[n];if(a)return u(t,a)}}for(;t&&t!==a&&!u(t,n);)t=t._parent;return h}function P(t,e,n,i,r,s){return t._project.removeOn(n),w=x=!1,v&&E(v,null,n,i,r,s)||e&&e!==v&&!e.isDescendant(v)&&E(e,null,"mousedrag"===n?"mousemove":n,i,r,s,v)||E(t,v||e||t,n,i,r,s)}}),J=K.extend({_class:"CanvasView",initialize:function(t,e){if(!(e instanceof h.HTMLCanvasElement)){var n=y.read(arguments,1);if(n.isZero())throw new Error("Cannot create CanvasView with the provided argument: "+l.slice(arguments,1));e=ot.getCanvas(n)}var i=this._context=e.getContext("2d");if(i.save(),this._pixelRatio=1,!/^off|false$/.test(f.getAttribute(e,"hidpi"))){var r=h.devicePixelRatio||1,s=X.getPrefixed(i,"backingStorePixelRatio")||1;this._pixelRatio=r/s}K.call(this,t,e),this._needsUpdate=!0},remove:function t(){return this._context.restore(),t.base.call(this)},_setElementSize:function t(e,n){var i=this._pixelRatio;if(t.base.call(this,e*i,n*i),1!==i){var r=this._element,s=this._context;if(!f.hasAttribute(r,"resize")){var a=r.style;a.width=e+"px",a.height=n+"px"}s.restore(),s.save(),s.scale(i,i)}},getPixelSize:function t(e){var n,i=ct.agent;if(i&&i.firefox)n=t.base.call(this,e);else{var r=this._context,s=r.font;r.font=e+" serif",n=parseFloat(r.font),r.font=s}return n},getTextWidth:function(t,e){var n=this._context,i=n.font,r=0;n.font=t;for(var s=0,a=e.length;s<a;s++)r=Math.max(r,n.measureText(e[s]).width);return n.font=i,r},update:function(){if(!this._needsUpdate)return!1;var t=this._project,e=this._context,n=this._viewSize;return e.clearRect(0,0,n.width+1,n.height+1),t&&t.draw(e,this._matrix,this._pixelRatio),this._needsUpdate=!1,!0}}),Y=l.extend({_class:"Event",initialize:function(t){this.event=t,this.type=t&&t.type},prevented:!1,stopped:!1,preventDefault:function(){this.prevented=!0,this.event.preventDefault()},stopPropagation:function(){this.stopped=!0,this.event.stopPropagation()},stop:function(){this.stopPropagation(),this.preventDefault()},getTimeStamp:function(){return this.event.timeStamp},getModifiers:function(){return et.modifiers}}),tt=Y.extend({_class:"KeyEvent",initialize:function(t,e,n,i){this.type=t,this.event=e,this.key=n,this.character=i},toString:function(){return"{ type: '"+this.type+"', key: '"+this.key+"', character: '"+this.character+"', modifiers: "+this.getModifiers()+" }"}}),et=new function(){var t,e,n={"\t":"tab"," ":"space","\b":"backspace","":"delete",Spacebar:"space",Del:"delete",Win:"meta",Esc:"escape"},i={tab:"\t",space:" ",enter:"\r"},r={},s={},a=new l({shift:!1,control:!1,alt:!1,meta:!1,capsLock:!1,space:!1}).inject({option:{get:function(){return this.alt}},command:{get:function(){var t=ct&&ct.agent;return t&&t.mac?this.meta:this.control}}});function c(t){var e=t.key||t.keyIdentifier;return e=/^U\+/.test(e)?String.fromCharCode(parseInt(e.substr(2),16)):/^Arrow[A-Z]/.test(e)?e.substr(5):"Unidentified"===e||e===o?String.fromCharCode(t.keyCode):e,n[e]||(e.length>1?l.hyphenate(e):e.toLowerCase())}function f(e,n,i,o){var h,u=K._focused;if(r[n]=e,e?s[n]=i:delete s[n],n.length>1&&(h=l.camelize(n))in a){a[h]=e;var c=ct&&ct.agent;if("meta"===h&&c&&c.mac)if(e)t={};else{for(var d in t)d in s&&f(!1,d,t[d],o);t=null}}else e&&t&&(t[n]=i);u&&u._handleKeyEvent(e?"keydown":"keyup",o,n,i)}return Q.add(u,{keydown:function(t){var n=c(t),r=ct&&ct.agent;n.length>1||r&&r.chrome&&(t.altKey||r.mac&&t.metaKey||!r.mac&&t.ctrlKey)?f(!0,n,i[n]||(n.length>1?"":n),t):e=n},keypress:function(t){if(e){var n=c(t),i=t.charCode,r=i>=32?String.fromCharCode(i):n.length>1?"":n;n!==e&&(n=r.toLowerCase()),f(!0,n,r,t),e=null}},keyup:function(t){var e=c(t);e in s&&f(!1,e,s[e],t)}}),Q.add(h,{blur:function(t){for(var e in s)f(!1,e,s[e],t)}}),{modifiers:a,isDown:function(t){return!!r[t]}}},nt=Y.extend({_class:"MouseEvent",initialize:function(t,e,n,i,r){this.type=t,this.event=e,this.point=n,this.target=i,this.delta=r},toString:function(){return"{ type: '"+this.type+"', point: "+this.point+", target: "+this.target+(this.delta?", delta: "+this.delta:"")+", modifiers: "+this.getModifiers()+" }"}}),it=Y.extend({_class:"ToolEvent",_item:null,initialize:function(t,e,n){this.tool=t,this.type=e,this.event=n},_choosePoint:function(t,e){return t||(e?e.clone():null)},getPoint:function(){return this._choosePoint(this._point,this.tool._point)},setPoint:function(t){this._point=t},getLastPoint:function(){return this._choosePoint(this._lastPoint,this.tool._lastPoint)},setLastPoint:function(t){this._lastPoint=t},getDownPoint:function(){return this._choosePoint(this._downPoint,this.tool._downPoint)},setDownPoint:function(t){this._downPoint=t},getMiddlePoint:function(){return!this._middlePoint&&this.tool._lastPoint?this.tool._point.add(this.tool._lastPoint).divide(2):this._middlePoint},setMiddlePoint:function(t){this._middlePoint=t},getDelta:function(){return!this._delta&&this.tool._lastPoint?this.tool._point.subtract(this.tool._lastPoint):this._delta},setDelta:function(t){this._delta=t},getCount:function(){return this.tool[/^mouse(down|up)$/.test(this.type)?"_downCount":"_moveCount"]},setCount:function(t){this.tool[/^mouse(down|up)$/.test(this.type)?"downCount":"count"]=t},getItem:function(){if(!this._item){var t=this.tool._scope.project.hitTest(this.getPoint());if(t){for(var e=t.item,n=e._parent;/^(Group|CompoundPath)$/.test(n._class);)e=n,n=n._parent;this._item=e}}return this._item},setItem:function(t){this._item=t},toString:function(){return"{ type: "+this.type+", point: "+this.getPoint()+", count: "+this.getCount()+", modifiers: "+this.getModifiers()+" }"}}),rt=d.extend({_class:"Tool",_list:"tools",_reference:"tool",_events:["onMouseDown","onMouseUp","onMouseDrag","onMouseMove","onActivate","onDeactivate","onEditOptions","onKeyDown","onKeyUp"],initialize:function(t){d.call(this),this._moveCount=-1,this._downCount=-1,this.set(t)},getMinDistance:function(){return this._minDistance},setMinDistance:function(t){this._minDistance=t,null!=t&&null!=this._maxDistance&&t>this._maxDistance&&(this._maxDistance=t)},getMaxDistance:function(){return this._maxDistance},setMaxDistance:function(t){this._maxDistance=t,null!=this._minDistance&&null!=t&&t<this._minDistance&&(this._minDistance=t)},getFixedDistance:function(){return this._minDistance==this._maxDistance?this._minDistance:null},setFixedDistance:function(t){this._minDistance=this._maxDistance=t},_handleMouseEvent:function(t,e,n,i){ct=this._scope,i.drag&&!this.responds(t)&&(t="mousemove");var r=i.move||i.drag,s=this.responds(t),a=this.minDistance,o=this.maxDistance,h=!1,u=this;function l(t,e){var s=n,a=r?u._point:u._downPoint||s;if(r){if(u._moveCount>=0&&s.equals(a))return!1;if(a&&(null!=t||null!=e)){var o=s.subtract(a),h=o.getLength();if(h<(t||0))return!1;e&&(s=a.add(o.normalize(Math.min(h,e))))}u._moveCount++}return u._point=s,u._lastPoint=a||s,i.down&&(u._moveCount=-1,u._downPoint=s,u._downCount++),!0}function c(){s&&(h=u.emit(t,new it(u,t,e))||h)}if(i.down)l(),c();else if(i.up)l(null,o),c();else if(s)for(;l(a,o);)c();return h}}),st=l.extend(c,{_class:"Tween",statics:{easings:{linear:function(t){return t},easeInQuad:function(t){return t*t},easeOutQuad:function(t){return t*(2-t)},easeInOutQuad:function(t){return t<.5?2*t*t:2*(2-t)*t-1},easeInCubic:function(t){return t*t*t},easeOutCubic:function(t){return--t*t*t+1},easeInOutCubic:function(t){return t<.5?4*t*t*t:(t-1)*(2*t-2)*(2*t-2)+1},easeInQuart:function(t){return t*t*t*t},easeOutQuart:function(t){return 1- --t*t*t*t},easeInOutQuart:function(t){return t<.5?8*t*t*t*t:1-8*--t*t*t*t},easeInQuint:function(t){return t*t*t*t*t},easeOutQuint:function(t){return 1+--t*t*t*t*t},easeInOutQuint:function(t){return t<.5?16*t*t*t*t*t:1+16*--t*t*t*t*t}}},initialize:function t(e,n,i,r,s,a){this.object=e;var o=typeof s,h="function"===o;this.type=h?o:"string"===o?s:"linear",this.easing=h?s:t.easings[this.type],this.duration=r,this.running=!1,this._then=null,this._startTime=null;var u=n||i;this._keys=u?Object.keys(u):[],this._parsedKeys=this._parseKeys(this._keys),this._from=u&&this._getState(n),this._to=u&&this._getState(i),!1!==a&&this.start()},then:function(t){return this._then=t,this},start:function(){return this._startTime=null,this.running=!0,this},stop:function(){return this.running=!1,this},update:function(t){if(this.running){t>1&&(t=1,this.running=!1);for(var e=this.easing(t),n=this._keys,i=function(n){return"function"==typeof n?n(e,t):n},r=0,s=n&&n.length;r<s;r++){var a=n[r],o=i(this._from[a]),h=i(this._to[a]),u=o&&h&&o.__add&&h.__add?h.__subtract(o).__multiply(e).__add(o):(h-o)*e+o;this._setProperty(this._parsedKeys[a],u)}!this.running&&this._then&&this._then(this.object),this.responds("update")&&this.emit("update",new l({progress:t,factor:e}))}return this},_events:{onUpdate:{}},_handleFrame:function(t){var e=this._startTime,n=e?(t-e)/this.duration:0;e||(this._startTime=t),this.update(n)},_getState:function(t){for(var e=this._keys,n={},i=0,r=e.length;i<r;i++){var s,a=e[i],o=this._parsedKeys[a],h=this._getProperty(o);if(t){var u=this._resolveValue(h,t[a]);this._setProperty(o,u),s=(s=this._getProperty(o))&&s.clone?s.clone():s,this._setProperty(o,h)}else s=h&&h.clone?h.clone():h;n[a]=s}return n},_resolveValue:function(t,e){if(e){if(Array.isArray(e)&&2===e.length){var n=e[0];return n&&n.match&&n.match(/^[+\-*\/]=/)?this._calculate(t,n[0],e[1]):e}if("string"==typeof e){var i=e.match(/^[+\-*\/]=(.*)/);if(i){var r=JSON.parse(i[1].replace(/(['"])?([a-zA-Z0-9_]+)(['"])?:/g,'"$2": '));return this._calculate(t,e[0],r)}}}return e},_calculate:function(t,e,n){return ct.PaperScript.calculateBinary(t,e,n)},_parseKeys:function(t){for(var e={},n=0,i=t.length;n<i;n++){var r=t[n],s=r.replace(/\.([^.]*)/g,"/$1").replace(/\[['"]?([^'"\]]*)['"]?\]/g,"/$1");e[r]=s.split("/")}return e},_getProperty:function(t,e){for(var n=this.object,i=0,r=t.length-(e||0);i<r&&n;i++)n=n[t[i]];return n},_setProperty:function(t,e){var n=this._getProperty(t,1);n&&(n[t[t.length-1]]=e)}}),at={request:function(t){var e=new a.XMLHttpRequest;return e.open((t.method||"get").toUpperCase(),t.url,l.pick(t.async,!0)),t.mimeType&&e.overrideMimeType(t.mimeType),e.onload=function(){var n=e.status;0===n||200===n?t.onLoad&&t.onLoad.call(e,e.responseText):e.onerror()},e.onerror=function(){var n=e.status,i='Could not load "'+t.url+'" (Status: '+n+")";if(!t.onError)throw new Error(i);t.onError(i,n)},e.send(null)}},ot={canvases:[],getCanvas:function(t,e){if(!h)return null;var n,i=!0;"object"==typeof t&&(e=t.height,t=t.width),this.canvases.length?n=this.canvases.pop():(n=u.createElement("canvas"),i=!1);var r=n.getContext("2d");if(!r)throw new Error("Canvas "+n+" is unable to provide a 2D context.");return n.width===t&&n.height===e?i&&r.clearRect(0,0,t+1,e+1):(n.width=t,n.height=e),r.save(),n},getContext:function(t,e){var n=this.getCanvas(t,e);return n?n.getContext("2d"):null},release:function(t){var e=t&&t.canvas?t.canvas:t;e&&e.getContext&&(e.getContext("2d").restore(),this.canvases.push(e))}},ht=new function(){var t,e,n,i,r,s,a,o,h,u,c,f=Math.min,d=Math.max,p=Math.abs;function g(t,e,n){return.2989*t+.587*e+.114*n}function v(t,e,n,i){var r=i-g(t,e,n),s=(i=g(h=t+r,u=e+r,c=n+r),f(h,u,c)),a=d(h,u,c);if(s<0){var o=i-s;h=i+(h-i)*i/o,u=i+(u-i)*i/o,c=i+(c-i)*i/o}if(a>255){var l=255-i,p=a-i;h=i+(h-i)*l/p,u=i+(u-i)*l/p,c=i+(c-i)*l/p}}function _(t,e,n){return d(t,e,n)-f(t,e,n)}function m(t,e,n,i){var r,s=[t,e,n],a=d(t,e,n),o=f(t,e,n);r=0===f(o=o===t?0:o===e?1:2,a=a===t?0:a===e?1:2)?1===d(o,a)?2:1:0,s[a]>s[o]?(s[r]=(s[r]-s[o])*i/(s[a]-s[o]),s[a]=i):s[r]=s[a]=0,s[o]=0,h=s[0],u=s[1],c=s[2]}var y={multiply:function(){h=r*t/255,u=s*e/255,c=a*n/255},screen:function(){h=r+t-r*t/255,u=s+e-s*e/255,c=a+n-a*n/255},overlay:function(){h=r<128?2*r*t/255:255-2*(255-r)*(255-t)/255,u=s<128?2*s*e/255:255-2*(255-s)*(255-e)/255,c=a<128?2*a*n/255:255-2*(255-a)*(255-n)/255},"soft-light":function(){var i=t*r/255;h=i+r*(255-(255-r)*(255-t)/255-i)/255,u=(i=e*s/255)+s*(255-(255-s)*(255-e)/255-i)/255,c=(i=n*a/255)+a*(255-(255-a)*(255-n)/255-i)/255},"hard-light":function(){h=t<128?2*t*r/255:255-2*(255-t)*(255-r)/255,u=e<128?2*e*s/255:255-2*(255-e)*(255-s)/255,c=n<128?2*n*a/255:255-2*(255-n)*(255-a)/255},"color-dodge":function(){h=0===r?0:255===t?255:f(255,255*r/(255-t)),u=0===s?0:255===e?255:f(255,255*s/(255-e)),c=0===a?0:255===n?255:f(255,255*a/(255-n))},"color-burn":function(){h=255===r?255:0===t?0:d(0,255-255*(255-r)/t),u=255===s?255:0===e?0:d(0,255-255*(255-s)/e),c=255===a?255:0===n?0:d(0,255-255*(255-a)/n)},darken:function(){h=r<t?r:t,u=s<e?s:e,c=a<n?a:n},lighten:function(){h=r>t?r:t,u=s>e?s:e,c=a>n?a:n},difference:function(){(h=r-t)<0&&(h=-h),(u=s-e)<0&&(u=-u),(c=a-n)<0&&(c=-c)},exclusion:function(){h=r+t*(255-r-r)/255,u=s+e*(255-s-s)/255,c=a+n*(255-a-a)/255},hue:function(){m(t,e,n,_(r,s,a)),v(h,u,c,g(r,s,a))},saturation:function(){m(r,s,a,_(t,e,n)),v(h,u,c,g(r,s,a))},luminosity:function(){v(r,s,a,g(t,e,n))},color:function(){v(t,e,n,g(r,s,a))},add:function(){h=f(r+t,255),u=f(s+e,255),c=f(a+n,255)},subtract:function(){h=d(r-t,0),u=d(s-e,0),c=d(a-n,0)},average:function(){h=(r+t)/2,u=(s+e)/2,c=(a+n)/2},negation:function(){h=255-p(255-t-r),u=255-p(255-e-s),c=255-p(255-n-a)}},x=this.nativeModes=l.each(["source-over","source-in","source-out","source-atop","destination-over","destination-in","destination-out","destination-atop","lighter","darker","copy","xor"],function(t){this[t]=!0},{}),w=ot.getContext(1,1);w&&(l.each(y,function(t,e){var n="darken"===e,i=!1;w.save();try{w.fillStyle=n?"#300":"#a00",w.fillRect(0,0,1,1),w.globalCompositeOperation=e,w.globalCompositeOperation===e&&(w.fillStyle=n?"#a00":"#300",w.fillRect(0,0,1,1),i=w.getImageData(0,0,1,1).data[0]!==n?170:51)}catch(t){}w.restore(),x[e]=i}),ot.release(w)),this.process=function(l,f,d,p,g){var v=f.canvas,_="normal"===l;if(_||x[l])d.save(),d.setTransform(1,0,0,1,0,0),d.globalAlpha=p,_||(d.globalCompositeOperation=l),d.drawImage(v,g.x,g.y),d.restore();else{var m=y[l];if(!m)return;for(var w=d.getImageData(g.x,g.y,v.width,v.height),b=w.data,C=f.getImageData(0,0,v.width,v.height).data,S=0,k=b.length;S<k;S+=4){t=C[S],r=b[S],e=C[S+1],s=b[S+1],n=C[S+2],a=b[S+2],i=C[S+3],o=b[S+3],m();var T=i*p/255,A=1-T;b[S]=T*h+A*r,b[S+1]=T*u+A*s,b[S+2]=T*c+A*a,b[S+3]=i*p+A*o}d.putImageData(w,g.x,g.y)}}},ut=new function(){var t="http://www.w3.org/2000/svg",e="http://www.w3.org/2000/xmlns",n="http://www.w3.org/1999/xlink",i={href:n,xlink:e,xmlns:e+"/","xmlns:xlink":e+"/"};function r(t,e,n){for(var r in e){var s=e[r],a=i[r];"number"==typeof s&&n&&(s=n.number(s)),a?t.setAttributeNS(a,r,s):t.setAttribute(r,s)}return t}return{svg:t,xmlns:e,xlink:n,create:function(e,n,i){return r(u.createElementNS(t,e),n,i)},get:function(t,e){var n=i[e],r=n?t.getAttributeNS(n,e):t.getAttribute(e);return"null"===r?null:r},set:r}},lt=l.each({fillColor:["fill","color"],fillRule:["fill-rule","string"],strokeColor:["stroke","color"],strokeWidth:["stroke-width","number"],strokeCap:["stroke-linecap","string"],strokeJoin:["stroke-linejoin","string"],strokeScaling:["vector-effect","lookup",{true:"none",false:"non-scaling-stroke"},function(t,e){return!e&&(t instanceof j||t instanceof P||t instanceof H)}],miterLimit:["stroke-miterlimit","number"],dashArray:["stroke-dasharray","array"],dashOffset:["stroke-dashoffset","number"],fontFamily:["font-family","string"],fontWeight:["font-weight","string"],fontSize:["font-size","number"],justification:["text-anchor","lookup",{left:"start",center:"middle",right:"end"}],opacity:["opacity","number"],blendMode:["mix-blend-mode","style"]},function(t,e){var n=l.capitalize(e),i=t[2];this[e]={type:t[1],property:e,attribute:t[0],toSVG:i,fromSVG:i&&l.each(i,function(t,e){this[t]=e},{}),exportFilter:t[3],get:"get"+n,set:"set"+n}},{});new function(){var t;function e(e,n,i){var r=new l,s=e.getTranslation();if(n){var a=(e=e._shiftless())._inverseTransform(s);r[i?"cx":"x"]=a.x,r[i?"cy":"y"]=a.y,s=null}if(!e.isIdentity()){var o=e.decompose();if(o){var h=[],u=o.rotation,c=o.scaling,f=o.skewing;s&&!s.isZero()&&h.push("translate("+t.point(s)+")"),u&&h.push("rotate("+t.number(u)+")"),g.isZero(c.x-1)&&g.isZero(c.y-1)||h.push("scale("+t.point(c)+")"),f.x&&h.push("skewX("+t.number(f.x)+")"),f.y&&h.push("skewY("+t.number(f.y)+")"),r.transform=h.join(" ")}else r.transform="matrix("+e.getValues().join(",")+")"}return r}function n(n,i){for(var r=e(n._matrix),s=n._children,a=ut.create("g",r,t),o=0,h=s.length;o<h;o++){var l=s[o],c=f(l,i);if(c)if(l.isClipMask()){var d=ut.create("clipPath");d.appendChild(c),u(l,d,"clip"),ut.set(a,{"clip-path":"url(#"+d.id+")"})}else a.appendChild(c)}return a}function i(n){var i=n._type,r=n._radius,s=e(n._matrix,!0,"rectangle"!==i);if("rectangle"===i){i="rect";var a=n._size,o=a.width,h=a.height;s.x-=o/2,s.y-=h/2,s.width=o,s.height=h,r.isZero()&&(r=null)}return r&&("circle"===i?s.r=r:(s.rx=r.width,s.ry=r.height)),ut.create(i,s,t)}var r,s={Group:n,Layer:n,Raster:function(n,i){var r=e(n._matrix,!0),s=n.getSize(),a=n.getImage();return r.x-=s.width/2,r.y-=s.height/2,r.width=s.width,r.height=s.height,r.href=0==i.embedImages&&a&&a.src||n.toDataURL(),ut.create("image",r,t)},Path:function(n,r){var s=r.matchShapes;if(s){var a=n.toShape(!1);if(a)return i(a)}var o,h=n._segments,u=h.length,l=e(n._matrix);if(s&&u>=2&&!n.hasHandles())if(u>2){o=n._closed?"polygon":"polyline";for(var c=[],f=0;f<u;f++)c.push(t.point(h[f]._point));l.points=c.join(" ")}else{o="line";var d=h[0]._point,p=h[1]._point;l.set({x1:d.x,y1:d.y,x2:p.x,y2:p.y})}else o="path",l.d=n.getPathData(null,r.precision);return ut.create(o,l,t)},Shape:i,CompoundPath:function(n,i){var r=e(n._matrix),s=n.getPathData(null,i.precision);return s&&(r.d=s),ut.create("path",r,t)},SymbolItem:function(n,i){var r=e(n._matrix,!0),s=n._definition,a=h(s,"symbol"),o=s._item,l=o.getBounds();return a||((a=ut.create("symbol",{viewBox:t.rectangle(l)})).appendChild(f(o,i)),u(s,a,"symbol")),r.href="#"+a.id,r.x+=l.x,r.y+=l.y,r.width=l.width,r.height=l.height,r.overflow="visible",ut.create("use",r,t)},PointText:function(n){var i=ut.create("text",e(n._matrix,!0),t);return i.textContent=n._content,i}};function o(e,n,i){var r={},s=!i&&e.getParent(),a=[];return null!=e._name&&(r.id=e._name),l.each(lt,function(n){var i=n.get,o=n.type,c=e[i]();if(n.exportFilter?n.exportFilter(e,c):!s||!l.equals(s[i](),c)){if("color"===o&&null!=c){var f=c.getAlpha();f<1&&(r[n.attribute+"-opacity"]=f)}"style"===o?a.push(n.attribute+": "+c):r[n.attribute]=null==c?"none":"color"===o?c.gradient?function(e){var n=h(e,"color");if(!n){var i,r=e.getGradient(),s=r._radial,a=e.getOrigin(),o=e.getDestination();if(s){i={cx:a.x,cy:a.y,r:a.getDistance(o)};var l=e.getHighlight();l&&(i.fx=l.x,i.fy=l.y)}else i={x1:a.x,y1:a.y,x2:o.x,y2:o.y};i.gradientUnits="userSpaceOnUse",n=ut.create((s?"radial":"linear")+"Gradient",i,t);for(var c=r._stops,f=0,d=c.length;f<d;f++){var p=c[f],g=p._color,v=g.getAlpha(),_=p._offset;i={offset:null==_?f/(d-1):_},g&&(i["stop-color"]=g.toCSS(!0)),v<1&&(i["stop-opacity"]=v),n.appendChild(ut.create("stop",i,t))}u(e,n,"color")}return"url(#"+n.id+")"}(c):c.toCSS(!0):"array"===o?c.join(","):"lookup"===o?n.toSVG[c]:c}}),a.length&&(r.style=a.join(";")),1===r.opacity&&delete r.opacity,e._visible||(r.visibility="hidden"),ut.set(n,r,t)}function h(t,e){return r||(r={ids:{},svgs:{}}),t&&r.svgs[e+"-"+(t._id||t.__id||(t.__id=v.get("svg")))]}function u(t,e,n){r||h();var i=r.ids[n]=(r.ids[n]||0)+1;e.id=n+"-"+i,r.svgs[n+"-"+(t._id||t.__id)]=e}function c(t,e){var n=t,i=null;if(r){for(var s in n="svg"===t.nodeName.toLowerCase()&&t,r.svgs)i||(n||(n=ut.create("svg")).appendChild(t),i=n.insertBefore(ut.create("defs"),n.firstChild)),i.appendChild(r.svgs[s]);r=null}return e.asString?(new a.XMLSerializer).serializeToString(n):n}function f(t,e,n){var i=s[t._class],r=i&&i(t,e);if(r){var a=e.onExport;a&&(r=a(t,r,e)||r);var h=JSON.stringify(t._data);h&&"{}"!==h&&"null"!==h&&r.setAttribute("data-paper-data",h)}return r&&o(t,r,n)}function d(e){return e||(e={}),t=new p(e.precision),e}T.inject({exportSVG:function(t){return c(f(this,t=d(t),!0),t)}}),k.inject({exportSVG:function(n){n=d(n);var i=this._children,r=this.getView(),s=l.pick(n.bounds,"view"),a=n.matrix||"view"===s&&r._matrix,o=a&&C.read([a]),h="view"===s?new w([0,0],r.getViewSize()):"content"===s?T._getBounds(i,o,{stroke:!0}).rect:w.read([s],0,{readNull:!0}),u={version:"1.1",xmlns:ut.svg,"xmlns:xlink":ut.xlink};h&&(u.width=h.width,u.height=h.height,(h.x||h.y)&&(u.viewBox=t.rectangle(h)));var p=ut.create("svg",u,t),g=p;o&&!o.isIdentity()&&(g=p.appendChild(ut.create("g",e(o),t)));for(var v=0,_=i.length;v<_;v++)g.appendChild(f(i[v],n,!0));return c(p,n)}})},new function(){var t,e={};function n(e,n,i,r,s){var a=ut.get(e,n),o=null==a?r?null:i?"":0:i?a:parseFloat(a);return/%\s*$/.test(a)?o/100*(s?1:t[/x|^width/.test(n)?"width":"height"]):o}function i(t,e,i,r,s){return e=n(t,e||"x",!1,r,s),i=n(t,i||"y",!1,r,s),!r||null!=e&&null!=i?new _(e,i):null}function r(t,e,i,r,s){return e=n(t,e||"width",!1,r,s),i=n(t,i||"height",!1,r,s),!r||null!=e&&null!=i?new y(e,i):null}function s(t,e,n){return"none"===t?null:"number"===e?parseFloat(t):"array"===e?t?t.split(/[\s,]+/g).map(parseFloat):[]:"color"===e?S(t)||t:"lookup"===e?n[t]:t}function c(t,e,n,i){var r=t.childNodes,s="clippath"===e,a="defs"===e,o=new A,h=o._project,u=h._currentStyle,l=[];if(s||a||(o=b(o,t,i),h._currentStyle=o._style.clone()),i)for(var c=t.querySelectorAll("defs"),f=0,d=c.length;f<d;f++)E(c[f],n,!1);for(f=0,d=r.length;f<d;f++){var p,g=r[f];1!==g.nodeType||/^defs$/i.test(g.nodeName)||!(p=E(g,n,!1))||p instanceof L||l.push(p)}return o.addChildren(l),s&&(o=b(o.reduce(),t,i)),h._currentStyle=u,(s||a)&&(o.remove(),o=null),o}function f(t,e){for(var n=t.getAttribute("points").match(/[+-]?(?:\d*\.\d+|\d+\.?)(?:[eE][+-]?\d+)?/g),i=[],r=0,s=n.length;r<s;r+=2)i.push(new _(parseFloat(n[r]),parseFloat(n[r+1])));var a=new V(i);return"polygon"===e&&a.closePath(),a}function d(t,r){var s,a=(n(t,"href",!0)||"").substring(1),o="radialgradient"===r;if(a)(s=e[a].getGradient())._radial^o&&((s=s.clone())._radial=o);else{for(var h=t.childNodes,u=[],l=0,c=h.length;l<c;l++){var f=h[l];1===f.nodeType&&u.push(b(new G,f))}s=new $(u,o)}var d,p,g,v="userSpaceOnUse"!==n(t,"gradientUnits",!0);return o?(p=(d=i(t,"cx","cy",!1,v)).add(n(t,"r",!1,!1,v),0),g=i(t,"fx","fy",!0,v)):(d=i(t,"x1","y1",!1,v),p=i(t,"x2","y2",!1,v)),b(new W(s,d,p,g),t)._scaleToBounds=v,null}var p={"#document":function(t,e,n,i){for(var r=t.childNodes,s=0,a=r.length;s<a;s++){var o=r[s];if(1===o.nodeType)return E(o,n,i)}},g:c,svg:c,clippath:c,polygon:f,polyline:f,path:function(t){return j.create(t.getAttribute("d"))},lineargradient:d,radialgradient:d,image:function(t){var e=new I(n(t,"href",!0));return e.on("load",function(){var e=r(t);this.setSize(e);var n=i(t).add(e.divide(2));this._matrix.append((new C).translate(n))}),e},symbol:function(t,e,n,i){return new L(c(t,e,n,i),!0)},defs:c,use:function(t){var r=(n(t,"href",!0)||"").substring(1),s=e[r],a=i(t);return s?s instanceof L?s.place(a):s.clone().translate(a):null},circle:function(t){return new P.Circle(i(t,"cx","cy"),n(t,"r"))},ellipse:function(t){return new P.Ellipse({center:i(t,"cx","cy"),radius:r(t,"rx","ry")})},rect:function(t){return new P.Rectangle(new w(i(t),r(t)),r(t,"rx","ry"))},line:function(t){return new V.Line(i(t,"x1","y1"),i(t,"x2","y2"))},text:function(t){var e=new U(i(t).add(i(t,"dx","dy")));return e.setContent(t.textContent.trim()||""),e}};function g(t,e,n,i){if(t.transform){for(var r=(i.getAttribute(n)||"").split(/\)\s*/g),s=new C,a=0,o=r.length;a<o;a++){var h=r[a];if(!h)break;for(var u=h.split(/\(\s*/),l=u[0],c=u[1].split(/[\s,]+/g),f=0,d=c.length;f<d;f++)c[f]=parseFloat(c[f]);switch(l){case"matrix":s.append(new C(c[0],c[1],c[2],c[3],c[4],c[5]));break;case"rotate":s.rotate(c[0],c[1]||0,c[2]||0);break;case"translate":s.translate(c[0],c[1]||0);break;case"scale":s.scale(c);break;case"skewX":s.skew(c[0],0);break;case"skewY":s.skew(0,c[0])}}t.transform(s)}}function v(t,e,n){var i="fill-opacity"===n?"getFillColor":"getStrokeColor",r=t[i]&&t[i]();r&&r.setAlpha(parseFloat(e))}var m=l.set(l.each(lt,function(t){this[t.attribute]=function(e,n){if(e[t.set]&&(e[t.set](s(n,t.type,t.fromSVG)),"color"===t.type)){var i=e[t.get]();if(i&&i._scaleToBounds){var r=e.getBounds();i.transform((new C).translate(r.getPoint()).scale(r.getSize()))}}}},{}),{id:function(t,n){e[n]=t,t.setName&&t.setName(n)},"clip-path":function(t,e){var n=S(e);if(n){if((n=n.clone()).setClipMask(!0),!(t instanceof A))return new A(n,t);t.insertChild(0,n)}},gradientTransform:g,transform:g,"fill-opacity":v,"stroke-opacity":v,visibility:function(t,e){t.setVisible&&t.setVisible("visible"===e)},display:function(t,e){t.setVisible&&t.setVisible(null!==e)},"stop-color":function(t,e){t.setColor&&t.setColor(e)},"stop-opacity":function(t,e){t._color&&t._color.setAlpha(parseFloat(e))},offset:function(t,e){if(t.setOffset){var n=e.match(/(.*)%$/);t.setOffset(n?n[1]/100:parseFloat(e))}},viewBox:function(t,e,n,i,a){var o,h=new w(s(e,"array")),u=r(i,null,null,!0);if(t instanceof A){var l=u?u.divide(h.getSize()):1,c=(new C).scale(l).translate(h.getPoint().negate());o=t}else t instanceof L&&(u&&h.setSize(u),o=t._item);if(o){if("visible"!==x(i,"overflow",a)){var f=new P.Rectangle(h);f.setClipMask(!0),o.addChild(f)}c&&o.transform(c)}}});function x(t,e,n){var i=t.attributes[e],r=i&&i.value;if(!r&&t.style){var s=l.camelize(e);(r=t.style[s])||n.node[s]===n.parent[s]||(r=n.node[s])}return r?"none"===r?null:r:o}function b(t,e,n){var i=e.parentNode,r={node:X.getStyles(e)||{},parent:!n&&!/^defs$/i.test(i.tagName)&&X.getStyles(i)||{}};return l.each(m,function(n,i){var s=x(e,i,r);t=s!==o&&n(t,s,i,e,r)||t}),t}function S(t){var n=t&&t.match(/\((?:["'#]*)([^"')]+)/),i=n&&n[1],r=i&&e[h?i.replace(h.location.href.split("#")[0]+"#",""):i];return r&&r._scaleToBounds&&((r=r.clone())._scaleToBounds=!0),r}function E(n,i,s){var a,o,h,c=n.nodeName.toLowerCase(),f="#document"!==c,d=u.body;s&&f&&(t=ct.getView().getSize(),t=r(n,null,null,!0)||t,a=ut.create("svg",{style:"stroke-width: 1px; stroke-miterlimit: 10"}),o=n.parentNode,h=n.nextSibling,a.appendChild(n),d.appendChild(a));var g=ct.settings,v=g.applyMatrix,_=g.insertItems;g.applyMatrix=!1,g.insertItems=!1;var m=p[c],y=m&&m(n,c,i,s)||null;if(g.insertItems=_,g.applyMatrix=v,y){!f||y instanceof A||(y=b(y,n,s));var x=i.onImport,w=f&&n.getAttribute("data-paper-data");x&&(y=x(n,y,i)||y),i.expandShapes&&y instanceof P&&(y.remove(),y=y.toPath()),w&&(y._data=JSON.parse(w))}return a&&(d.removeChild(a),o&&(h?o.insertBefore(n,h):o.appendChild(n))),s&&(e={},y&&l.pick(i.applyMatrix,v)&&y.matrix.apply(!0,!0)),y}function N(t,e,n){if(!t)return null;e="function"==typeof e?{onLoad:e}:e||{};var i=ct,r=null;function s(s){try{var u="object"==typeof s?s:(new a.DOMParser).parseFromString(s,"image/svg+xml");if(!u.nodeName)throw u=null,new Error("Unsupported SVG source: "+t);ct=i,r=E(u,e,!0),e&&!1===e.insert||n._insertItem(o,r);var l=e.onLoad;l&&l(r,s)}catch(t){h(t)}}function h(t,n){var i=e.onError;if(!i)throw new Error(t);i(t,n)}if("string"!=typeof t||/^.*</.test(t)){if("undefined"!=typeof File&&t instanceof File){var l=new FileReader;return l.onload=function(){s(l.result)},l.onerror=function(){h(l.error)},l.readAsText(t)}s(t)}else{var c=u.getElementById(t);c?s(c):at.request({url:t,async:!0,onLoad:s,onError:h})}return r}T.inject({importSVG:function(t,e){return N(t,e,this)}}),k.inject({importSVG:function(t,e){return this.activate(),N(t,e,this)}})},l.exports.PaperScript=function(){var t,e,c,d=this,p=d.acorn;if(!p)try{p=n(3)}catch(t){}p||(p=t=e={},c=function(t){"use strict";var e,n,i,r;t.version="0.5.0",t.parse=function(t,r){return n=String(t),i=n.length,a(r),$t(),function(t){_=m=o,e.locations&&(y=new Wt);x=b=null,w=[],Jt();var n=t||le(),i=!0;t||(n.body=[]);for(;f!==I;){var r=be();n.body.push(r),i&&de(r)&&oe(!0),i=!1}return fe(n,"Program")}(e.program)};var s=t.defaultOptions={ecmaVersion:5,strictSemicolons:!1,allowTrailingCommas:!0,forbidReserved:!1,allowReturnOutsideFunction:!1,locations:!1,onComment:null,ranges:!1,program:null,sourceFile:null,directSourceFile:null};function a(t){for(var n in e=t||{},s)Object.prototype.hasOwnProperty.call(e,n)||(e[n]=s[n]);r=e.sourceFile||null}var o,h,u,l,c,f,d,p,g,v,_,m,y,x,w,b,C=t.getLineInfo=function(t,e){for(var n=1,i=0;;){qt.lastIndex=i;var r=qt.exec(t);if(!(r&&r.index<e))break;++n,i=r.index+r[0].length}return{line:n,column:e-i}};function S(t,e){var i=C(n,t);e+=" ("+i.line+":"+i.column+")";var r=new SyntaxError(e);throw r.pos=t,r.loc=i,r.raisedAt=o,r}t.tokenize=function(t,r){n=String(t),i=n.length,a(r),$t();var s={};function _(t){return m=u,Jt(t),s.start=h,s.end=u,s.startLoc=l,s.endLoc=c,s.type=f,s.value=d,s}return _.jumpTo=function(t,i){var r;if(o=t,e.locations)for(g=1,v=qt.lastIndex=0;(r=qt.exec(n))&&r.index<t;)++g,v=r.index+r[0].length;p=i,Qt()},_};var k=[],T={type:"num"},A={type:"regexp"},E={type:"string"},P={type:"name"},I={type:"eof"},N={keyword:"break"},L={keyword:"case",beforeExpr:!0},M={keyword:"catch"},O={keyword:"continue"},D={keyword:"debugger"},R={keyword:"default"},z={keyword:"do",isLoop:!0},j={keyword:"else",beforeExpr:!0},V={keyword:"finally"},B={keyword:"for",isLoop:!0},F={keyword:"function"},q={keyword:"if"},H={keyword:"return",beforeExpr:!0},U={keyword:"switch"},W={keyword:"throw",beforeExpr:!0},$={keyword:"try"},G={keyword:"var"},Z={keyword:"while",isLoop:!0},X={keyword:"with"},Q={keyword:"new",beforeExpr:!0},K={keyword:"this"},J={keyword:"null",atomValue:null},Y={keyword:"true",atomValue:!0},tt={keyword:"false",atomValue:!1},et={keyword:"in",binop:7,beforeExpr:!0},nt={break:N,case:L,catch:M,continue:O,debugger:D,default:R,do:z,else:j,finally:V,for:B,function:F,if:q,return:H,switch:U,throw:W,try:$,var:G,while:Z,with:X,null:J,true:Y,false:tt,new:Q,in:et,instanceof:{keyword:"instanceof",binop:7,beforeExpr:!0},this:K,typeof:{keyword:"typeof",prefix:!0,beforeExpr:!0},void:{keyword:"void",prefix:!0,beforeExpr:!0},delete:{keyword:"delete",prefix:!0,beforeExpr:!0}},it={type:"[",beforeExpr:!0},rt={type:"]"},st={type:"{",beforeExpr:!0},at={type:"}"},ot={type:"(",beforeExpr:!0},ht={type:")"},ut={type:",",beforeExpr:!0},lt={type:";",beforeExpr:!0},ct={type:":",beforeExpr:!0},ft={type:"."},dt={type:"?",beforeExpr:!0},pt={binop:10,beforeExpr:!0},gt={isAssign:!0,beforeExpr:!0},vt={isAssign:!0,beforeExpr:!0},_t={postfix:!0,prefix:!0,isUpdate:!0},mt={prefix:!0,beforeExpr:!0},yt={binop:1,beforeExpr:!0},xt={binop:2,beforeExpr:!0},wt={binop:3,beforeExpr:!0},bt={binop:4,beforeExpr:!0},Ct={binop:5,beforeExpr:!0},St={binop:6,beforeExpr:!0},kt={binop:7,beforeExpr:!0},Tt={binop:8,beforeExpr:!0},At={binop:9,prefix:!0,beforeExpr:!0},Et={binop:10,beforeExpr:!0};for(var Pt in t.tokTypes={bracketL:it,bracketR:rt,braceL:st,braceR:at,parenL:ot,parenR:ht,comma:ut,semi:lt,colon:ct,dot:ft,question:dt,slash:pt,eq:gt,name:P,eof:I,num:T,regexp:A,string:E},nt)t.tokTypes["_"+Pt]=nt[Pt];function It(t){t=t.split(" ");var e="",n=[];t:for(var i=0;i<t.length;++i){for(var r=0;r<n.length;++r)if(n[r][0].length==t[i].length){n[r].push(t[i]);continue t}n.push([t[i]])}function s(t){if(1==t.length)return e+="return str === "+JSON.stringify(t[0])+";";e+="switch(str){";for(var n=0;n<t.length;++n)e+="case "+JSON.stringify(t[n])+":";e+="return true}return false;"}if(n.length>3){n.sort(function(t,e){return e.length-t.length}),e+="switch(str.length){";for(i=0;i<n.length;++i){var a=n[i];e+="case "+a[0].length+":",s(a)}e+="}"}else s(t);return new Function("str",e)}var Nt,Lt=It("abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile"),Mt=It("class enum extends super const export import"),Ot=It("implements interface let package private protected public static yield"),Dt=It("eval arguments"),Rt=It("break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this"),zt=/[\u1680\u180e\u2000-\u200a\u202f\u205f\u3000\ufeff]/,jt="ªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԧԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠࢢ-ࢬऄ-हऽॐक़-ॡॱ-ॷॹ-ॿঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-ళవ-హఽౘౙౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൠൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛰᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤜᥐ-ᥭᥰ-ᥴᦀ-ᦫᧁ-ᧇᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞⸯ々-〇〡-〩〱-〵〸-〼ぁ-ゖゝ-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚗꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞓꞠ-Ɦꟸ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꪀ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ",Vt=new RegExp("["+jt+"]"),Bt=new RegExp("["+jt+"̀-ͯ҃-֑҇-ׇֽֿׁׂׅׄؐ-ؚؠ-ىٲ-ۓۧ-ۨۻ-ۼܰ-݊ࠀ-ࠔࠛ-ࠣࠥ-ࠧࠩ-࠭ࡀ-ࡗࣤ-ࣾऀ-ःऺ-़ा-ॏ॑-ॗॢ-ॣ०-९ঁ-ঃ়া-ৄেৈৗয়-ৠਁ-ਃ਼ਾ-ੂੇੈੋ-੍ੑ੦-ੱੵઁ-ઃ઼ા-ૅે-ૉો-્ૢ-ૣ૦-૯ଁ-ଃ଼ା-ୄେୈୋ-୍ୖୗୟ-ୠ୦-୯ஂா-ூெ-ைொ-்ௗ௦-௯ఁ-ఃె-ైొ-్ౕౖౢ-ౣ౦-౯ಂಃ಼ಾ-ೄೆ-ೈೊ-್ೕೖೢ-ೣ೦-೯ംഃെ-ൈൗൢ-ൣ൦-൯ංඃ්ා-ුූෘ-ෟෲෳิ-ฺเ-ๅ๐-๙ິ-ູ່-ໍ໐-໙༘༙༠-༩༹༵༷ཁ-ཇཱ-྄྆-྇ྍ-ྗྙ-ྼ࿆က-ဩ၀-၉ၧ-ၭၱ-ၴႂ-ႍႏ-ႝ፝-፟ᜎ-ᜐᜠ-ᜰᝀ-ᝐᝲᝳក-ឲ៝០-៩᠋-᠍᠐-᠙ᤠ-ᤫᤰ-᤻ᥑ-ᥭᦰ-ᧀᧈ-ᧉ᧐-᧙ᨀ-ᨕᨠ-ᩓ᩠-᩿᩼-᪉᪐-᪙ᭆ-ᭋ᭐-᭙᭫-᭳᮰-᮹᯦-᯳ᰀ-ᰢ᱀-᱉ᱛ-ᱽ᳐-᳒ᴀ-ᶾḁ-ἕ‌‍‿⁀⁔⃐-⃥⃜⃡-⃰ⶁ-ⶖⷠ-ⷿ〡-〨゙゚Ꙁ-ꙭꙴ-꙽ꚟ꛰-꛱ꟸ-ꠀ꠆ꠋꠣ-ꠧꢀ-ꢁꢴ-꣄꣐-꣙ꣳ-ꣷ꤀-꤉ꤦ-꤭ꤰ-ꥅꦀ-ꦃ꦳-꧀ꨀ-ꨧꩀ-ꩁꩌ-ꩍ꩐-꩙ꩻꫠ-ꫩꫲ-ꫳꯀ-ꯡ꯬꯭꯰-꯹ﬠ-ﬨ︀-️︠-︦︳︴﹍-﹏０-９＿]"),Ft=/[\n\r\u2028\u2029]/,qt=/\r\n|[\n\r\u2028\u2029]/g,Ht=t.isIdentifierStart=function(t){return t<65?36===t:t<91||(t<97?95===t:t<123||t>=170&&Vt.test(String.fromCharCode(t)))},Ut=t.isIdentifierChar=function(t){return t<48?36===t:t<58||!(t<65)&&(t<91||(t<97?95===t:t<123||t>=170&&Bt.test(String.fromCharCode(t))))};function Wt(){this.line=g,this.column=o-v}function $t(){g=1,o=v=0,p=!0,Qt()}function Gt(t,n){u=o,e.locations&&(c=new Wt),f=t,Qt(),d=n,p=t.beforeExpr}function Zt(){var t,i=e.onComment&&e.locations&&new Wt,r=o,s=n.indexOf("*/",o+=2);if(-1===s&&S(o-2,"Unterminated comment"),o=s+2,e.locations)for(qt.lastIndex=r;(t=qt.exec(n))&&t.index<o;)++g,v=t.index+t[0].length;e.onComment&&e.onComment(!0,n.slice(r+2,s),r,o,i,e.locations&&new Wt)}function Xt(){for(var t=o,r=e.onComment&&e.locations&&new Wt,s=n.charCodeAt(o+=2);o<i&&10!==s&&13!==s&&8232!==s&&8233!==s;)++o,s=n.charCodeAt(o);e.onComment&&e.onComment(!1,n.slice(t+2,o),t,o,r,e.locations&&new Wt)}function Qt(){for(;o<i;){var t=n.charCodeAt(o);if(32===t)++o;else if(13===t){++o,10===(r=n.charCodeAt(o))&&++o,e.locations&&(++g,v=o)}else if(10===t||8232===t||8233===t)++o,e.locations&&(++g,v=o);else if(t>8&&t<14)++o;else if(47===t){var r;if(42===(r=n.charCodeAt(o+1)))Zt();else{if(47!==r)break;Xt()}}else if(160===t)++o;else{if(!(t>=5760&&zt.test(String.fromCharCode(t))))break;++o}}}function Kt(t){switch(t){case 46:return function(){var t=n.charCodeAt(o+1);return t>=48&&t<=57?ne(!0):(++o,Gt(ft))}();case 40:return++o,Gt(ot);case 41:return++o,Gt(ht);case 59:return++o,Gt(lt);case 44:return++o,Gt(ut);case 91:return++o,Gt(it);case 93:return++o,Gt(rt);case 123:return++o,Gt(st);case 125:return++o,Gt(at);case 58:return++o,Gt(ct);case 63:return++o,Gt(dt);case 48:var r=n.charCodeAt(o+1);if(120===r||88===r)return function(){o+=2;var t=ee(16);null==t&&S(h+2,"Expected hexadecimal number");Ht(n.charCodeAt(o))&&S(o,"Identifier directly after number");return Gt(T,t)}();case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:return ne(!1);case 34:case 39:return function(t){o++;for(var r="";;){o>=i&&S(h,"Unterminated string constant");var s=n.charCodeAt(o);if(s===t)return++o,Gt(E,r);if(92===s){s=n.charCodeAt(++o);var a=/^[0-7]+/.exec(n.slice(o,o+3));for(a&&(a=a[0]);a&&parseInt(a,8)>255;)a=a.slice(0,-1);if("0"===a&&(a=null),++o,a)b&&S(o-2,"Octal literal in strict mode"),r+=String.fromCharCode(parseInt(a,8)),o+=a.length-1;else switch(s){case 110:r+="\n";break;case 114:r+="\r";break;case 120:r+=String.fromCharCode(ie(2));break;case 117:r+=String.fromCharCode(ie(4));break;case 85:r+=String.fromCharCode(ie(8));break;case 116:r+="\t";break;case 98:r+="\b";break;case 118:r+="\v";break;case 102:r+="\f";break;case 48:r+="\0";break;case 13:10===n.charCodeAt(o)&&++o;case 10:e.locations&&(v=o,++g);break;default:r+=String.fromCharCode(s)}}else 13!==s&&10!==s&&8232!==s&&8233!==s||S(h,"Unterminated string constant"),r+=String.fromCharCode(s),++o}}(t);case 47:return function(){var t=n.charCodeAt(o+1);return p?(++o,te()):61===t?Yt(vt,2):Yt(pt,1)}();case 37:case 42:return 61===n.charCodeAt(o+1)?Yt(vt,2):Yt(Et,1);case 124:case 38:return function(t){var e=n.charCodeAt(o+1);return e===t?Yt(124===t?yt:xt,2):61===e?Yt(vt,2):Yt(124===t?wt:Ct,1)}(t);case 94:return 61===n.charCodeAt(o+1)?Yt(vt,2):Yt(bt,1);case 43:case 45:return function(t){var e=n.charCodeAt(o+1);return e===t?45==e&&62==n.charCodeAt(o+2)&&Ft.test(n.slice(m,o))?(o+=3,Xt(),Qt(),Jt()):Yt(_t,2):61===e?Yt(vt,2):Yt(At,1)}(t);case 60:case 62:return function(t){var e=n.charCodeAt(o+1),i=1;return e===t?(i=62===t&&62===n.charCodeAt(o+2)?3:2,61===n.charCodeAt(o+i)?Yt(vt,i+1):Yt(Tt,i)):33==e&&60==t&&45==n.charCodeAt(o+2)&&45==n.charCodeAt(o+3)?(o+=4,Xt(),Qt(),Jt()):(61===e&&(i=61===n.charCodeAt(o+2)?3:2),Yt(kt,i))}(t);case 61:case 33:return function(t){return 61===n.charCodeAt(o+1)?Yt(St,61===n.charCodeAt(o+2)?3:2):Yt(61===t?gt:mt,1)}(t);case 126:return Yt(mt,1)}return!1}function Jt(t){if(t?o=h+1:h=o,e.locations&&(l=new Wt),t)return te();if(o>=i)return Gt(I);var r=n.charCodeAt(o);if(Ht(r)||92===r)return se();var s=Kt(r);if(!1===s){var a=String.fromCharCode(r);if("\\"===a||Vt.test(a))return se();S(o,"Unexpected character '"+a+"'")}return s}function Yt(t,e){var i=n.slice(o,o+e);o+=e,Gt(t,i)}function te(){for(var t,e,r=o;;){o>=i&&S(r,"Unterminated regular expression");var s=n.charAt(o);if(Ft.test(s)&&S(r,"Unterminated regular expression"),t)t=!1;else{if("["===s)e=!0;else if("]"===s&&e)e=!1;else if("/"===s&&!e)break;t="\\"===s}++o}var a=n.slice(r,o);++o;var h=re();h&&!/^[gmsiy]*$/.test(h)&&S(r,"Invalid regexp flag");try{var u=new RegExp(a,h)}catch(t){t instanceof SyntaxError&&S(r,t.message),S(t)}return Gt(A,u)}function ee(t,e){for(var i=o,r=0,s=0,a=null==e?1/0:e;s<a;++s){var h,u=n.charCodeAt(o);if((h=u>=97?u-97+10:u>=65?u-65+10:u>=48&&u<=57?u-48:1/0)>=t)break;++o,r=r*t+h}return o===i||null!=e&&o-i!==e?null:r}function ne(t){var e=o,i=!1,r=48===n.charCodeAt(o);t||null!==ee(10)||S(e,"Invalid number"),46===n.charCodeAt(o)&&(++o,ee(10),i=!0);var s=n.charCodeAt(o);69!==s&&101!==s||(43!==(s=n.charCodeAt(++o))&&45!==s||++o,null===ee(10)&&S(e,"Invalid number"),i=!0),Ht(n.charCodeAt(o))&&S(o,"Identifier directly after number");var a,h=n.slice(e,o);return i?a=parseFloat(h):r&&1!==h.length?/[89]/.test(h)||b?S(e,"Invalid number"):a=parseInt(h,8):a=parseInt(h,10),Gt(T,a)}function ie(t){var e=ee(16,t);return null===e&&S(h,"Bad character escape sequence"),e}function re(){Nt=!1;for(var t,e=!0,i=o;;){var r=n.charCodeAt(o);if(Ut(r))Nt&&(t+=n.charAt(o)),++o;else{if(92!==r)break;Nt||(t=n.slice(i,o)),Nt=!0,117!=n.charCodeAt(++o)&&S(o,"Expecting Unicode escape sequence \\uXXXX"),++o;var s=ie(4),a=String.fromCharCode(s);a||S(o-1,"Invalid Unicode escape"),(e?Ht(s):Ut(s))||S(o-4,"Invalid Unicode escape"),t+=a}e=!1}return Nt?t:n.slice(i,o)}function se(){var t=re(),e=P;return!Nt&&Rt(t)&&(e=nt[t]),Gt(e,t)}function ae(){_=h,m=u,y=c,Jt()}function oe(t){if(b=t,o=h,e.locations)for(;o<v;)v=n.lastIndexOf("\n",v-2)+1,--g;Qt(),Jt()}function he(){this.type=null,this.start=h,this.end=null}function ue(){this.start=l,this.end=null,null!==r&&(this.source=r)}function le(){var t=new he;return e.locations&&(t.loc=new ue),e.directSourceFile&&(t.sourceFile=e.directSourceFile),e.ranges&&(t.range=[h,0]),t}function ce(t){var n=new he;return n.start=t.start,e.locations&&(n.loc=new ue,n.loc.start=t.loc.start),e.ranges&&(n.range=[t.range[0],0]),n}function fe(t,n){return t.type=n,t.end=m,e.locations&&(t.loc.end=y),e.ranges&&(t.range[1]=m),t}function de(t){return e.ecmaVersion>=5&&"ExpressionStatement"===t.type&&"Literal"===t.expression.type&&"use strict"===t.expression.value}function pe(t){if(f===t)return ae(),!0}function ge(){return!e.strictSemicolons&&(f===I||f===at||Ft.test(n.slice(m,h)))}function ve(){pe(lt)||ge()||me()}function _e(t){f===t?ae():me()}function me(){S(h,"Unexpected token")}function ye(t){"Identifier"!==t.type&&"MemberExpression"!==t.type&&S(t.start,"Assigning to rvalue"),b&&"Identifier"===t.type&&Dt(t.name)&&S(t.start,"Assigning to "+t.name+" in strict mode")}var xe={kind:"loop"},we={kind:"switch"};function be(){(f===pt||f===vt&&"/="==d)&&Jt(!0);var t=f,i=le();switch(t){case N:case O:ae();var r=t===N;pe(lt)||ge()?i.label=null:f!==P?me():(i.label=Re(),ve());for(var s=0;s<w.length;++s){var a=w[s];if(null==i.label||a.name===i.label.name){if(null!=a.kind&&(r||"loop"===a.kind))break;if(i.label&&r)break}}return s===w.length&&S(i.start,"Unsyntactic "+t.keyword),fe(i,r?"BreakStatement":"ContinueStatement");case D:return ae(),ve(),fe(i,"DebuggerStatement");case z:return ae(),w.push(xe),i.body=be(),w.pop(),_e(Z),i.test=Ce(),ve(),fe(i,"DoWhileStatement");case B:if(ae(),w.push(xe),_e(ot),f===lt)return ke(i,null);if(f===G){var o=le();return ae(),Ae(o,!0),fe(o,"VariableDeclaration"),1===o.declarations.length&&pe(et)?Te(i,o):ke(i,o)}o=Ee(!1,!0);return pe(et)?(ye(o),Te(i,o)):ke(i,o);case F:return ae(),Oe(i,!0);case q:return ae(),i.test=Ce(),i.consequent=be(),i.alternate=pe(j)?be():null,fe(i,"IfStatement");case H:return x||e.allowReturnOutsideFunction||S(h,"'return' outside of function"),ae(),pe(lt)||ge()?i.argument=null:(i.argument=Ee(),ve()),fe(i,"ReturnStatement");case U:ae(),i.discriminant=Ce(),i.cases=[],_e(st),w.push(we);for(var u,l;f!=at;)if(f===L||f===R){var c=f===L;u&&fe(u,"SwitchCase"),i.cases.push(u=le()),u.consequent=[],ae(),c?u.test=Ee():(l&&S(_,"Multiple default clauses"),l=!0,u.test=null),_e(ct)}else u||me(),u.consequent.push(be());return u&&fe(u,"SwitchCase"),ae(),w.pop(),fe(i,"SwitchStatement");case W:return ae(),Ft.test(n.slice(m,h))&&S(m,"Illegal newline after throw"),i.argument=Ee(),ve(),fe(i,"ThrowStatement");case $:if(ae(),i.block=Se(),i.handler=null,f===M){var p=le();ae(),_e(ot),p.param=Re(),b&&Dt(p.param.name)&&S(p.param.start,"Binding "+p.param.name+" in strict mode"),_e(ht),p.guard=null,p.body=Se(),i.handler=fe(p,"CatchClause")}return i.guardedHandlers=k,i.finalizer=pe(V)?Se():null,i.handler||i.finalizer||S(i.start,"Missing catch or finally clause"),fe(i,"TryStatement");case G:return ae(),Ae(i),ve(),fe(i,"VariableDeclaration");case Z:return ae(),i.test=Ce(),w.push(xe),i.body=be(),w.pop(),fe(i,"WhileStatement");case X:return b&&S(h,"'with' in strict mode"),ae(),i.object=Ce(),i.body=be(),fe(i,"WithStatement");case st:return Se();case lt:return ae(),fe(i,"EmptyStatement");default:var g=d,v=Ee();if(t===P&&"Identifier"===v.type&&pe(ct)){for(s=0;s<w.length;++s)w[s].name===g&&S(v.start,"Label '"+g+"' is already declared");var y=f.isLoop?"loop":f===U?"switch":null;return w.push({name:g,kind:y}),i.body=be(),w.pop(),i.label=v,fe(i,"LabeledStatement")}return i.expression=v,ve(),fe(i,"ExpressionStatement")}}function Ce(){_e(ot);var t=Ee();return _e(ht),t}function Se(t){var e,n=le(),i=!0,r=!1;for(n.body=[],_e(st);!pe(at);){var s=be();n.body.push(s),i&&t&&de(s)&&(e=r,oe(r=!0)),i=!1}return r&&!e&&oe(!1),fe(n,"BlockStatement")}function ke(t,e){return t.init=e,_e(lt),t.test=f===lt?null:Ee(),_e(lt),t.update=f===ht?null:Ee(),_e(ht),t.body=be(),w.pop(),fe(t,"ForStatement")}function Te(t,e){return t.left=e,t.right=Ee(),_e(ht),t.body=be(),w.pop(),fe(t,"ForInStatement")}function Ae(t,e){for(t.declarations=[],t.kind="var";;){var n=le();if(n.id=Re(),b&&Dt(n.id.name)&&S(n.id.start,"Binding "+n.id.name+" in strict mode"),n.init=pe(gt)?Ee(!0,e):null,t.declarations.push(fe(n,"VariableDeclarator")),!pe(ut))break}return t}function Ee(t,e){var n=Pe(e);if(!t&&f===ut){var i=ce(n);for(i.expressions=[n];pe(ut);)i.expressions.push(Pe(e));return fe(i,"SequenceExpression")}return n}function Pe(t){var e=function(t){var e=function(t){return function t(e,n,i){var r=f.binop;if(null!=r&&(!i||f!==et)&&r>n){var s=ce(e);s.left=e,s.operator=d;var a=f;ae(),s.right=t(Ie(),r,i);var o=fe(s,a===yt||a===xt?"LogicalExpression":"BinaryExpression");return t(o,n,i)}return e}(Ie(),-1,t)}(t);if(pe(dt)){var n=ce(e);return n.test=e,n.consequent=Ee(!0),_e(ct),n.alternate=Ee(!0,t),fe(n,"ConditionalExpression")}return e}(t);if(f.isAssign){var n=ce(e);return n.operator=d,n.left=e,ae(),n.right=Pe(t),ye(e),fe(n,"AssignmentExpression")}return e}function Ie(){if(f.prefix){var t=le(),e=f.isUpdate;return t.operator=d,t.prefix=!0,p=!0,ae(),t.argument=Ie(),e?ye(t.argument):b&&"delete"===t.operator&&"Identifier"===t.argument.type&&S(t.start,"Deleting local variable in strict mode"),fe(t,e?"UpdateExpression":"UnaryExpression")}for(var n=Ne(Le());f.postfix&&!ge();){(t=ce(n)).operator=d,t.prefix=!1,t.argument=n,ye(n),ae(),n=fe(t,"UpdateExpression")}return n}function Ne(t,e){var n;return pe(ft)?((n=ce(t)).object=t,n.property=Re(!0),n.computed=!1,Ne(fe(n,"MemberExpression"),e)):pe(it)?((n=ce(t)).object=t,n.property=Ee(),n.computed=!0,_e(rt),Ne(fe(n,"MemberExpression"),e)):!e&&pe(ot)?((n=ce(t)).callee=t,n.arguments=De(ht,!1),Ne(fe(n,"CallExpression"),e)):t}function Le(){switch(f){case K:var t=le();return ae(),fe(t,"ThisExpression");case P:return Re();case T:case E:case A:return(t=le()).value=d,t.raw=n.slice(h,u),ae(),fe(t,"Literal");case J:case Y:case tt:return(t=le()).value=f.atomValue,t.raw=f.keyword,ae(),fe(t,"Literal");case ot:var i=l,r=h;ae();var s=Ee();return s.start=r,s.end=u,e.locations&&(s.loc.start=i,s.loc.end=c),e.ranges&&(s.range=[r,u]),_e(ht),s;case it:t=le();return ae(),t.elements=De(rt,!0,!0),fe(t,"ArrayExpression");case st:return function(){var t=le(),n=!0,i=!1;t.properties=[],ae();for(;!pe(at);){if(n)n=!1;else if(_e(ut),e.allowTrailingCommas&&pe(at))break;var r,s={key:Me()},a=!1;if(pe(ct)?(s.value=Ee(!0),r=s.kind="init"):e.ecmaVersion>=5&&"Identifier"===s.key.type&&("get"===s.key.name||"set"===s.key.name)?(a=i=!0,r=s.kind=s.key.name,s.key=Me(),f!==ot&&me(),s.value=Oe(le(),!1)):me(),"Identifier"===s.key.type&&(b||i))for(var o=0;o<t.properties.length;++o){var h=t.properties[o];if(h.key.name===s.key.name){var u=r==h.kind||a&&"init"===h.kind||"init"===r&&("get"===h.kind||"set"===h.kind);u&&!b&&"init"===r&&"init"===h.kind&&(u=!1),u&&S(s.key.start,"Redefinition of property")}}t.properties.push(s)}return fe(t,"ObjectExpression")}();case F:t=le();return ae(),Oe(t,!1);case Q:return function(){var t=le();ae(),t.callee=Ne(Le(),!0),pe(ot)?t.arguments=De(ht,!1):t.arguments=k;return fe(t,"NewExpression")}();default:me()}}function Me(){return f===T||f===E?Le():Re(!0)}function Oe(t,e){f===P?t.id=Re():e?me():t.id=null,t.params=[];var n=!0;for(_e(ot);!pe(ht);)n?n=!1:_e(ut),t.params.push(Re());var i=x,r=w;if(x=!0,w=[],t.body=Se(!0),x=i,w=r,b||t.body.body.length&&de(t.body.body[0]))for(var s=t.id?-1:0;s<t.params.length;++s){var a=s<0?t.id:t.params[s];if((Ot(a.name)||Dt(a.name))&&S(a.start,"Defining '"+a.name+"' in strict mode"),s>=0)for(var o=0;o<s;++o)a.name===t.params[o].name&&S(a.start,"Argument name clash in strict mode")}return fe(t,e?"FunctionDeclaration":"FunctionExpression")}function De(t,n,i){for(var r=[],s=!0;!pe(t);){if(s)s=!1;else if(_e(ut),n&&e.allowTrailingCommas&&pe(t))break;i&&f===ut?r.push(null):r.push(Ee(!0))}return r}function Re(t){var i=le();return t&&"everywhere"==e.forbidReserved&&(t=!1),f===P?(!t&&(e.forbidReserved&&(3===e.ecmaVersion?Lt:Mt)(d)||b&&Ot(d))&&-1==n.slice(h,u).indexOf("\\")&&S(h,"The keyword '"+d+"' is reserved"),i.name=d):t&&f.keyword?i.name=f.keyword:me(),p=!1,ae(),fe(i,"Identifier")}},"object"==typeof t&&"object"==typeof e?c(t):(i=[t],(s="function"==typeof(r=c)?r.apply(t,i):r)===o||(e.exports=s)),p.version||(p=null));function g(t,e){return(d.acorn||p).parse(t,e)}var v={"+":"__add","-":"__subtract","*":"__multiply","/":"__divide","%":"__modulo","==":"__equals","!=":"__equals"},m={"-":"__negate","+":"__self"},x=l.each(["add","subtract","multiply","divide","modulo","equals","negate"],function(t){this["__"+t]="#"+t},{__self:function(){return this}});function w(t,e,n){var i=v[e];if(t&&t[i]){var r=t[i](n);return"!="===e?!r:r}switch(e){case"+":return t+n;case"-":return t-n;case"*":return t*n;case"/":return t/n;case"%":return t%n;case"==":return t==n;case"!=":return t!=n}}function b(t,e){var n=m[t];if(e&&e[n])return e[n]();switch(t){case"+":return+e;case"-":return-e}}function C(t,e){if(!t)return"";var n=[];function i(t){for(var e=0,i=n.length;e<i;e++){var r=n[e];if(r[0]>=t)break;t+=r[1]}return t}function r(e){return t.substring(i(e.range[0]),i(e.range[1]))}function s(e,r){for(var s=i(e.range[0]),a=i(e.range[1]),o=0,h=n.length-1;h>=0;h--)if(s>n[h][0]){o=h+1;break}n.splice(o,0,[s,r.length-a+s]),t=t.substring(0,s)+r+t.substring(a)}var o,l=(e=e||{}).url||"",c=ct.agent,f=c.versionNumber,d=!1,p=e.sourceMaps,_=e.source||t,y=/\r\n|\n|\r/gm,x=e.offset||0;if(p&&(c.chrome&&f>=30||c.webkit&&f>=537.76||c.firefox&&f>=23||c.node)){if(c.node)x-=2;else if(h&&l&&!h.location.href.indexOf(l)){var w=u.getElementsByTagName("html")[0].innerHTML;x=w.substr(0,w.indexOf(t)+1).match(y).length+1}var b=["AA"+function(t){var e="";for(t=(Math.abs(t)<<1)+(t<0?1:0);t||!e;){var n=31&t;(t>>=5)&&(n|=32),e+="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"[n]}return e}((d=x>0&&!(c.chrome&&f>=36||c.safari&&f>=600||c.firefox&&f>=40||c.node))?0:x)+"A"];b.length=(t.match(y)||[]).length+1+(d?x:0),o={version:3,file:l,names:[],mappings:b.join(";AACA"),sourceRoot:"",sources:[l],sourcesContent:[_]}}return function e(n,a){if(n){for(var o in n)if("range"!==o&&"loc"!==o){var h=n[o];if(Array.isArray(h))for(var u=0,l=h.length;u<l;u++)e(h[u],n);else h&&"object"==typeof h&&e(h,n)}switch(n.type){case"UnaryExpression":if(n.operator in m&&"Literal"!==n.argument.type){var c=r(n.argument);s(n,'$__("'+n.operator+'", '+c+")")}break;case"BinaryExpression":if(n.operator in v&&"Literal"!==n.left.type){var f=r(n.left),d=r(n.right),p=function(e,n){return t.substring(i(e.range[1]),i(n.range[0]))}(n.left,n.right),g=n.operator;s(n,"__$__("+f+","+p.replace(new RegExp("\\"+g),'"'+g+'"')+", "+d+")")}break;case"UpdateExpression":case"AssignmentExpression":var _=a&&a.type;if(!("ForStatement"===_||"BinaryExpression"===_&&/^[=!<>]/.test(a.operator)||"MemberExpression"===_&&a.computed))if("UpdateExpression"===n.type){var y=(c=r(n.argument))+" = "+(x="__$__("+c+', "'+n.operator[0]+'", 1)');n.prefix||"AssignmentExpression"!==_&&"VariableDeclarator"!==_||(r(a.left||a.id)===c&&(y=x),y=c+"; "+y),s(n,y)}else if(/^.=$/.test(n.operator)&&"Literal"!==n.left.type){f=r(n.left),d=r(n.right);var x=f+" = __$__("+f+', "'+n.operator[0]+'", '+d+")";s(n,/^\(.*\)$/.test(r(n))?"("+x+")":x)}break;case"ExportDefaultDeclaration":s({range:[n.start,n.declaration.start]},"module.exports = ");break;case"ExportNamedDeclaration":var w=n.declaration,b=n.specifiers;if(w){var C=w.declarations;C&&(C.forEach(function(t){s(t,"module.exports."+r(t))}),s({range:[n.start,w.start+w.kind.length]},""))}else if(b){var S=b.map(function(t){var e=r(t);return"module.exports."+e+" = "+e+"; "}).join("");S&&s(n,S)}}}}(g(t,{ranges:!0,preserveParens:!0,sourceType:"module"})),o&&(d&&(t=new Array(x+1).join("\n")+t),/^(inline|both)$/.test(p)&&(t+="\n//# sourceMappingURL=data:application/json;base64,"+a.btoa(unescape(encodeURIComponent(JSON.stringify(o))))),t+="\n//# sourceURL="+(l||"paperscript")),{url:l,source:_,code:t,map:o}}function S(t,e,n){ct=e;var i,r=e.getView(),s=/\btool\.\w+|\s+on(?:Key|Mouse)(?:Up|Down|Move|Drag)\b/.test(t)&&!/\bnew\s+Tool\b/.test(t)?new rt:null,a=s?s._events:[],o=["onFrame","onResize"].concat(a),h=[],c=[],f="object"==typeof t?t:C(t,n);function d(e,n){for(var i in e)!n&&/^_/.test(i)||!new RegExp("([\\b\\s\\W]|^)"+i.replace(/\$/g,"\\$")+"\\b").test(t)||(h.push(i),c.push(e[i]))}t=f.code,d({__$__:w,$__:b,paper:e,view:r,tool:s},!0),d(e),t="var module = { exports: {} }; "+t,(m=l.each(o,function(e){new RegExp("\\s+"+e+"\\b").test(t)&&(h.push(e),this.push("module.exports."+e+" = "+e+";"))},[]).join("\n"))&&(t+="\n"+m),t+="\nreturn module.exports;";var p=ct.agent;if(u&&(p.chrome||p.firefox&&p.versionNumber<40)){var g=u.createElement("script"),v=u.head||u.getElementsByTagName("head")[0];p.firefox&&(t="\n"+t),g.appendChild(u.createTextNode("document.__paperscript__ = function("+h+") {"+t+"\n}")),v.appendChild(g),i=u.__paperscript__,delete u.__paperscript__,v.removeChild(g)}else i=Function(h,t);var m,y=(m=i&&i.apply(e,c))||{};return l.each(a,function(t){var e=y[t];e&&(s[t]=e)}),r&&(y.onResize&&r.setOnResize(y.onResize),r.emit("resize",{size:r.size,delta:new _}),y.onFrame&&r.setOnFrame(y.onFrame),r.requestUpdate()),m}function k(t){if(/^text\/(?:x-|)paperscript$/.test(t.type)&&"true"!==f.getAttribute(t,"ignore")){var e=f.getAttribute(t,"canvas"),n=u.getElementById(e),i=t.src||t.getAttribute("data-src"),r=f.hasAttribute(t,"async");if(!n)throw new Error('Unable to find canvas with id "'+e+'"');var s=f.get(n.getAttribute("data-paper-scope"))||(new f).setup(n);return n.setAttribute("data-paper-scope",s._id),i?at.request({url:i,async:r,mimeType:"text/plain",onLoad:function(t){S(t,s,i)}}):S(t.innerHTML,s,t.baseURI),t.setAttribute("data-paper-ignore","true"),s}}function T(){l.each(u&&u.getElementsByTagName("script"),k)}return _.inject(x),y.inject(x),W.inject(x),h&&("complete"===u.readyState?setTimeout(T):Q.add(h,{load:T})),{compile:C,execute:S,load:function(t){return t?k(t):T()},parse:g,calculateBinary:w,calculateUnary:b}}.call(this);var ct=new(f.inject(l.exports,{Base:l,Numerical:g,Key:et,DomEvent:Q,DomElement:X,document:u,window:h,Symbol:L,PlacedSymbol:N}));return ct.agent.node&&n(4)(ct),(s="function"==typeof(r=ct)?r.call(e,n,e,t):r)===o||(t.exports=s),ct}).call(this,"object"==typeof self?self:null)},function(t,e,n){var i;
/*!
 * jQuery JavaScript Library v3.3.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2018-01-20T17:24Z
 */
/*!
 * jQuery JavaScript Library v3.3.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2018-01-20T17:24Z
 */
!function(e,n){"use strict";"object"==typeof t.exports?t.exports=e.document?n(e,!0):function(t){if(!t.document)throw new Error("jQuery requires a window with a document");return n(t)}:n(e)}("undefined"!=typeof window?window:this,function(n,r){"use strict";var s=[],a=n.document,o=Object.getPrototypeOf,h=s.slice,u=s.concat,l=s.push,c=s.indexOf,f={},d=f.toString,p=f.hasOwnProperty,g=p.toString,v=g.call(Object),_={},m=function(t){return"function"==typeof t&&"number"!=typeof t.nodeType},y=function(t){return null!=t&&t===t.window},x={type:!0,src:!0,noModule:!0};function w(t,e,n){var i,r=(e=e||a).createElement("script");if(r.text=t,n)for(i in x)n[i]&&(r[i]=n[i]);e.head.appendChild(r).parentNode.removeChild(r)}function b(t){return null==t?t+"":"object"==typeof t||"function"==typeof t?f[d.call(t)]||"object":typeof t}var C=function(t,e){return new C.fn.init(t,e)},S=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;function k(t){var e=!!t&&"length"in t&&t.length,n=b(t);return!m(t)&&!y(t)&&("array"===n||0===e||"number"==typeof e&&e>0&&e-1 in t)}C.fn=C.prototype={jquery:"3.3.1",constructor:C,length:0,toArray:function(){return h.call(this)},get:function(t){return null==t?h.call(this):t<0?this[t+this.length]:this[t]},pushStack:function(t){var e=C.merge(this.constructor(),t);return e.prevObject=this,e},each:function(t){return C.each(this,t)},map:function(t){return this.pushStack(C.map(this,function(e,n){return t.call(e,n,e)}))},slice:function(){return this.pushStack(h.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(t){var e=this.length,n=+t+(t<0?e:0);return this.pushStack(n>=0&&n<e?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:l,sort:s.sort,splice:s.splice},C.extend=C.fn.extend=function(){var t,e,n,i,r,s,a=arguments[0]||{},o=1,h=arguments.length,u=!1;for("boolean"==typeof a&&(u=a,a=arguments[o]||{},o++),"object"==typeof a||m(a)||(a={}),o===h&&(a=this,o--);o<h;o++)if(null!=(t=arguments[o]))for(e in t)n=a[e],a!==(i=t[e])&&(u&&i&&(C.isPlainObject(i)||(r=Array.isArray(i)))?(r?(r=!1,s=n&&Array.isArray(n)?n:[]):s=n&&C.isPlainObject(n)?n:{},a[e]=C.extend(u,s,i)):void 0!==i&&(a[e]=i));return a},C.extend({expando:"jQuery"+("3.3.1"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(t){throw new Error(t)},noop:function(){},isPlainObject:function(t){var e,n;return!(!t||"[object Object]"!==d.call(t))&&(!(e=o(t))||"function"==typeof(n=p.call(e,"constructor")&&e.constructor)&&g.call(n)===v)},isEmptyObject:function(t){var e;for(e in t)return!1;return!0},globalEval:function(t){w(t)},each:function(t,e){var n,i=0;if(k(t))for(n=t.length;i<n&&!1!==e.call(t[i],i,t[i]);i++);else for(i in t)if(!1===e.call(t[i],i,t[i]))break;return t},trim:function(t){return null==t?"":(t+"").replace(S,"")},makeArray:function(t,e){var n=e||[];return null!=t&&(k(Object(t))?C.merge(n,"string"==typeof t?[t]:t):l.call(n,t)),n},inArray:function(t,e,n){return null==e?-1:c.call(e,t,n)},merge:function(t,e){for(var n=+e.length,i=0,r=t.length;i<n;i++)t[r++]=e[i];return t.length=r,t},grep:function(t,e,n){for(var i=[],r=0,s=t.length,a=!n;r<s;r++)!e(t[r],r)!==a&&i.push(t[r]);return i},map:function(t,e,n){var i,r,s=0,a=[];if(k(t))for(i=t.length;s<i;s++)null!=(r=e(t[s],s,n))&&a.push(r);else for(s in t)null!=(r=e(t[s],s,n))&&a.push(r);return u.apply([],a)},guid:1,support:_}),"function"==typeof Symbol&&(C.fn[Symbol.iterator]=s[Symbol.iterator]),C.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(t,e){f["[object "+e+"]"]=e.toLowerCase()});var T=
/*!
 * Sizzle CSS Selector Engine v2.3.3
 * https://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2016-08-08
 */
function(t){var e,n,i,r,s,a,o,h,u,l,c,f,d,p,g,v,_,m,y,x="sizzle"+1*new Date,w=t.document,b=0,C=0,S=at(),k=at(),T=at(),A=function(t,e){return t===e&&(c=!0),0},E={}.hasOwnProperty,P=[],I=P.pop,N=P.push,L=P.push,M=P.slice,O=function(t,e){for(var n=0,i=t.length;n<i;n++)if(t[n]===e)return n;return-1},D="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",R="[\\x20\\t\\r\\n\\f]",z="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",j="\\["+R+"*("+z+")(?:"+R+"*([*^$|!~]?=)"+R+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+z+"))|)"+R+"*\\]",V=":("+z+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+j+")*)|.*)\\)|)",B=new RegExp(R+"+","g"),F=new RegExp("^"+R+"+|((?:^|[^\\\\])(?:\\\\.)*)"+R+"+$","g"),q=new RegExp("^"+R+"*,"+R+"*"),H=new RegExp("^"+R+"*([>+~]|"+R+")"+R+"*"),U=new RegExp("="+R+"*([^\\]'\"]*?)"+R+"*\\]","g"),W=new RegExp(V),$=new RegExp("^"+z+"$"),G={ID:new RegExp("^#("+z+")"),CLASS:new RegExp("^\\.("+z+")"),TAG:new RegExp("^("+z+"|[*])"),ATTR:new RegExp("^"+j),PSEUDO:new RegExp("^"+V),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+R+"*(even|odd|(([+-]|)(\\d*)n|)"+R+"*(?:([+-]|)"+R+"*(\\d+)|))"+R+"*\\)|)","i"),bool:new RegExp("^(?:"+D+")$","i"),needsContext:new RegExp("^"+R+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+R+"*((?:-\\d)?\\d*)"+R+"*\\)|)(?=[^-]|$)","i")},Z=/^(?:input|select|textarea|button)$/i,X=/^h\d$/i,Q=/^[^{]+\{\s*\[native \w/,K=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,J=/[+~]/,Y=new RegExp("\\\\([\\da-f]{1,6}"+R+"?|("+R+")|.)","ig"),tt=function(t,e,n){var i="0x"+e-65536;return i!=i||n?e:i<0?String.fromCharCode(i+65536):String.fromCharCode(i>>10|55296,1023&i|56320)},et=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,nt=function(t,e){return e?"\0"===t?"�":t.slice(0,-1)+"\\"+t.charCodeAt(t.length-1).toString(16)+" ":"\\"+t},it=function(){f()},rt=mt(function(t){return!0===t.disabled&&("form"in t||"label"in t)},{dir:"parentNode",next:"legend"});try{L.apply(P=M.call(w.childNodes),w.childNodes),P[w.childNodes.length].nodeType}catch(t){L={apply:P.length?function(t,e){N.apply(t,M.call(e))}:function(t,e){for(var n=t.length,i=0;t[n++]=e[i++];);t.length=n-1}}}function st(t,e,i,r){var s,o,u,l,c,p,_,m=e&&e.ownerDocument,b=e?e.nodeType:9;if(i=i||[],"string"!=typeof t||!t||1!==b&&9!==b&&11!==b)return i;if(!r&&((e?e.ownerDocument||e:w)!==d&&f(e),e=e||d,g)){if(11!==b&&(c=K.exec(t)))if(s=c[1]){if(9===b){if(!(u=e.getElementById(s)))return i;if(u.id===s)return i.push(u),i}else if(m&&(u=m.getElementById(s))&&y(e,u)&&u.id===s)return i.push(u),i}else{if(c[2])return L.apply(i,e.getElementsByTagName(t)),i;if((s=c[3])&&n.getElementsByClassName&&e.getElementsByClassName)return L.apply(i,e.getElementsByClassName(s)),i}if(n.qsa&&!T[t+" "]&&(!v||!v.test(t))){if(1!==b)m=e,_=t;else if("object"!==e.nodeName.toLowerCase()){for((l=e.getAttribute("id"))?l=l.replace(et,nt):e.setAttribute("id",l=x),o=(p=a(t)).length;o--;)p[o]="#"+l+" "+_t(p[o]);_=p.join(","),m=J.test(t)&&gt(e.parentNode)||e}if(_)try{return L.apply(i,m.querySelectorAll(_)),i}catch(t){}finally{l===x&&e.removeAttribute("id")}}}return h(t.replace(F,"$1"),e,i,r)}function at(){var t=[];return function e(n,r){return t.push(n+" ")>i.cacheLength&&delete e[t.shift()],e[n+" "]=r}}function ot(t){return t[x]=!0,t}function ht(t){var e=d.createElement("fieldset");try{return!!t(e)}catch(t){return!1}finally{e.parentNode&&e.parentNode.removeChild(e),e=null}}function ut(t,e){for(var n=t.split("|"),r=n.length;r--;)i.attrHandle[n[r]]=e}function lt(t,e){var n=e&&t,i=n&&1===t.nodeType&&1===e.nodeType&&t.sourceIndex-e.sourceIndex;if(i)return i;if(n)for(;n=n.nextSibling;)if(n===e)return-1;return t?1:-1}function ct(t){return function(e){return"input"===e.nodeName.toLowerCase()&&e.type===t}}function ft(t){return function(e){var n=e.nodeName.toLowerCase();return("input"===n||"button"===n)&&e.type===t}}function dt(t){return function(e){return"form"in e?e.parentNode&&!1===e.disabled?"label"in e?"label"in e.parentNode?e.parentNode.disabled===t:e.disabled===t:e.isDisabled===t||e.isDisabled!==!t&&rt(e)===t:e.disabled===t:"label"in e&&e.disabled===t}}function pt(t){return ot(function(e){return e=+e,ot(function(n,i){for(var r,s=t([],n.length,e),a=s.length;a--;)n[r=s[a]]&&(n[r]=!(i[r]=n[r]))})})}function gt(t){return t&&void 0!==t.getElementsByTagName&&t}for(e in n=st.support={},s=st.isXML=function(t){var e=t&&(t.ownerDocument||t).documentElement;return!!e&&"HTML"!==e.nodeName},f=st.setDocument=function(t){var e,r,a=t?t.ownerDocument||t:w;return a!==d&&9===a.nodeType&&a.documentElement?(p=(d=a).documentElement,g=!s(d),w!==d&&(r=d.defaultView)&&r.top!==r&&(r.addEventListener?r.addEventListener("unload",it,!1):r.attachEvent&&r.attachEvent("onunload",it)),n.attributes=ht(function(t){return t.className="i",!t.getAttribute("className")}),n.getElementsByTagName=ht(function(t){return t.appendChild(d.createComment("")),!t.getElementsByTagName("*").length}),n.getElementsByClassName=Q.test(d.getElementsByClassName),n.getById=ht(function(t){return p.appendChild(t).id=x,!d.getElementsByName||!d.getElementsByName(x).length}),n.getById?(i.filter.ID=function(t){var e=t.replace(Y,tt);return function(t){return t.getAttribute("id")===e}},i.find.ID=function(t,e){if(void 0!==e.getElementById&&g){var n=e.getElementById(t);return n?[n]:[]}}):(i.filter.ID=function(t){var e=t.replace(Y,tt);return function(t){var n=void 0!==t.getAttributeNode&&t.getAttributeNode("id");return n&&n.value===e}},i.find.ID=function(t,e){if(void 0!==e.getElementById&&g){var n,i,r,s=e.getElementById(t);if(s){if((n=s.getAttributeNode("id"))&&n.value===t)return[s];for(r=e.getElementsByName(t),i=0;s=r[i++];)if((n=s.getAttributeNode("id"))&&n.value===t)return[s]}return[]}}),i.find.TAG=n.getElementsByTagName?function(t,e){return void 0!==e.getElementsByTagName?e.getElementsByTagName(t):n.qsa?e.querySelectorAll(t):void 0}:function(t,e){var n,i=[],r=0,s=e.getElementsByTagName(t);if("*"===t){for(;n=s[r++];)1===n.nodeType&&i.push(n);return i}return s},i.find.CLASS=n.getElementsByClassName&&function(t,e){if(void 0!==e.getElementsByClassName&&g)return e.getElementsByClassName(t)},_=[],v=[],(n.qsa=Q.test(d.querySelectorAll))&&(ht(function(t){p.appendChild(t).innerHTML="<a id='"+x+"'></a><select id='"+x+"-\r\\' msallowcapture=''><option selected=''></option></select>",t.querySelectorAll("[msallowcapture^='']").length&&v.push("[*^$]="+R+"*(?:''|\"\")"),t.querySelectorAll("[selected]").length||v.push("\\["+R+"*(?:value|"+D+")"),t.querySelectorAll("[id~="+x+"-]").length||v.push("~="),t.querySelectorAll(":checked").length||v.push(":checked"),t.querySelectorAll("a#"+x+"+*").length||v.push(".#.+[+~]")}),ht(function(t){t.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var e=d.createElement("input");e.setAttribute("type","hidden"),t.appendChild(e).setAttribute("name","D"),t.querySelectorAll("[name=d]").length&&v.push("name"+R+"*[*^$|!~]?="),2!==t.querySelectorAll(":enabled").length&&v.push(":enabled",":disabled"),p.appendChild(t).disabled=!0,2!==t.querySelectorAll(":disabled").length&&v.push(":enabled",":disabled"),t.querySelectorAll("*,:x"),v.push(",.*:")})),(n.matchesSelector=Q.test(m=p.matches||p.webkitMatchesSelector||p.mozMatchesSelector||p.oMatchesSelector||p.msMatchesSelector))&&ht(function(t){n.disconnectedMatch=m.call(t,"*"),m.call(t,"[s!='']:x"),_.push("!=",V)}),v=v.length&&new RegExp(v.join("|")),_=_.length&&new RegExp(_.join("|")),e=Q.test(p.compareDocumentPosition),y=e||Q.test(p.contains)?function(t,e){var n=9===t.nodeType?t.documentElement:t,i=e&&e.parentNode;return t===i||!(!i||1!==i.nodeType||!(n.contains?n.contains(i):t.compareDocumentPosition&&16&t.compareDocumentPosition(i)))}:function(t,e){if(e)for(;e=e.parentNode;)if(e===t)return!0;return!1},A=e?function(t,e){if(t===e)return c=!0,0;var i=!t.compareDocumentPosition-!e.compareDocumentPosition;return i||(1&(i=(t.ownerDocument||t)===(e.ownerDocument||e)?t.compareDocumentPosition(e):1)||!n.sortDetached&&e.compareDocumentPosition(t)===i?t===d||t.ownerDocument===w&&y(w,t)?-1:e===d||e.ownerDocument===w&&y(w,e)?1:l?O(l,t)-O(l,e):0:4&i?-1:1)}:function(t,e){if(t===e)return c=!0,0;var n,i=0,r=t.parentNode,s=e.parentNode,a=[t],o=[e];if(!r||!s)return t===d?-1:e===d?1:r?-1:s?1:l?O(l,t)-O(l,e):0;if(r===s)return lt(t,e);for(n=t;n=n.parentNode;)a.unshift(n);for(n=e;n=n.parentNode;)o.unshift(n);for(;a[i]===o[i];)i++;return i?lt(a[i],o[i]):a[i]===w?-1:o[i]===w?1:0},d):d},st.matches=function(t,e){return st(t,null,null,e)},st.matchesSelector=function(t,e){if((t.ownerDocument||t)!==d&&f(t),e=e.replace(U,"='$1']"),n.matchesSelector&&g&&!T[e+" "]&&(!_||!_.test(e))&&(!v||!v.test(e)))try{var i=m.call(t,e);if(i||n.disconnectedMatch||t.document&&11!==t.document.nodeType)return i}catch(t){}return st(e,d,null,[t]).length>0},st.contains=function(t,e){return(t.ownerDocument||t)!==d&&f(t),y(t,e)},st.attr=function(t,e){(t.ownerDocument||t)!==d&&f(t);var r=i.attrHandle[e.toLowerCase()],s=r&&E.call(i.attrHandle,e.toLowerCase())?r(t,e,!g):void 0;return void 0!==s?s:n.attributes||!g?t.getAttribute(e):(s=t.getAttributeNode(e))&&s.specified?s.value:null},st.escape=function(t){return(t+"").replace(et,nt)},st.error=function(t){throw new Error("Syntax error, unrecognized expression: "+t)},st.uniqueSort=function(t){var e,i=[],r=0,s=0;if(c=!n.detectDuplicates,l=!n.sortStable&&t.slice(0),t.sort(A),c){for(;e=t[s++];)e===t[s]&&(r=i.push(s));for(;r--;)t.splice(i[r],1)}return l=null,t},r=st.getText=function(t){var e,n="",i=0,s=t.nodeType;if(s){if(1===s||9===s||11===s){if("string"==typeof t.textContent)return t.textContent;for(t=t.firstChild;t;t=t.nextSibling)n+=r(t)}else if(3===s||4===s)return t.nodeValue}else for(;e=t[i++];)n+=r(e);return n},(i=st.selectors={cacheLength:50,createPseudo:ot,match:G,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){return t[1]=t[1].replace(Y,tt),t[3]=(t[3]||t[4]||t[5]||"").replace(Y,tt),"~="===t[2]&&(t[3]=" "+t[3]+" "),t.slice(0,4)},CHILD:function(t){return t[1]=t[1].toLowerCase(),"nth"===t[1].slice(0,3)?(t[3]||st.error(t[0]),t[4]=+(t[4]?t[5]+(t[6]||1):2*("even"===t[3]||"odd"===t[3])),t[5]=+(t[7]+t[8]||"odd"===t[3])):t[3]&&st.error(t[0]),t},PSEUDO:function(t){var e,n=!t[6]&&t[2];return G.CHILD.test(t[0])?null:(t[3]?t[2]=t[4]||t[5]||"":n&&W.test(n)&&(e=a(n,!0))&&(e=n.indexOf(")",n.length-e)-n.length)&&(t[0]=t[0].slice(0,e),t[2]=n.slice(0,e)),t.slice(0,3))}},filter:{TAG:function(t){var e=t.replace(Y,tt).toLowerCase();return"*"===t?function(){return!0}:function(t){return t.nodeName&&t.nodeName.toLowerCase()===e}},CLASS:function(t){var e=S[t+" "];return e||(e=new RegExp("(^|"+R+")"+t+"("+R+"|$)"))&&S(t,function(t){return e.test("string"==typeof t.className&&t.className||void 0!==t.getAttribute&&t.getAttribute("class")||"")})},ATTR:function(t,e,n){return function(i){var r=st.attr(i,t);return null==r?"!="===e:!e||(r+="","="===e?r===n:"!="===e?r!==n:"^="===e?n&&0===r.indexOf(n):"*="===e?n&&r.indexOf(n)>-1:"$="===e?n&&r.slice(-n.length)===n:"~="===e?(" "+r.replace(B," ")+" ").indexOf(n)>-1:"|="===e&&(r===n||r.slice(0,n.length+1)===n+"-"))}},CHILD:function(t,e,n,i,r){var s="nth"!==t.slice(0,3),a="last"!==t.slice(-4),o="of-type"===e;return 1===i&&0===r?function(t){return!!t.parentNode}:function(e,n,h){var u,l,c,f,d,p,g=s!==a?"nextSibling":"previousSibling",v=e.parentNode,_=o&&e.nodeName.toLowerCase(),m=!h&&!o,y=!1;if(v){if(s){for(;g;){for(f=e;f=f[g];)if(o?f.nodeName.toLowerCase()===_:1===f.nodeType)return!1;p=g="only"===t&&!p&&"nextSibling"}return!0}if(p=[a?v.firstChild:v.lastChild],a&&m){for(y=(d=(u=(l=(c=(f=v)[x]||(f[x]={}))[f.uniqueID]||(c[f.uniqueID]={}))[t]||[])[0]===b&&u[1])&&u[2],f=d&&v.childNodes[d];f=++d&&f&&f[g]||(y=d=0)||p.pop();)if(1===f.nodeType&&++y&&f===e){l[t]=[b,d,y];break}}else if(m&&(y=d=(u=(l=(c=(f=e)[x]||(f[x]={}))[f.uniqueID]||(c[f.uniqueID]={}))[t]||[])[0]===b&&u[1]),!1===y)for(;(f=++d&&f&&f[g]||(y=d=0)||p.pop())&&((o?f.nodeName.toLowerCase()!==_:1!==f.nodeType)||!++y||(m&&((l=(c=f[x]||(f[x]={}))[f.uniqueID]||(c[f.uniqueID]={}))[t]=[b,y]),f!==e)););return(y-=r)===i||y%i==0&&y/i>=0}}},PSEUDO:function(t,e){var n,r=i.pseudos[t]||i.setFilters[t.toLowerCase()]||st.error("unsupported pseudo: "+t);return r[x]?r(e):r.length>1?(n=[t,t,"",e],i.setFilters.hasOwnProperty(t.toLowerCase())?ot(function(t,n){for(var i,s=r(t,e),a=s.length;a--;)t[i=O(t,s[a])]=!(n[i]=s[a])}):function(t){return r(t,0,n)}):r}},pseudos:{not:ot(function(t){var e=[],n=[],i=o(t.replace(F,"$1"));return i[x]?ot(function(t,e,n,r){for(var s,a=i(t,null,r,[]),o=t.length;o--;)(s=a[o])&&(t[o]=!(e[o]=s))}):function(t,r,s){return e[0]=t,i(e,null,s,n),e[0]=null,!n.pop()}}),has:ot(function(t){return function(e){return st(t,e).length>0}}),contains:ot(function(t){return t=t.replace(Y,tt),function(e){return(e.textContent||e.innerText||r(e)).indexOf(t)>-1}}),lang:ot(function(t){return $.test(t||"")||st.error("unsupported lang: "+t),t=t.replace(Y,tt).toLowerCase(),function(e){var n;do{if(n=g?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return(n=n.toLowerCase())===t||0===n.indexOf(t+"-")}while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var n=t.location&&t.location.hash;return n&&n.slice(1)===e.id},root:function(t){return t===p},focus:function(t){return t===d.activeElement&&(!d.hasFocus||d.hasFocus())&&!!(t.type||t.href||~t.tabIndex)},enabled:dt(!1),disabled:dt(!0),checked:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&!!t.checked||"option"===e&&!!t.selected},selected:function(t){return t.parentNode&&t.parentNode.selectedIndex,!0===t.selected},empty:function(t){for(t=t.firstChild;t;t=t.nextSibling)if(t.nodeType<6)return!1;return!0},parent:function(t){return!i.pseudos.empty(t)},header:function(t){return X.test(t.nodeName)},input:function(t){return Z.test(t.nodeName)},button:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&"button"===t.type||"button"===e},text:function(t){var e;return"input"===t.nodeName.toLowerCase()&&"text"===t.type&&(null==(e=t.getAttribute("type"))||"text"===e.toLowerCase())},first:pt(function(){return[0]}),last:pt(function(t,e){return[e-1]}),eq:pt(function(t,e,n){return[n<0?n+e:n]}),even:pt(function(t,e){for(var n=0;n<e;n+=2)t.push(n);return t}),odd:pt(function(t,e){for(var n=1;n<e;n+=2)t.push(n);return t}),lt:pt(function(t,e,n){for(var i=n<0?n+e:n;--i>=0;)t.push(i);return t}),gt:pt(function(t,e,n){for(var i=n<0?n+e:n;++i<e;)t.push(i);return t})}}).pseudos.nth=i.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})i.pseudos[e]=ct(e);for(e in{submit:!0,reset:!0})i.pseudos[e]=ft(e);function vt(){}function _t(t){for(var e=0,n=t.length,i="";e<n;e++)i+=t[e].value;return i}function mt(t,e,n){var i=e.dir,r=e.next,s=r||i,a=n&&"parentNode"===s,o=C++;return e.first?function(e,n,r){for(;e=e[i];)if(1===e.nodeType||a)return t(e,n,r);return!1}:function(e,n,h){var u,l,c,f=[b,o];if(h){for(;e=e[i];)if((1===e.nodeType||a)&&t(e,n,h))return!0}else for(;e=e[i];)if(1===e.nodeType||a)if(l=(c=e[x]||(e[x]={}))[e.uniqueID]||(c[e.uniqueID]={}),r&&r===e.nodeName.toLowerCase())e=e[i]||e;else{if((u=l[s])&&u[0]===b&&u[1]===o)return f[2]=u[2];if(l[s]=f,f[2]=t(e,n,h))return!0}return!1}}function yt(t){return t.length>1?function(e,n,i){for(var r=t.length;r--;)if(!t[r](e,n,i))return!1;return!0}:t[0]}function xt(t,e,n,i,r){for(var s,a=[],o=0,h=t.length,u=null!=e;o<h;o++)(s=t[o])&&(n&&!n(s,i,r)||(a.push(s),u&&e.push(o)));return a}function wt(t,e,n,i,r,s){return i&&!i[x]&&(i=wt(i)),r&&!r[x]&&(r=wt(r,s)),ot(function(s,a,o,h){var u,l,c,f=[],d=[],p=a.length,g=s||function(t,e,n){for(var i=0,r=e.length;i<r;i++)st(t,e[i],n);return n}(e||"*",o.nodeType?[o]:o,[]),v=!t||!s&&e?g:xt(g,f,t,o,h),_=n?r||(s?t:p||i)?[]:a:v;if(n&&n(v,_,o,h),i)for(u=xt(_,d),i(u,[],o,h),l=u.length;l--;)(c=u[l])&&(_[d[l]]=!(v[d[l]]=c));if(s){if(r||t){if(r){for(u=[],l=_.length;l--;)(c=_[l])&&u.push(v[l]=c);r(null,_=[],u,h)}for(l=_.length;l--;)(c=_[l])&&(u=r?O(s,c):f[l])>-1&&(s[u]=!(a[u]=c))}}else _=xt(_===a?_.splice(p,_.length):_),r?r(null,a,_,h):L.apply(a,_)})}function bt(t){for(var e,n,r,s=t.length,a=i.relative[t[0].type],o=a||i.relative[" "],h=a?1:0,l=mt(function(t){return t===e},o,!0),c=mt(function(t){return O(e,t)>-1},o,!0),f=[function(t,n,i){var r=!a&&(i||n!==u)||((e=n).nodeType?l(t,n,i):c(t,n,i));return e=null,r}];h<s;h++)if(n=i.relative[t[h].type])f=[mt(yt(f),n)];else{if((n=i.filter[t[h].type].apply(null,t[h].matches))[x]){for(r=++h;r<s&&!i.relative[t[r].type];r++);return wt(h>1&&yt(f),h>1&&_t(t.slice(0,h-1).concat({value:" "===t[h-2].type?"*":""})).replace(F,"$1"),n,h<r&&bt(t.slice(h,r)),r<s&&bt(t=t.slice(r)),r<s&&_t(t))}f.push(n)}return yt(f)}return vt.prototype=i.filters=i.pseudos,i.setFilters=new vt,a=st.tokenize=function(t,e){var n,r,s,a,o,h,u,l=k[t+" "];if(l)return e?0:l.slice(0);for(o=t,h=[],u=i.preFilter;o;){for(a in n&&!(r=q.exec(o))||(r&&(o=o.slice(r[0].length)||o),h.push(s=[])),n=!1,(r=H.exec(o))&&(n=r.shift(),s.push({value:n,type:r[0].replace(F," ")}),o=o.slice(n.length)),i.filter)!(r=G[a].exec(o))||u[a]&&!(r=u[a](r))||(n=r.shift(),s.push({value:n,type:a,matches:r}),o=o.slice(n.length));if(!n)break}return e?o.length:o?st.error(t):k(t,h).slice(0)},o=st.compile=function(t,e){var n,r=[],s=[],o=T[t+" "];if(!o){for(e||(e=a(t)),n=e.length;n--;)(o=bt(e[n]))[x]?r.push(o):s.push(o);(o=T(t,function(t,e){var n=e.length>0,r=t.length>0,s=function(s,a,o,h,l){var c,p,v,_=0,m="0",y=s&&[],x=[],w=u,C=s||r&&i.find.TAG("*",l),S=b+=null==w?1:Math.random()||.1,k=C.length;for(l&&(u=a===d||a||l);m!==k&&null!=(c=C[m]);m++){if(r&&c){for(p=0,a||c.ownerDocument===d||(f(c),o=!g);v=t[p++];)if(v(c,a||d,o)){h.push(c);break}l&&(b=S)}n&&((c=!v&&c)&&_--,s&&y.push(c))}if(_+=m,n&&m!==_){for(p=0;v=e[p++];)v(y,x,a,o);if(s){if(_>0)for(;m--;)y[m]||x[m]||(x[m]=I.call(h));x=xt(x)}L.apply(h,x),l&&!s&&x.length>0&&_+e.length>1&&st.uniqueSort(h)}return l&&(b=S,u=w),y};return n?ot(s):s}(s,r))).selector=t}return o},h=st.select=function(t,e,n,r){var s,h,u,l,c,f="function"==typeof t&&t,d=!r&&a(t=f.selector||t);if(n=n||[],1===d.length){if((h=d[0]=d[0].slice(0)).length>2&&"ID"===(u=h[0]).type&&9===e.nodeType&&g&&i.relative[h[1].type]){if(!(e=(i.find.ID(u.matches[0].replace(Y,tt),e)||[])[0]))return n;f&&(e=e.parentNode),t=t.slice(h.shift().value.length)}for(s=G.needsContext.test(t)?0:h.length;s--&&(u=h[s],!i.relative[l=u.type]);)if((c=i.find[l])&&(r=c(u.matches[0].replace(Y,tt),J.test(h[0].type)&&gt(e.parentNode)||e))){if(h.splice(s,1),!(t=r.length&&_t(h)))return L.apply(n,r),n;break}}return(f||o(t,d))(r,e,!g,n,!e||J.test(t)&&gt(e.parentNode)||e),n},n.sortStable=x.split("").sort(A).join("")===x,n.detectDuplicates=!!c,f(),n.sortDetached=ht(function(t){return 1&t.compareDocumentPosition(d.createElement("fieldset"))}),ht(function(t){return t.innerHTML="<a href='#'></a>","#"===t.firstChild.getAttribute("href")})||ut("type|href|height|width",function(t,e,n){if(!n)return t.getAttribute(e,"type"===e.toLowerCase()?1:2)}),n.attributes&&ht(function(t){return t.innerHTML="<input/>",t.firstChild.setAttribute("value",""),""===t.firstChild.getAttribute("value")})||ut("value",function(t,e,n){if(!n&&"input"===t.nodeName.toLowerCase())return t.defaultValue}),ht(function(t){return null==t.getAttribute("disabled")})||ut(D,function(t,e,n){var i;if(!n)return!0===t[e]?e.toLowerCase():(i=t.getAttributeNode(e))&&i.specified?i.value:null}),st}(n);C.find=T,C.expr=T.selectors,C.expr[":"]=C.expr.pseudos,C.uniqueSort=C.unique=T.uniqueSort,C.text=T.getText,C.isXMLDoc=T.isXML,C.contains=T.contains,C.escapeSelector=T.escape;var A=function(t,e,n){for(var i=[],r=void 0!==n;(t=t[e])&&9!==t.nodeType;)if(1===t.nodeType){if(r&&C(t).is(n))break;i.push(t)}return i},E=function(t,e){for(var n=[];t;t=t.nextSibling)1===t.nodeType&&t!==e&&n.push(t);return n},P=C.expr.match.needsContext;function I(t,e){return t.nodeName&&t.nodeName.toLowerCase()===e.toLowerCase()}var N=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function L(t,e,n){return m(e)?C.grep(t,function(t,i){return!!e.call(t,i,t)!==n}):e.nodeType?C.grep(t,function(t){return t===e!==n}):"string"!=typeof e?C.grep(t,function(t){return c.call(e,t)>-1!==n}):C.filter(e,t,n)}C.filter=function(t,e,n){var i=e[0];return n&&(t=":not("+t+")"),1===e.length&&1===i.nodeType?C.find.matchesSelector(i,t)?[i]:[]:C.find.matches(t,C.grep(e,function(t){return 1===t.nodeType}))},C.fn.extend({find:function(t){var e,n,i=this.length,r=this;if("string"!=typeof t)return this.pushStack(C(t).filter(function(){for(e=0;e<i;e++)if(C.contains(r[e],this))return!0}));for(n=this.pushStack([]),e=0;e<i;e++)C.find(t,r[e],n);return i>1?C.uniqueSort(n):n},filter:function(t){return this.pushStack(L(this,t||[],!1))},not:function(t){return this.pushStack(L(this,t||[],!0))},is:function(t){return!!L(this,"string"==typeof t&&P.test(t)?C(t):t||[],!1).length}});var M,O=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(C.fn.init=function(t,e,n){var i,r;if(!t)return this;if(n=n||M,"string"==typeof t){if(!(i="<"===t[0]&&">"===t[t.length-1]&&t.length>=3?[null,t,null]:O.exec(t))||!i[1]&&e)return!e||e.jquery?(e||n).find(t):this.constructor(e).find(t);if(i[1]){if(e=e instanceof C?e[0]:e,C.merge(this,C.parseHTML(i[1],e&&e.nodeType?e.ownerDocument||e:a,!0)),N.test(i[1])&&C.isPlainObject(e))for(i in e)m(this[i])?this[i](e[i]):this.attr(i,e[i]);return this}return(r=a.getElementById(i[2]))&&(this[0]=r,this.length=1),this}return t.nodeType?(this[0]=t,this.length=1,this):m(t)?void 0!==n.ready?n.ready(t):t(C):C.makeArray(t,this)}).prototype=C.fn,M=C(a);var D=/^(?:parents|prev(?:Until|All))/,R={children:!0,contents:!0,next:!0,prev:!0};function z(t,e){for(;(t=t[e])&&1!==t.nodeType;);return t}C.fn.extend({has:function(t){var e=C(t,this),n=e.length;return this.filter(function(){for(var t=0;t<n;t++)if(C.contains(this,e[t]))return!0})},closest:function(t,e){var n,i=0,r=this.length,s=[],a="string"!=typeof t&&C(t);if(!P.test(t))for(;i<r;i++)for(n=this[i];n&&n!==e;n=n.parentNode)if(n.nodeType<11&&(a?a.index(n)>-1:1===n.nodeType&&C.find.matchesSelector(n,t))){s.push(n);break}return this.pushStack(s.length>1?C.uniqueSort(s):s)},index:function(t){return t?"string"==typeof t?c.call(C(t),this[0]):c.call(this,t.jquery?t[0]:t):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,e){return this.pushStack(C.uniqueSort(C.merge(this.get(),C(t,e))))},addBack:function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}}),C.each({parent:function(t){var e=t.parentNode;return e&&11!==e.nodeType?e:null},parents:function(t){return A(t,"parentNode")},parentsUntil:function(t,e,n){return A(t,"parentNode",n)},next:function(t){return z(t,"nextSibling")},prev:function(t){return z(t,"previousSibling")},nextAll:function(t){return A(t,"nextSibling")},prevAll:function(t){return A(t,"previousSibling")},nextUntil:function(t,e,n){return A(t,"nextSibling",n)},prevUntil:function(t,e,n){return A(t,"previousSibling",n)},siblings:function(t){return E((t.parentNode||{}).firstChild,t)},children:function(t){return E(t.firstChild)},contents:function(t){return I(t,"iframe")?t.contentDocument:(I(t,"template")&&(t=t.content||t),C.merge([],t.childNodes))}},function(t,e){C.fn[t]=function(n,i){var r=C.map(this,e,n);return"Until"!==t.slice(-5)&&(i=n),i&&"string"==typeof i&&(r=C.filter(i,r)),this.length>1&&(R[t]||C.uniqueSort(r),D.test(t)&&r.reverse()),this.pushStack(r)}});var j=/[^\x20\t\r\n\f]+/g;function V(t){return t}function B(t){throw t}function F(t,e,n,i){var r;try{t&&m(r=t.promise)?r.call(t).done(e).fail(n):t&&m(r=t.then)?r.call(t,e,n):e.apply(void 0,[t].slice(i))}catch(t){n.apply(void 0,[t])}}C.Callbacks=function(t){t="string"==typeof t?function(t){var e={};return C.each(t.match(j)||[],function(t,n){e[n]=!0}),e}(t):C.extend({},t);var e,n,i,r,s=[],a=[],o=-1,h=function(){for(r=r||t.once,i=e=!0;a.length;o=-1)for(n=a.shift();++o<s.length;)!1===s[o].apply(n[0],n[1])&&t.stopOnFalse&&(o=s.length,n=!1);t.memory||(n=!1),e=!1,r&&(s=n?[]:"")},u={add:function(){return s&&(n&&!e&&(o=s.length-1,a.push(n)),function e(n){C.each(n,function(n,i){m(i)?t.unique&&u.has(i)||s.push(i):i&&i.length&&"string"!==b(i)&&e(i)})}(arguments),n&&!e&&h()),this},remove:function(){return C.each(arguments,function(t,e){for(var n;(n=C.inArray(e,s,n))>-1;)s.splice(n,1),n<=o&&o--}),this},has:function(t){return t?C.inArray(t,s)>-1:s.length>0},empty:function(){return s&&(s=[]),this},disable:function(){return r=a=[],s=n="",this},disabled:function(){return!s},lock:function(){return r=a=[],n||e||(s=n=""),this},locked:function(){return!!r},fireWith:function(t,n){return r||(n=[t,(n=n||[]).slice?n.slice():n],a.push(n),e||h()),this},fire:function(){return u.fireWith(this,arguments),this},fired:function(){return!!i}};return u},C.extend({Deferred:function(t){var e=[["notify","progress",C.Callbacks("memory"),C.Callbacks("memory"),2],["resolve","done",C.Callbacks("once memory"),C.Callbacks("once memory"),0,"resolved"],["reject","fail",C.Callbacks("once memory"),C.Callbacks("once memory"),1,"rejected"]],i="pending",r={state:function(){return i},always:function(){return s.done(arguments).fail(arguments),this},catch:function(t){return r.then(null,t)},pipe:function(){var t=arguments;return C.Deferred(function(n){C.each(e,function(e,i){var r=m(t[i[4]])&&t[i[4]];s[i[1]](function(){var t=r&&r.apply(this,arguments);t&&m(t.promise)?t.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[i[0]+"With"](this,r?[t]:arguments)})}),t=null}).promise()},then:function(t,i,r){var s=0;function a(t,e,i,r){return function(){var o=this,h=arguments,u=function(){var n,u;if(!(t<s)){if((n=i.apply(o,h))===e.promise())throw new TypeError("Thenable self-resolution");u=n&&("object"==typeof n||"function"==typeof n)&&n.then,m(u)?r?u.call(n,a(s,e,V,r),a(s,e,B,r)):(s++,u.call(n,a(s,e,V,r),a(s,e,B,r),a(s,e,V,e.notifyWith))):(i!==V&&(o=void 0,h=[n]),(r||e.resolveWith)(o,h))}},l=r?u:function(){try{u()}catch(n){C.Deferred.exceptionHook&&C.Deferred.exceptionHook(n,l.stackTrace),t+1>=s&&(i!==B&&(o=void 0,h=[n]),e.rejectWith(o,h))}};t?l():(C.Deferred.getStackHook&&(l.stackTrace=C.Deferred.getStackHook()),n.setTimeout(l))}}return C.Deferred(function(n){e[0][3].add(a(0,n,m(r)?r:V,n.notifyWith)),e[1][3].add(a(0,n,m(t)?t:V)),e[2][3].add(a(0,n,m(i)?i:B))}).promise()},promise:function(t){return null!=t?C.extend(t,r):r}},s={};return C.each(e,function(t,n){var a=n[2],o=n[5];r[n[1]]=a.add,o&&a.add(function(){i=o},e[3-t][2].disable,e[3-t][3].disable,e[0][2].lock,e[0][3].lock),a.add(n[3].fire),s[n[0]]=function(){return s[n[0]+"With"](this===s?void 0:this,arguments),this},s[n[0]+"With"]=a.fireWith}),r.promise(s),t&&t.call(s,s),s},when:function(t){var e=arguments.length,n=e,i=Array(n),r=h.call(arguments),s=C.Deferred(),a=function(t){return function(n){i[t]=this,r[t]=arguments.length>1?h.call(arguments):n,--e||s.resolveWith(i,r)}};if(e<=1&&(F(t,s.done(a(n)).resolve,s.reject,!e),"pending"===s.state()||m(r[n]&&r[n].then)))return s.then();for(;n--;)F(r[n],a(n),s.reject);return s.promise()}});var q=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;C.Deferred.exceptionHook=function(t,e){n.console&&n.console.warn&&t&&q.test(t.name)&&n.console.warn("jQuery.Deferred exception: "+t.message,t.stack,e)},C.readyException=function(t){n.setTimeout(function(){throw t})};var H=C.Deferred();function U(){a.removeEventListener("DOMContentLoaded",U),n.removeEventListener("load",U),C.ready()}C.fn.ready=function(t){return H.then(t).catch(function(t){C.readyException(t)}),this},C.extend({isReady:!1,readyWait:1,ready:function(t){(!0===t?--C.readyWait:C.isReady)||(C.isReady=!0,!0!==t&&--C.readyWait>0||H.resolveWith(a,[C]))}}),C.ready.then=H.then,"complete"===a.readyState||"loading"!==a.readyState&&!a.documentElement.doScroll?n.setTimeout(C.ready):(a.addEventListener("DOMContentLoaded",U),n.addEventListener("load",U));var W=function(t,e,n,i,r,s,a){var o=0,h=t.length,u=null==n;if("object"===b(n))for(o in r=!0,n)W(t,e,o,n[o],!0,s,a);else if(void 0!==i&&(r=!0,m(i)||(a=!0),u&&(a?(e.call(t,i),e=null):(u=e,e=function(t,e,n){return u.call(C(t),n)})),e))for(;o<h;o++)e(t[o],n,a?i:i.call(t[o],o,e(t[o],n)));return r?t:u?e.call(t):h?e(t[0],n):s},$=/^-ms-/,G=/-([a-z])/g;function Z(t,e){return e.toUpperCase()}function X(t){return t.replace($,"ms-").replace(G,Z)}var Q=function(t){return 1===t.nodeType||9===t.nodeType||!+t.nodeType};function K(){this.expando=C.expando+K.uid++}K.uid=1,K.prototype={cache:function(t){var e=t[this.expando];return e||(e={},Q(t)&&(t.nodeType?t[this.expando]=e:Object.defineProperty(t,this.expando,{value:e,configurable:!0}))),e},set:function(t,e,n){var i,r=this.cache(t);if("string"==typeof e)r[X(e)]=n;else for(i in e)r[X(i)]=e[i];return r},get:function(t,e){return void 0===e?this.cache(t):t[this.expando]&&t[this.expando][X(e)]},access:function(t,e,n){return void 0===e||e&&"string"==typeof e&&void 0===n?this.get(t,e):(this.set(t,e,n),void 0!==n?n:e)},remove:function(t,e){var n,i=t[this.expando];if(void 0!==i){if(void 0!==e){n=(e=Array.isArray(e)?e.map(X):(e=X(e))in i?[e]:e.match(j)||[]).length;for(;n--;)delete i[e[n]]}(void 0===e||C.isEmptyObject(i))&&(t.nodeType?t[this.expando]=void 0:delete t[this.expando])}},hasData:function(t){var e=t[this.expando];return void 0!==e&&!C.isEmptyObject(e)}};var J=new K,Y=new K,tt=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,et=/[A-Z]/g;function nt(t,e,n){var i;if(void 0===n&&1===t.nodeType)if(i="data-"+e.replace(et,"-$&").toLowerCase(),"string"==typeof(n=t.getAttribute(i))){try{n=function(t){return"true"===t||"false"!==t&&("null"===t?null:t===+t+""?+t:tt.test(t)?JSON.parse(t):t)}(n)}catch(t){}Y.set(t,e,n)}else n=void 0;return n}C.extend({hasData:function(t){return Y.hasData(t)||J.hasData(t)},data:function(t,e,n){return Y.access(t,e,n)},removeData:function(t,e){Y.remove(t,e)},_data:function(t,e,n){return J.access(t,e,n)},_removeData:function(t,e){J.remove(t,e)}}),C.fn.extend({data:function(t,e){var n,i,r,s=this[0],a=s&&s.attributes;if(void 0===t){if(this.length&&(r=Y.get(s),1===s.nodeType&&!J.get(s,"hasDataAttrs"))){for(n=a.length;n--;)a[n]&&0===(i=a[n].name).indexOf("data-")&&(i=X(i.slice(5)),nt(s,i,r[i]));J.set(s,"hasDataAttrs",!0)}return r}return"object"==typeof t?this.each(function(){Y.set(this,t)}):W(this,function(e){var n;if(s&&void 0===e)return void 0!==(n=Y.get(s,t))?n:void 0!==(n=nt(s,t))?n:void 0;this.each(function(){Y.set(this,t,e)})},null,e,arguments.length>1,null,!0)},removeData:function(t){return this.each(function(){Y.remove(this,t)})}}),C.extend({queue:function(t,e,n){var i;if(t)return e=(e||"fx")+"queue",i=J.get(t,e),n&&(!i||Array.isArray(n)?i=J.access(t,e,C.makeArray(n)):i.push(n)),i||[]},dequeue:function(t,e){e=e||"fx";var n=C.queue(t,e),i=n.length,r=n.shift(),s=C._queueHooks(t,e);"inprogress"===r&&(r=n.shift(),i--),r&&("fx"===e&&n.unshift("inprogress"),delete s.stop,r.call(t,function(){C.dequeue(t,e)},s)),!i&&s&&s.empty.fire()},_queueHooks:function(t,e){var n=e+"queueHooks";return J.get(t,n)||J.access(t,n,{empty:C.Callbacks("once memory").add(function(){J.remove(t,[e+"queue",n])})})}}),C.fn.extend({queue:function(t,e){var n=2;return"string"!=typeof t&&(e=t,t="fx",n--),arguments.length<n?C.queue(this[0],t):void 0===e?this:this.each(function(){var n=C.queue(this,t,e);C._queueHooks(this,t),"fx"===t&&"inprogress"!==n[0]&&C.dequeue(this,t)})},dequeue:function(t){return this.each(function(){C.dequeue(this,t)})},clearQueue:function(t){return this.queue(t||"fx",[])},promise:function(t,e){var n,i=1,r=C.Deferred(),s=this,a=this.length,o=function(){--i||r.resolveWith(s,[s])};for("string"!=typeof t&&(e=t,t=void 0),t=t||"fx";a--;)(n=J.get(s[a],t+"queueHooks"))&&n.empty&&(i++,n.empty.add(o));return o(),r.promise(e)}});var it=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,rt=new RegExp("^(?:([+-])=|)("+it+")([a-z%]*)$","i"),st=["Top","Right","Bottom","Left"],at=function(t,e){return"none"===(t=e||t).style.display||""===t.style.display&&C.contains(t.ownerDocument,t)&&"none"===C.css(t,"display")},ot=function(t,e,n,i){var r,s,a={};for(s in e)a[s]=t.style[s],t.style[s]=e[s];for(s in r=n.apply(t,i||[]),e)t.style[s]=a[s];return r};function ht(t,e,n,i){var r,s,a=20,o=i?function(){return i.cur()}:function(){return C.css(t,e,"")},h=o(),u=n&&n[3]||(C.cssNumber[e]?"":"px"),l=(C.cssNumber[e]||"px"!==u&&+h)&&rt.exec(C.css(t,e));if(l&&l[3]!==u){for(h/=2,u=u||l[3],l=+h||1;a--;)C.style(t,e,l+u),(1-s)*(1-(s=o()/h||.5))<=0&&(a=0),l/=s;l*=2,C.style(t,e,l+u),n=n||[]}return n&&(l=+l||+h||0,r=n[1]?l+(n[1]+1)*n[2]:+n[2],i&&(i.unit=u,i.start=l,i.end=r)),r}var ut={};function lt(t){var e,n=t.ownerDocument,i=t.nodeName,r=ut[i];return r||(e=n.body.appendChild(n.createElement(i)),r=C.css(e,"display"),e.parentNode.removeChild(e),"none"===r&&(r="block"),ut[i]=r,r)}function ct(t,e){for(var n,i,r=[],s=0,a=t.length;s<a;s++)(i=t[s]).style&&(n=i.style.display,e?("none"===n&&(r[s]=J.get(i,"display")||null,r[s]||(i.style.display="")),""===i.style.display&&at(i)&&(r[s]=lt(i))):"none"!==n&&(r[s]="none",J.set(i,"display",n)));for(s=0;s<a;s++)null!=r[s]&&(t[s].style.display=r[s]);return t}C.fn.extend({show:function(){return ct(this,!0)},hide:function(){return ct(this)},toggle:function(t){return"boolean"==typeof t?t?this.show():this.hide():this.each(function(){at(this)?C(this).show():C(this).hide()})}});var ft=/^(?:checkbox|radio)$/i,dt=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i,pt=/^$|^module$|\/(?:java|ecma)script/i,gt={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function vt(t,e){var n;return n=void 0!==t.getElementsByTagName?t.getElementsByTagName(e||"*"):void 0!==t.querySelectorAll?t.querySelectorAll(e||"*"):[],void 0===e||e&&I(t,e)?C.merge([t],n):n}function _t(t,e){for(var n=0,i=t.length;n<i;n++)J.set(t[n],"globalEval",!e||J.get(e[n],"globalEval"))}gt.optgroup=gt.option,gt.tbody=gt.tfoot=gt.colgroup=gt.caption=gt.thead,gt.th=gt.td;var mt,yt,xt=/<|&#?\w+;/;function wt(t,e,n,i,r){for(var s,a,o,h,u,l,c=e.createDocumentFragment(),f=[],d=0,p=t.length;d<p;d++)if((s=t[d])||0===s)if("object"===b(s))C.merge(f,s.nodeType?[s]:s);else if(xt.test(s)){for(a=a||c.appendChild(e.createElement("div")),o=(dt.exec(s)||["",""])[1].toLowerCase(),h=gt[o]||gt._default,a.innerHTML=h[1]+C.htmlPrefilter(s)+h[2],l=h[0];l--;)a=a.lastChild;C.merge(f,a.childNodes),(a=c.firstChild).textContent=""}else f.push(e.createTextNode(s));for(c.textContent="",d=0;s=f[d++];)if(i&&C.inArray(s,i)>-1)r&&r.push(s);else if(u=C.contains(s.ownerDocument,s),a=vt(c.appendChild(s),"script"),u&&_t(a),n)for(l=0;s=a[l++];)pt.test(s.type||"")&&n.push(s);return c}mt=a.createDocumentFragment().appendChild(a.createElement("div")),(yt=a.createElement("input")).setAttribute("type","radio"),yt.setAttribute("checked","checked"),yt.setAttribute("name","t"),mt.appendChild(yt),_.checkClone=mt.cloneNode(!0).cloneNode(!0).lastChild.checked,mt.innerHTML="<textarea>x</textarea>",_.noCloneChecked=!!mt.cloneNode(!0).lastChild.defaultValue;var bt=a.documentElement,Ct=/^key/,St=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,kt=/^([^.]*)(?:\.(.+)|)/;function Tt(){return!0}function At(){return!1}function Et(){try{return a.activeElement}catch(t){}}function Pt(t,e,n,i,r,s){var a,o;if("object"==typeof e){for(o in"string"!=typeof n&&(i=i||n,n=void 0),e)Pt(t,o,n,i,e[o],s);return t}if(null==i&&null==r?(r=n,i=n=void 0):null==r&&("string"==typeof n?(r=i,i=void 0):(r=i,i=n,n=void 0)),!1===r)r=At;else if(!r)return t;return 1===s&&(a=r,(r=function(t){return C().off(t),a.apply(this,arguments)}).guid=a.guid||(a.guid=C.guid++)),t.each(function(){C.event.add(this,e,r,i,n)})}C.event={global:{},add:function(t,e,n,i,r){var s,a,o,h,u,l,c,f,d,p,g,v=J.get(t);if(v)for(n.handler&&(n=(s=n).handler,r=s.selector),r&&C.find.matchesSelector(bt,r),n.guid||(n.guid=C.guid++),(h=v.events)||(h=v.events={}),(a=v.handle)||(a=v.handle=function(e){return void 0!==C&&C.event.triggered!==e.type?C.event.dispatch.apply(t,arguments):void 0}),u=(e=(e||"").match(j)||[""]).length;u--;)d=g=(o=kt.exec(e[u])||[])[1],p=(o[2]||"").split(".").sort(),d&&(c=C.event.special[d]||{},d=(r?c.delegateType:c.bindType)||d,c=C.event.special[d]||{},l=C.extend({type:d,origType:g,data:i,handler:n,guid:n.guid,selector:r,needsContext:r&&C.expr.match.needsContext.test(r),namespace:p.join(".")},s),(f=h[d])||((f=h[d]=[]).delegateCount=0,c.setup&&!1!==c.setup.call(t,i,p,a)||t.addEventListener&&t.addEventListener(d,a)),c.add&&(c.add.call(t,l),l.handler.guid||(l.handler.guid=n.guid)),r?f.splice(f.delegateCount++,0,l):f.push(l),C.event.global[d]=!0)},remove:function(t,e,n,i,r){var s,a,o,h,u,l,c,f,d,p,g,v=J.hasData(t)&&J.get(t);if(v&&(h=v.events)){for(u=(e=(e||"").match(j)||[""]).length;u--;)if(d=g=(o=kt.exec(e[u])||[])[1],p=(o[2]||"").split(".").sort(),d){for(c=C.event.special[d]||{},f=h[d=(i?c.delegateType:c.bindType)||d]||[],o=o[2]&&new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"),a=s=f.length;s--;)l=f[s],!r&&g!==l.origType||n&&n.guid!==l.guid||o&&!o.test(l.namespace)||i&&i!==l.selector&&("**"!==i||!l.selector)||(f.splice(s,1),l.selector&&f.delegateCount--,c.remove&&c.remove.call(t,l));a&&!f.length&&(c.teardown&&!1!==c.teardown.call(t,p,v.handle)||C.removeEvent(t,d,v.handle),delete h[d])}else for(d in h)C.event.remove(t,d+e[u],n,i,!0);C.isEmptyObject(h)&&J.remove(t,"handle events")}},dispatch:function(t){var e,n,i,r,s,a,o=C.event.fix(t),h=new Array(arguments.length),u=(J.get(this,"events")||{})[o.type]||[],l=C.event.special[o.type]||{};for(h[0]=o,e=1;e<arguments.length;e++)h[e]=arguments[e];if(o.delegateTarget=this,!l.preDispatch||!1!==l.preDispatch.call(this,o)){for(a=C.event.handlers.call(this,o,u),e=0;(r=a[e++])&&!o.isPropagationStopped();)for(o.currentTarget=r.elem,n=0;(s=r.handlers[n++])&&!o.isImmediatePropagationStopped();)o.rnamespace&&!o.rnamespace.test(s.namespace)||(o.handleObj=s,o.data=s.data,void 0!==(i=((C.event.special[s.origType]||{}).handle||s.handler).apply(r.elem,h))&&!1===(o.result=i)&&(o.preventDefault(),o.stopPropagation()));return l.postDispatch&&l.postDispatch.call(this,o),o.result}},handlers:function(t,e){var n,i,r,s,a,o=[],h=e.delegateCount,u=t.target;if(h&&u.nodeType&&!("click"===t.type&&t.button>=1))for(;u!==this;u=u.parentNode||this)if(1===u.nodeType&&("click"!==t.type||!0!==u.disabled)){for(s=[],a={},n=0;n<h;n++)void 0===a[r=(i=e[n]).selector+" "]&&(a[r]=i.needsContext?C(r,this).index(u)>-1:C.find(r,this,null,[u]).length),a[r]&&s.push(i);s.length&&o.push({elem:u,handlers:s})}return u=this,h<e.length&&o.push({elem:u,handlers:e.slice(h)}),o},addProp:function(t,e){Object.defineProperty(C.Event.prototype,t,{enumerable:!0,configurable:!0,get:m(e)?function(){if(this.originalEvent)return e(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(t){return t[C.expando]?t:new C.Event(t)},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==Et()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===Et()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&I(this,"input"))return this.click(),!1},_default:function(t){return I(t.target,"a")}},beforeunload:{postDispatch:function(t){void 0!==t.result&&t.originalEvent&&(t.originalEvent.returnValue=t.result)}}}},C.removeEvent=function(t,e,n){t.removeEventListener&&t.removeEventListener(e,n)},C.Event=function(t,e){if(!(this instanceof C.Event))return new C.Event(t,e);t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||void 0===t.defaultPrevented&&!1===t.returnValue?Tt:At,this.target=t.target&&3===t.target.nodeType?t.target.parentNode:t.target,this.currentTarget=t.currentTarget,this.relatedTarget=t.relatedTarget):this.type=t,e&&C.extend(this,e),this.timeStamp=t&&t.timeStamp||Date.now(),this[C.expando]=!0},C.Event.prototype={constructor:C.Event,isDefaultPrevented:At,isPropagationStopped:At,isImmediatePropagationStopped:At,isSimulated:!1,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=Tt,t&&!this.isSimulated&&t.preventDefault()},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=Tt,t&&!this.isSimulated&&t.stopPropagation()},stopImmediatePropagation:function(){var t=this.originalEvent;this.isImmediatePropagationStopped=Tt,t&&!this.isSimulated&&t.stopImmediatePropagation(),this.stopPropagation()}},C.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(t){var e=t.button;return null==t.which&&Ct.test(t.type)?null!=t.charCode?t.charCode:t.keyCode:!t.which&&void 0!==e&&St.test(t.type)?1&e?1:2&e?3:4&e?2:0:t.which}},C.event.addProp),C.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(t,e){C.event.special[t]={delegateType:e,bindType:e,handle:function(t){var n,i=t.relatedTarget,r=t.handleObj;return i&&(i===this||C.contains(this,i))||(t.type=r.origType,n=r.handler.apply(this,arguments),t.type=e),n}}}),C.fn.extend({on:function(t,e,n,i){return Pt(this,t,e,n,i)},one:function(t,e,n,i){return Pt(this,t,e,n,i,1)},off:function(t,e,n){var i,r;if(t&&t.preventDefault&&t.handleObj)return i=t.handleObj,C(t.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if("object"==typeof t){for(r in t)this.off(r,e,t[r]);return this}return!1!==e&&"function"!=typeof e||(n=e,e=void 0),!1===n&&(n=At),this.each(function(){C.event.remove(this,t,n,e)})}});var It=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,Nt=/<script|<style|<link/i,Lt=/checked\s*(?:[^=]|=\s*.checked.)/i,Mt=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Ot(t,e){return I(t,"table")&&I(11!==e.nodeType?e:e.firstChild,"tr")&&C(t).children("tbody")[0]||t}function Dt(t){return t.type=(null!==t.getAttribute("type"))+"/"+t.type,t}function Rt(t){return"true/"===(t.type||"").slice(0,5)?t.type=t.type.slice(5):t.removeAttribute("type"),t}function zt(t,e){var n,i,r,s,a,o,h,u;if(1===e.nodeType){if(J.hasData(t)&&(s=J.access(t),a=J.set(e,s),u=s.events))for(r in delete a.handle,a.events={},u)for(n=0,i=u[r].length;n<i;n++)C.event.add(e,r,u[r][n]);Y.hasData(t)&&(o=Y.access(t),h=C.extend({},o),Y.set(e,h))}}function jt(t,e,n,i){e=u.apply([],e);var r,s,a,o,h,l,c=0,f=t.length,d=f-1,p=e[0],g=m(p);if(g||f>1&&"string"==typeof p&&!_.checkClone&&Lt.test(p))return t.each(function(r){var s=t.eq(r);g&&(e[0]=p.call(this,r,s.html())),jt(s,e,n,i)});if(f&&(s=(r=wt(e,t[0].ownerDocument,!1,t,i)).firstChild,1===r.childNodes.length&&(r=s),s||i)){for(o=(a=C.map(vt(r,"script"),Dt)).length;c<f;c++)h=r,c!==d&&(h=C.clone(h,!0,!0),o&&C.merge(a,vt(h,"script"))),n.call(t[c],h,c);if(o)for(l=a[a.length-1].ownerDocument,C.map(a,Rt),c=0;c<o;c++)h=a[c],pt.test(h.type||"")&&!J.access(h,"globalEval")&&C.contains(l,h)&&(h.src&&"module"!==(h.type||"").toLowerCase()?C._evalUrl&&C._evalUrl(h.src):w(h.textContent.replace(Mt,""),l,h))}return t}function Vt(t,e,n){for(var i,r=e?C.filter(e,t):t,s=0;null!=(i=r[s]);s++)n||1!==i.nodeType||C.cleanData(vt(i)),i.parentNode&&(n&&C.contains(i.ownerDocument,i)&&_t(vt(i,"script")),i.parentNode.removeChild(i));return t}C.extend({htmlPrefilter:function(t){return t.replace(It,"<$1></$2>")},clone:function(t,e,n){var i,r,s,a,o,h,u,l=t.cloneNode(!0),c=C.contains(t.ownerDocument,t);if(!(_.noCloneChecked||1!==t.nodeType&&11!==t.nodeType||C.isXMLDoc(t)))for(a=vt(l),i=0,r=(s=vt(t)).length;i<r;i++)o=s[i],h=a[i],u=void 0,"input"===(u=h.nodeName.toLowerCase())&&ft.test(o.type)?h.checked=o.checked:"input"!==u&&"textarea"!==u||(h.defaultValue=o.defaultValue);if(e)if(n)for(s=s||vt(t),a=a||vt(l),i=0,r=s.length;i<r;i++)zt(s[i],a[i]);else zt(t,l);return(a=vt(l,"script")).length>0&&_t(a,!c&&vt(t,"script")),l},cleanData:function(t){for(var e,n,i,r=C.event.special,s=0;void 0!==(n=t[s]);s++)if(Q(n)){if(e=n[J.expando]){if(e.events)for(i in e.events)r[i]?C.event.remove(n,i):C.removeEvent(n,i,e.handle);n[J.expando]=void 0}n[Y.expando]&&(n[Y.expando]=void 0)}}}),C.fn.extend({detach:function(t){return Vt(this,t,!0)},remove:function(t){return Vt(this,t)},text:function(t){return W(this,function(t){return void 0===t?C.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=t)})},null,t,arguments.length)},append:function(){return jt(this,arguments,function(t){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Ot(this,t).appendChild(t)})},prepend:function(){return jt(this,arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=Ot(this,t);e.insertBefore(t,e.firstChild)}})},before:function(){return jt(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this)})},after:function(){return jt(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this.nextSibling)})},empty:function(){for(var t,e=0;null!=(t=this[e]);e++)1===t.nodeType&&(C.cleanData(vt(t,!1)),t.textContent="");return this},clone:function(t,e){return t=null!=t&&t,e=null==e?t:e,this.map(function(){return C.clone(this,t,e)})},html:function(t){return W(this,function(t){var e=this[0]||{},n=0,i=this.length;if(void 0===t&&1===e.nodeType)return e.innerHTML;if("string"==typeof t&&!Nt.test(t)&&!gt[(dt.exec(t)||["",""])[1].toLowerCase()]){t=C.htmlPrefilter(t);try{for(;n<i;n++)1===(e=this[n]||{}).nodeType&&(C.cleanData(vt(e,!1)),e.innerHTML=t);e=0}catch(t){}}e&&this.empty().append(t)},null,t,arguments.length)},replaceWith:function(){var t=[];return jt(this,arguments,function(e){var n=this.parentNode;C.inArray(this,t)<0&&(C.cleanData(vt(this)),n&&n.replaceChild(e,this))},t)}}),C.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(t,e){C.fn[t]=function(t){for(var n,i=[],r=C(t),s=r.length-1,a=0;a<=s;a++)n=a===s?this:this.clone(!0),C(r[a])[e](n),l.apply(i,n.get());return this.pushStack(i)}});var Bt=new RegExp("^("+it+")(?!px)[a-z%]+$","i"),Ft=function(t){var e=t.ownerDocument.defaultView;return e&&e.opener||(e=n),e.getComputedStyle(t)},qt=new RegExp(st.join("|"),"i");function Ht(t,e,n){var i,r,s,a,o=t.style;return(n=n||Ft(t))&&(""!==(a=n.getPropertyValue(e)||n[e])||C.contains(t.ownerDocument,t)||(a=C.style(t,e)),!_.pixelBoxStyles()&&Bt.test(a)&&qt.test(e)&&(i=o.width,r=o.minWidth,s=o.maxWidth,o.minWidth=o.maxWidth=o.width=a,a=n.width,o.width=i,o.minWidth=r,o.maxWidth=s)),void 0!==a?a+"":a}function Ut(t,e){return{get:function(){if(!t())return(this.get=e).apply(this,arguments);delete this.get}}}!function(){function t(){if(l){u.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",l.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",bt.appendChild(u).appendChild(l);var t=n.getComputedStyle(l);i="1%"!==t.top,h=12===e(t.marginLeft),l.style.right="60%",o=36===e(t.right),r=36===e(t.width),l.style.position="absolute",s=36===l.offsetWidth||"absolute",bt.removeChild(u),l=null}}function e(t){return Math.round(parseFloat(t))}var i,r,s,o,h,u=a.createElement("div"),l=a.createElement("div");l.style&&(l.style.backgroundClip="content-box",l.cloneNode(!0).style.backgroundClip="",_.clearCloneStyle="content-box"===l.style.backgroundClip,C.extend(_,{boxSizingReliable:function(){return t(),r},pixelBoxStyles:function(){return t(),o},pixelPosition:function(){return t(),i},reliableMarginLeft:function(){return t(),h},scrollboxSize:function(){return t(),s}}))}();var Wt=/^(none|table(?!-c[ea]).+)/,$t=/^--/,Gt={position:"absolute",visibility:"hidden",display:"block"},Zt={letterSpacing:"0",fontWeight:"400"},Xt=["Webkit","Moz","ms"],Qt=a.createElement("div").style;function Kt(t){var e=C.cssProps[t];return e||(e=C.cssProps[t]=function(t){if(t in Qt)return t;for(var e=t[0].toUpperCase()+t.slice(1),n=Xt.length;n--;)if((t=Xt[n]+e)in Qt)return t}(t)||t),e}function Jt(t,e,n){var i=rt.exec(e);return i?Math.max(0,i[2]-(n||0))+(i[3]||"px"):e}function Yt(t,e,n,i,r,s){var a="width"===e?1:0,o=0,h=0;if(n===(i?"border":"content"))return 0;for(;a<4;a+=2)"margin"===n&&(h+=C.css(t,n+st[a],!0,r)),i?("content"===n&&(h-=C.css(t,"padding"+st[a],!0,r)),"margin"!==n&&(h-=C.css(t,"border"+st[a]+"Width",!0,r))):(h+=C.css(t,"padding"+st[a],!0,r),"padding"!==n?h+=C.css(t,"border"+st[a]+"Width",!0,r):o+=C.css(t,"border"+st[a]+"Width",!0,r));return!i&&s>=0&&(h+=Math.max(0,Math.ceil(t["offset"+e[0].toUpperCase()+e.slice(1)]-s-h-o-.5))),h}function te(t,e,n){var i=Ft(t),r=Ht(t,e,i),s="border-box"===C.css(t,"boxSizing",!1,i),a=s;if(Bt.test(r)){if(!n)return r;r="auto"}return a=a&&(_.boxSizingReliable()||r===t.style[e]),("auto"===r||!parseFloat(r)&&"inline"===C.css(t,"display",!1,i))&&(r=t["offset"+e[0].toUpperCase()+e.slice(1)],a=!0),(r=parseFloat(r)||0)+Yt(t,e,n||(s?"border":"content"),a,i,r)+"px"}function ee(t,e,n,i,r){return new ee.prototype.init(t,e,n,i,r)}C.extend({cssHooks:{opacity:{get:function(t,e){if(e){var n=Ht(t,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(t,e,n,i){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var r,s,a,o=X(e),h=$t.test(e),u=t.style;if(h||(e=Kt(o)),a=C.cssHooks[e]||C.cssHooks[o],void 0===n)return a&&"get"in a&&void 0!==(r=a.get(t,!1,i))?r:u[e];"string"===(s=typeof n)&&(r=rt.exec(n))&&r[1]&&(n=ht(t,e,r),s="number"),null!=n&&n==n&&("number"===s&&(n+=r&&r[3]||(C.cssNumber[o]?"":"px")),_.clearCloneStyle||""!==n||0!==e.indexOf("background")||(u[e]="inherit"),a&&"set"in a&&void 0===(n=a.set(t,n,i))||(h?u.setProperty(e,n):u[e]=n))}},css:function(t,e,n,i){var r,s,a,o=X(e);return $t.test(e)||(e=Kt(o)),(a=C.cssHooks[e]||C.cssHooks[o])&&"get"in a&&(r=a.get(t,!0,n)),void 0===r&&(r=Ht(t,e,i)),"normal"===r&&e in Zt&&(r=Zt[e]),""===n||n?(s=parseFloat(r),!0===n||isFinite(s)?s||0:r):r}}),C.each(["height","width"],function(t,e){C.cssHooks[e]={get:function(t,n,i){if(n)return!Wt.test(C.css(t,"display"))||t.getClientRects().length&&t.getBoundingClientRect().width?te(t,e,i):ot(t,Gt,function(){return te(t,e,i)})},set:function(t,n,i){var r,s=Ft(t),a="border-box"===C.css(t,"boxSizing",!1,s),o=i&&Yt(t,e,i,a,s);return a&&_.scrollboxSize()===s.position&&(o-=Math.ceil(t["offset"+e[0].toUpperCase()+e.slice(1)]-parseFloat(s[e])-Yt(t,e,"border",!1,s)-.5)),o&&(r=rt.exec(n))&&"px"!==(r[3]||"px")&&(t.style[e]=n,n=C.css(t,e)),Jt(0,n,o)}}}),C.cssHooks.marginLeft=Ut(_.reliableMarginLeft,function(t,e){if(e)return(parseFloat(Ht(t,"marginLeft"))||t.getBoundingClientRect().left-ot(t,{marginLeft:0},function(){return t.getBoundingClientRect().left}))+"px"}),C.each({margin:"",padding:"",border:"Width"},function(t,e){C.cssHooks[t+e]={expand:function(n){for(var i=0,r={},s="string"==typeof n?n.split(" "):[n];i<4;i++)r[t+st[i]+e]=s[i]||s[i-2]||s[0];return r}},"margin"!==t&&(C.cssHooks[t+e].set=Jt)}),C.fn.extend({css:function(t,e){return W(this,function(t,e,n){var i,r,s={},a=0;if(Array.isArray(e)){for(i=Ft(t),r=e.length;a<r;a++)s[e[a]]=C.css(t,e[a],!1,i);return s}return void 0!==n?C.style(t,e,n):C.css(t,e)},t,e,arguments.length>1)}}),C.Tween=ee,ee.prototype={constructor:ee,init:function(t,e,n,i,r,s){this.elem=t,this.prop=n,this.easing=r||C.easing._default,this.options=e,this.start=this.now=this.cur(),this.end=i,this.unit=s||(C.cssNumber[n]?"":"px")},cur:function(){var t=ee.propHooks[this.prop];return t&&t.get?t.get(this):ee.propHooks._default.get(this)},run:function(t){var e,n=ee.propHooks[this.prop];return this.options.duration?this.pos=e=C.easing[this.easing](t,this.options.duration*t,0,1,this.options.duration):this.pos=e=t,this.now=(this.end-this.start)*e+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):ee.propHooks._default.set(this),this}},ee.prototype.init.prototype=ee.prototype,ee.propHooks={_default:{get:function(t){var e;return 1!==t.elem.nodeType||null!=t.elem[t.prop]&&null==t.elem.style[t.prop]?t.elem[t.prop]:(e=C.css(t.elem,t.prop,""))&&"auto"!==e?e:0},set:function(t){C.fx.step[t.prop]?C.fx.step[t.prop](t):1!==t.elem.nodeType||null==t.elem.style[C.cssProps[t.prop]]&&!C.cssHooks[t.prop]?t.elem[t.prop]=t.now:C.style(t.elem,t.prop,t.now+t.unit)}}},ee.propHooks.scrollTop=ee.propHooks.scrollLeft={set:function(t){t.elem.nodeType&&t.elem.parentNode&&(t.elem[t.prop]=t.now)}},C.easing={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2},_default:"swing"},C.fx=ee.prototype.init,C.fx.step={};var ne,ie,re=/^(?:toggle|show|hide)$/,se=/queueHooks$/;function ae(){ie&&(!1===a.hidden&&n.requestAnimationFrame?n.requestAnimationFrame(ae):n.setTimeout(ae,C.fx.interval),C.fx.tick())}function oe(){return n.setTimeout(function(){ne=void 0}),ne=Date.now()}function he(t,e){var n,i=0,r={height:t};for(e=e?1:0;i<4;i+=2-e)r["margin"+(n=st[i])]=r["padding"+n]=t;return e&&(r.opacity=r.width=t),r}function ue(t,e,n){for(var i,r=(le.tweeners[e]||[]).concat(le.tweeners["*"]),s=0,a=r.length;s<a;s++)if(i=r[s].call(n,e,t))return i}function le(t,e,n){var i,r,s=0,a=le.prefilters.length,o=C.Deferred().always(function(){delete h.elem}),h=function(){if(r)return!1;for(var e=ne||oe(),n=Math.max(0,u.startTime+u.duration-e),i=1-(n/u.duration||0),s=0,a=u.tweens.length;s<a;s++)u.tweens[s].run(i);return o.notifyWith(t,[u,i,n]),i<1&&a?n:(a||o.notifyWith(t,[u,1,0]),o.resolveWith(t,[u]),!1)},u=o.promise({elem:t,props:C.extend({},e),opts:C.extend(!0,{specialEasing:{},easing:C.easing._default},n),originalProperties:e,originalOptions:n,startTime:ne||oe(),duration:n.duration,tweens:[],createTween:function(e,n){var i=C.Tween(t,u.opts,e,n,u.opts.specialEasing[e]||u.opts.easing);return u.tweens.push(i),i},stop:function(e){var n=0,i=e?u.tweens.length:0;if(r)return this;for(r=!0;n<i;n++)u.tweens[n].run(1);return e?(o.notifyWith(t,[u,1,0]),o.resolveWith(t,[u,e])):o.rejectWith(t,[u,e]),this}}),l=u.props;for(!function(t,e){var n,i,r,s,a;for(n in t)if(r=e[i=X(n)],s=t[n],Array.isArray(s)&&(r=s[1],s=t[n]=s[0]),n!==i&&(t[i]=s,delete t[n]),(a=C.cssHooks[i])&&"expand"in a)for(n in s=a.expand(s),delete t[i],s)n in t||(t[n]=s[n],e[n]=r);else e[i]=r}(l,u.opts.specialEasing);s<a;s++)if(i=le.prefilters[s].call(u,t,l,u.opts))return m(i.stop)&&(C._queueHooks(u.elem,u.opts.queue).stop=i.stop.bind(i)),i;return C.map(l,ue,u),m(u.opts.start)&&u.opts.start.call(t,u),u.progress(u.opts.progress).done(u.opts.done,u.opts.complete).fail(u.opts.fail).always(u.opts.always),C.fx.timer(C.extend(h,{elem:t,anim:u,queue:u.opts.queue})),u}C.Animation=C.extend(le,{tweeners:{"*":[function(t,e){var n=this.createTween(t,e);return ht(n.elem,t,rt.exec(e),n),n}]},tweener:function(t,e){m(t)?(e=t,t=["*"]):t=t.match(j);for(var n,i=0,r=t.length;i<r;i++)n=t[i],le.tweeners[n]=le.tweeners[n]||[],le.tweeners[n].unshift(e)},prefilters:[function(t,e,n){var i,r,s,a,o,h,u,l,c="width"in e||"height"in e,f=this,d={},p=t.style,g=t.nodeType&&at(t),v=J.get(t,"fxshow");for(i in n.queue||(null==(a=C._queueHooks(t,"fx")).unqueued&&(a.unqueued=0,o=a.empty.fire,a.empty.fire=function(){a.unqueued||o()}),a.unqueued++,f.always(function(){f.always(function(){a.unqueued--,C.queue(t,"fx").length||a.empty.fire()})})),e)if(r=e[i],re.test(r)){if(delete e[i],s=s||"toggle"===r,r===(g?"hide":"show")){if("show"!==r||!v||void 0===v[i])continue;g=!0}d[i]=v&&v[i]||C.style(t,i)}if((h=!C.isEmptyObject(e))||!C.isEmptyObject(d))for(i in c&&1===t.nodeType&&(n.overflow=[p.overflow,p.overflowX,p.overflowY],null==(u=v&&v.display)&&(u=J.get(t,"display")),"none"===(l=C.css(t,"display"))&&(u?l=u:(ct([t],!0),u=t.style.display||u,l=C.css(t,"display"),ct([t]))),("inline"===l||"inline-block"===l&&null!=u)&&"none"===C.css(t,"float")&&(h||(f.done(function(){p.display=u}),null==u&&(l=p.display,u="none"===l?"":l)),p.display="inline-block")),n.overflow&&(p.overflow="hidden",f.always(function(){p.overflow=n.overflow[0],p.overflowX=n.overflow[1],p.overflowY=n.overflow[2]})),h=!1,d)h||(v?"hidden"in v&&(g=v.hidden):v=J.access(t,"fxshow",{display:u}),s&&(v.hidden=!g),g&&ct([t],!0),f.done(function(){for(i in g||ct([t]),J.remove(t,"fxshow"),d)C.style(t,i,d[i])})),h=ue(g?v[i]:0,i,f),i in v||(v[i]=h.start,g&&(h.end=h.start,h.start=0))}],prefilter:function(t,e){e?le.prefilters.unshift(t):le.prefilters.push(t)}}),C.speed=function(t,e,n){var i=t&&"object"==typeof t?C.extend({},t):{complete:n||!n&&e||m(t)&&t,duration:t,easing:n&&e||e&&!m(e)&&e};return C.fx.off?i.duration=0:"number"!=typeof i.duration&&(i.duration in C.fx.speeds?i.duration=C.fx.speeds[i.duration]:i.duration=C.fx.speeds._default),null!=i.queue&&!0!==i.queue||(i.queue="fx"),i.old=i.complete,i.complete=function(){m(i.old)&&i.old.call(this),i.queue&&C.dequeue(this,i.queue)},i},C.fn.extend({fadeTo:function(t,e,n,i){return this.filter(at).css("opacity",0).show().end().animate({opacity:e},t,n,i)},animate:function(t,e,n,i){var r=C.isEmptyObject(t),s=C.speed(e,n,i),a=function(){var e=le(this,C.extend({},t),s);(r||J.get(this,"finish"))&&e.stop(!0)};return a.finish=a,r||!1===s.queue?this.each(a):this.queue(s.queue,a)},stop:function(t,e,n){var i=function(t){var e=t.stop;delete t.stop,e(n)};return"string"!=typeof t&&(n=e,e=t,t=void 0),e&&!1!==t&&this.queue(t||"fx",[]),this.each(function(){var e=!0,r=null!=t&&t+"queueHooks",s=C.timers,a=J.get(this);if(r)a[r]&&a[r].stop&&i(a[r]);else for(r in a)a[r]&&a[r].stop&&se.test(r)&&i(a[r]);for(r=s.length;r--;)s[r].elem!==this||null!=t&&s[r].queue!==t||(s[r].anim.stop(n),e=!1,s.splice(r,1));!e&&n||C.dequeue(this,t)})},finish:function(t){return!1!==t&&(t=t||"fx"),this.each(function(){var e,n=J.get(this),i=n[t+"queue"],r=n[t+"queueHooks"],s=C.timers,a=i?i.length:0;for(n.finish=!0,C.queue(this,t,[]),r&&r.stop&&r.stop.call(this,!0),e=s.length;e--;)s[e].elem===this&&s[e].queue===t&&(s[e].anim.stop(!0),s.splice(e,1));for(e=0;e<a;e++)i[e]&&i[e].finish&&i[e].finish.call(this);delete n.finish})}}),C.each(["toggle","show","hide"],function(t,e){var n=C.fn[e];C.fn[e]=function(t,i,r){return null==t||"boolean"==typeof t?n.apply(this,arguments):this.animate(he(e,!0),t,i,r)}}),C.each({slideDown:he("show"),slideUp:he("hide"),slideToggle:he("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(t,e){C.fn[t]=function(t,n,i){return this.animate(e,t,n,i)}}),C.timers=[],C.fx.tick=function(){var t,e=0,n=C.timers;for(ne=Date.now();e<n.length;e++)(t=n[e])()||n[e]!==t||n.splice(e--,1);n.length||C.fx.stop(),ne=void 0},C.fx.timer=function(t){C.timers.push(t),C.fx.start()},C.fx.interval=13,C.fx.start=function(){ie||(ie=!0,ae())},C.fx.stop=function(){ie=null},C.fx.speeds={slow:600,fast:200,_default:400},C.fn.delay=function(t,e){return t=C.fx&&C.fx.speeds[t]||t,e=e||"fx",this.queue(e,function(e,i){var r=n.setTimeout(e,t);i.stop=function(){n.clearTimeout(r)}})},function(){var t=a.createElement("input"),e=a.createElement("select").appendChild(a.createElement("option"));t.type="checkbox",_.checkOn=""!==t.value,_.optSelected=e.selected,(t=a.createElement("input")).value="t",t.type="radio",_.radioValue="t"===t.value}();var ce,fe=C.expr.attrHandle;C.fn.extend({attr:function(t,e){return W(this,C.attr,t,e,arguments.length>1)},removeAttr:function(t){return this.each(function(){C.removeAttr(this,t)})}}),C.extend({attr:function(t,e,n){var i,r,s=t.nodeType;if(3!==s&&8!==s&&2!==s)return void 0===t.getAttribute?C.prop(t,e,n):(1===s&&C.isXMLDoc(t)||(r=C.attrHooks[e.toLowerCase()]||(C.expr.match.bool.test(e)?ce:void 0)),void 0!==n?null===n?void C.removeAttr(t,e):r&&"set"in r&&void 0!==(i=r.set(t,n,e))?i:(t.setAttribute(e,n+""),n):r&&"get"in r&&null!==(i=r.get(t,e))?i:null==(i=C.find.attr(t,e))?void 0:i)},attrHooks:{type:{set:function(t,e){if(!_.radioValue&&"radio"===e&&I(t,"input")){var n=t.value;return t.setAttribute("type",e),n&&(t.value=n),e}}}},removeAttr:function(t,e){var n,i=0,r=e&&e.match(j);if(r&&1===t.nodeType)for(;n=r[i++];)t.removeAttribute(n)}}),ce={set:function(t,e,n){return!1===e?C.removeAttr(t,n):t.setAttribute(n,n),n}},C.each(C.expr.match.bool.source.match(/\w+/g),function(t,e){var n=fe[e]||C.find.attr;fe[e]=function(t,e,i){var r,s,a=e.toLowerCase();return i||(s=fe[a],fe[a]=r,r=null!=n(t,e,i)?a:null,fe[a]=s),r}});var de=/^(?:input|select|textarea|button)$/i,pe=/^(?:a|area)$/i;function ge(t){return(t.match(j)||[]).join(" ")}function ve(t){return t.getAttribute&&t.getAttribute("class")||""}function _e(t){return Array.isArray(t)?t:"string"==typeof t&&t.match(j)||[]}C.fn.extend({prop:function(t,e){return W(this,C.prop,t,e,arguments.length>1)},removeProp:function(t){return this.each(function(){delete this[C.propFix[t]||t]})}}),C.extend({prop:function(t,e,n){var i,r,s=t.nodeType;if(3!==s&&8!==s&&2!==s)return 1===s&&C.isXMLDoc(t)||(e=C.propFix[e]||e,r=C.propHooks[e]),void 0!==n?r&&"set"in r&&void 0!==(i=r.set(t,n,e))?i:t[e]=n:r&&"get"in r&&null!==(i=r.get(t,e))?i:t[e]},propHooks:{tabIndex:{get:function(t){var e=C.find.attr(t,"tabindex");return e?parseInt(e,10):de.test(t.nodeName)||pe.test(t.nodeName)&&t.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),_.optSelected||(C.propHooks.selected={get:function(t){var e=t.parentNode;return e&&e.parentNode&&e.parentNode.selectedIndex,null},set:function(t){var e=t.parentNode;e&&(e.selectedIndex,e.parentNode&&e.parentNode.selectedIndex)}}),C.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){C.propFix[this.toLowerCase()]=this}),C.fn.extend({addClass:function(t){var e,n,i,r,s,a,o,h=0;if(m(t))return this.each(function(e){C(this).addClass(t.call(this,e,ve(this)))});if((e=_e(t)).length)for(;n=this[h++];)if(r=ve(n),i=1===n.nodeType&&" "+ge(r)+" "){for(a=0;s=e[a++];)i.indexOf(" "+s+" ")<0&&(i+=s+" ");r!==(o=ge(i))&&n.setAttribute("class",o)}return this},removeClass:function(t){var e,n,i,r,s,a,o,h=0;if(m(t))return this.each(function(e){C(this).removeClass(t.call(this,e,ve(this)))});if(!arguments.length)return this.attr("class","");if((e=_e(t)).length)for(;n=this[h++];)if(r=ve(n),i=1===n.nodeType&&" "+ge(r)+" "){for(a=0;s=e[a++];)for(;i.indexOf(" "+s+" ")>-1;)i=i.replace(" "+s+" "," ");r!==(o=ge(i))&&n.setAttribute("class",o)}return this},toggleClass:function(t,e){var n=typeof t,i="string"===n||Array.isArray(t);return"boolean"==typeof e&&i?e?this.addClass(t):this.removeClass(t):m(t)?this.each(function(n){C(this).toggleClass(t.call(this,n,ve(this),e),e)}):this.each(function(){var e,r,s,a;if(i)for(r=0,s=C(this),a=_e(t);e=a[r++];)s.hasClass(e)?s.removeClass(e):s.addClass(e);else void 0!==t&&"boolean"!==n||((e=ve(this))&&J.set(this,"__className__",e),this.setAttribute&&this.setAttribute("class",e||!1===t?"":J.get(this,"__className__")||""))})},hasClass:function(t){var e,n,i=0;for(e=" "+t+" ";n=this[i++];)if(1===n.nodeType&&(" "+ge(ve(n))+" ").indexOf(e)>-1)return!0;return!1}});var me=/\r/g;C.fn.extend({val:function(t){var e,n,i,r=this[0];return arguments.length?(i=m(t),this.each(function(n){var r;1===this.nodeType&&(null==(r=i?t.call(this,n,C(this).val()):t)?r="":"number"==typeof r?r+="":Array.isArray(r)&&(r=C.map(r,function(t){return null==t?"":t+""})),(e=C.valHooks[this.type]||C.valHooks[this.nodeName.toLowerCase()])&&"set"in e&&void 0!==e.set(this,r,"value")||(this.value=r))})):r?(e=C.valHooks[r.type]||C.valHooks[r.nodeName.toLowerCase()])&&"get"in e&&void 0!==(n=e.get(r,"value"))?n:"string"==typeof(n=r.value)?n.replace(me,""):null==n?"":n:void 0}}),C.extend({valHooks:{option:{get:function(t){var e=C.find.attr(t,"value");return null!=e?e:ge(C.text(t))}},select:{get:function(t){var e,n,i,r=t.options,s=t.selectedIndex,a="select-one"===t.type,o=a?null:[],h=a?s+1:r.length;for(i=s<0?h:a?s:0;i<h;i++)if(((n=r[i]).selected||i===s)&&!n.disabled&&(!n.parentNode.disabled||!I(n.parentNode,"optgroup"))){if(e=C(n).val(),a)return e;o.push(e)}return o},set:function(t,e){for(var n,i,r=t.options,s=C.makeArray(e),a=r.length;a--;)((i=r[a]).selected=C.inArray(C.valHooks.option.get(i),s)>-1)&&(n=!0);return n||(t.selectedIndex=-1),s}}}}),C.each(["radio","checkbox"],function(){C.valHooks[this]={set:function(t,e){if(Array.isArray(e))return t.checked=C.inArray(C(t).val(),e)>-1}},_.checkOn||(C.valHooks[this].get=function(t){return null===t.getAttribute("value")?"on":t.value})}),_.focusin="onfocusin"in n;var ye=/^(?:focusinfocus|focusoutblur)$/,xe=function(t){t.stopPropagation()};C.extend(C.event,{trigger:function(t,e,i,r){var s,o,h,u,l,c,f,d,g=[i||a],v=p.call(t,"type")?t.type:t,_=p.call(t,"namespace")?t.namespace.split("."):[];if(o=d=h=i=i||a,3!==i.nodeType&&8!==i.nodeType&&!ye.test(v+C.event.triggered)&&(v.indexOf(".")>-1&&(_=v.split("."),v=_.shift(),_.sort()),l=v.indexOf(":")<0&&"on"+v,(t=t[C.expando]?t:new C.Event(v,"object"==typeof t&&t)).isTrigger=r?2:3,t.namespace=_.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+_.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=i),e=null==e?[t]:C.makeArray(e,[t]),f=C.event.special[v]||{},r||!f.trigger||!1!==f.trigger.apply(i,e))){if(!r&&!f.noBubble&&!y(i)){for(u=f.delegateType||v,ye.test(u+v)||(o=o.parentNode);o;o=o.parentNode)g.push(o),h=o;h===(i.ownerDocument||a)&&g.push(h.defaultView||h.parentWindow||n)}for(s=0;(o=g[s++])&&!t.isPropagationStopped();)d=o,t.type=s>1?u:f.bindType||v,(c=(J.get(o,"events")||{})[t.type]&&J.get(o,"handle"))&&c.apply(o,e),(c=l&&o[l])&&c.apply&&Q(o)&&(t.result=c.apply(o,e),!1===t.result&&t.preventDefault());return t.type=v,r||t.isDefaultPrevented()||f._default&&!1!==f._default.apply(g.pop(),e)||!Q(i)||l&&m(i[v])&&!y(i)&&((h=i[l])&&(i[l]=null),C.event.triggered=v,t.isPropagationStopped()&&d.addEventListener(v,xe),i[v](),t.isPropagationStopped()&&d.removeEventListener(v,xe),C.event.triggered=void 0,h&&(i[l]=h)),t.result}},simulate:function(t,e,n){var i=C.extend(new C.Event,n,{type:t,isSimulated:!0});C.event.trigger(i,null,e)}}),C.fn.extend({trigger:function(t,e){return this.each(function(){C.event.trigger(t,e,this)})},triggerHandler:function(t,e){var n=this[0];if(n)return C.event.trigger(t,e,n,!0)}}),_.focusin||C.each({focus:"focusin",blur:"focusout"},function(t,e){var n=function(t){C.event.simulate(e,t.target,C.event.fix(t))};C.event.special[e]={setup:function(){var i=this.ownerDocument||this,r=J.access(i,e);r||i.addEventListener(t,n,!0),J.access(i,e,(r||0)+1)},teardown:function(){var i=this.ownerDocument||this,r=J.access(i,e)-1;r?J.access(i,e,r):(i.removeEventListener(t,n,!0),J.remove(i,e))}}});var we=n.location,be=Date.now(),Ce=/\?/;C.parseXML=function(t){var e;if(!t||"string"!=typeof t)return null;try{e=(new n.DOMParser).parseFromString(t,"text/xml")}catch(t){e=void 0}return e&&!e.getElementsByTagName("parsererror").length||C.error("Invalid XML: "+t),e};var Se=/\[\]$/,ke=/\r?\n/g,Te=/^(?:submit|button|image|reset|file)$/i,Ae=/^(?:input|select|textarea|keygen)/i;function Ee(t,e,n,i){var r;if(Array.isArray(e))C.each(e,function(e,r){n||Se.test(t)?i(t,r):Ee(t+"["+("object"==typeof r&&null!=r?e:"")+"]",r,n,i)});else if(n||"object"!==b(e))i(t,e);else for(r in e)Ee(t+"["+r+"]",e[r],n,i)}C.param=function(t,e){var n,i=[],r=function(t,e){var n=m(e)?e():e;i[i.length]=encodeURIComponent(t)+"="+encodeURIComponent(null==n?"":n)};if(Array.isArray(t)||t.jquery&&!C.isPlainObject(t))C.each(t,function(){r(this.name,this.value)});else for(n in t)Ee(n,t[n],e,r);return i.join("&")},C.fn.extend({serialize:function(){return C.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var t=C.prop(this,"elements");return t?C.makeArray(t):this}).filter(function(){var t=this.type;return this.name&&!C(this).is(":disabled")&&Ae.test(this.nodeName)&&!Te.test(t)&&(this.checked||!ft.test(t))}).map(function(t,e){var n=C(this).val();return null==n?null:Array.isArray(n)?C.map(n,function(t){return{name:e.name,value:t.replace(ke,"\r\n")}}):{name:e.name,value:n.replace(ke,"\r\n")}}).get()}});var Pe=/%20/g,Ie=/#.*$/,Ne=/([?&])_=[^&]*/,Le=/^(.*?):[ \t]*([^\r\n]*)$/gm,Me=/^(?:GET|HEAD)$/,Oe=/^\/\//,De={},Re={},ze="*/".concat("*"),je=a.createElement("a");function Ve(t){return function(e,n){"string"!=typeof e&&(n=e,e="*");var i,r=0,s=e.toLowerCase().match(j)||[];if(m(n))for(;i=s[r++];)"+"===i[0]?(i=i.slice(1)||"*",(t[i]=t[i]||[]).unshift(n)):(t[i]=t[i]||[]).push(n)}}function Be(t,e,n,i){var r={},s=t===Re;function a(o){var h;return r[o]=!0,C.each(t[o]||[],function(t,o){var u=o(e,n,i);return"string"!=typeof u||s||r[u]?s?!(h=u):void 0:(e.dataTypes.unshift(u),a(u),!1)}),h}return a(e.dataTypes[0])||!r["*"]&&a("*")}function Fe(t,e){var n,i,r=C.ajaxSettings.flatOptions||{};for(n in e)void 0!==e[n]&&((r[n]?t:i||(i={}))[n]=e[n]);return i&&C.extend(!0,t,i),t}je.href=we.href,C.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:we.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(we.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":ze,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":C.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(t,e){return e?Fe(Fe(t,C.ajaxSettings),e):Fe(C.ajaxSettings,t)},ajaxPrefilter:Ve(De),ajaxTransport:Ve(Re),ajax:function(t,e){"object"==typeof t&&(e=t,t=void 0),e=e||{};var i,r,s,o,h,u,l,c,f,d,p=C.ajaxSetup({},e),g=p.context||p,v=p.context&&(g.nodeType||g.jquery)?C(g):C.event,_=C.Deferred(),m=C.Callbacks("once memory"),y=p.statusCode||{},x={},w={},b="canceled",S={readyState:0,getResponseHeader:function(t){var e;if(l){if(!o)for(o={};e=Le.exec(s);)o[e[1].toLowerCase()]=e[2];e=o[t.toLowerCase()]}return null==e?null:e},getAllResponseHeaders:function(){return l?s:null},setRequestHeader:function(t,e){return null==l&&(t=w[t.toLowerCase()]=w[t.toLowerCase()]||t,x[t]=e),this},overrideMimeType:function(t){return null==l&&(p.mimeType=t),this},statusCode:function(t){var e;if(t)if(l)S.always(t[S.status]);else for(e in t)y[e]=[y[e],t[e]];return this},abort:function(t){var e=t||b;return i&&i.abort(e),k(0,e),this}};if(_.promise(S),p.url=((t||p.url||we.href)+"").replace(Oe,we.protocol+"//"),p.type=e.method||e.type||p.method||p.type,p.dataTypes=(p.dataType||"*").toLowerCase().match(j)||[""],null==p.crossDomain){u=a.createElement("a");try{u.href=p.url,u.href=u.href,p.crossDomain=je.protocol+"//"+je.host!=u.protocol+"//"+u.host}catch(t){p.crossDomain=!0}}if(p.data&&p.processData&&"string"!=typeof p.data&&(p.data=C.param(p.data,p.traditional)),Be(De,p,e,S),l)return S;for(f in(c=C.event&&p.global)&&0==C.active++&&C.event.trigger("ajaxStart"),p.type=p.type.toUpperCase(),p.hasContent=!Me.test(p.type),r=p.url.replace(Ie,""),p.hasContent?p.data&&p.processData&&0===(p.contentType||"").indexOf("application/x-www-form-urlencoded")&&(p.data=p.data.replace(Pe,"+")):(d=p.url.slice(r.length),p.data&&(p.processData||"string"==typeof p.data)&&(r+=(Ce.test(r)?"&":"?")+p.data,delete p.data),!1===p.cache&&(r=r.replace(Ne,"$1"),d=(Ce.test(r)?"&":"?")+"_="+be+++d),p.url=r+d),p.ifModified&&(C.lastModified[r]&&S.setRequestHeader("If-Modified-Since",C.lastModified[r]),C.etag[r]&&S.setRequestHeader("If-None-Match",C.etag[r])),(p.data&&p.hasContent&&!1!==p.contentType||e.contentType)&&S.setRequestHeader("Content-Type",p.contentType),S.setRequestHeader("Accept",p.dataTypes[0]&&p.accepts[p.dataTypes[0]]?p.accepts[p.dataTypes[0]]+("*"!==p.dataTypes[0]?", "+ze+"; q=0.01":""):p.accepts["*"]),p.headers)S.setRequestHeader(f,p.headers[f]);if(p.beforeSend&&(!1===p.beforeSend.call(g,S,p)||l))return S.abort();if(b="abort",m.add(p.complete),S.done(p.success),S.fail(p.error),i=Be(Re,p,e,S)){if(S.readyState=1,c&&v.trigger("ajaxSend",[S,p]),l)return S;p.async&&p.timeout>0&&(h=n.setTimeout(function(){S.abort("timeout")},p.timeout));try{l=!1,i.send(x,k)}catch(t){if(l)throw t;k(-1,t)}}else k(-1,"No Transport");function k(t,e,a,o){var u,f,d,x,w,b=e;l||(l=!0,h&&n.clearTimeout(h),i=void 0,s=o||"",S.readyState=t>0?4:0,u=t>=200&&t<300||304===t,a&&(x=function(t,e,n){for(var i,r,s,a,o=t.contents,h=t.dataTypes;"*"===h[0];)h.shift(),void 0===i&&(i=t.mimeType||e.getResponseHeader("Content-Type"));if(i)for(r in o)if(o[r]&&o[r].test(i)){h.unshift(r);break}if(h[0]in n)s=h[0];else{for(r in n){if(!h[0]||t.converters[r+" "+h[0]]){s=r;break}a||(a=r)}s=s||a}if(s)return s!==h[0]&&h.unshift(s),n[s]}(p,S,a)),x=function(t,e,n,i){var r,s,a,o,h,u={},l=t.dataTypes.slice();if(l[1])for(a in t.converters)u[a.toLowerCase()]=t.converters[a];for(s=l.shift();s;)if(t.responseFields[s]&&(n[t.responseFields[s]]=e),!h&&i&&t.dataFilter&&(e=t.dataFilter(e,t.dataType)),h=s,s=l.shift())if("*"===s)s=h;else if("*"!==h&&h!==s){if(!(a=u[h+" "+s]||u["* "+s]))for(r in u)if((o=r.split(" "))[1]===s&&(a=u[h+" "+o[0]]||u["* "+o[0]])){!0===a?a=u[r]:!0!==u[r]&&(s=o[0],l.unshift(o[1]));break}if(!0!==a)if(a&&t.throws)e=a(e);else try{e=a(e)}catch(t){return{state:"parsererror",error:a?t:"No conversion from "+h+" to "+s}}}return{state:"success",data:e}}(p,x,S,u),u?(p.ifModified&&((w=S.getResponseHeader("Last-Modified"))&&(C.lastModified[r]=w),(w=S.getResponseHeader("etag"))&&(C.etag[r]=w)),204===t||"HEAD"===p.type?b="nocontent":304===t?b="notmodified":(b=x.state,f=x.data,u=!(d=x.error))):(d=b,!t&&b||(b="error",t<0&&(t=0))),S.status=t,S.statusText=(e||b)+"",u?_.resolveWith(g,[f,b,S]):_.rejectWith(g,[S,b,d]),S.statusCode(y),y=void 0,c&&v.trigger(u?"ajaxSuccess":"ajaxError",[S,p,u?f:d]),m.fireWith(g,[S,b]),c&&(v.trigger("ajaxComplete",[S,p]),--C.active||C.event.trigger("ajaxStop")))}return S},getJSON:function(t,e,n){return C.get(t,e,n,"json")},getScript:function(t,e){return C.get(t,void 0,e,"script")}}),C.each(["get","post"],function(t,e){C[e]=function(t,n,i,r){return m(n)&&(r=r||i,i=n,n=void 0),C.ajax(C.extend({url:t,type:e,dataType:r,data:n,success:i},C.isPlainObject(t)&&t))}}),C._evalUrl=function(t){return C.ajax({url:t,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,throws:!0})},C.fn.extend({wrapAll:function(t){var e;return this[0]&&(m(t)&&(t=t.call(this[0])),e=C(t,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&e.insertBefore(this[0]),e.map(function(){for(var t=this;t.firstElementChild;)t=t.firstElementChild;return t}).append(this)),this},wrapInner:function(t){return m(t)?this.each(function(e){C(this).wrapInner(t.call(this,e))}):this.each(function(){var e=C(this),n=e.contents();n.length?n.wrapAll(t):e.append(t)})},wrap:function(t){var e=m(t);return this.each(function(n){C(this).wrapAll(e?t.call(this,n):t)})},unwrap:function(t){return this.parent(t).not("body").each(function(){C(this).replaceWith(this.childNodes)}),this}}),C.expr.pseudos.hidden=function(t){return!C.expr.pseudos.visible(t)},C.expr.pseudos.visible=function(t){return!!(t.offsetWidth||t.offsetHeight||t.getClientRects().length)},C.ajaxSettings.xhr=function(){try{return new n.XMLHttpRequest}catch(t){}};var qe={0:200,1223:204},He=C.ajaxSettings.xhr();_.cors=!!He&&"withCredentials"in He,_.ajax=He=!!He,C.ajaxTransport(function(t){var e,i;if(_.cors||He&&!t.crossDomain)return{send:function(r,s){var a,o=t.xhr();if(o.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(a in t.xhrFields)o[a]=t.xhrFields[a];for(a in t.mimeType&&o.overrideMimeType&&o.overrideMimeType(t.mimeType),t.crossDomain||r["X-Requested-With"]||(r["X-Requested-With"]="XMLHttpRequest"),r)o.setRequestHeader(a,r[a]);e=function(t){return function(){e&&(e=i=o.onload=o.onerror=o.onabort=o.ontimeout=o.onreadystatechange=null,"abort"===t?o.abort():"error"===t?"number"!=typeof o.status?s(0,"error"):s(o.status,o.statusText):s(qe[o.status]||o.status,o.statusText,"text"!==(o.responseType||"text")||"string"!=typeof o.responseText?{binary:o.response}:{text:o.responseText},o.getAllResponseHeaders()))}},o.onload=e(),i=o.onerror=o.ontimeout=e("error"),void 0!==o.onabort?o.onabort=i:o.onreadystatechange=function(){4===o.readyState&&n.setTimeout(function(){e&&i()})},e=e("abort");try{o.send(t.hasContent&&t.data||null)}catch(t){if(e)throw t}},abort:function(){e&&e()}}}),C.ajaxPrefilter(function(t){t.crossDomain&&(t.contents.script=!1)}),C.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(t){return C.globalEval(t),t}}}),C.ajaxPrefilter("script",function(t){void 0===t.cache&&(t.cache=!1),t.crossDomain&&(t.type="GET")}),C.ajaxTransport("script",function(t){var e,n;if(t.crossDomain)return{send:function(i,r){e=C("<script>").prop({charset:t.scriptCharset,src:t.url}).on("load error",n=function(t){e.remove(),n=null,t&&r("error"===t.type?404:200,t.type)}),a.head.appendChild(e[0])},abort:function(){n&&n()}}});var Ue,We=[],$e=/(=)\?(?=&|$)|\?\?/;C.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var t=We.pop()||C.expando+"_"+be++;return this[t]=!0,t}}),C.ajaxPrefilter("json jsonp",function(t,e,i){var r,s,a,o=!1!==t.jsonp&&($e.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&$e.test(t.data)&&"data");if(o||"jsonp"===t.dataTypes[0])return r=t.jsonpCallback=m(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,o?t[o]=t[o].replace($e,"$1"+r):!1!==t.jsonp&&(t.url+=(Ce.test(t.url)?"&":"?")+t.jsonp+"="+r),t.converters["script json"]=function(){return a||C.error(r+" was not called"),a[0]},t.dataTypes[0]="json",s=n[r],n[r]=function(){a=arguments},i.always(function(){void 0===s?C(n).removeProp(r):n[r]=s,t[r]&&(t.jsonpCallback=e.jsonpCallback,We.push(r)),a&&m(s)&&s(a[0]),a=s=void 0}),"script"}),_.createHTMLDocument=((Ue=a.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===Ue.childNodes.length),C.parseHTML=function(t,e,n){return"string"!=typeof t?[]:("boolean"==typeof e&&(n=e,e=!1),e||(_.createHTMLDocument?((i=(e=a.implementation.createHTMLDocument("")).createElement("base")).href=a.location.href,e.head.appendChild(i)):e=a),s=!n&&[],(r=N.exec(t))?[e.createElement(r[1])]:(r=wt([t],e,s),s&&s.length&&C(s).remove(),C.merge([],r.childNodes)));var i,r,s},C.fn.load=function(t,e,n){var i,r,s,a=this,o=t.indexOf(" ");return o>-1&&(i=ge(t.slice(o)),t=t.slice(0,o)),m(e)?(n=e,e=void 0):e&&"object"==typeof e&&(r="POST"),a.length>0&&C.ajax({url:t,type:r||"GET",dataType:"html",data:e}).done(function(t){s=arguments,a.html(i?C("<div>").append(C.parseHTML(t)).find(i):t)}).always(n&&function(t,e){a.each(function(){n.apply(this,s||[t.responseText,e,t])})}),this},C.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(t,e){C.fn[e]=function(t){return this.on(e,t)}}),C.expr.pseudos.animated=function(t){return C.grep(C.timers,function(e){return t===e.elem}).length},C.offset={setOffset:function(t,e,n){var i,r,s,a,o,h,u=C.css(t,"position"),l=C(t),c={};"static"===u&&(t.style.position="relative"),o=l.offset(),s=C.css(t,"top"),h=C.css(t,"left"),("absolute"===u||"fixed"===u)&&(s+h).indexOf("auto")>-1?(a=(i=l.position()).top,r=i.left):(a=parseFloat(s)||0,r=parseFloat(h)||0),m(e)&&(e=e.call(t,n,C.extend({},o))),null!=e.top&&(c.top=e.top-o.top+a),null!=e.left&&(c.left=e.left-o.left+r),"using"in e?e.using.call(t,c):l.css(c)}},C.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(e){C.offset.setOffset(this,t,e)});var e,n,i=this[0];return i?i.getClientRects().length?(e=i.getBoundingClientRect(),n=i.ownerDocument.defaultView,{top:e.top+n.pageYOffset,left:e.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var t,e,n,i=this[0],r={top:0,left:0};if("fixed"===C.css(i,"position"))e=i.getBoundingClientRect();else{for(e=this.offset(),n=i.ownerDocument,t=i.offsetParent||n.documentElement;t&&(t===n.body||t===n.documentElement)&&"static"===C.css(t,"position");)t=t.parentNode;t&&t!==i&&1===t.nodeType&&((r=C(t).offset()).top+=C.css(t,"borderTopWidth",!0),r.left+=C.css(t,"borderLeftWidth",!0))}return{top:e.top-r.top-C.css(i,"marginTop",!0),left:e.left-r.left-C.css(i,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var t=this.offsetParent;t&&"static"===C.css(t,"position");)t=t.offsetParent;return t||bt})}}),C.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(t,e){var n="pageYOffset"===e;C.fn[t]=function(i){return W(this,function(t,i,r){var s;if(y(t)?s=t:9===t.nodeType&&(s=t.defaultView),void 0===r)return s?s[e]:t[i];s?s.scrollTo(n?s.pageXOffset:r,n?r:s.pageYOffset):t[i]=r},t,i,arguments.length)}}),C.each(["top","left"],function(t,e){C.cssHooks[e]=Ut(_.pixelPosition,function(t,n){if(n)return n=Ht(t,e),Bt.test(n)?C(t).position()[e]+"px":n})}),C.each({Height:"height",Width:"width"},function(t,e){C.each({padding:"inner"+t,content:e,"":"outer"+t},function(n,i){C.fn[i]=function(r,s){var a=arguments.length&&(n||"boolean"!=typeof r),o=n||(!0===r||!0===s?"margin":"border");return W(this,function(e,n,r){var s;return y(e)?0===i.indexOf("outer")?e["inner"+t]:e.document.documentElement["client"+t]:9===e.nodeType?(s=e.documentElement,Math.max(e.body["scroll"+t],s["scroll"+t],e.body["offset"+t],s["offset"+t],s["client"+t])):void 0===r?C.css(e,n,o):C.style(e,n,r,o)},e,a?r:void 0,a)}})}),C.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(t,e){C.fn[e]=function(t,n){return arguments.length>0?this.on(e,null,t,n):this.trigger(e)}}),C.fn.extend({hover:function(t,e){return this.mouseenter(t).mouseleave(e||t)}}),C.fn.extend({bind:function(t,e,n){return this.on(t,null,e,n)},unbind:function(t,e){return this.off(t,null,e)},delegate:function(t,e,n,i){return this.on(e,t,n,i)},undelegate:function(t,e,n){return 1===arguments.length?this.off(t,"**"):this.off(e,t||"**",n)}}),C.proxy=function(t,e){var n,i,r;if("string"==typeof e&&(n=t[e],e=t,t=n),m(t))return i=h.call(arguments,2),(r=function(){return t.apply(e||this,i.concat(h.call(arguments)))}).guid=t.guid=t.guid||C.guid++,r},C.holdReady=function(t){t?C.readyWait++:C.ready(!0)},C.isArray=Array.isArray,C.parseJSON=JSON.parse,C.nodeName=I,C.isFunction=m,C.isWindow=y,C.camelCase=X,C.type=b,C.now=Date.now,C.isNumeric=function(t){var e=C.type(t);return("number"===e||"string"===e)&&!isNaN(t-parseFloat(t))},void 0===(i=function(){return C}.apply(e,[]))||(t.exports=i);var Ge=n.jQuery,Ze=n.$;return C.noConflict=function(t){return n.$===C&&(n.$=Ze),t&&n.jQuery===C&&(n.jQuery=Ge),C},r||(n.jQuery=n.$=C),C})},function(t,e){},function(t,e,n){"use strict";n.r(e),n.d(e,"version",function(){return Dt}),n.d(e,"parse",function(){return Rt}),n.d(e,"parseExpressionAt",function(){return zt}),n.d(e,"tokenizer",function(){return jt}),n.d(e,"Parser",function(){return U}),n.d(e,"defaultOptions",function(){return z}),n.d(e,"Position",function(){return O}),n.d(e,"SourceLocation",function(){return D}),n.d(e,"getLineInfo",function(){return R}),n.d(e,"Node",function(){return ot}),n.d(e,"TokenType",function(){return v}),n.d(e,"tokTypes",function(){return b}),n.d(e,"keywordTypes",function(){return x}),n.d(e,"TokContext",function(){return lt}),n.d(e,"tokContexts",function(){return ct}),n.d(e,"isIdentifierChar",function(){return g}),n.d(e,"isIdentifierStart",function(){return p}),n.d(e,"Token",function(){return Nt}),n.d(e,"isNewLine",function(){return k}),n.d(e,"lineBreak",function(){return C}),n.d(e,"lineBreakG",function(){return S}),n.d(e,"nonASCIIwhitespace",function(){return T});var i={3:"abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile",5:"class enum extends super const export import",6:"enum",strict:"implements interface let package private protected public static yield",strictBind:"eval arguments"},r="break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this",s={5:r,6:r+" const class extends export import super"},a=/^in(stanceof)?$/,o="ªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙՠ-ֈא-תׯ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࡠ-ࡪࢠ-ࢴࢶ-ࢽऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱৼਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡૹଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘ-ౚౠౡಀಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൔ-ൖൟ-ൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏽᏸ-ᏽᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡸᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᦰ-ᧉᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᲀ-ᲈᲐ-ᲺᲽ-Ჿᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕ℘-ℝℤΩℨK-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞ々-〇〡-〩〱-〵〸-〼ぁ-ゖ゛-ゟァ-ヺー-ヿㄅ-ㄯㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿯ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞹꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꣽꣾꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭥꭰ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ",h="‌‍·̀-ͯ·҃-֑҇-ׇֽֿׁׂׅׄؐ-ًؚ-٩ٰۖ-ۜ۟-۪ۤۧۨ-ۭ۰-۹ܑܰ-݊ަ-ް߀-߉߫-߽߳ࠖ-࠙ࠛ-ࠣࠥ-ࠧࠩ-࡙࠭-࡛࣓-ࣣ࣡-ःऺ-़ा-ॏ॑-ॗॢॣ०-९ঁ-ঃ়া-ৄেৈো-্ৗৢৣ০-৯৾ਁ-ਃ਼ਾ-ੂੇੈੋ-੍ੑ੦-ੱੵઁ-ઃ઼ા-ૅે-ૉો-્ૢૣ૦-૯ૺ-૿ଁ-ଃ଼ା-ୄେୈୋ-୍ୖୗୢୣ୦-୯ஂா-ூெ-ைொ-்ௗ௦-௯ఀ-ఄా-ౄె-ైొ-్ౕౖౢౣ౦-౯ಁ-ಃ಼ಾ-ೄೆ-ೈೊ-್ೕೖೢೣ೦-೯ഀ-ഃ഻഼ാ-ൄെ-ൈൊ-്ൗൢൣ൦-൯ංඃ්ා-ුූෘ-ෟ෦-෯ෲෳัิ-ฺ็-๎๐-๙ັິ-ູົຼ່-ໍ໐-໙༘༙༠-༩༹༵༷༾༿ཱ-྄྆྇ྍ-ྗྙ-ྼ࿆ါ-ှ၀-၉ၖ-ၙၞ-ၠၢ-ၤၧ-ၭၱ-ၴႂ-ႍႏ-ႝ፝-፟፩-፱ᜒ-᜔ᜲ-᜴ᝒᝓᝲᝳ឴-៓៝០-៩᠋-᠍᠐-᠙ᢩᤠ-ᤫᤰ-᤻᥆-᥏᧐-᧚ᨗ-ᨛᩕ-ᩞ᩠-᩿᩼-᪉᪐-᪙᪰-᪽ᬀ-ᬄ᬴-᭄᭐-᭙᭫-᭳ᮀ-ᮂᮡ-ᮭ᮰-᮹᯦-᯳ᰤ-᰷᱀-᱉᱐-᱙᳐-᳔᳒-᳨᳭ᳲ-᳴᳷-᳹᷀-᷹᷻-᷿‿⁀⁔⃐-⃥⃜⃡-⃰⳯-⵿⳱ⷠ-〪ⷿ-゙゚〯꘠-꘩꙯ꙴ-꙽ꚞꚟ꛰꛱ꠂ꠆ꠋꠣ-ꠧꢀꢁꢴ-ꣅ꣐-꣙꣠-꣱ꣿ-꤉ꤦ-꤭ꥇ-꥓ꦀ-ꦃ꦳-꧀꧐-꧙ꧥ꧰-꧹ꨩ-ꨶꩃꩌꩍ꩐-꩙ꩻ-ꩽꪰꪲ-ꪴꪷꪸꪾ꪿꫁ꫫ-ꫯꫵ꫶ꯣ-ꯪ꯬꯭꯰-꯹ﬞ︀-️︠-︯︳︴﹍-﹏０-９＿",u=new RegExp("["+o+"]"),l=new RegExp("["+o+h+"]");o=h=null;var c=[0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,14,29,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,157,310,10,21,11,7,153,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,28,43,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,14,35,477,28,11,0,9,21,190,52,76,44,33,24,27,35,30,0,12,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,85,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,54,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,86,26,230,43,117,63,32,0,257,0,11,39,8,0,22,0,12,39,3,3,20,0,35,56,264,8,2,36,18,0,50,29,113,6,2,1,2,37,22,0,26,5,2,1,2,31,15,0,328,18,270,921,103,110,18,195,2749,1070,4050,582,8634,568,8,30,114,29,19,47,17,3,32,20,6,18,689,63,129,68,12,0,67,12,65,1,31,6129,15,754,9486,286,82,395,2309,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,4149,196,60,67,1213,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42710,42,4148,12,221,3,5761,15,7472,3104,541],f=[509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,574,3,9,9,525,10,176,2,54,14,32,9,16,3,46,10,54,9,7,2,37,13,2,9,6,1,45,0,13,2,49,13,9,3,4,9,83,11,7,0,161,11,6,9,7,3,56,1,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,5,0,82,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,243,14,166,9,280,9,41,6,2,3,9,0,10,10,47,15,406,7,2,7,17,9,57,21,2,13,123,5,4,0,2,1,2,6,2,0,9,9,49,4,2,1,2,4,9,9,330,3,19306,9,135,4,60,6,26,9,1016,45,17,3,19723,1,5319,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,2214,6,110,6,6,9,792487,239];function d(t,e){for(var n=65536,i=0;i<e.length;i+=2){if((n+=e[i])>t)return!1;if((n+=e[i+1])>=t)return!0}}function p(t,e){return t<65?36===t:t<91||(t<97?95===t:t<123||(t<=65535?t>=170&&u.test(String.fromCharCode(t)):!1!==e&&d(t,c)))}function g(t,e){return t<48?36===t:t<58||!(t<65)&&(t<91||(t<97?95===t:t<123||(t<=65535?t>=170&&l.test(String.fromCharCode(t)):!1!==e&&(d(t,c)||d(t,f)))))}var v=function(t,e){void 0===e&&(e={}),this.label=t,this.keyword=e.keyword,this.beforeExpr=!!e.beforeExpr,this.startsExpr=!!e.startsExpr,this.isLoop=!!e.isLoop,this.isAssign=!!e.isAssign,this.prefix=!!e.prefix,this.postfix=!!e.postfix,this.binop=e.binop||null,this.updateContext=null};function _(t,e){return new v(t,{beforeExpr:!0,binop:e})}var m={beforeExpr:!0},y={startsExpr:!0},x={};function w(t,e){return void 0===e&&(e={}),e.keyword=t,x[t]=new v(t,e)}var b={num:new v("num",y),regexp:new v("regexp",y),string:new v("string",y),name:new v("name",y),eof:new v("eof"),bracketL:new v("[",{beforeExpr:!0,startsExpr:!0}),bracketR:new v("]"),braceL:new v("{",{beforeExpr:!0,startsExpr:!0}),braceR:new v("}"),parenL:new v("(",{beforeExpr:!0,startsExpr:!0}),parenR:new v(")"),comma:new v(",",m),semi:new v(";",m),colon:new v(":",m),dot:new v("."),question:new v("?",m),arrow:new v("=>",m),template:new v("template"),invalidTemplate:new v("invalidTemplate"),ellipsis:new v("...",m),backQuote:new v("`",y),dollarBraceL:new v("${",{beforeExpr:!0,startsExpr:!0}),eq:new v("=",{beforeExpr:!0,isAssign:!0}),assign:new v("_=",{beforeExpr:!0,isAssign:!0}),incDec:new v("++/--",{prefix:!0,postfix:!0,startsExpr:!0}),prefix:new v("!/~",{beforeExpr:!0,prefix:!0,startsExpr:!0}),logicalOR:_("||",1),logicalAND:_("&&",2),bitwiseOR:_("|",3),bitwiseXOR:_("^",4),bitwiseAND:_("&",5),equality:_("==/!=/===/!==",6),relational:_("</>/<=/>=",7),bitShift:_("<</>>/>>>",8),plusMin:new v("+/-",{beforeExpr:!0,binop:9,prefix:!0,startsExpr:!0}),modulo:_("%",10),star:_("*",10),slash:_("/",10),starstar:new v("**",{beforeExpr:!0}),_break:w("break"),_case:w("case",m),_catch:w("catch"),_continue:w("continue"),_debugger:w("debugger"),_default:w("default",m),_do:w("do",{isLoop:!0,beforeExpr:!0}),_else:w("else",m),_finally:w("finally"),_for:w("for",{isLoop:!0}),_function:w("function",y),_if:w("if"),_return:w("return",m),_switch:w("switch"),_throw:w("throw",m),_try:w("try"),_var:w("var"),_const:w("const"),_while:w("while",{isLoop:!0}),_with:w("with"),_new:w("new",{beforeExpr:!0,startsExpr:!0}),_this:w("this",y),_super:w("super",y),_class:w("class",y),_extends:w("extends",m),_export:w("export"),_import:w("import"),_null:w("null",y),_true:w("true",y),_false:w("false",y),_in:w("in",{beforeExpr:!0,binop:7}),_instanceof:w("instanceof",{beforeExpr:!0,binop:7}),_typeof:w("typeof",{beforeExpr:!0,prefix:!0,startsExpr:!0}),_void:w("void",{beforeExpr:!0,prefix:!0,startsExpr:!0}),_delete:w("delete",{beforeExpr:!0,prefix:!0,startsExpr:!0})},C=/\r\n?|\n|\u2028|\u2029/,S=new RegExp(C.source,"g");function k(t,e){return 10===t||13===t||!e&&(8232===t||8233===t)}var T=/[\u1680\u2000-\u200a\u202f\u205f\u3000\ufeff]/,A=/(?:\s|\/\/.*|\/\*[^]*?\*\/)*/g,E=Object.prototype,P=E.hasOwnProperty,I=E.toString;function N(t,e){return P.call(t,e)}var L=Array.isArray||function(t){return"[object Array]"===I.call(t)};function M(t){return new RegExp("^(?:"+t.replace(/ /g,"|")+")$")}var O=function(t,e){this.line=t,this.column=e};O.prototype.offset=function(t){return new O(this.line,this.column+t)};var D=function(t,e,n){this.start=e,this.end=n,null!==t.sourceFile&&(this.source=t.sourceFile)};function R(t,e){for(var n=1,i=0;;){S.lastIndex=i;var r=S.exec(t);if(!(r&&r.index<e))return new O(n,e-i);++n,i=r.index+r[0].length}}var z={ecmaVersion:9,sourceType:"script",onInsertedSemicolon:null,onTrailingComma:null,allowReserved:null,allowReturnOutsideFunction:!1,allowImportExportEverywhere:!1,allowAwaitOutsideFunction:!1,allowHashBang:!1,locations:!1,onToken:null,onComment:null,ranges:!1,program:null,sourceFile:null,directSourceFile:null,preserveParens:!1};function j(t){var e={};for(var n in z)e[n]=t&&N(t,n)?t[n]:z[n];if(e.ecmaVersion>=2015&&(e.ecmaVersion-=2009),null==e.allowReserved&&(e.allowReserved=e.ecmaVersion<5),L(e.onToken)){var i=e.onToken;e.onToken=function(t){return i.push(t)}}return L(e.onComment)&&(e.onComment=function(t,e){return function(n,i,r,s,a,o){var h={type:n?"Block":"Line",value:i,start:r,end:s};t.locations&&(h.loc=new D(this,a,o)),t.ranges&&(h.range=[r,s]),e.push(h)}}(e,e.onComment)),e}var V=2,B=1|V,F=4,q=8;function H(t,e){return V|(t?F:0)|(e?q:0)}var U=function(t,e,n){this.options=t=j(t),this.sourceFile=t.sourceFile,this.keywords=M(s[t.ecmaVersion>=6?6:5]);var r="";if(!t.allowReserved){for(var a=t.ecmaVersion;!(r=i[a]);a--);"module"===t.sourceType&&(r+=" await")}this.reservedWords=M(r);var o=(r?r+" ":"")+i.strict;this.reservedWordsStrict=M(o),this.reservedWordsStrictBind=M(o+" "+i.strictBind),this.input=String(e),this.containsEsc=!1,n?(this.pos=n,this.lineStart=this.input.lastIndexOf("\n",n-1)+1,this.curLine=this.input.slice(0,this.lineStart).split(C).length):(this.pos=this.lineStart=0,this.curLine=1),this.type=b.eof,this.value=null,this.start=this.end=this.pos,this.startLoc=this.endLoc=this.curPosition(),this.lastTokEndLoc=this.lastTokStartLoc=null,this.lastTokStart=this.lastTokEnd=this.pos,this.context=this.initialContext(),this.exprAllowed=!0,this.inModule="module"===t.sourceType,this.strict=this.inModule||this.strictDirective(this.pos),this.potentialArrowAt=-1,this.yieldPos=this.awaitPos=this.awaitIdentPos=0,this.labels=[],this.undefinedExports={},0===this.pos&&t.allowHashBang&&"#!"===this.input.slice(0,2)&&this.skipLineComment(2),this.scopeStack=[],this.enterScope(1),this.regexpState=null},W={inFunction:{configurable:!0},inGenerator:{configurable:!0},inAsync:{configurable:!0},allowSuper:{configurable:!0},allowDirectSuper:{configurable:!0},treatFunctionsAsVar:{configurable:!0}};U.prototype.parse=function(){var t=this.options.program||this.startNode();return this.nextToken(),this.parseTopLevel(t)},W.inFunction.get=function(){return(this.currentVarScope().flags&V)>0},W.inGenerator.get=function(){return(this.currentVarScope().flags&q)>0},W.inAsync.get=function(){return(this.currentVarScope().flags&F)>0},W.allowSuper.get=function(){return(64&this.currentThisScope().flags)>0},W.allowDirectSuper.get=function(){return(128&this.currentThisScope().flags)>0},W.treatFunctionsAsVar.get=function(){return this.treatFunctionsAsVarInScope(this.currentScope())},U.prototype.inNonArrowFunction=function(){return(this.currentThisScope().flags&V)>0},U.extend=function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];for(var n=this,i=0;i<t.length;i++)n=t[i](n);return n},U.parse=function(t,e){return new this(e,t).parse()},U.parseExpressionAt=function(t,e,n){var i=new this(n,t,e);return i.nextToken(),i.parseExpression()},U.tokenizer=function(t,e){return new this(e,t)},Object.defineProperties(U.prototype,W);var $=U.prototype,G=/^(?:'((?:\\.|[^'])*?)'|"((?:\\.|[^"])*?)")/;function Z(){this.shorthandAssign=this.trailingComma=this.parenthesizedAssign=this.parenthesizedBind=this.doubleProto=-1}$.strictDirective=function(t){for(;;){A.lastIndex=t,t+=A.exec(this.input)[0].length;var e=G.exec(this.input.slice(t));if(!e)return!1;if("use strict"===(e[1]||e[2]))return!0;t+=e[0].length,A.lastIndex=t,t+=A.exec(this.input)[0].length,";"===this.input[t]&&t++}},$.eat=function(t){return this.type===t&&(this.next(),!0)},$.isContextual=function(t){return this.type===b.name&&this.value===t&&!this.containsEsc},$.eatContextual=function(t){return!!this.isContextual(t)&&(this.next(),!0)},$.expectContextual=function(t){this.eatContextual(t)||this.unexpected()},$.canInsertSemicolon=function(){return this.type===b.eof||this.type===b.braceR||C.test(this.input.slice(this.lastTokEnd,this.start))},$.insertSemicolon=function(){if(this.canInsertSemicolon())return this.options.onInsertedSemicolon&&this.options.onInsertedSemicolon(this.lastTokEnd,this.lastTokEndLoc),!0},$.semicolon=function(){this.eat(b.semi)||this.insertSemicolon()||this.unexpected()},$.afterTrailingComma=function(t,e){if(this.type===t)return this.options.onTrailingComma&&this.options.onTrailingComma(this.lastTokStart,this.lastTokStartLoc),e||this.next(),!0},$.expect=function(t){this.eat(t)||this.unexpected()},$.unexpected=function(t){this.raise(null!=t?t:this.start,"Unexpected token")},$.checkPatternErrors=function(t,e){if(t){t.trailingComma>-1&&this.raiseRecoverable(t.trailingComma,"Comma is not permitted after the rest element");var n=e?t.parenthesizedAssign:t.parenthesizedBind;n>-1&&this.raiseRecoverable(n,"Parenthesized pattern")}},$.checkExpressionErrors=function(t,e){if(!t)return!1;var n=t.shorthandAssign,i=t.doubleProto;if(!e)return n>=0||i>=0;n>=0&&this.raise(n,"Shorthand property assignments are valid only in destructuring patterns"),i>=0&&this.raiseRecoverable(i,"Redefinition of __proto__ property")},$.checkYieldAwaitInDefaultParams=function(){this.yieldPos&&(!this.awaitPos||this.yieldPos<this.awaitPos)&&this.raise(this.yieldPos,"Yield expression cannot be a default value"),this.awaitPos&&this.raise(this.awaitPos,"Await expression cannot be a default value")},$.isSimpleAssignTarget=function(t){return"ParenthesizedExpression"===t.type?this.isSimpleAssignTarget(t.expression):"Identifier"===t.type||"MemberExpression"===t.type};var X=U.prototype;X.parseTopLevel=function(t){var e={};for(t.body||(t.body=[]);this.type!==b.eof;){var n=this.parseStatement(null,!0,e);t.body.push(n)}if(this.inModule)for(var i=0,r=Object.keys(this.undefinedExports);i<r.length;i+=1){var s=r[i];this.raiseRecoverable(this.undefinedExports[s].start,"Export '"+s+"' is not defined")}return this.adaptDirectivePrologue(t.body),this.next(),this.options.ecmaVersion>=6&&(t.sourceType=this.options.sourceType),this.finishNode(t,"Program")};var Q={kind:"loop"},K={kind:"switch"};X.isLet=function(t){if(this.options.ecmaVersion<6||!this.isContextual("let"))return!1;A.lastIndex=this.pos;var e=A.exec(this.input),n=this.pos+e[0].length,i=this.input.charCodeAt(n);if(91===i)return!0;if(t)return!1;if(123===i)return!0;if(p(i,!0)){for(var r=n+1;g(this.input.charCodeAt(r),!0);)++r;var s=this.input.slice(n,r);if(!a.test(s))return!0}return!1},X.isAsyncFunction=function(){if(this.options.ecmaVersion<8||!this.isContextual("async"))return!1;A.lastIndex=this.pos;var t=A.exec(this.input),e=this.pos+t[0].length;return!(C.test(this.input.slice(this.pos,e))||"function"!==this.input.slice(e,e+8)||e+8!==this.input.length&&g(this.input.charAt(e+8)))},X.parseStatement=function(t,e,n){var i,r=this.type,s=this.startNode();switch(this.isLet(t)&&(r=b._var,i="let"),r){case b._break:case b._continue:return this.parseBreakContinueStatement(s,r.keyword);case b._debugger:return this.parseDebuggerStatement(s);case b._do:return this.parseDoStatement(s);case b._for:return this.parseForStatement(s);case b._function:return t&&(this.strict||"if"!==t&&"label"!==t)&&this.options.ecmaVersion>=6&&this.unexpected(),this.parseFunctionStatement(s,!1,!t);case b._class:return t&&this.unexpected(),this.parseClass(s,!0);case b._if:return this.parseIfStatement(s);case b._return:return this.parseReturnStatement(s);case b._switch:return this.parseSwitchStatement(s);case b._throw:return this.parseThrowStatement(s);case b._try:return this.parseTryStatement(s);case b._const:case b._var:return i=i||this.value,t&&"var"!==i&&this.unexpected(),this.parseVarStatement(s,i);case b._while:return this.parseWhileStatement(s);case b._with:return this.parseWithStatement(s);case b.braceL:return this.parseBlock(!0,s);case b.semi:return this.parseEmptyStatement(s);case b._export:case b._import:return this.options.allowImportExportEverywhere||(e||this.raise(this.start,"'import' and 'export' may only appear at the top level"),this.inModule||this.raise(this.start,"'import' and 'export' may appear only with 'sourceType: module'")),r===b._import?this.parseImport(s):this.parseExport(s,n);default:if(this.isAsyncFunction())return t&&this.unexpected(),this.next(),this.parseFunctionStatement(s,!0,!t);var a=this.value,o=this.parseExpression();return r===b.name&&"Identifier"===o.type&&this.eat(b.colon)?this.parseLabeledStatement(s,a,o,t):this.parseExpressionStatement(s,o)}},X.parseBreakContinueStatement=function(t,e){var n="break"===e;this.next(),this.eat(b.semi)||this.insertSemicolon()?t.label=null:this.type!==b.name?this.unexpected():(t.label=this.parseIdent(),this.semicolon());for(var i=0;i<this.labels.length;++i){var r=this.labels[i];if(null==t.label||r.name===t.label.name){if(null!=r.kind&&(n||"loop"===r.kind))break;if(t.label&&n)break}}return i===this.labels.length&&this.raise(t.start,"Unsyntactic "+e),this.finishNode(t,n?"BreakStatement":"ContinueStatement")},X.parseDebuggerStatement=function(t){return this.next(),this.semicolon(),this.finishNode(t,"DebuggerStatement")},X.parseDoStatement=function(t){return this.next(),this.labels.push(Q),t.body=this.parseStatement("do"),this.labels.pop(),this.expect(b._while),t.test=this.parseParenExpression(),this.options.ecmaVersion>=6?this.eat(b.semi):this.semicolon(),this.finishNode(t,"DoWhileStatement")},X.parseForStatement=function(t){this.next();var e=this.options.ecmaVersion>=9&&(this.inAsync||!this.inFunction&&this.options.allowAwaitOutsideFunction)&&this.eatContextual("await")?this.lastTokStart:-1;if(this.labels.push(Q),this.enterScope(0),this.expect(b.parenL),this.type===b.semi)return e>-1&&this.unexpected(e),this.parseFor(t,null);var n=this.isLet();if(this.type===b._var||this.type===b._const||n){var i=this.startNode(),r=n?"let":this.value;return this.next(),this.parseVar(i,!0,r),this.finishNode(i,"VariableDeclaration"),!(this.type===b._in||this.options.ecmaVersion>=6&&this.isContextual("of"))||1!==i.declarations.length||"var"!==r&&i.declarations[0].init?(e>-1&&this.unexpected(e),this.parseFor(t,i)):(this.options.ecmaVersion>=9&&(this.type===b._in?e>-1&&this.unexpected(e):t.await=e>-1),this.parseForIn(t,i))}var s=new Z,a=this.parseExpression(!0,s);return this.type===b._in||this.options.ecmaVersion>=6&&this.isContextual("of")?(this.options.ecmaVersion>=9&&(this.type===b._in?e>-1&&this.unexpected(e):t.await=e>-1),this.toAssignable(a,!1,s),this.checkLVal(a),this.parseForIn(t,a)):(this.checkExpressionErrors(s,!0),e>-1&&this.unexpected(e),this.parseFor(t,a))},X.parseFunctionStatement=function(t,e,n){return this.next(),this.parseFunction(t,Y|(n?0:tt),!1,e)},X.parseIfStatement=function(t){return this.next(),t.test=this.parseParenExpression(),t.consequent=this.parseStatement("if"),t.alternate=this.eat(b._else)?this.parseStatement("if"):null,this.finishNode(t,"IfStatement")},X.parseReturnStatement=function(t){return this.inFunction||this.options.allowReturnOutsideFunction||this.raise(this.start,"'return' outside of function"),this.next(),this.eat(b.semi)||this.insertSemicolon()?t.argument=null:(t.argument=this.parseExpression(),this.semicolon()),this.finishNode(t,"ReturnStatement")},X.parseSwitchStatement=function(t){var e;this.next(),t.discriminant=this.parseParenExpression(),t.cases=[],this.expect(b.braceL),this.labels.push(K),this.enterScope(0);for(var n=!1;this.type!==b.braceR;)if(this.type===b._case||this.type===b._default){var i=this.type===b._case;e&&this.finishNode(e,"SwitchCase"),t.cases.push(e=this.startNode()),e.consequent=[],this.next(),i?e.test=this.parseExpression():(n&&this.raiseRecoverable(this.lastTokStart,"Multiple default clauses"),n=!0,e.test=null),this.expect(b.colon)}else e||this.unexpected(),e.consequent.push(this.parseStatement(null));return this.exitScope(),e&&this.finishNode(e,"SwitchCase"),this.next(),this.labels.pop(),this.finishNode(t,"SwitchStatement")},X.parseThrowStatement=function(t){return this.next(),C.test(this.input.slice(this.lastTokEnd,this.start))&&this.raise(this.lastTokEnd,"Illegal newline after throw"),t.argument=this.parseExpression(),this.semicolon(),this.finishNode(t,"ThrowStatement")};var J=[];X.parseTryStatement=function(t){if(this.next(),t.block=this.parseBlock(),t.handler=null,this.type===b._catch){var e=this.startNode();if(this.next(),this.eat(b.parenL)){e.param=this.parseBindingAtom();var n="Identifier"===e.param.type;this.enterScope(n?32:0),this.checkLVal(e.param,n?4:2),this.expect(b.parenR)}else this.options.ecmaVersion<10&&this.unexpected(),e.param=null,this.enterScope(0);e.body=this.parseBlock(!1),this.exitScope(),t.handler=this.finishNode(e,"CatchClause")}return t.finalizer=this.eat(b._finally)?this.parseBlock():null,t.handler||t.finalizer||this.raise(t.start,"Missing catch or finally clause"),this.finishNode(t,"TryStatement")},X.parseVarStatement=function(t,e){return this.next(),this.parseVar(t,!1,e),this.semicolon(),this.finishNode(t,"VariableDeclaration")},X.parseWhileStatement=function(t){return this.next(),t.test=this.parseParenExpression(),this.labels.push(Q),t.body=this.parseStatement("while"),this.labels.pop(),this.finishNode(t,"WhileStatement")},X.parseWithStatement=function(t){return this.strict&&this.raise(this.start,"'with' in strict mode"),this.next(),t.object=this.parseParenExpression(),t.body=this.parseStatement("with"),this.finishNode(t,"WithStatement")},X.parseEmptyStatement=function(t){return this.next(),this.finishNode(t,"EmptyStatement")},X.parseLabeledStatement=function(t,e,n,i){for(var r=0,s=this.labels;r<s.length;r+=1){s[r].name===e&&this.raise(n.start,"Label '"+e+"' is already declared")}for(var a=this.type.isLoop?"loop":this.type===b._switch?"switch":null,o=this.labels.length-1;o>=0;o--){var h=this.labels[o];if(h.statementStart!==t.start)break;h.statementStart=this.start,h.kind=a}return this.labels.push({name:e,kind:a,statementStart:this.start}),t.body=this.parseStatement(i?-1===i.indexOf("label")?i+"label":i:"label"),this.labels.pop(),t.label=n,this.finishNode(t,"LabeledStatement")},X.parseExpressionStatement=function(t,e){return t.expression=e,this.semicolon(),this.finishNode(t,"ExpressionStatement")},X.parseBlock=function(t,e){for(void 0===t&&(t=!0),void 0===e&&(e=this.startNode()),e.body=[],this.expect(b.braceL),t&&this.enterScope(0);!this.eat(b.braceR);){var n=this.parseStatement(null);e.body.push(n)}return t&&this.exitScope(),this.finishNode(e,"BlockStatement")},X.parseFor=function(t,e){return t.init=e,this.expect(b.semi),t.test=this.type===b.semi?null:this.parseExpression(),this.expect(b.semi),t.update=this.type===b.parenR?null:this.parseExpression(),this.expect(b.parenR),t.body=this.parseStatement("for"),this.exitScope(),this.labels.pop(),this.finishNode(t,"ForStatement")},X.parseForIn=function(t,e){var n=this.type===b._in?"ForInStatement":"ForOfStatement";return this.next(),"ForInStatement"===n&&("AssignmentPattern"===e.type||"VariableDeclaration"===e.type&&null!=e.declarations[0].init&&(this.strict||"Identifier"!==e.declarations[0].id.type))&&this.raise(e.start,"Invalid assignment in for-in loop head"),t.left=e,t.right="ForInStatement"===n?this.parseExpression():this.parseMaybeAssign(),this.expect(b.parenR),t.body=this.parseStatement("for"),this.exitScope(),this.labels.pop(),this.finishNode(t,n)},X.parseVar=function(t,e,n){for(t.declarations=[],t.kind=n;;){var i=this.startNode();if(this.parseVarId(i,n),this.eat(b.eq)?i.init=this.parseMaybeAssign(e):"const"!==n||this.type===b._in||this.options.ecmaVersion>=6&&this.isContextual("of")?"Identifier"===i.id.type||e&&(this.type===b._in||this.isContextual("of"))?i.init=null:this.raise(this.lastTokEnd,"Complex binding patterns require an initialization value"):this.unexpected(),t.declarations.push(this.finishNode(i,"VariableDeclarator")),!this.eat(b.comma))break}return t},X.parseVarId=function(t,e){"const"!==e&&"let"!==e||!this.isContextual("let")||this.raiseRecoverable(this.start,"let is disallowed as a lexically bound name"),t.id=this.parseBindingAtom(),this.checkLVal(t.id,"var"===e?1:2,!1)};var Y=1,tt=2;X.parseFunction=function(t,e,n,i){this.initFunction(t),(this.options.ecmaVersion>=9||this.options.ecmaVersion>=6&&!i)&&(this.type===b.star&&e&tt&&this.unexpected(),t.generator=this.eat(b.star)),this.options.ecmaVersion>=8&&(t.async=!!i),e&Y&&(t.id=4&e&&this.type!==b.name?null:this.parseIdent(),!t.id||e&tt||this.checkLVal(t.id,this.strict||t.generator||t.async?this.treatFunctionsAsVar?1:2:3));var r=this.yieldPos,s=this.awaitPos,a=this.awaitIdentPos;return this.yieldPos=0,this.awaitPos=0,this.awaitIdentPos=0,this.enterScope(H(t.async,t.generator)),e&Y||(t.id=this.type===b.name?this.parseIdent():null),this.parseFunctionParams(t),this.parseFunctionBody(t,n,!1),this.yieldPos=r,this.awaitPos=s,this.awaitIdentPos=a,this.finishNode(t,e&Y?"FunctionDeclaration":"FunctionExpression")},X.parseFunctionParams=function(t){this.expect(b.parenL),t.params=this.parseBindingList(b.parenR,!1,this.options.ecmaVersion>=8),this.checkYieldAwaitInDefaultParams()},X.parseClass=function(t,e){this.next();var n=this.strict;this.strict=!0,this.parseClassId(t,e),this.parseClassSuper(t);var i=this.startNode(),r=!1;for(i.body=[],this.expect(b.braceL);!this.eat(b.braceR);){var s=this.parseClassElement(null!==t.superClass);s&&(i.body.push(s),"MethodDefinition"===s.type&&"constructor"===s.kind&&(r&&this.raise(s.start,"Duplicate constructor in the same class"),r=!0))}return t.body=this.finishNode(i,"ClassBody"),this.strict=n,this.finishNode(t,e?"ClassDeclaration":"ClassExpression")},X.parseClassElement=function(t){var e=this;if(this.eat(b.semi))return null;var n=this.startNode(),i=function(t,i){void 0===i&&(i=!1);var r=e.start,s=e.startLoc;return!!e.eatContextual(t)&&(!(e.type===b.parenL||i&&e.canInsertSemicolon())||(n.key&&e.unexpected(),n.computed=!1,n.key=e.startNodeAt(r,s),n.key.name=t,e.finishNode(n.key,"Identifier"),!1))};n.kind="method",n.static=i("static");var r=this.eat(b.star),s=!1;r||(this.options.ecmaVersion>=8&&i("async",!0)?(s=!0,r=this.options.ecmaVersion>=9&&this.eat(b.star)):i("get")?n.kind="get":i("set")&&(n.kind="set")),n.key||this.parsePropertyName(n);var a=n.key,o=!1;return n.computed||n.static||!("Identifier"===a.type&&"constructor"===a.name||"Literal"===a.type&&"constructor"===a.value)?n.static&&"Identifier"===a.type&&"prototype"===a.name&&this.raise(a.start,"Classes may not have a static property named prototype"):("method"!==n.kind&&this.raise(a.start,"Constructor can't have get/set modifier"),r&&this.raise(a.start,"Constructor can't be a generator"),s&&this.raise(a.start,"Constructor can't be an async method"),n.kind="constructor",o=t),this.parseClassMethod(n,r,s,o),"get"===n.kind&&0!==n.value.params.length&&this.raiseRecoverable(n.value.start,"getter should have no params"),"set"===n.kind&&1!==n.value.params.length&&this.raiseRecoverable(n.value.start,"setter should have exactly one param"),"set"===n.kind&&"RestElement"===n.value.params[0].type&&this.raiseRecoverable(n.value.params[0].start,"Setter cannot use rest params"),n},X.parseClassMethod=function(t,e,n,i){return t.value=this.parseMethod(e,n,i),this.finishNode(t,"MethodDefinition")},X.parseClassId=function(t,e){this.type===b.name?(t.id=this.parseIdent(),e&&this.checkLVal(t.id,2,!1)):(!0===e&&this.unexpected(),t.id=null)},X.parseClassSuper=function(t){t.superClass=this.eat(b._extends)?this.parseExprSubscripts():null},X.parseExport=function(t,e){if(this.next(),this.eat(b.star))return this.expectContextual("from"),this.type!==b.string&&this.unexpected(),t.source=this.parseExprAtom(),this.semicolon(),this.finishNode(t,"ExportAllDeclaration");if(this.eat(b._default)){var n;if(this.checkExport(e,"default",this.lastTokStart),this.type===b._function||(n=this.isAsyncFunction())){var i=this.startNode();this.next(),n&&this.next(),t.declaration=this.parseFunction(i,4|Y,!1,n)}else if(this.type===b._class){var r=this.startNode();t.declaration=this.parseClass(r,"nullableID")}else t.declaration=this.parseMaybeAssign(),this.semicolon();return this.finishNode(t,"ExportDefaultDeclaration")}if(this.shouldParseExportStatement())t.declaration=this.parseStatement(null),"VariableDeclaration"===t.declaration.type?this.checkVariableExport(e,t.declaration.declarations):this.checkExport(e,t.declaration.id.name,t.declaration.id.start),t.specifiers=[],t.source=null;else{if(t.declaration=null,t.specifiers=this.parseExportSpecifiers(e),this.eatContextual("from"))this.type!==b.string&&this.unexpected(),t.source=this.parseExprAtom();else{for(var s=0,a=t.specifiers;s<a.length;s+=1){var o=a[s];this.checkUnreserved(o.local),this.checkLocalExport(o.local)}t.source=null}this.semicolon()}return this.finishNode(t,"ExportNamedDeclaration")},X.checkExport=function(t,e,n){t&&(N(t,e)&&this.raiseRecoverable(n,"Duplicate export '"+e+"'"),t[e]=!0)},X.checkPatternExport=function(t,e){var n=e.type;if("Identifier"===n)this.checkExport(t,e.name,e.start);else if("ObjectPattern"===n)for(var i=0,r=e.properties;i<r.length;i+=1){var s=r[i];this.checkPatternExport(t,s)}else if("ArrayPattern"===n)for(var a=0,o=e.elements;a<o.length;a+=1){var h=o[a];h&&this.checkPatternExport(t,h)}else"Property"===n?this.checkPatternExport(t,e.value):"AssignmentPattern"===n?this.checkPatternExport(t,e.left):"RestElement"===n?this.checkPatternExport(t,e.argument):"ParenthesizedExpression"===n&&this.checkPatternExport(t,e.expression)},X.checkVariableExport=function(t,e){if(t)for(var n=0,i=e;n<i.length;n+=1){var r=i[n];this.checkPatternExport(t,r.id)}},X.shouldParseExportStatement=function(){return"var"===this.type.keyword||"const"===this.type.keyword||"class"===this.type.keyword||"function"===this.type.keyword||this.isLet()||this.isAsyncFunction()},X.parseExportSpecifiers=function(t){var e=[],n=!0;for(this.expect(b.braceL);!this.eat(b.braceR);){if(n)n=!1;else if(this.expect(b.comma),this.afterTrailingComma(b.braceR))break;var i=this.startNode();i.local=this.parseIdent(!0),i.exported=this.eatContextual("as")?this.parseIdent(!0):i.local,this.checkExport(t,i.exported.name,i.exported.start),e.push(this.finishNode(i,"ExportSpecifier"))}return e},X.parseImport=function(t){return this.next(),this.type===b.string?(t.specifiers=J,t.source=this.parseExprAtom()):(t.specifiers=this.parseImportSpecifiers(),this.expectContextual("from"),t.source=this.type===b.string?this.parseExprAtom():this.unexpected()),this.semicolon(),this.finishNode(t,"ImportDeclaration")},X.parseImportSpecifiers=function(){var t=[],e=!0;if(this.type===b.name){var n=this.startNode();if(n.local=this.parseIdent(),this.checkLVal(n.local,2),t.push(this.finishNode(n,"ImportDefaultSpecifier")),!this.eat(b.comma))return t}if(this.type===b.star){var i=this.startNode();return this.next(),this.expectContextual("as"),i.local=this.parseIdent(),this.checkLVal(i.local,2),t.push(this.finishNode(i,"ImportNamespaceSpecifier")),t}for(this.expect(b.braceL);!this.eat(b.braceR);){if(e)e=!1;else if(this.expect(b.comma),this.afterTrailingComma(b.braceR))break;var r=this.startNode();r.imported=this.parseIdent(!0),this.eatContextual("as")?r.local=this.parseIdent():(this.checkUnreserved(r.imported),r.local=r.imported),this.checkLVal(r.local,2),t.push(this.finishNode(r,"ImportSpecifier"))}return t},X.adaptDirectivePrologue=function(t){for(var e=0;e<t.length&&this.isDirectiveCandidate(t[e]);++e)t[e].directive=t[e].expression.raw.slice(1,-1)},X.isDirectiveCandidate=function(t){return"ExpressionStatement"===t.type&&"Literal"===t.expression.type&&"string"==typeof t.expression.value&&('"'===this.input[t.start]||"'"===this.input[t.start])};var et=U.prototype;et.toAssignable=function(t,e,n){if(this.options.ecmaVersion>=6&&t)switch(t.type){case"Identifier":this.inAsync&&"await"===t.name&&this.raise(t.start,"Cannot use 'await' as identifier inside an async function");break;case"ObjectPattern":case"ArrayPattern":case"RestElement":break;case"ObjectExpression":t.type="ObjectPattern",n&&this.checkPatternErrors(n,!0);for(var i=0,r=t.properties;i<r.length;i+=1){var s=r[i];this.toAssignable(s,e),"RestElement"!==s.type||"ArrayPattern"!==s.argument.type&&"ObjectPattern"!==s.argument.type||this.raise(s.argument.start,"Unexpected token")}break;case"Property":"init"!==t.kind&&this.raise(t.key.start,"Object pattern can't contain getter or setter"),this.toAssignable(t.value,e);break;case"ArrayExpression":t.type="ArrayPattern",n&&this.checkPatternErrors(n,!0),this.toAssignableList(t.elements,e);break;case"SpreadElement":t.type="RestElement",this.toAssignable(t.argument,e),"AssignmentPattern"===t.argument.type&&this.raise(t.argument.start,"Rest elements cannot have a default value");break;case"AssignmentExpression":"="!==t.operator&&this.raise(t.left.end,"Only '=' operator can be used for specifying default value."),t.type="AssignmentPattern",delete t.operator,this.toAssignable(t.left,e);case"AssignmentPattern":break;case"ParenthesizedExpression":this.toAssignable(t.expression,e,n);break;case"MemberExpression":if(!e)break;default:this.raise(t.start,"Assigning to rvalue")}else n&&this.checkPatternErrors(n,!0);return t},et.toAssignableList=function(t,e){for(var n=t.length,i=0;i<n;i++){var r=t[i];r&&this.toAssignable(r,e)}if(n){var s=t[n-1];6===this.options.ecmaVersion&&e&&s&&"RestElement"===s.type&&"Identifier"!==s.argument.type&&this.unexpected(s.argument.start)}return t},et.parseSpread=function(t){var e=this.startNode();return this.next(),e.argument=this.parseMaybeAssign(!1,t),this.finishNode(e,"SpreadElement")},et.parseRestBinding=function(){var t=this.startNode();return this.next(),6===this.options.ecmaVersion&&this.type!==b.name&&this.unexpected(),t.argument=this.parseBindingAtom(),this.finishNode(t,"RestElement")},et.parseBindingAtom=function(){if(this.options.ecmaVersion>=6)switch(this.type){case b.bracketL:var t=this.startNode();return this.next(),t.elements=this.parseBindingList(b.bracketR,!0,!0),this.finishNode(t,"ArrayPattern");case b.braceL:return this.parseObj(!0)}return this.parseIdent()},et.parseBindingList=function(t,e,n){for(var i=[],r=!0;!this.eat(t);)if(r?r=!1:this.expect(b.comma),e&&this.type===b.comma)i.push(null);else{if(n&&this.afterTrailingComma(t))break;if(this.type===b.ellipsis){var s=this.parseRestBinding();this.parseBindingListItem(s),i.push(s),this.type===b.comma&&this.raise(this.start,"Comma is not permitted after the rest element"),this.expect(t);break}var a=this.parseMaybeDefault(this.start,this.startLoc);this.parseBindingListItem(a),i.push(a)}return i},et.parseBindingListItem=function(t){return t},et.parseMaybeDefault=function(t,e,n){if(n=n||this.parseBindingAtom(),this.options.ecmaVersion<6||!this.eat(b.eq))return n;var i=this.startNodeAt(t,e);return i.left=n,i.right=this.parseMaybeAssign(),this.finishNode(i,"AssignmentPattern")},et.checkLVal=function(t,e,n){switch(void 0===e&&(e=0),t.type){case"Identifier":this.strict&&this.reservedWordsStrictBind.test(t.name)&&this.raiseRecoverable(t.start,(e?"Binding ":"Assigning to ")+t.name+" in strict mode"),n&&(N(n,t.name)&&this.raiseRecoverable(t.start,"Argument name clash"),n[t.name]=!0),0!==e&&5!==e&&this.declareName(t.name,e,t.start);break;case"MemberExpression":e&&this.raiseRecoverable(t.start,"Binding member expression");break;case"ObjectPattern":for(var i=0,r=t.properties;i<r.length;i+=1){var s=r[i];this.checkLVal(s,e,n)}break;case"Property":this.checkLVal(t.value,e,n);break;case"ArrayPattern":for(var a=0,o=t.elements;a<o.length;a+=1){var h=o[a];h&&this.checkLVal(h,e,n)}break;case"AssignmentPattern":this.checkLVal(t.left,e,n);break;case"RestElement":this.checkLVal(t.argument,e,n);break;case"ParenthesizedExpression":this.checkLVal(t.expression,e,n);break;default:this.raise(t.start,(e?"Binding":"Assigning to")+" rvalue")}};var nt=U.prototype;nt.checkPropClash=function(t,e,n){if(!(this.options.ecmaVersion>=9&&"SpreadElement"===t.type||this.options.ecmaVersion>=6&&(t.computed||t.method||t.shorthand))){var i,r=t.key;switch(r.type){case"Identifier":i=r.name;break;case"Literal":i=String(r.value);break;default:return}var s=t.kind;if(this.options.ecmaVersion>=6)"__proto__"===i&&"init"===s&&(e.proto&&(n&&n.doubleProto<0?n.doubleProto=r.start:this.raiseRecoverable(r.start,"Redefinition of __proto__ property")),e.proto=!0);else{var a=e[i="$"+i];if(a)("init"===s?this.strict&&a.init||a.get||a.set:a.init||a[s])&&this.raiseRecoverable(r.start,"Redefinition of property");else a=e[i]={init:!1,get:!1,set:!1};a[s]=!0}}},nt.parseExpression=function(t,e){var n=this.start,i=this.startLoc,r=this.parseMaybeAssign(t,e);if(this.type===b.comma){var s=this.startNodeAt(n,i);for(s.expressions=[r];this.eat(b.comma);)s.expressions.push(this.parseMaybeAssign(t,e));return this.finishNode(s,"SequenceExpression")}return r},nt.parseMaybeAssign=function(t,e,n){if(this.isContextual("yield")){if(this.inGenerator)return this.parseYield(t);this.exprAllowed=!1}var i=!1,r=-1,s=-1,a=-1;e?(r=e.parenthesizedAssign,s=e.trailingComma,a=e.shorthandAssign,e.parenthesizedAssign=e.trailingComma=e.shorthandAssign=-1):(e=new Z,i=!0);var o=this.start,h=this.startLoc;this.type!==b.parenL&&this.type!==b.name||(this.potentialArrowAt=this.start);var u=this.parseMaybeConditional(t,e);if(n&&(u=n.call(this,u,o,h)),this.type.isAssign){var l=this.startNodeAt(o,h);return l.operator=this.value,l.left=this.type===b.eq?this.toAssignable(u,!1,e):u,i||Z.call(e),e.shorthandAssign=-1,this.checkLVal(u),this.next(),l.right=this.parseMaybeAssign(t),this.finishNode(l,"AssignmentExpression")}return i&&this.checkExpressionErrors(e,!0),r>-1&&(e.parenthesizedAssign=r),s>-1&&(e.trailingComma=s),a>-1&&(e.shorthandAssign=a),u},nt.parseMaybeConditional=function(t,e){var n=this.start,i=this.startLoc,r=this.parseExprOps(t,e);if(this.checkExpressionErrors(e))return r;if(this.eat(b.question)){var s=this.startNodeAt(n,i);return s.test=r,s.consequent=this.parseMaybeAssign(),this.expect(b.colon),s.alternate=this.parseMaybeAssign(t),this.finishNode(s,"ConditionalExpression")}return r},nt.parseExprOps=function(t,e){var n=this.start,i=this.startLoc,r=this.parseMaybeUnary(e,!1);return this.checkExpressionErrors(e)?r:r.start===n&&"ArrowFunctionExpression"===r.type?r:this.parseExprOp(r,n,i,-1,t)},nt.parseExprOp=function(t,e,n,i,r){var s=this.type.binop;if(null!=s&&(!r||this.type!==b._in)&&s>i){var a=this.type===b.logicalOR||this.type===b.logicalAND,o=this.value;this.next();var h=this.start,u=this.startLoc,l=this.parseExprOp(this.parseMaybeUnary(null,!1),h,u,s,r),c=this.buildBinary(e,n,t,l,o,a);return this.parseExprOp(c,e,n,i,r)}return t},nt.buildBinary=function(t,e,n,i,r,s){var a=this.startNodeAt(t,e);return a.left=n,a.operator=r,a.right=i,this.finishNode(a,s?"LogicalExpression":"BinaryExpression")},nt.parseMaybeUnary=function(t,e){var n,i=this.start,r=this.startLoc;if(this.isContextual("await")&&(this.inAsync||!this.inFunction&&this.options.allowAwaitOutsideFunction))n=this.parseAwait(),e=!0;else if(this.type.prefix){var s=this.startNode(),a=this.type===b.incDec;s.operator=this.value,s.prefix=!0,this.next(),s.argument=this.parseMaybeUnary(null,!0),this.checkExpressionErrors(t,!0),a?this.checkLVal(s.argument):this.strict&&"delete"===s.operator&&"Identifier"===s.argument.type?this.raiseRecoverable(s.start,"Deleting local variable in strict mode"):e=!0,n=this.finishNode(s,a?"UpdateExpression":"UnaryExpression")}else{if(n=this.parseExprSubscripts(t),this.checkExpressionErrors(t))return n;for(;this.type.postfix&&!this.canInsertSemicolon();){var o=this.startNodeAt(i,r);o.operator=this.value,o.prefix=!1,o.argument=n,this.checkLVal(n),this.next(),n=this.finishNode(o,"UpdateExpression")}}return!e&&this.eat(b.starstar)?this.buildBinary(i,r,n,this.parseMaybeUnary(null,!1),"**",!1):n},nt.parseExprSubscripts=function(t){var e=this.start,n=this.startLoc,i=this.parseExprAtom(t),r="ArrowFunctionExpression"===i.type&&")"!==this.input.slice(this.lastTokStart,this.lastTokEnd);if(this.checkExpressionErrors(t)||r)return i;var s=this.parseSubscripts(i,e,n);return t&&"MemberExpression"===s.type&&(t.parenthesizedAssign>=s.start&&(t.parenthesizedAssign=-1),t.parenthesizedBind>=s.start&&(t.parenthesizedBind=-1)),s},nt.parseSubscripts=function(t,e,n,i){for(var r=this.options.ecmaVersion>=8&&"Identifier"===t.type&&"async"===t.name&&this.lastTokEnd===t.end&&!this.canInsertSemicolon()&&"async"===this.input.slice(t.start,t.end);;){var s=this.parseSubscript(t,e,n,i,r);if(s===t||"ArrowFunctionExpression"===s.type)return s;t=s}},nt.parseSubscript=function(t,e,n,i,r){var s=this.eat(b.bracketL);if(s||this.eat(b.dot)){var a=this.startNodeAt(e,n);a.object=t,a.property=s?this.parseExpression():this.parseIdent(!0),a.computed=!!s,s&&this.expect(b.bracketR),t=this.finishNode(a,"MemberExpression")}else if(!i&&this.eat(b.parenL)){var o=new Z,h=this.yieldPos,u=this.awaitPos,l=this.awaitIdentPos;this.yieldPos=0,this.awaitPos=0,this.awaitIdentPos=0;var c=this.parseExprList(b.parenR,this.options.ecmaVersion>=8,!1,o);if(r&&!this.canInsertSemicolon()&&this.eat(b.arrow))return this.checkPatternErrors(o,!1),this.checkYieldAwaitInDefaultParams(),this.awaitIdentPos>0&&this.raise(this.awaitIdentPos,"Cannot use 'await' as identifier inside an async function"),this.yieldPos=h,this.awaitPos=u,this.awaitIdentPos=l,this.parseArrowExpression(this.startNodeAt(e,n),c,!0);this.checkExpressionErrors(o,!0),this.yieldPos=h||this.yieldPos,this.awaitPos=u||this.awaitPos,this.awaitIdentPos=l||this.awaitIdentPos;var f=this.startNodeAt(e,n);f.callee=t,f.arguments=c,t=this.finishNode(f,"CallExpression")}else if(this.type===b.backQuote){var d=this.startNodeAt(e,n);d.tag=t,d.quasi=this.parseTemplate({isTagged:!0}),t=this.finishNode(d,"TaggedTemplateExpression")}return t},nt.parseExprAtom=function(t){this.type===b.slash&&this.readRegexp();var e,n=this.potentialArrowAt===this.start;switch(this.type){case b._super:return this.allowSuper||this.raise(this.start,"'super' keyword outside a method"),e=this.startNode(),this.next(),this.type!==b.parenL||this.allowDirectSuper||this.raise(e.start,"super() call outside constructor of a subclass"),this.type!==b.dot&&this.type!==b.bracketL&&this.type!==b.parenL&&this.unexpected(),this.finishNode(e,"Super");case b._this:return e=this.startNode(),this.next(),this.finishNode(e,"ThisExpression");case b.name:var i=this.start,r=this.startLoc,s=this.containsEsc,a=this.parseIdent(!1);if(this.options.ecmaVersion>=8&&!s&&"async"===a.name&&!this.canInsertSemicolon()&&this.eat(b._function))return this.parseFunction(this.startNodeAt(i,r),0,!1,!0);if(n&&!this.canInsertSemicolon()){if(this.eat(b.arrow))return this.parseArrowExpression(this.startNodeAt(i,r),[a],!1);if(this.options.ecmaVersion>=8&&"async"===a.name&&this.type===b.name&&!s)return a=this.parseIdent(!1),!this.canInsertSemicolon()&&this.eat(b.arrow)||this.unexpected(),this.parseArrowExpression(this.startNodeAt(i,r),[a],!0)}return a;case b.regexp:var o=this.value;return(e=this.parseLiteral(o.value)).regex={pattern:o.pattern,flags:o.flags},e;case b.num:case b.string:return this.parseLiteral(this.value);case b._null:case b._true:case b._false:return(e=this.startNode()).value=this.type===b._null?null:this.type===b._true,e.raw=this.type.keyword,this.next(),this.finishNode(e,"Literal");case b.parenL:var h=this.start,u=this.parseParenAndDistinguishExpression(n);return t&&(t.parenthesizedAssign<0&&!this.isSimpleAssignTarget(u)&&(t.parenthesizedAssign=h),t.parenthesizedBind<0&&(t.parenthesizedBind=h)),u;case b.bracketL:return e=this.startNode(),this.next(),e.elements=this.parseExprList(b.bracketR,!0,!0,t),this.finishNode(e,"ArrayExpression");case b.braceL:return this.parseObj(!1,t);case b._function:return e=this.startNode(),this.next(),this.parseFunction(e,0);case b._class:return this.parseClass(this.startNode(),!1);case b._new:return this.parseNew();case b.backQuote:return this.parseTemplate();default:this.unexpected()}},nt.parseLiteral=function(t){var e=this.startNode();return e.value=t,e.raw=this.input.slice(this.start,this.end),this.next(),this.finishNode(e,"Literal")},nt.parseParenExpression=function(){this.expect(b.parenL);var t=this.parseExpression();return this.expect(b.parenR),t},nt.parseParenAndDistinguishExpression=function(t){var e,n=this.start,i=this.startLoc,r=this.options.ecmaVersion>=8;if(this.options.ecmaVersion>=6){this.next();var s,a=this.start,o=this.startLoc,h=[],u=!0,l=!1,c=new Z,f=this.yieldPos,d=this.awaitPos;for(this.yieldPos=0,this.awaitPos=0;this.type!==b.parenR;){if(u?u=!1:this.expect(b.comma),r&&this.afterTrailingComma(b.parenR,!0)){l=!0;break}if(this.type===b.ellipsis){s=this.start,h.push(this.parseParenItem(this.parseRestBinding())),this.type===b.comma&&this.raise(this.start,"Comma is not permitted after the rest element");break}h.push(this.parseMaybeAssign(!1,c,this.parseParenItem))}var p=this.start,g=this.startLoc;if(this.expect(b.parenR),t&&!this.canInsertSemicolon()&&this.eat(b.arrow))return this.checkPatternErrors(c,!1),this.checkYieldAwaitInDefaultParams(),this.yieldPos=f,this.awaitPos=d,this.parseParenArrowList(n,i,h);h.length&&!l||this.unexpected(this.lastTokStart),s&&this.unexpected(s),this.checkExpressionErrors(c,!0),this.yieldPos=f||this.yieldPos,this.awaitPos=d||this.awaitPos,h.length>1?((e=this.startNodeAt(a,o)).expressions=h,this.finishNodeAt(e,"SequenceExpression",p,g)):e=h[0]}else e=this.parseParenExpression();if(this.options.preserveParens){var v=this.startNodeAt(n,i);return v.expression=e,this.finishNode(v,"ParenthesizedExpression")}return e},nt.parseParenItem=function(t){return t},nt.parseParenArrowList=function(t,e,n){return this.parseArrowExpression(this.startNodeAt(t,e),n)};var it=[];nt.parseNew=function(){var t=this.startNode(),e=this.parseIdent(!0);if(this.options.ecmaVersion>=6&&this.eat(b.dot)){t.meta=e;var n=this.containsEsc;return t.property=this.parseIdent(!0),("target"!==t.property.name||n)&&this.raiseRecoverable(t.property.start,"The only valid meta property for new is new.target"),this.inNonArrowFunction()||this.raiseRecoverable(t.start,"new.target can only be used in functions"),this.finishNode(t,"MetaProperty")}var i=this.start,r=this.startLoc;return t.callee=this.parseSubscripts(this.parseExprAtom(),i,r,!0),this.eat(b.parenL)?t.arguments=this.parseExprList(b.parenR,this.options.ecmaVersion>=8,!1):t.arguments=it,this.finishNode(t,"NewExpression")},nt.parseTemplateElement=function(t){var e=t.isTagged,n=this.startNode();return this.type===b.invalidTemplate?(e||this.raiseRecoverable(this.start,"Bad escape sequence in untagged template literal"),n.value={raw:this.value,cooked:null}):n.value={raw:this.input.slice(this.start,this.end).replace(/\r\n?/g,"\n"),cooked:this.value},this.next(),n.tail=this.type===b.backQuote,this.finishNode(n,"TemplateElement")},nt.parseTemplate=function(t){void 0===t&&(t={});var e=t.isTagged;void 0===e&&(e=!1);var n=this.startNode();this.next(),n.expressions=[];var i=this.parseTemplateElement({isTagged:e});for(n.quasis=[i];!i.tail;)this.type===b.eof&&this.raise(this.pos,"Unterminated template literal"),this.expect(b.dollarBraceL),n.expressions.push(this.parseExpression()),this.expect(b.braceR),n.quasis.push(i=this.parseTemplateElement({isTagged:e}));return this.next(),this.finishNode(n,"TemplateLiteral")},nt.isAsyncProp=function(t){return!t.computed&&"Identifier"===t.key.type&&"async"===t.key.name&&(this.type===b.name||this.type===b.num||this.type===b.string||this.type===b.bracketL||this.type.keyword||this.options.ecmaVersion>=9&&this.type===b.star)&&!C.test(this.input.slice(this.lastTokEnd,this.start))},nt.parseObj=function(t,e){var n=this.startNode(),i=!0,r={};for(n.properties=[],this.next();!this.eat(b.braceR);){if(i)i=!1;else if(this.expect(b.comma),this.afterTrailingComma(b.braceR))break;var s=this.parseProperty(t,e);t||this.checkPropClash(s,r,e),n.properties.push(s)}return this.finishNode(n,t?"ObjectPattern":"ObjectExpression")},nt.parseProperty=function(t,e){var n,i,r,s,a=this.startNode();if(this.options.ecmaVersion>=9&&this.eat(b.ellipsis))return t?(a.argument=this.parseIdent(!1),this.type===b.comma&&this.raise(this.start,"Comma is not permitted after the rest element"),this.finishNode(a,"RestElement")):(this.type===b.parenL&&e&&(e.parenthesizedAssign<0&&(e.parenthesizedAssign=this.start),e.parenthesizedBind<0&&(e.parenthesizedBind=this.start)),a.argument=this.parseMaybeAssign(!1,e),this.type===b.comma&&e&&e.trailingComma<0&&(e.trailingComma=this.start),this.finishNode(a,"SpreadElement"));this.options.ecmaVersion>=6&&(a.method=!1,a.shorthand=!1,(t||e)&&(r=this.start,s=this.startLoc),t||(n=this.eat(b.star)));var o=this.containsEsc;return this.parsePropertyName(a),!t&&!o&&this.options.ecmaVersion>=8&&!n&&this.isAsyncProp(a)?(i=!0,n=this.options.ecmaVersion>=9&&this.eat(b.star),this.parsePropertyName(a,e)):i=!1,this.parsePropertyValue(a,t,n,i,r,s,e,o),this.finishNode(a,"Property")},nt.parsePropertyValue=function(t,e,n,i,r,s,a,o){if((n||i)&&this.type===b.colon&&this.unexpected(),this.eat(b.colon))t.value=e?this.parseMaybeDefault(this.start,this.startLoc):this.parseMaybeAssign(!1,a),t.kind="init";else if(this.options.ecmaVersion>=6&&this.type===b.parenL)e&&this.unexpected(),t.kind="init",t.method=!0,t.value=this.parseMethod(n,i);else if(e||o||!(this.options.ecmaVersion>=5)||t.computed||"Identifier"!==t.key.type||"get"!==t.key.name&&"set"!==t.key.name||this.type===b.comma||this.type===b.braceR)this.options.ecmaVersion>=6&&!t.computed&&"Identifier"===t.key.type?((n||i)&&this.unexpected(),this.checkUnreserved(t.key),"await"!==t.key.name||this.awaitIdentPos||(this.awaitIdentPos=r),t.kind="init",e?t.value=this.parseMaybeDefault(r,s,t.key):this.type===b.eq&&a?(a.shorthandAssign<0&&(a.shorthandAssign=this.start),t.value=this.parseMaybeDefault(r,s,t.key)):t.value=t.key,t.shorthand=!0):this.unexpected();else{(n||i)&&this.unexpected(),t.kind=t.key.name,this.parsePropertyName(t),t.value=this.parseMethod(!1);var h="get"===t.kind?0:1;if(t.value.params.length!==h){var u=t.value.start;"get"===t.kind?this.raiseRecoverable(u,"getter should have no params"):this.raiseRecoverable(u,"setter should have exactly one param")}else"set"===t.kind&&"RestElement"===t.value.params[0].type&&this.raiseRecoverable(t.value.params[0].start,"Setter cannot use rest params")}},nt.parsePropertyName=function(t){if(this.options.ecmaVersion>=6){if(this.eat(b.bracketL))return t.computed=!0,t.key=this.parseMaybeAssign(),this.expect(b.bracketR),t.key;t.computed=!1}return t.key=this.type===b.num||this.type===b.string?this.parseExprAtom():this.parseIdent(!0)},nt.initFunction=function(t){t.id=null,this.options.ecmaVersion>=6&&(t.generator=t.expression=!1),this.options.ecmaVersion>=8&&(t.async=!1)},nt.parseMethod=function(t,e,n){var i=this.startNode(),r=this.yieldPos,s=this.awaitPos,a=this.awaitIdentPos;return this.initFunction(i),this.options.ecmaVersion>=6&&(i.generator=t),this.options.ecmaVersion>=8&&(i.async=!!e),this.yieldPos=0,this.awaitPos=0,this.awaitIdentPos=0,this.enterScope(64|H(e,i.generator)|(n?128:0)),this.expect(b.parenL),i.params=this.parseBindingList(b.parenR,!1,this.options.ecmaVersion>=8),this.checkYieldAwaitInDefaultParams(),this.parseFunctionBody(i,!1,!0),this.yieldPos=r,this.awaitPos=s,this.awaitIdentPos=a,this.finishNode(i,"FunctionExpression")},nt.parseArrowExpression=function(t,e,n){var i=this.yieldPos,r=this.awaitPos,s=this.awaitIdentPos;return this.enterScope(16|H(n,!1)),this.initFunction(t),this.options.ecmaVersion>=8&&(t.async=!!n),this.yieldPos=0,this.awaitPos=0,this.awaitIdentPos=0,t.params=this.toAssignableList(e,!0),this.parseFunctionBody(t,!0,!1),this.yieldPos=i,this.awaitPos=r,this.awaitIdentPos=s,this.finishNode(t,"ArrowFunctionExpression")},nt.parseFunctionBody=function(t,e,n){var i=e&&this.type!==b.braceL,r=this.strict,s=!1;if(i)t.body=this.parseMaybeAssign(),t.expression=!0,this.checkParams(t,!1);else{var a=this.options.ecmaVersion>=7&&!this.isSimpleParamList(t.params);r&&!a||(s=this.strictDirective(this.end))&&a&&this.raiseRecoverable(t.start,"Illegal 'use strict' directive in function with non-simple parameter list");var o=this.labels;this.labels=[],s&&(this.strict=!0),this.checkParams(t,!r&&!s&&!e&&!n&&this.isSimpleParamList(t.params)),t.body=this.parseBlock(!1),t.expression=!1,this.adaptDirectivePrologue(t.body.body),this.labels=o}this.exitScope(),this.strict&&t.id&&this.checkLVal(t.id,5),this.strict=r},nt.isSimpleParamList=function(t){for(var e=0,n=t;e<n.length;e+=1){if("Identifier"!==n[e].type)return!1}return!0},nt.checkParams=function(t,e){for(var n={},i=0,r=t.params;i<r.length;i+=1){var s=r[i];this.checkLVal(s,1,e?null:n)}},nt.parseExprList=function(t,e,n,i){for(var r=[],s=!0;!this.eat(t);){if(s)s=!1;else if(this.expect(b.comma),e&&this.afterTrailingComma(t))break;var a=void 0;n&&this.type===b.comma?a=null:this.type===b.ellipsis?(a=this.parseSpread(i),i&&this.type===b.comma&&i.trailingComma<0&&(i.trailingComma=this.start)):a=this.parseMaybeAssign(!1,i),r.push(a)}return r},nt.checkUnreserved=function(t){var e=t.start,n=t.end,i=t.name;(this.inGenerator&&"yield"===i&&this.raiseRecoverable(e,"Cannot use 'yield' as identifier inside a generator"),this.inAsync&&"await"===i&&this.raiseRecoverable(e,"Cannot use 'await' as identifier inside an async function"),this.keywords.test(i)&&this.raise(e,"Unexpected keyword '"+i+"'"),this.options.ecmaVersion<6&&-1!==this.input.slice(e,n).indexOf("\\"))||(this.strict?this.reservedWordsStrict:this.reservedWords).test(i)&&(this.inAsync||"await"!==i||this.raiseRecoverable(e,"Cannot use keyword 'await' outside an async function"),this.raiseRecoverable(e,"The keyword '"+i+"' is reserved"))},nt.parseIdent=function(t,e){var n=this.startNode();return t&&"never"===this.options.allowReserved&&(t=!1),this.type===b.name?n.name=this.value:this.type.keyword?(n.name=this.type.keyword,"class"!==n.name&&"function"!==n.name||this.lastTokEnd===this.lastTokStart+1&&46===this.input.charCodeAt(this.lastTokStart)||this.context.pop()):this.unexpected(),this.next(),this.finishNode(n,"Identifier"),t||(this.checkUnreserved(n),"await"!==n.name||this.awaitIdentPos||(this.awaitIdentPos=n.start)),n},nt.parseYield=function(t){this.yieldPos||(this.yieldPos=this.start);var e=this.startNode();return this.next(),this.type===b.semi||this.canInsertSemicolon()||this.type!==b.star&&!this.type.startsExpr?(e.delegate=!1,e.argument=null):(e.delegate=this.eat(b.star),e.argument=this.parseMaybeAssign(t)),this.finishNode(e,"YieldExpression")},nt.parseAwait=function(){this.awaitPos||(this.awaitPos=this.start);var t=this.startNode();return this.next(),t.argument=this.parseMaybeUnary(null,!0),this.finishNode(t,"AwaitExpression")};var rt=U.prototype;rt.raise=function(t,e){var n=R(this.input,t);e+=" ("+n.line+":"+n.column+")";var i=new SyntaxError(e);throw i.pos=t,i.loc=n,i.raisedAt=this.pos,i},rt.raiseRecoverable=rt.raise,rt.curPosition=function(){if(this.options.locations)return new O(this.curLine,this.pos-this.lineStart)};var st=U.prototype,at=function(t){this.flags=t,this.var=[],this.lexical=[],this.functions=[]};st.enterScope=function(t){this.scopeStack.push(new at(t))},st.exitScope=function(){this.scopeStack.pop()},st.treatFunctionsAsVarInScope=function(t){return t.flags&V||!this.inModule&&1&t.flags},st.declareName=function(t,e,n){var i=!1;if(2===e){var r=this.currentScope();i=r.lexical.indexOf(t)>-1||r.functions.indexOf(t)>-1||r.var.indexOf(t)>-1,r.lexical.push(t),this.inModule&&1&r.flags&&delete this.undefinedExports[t]}else if(4===e){this.currentScope().lexical.push(t)}else if(3===e){var s=this.currentScope();i=this.treatFunctionsAsVar?s.lexical.indexOf(t)>-1:s.lexical.indexOf(t)>-1||s.var.indexOf(t)>-1,s.functions.push(t)}else for(var a=this.scopeStack.length-1;a>=0;--a){var o=this.scopeStack[a];if(o.lexical.indexOf(t)>-1&&!(32&o.flags&&o.lexical[0]===t)||!this.treatFunctionsAsVarInScope(o)&&o.functions.indexOf(t)>-1){i=!0;break}if(o.var.push(t),this.inModule&&1&o.flags&&delete this.undefinedExports[t],o.flags&B)break}i&&this.raiseRecoverable(n,"Identifier '"+t+"' has already been declared")},st.checkLocalExport=function(t){-1===this.scopeStack[0].lexical.indexOf(t.name)&&-1===this.scopeStack[0].var.indexOf(t.name)&&(this.undefinedExports[t.name]=t)},st.currentScope=function(){return this.scopeStack[this.scopeStack.length-1]},st.currentVarScope=function(){for(var t=this.scopeStack.length-1;;t--){var e=this.scopeStack[t];if(e.flags&B)return e}},st.currentThisScope=function(){for(var t=this.scopeStack.length-1;;t--){var e=this.scopeStack[t];if(e.flags&B&&!(16&e.flags))return e}};var ot=function(t,e,n){this.type="",this.start=e,this.end=0,t.options.locations&&(this.loc=new D(t,n)),t.options.directSourceFile&&(this.sourceFile=t.options.directSourceFile),t.options.ranges&&(this.range=[e,0])},ht=U.prototype;function ut(t,e,n,i){return t.type=e,t.end=n,this.options.locations&&(t.loc.end=i),this.options.ranges&&(t.range[1]=n),t}ht.startNode=function(){return new ot(this,this.start,this.startLoc)},ht.startNodeAt=function(t,e){return new ot(this,t,e)},ht.finishNode=function(t,e){return ut.call(this,t,e,this.lastTokEnd,this.lastTokEndLoc)},ht.finishNodeAt=function(t,e,n,i){return ut.call(this,t,e,n,i)};var lt=function(t,e,n,i,r){this.token=t,this.isExpr=!!e,this.preserveSpace=!!n,this.override=i,this.generator=!!r},ct={b_stat:new lt("{",!1),b_expr:new lt("{",!0),b_tmpl:new lt("${",!1),p_stat:new lt("(",!1),p_expr:new lt("(",!0),q_tmpl:new lt("`",!0,!0,function(t){return t.tryReadTemplateToken()}),f_stat:new lt("function",!1),f_expr:new lt("function",!0),f_expr_gen:new lt("function",!0,!1,null,!0),f_gen:new lt("function",!1,!1,null,!0)},ft=U.prototype;ft.initialContext=function(){return[ct.b_stat]},ft.braceIsBlock=function(t){var e=this.curContext();return e===ct.f_expr||e===ct.f_stat||(t!==b.colon||e!==ct.b_stat&&e!==ct.b_expr?t===b._return||t===b.name&&this.exprAllowed?C.test(this.input.slice(this.lastTokEnd,this.start)):t===b._else||t===b.semi||t===b.eof||t===b.parenR||t===b.arrow||(t===b.braceL?e===ct.b_stat:t!==b._var&&t!==b._const&&t!==b.name&&!this.exprAllowed):!e.isExpr)},ft.inGeneratorContext=function(){for(var t=this.context.length-1;t>=1;t--){var e=this.context[t];if("function"===e.token)return e.generator}return!1},ft.updateContext=function(t){var e,n=this.type;n.keyword&&t===b.dot?this.exprAllowed=!1:(e=n.updateContext)?e.call(this,t):this.exprAllowed=n.beforeExpr},b.parenR.updateContext=b.braceR.updateContext=function(){if(1!==this.context.length){var t=this.context.pop();t===ct.b_stat&&"function"===this.curContext().token&&(t=this.context.pop()),this.exprAllowed=!t.isExpr}else this.exprAllowed=!0},b.braceL.updateContext=function(t){this.context.push(this.braceIsBlock(t)?ct.b_stat:ct.b_expr),this.exprAllowed=!0},b.dollarBraceL.updateContext=function(){this.context.push(ct.b_tmpl),this.exprAllowed=!0},b.parenL.updateContext=function(t){var e=t===b._if||t===b._for||t===b._with||t===b._while;this.context.push(e?ct.p_stat:ct.p_expr),this.exprAllowed=!0},b.incDec.updateContext=function(){},b._function.updateContext=b._class.updateContext=function(t){!t.beforeExpr||t===b.semi||t===b._else||t===b._return&&C.test(this.input.slice(this.lastTokEnd,this.start))||(t===b.colon||t===b.braceL)&&this.curContext()===ct.b_stat?this.context.push(ct.f_stat):this.context.push(ct.f_expr),this.exprAllowed=!1},b.backQuote.updateContext=function(){this.curContext()===ct.q_tmpl?this.context.pop():this.context.push(ct.q_tmpl),this.exprAllowed=!1},b.star.updateContext=function(t){if(t===b._function){var e=this.context.length-1;this.context[e]===ct.f_expr?this.context[e]=ct.f_expr_gen:this.context[e]=ct.f_gen}this.exprAllowed=!0},b.name.updateContext=function(t){var e=!1;this.options.ecmaVersion>=6&&t!==b.dot&&("of"===this.value&&!this.exprAllowed||"yield"===this.value&&this.inGeneratorContext())&&(e=!0),this.exprAllowed=e};var dt="ASCII ASCII_Hex_Digit AHex Alphabetic Alpha Any Assigned Bidi_Control Bidi_C Bidi_Mirrored Bidi_M Case_Ignorable CI Cased Changes_When_Casefolded CWCF Changes_When_Casemapped CWCM Changes_When_Lowercased CWL Changes_When_NFKC_Casefolded CWKCF Changes_When_Titlecased CWT Changes_When_Uppercased CWU Dash Default_Ignorable_Code_Point DI Deprecated Dep Diacritic Dia Emoji Emoji_Component Emoji_Modifier Emoji_Modifier_Base Emoji_Presentation Extender Ext Grapheme_Base Gr_Base Grapheme_Extend Gr_Ext Hex_Digit Hex IDS_Binary_Operator IDSB IDS_Trinary_Operator IDST ID_Continue IDC ID_Start IDS Ideographic Ideo Join_Control Join_C Logical_Order_Exception LOE Lowercase Lower Math Noncharacter_Code_Point NChar Pattern_Syntax Pat_Syn Pattern_White_Space Pat_WS Quotation_Mark QMark Radical Regional_Indicator RI Sentence_Terminal STerm Soft_Dotted SD Terminal_Punctuation Term Unified_Ideograph UIdeo Uppercase Upper Variation_Selector VS White_Space space XID_Continue XIDC XID_Start XIDS",pt={9:dt,10:dt+" Extended_Pictographic"},gt="Cased_Letter LC Close_Punctuation Pe Connector_Punctuation Pc Control Cc cntrl Currency_Symbol Sc Dash_Punctuation Pd Decimal_Number Nd digit Enclosing_Mark Me Final_Punctuation Pf Format Cf Initial_Punctuation Pi Letter L Letter_Number Nl Line_Separator Zl Lowercase_Letter Ll Mark M Combining_Mark Math_Symbol Sm Modifier_Letter Lm Modifier_Symbol Sk Nonspacing_Mark Mn Number N Open_Punctuation Ps Other C Other_Letter Lo Other_Number No Other_Punctuation Po Other_Symbol So Paragraph_Separator Zp Private_Use Co Punctuation P punct Separator Z Space_Separator Zs Spacing_Mark Mc Surrogate Cs Symbol S Titlecase_Letter Lt Unassigned Cn Uppercase_Letter Lu",vt="Adlam Adlm Ahom Ahom Anatolian_Hieroglyphs Hluw Arabic Arab Armenian Armn Avestan Avst Balinese Bali Bamum Bamu Bassa_Vah Bass Batak Batk Bengali Beng Bhaiksuki Bhks Bopomofo Bopo Brahmi Brah Braille Brai Buginese Bugi Buhid Buhd Canadian_Aboriginal Cans Carian Cari Caucasian_Albanian Aghb Chakma Cakm Cham Cham Cherokee Cher Common Zyyy Coptic Copt Qaac Cuneiform Xsux Cypriot Cprt Cyrillic Cyrl Deseret Dsrt Devanagari Deva Duployan Dupl Egyptian_Hieroglyphs Egyp Elbasan Elba Ethiopic Ethi Georgian Geor Glagolitic Glag Gothic Goth Grantha Gran Greek Grek Gujarati Gujr Gurmukhi Guru Han Hani Hangul Hang Hanunoo Hano Hatran Hatr Hebrew Hebr Hiragana Hira Imperial_Aramaic Armi Inherited Zinh Qaai Inscriptional_Pahlavi Phli Inscriptional_Parthian Prti Javanese Java Kaithi Kthi Kannada Knda Katakana Kana Kayah_Li Kali Kharoshthi Khar Khmer Khmr Khojki Khoj Khudawadi Sind Lao Laoo Latin Latn Lepcha Lepc Limbu Limb Linear_A Lina Linear_B Linb Lisu Lisu Lycian Lyci Lydian Lydi Mahajani Mahj Malayalam Mlym Mandaic Mand Manichaean Mani Marchen Marc Masaram_Gondi Gonm Meetei_Mayek Mtei Mende_Kikakui Mend Meroitic_Cursive Merc Meroitic_Hieroglyphs Mero Miao Plrd Modi Modi Mongolian Mong Mro Mroo Multani Mult Myanmar Mymr Nabataean Nbat New_Tai_Lue Talu Newa Newa Nko Nkoo Nushu Nshu Ogham Ogam Ol_Chiki Olck Old_Hungarian Hung Old_Italic Ital Old_North_Arabian Narb Old_Permic Perm Old_Persian Xpeo Old_South_Arabian Sarb Old_Turkic Orkh Oriya Orya Osage Osge Osmanya Osma Pahawh_Hmong Hmng Palmyrene Palm Pau_Cin_Hau Pauc Phags_Pa Phag Phoenician Phnx Psalter_Pahlavi Phlp Rejang Rjng Runic Runr Samaritan Samr Saurashtra Saur Sharada Shrd Shavian Shaw Siddham Sidd SignWriting Sgnw Sinhala Sinh Sora_Sompeng Sora Soyombo Soyo Sundanese Sund Syloti_Nagri Sylo Syriac Syrc Tagalog Tglg Tagbanwa Tagb Tai_Le Tale Tai_Tham Lana Tai_Viet Tavt Takri Takr Tamil Taml Tangut Tang Telugu Telu Thaana Thaa Thai Thai Tibetan Tibt Tifinagh Tfng Tirhuta Tirh Ugaritic Ugar Vai Vaii Warang_Citi Wara Yi Yiii Zanabazar_Square Zanb",_t={9:vt,10:vt+" Dogra Dogr Gunjala_Gondi Gong Hanifi_Rohingya Rohg Makasar Maka Medefaidrin Medf Old_Sogdian Sogo Sogdian Sogd"},mt={};function yt(t){var e=mt[t]={binary:M(pt[t]+" "+gt),nonBinary:{General_Category:M(gt),Script:M(_t[t])}};e.nonBinary.Script_Extensions=e.nonBinary.Script,e.nonBinary.gc=e.nonBinary.General_Category,e.nonBinary.sc=e.nonBinary.Script,e.nonBinary.scx=e.nonBinary.Script_Extensions}yt(9),yt(10);var xt=U.prototype,wt=function(t){this.parser=t,this.validFlags="gim"+(t.options.ecmaVersion>=6?"uy":"")+(t.options.ecmaVersion>=9?"s":""),this.unicodeProperties=mt[t.options.ecmaVersion>=10?10:t.options.ecmaVersion],this.source="",this.flags="",this.start=0,this.switchU=!1,this.switchN=!1,this.pos=0,this.lastIntValue=0,this.lastStringValue="",this.lastAssertionIsQuantifiable=!1,this.numCapturingParens=0,this.maxBackReference=0,this.groupNames=[],this.backReferenceNames=[]};function bt(t){return t<=65535?String.fromCharCode(t):(t-=65536,String.fromCharCode(55296+(t>>10),56320+(1023&t)))}function Ct(t){return 36===t||t>=40&&t<=43||46===t||63===t||t>=91&&t<=94||t>=123&&t<=125}function St(t){return t>=65&&t<=90||t>=97&&t<=122}function kt(t){return St(t)||95===t}function Tt(t){return kt(t)||At(t)}function At(t){return t>=48&&t<=57}function Et(t){return t>=48&&t<=57||t>=65&&t<=70||t>=97&&t<=102}function Pt(t){return t>=65&&t<=70?t-65+10:t>=97&&t<=102?t-97+10:t-48}function It(t){return t>=48&&t<=55}wt.prototype.reset=function(t,e,n){var i=-1!==n.indexOf("u");this.start=0|t,this.source=e+"",this.flags=n,this.switchU=i&&this.parser.options.ecmaVersion>=6,this.switchN=i&&this.parser.options.ecmaVersion>=9},wt.prototype.raise=function(t){this.parser.raiseRecoverable(this.start,"Invalid regular expression: /"+this.source+"/: "+t)},wt.prototype.at=function(t){var e=this.source,n=e.length;if(t>=n)return-1;var i=e.charCodeAt(t);return!this.switchU||i<=55295||i>=57344||t+1>=n?i:(i<<10)+e.charCodeAt(t+1)-56613888},wt.prototype.nextIndex=function(t){var e=this.source,n=e.length;if(t>=n)return n;var i=e.charCodeAt(t);return!this.switchU||i<=55295||i>=57344||t+1>=n?t+1:t+2},wt.prototype.current=function(){return this.at(this.pos)},wt.prototype.lookahead=function(){return this.at(this.nextIndex(this.pos))},wt.prototype.advance=function(){this.pos=this.nextIndex(this.pos)},wt.prototype.eat=function(t){return this.current()===t&&(this.advance(),!0)},xt.validateRegExpFlags=function(t){for(var e=t.validFlags,n=t.flags,i=0;i<n.length;i++){var r=n.charAt(i);-1===e.indexOf(r)&&this.raise(t.start,"Invalid regular expression flag"),n.indexOf(r,i+1)>-1&&this.raise(t.start,"Duplicate regular expression flag")}},xt.validateRegExpPattern=function(t){this.regexp_pattern(t),!t.switchN&&this.options.ecmaVersion>=9&&t.groupNames.length>0&&(t.switchN=!0,this.regexp_pattern(t))},xt.regexp_pattern=function(t){t.pos=0,t.lastIntValue=0,t.lastStringValue="",t.lastAssertionIsQuantifiable=!1,t.numCapturingParens=0,t.maxBackReference=0,t.groupNames.length=0,t.backReferenceNames.length=0,this.regexp_disjunction(t),t.pos!==t.source.length&&(t.eat(41)&&t.raise("Unmatched ')'"),(t.eat(93)||t.eat(125))&&t.raise("Lone quantifier brackets")),t.maxBackReference>t.numCapturingParens&&t.raise("Invalid escape");for(var e=0,n=t.backReferenceNames;e<n.length;e+=1){var i=n[e];-1===t.groupNames.indexOf(i)&&t.raise("Invalid named capture referenced")}},xt.regexp_disjunction=function(t){for(this.regexp_alternative(t);t.eat(124);)this.regexp_alternative(t);this.regexp_eatQuantifier(t,!0)&&t.raise("Nothing to repeat"),t.eat(123)&&t.raise("Lone quantifier brackets")},xt.regexp_alternative=function(t){for(;t.pos<t.source.length&&this.regexp_eatTerm(t););},xt.regexp_eatTerm=function(t){return this.regexp_eatAssertion(t)?(t.lastAssertionIsQuantifiable&&this.regexp_eatQuantifier(t)&&t.switchU&&t.raise("Invalid quantifier"),!0):!(t.switchU?!this.regexp_eatAtom(t):!this.regexp_eatExtendedAtom(t))&&(this.regexp_eatQuantifier(t),!0)},xt.regexp_eatAssertion=function(t){var e=t.pos;if(t.lastAssertionIsQuantifiable=!1,t.eat(94)||t.eat(36))return!0;if(t.eat(92)){if(t.eat(66)||t.eat(98))return!0;t.pos=e}if(t.eat(40)&&t.eat(63)){var n=!1;if(this.options.ecmaVersion>=9&&(n=t.eat(60)),t.eat(61)||t.eat(33))return this.regexp_disjunction(t),t.eat(41)||t.raise("Unterminated group"),t.lastAssertionIsQuantifiable=!n,!0}return t.pos=e,!1},xt.regexp_eatQuantifier=function(t,e){return void 0===e&&(e=!1),!!this.regexp_eatQuantifierPrefix(t,e)&&(t.eat(63),!0)},xt.regexp_eatQuantifierPrefix=function(t,e){return t.eat(42)||t.eat(43)||t.eat(63)||this.regexp_eatBracedQuantifier(t,e)},xt.regexp_eatBracedQuantifier=function(t,e){var n=t.pos;if(t.eat(123)){var i=0,r=-1;if(this.regexp_eatDecimalDigits(t)&&(i=t.lastIntValue,t.eat(44)&&this.regexp_eatDecimalDigits(t)&&(r=t.lastIntValue),t.eat(125)))return-1!==r&&r<i&&!e&&t.raise("numbers out of order in {} quantifier"),!0;t.switchU&&!e&&t.raise("Incomplete quantifier"),t.pos=n}return!1},xt.regexp_eatAtom=function(t){return this.regexp_eatPatternCharacters(t)||t.eat(46)||this.regexp_eatReverseSolidusAtomEscape(t)||this.regexp_eatCharacterClass(t)||this.regexp_eatUncapturingGroup(t)||this.regexp_eatCapturingGroup(t)},xt.regexp_eatReverseSolidusAtomEscape=function(t){var e=t.pos;if(t.eat(92)){if(this.regexp_eatAtomEscape(t))return!0;t.pos=e}return!1},xt.regexp_eatUncapturingGroup=function(t){var e=t.pos;if(t.eat(40)){if(t.eat(63)&&t.eat(58)){if(this.regexp_disjunction(t),t.eat(41))return!0;t.raise("Unterminated group")}t.pos=e}return!1},xt.regexp_eatCapturingGroup=function(t){if(t.eat(40)){if(this.options.ecmaVersion>=9?this.regexp_groupSpecifier(t):63===t.current()&&t.raise("Invalid group"),this.regexp_disjunction(t),t.eat(41))return t.numCapturingParens+=1,!0;t.raise("Unterminated group")}return!1},xt.regexp_eatExtendedAtom=function(t){return t.eat(46)||this.regexp_eatReverseSolidusAtomEscape(t)||this.regexp_eatCharacterClass(t)||this.regexp_eatUncapturingGroup(t)||this.regexp_eatCapturingGroup(t)||this.regexp_eatInvalidBracedQuantifier(t)||this.regexp_eatExtendedPatternCharacter(t)},xt.regexp_eatInvalidBracedQuantifier=function(t){return this.regexp_eatBracedQuantifier(t,!0)&&t.raise("Nothing to repeat"),!1},xt.regexp_eatSyntaxCharacter=function(t){var e=t.current();return!!Ct(e)&&(t.lastIntValue=e,t.advance(),!0)},xt.regexp_eatPatternCharacters=function(t){for(var e=t.pos,n=0;-1!==(n=t.current())&&!Ct(n);)t.advance();return t.pos!==e},xt.regexp_eatExtendedPatternCharacter=function(t){var e=t.current();return!(-1===e||36===e||e>=40&&e<=43||46===e||63===e||91===e||94===e||124===e)&&(t.advance(),!0)},xt.regexp_groupSpecifier=function(t){if(t.eat(63)){if(this.regexp_eatGroupName(t))return-1!==t.groupNames.indexOf(t.lastStringValue)&&t.raise("Duplicate capture group name"),void t.groupNames.push(t.lastStringValue);t.raise("Invalid group")}},xt.regexp_eatGroupName=function(t){if(t.lastStringValue="",t.eat(60)){if(this.regexp_eatRegExpIdentifierName(t)&&t.eat(62))return!0;t.raise("Invalid capture group name")}return!1},xt.regexp_eatRegExpIdentifierName=function(t){if(t.lastStringValue="",this.regexp_eatRegExpIdentifierStart(t)){for(t.lastStringValue+=bt(t.lastIntValue);this.regexp_eatRegExpIdentifierPart(t);)t.lastStringValue+=bt(t.lastIntValue);return!0}return!1},xt.regexp_eatRegExpIdentifierStart=function(t){var e=t.pos,n=t.current();return t.advance(),92===n&&this.regexp_eatRegExpUnicodeEscapeSequence(t)&&(n=t.lastIntValue),function(t){return p(t,!0)||36===t||95===t}(n)?(t.lastIntValue=n,!0):(t.pos=e,!1)},xt.regexp_eatRegExpIdentifierPart=function(t){var e=t.pos,n=t.current();return t.advance(),92===n&&this.regexp_eatRegExpUnicodeEscapeSequence(t)&&(n=t.lastIntValue),function(t){return g(t,!0)||36===t||95===t||8204===t||8205===t}(n)?(t.lastIntValue=n,!0):(t.pos=e,!1)},xt.regexp_eatAtomEscape=function(t){return!!(this.regexp_eatBackReference(t)||this.regexp_eatCharacterClassEscape(t)||this.regexp_eatCharacterEscape(t)||t.switchN&&this.regexp_eatKGroupName(t))||(t.switchU&&(99===t.current()&&t.raise("Invalid unicode escape"),t.raise("Invalid escape")),!1)},xt.regexp_eatBackReference=function(t){var e=t.pos;if(this.regexp_eatDecimalEscape(t)){var n=t.lastIntValue;if(t.switchU)return n>t.maxBackReference&&(t.maxBackReference=n),!0;if(n<=t.numCapturingParens)return!0;t.pos=e}return!1},xt.regexp_eatKGroupName=function(t){if(t.eat(107)){if(this.regexp_eatGroupName(t))return t.backReferenceNames.push(t.lastStringValue),!0;t.raise("Invalid named reference")}return!1},xt.regexp_eatCharacterEscape=function(t){return this.regexp_eatControlEscape(t)||this.regexp_eatCControlLetter(t)||this.regexp_eatZero(t)||this.regexp_eatHexEscapeSequence(t)||this.regexp_eatRegExpUnicodeEscapeSequence(t)||!t.switchU&&this.regexp_eatLegacyOctalEscapeSequence(t)||this.regexp_eatIdentityEscape(t)},xt.regexp_eatCControlLetter=function(t){var e=t.pos;if(t.eat(99)){if(this.regexp_eatControlLetter(t))return!0;t.pos=e}return!1},xt.regexp_eatZero=function(t){return 48===t.current()&&!At(t.lookahead())&&(t.lastIntValue=0,t.advance(),!0)},xt.regexp_eatControlEscape=function(t){var e=t.current();return 116===e?(t.lastIntValue=9,t.advance(),!0):110===e?(t.lastIntValue=10,t.advance(),!0):118===e?(t.lastIntValue=11,t.advance(),!0):102===e?(t.lastIntValue=12,t.advance(),!0):114===e&&(t.lastIntValue=13,t.advance(),!0)},xt.regexp_eatControlLetter=function(t){var e=t.current();return!!St(e)&&(t.lastIntValue=e%32,t.advance(),!0)},xt.regexp_eatRegExpUnicodeEscapeSequence=function(t){var e,n=t.pos;if(t.eat(117)){if(this.regexp_eatFixedHexDigits(t,4)){var i=t.lastIntValue;if(t.switchU&&i>=55296&&i<=56319){var r=t.pos;if(t.eat(92)&&t.eat(117)&&this.regexp_eatFixedHexDigits(t,4)){var s=t.lastIntValue;if(s>=56320&&s<=57343)return t.lastIntValue=1024*(i-55296)+(s-56320)+65536,!0}t.pos=r,t.lastIntValue=i}return!0}if(t.switchU&&t.eat(123)&&this.regexp_eatHexDigits(t)&&t.eat(125)&&((e=t.lastIntValue)>=0&&e<=1114111))return!0;t.switchU&&t.raise("Invalid unicode escape"),t.pos=n}return!1},xt.regexp_eatIdentityEscape=function(t){if(t.switchU)return!!this.regexp_eatSyntaxCharacter(t)||!!t.eat(47)&&(t.lastIntValue=47,!0);var e=t.current();return!(99===e||t.switchN&&107===e)&&(t.lastIntValue=e,t.advance(),!0)},xt.regexp_eatDecimalEscape=function(t){t.lastIntValue=0;var e=t.current();if(e>=49&&e<=57){do{t.lastIntValue=10*t.lastIntValue+(e-48),t.advance()}while((e=t.current())>=48&&e<=57);return!0}return!1},xt.regexp_eatCharacterClassEscape=function(t){var e=t.current();if(function(t){return 100===t||68===t||115===t||83===t||119===t||87===t}(e))return t.lastIntValue=-1,t.advance(),!0;if(t.switchU&&this.options.ecmaVersion>=9&&(80===e||112===e)){if(t.lastIntValue=-1,t.advance(),t.eat(123)&&this.regexp_eatUnicodePropertyValueExpression(t)&&t.eat(125))return!0;t.raise("Invalid property name")}return!1},xt.regexp_eatUnicodePropertyValueExpression=function(t){var e=t.pos;if(this.regexp_eatUnicodePropertyName(t)&&t.eat(61)){var n=t.lastStringValue;if(this.regexp_eatUnicodePropertyValue(t)){var i=t.lastStringValue;return this.regexp_validateUnicodePropertyNameAndValue(t,n,i),!0}}if(t.pos=e,this.regexp_eatLoneUnicodePropertyNameOrValue(t)){var r=t.lastStringValue;return this.regexp_validateUnicodePropertyNameOrValue(t,r),!0}return!1},xt.regexp_validateUnicodePropertyNameAndValue=function(t,e,n){N(t.unicodeProperties.nonBinary,e)||t.raise("Invalid property name"),t.unicodeProperties.nonBinary[e].test(n)||t.raise("Invalid property value")},xt.regexp_validateUnicodePropertyNameOrValue=function(t,e){t.unicodeProperties.binary.test(e)||t.raise("Invalid property name")},xt.regexp_eatUnicodePropertyName=function(t){var e=0;for(t.lastStringValue="";kt(e=t.current());)t.lastStringValue+=bt(e),t.advance();return""!==t.lastStringValue},xt.regexp_eatUnicodePropertyValue=function(t){var e=0;for(t.lastStringValue="";Tt(e=t.current());)t.lastStringValue+=bt(e),t.advance();return""!==t.lastStringValue},xt.regexp_eatLoneUnicodePropertyNameOrValue=function(t){return this.regexp_eatUnicodePropertyValue(t)},xt.regexp_eatCharacterClass=function(t){if(t.eat(91)){if(t.eat(94),this.regexp_classRanges(t),t.eat(93))return!0;t.raise("Unterminated character class")}return!1},xt.regexp_classRanges=function(t){for(;this.regexp_eatClassAtom(t);){var e=t.lastIntValue;if(t.eat(45)&&this.regexp_eatClassAtom(t)){var n=t.lastIntValue;!t.switchU||-1!==e&&-1!==n||t.raise("Invalid character class"),-1!==e&&-1!==n&&e>n&&t.raise("Range out of order in character class")}}},xt.regexp_eatClassAtom=function(t){var e=t.pos;if(t.eat(92)){if(this.regexp_eatClassEscape(t))return!0;if(t.switchU){var n=t.current();(99===n||It(n))&&t.raise("Invalid class escape"),t.raise("Invalid escape")}t.pos=e}var i=t.current();return 93!==i&&(t.lastIntValue=i,t.advance(),!0)},xt.regexp_eatClassEscape=function(t){var e=t.pos;if(t.eat(98))return t.lastIntValue=8,!0;if(t.switchU&&t.eat(45))return t.lastIntValue=45,!0;if(!t.switchU&&t.eat(99)){if(this.regexp_eatClassControlLetter(t))return!0;t.pos=e}return this.regexp_eatCharacterClassEscape(t)||this.regexp_eatCharacterEscape(t)},xt.regexp_eatClassControlLetter=function(t){var e=t.current();return!(!At(e)&&95!==e)&&(t.lastIntValue=e%32,t.advance(),!0)},xt.regexp_eatHexEscapeSequence=function(t){var e=t.pos;if(t.eat(120)){if(this.regexp_eatFixedHexDigits(t,2))return!0;t.switchU&&t.raise("Invalid escape"),t.pos=e}return!1},xt.regexp_eatDecimalDigits=function(t){var e=t.pos,n=0;for(t.lastIntValue=0;At(n=t.current());)t.lastIntValue=10*t.lastIntValue+(n-48),t.advance();return t.pos!==e},xt.regexp_eatHexDigits=function(t){var e=t.pos,n=0;for(t.lastIntValue=0;Et(n=t.current());)t.lastIntValue=16*t.lastIntValue+Pt(n),t.advance();return t.pos!==e},xt.regexp_eatLegacyOctalEscapeSequence=function(t){if(this.regexp_eatOctalDigit(t)){var e=t.lastIntValue;if(this.regexp_eatOctalDigit(t)){var n=t.lastIntValue;e<=3&&this.regexp_eatOctalDigit(t)?t.lastIntValue=64*e+8*n+t.lastIntValue:t.lastIntValue=8*e+n}else t.lastIntValue=e;return!0}return!1},xt.regexp_eatOctalDigit=function(t){var e=t.current();return It(e)?(t.lastIntValue=e-48,t.advance(),!0):(t.lastIntValue=0,!1)},xt.regexp_eatFixedHexDigits=function(t,e){var n=t.pos;t.lastIntValue=0;for(var i=0;i<e;++i){var r=t.current();if(!Et(r))return t.pos=n,!1;t.lastIntValue=16*t.lastIntValue+Pt(r),t.advance()}return!0};var Nt=function(t){this.type=t.type,this.value=t.value,this.start=t.start,this.end=t.end,t.options.locations&&(this.loc=new D(t,t.startLoc,t.endLoc)),t.options.ranges&&(this.range=[t.start,t.end])},Lt=U.prototype;function Mt(t){return t<=65535?String.fromCharCode(t):(t-=65536,String.fromCharCode(55296+(t>>10),56320+(1023&t)))}Lt.next=function(){this.options.onToken&&this.options.onToken(new Nt(this)),this.lastTokEnd=this.end,this.lastTokStart=this.start,this.lastTokEndLoc=this.endLoc,this.lastTokStartLoc=this.startLoc,this.nextToken()},Lt.getToken=function(){return this.next(),new Nt(this)},"undefined"!=typeof Symbol&&(Lt[Symbol.iterator]=function(){var t=this;return{next:function(){var e=t.getToken();return{done:e.type===b.eof,value:e}}}}),Lt.curContext=function(){return this.context[this.context.length-1]},Lt.nextToken=function(){var t=this.curContext();return t&&t.preserveSpace||this.skipSpace(),this.start=this.pos,this.options.locations&&(this.startLoc=this.curPosition()),this.pos>=this.input.length?this.finishToken(b.eof):t.override?t.override(this):void this.readToken(this.fullCharCodeAtPos())},Lt.readToken=function(t){return p(t,this.options.ecmaVersion>=6)||92===t?this.readWord():this.getTokenFromCode(t)},Lt.fullCharCodeAtPos=function(){var t=this.input.charCodeAt(this.pos);return t<=55295||t>=57344?t:(t<<10)+this.input.charCodeAt(this.pos+1)-56613888},Lt.skipBlockComment=function(){var t,e=this.options.onComment&&this.curPosition(),n=this.pos,i=this.input.indexOf("*/",this.pos+=2);if(-1===i&&this.raise(this.pos-2,"Unterminated comment"),this.pos=i+2,this.options.locations)for(S.lastIndex=n;(t=S.exec(this.input))&&t.index<this.pos;)++this.curLine,this.lineStart=t.index+t[0].length;this.options.onComment&&this.options.onComment(!0,this.input.slice(n+2,i),n,this.pos,e,this.curPosition())},Lt.skipLineComment=function(t){for(var e=this.pos,n=this.options.onComment&&this.curPosition(),i=this.input.charCodeAt(this.pos+=t);this.pos<this.input.length&&!k(i);)i=this.input.charCodeAt(++this.pos);this.options.onComment&&this.options.onComment(!1,this.input.slice(e+t,this.pos),e,this.pos,n,this.curPosition())},Lt.skipSpace=function(){t:for(;this.pos<this.input.length;){var t=this.input.charCodeAt(this.pos);switch(t){case 32:case 160:++this.pos;break;case 13:10===this.input.charCodeAt(this.pos+1)&&++this.pos;case 10:case 8232:case 8233:++this.pos,this.options.locations&&(++this.curLine,this.lineStart=this.pos);break;case 47:switch(this.input.charCodeAt(this.pos+1)){case 42:this.skipBlockComment();break;case 47:this.skipLineComment(2);break;default:break t}break;default:if(!(t>8&&t<14||t>=5760&&T.test(String.fromCharCode(t))))break t;++this.pos}}},Lt.finishToken=function(t,e){this.end=this.pos,this.options.locations&&(this.endLoc=this.curPosition());var n=this.type;this.type=t,this.value=e,this.updateContext(n)},Lt.readToken_dot=function(){var t=this.input.charCodeAt(this.pos+1);if(t>=48&&t<=57)return this.readNumber(!0);var e=this.input.charCodeAt(this.pos+2);return this.options.ecmaVersion>=6&&46===t&&46===e?(this.pos+=3,this.finishToken(b.ellipsis)):(++this.pos,this.finishToken(b.dot))},Lt.readToken_slash=function(){var t=this.input.charCodeAt(this.pos+1);return this.exprAllowed?(++this.pos,this.readRegexp()):61===t?this.finishOp(b.assign,2):this.finishOp(b.slash,1)},Lt.readToken_mult_modulo_exp=function(t){var e=this.input.charCodeAt(this.pos+1),n=1,i=42===t?b.star:b.modulo;return this.options.ecmaVersion>=7&&42===t&&42===e&&(++n,i=b.starstar,e=this.input.charCodeAt(this.pos+2)),61===e?this.finishOp(b.assign,n+1):this.finishOp(i,n)},Lt.readToken_pipe_amp=function(t){var e=this.input.charCodeAt(this.pos+1);return e===t?this.finishOp(124===t?b.logicalOR:b.logicalAND,2):61===e?this.finishOp(b.assign,2):this.finishOp(124===t?b.bitwiseOR:b.bitwiseAND,1)},Lt.readToken_caret=function(){return 61===this.input.charCodeAt(this.pos+1)?this.finishOp(b.assign,2):this.finishOp(b.bitwiseXOR,1)},Lt.readToken_plus_min=function(t){var e=this.input.charCodeAt(this.pos+1);return e===t?45!==e||this.inModule||62!==this.input.charCodeAt(this.pos+2)||0!==this.lastTokEnd&&!C.test(this.input.slice(this.lastTokEnd,this.pos))?this.finishOp(b.incDec,2):(this.skipLineComment(3),this.skipSpace(),this.nextToken()):61===e?this.finishOp(b.assign,2):this.finishOp(b.plusMin,1)},Lt.readToken_lt_gt=function(t){var e=this.input.charCodeAt(this.pos+1),n=1;return e===t?(n=62===t&&62===this.input.charCodeAt(this.pos+2)?3:2,61===this.input.charCodeAt(this.pos+n)?this.finishOp(b.assign,n+1):this.finishOp(b.bitShift,n)):33!==e||60!==t||this.inModule||45!==this.input.charCodeAt(this.pos+2)||45!==this.input.charCodeAt(this.pos+3)?(61===e&&(n=2),this.finishOp(b.relational,n)):(this.skipLineComment(4),this.skipSpace(),this.nextToken())},Lt.readToken_eq_excl=function(t){var e=this.input.charCodeAt(this.pos+1);return 61===e?this.finishOp(b.equality,61===this.input.charCodeAt(this.pos+2)?3:2):61===t&&62===e&&this.options.ecmaVersion>=6?(this.pos+=2,this.finishToken(b.arrow)):this.finishOp(61===t?b.eq:b.prefix,1)},Lt.getTokenFromCode=function(t){switch(t){case 46:return this.readToken_dot();case 40:return++this.pos,this.finishToken(b.parenL);case 41:return++this.pos,this.finishToken(b.parenR);case 59:return++this.pos,this.finishToken(b.semi);case 44:return++this.pos,this.finishToken(b.comma);case 91:return++this.pos,this.finishToken(b.bracketL);case 93:return++this.pos,this.finishToken(b.bracketR);case 123:return++this.pos,this.finishToken(b.braceL);case 125:return++this.pos,this.finishToken(b.braceR);case 58:return++this.pos,this.finishToken(b.colon);case 63:return++this.pos,this.finishToken(b.question);case 96:if(this.options.ecmaVersion<6)break;return++this.pos,this.finishToken(b.backQuote);case 48:var e=this.input.charCodeAt(this.pos+1);if(120===e||88===e)return this.readRadixNumber(16);if(this.options.ecmaVersion>=6){if(111===e||79===e)return this.readRadixNumber(8);if(98===e||66===e)return this.readRadixNumber(2)}case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:return this.readNumber(!1);case 34:case 39:return this.readString(t);case 47:return this.readToken_slash();case 37:case 42:return this.readToken_mult_modulo_exp(t);case 124:case 38:return this.readToken_pipe_amp(t);case 94:return this.readToken_caret();case 43:case 45:return this.readToken_plus_min(t);case 60:case 62:return this.readToken_lt_gt(t);case 61:case 33:return this.readToken_eq_excl(t);case 126:return this.finishOp(b.prefix,1)}this.raise(this.pos,"Unexpected character '"+Mt(t)+"'")},Lt.finishOp=function(t,e){var n=this.input.slice(this.pos,this.pos+e);return this.pos+=e,this.finishToken(t,n)},Lt.readRegexp=function(){for(var t,e,n=this.pos;;){this.pos>=this.input.length&&this.raise(n,"Unterminated regular expression");var i=this.input.charAt(this.pos);if(C.test(i)&&this.raise(n,"Unterminated regular expression"),t)t=!1;else{if("["===i)e=!0;else if("]"===i&&e)e=!1;else if("/"===i&&!e)break;t="\\"===i}++this.pos}var r=this.input.slice(n,this.pos);++this.pos;var s=this.pos,a=this.readWord1();this.containsEsc&&this.unexpected(s);var o=this.regexpState||(this.regexpState=new wt(this));o.reset(n,r,a),this.validateRegExpFlags(o),this.validateRegExpPattern(o);var h=null;try{h=new RegExp(r,a)}catch(t){}return this.finishToken(b.regexp,{pattern:r,flags:a,value:h})},Lt.readInt=function(t,e){for(var n=this.pos,i=0,r=0,s=null==e?1/0:e;r<s;++r){var a=this.input.charCodeAt(this.pos),o=void 0;if((o=a>=97?a-97+10:a>=65?a-65+10:a>=48&&a<=57?a-48:1/0)>=t)break;++this.pos,i=i*t+o}return this.pos===n||null!=e&&this.pos-n!==e?null:i},Lt.readRadixNumber=function(t){this.pos+=2;var e=this.readInt(t);return null==e&&this.raise(this.start+2,"Expected number in radix "+t),p(this.fullCharCodeAtPos())&&this.raise(this.pos,"Identifier directly after number"),this.finishToken(b.num,e)},Lt.readNumber=function(t){var e=this.pos;t||null!==this.readInt(10)||this.raise(e,"Invalid number");var n=this.pos-e>=2&&48===this.input.charCodeAt(e);n&&this.strict&&this.raise(e,"Invalid number"),n&&/[89]/.test(this.input.slice(e,this.pos))&&(n=!1);var i=this.input.charCodeAt(this.pos);46!==i||n||(++this.pos,this.readInt(10),i=this.input.charCodeAt(this.pos)),69!==i&&101!==i||n||(43!==(i=this.input.charCodeAt(++this.pos))&&45!==i||++this.pos,null===this.readInt(10)&&this.raise(e,"Invalid number")),p(this.fullCharCodeAtPos())&&this.raise(this.pos,"Identifier directly after number");var r=this.input.slice(e,this.pos),s=n?parseInt(r,8):parseFloat(r);return this.finishToken(b.num,s)},Lt.readCodePoint=function(){var t;if(123===this.input.charCodeAt(this.pos)){this.options.ecmaVersion<6&&this.unexpected();var e=++this.pos;t=this.readHexChar(this.input.indexOf("}",this.pos)-this.pos),++this.pos,t>1114111&&this.invalidStringToken(e,"Code point out of bounds")}else t=this.readHexChar(4);return t},Lt.readString=function(t){for(var e="",n=++this.pos;;){this.pos>=this.input.length&&this.raise(this.start,"Unterminated string constant");var i=this.input.charCodeAt(this.pos);if(i===t)break;92===i?(e+=this.input.slice(n,this.pos),e+=this.readEscapedChar(!1),n=this.pos):(k(i,this.options.ecmaVersion>=10)&&this.raise(this.start,"Unterminated string constant"),++this.pos)}return e+=this.input.slice(n,this.pos++),this.finishToken(b.string,e)};var Ot={};Lt.tryReadTemplateToken=function(){this.inTemplateElement=!0;try{this.readTmplToken()}catch(t){if(t!==Ot)throw t;this.readInvalidTemplateToken()}this.inTemplateElement=!1},Lt.invalidStringToken=function(t,e){if(this.inTemplateElement&&this.options.ecmaVersion>=9)throw Ot;this.raise(t,e)},Lt.readTmplToken=function(){for(var t="",e=this.pos;;){this.pos>=this.input.length&&this.raise(this.start,"Unterminated template");var n=this.input.charCodeAt(this.pos);if(96===n||36===n&&123===this.input.charCodeAt(this.pos+1))return this.pos!==this.start||this.type!==b.template&&this.type!==b.invalidTemplate?(t+=this.input.slice(e,this.pos),this.finishToken(b.template,t)):36===n?(this.pos+=2,this.finishToken(b.dollarBraceL)):(++this.pos,this.finishToken(b.backQuote));if(92===n)t+=this.input.slice(e,this.pos),t+=this.readEscapedChar(!0),e=this.pos;else if(k(n)){switch(t+=this.input.slice(e,this.pos),++this.pos,n){case 13:10===this.input.charCodeAt(this.pos)&&++this.pos;case 10:t+="\n";break;default:t+=String.fromCharCode(n)}this.options.locations&&(++this.curLine,this.lineStart=this.pos),e=this.pos}else++this.pos}},Lt.readInvalidTemplateToken=function(){for(;this.pos<this.input.length;this.pos++)switch(this.input[this.pos]){case"\\":++this.pos;break;case"$":if("{"!==this.input[this.pos+1])break;case"`":return this.finishToken(b.invalidTemplate,this.input.slice(this.start,this.pos))}this.raise(this.start,"Unterminated template")},Lt.readEscapedChar=function(t){var e=this.input.charCodeAt(++this.pos);switch(++this.pos,e){case 110:return"\n";case 114:return"\r";case 120:return String.fromCharCode(this.readHexChar(2));case 117:return Mt(this.readCodePoint());case 116:return"\t";case 98:return"\b";case 118:return"\v";case 102:return"\f";case 13:10===this.input.charCodeAt(this.pos)&&++this.pos;case 10:return this.options.locations&&(this.lineStart=this.pos,++this.curLine),"";default:if(e>=48&&e<=55){var n=this.input.substr(this.pos-1,3).match(/^[0-7]+/)[0],i=parseInt(n,8);return i>255&&(n=n.slice(0,-1),i=parseInt(n,8)),this.pos+=n.length-1,e=this.input.charCodeAt(this.pos),"0"===n&&56!==e&&57!==e||!this.strict&&!t||this.invalidStringToken(this.pos-1-n.length,t?"Octal literal in template string":"Octal literal in strict mode"),String.fromCharCode(i)}return k(e)?"":String.fromCharCode(e)}},Lt.readHexChar=function(t){var e=this.pos,n=this.readInt(16,t);return null===n&&this.invalidStringToken(e,"Bad character escape sequence"),n},Lt.readWord1=function(){this.containsEsc=!1;for(var t="",e=!0,n=this.pos,i=this.options.ecmaVersion>=6;this.pos<this.input.length;){var r=this.fullCharCodeAtPos();if(g(r,i))this.pos+=r<=65535?1:2;else{if(92!==r)break;this.containsEsc=!0,t+=this.input.slice(n,this.pos);var s=this.pos;117!==this.input.charCodeAt(++this.pos)&&this.invalidStringToken(this.pos,"Expecting Unicode escape sequence \\uXXXX"),++this.pos;var a=this.readCodePoint();(e?p:g)(a,i)||this.invalidStringToken(s,"Invalid Unicode escape"),t+=Mt(a),n=this.pos}e=!1}return t+this.input.slice(n,this.pos)},Lt.readWord=function(){var t=this.readWord1(),e=b.name;return this.keywords.test(t)&&(this.containsEsc&&this.raiseRecoverable(this.start,"Escape sequence in keyword "+t),e=x[t]),this.finishToken(e,t)};var Dt="6.1.1";function Rt(t,e){return U.parse(t,e)}function zt(t,e,n){return U.parseExpressionAt(t,e,n)}function jt(t,e){return U.tokenizer(t,e)}},function(t,e){},function(t,e,n){"use strict";n.r(e);var i=n(1),r=n(0);class s{constructor(t){r.setup(document.getElementById("automataView")),this.spacing=t,this.toHexMatrix=new r.Matrix(1,0,0,1,0,0).skew(30,0).scale(1,Math.sin(Math.PI/3)).scale(this.spacing),this.toEuclideanMatrix=this.toHexMatrix.inverted()}toHexCoord(t){return this.toHexMatrix.transform(t)}toEuclideanCoord(t){return this.toEuclideanMatrix.transform(t)}*hexCoords(t){for(let e of t)yield this.toHexCoord(e)}render(t,e){r.project.clear();for(let e of this.hexCoords(t.getPointCoords())){r.Shape.Circle(e,1).strokeColor="#CCC"}let n=e.getCircleCoords();for(let t of this.hexCoords(n)){r.Shape.Circle(t,this.spacing/2).strokeColor="#black"}r.view.draw()}}class a{constructor(t,e){this.offset=t,this.size=e}*getPointCoords(){for(let t=this.offset.x;t<this.size.width;t++)for(let e=this.offset.y;e<this.size.height;e++)yield new r.Point(t,e)}}const o=[new r.Point(1,0),new r.Point(0,1),new r.Point(-1,1),new r.Point(-1,0),new r.Point(0,-1),new r.Point(1,-1)],h=[new r.Point(1,1),new r.Point(-1,2),new r.Point(-2,1),new r.Point(-1,-1),new r.Point(1,-2),new r.Point(2,-1)];class u{constructor(t){this.position=t}getPosition(){return this.position}setPosition(t){this.position=t}neighborhoodPoints(){return o.map(t=>this.position.add(t))}blockingPoints(){return h.map(t=>this.position.add(t))}}var l;!function(t){t[t.CW=0]="CW",t[t.CCW=1]="CCW"}(l||(l={}));class c{constructor(t,e){if(e<1||e>5)throw new Error("Distance must be from 1 to 5 (inclusive)");this.direction=t,this.distance=e}toKey(){let t=this.direction===l.CW?"CW":"CCW";return`${this.distance}${t}`}static key(t,e){return new c(t,e).toKey()}}class f{constructor(){this.map=new Map}get(t){return this.map.get(t.toKey())}set(t,e){this.map.set(t.toKey(),e)}has(t){return this.map.has(t.toKey())}}class d{constructor(t,e){this.grid=t,this.circles=e,this.iteration=0}getCircleCoords(){return this.circles.map(t=>t.getPosition())}getLegalMovePoints(t){let e=new f;return e.set(new c(l.CCW,1),new r.Point(15,15)),e.set(new c(l.CCW,2),new r.Point(16,16)),e.set(new c(l.CCW,3),new r.Point(16,17)),e}iterate(t,e){let n=this.getCircleCoords(),i=t(this.iteration,n),r=n[i],s=this.getLegalMovePoints(r),a=e(this.iteration,i);if(s.has(a)){let t=s.get(a);this.circles[i].setPosition(t)}return this.iteration++,null}}i(function(){let t=new u(new r.Point(10,10)),e=[t].concat(t.blockingPoints().map(t=>new u(t))).concat(t.neighborhoodPoints().map(t=>new u(t))),n=new r.Point(-10,0),i=new r.Size(30,30),o=new a(n,i),h=new d(o,e),f=new s(10);f.render(o,h),setInterval(function(){h.iterate((t,e)=>t%3,(t,e)=>new c(l.CCW,t%3+1)),f.render(o,h)},1e3)})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3BhcGVyL2Rpc3QvcGFwZXItZnVsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanF1ZXJ5L2Rpc3QvanF1ZXJ5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hY29ybi9kaXN0L2Fjb3JuLm1qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcmVuZGVyZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2dyaWQudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NpcmNsZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbW92ZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbW92ZV9tYXAudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2F1dG9tYXRhLnRzIiwid2VicGFjazovLy8uL3NyYy9pbmRleC50cyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsIl9fV0VCUEFDS19BTURfREVGSU5FX0FSUkFZX18iLCJfX1dFQlBBQ0tfQU1EX0RFRklORV9GQUNUT1JZX18iLCJfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyIsInNlbGYiLCJ1bmRlZmluZWQiLCJ3aW5kb3ciLCJkb2N1bWVudCIsIkJhc2UiLCJoaWRkZW4iLCJhcnJheSIsInNsaWNlIiwiZGVzY3JpYmUiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJkZWZpbmUiLCJmb3JFYWNoIiwiaXRlciIsInRoaXMiLCJsZW5ndGgiLCJzZXQiLCJhc3NpZ24iLCJkc3QiLCJhcmd1bWVudHMiLCJzcmMiLCJlYWNoIiwib2JqIiwiZGVzYyIsImluamVjdCIsImRlc3QiLCJiZWFucyIsInByZXNlcnZlIiwiYmVhbnNOYW1lcyIsImZpZWxkIiwidmFsIiwic3Vic3RyaW5nIiwiYmVhbiIsImlzRnVuYyIsInJlcyIsInByZXYiLCJiYXNlIiwibWF0Y2giLCJ0b0xvd2VyQ2FzZSIsImlzUGxhaW5PYmplY3QiLCJ3cml0YWJsZSIsImNvbmZpZ3VyYWJsZSIsInRlc3QiLCJwYXJ0Iiwic3RhdGljcyIsImV4dGVuZCIsImN0b3IiLCJwcm90byIsImluaXRpYWxpemUiLCJhcHBseSIsImNsb25lIiwiY29uc3RydWN0b3IiLCJwaWNrIiwiYSIsImIiLCJsaXN0IiwiYmVnaW4iLCJlbmQiLCJ0b1N0cmluZyIsIl9pZCIsIl9jbGFzcyIsIl9uYW1lIiwidHlwZSIsInB1c2giLCJGb3JtYXR0ZXIiLCJpbnN0YW5jZSIsIm51bWJlciIsImpvaW4iLCJnZXRDbGFzc05hbWUiLCJpbXBvcnRKU09OIiwianNvbiIsImV4cG9ydEpTT04iLCJvcHRpb25zIiwidG9KU09OIiwic2VyaWFsaXplIiwicHJvcHMiLCJleGNsdWRlIiwiZmlsdGVyIiwiX3ByaW9yaXRpemUiLCJlcXVhbHMiLCJvYmoxIiwib2JqMiIsIkFycmF5IiwiaXNBcnJheSIsImtleXMiLCJyZWFkIiwic3RhcnQiLCJhbW91bnQiLCJwZWVrIiwiX19pbmRleCIsInJlYWRJbmRleCIsIl9yZWFkSW5kZXgiLCJyZWFkTnVsbCIsIl9fcmVhZCIsImZpbHRlcmVkIiwiX19maWx0ZXJlZCIsInJlbWFpbiIsInJlYWRMaXN0IiwiZW50cnkiLCJyZWFkTmFtZWQiLCJnZXROYW1lZCIsImhhc09iamVjdCIsIl9fdW5maWx0ZXJlZCIsImFyZyIsIl9oYXNPYmplY3QiLCJoYXNOYW1lZCIsInNvdXJjZSIsInByaW9yaXRpemUiLCJwcm9jZXNzZWQiLCJoYW5kbGVLZXkiLCJpc1BsYWluVmFsdWUiLCJhc1N0cmluZyIsImNvbXBhY3QiLCJkaWN0aW9uYXJ5IiwiaXNSb290IiwiZm9ybWF0dGVyIiwicHJlY2lzaW9uIiwiZGVmaW5pdGlvbnMiLCJyZWZlcmVuY2VzIiwiYWRkIiwiaXRlbSIsImlkIiwicmVmIiwidW5zaGlmdCIsIl9zZXJpYWxpemUiLCJfY29tcGFjdFNlcmlhbGl6ZSIsImRlc2VyaWFsaXplIiwiX2RhdGEiLCJfc2V0RGljdGlvbmFyeSIsIl9pc1Jvb3QiLCJpc0ZpcnN0IiwiaGFzRGljdGlvbmFyeSIsImlzRGljdGlvbmFyeSIsImFyZ3MiLCJKU09OIiwic3RyaW5naWZ5IiwidGFyZ2V0IiwicGFyc2UiLCJ1c2VUYXJnZXQiLCJJdGVtIiwiTGF5ZXIiLCJpbnNlcnQiLCJpdGVtcyIsIml0ZW1zTGVuZ3RoIiwic3RhcnRMZW5ndGgiLCJzcGxpY2UiLCJpbmRleCIsInJlbW92ZSIsImFwcGVuZCIsIl9pbmRleCIsInJlbW92ZWQiLCJjYXBpdGFsaXplIiwic3RyIiwicmVwbGFjZSIsInRvVXBwZXJDYXNlIiwiY2FtZWxpemUiLCJjaHIiLCJoeXBoZW5hdGUiLCJFbWl0dGVyIiwib24iLCJmdW5jIiwidHlwZXMiLCJfZXZlbnRUeXBlcyIsImhhbmRsZXJzIiwiX2NhbGxiYWNrcyIsImluZGV4T2YiLCJpbnN0YWxsIiwib2ZmIiwidW5pbnN0YWxsIiwib25jZSIsImhhbmRsZXIiLCJlbWl0IiwiZXZlbnQiLCJzZXRUYXJnZXQiLCJjdXJyZW50VGFyZ2V0Iiwic3RvcCIsInJlc3BvbmRzIiwiYXR0YWNoIiwiZGV0YWNoIiwiZmlyZSIsIl9pbnN0YWxsRXZlbnRzIiwiZXZlbnRzIiwiX2V2ZW50cyIsImlzU3RyaW5nIiwiUGFwZXJTY29wZSIsInBhcGVyIiwic2V0dGluZ3MiLCJhcHBseU1hdHJpeCIsImluc2VydEl0ZW1zIiwiaGFuZGxlU2l6ZSIsImhpdFRvbGVyYW5jZSIsInByb2plY3QiLCJwcm9qZWN0cyIsInRvb2xzIiwiX3Njb3BlcyIsInN1cHBvcnQiLCJjdHgiLCJDYW52YXNQcm92aWRlciIsImdldENvbnRleHQiLCJuYXRpdmVEYXNoIiwibmF0aXZlQmxlbmRNb2RlcyIsIkJsZW5kTW9kZSIsIm5hdGl2ZU1vZGVzIiwicmVsZWFzZSIsImFnZW50IiwidXNlciIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsIm9zIiwiZXhlYyIsInBsYXRmb3JtIiwiYnJvd3NlciIsInYxIiwidjIiLCJydiIsImNocm9tZSIsInYiLCJ2ZXJzaW9uIiwidmVyc2lvbk51bWJlciIsInBhcnNlRmxvYXQiLCJ3ZWJraXQiLCJhdG9tIiwiZ2V0VmlldyIsIl92aWV3IiwiZ2V0UGFwZXIiLCJleGVjdXRlIiwiY29kZSIsIlBhcGVyU2NyaXB0IiwiVmlldyIsInVwZGF0ZUZvY3VzIiwic2NvcGUiLCJ0aGF0Iiwic2V0dXAiLCJlbGVtZW50IiwiUHJvamVjdCIsImNyZWF0ZUNhbnZhcyIsIndpZHRoIiwiaGVpZ2h0IiwiZ2V0Q2FudmFzIiwiYWN0aXZhdGUiLCJjbGVhciIsImhhbmRsZUF0dHJpYnV0ZSIsImVsIiwiYXR0ciIsImdldEF0dHJpYnV0ZSIsImhhc0F0dHJpYnV0ZSIsIlBhcGVyU2NvcGVJdGVtIiwiX3Njb3BlIiwiX2xpc3QiLCJfcmVmZXJlbmNlIiwiaXNBY3RpdmUiLCJtdWx0aXBsaWVyIiwiTWF0aCIsInBvdyIsInJvdW5kIiwicGFpciIsInZhbDEiLCJ2YWwyIiwic2VwYXJhdG9yIiwicG9pbnQiLCJ4IiwieSIsInNpemUiLCJyZWN0YW5nbGUiLCJOdW1lcmljYWwiLCJhYnNjaXNzYXMiLCJ3ZWlnaHRzIiwiYWJzIiwic3FydCIsImxvZzIiLCJsb2ciLCJMT0cyRSIsImNsYW1wIiwibWluIiwibWF4IiwiZ2V0RGlzY3JpbWluYW50Iiwic3BsaXQiLCJoaSIsIkQiLCJFIiwiYWQiLCJiZCIsImNkIiwicSIsImdldE5vcm1hbGl6YXRpb25GYWN0b3IiLCJub3JtIiwiRVBTSUxPTiIsIk1BQ0hJTkVfRVBTSUxPTiIsIkNVUlZFVElNRV9FUFNJTE9OIiwiR0VPTUVUUklDX0VQU0lMT04iLCJUUklHT05PTUVUUklDX0VQU0lMT04iLCJLQVBQQSIsImlzWmVybyIsImludGVncmF0ZSIsImYiLCJ3IiwiQSIsIkIiLCJzdW0iLCJBeCIsImZpbmRSb290IiwiZGYiLCJ0b2xlcmFuY2UiLCJmeCIsImR4IiwibngiLCJzb2x2ZVF1YWRyYXRpYyIsInJvb3RzIiwieDEiLCJ4MiIsIkluZmluaXR5IiwiUSIsIlIiLCJjb3VudCIsImJvdW5kbGVzcyIsIm1pbkIiLCJtYXhCIiwiaXNGaW5pdGUiLCJzb2x2ZUN1YmljIiwiYjEiLCJjMiIsInFkIiwiZXZhbHVhdGUiLCJ4MCIsInRtcCIsInRkIiwicmQiLCJVSUQiLCJfcG9vbHMiLCJwb29sIiwiUG9pbnQiLCJhcmcwIiwiYXJnMSIsInJlYWRpbmciLCJoYXNZIiwiX3NldCIsInNldEFuZ2xlIiwiYW5nbGUiLCJnZXRMZW5ndGgiLCJzZXRMZW5ndGgiLCJfYW5nbGUiLCJjb3MiLCJzaW4iLCJzY2FsZSIsImdldEFuZ2xlIiwiZ2V0QW5nbGVJblJhZGlhbnMiLCJQSSIsInNldEFuZ2xlSW5SYWRpYW5zIiwiZ2V0QW5nbGVJbkRlZ3JlZXMiLCJzZXRBbmdsZUluRGVncmVlcyIsImRpdiIsIk5hTiIsImRvdCIsImFjb3MiLCJhdGFuMiIsImdldFF1YWRyYW50IiwiZ2V0RGlyZWN0ZWRBbmdsZSIsImNyb3NzIiwiZ2V0RGlzdGFuY2UiLCJub3JtYWxpemUiLCJjdXJyZW50Iiwicm90YXRlIiwiY2VudGVyIiwic3VidHJhY3QiLCJ0cmFuc2Zvcm0iLCJtYXRyaXgiLCJfdHJhbnNmb3JtUG9pbnQiLCJtdWx0aXBseSIsImRpdmlkZSIsIm1vZHVsbyIsIm5lZ2F0ZSIsImlzSW5zaWRlIiwiUmVjdGFuZ2xlIiwiY29udGFpbnMiLCJpc0Nsb3NlIiwiaXNDb2xsaW5lYXIiLCJpc0NvbGluZWFyIiwiaXNPcnRob2dvbmFsIiwiaXNOYU4iLCJpc0luUXVhZHJhbnQiLCJwb2ludDEiLCJwb2ludDIiLCJyYW5kb20iLCJ5MSIsInkyIiwib3AiLCJMaW5rZWRQb2ludCIsIm93bmVyIiwic2V0dGVyIiwiX3giLCJfeSIsIl9vd25lciIsIl9zZXR0ZXIiLCJfZG9udE5vdGlmeSIsImdldFgiLCJzZXRYIiwiZ2V0WSIsInNldFkiLCJpc1NlbGVjdGVkIiwiX3NlbGVjdGlvbiIsIl9nZXRTZWxlY3Rpb24iLCJzZXRTZWxlY3RlZCIsInNlbGVjdGVkIiwiX2NoYW5nZVNlbGVjdGlvbiIsIlNpemUiLCJoYXNIZWlnaHQiLCJzaXplMSIsInNpemUyIiwiTGlua2VkU2l6ZSIsIl93aWR0aCIsIl9oZWlnaHQiLCJnZXRXaWR0aCIsInNldFdpZHRoIiwiZ2V0SGVpZ2h0Iiwic2V0SGVpZ2h0IiwiYXJnMiIsImFyZzMiLCJmcm9tIiwidG8iLCJmcm0iLCJuZXh0IiwicmVjdCIsInJ0IiwiZ2V0UG9pbnQiLCJfZG9udExpbmsiLCJzZXRQb2ludCIsImdldFNpemUiLCJfZnciLCJfZmgiLCJzZXRTaXplIiwic3giLCJfc3giLCJzeSIsIl9zeSIsImgiLCJnZXRMZWZ0Iiwic2V0TGVmdCIsImxlZnQiLCJnZXRUb3AiLCJzZXRUb3AiLCJ0b3AiLCJnZXRSaWdodCIsInNldFJpZ2h0IiwicmlnaHQiLCJnZXRCb3R0b20iLCJzZXRCb3R0b20iLCJib3R0b20iLCJnZXRDZW50ZXJYIiwic2V0Q2VudGVyWCIsImdldENlbnRlclkiLCJzZXRDZW50ZXJZIiwiZ2V0Q2VudGVyIiwic2V0Q2VudGVyIiwiZ2V0QXJlYSIsImlzRW1wdHkiLCJfY29udGFpbnNSZWN0YW5nbGUiLCJfY29udGFpbnNQb2ludCIsImludGVyc2VjdHMiLCJlcHNpbG9uIiwiaW50ZXJzZWN0IiwidW5pdGUiLCJpbmNsdWRlIiwiZXhwYW5kIiwiaG9yIiwidmVyIiwicGFydHMiLCJ4Rmlyc3QiLCJMaW5rZWRSZWN0YW5nbGUiLCJpbnRlcm5hbCIsIk1hdHJpeCIsIm9rIiwiX2EiLCJfYiIsIl9jIiwiX2QiLCJfdHgiLCJfdHkiLCJjb25jYXQiLCJyZXNldCIsIkVycm9yIiwidHgiLCJ0eSIsIl9jaGFuZ2VkIiwiZ2V0VmFsdWVzIiwiX2FwcGx5TWF0cml4IiwibXgiLCJyZWN1cnNpdmVseSIsIl9zZXRBcHBseU1hdHJpeCIsImlzSWRlbnRpdHkiLCJ0cmFuc2xhdGUiLCJzaGVhciIsInNrZXciLCJ0b1JhZGlhbnMiLCJ0YW4iLCJhMSIsImMxIiwiZDEiLCJhMiIsImIyIiwiZDIiLCJ0eDIiLCJ0eTIiLCJwcmVwZW5kIiwidHgxIiwidHkxIiwiYXBwZW5kZWQiLCJwcmVwZW5kZWQiLCJpbnZlcnQiLCJkZXQiLCJpbnZlcnRlZCIsImNvbmNhdGVuYXRlIiwicHJlQ29uY2F0ZW5hdGUiLCJjaGFpbiIsIl9zaGlmdGxlc3MiLCJfb3JOdWxsSWZJZGVudGl0eSIsImlzSW52ZXJ0aWJsZSIsImlzU2luZ3VsYXIiLCJfdHJhbnNmb3JtQ29vcmRpbmF0ZXMiLCJfdHJhbnNmb3JtQ29ybmVycyIsImNvb3JkcyIsIl90cmFuc2Zvcm1Cb3VuZHMiLCJib3VuZHMiLCJqIiwiaW52ZXJzZVRyYW5zZm9ybSIsIl9pbnZlcnNlVHJhbnNmb3JtIiwiZGVjb21wb3NlIiwiZGVncmVlcyIsImFzaW4iLCJ0cmFuc2xhdGlvbiIsImdldFRyYW5zbGF0aW9uIiwicm90YXRpb24iLCJzY2FsaW5nIiwic2tld2luZyIsImdldFNjYWxpbmciLCJnZXRSb3RhdGlvbiIsImFwcGx5VG9Db250ZXh0IiwicHJvcCIsIkxpbmUiLCJhcmc0IiwiYXNWZWN0b3IiLCJfcHgiLCJfcHkiLCJfdngiLCJfdnkiLCJnZXRWZWN0b3IiLCJsaW5lIiwiaXNJbmZpbml0ZSIsImdldFNpZGUiLCJnZXRTaWduZWREaXN0YW5jZSIsInAxeCIsInAxeSIsInYxeCIsInYxeSIsInAyeCIsInAyeSIsInYyeCIsInYyeSIsImR5IiwidTEiLCJ1MiIsInB4IiwicHkiLCJ2eCIsInZ5IiwiY2N3IiwiX2NoaWxkcmVuIiwiX25hbWVkQ2hpbGRyZW4iLCJfYWN0aXZlTGF5ZXIiLCJfY3VycmVudFN0eWxlIiwiU3R5bGUiLCJfc2VsZWN0aW9uSXRlbXMiLCJfc2VsZWN0aW9uQ291bnQiLCJfdXBkYXRlVmVyc2lvbiIsImZsYWdzIiwidmlldyIsIl9uZWVkc1VwZGF0ZSIsIl9yZXF1ZXN0ZWQiLCJfYXV0b1VwZGF0ZSIsInJlcXVlc3RVcGRhdGUiLCJjaGFuZ2VzIiwiX2NoYW5nZXMiLCJjaGFuZ2VzQnlJZCIsIl9jaGFuZ2VzQnlJZCIsImNoaWxkcmVuIiwiZ2V0Q3VycmVudFN0eWxlIiwic2V0Q3VycmVudFN0eWxlIiwic3R5bGUiLCJnZXRJbmRleCIsImdldE9wdGlvbnMiLCJnZXRMYXllcnMiLCJnZXRBY3RpdmVMYXllciIsImdldFN5bWJvbERlZmluaXRpb25zIiwiaWRzIiwiZ2V0SXRlbXMiLCJjbGFzcyIsIlN5bWJvbEl0ZW0iLCJkZWZpbml0aW9uIiwiX2RlZmluaXRpb24iLCJnZXRTeW1ib2xzIiwiZ2V0U2VsZWN0ZWRJdGVtcyIsInNlbGVjdGlvbkl0ZW1zIiwic2VsZWN0aW9uIiwiaXNJbnNlcnRlZCIsIl91cGRhdGVTZWxlY3Rpb24iLCJzZWxlY3RBbGwiLCJzZXRGdWxseVNlbGVjdGVkIiwiZGVzZWxlY3RBbGwiLCJhZGRMYXllciIsImxheWVyIiwiaW5zZXJ0TGF5ZXIiLCJfcmVtb3ZlIiwiX3NldFByb2plY3QiLCJzZXROYW1lIiwiX2luc2VydEl0ZW0iLCJfY3JlYXRlZCIsIk5PX0lOU0VSVCIsImluc2VydENoaWxkIiwiX2dldEl0ZW1zIiwiZ2V0SXRlbSIsInJlbW92ZU9uIiwic2V0cyIsIl9yZW1vdmVTZXRzIiwibW91c2VkcmFnIiwib3RoZXIiLCJkcmF3IiwicGl4ZWxSYXRpbyIsInNhdmUiLCJwYXJhbSIsIm9mZnNldCIsInZpZXdNYXRyaXgiLCJtYXRyaWNlcyIsInVwZGF0ZU1hdHJpeCIsInJlc3RvcmUiLCJzdHJva2VXaWR0aCIsIl9kcmF3U2VsZWN0aW9uIiwiX3NlcmlhbGl6ZUZpZWxkcyIsIl9jYW5BcHBseU1hdHJpeCIsIl9jYW5TY2FsZVN0cm9rZSIsIl9waXZvdCIsIl92aXNpYmxlIiwiX2JsZW5kTW9kZSIsIl9vcGFjaXR5IiwiX2xvY2tlZCIsIl9ndWlkZSIsIl9jbGlwTWFzayIsIl9zZWxlY3RCb3VuZHMiLCJfc2VsZWN0Q2hpbGRyZW4iLCJwaXZvdCIsInZpc2libGUiLCJibGVuZE1vZGUiLCJvcGFjaXR5IiwibG9ja2VkIiwiZ3VpZGUiLCJjbGlwTWFzayIsImRhdGEiLCJfY291bnRJdGVtRXZlbnQiLCJvbkZyYW1lIiwiX2FuaW1hdGVJdGVtIiwib25Mb2FkIiwib25FcnJvciIsIl9pdGVtSGFuZGxlcnMiLCJfaW5pdGlhbGl6ZSIsImhhc1Byb3BzIiwiX21hdHJpeCIsIl9wYXJlbnQiLCJfc3R5bGUiLCJwYXJlbnQiLCJmaWVsZHMiLCJmb250U2l6ZSIsIkdyb3VwIiwiX2RlZmF1bHRzIiwic3ltYm9sIiwiX3N5bWJvbCIsImNhY2hlUGFyZW50IiwiX3Byb2plY3QiLCJfYm91bmRzIiwiX3Bvc2l0aW9uIiwiX2RlY29tcG9zZWQiLCJfZ2xvYmFsTWF0cml4IiwiX2NsZWFyQm91bmRzQ2FjaGUiLCJnZXRJZCIsImdldE5hbWUiLCJfcmVtb3ZlTmFtZWQiLCJfZ2V0T3duZXIiLCJuYW1lZENoaWxkcmVuIiwiZ2V0U3R5bGUiLCJzZXRTdHlsZSIsImdldFNlbGVjdGlvbiIsInNldFNlbGVjdGlvbiIsImZsYWciLCJpc0Z1bGx5U2VsZWN0ZWQiLCJpc0NsaXBNYXNrIiwic2V0Q2xpcE1hc2siLCJzZXRGaWxsQ29sb3IiLCJzZXRTdHJva2VDb2xvciIsImdldERhdGEiLCJzZXREYXRhIiwiZ2V0UG9zaXRpb24iLCJwb3NpdGlvbiIsIl9nZXRQb3NpdGlvbkZyb21Cb3VuZHMiLCJzZXRQb3NpdGlvbiIsImdldEJvdW5kcyIsImdldFBpdm90Iiwic2V0UGl2b3QiLCJnZXRTdHJva2VCb3VuZHMiLCJzdHJva2UiLCJnZXRIYW5kbGVCb3VuZHMiLCJoYW5kbGUiLCJnZXRJbnRlcm5hbEJvdW5kcyIsImhhc01hdHJpeCIsIm9wdHMiLCJfYm91bmRzT3B0aW9ucyIsImdldFN0cm9rZVNjYWxpbmciLCJjYWNoZUl0ZW0iLCJfZ2V0Q2FjaGVkQm91bmRzIiwic2V0Qm91bmRzIiwiX2JhY2t1cCIsIl9nZXRCb3VuZHMiLCJfdXBkYXRlQm91bmRzQ2FjaGUiLCJfZ2V0Qm91bmRzQ2FjaGVLZXkiLCJub0ludGVybmFsIiwiY2FjaGVLZXkiLCJjYWNoZWQiLCJub25zY2FsaW5nIiwiaGFzU3Ryb2tlIiwiX2dldFN0cm9rZU1hdHJpeCIsIl9pdGVtIiwiZ2V0Vmlld01hdHJpeCIsIl9ib3VuZHNDYWNoZSIsImNhY2hlIiwiX2RlY29tcG9zZSIsImRlY29tcG9zZWQiLCJzZXRSb3RhdGlvbiIsInNldFNjYWxpbmciLCJnZXRNYXRyaXgiLCJzZXRNYXRyaXgiLCJnZXRHbG9iYWxNYXRyaXgiLCJfZG9udENsb25lIiwicGFyZW50cyIsImdldEFwcGx5TWF0cml4Iiwic2V0QXBwbHlNYXRyaXgiLCJnZXRUcmFuc2Zvcm1Db250ZW50Iiwic2V0VHJhbnNmb3JtQ29udGVudCIsImdldFByb2plY3QiLCJpbnN0YWxsRXZlbnRzIiwiZ2V0TGF5ZXIiLCJnZXRQYXJlbnQiLCJzZXRQYXJlbnQiLCJhZGRDaGlsZCIsImdldENoaWxkcmVuIiwic2V0Q2hpbGRyZW4iLCJyZW1vdmVDaGlsZHJlbiIsImFkZENoaWxkcmVuIiwiZ2V0Rmlyc3RDaGlsZCIsImdldExhc3RDaGlsZCIsImdldE5leHRTaWJsaW5nIiwiZ2V0UHJldmlvdXNTaWJsaW5nIiwiX2VxdWFscyIsImNvcHkiLCJkZWVwIiwiY29weUF0dHJpYnV0ZXMiLCJjb3B5Q29udGVudCIsImluc2VydEFib3ZlIiwib3JpZyIsImV4Y2x1ZGVNYXRyaXgiLCJyYXN0ZXJpemUiLCJyZXNvbHV0aW9uIiwiZ2V0UmVzb2x1dGlvbiIsInRvcExlZnQiLCJnZXRUb3BMZWZ0IiwiZmxvb3IiLCJib3R0b21SaWdodCIsImdldEJvdHRvbVJpZ2h0IiwiY2VpbCIsInJhc3RlciIsIlJhc3RlciIsImNhbnZhcyIsInNldENhbnZhcyIsIl9jb250YWlucyIsIl9hc1BhdGhJdGVtIiwiUGF0aCIsImdldEludGVyc2VjdGlvbnMiLCJoaXRUZXN0IiwiX2hpdFRlc3QiLCJIaXRSZXN1bHQiLCJoaXRUZXN0QWxsIiwiYWxsIiwiaGl0VGVzdENoaWxkcmVuIiwiX2V4Y2x1ZGUiLCJjaGlsZCIsIl9oaXRUZXN0Q2hpbGRyZW4iLCJwYXJlbnRWaWV3TWF0cml4IiwiZ3VpZGVzIiwidG9sZXJhbmNlUGFkZGluZyIsIl90b2xlcmFuY2VQYWRkaW5nIiwiX2dldFN0cm9rZVBhZGRpbmciLCJjaGVja1NlbGYiLCJoaXQiLCJjaGVja1BvaW50IiwicHQiLCJjaGVja1Bvc2l0aW9uIiwiY2hlY2tDZW50ZXIiLCJjaGVja0JvdW5kcyIsInBvaW50cyIsIl9oaXRUZXN0U2VsZiIsImZpbGwiLCJoYXNGaWxsIiwibWF0Y2hlcyIsImNvbXBhcmUiLCJtYXRjaE9iamVjdCIsImZpcnN0T25seSIsIm92ZXJsYXBwaW5nIiwiaW5zaWRlIiwicmVjdXJzaXZlIiwicGF0aCIsImNoaWxkTWF0cml4IiwiaW5zZXJ0Q2hpbGRyZW4iLCJpbnNlcnRlZCIsIm5vdGlmeVNlbGYiLCJfaW5zZXJ0QXQiLCJpbnNlcnRCZWxvdyIsInNlbmRUb0JhY2siLCJicmluZ1RvRnJvbnQiLCJhcHBlbmRUb3AiLCJhcHBlbmRCb3R0b20iLCJtb3ZlQWJvdmUiLCJtb3ZlQmVsb3ciLCJhZGRUbyIsImNvcHlUbyIsInJlZHVjZSIsIm5hbWVkQXJyYXkiLCJub3RpZnlQYXJlbnQiLCJfZGlzcG9zZSIsInJlcGxhY2VXaXRoIiwicmV2ZXJzZUNoaWxkcmVuIiwicmV2ZXJzZSIsImlzRWRpdGFibGUiLCJoYXNTaGFkb3ciLCJfZ2V0T3JkZXIiLCJnZXRMaXN0IiwibGlzdDEiLCJsaXN0MiIsImhhc0NoaWxkcmVuIiwiaXNBYm92ZSIsImlzQmVsb3ciLCJpc1BhcmVudCIsImlzQ2hpbGQiLCJpc0Rlc2NlbmRhbnQiLCJpc0FuY2VzdG9yIiwiaXNTaWJsaW5nIiwiaXNHcm91cGVkV2l0aCIsIl9hcHBseVJlY3Vyc2l2ZWx5IiwidHJhbnNmb3JtTWF0cml4IiwiZmlsbENvbG9yIiwiZ2V0RmlsbENvbG9yIiwic3Ryb2tlQ29sb3IiLCJnZXRTdHJva2VDb2xvciIsIl90cmFuc2Zvcm1Db250ZW50IiwiZGVjb21wIiwiYXBwbHlSZWN1cnNpdmVseSIsImdsb2JhbFRvTG9jYWwiLCJsb2NhbFRvR2xvYmFsIiwicGFyZW50VG9Mb2NhbCIsImxvY2FsVG9QYXJlbnQiLCJmaXRCb3VuZHMiLCJpdGVtUmF0aW8iLCJyZWN0UmF0aW8iLCJuZXdCb3VuZHMiLCJfc2V0U3R5bGVzIiwiZmlsbFN0eWxlIiwidG9DYW52YXNTdHlsZSIsInN0cm9rZVN0eWxlIiwibGluZVdpZHRoIiwiZ2V0U3Ryb2tlV2lkdGgiLCJzdHJva2VKb2luIiwiZ2V0U3Ryb2tlSm9pbiIsInN0cm9rZUNhcCIsImdldFN0cm9rZUNhcCIsIm1pdGVyTGltaXQiLCJnZXRNaXRlckxpbWl0IiwibGluZUpvaW4iLCJsaW5lQ2FwIiwiZGFzaEFycmF5IiwiZ2V0RGFzaEFycmF5IiwiZGFzaE9mZnNldCIsImdldERhc2hPZmZzZXQiLCJzZXRMaW5lRGFzaCIsImxpbmVEYXNoT2Zmc2V0IiwibW96RGFzaCIsIm1vekRhc2hPZmZzZXQiLCJibHVyIiwiZ2V0U2hhZG93Qmx1ciIsImdldFNoYWRvd09mZnNldCIsInNoYWRvd0NvbG9yIiwiZ2V0U2hhZG93Q29sb3IiLCJzaGFkb3dCbHVyIiwic2hhZG93T2Zmc2V0WCIsInNoYWRvd09mZnNldFkiLCJwYXJlbnRTdHJva2VNYXRyaXgiLCJnbG9iYWxNYXRyaXgiLCJtYWluQ3R4IiwiaXRlbU9mZnNldCIsInByZXZPZmZzZXQiLCJub3JtYWxCbGVuZCIsIm5hdGl2ZUJsZW5kIiwiZGlyZWN0IiwiZG9udFN0YXJ0IiwiY2xpcCIsIl9jYW5Db21wb3NpdGUiLCJwb3AiLCJzdHJva2VNYXRyaXgiLCJjbGlwSXRlbSIsImdsb2JhbEFscGhhIiwiZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uIiwic2V0VHJhbnNmb3JtIiwiX2RyYXciLCJkb250RmluaXNoIiwicHJvY2VzcyIsIl9pc1VwZGF0ZWQiLCJ1cGRhdGVWZXJzaW9uIiwiQ29tcG91bmRQYXRoIiwidXBkYXRlZCIsIml0ZW1TZWxlY3RlZCIsImJvdW5kc1NlbGVjdGVkIiwicG9zaXRpb25TZWxlY3RlZCIsIl9kcmF3U2VsZWN0ZWQiLCJjb2xvciIsImdldFNlbGVjdGVkQ29sb3IiLCJoYWxmIiwicG9zIiwiYmVnaW5QYXRoIiwiYXJjIiwiZGVsdGFzIiwiZGVsdGEiLCJtb3ZlVG8iLCJsaW5lVG8iLCJjbG9zZVBhdGgiLCJmaWxsUmVjdCIsImhhc2giLCJ0d2VlbiIsImVhc2luZyIsImR1cmF0aW9uIiwiVHdlZW4iLCJfaGFuZGxlRnJhbWUiLCJ0aW1lIiwicnVubmluZyIsInR3ZWVuVG8iLCJ0d2VlbkZyb20iLCJfY2xpcEl0ZW0iLCJfZ2V0Q2xpcEl0ZW0iLCJpc0NsaXBwZWQiLCJzZXRDbGlwcGVkIiwiY2xpcHBlZCIsIlNoYXBlIiwicmFkaXVzIiwiX3R5cGUiLCJfc2l6ZSIsIl9yYWRpdXMiLCJzZXRUeXBlIiwic2V0UmFkaXVzIiwiZ2V0VHlwZSIsImdldFNoYXBlIiwic2V0U2hhcGUiLCJnZXRSYWRpdXMiLCJyYWQiLCJ0b1BhdGgiLCJ0b1NoYXBlIiwiZG9udFBhaW50IiwidW50cmFuc2Zvcm1lZCIsImlzQ2lyY2xlIiwicngiLCJyeSIsImthcHBhIiwiY3giLCJjeSIsImJlemllckN1cnZlVG8iLCJnZXRGaWxsUnVsZSIsImdldENvcm5lckNlbnRlciIsImhhbGZTaXplIiwiZGlyIiwiY29ybmVyIiwicXVhZHJhbnQiLCJpc09uRWxsaXBzZVN0cm9rZSIsInBhZGRpbmciLCJ2ZWN0b3IiLCJoaXRTdHJva2UiLCJoaXRGaWxsIiwic3Ryb2tlUmFkaXVzIiwic3Ryb2tlUGFkZGluZyIsIm91dGVyIiwiaW5uZXIiLCJjcmVhdGVTaGFwZSIsIkNpcmNsZSIsIkVsbGlwc2UiLCJlbGxpcHNlIiwiX3JlYWRFbGxpcHNlIiwiY3Jvc3NPcmlnaW4iLCJfc21vb3RoaW5nIiwiaW1hZ2UiLCJnZXRFbGVtZW50QnlJZCIsInNldEltYWdlIiwic2V0U291cmNlIiwiX2xvYWRlZCIsImdldFNvdXJjZSIsIl9pbWFnZSIsIl9jYW52YXMiLCJfc2V0SW1hZ2UiLCJjb3B5Q2FudmFzIiwiZHJhd0ltYWdlIiwiX2Nyb3NzT3JpZ2luIiwiZ2V0RWxlbWVudCIsImdldExvYWRlZCIsInUiLCJnZXRQcGkiLCJnZXRJbWFnZSIsIkV2ZW50Iiwic2V0VGltZW91dCIsIkRvbUV2ZW50IiwibG9hZCIsImVycm9yIiwiY29tcGxldGUiLCJuYXR1cmFsV2lkdGgiLCJuYXR1cmFsSGVpZ2h0IiwiX2NvbnRleHQiLCJlIiwibW9kaWZ5Iiwic2V0Q29udGV4dCIsImNvbnRleHQiLCJ0b0RhdGFVUkwiLCJJbWFnZSIsImdldENyb3NzT3JpZ2luIiwic2V0Q3Jvc3NPcmlnaW4iLCJnZXRTbW9vdGhpbmciLCJzZXRTbW9vdGhpbmciLCJzbW9vdGhpbmciLCJnZXRTdWJDYW52YXMiLCJnZXRTdWJSYXN0ZXIiLCJnZXRBdmVyYWdlQ29sb3IiLCJQYXRoSXRlbSIsIl9zYW1wbGVDb250ZXh0IiwiY2xlYXJSZWN0Iiwic2FtcGxlU2l6ZSIsInBpeGVscyIsImdldEltYWdlRGF0YSIsImNoYW5uZWxzIiwidG90YWwiLCJhbHBoYSIsIkNvbG9yIiwiZ2V0UGl4ZWwiLCJzZXRQaXhlbCIsImNvbXBvbmVudHMiLCJfY29udmVydCIsIl9hbHBoYSIsImltYWdlRGF0YSIsImNyZWF0ZUltYWdlRGF0YSIsInB1dEltYWdlRGF0YSIsInNldEltYWdlRGF0YSIsIkRvbUVsZW1lbnQiLCJzZXRQcmVmaXhlZCIsInNldERlZmluaXRpb24iLCJTeW1ib2xEZWZpbml0aW9uIiwiZ2V0RGVmaW5pdGlvbiIsImdldFN5bWJvbCIsInNldFN5bWJvbCIsImRvbnRDZW50ZXIiLCJzZXRJdGVtIiwiX2RvbnRDZW50ZXIiLCJwbGFjZSIsInZhbHVlcyIsInNlZ21lbnRzIiwiaGFuZGxlcyIsImVuZHMiLCJTZWdtZW50IiwiYXJnNSIsImhhbmRsZUluIiwiaGFuZGxlT3V0IiwiU2VnbWVudFBvaW50IiwiX3BvaW50IiwiaGFzSGFuZGxlcyIsIl9oYW5kbGVJbiIsIl9oYW5kbGVPdXQiLCJfcGF0aCIsImN1cnZlIiwiY3VydmVzIiwiX2N1cnZlcyIsIl9jbG9zZWQiLCJnZXRIYW5kbGVJbiIsInNldEhhbmRsZUluIiwiZ2V0SGFuZGxlT3V0Iiwic2V0SGFuZGxlT3V0IiwiaXNTbW9vdGgiLCJjbGVhckhhbmRsZXMiLCJvbGRTZWxlY3Rpb24iLCJnZXRQYXRoIiwiZ2V0Q3VydmUiLCJfc2VnbWVudHMiLCJnZXRDdXJ2ZXMiLCJnZXRMb2NhdGlvbiIsIkN1cnZlTG9jYXRpb24iLCJfc2VnbWVudDEiLCJnZXROZXh0Iiwic21vb3RoIiwiX2ZpcnN0IiwiX2xhc3QiLCJmYWN0b3IiLCJnZXRQcmV2aW91cyIsInAwIiwicDEiLCJwMiIsImsiLCJkMV9hIiwiZDFfMmEiLCJkMl9hIiwiZDJfMmEiLCJOIiwiaXNMYXN0IiwicmV2ZXJzZWQiLCJyZW1vdmVTZWdtZW50Iiwic2VnbWVudCIsImludGVycG9sYXRlIiwiaGFuZGxlSW4xIiwiaGFuZGxlSW4yIiwiaGFuZGxlT3V0MiIsImhhbmRsZU91dDEiLCJjaGFuZ2UiLCJDdXJ2ZSIsImFyZzYiLCJhcmc3Iiwic2VnMSIsInNlZzIiLCJoYW5kbGUxIiwiaGFuZGxlMiIsInNlZ21lbnQxIiwic2VnbWVudDIiLCJfc2VnbWVudDIiLCJnZXRQb2ludDEiLCJnZXRIYW5kbGUxIiwiZ2V0SGFuZGxlMiIsImdldFBvaW50MiIsIl9sZW5ndGgiLCJjbGFzc2lmeSIsInNldFBvaW50MSIsInNldFBvaW50MiIsInNldEhhbmRsZTEiLCJzZXRIYW5kbGUyIiwiZ2V0U2VnbWVudDEiLCJnZXRTZWdtZW50MiIsImdldFBvaW50cyIsImdldExpbmUiLCJnZXRQYXJ0IiwiZ2V0UGFydExlbmd0aCIsImRpdmlkZUF0IiwibG9jYXRpb24iLCJkaXZpZGVBdFRpbWUiLCJnZXRUaW1lQXQiLCJfc2V0SGFuZGxlcyIsInN1YmRpdmlkZSIsInNldEhhbmRsZXMiLCJzcGxpdEF0Iiwic3BsaXRBdFRpbWUiLCJnZXRMb2NhdGlvbkF0VGltZSIsImlzVGltZSIsInN0cmFpZ2h0IiwiaDEiLCJoMiIsInkwIiwieDMiLCJ5MyIsIng0IiwieTQiLCJ4NSIsInk1IiwieDYiLCJ5NiIsIng3IiwieTciLCJ4OCIsInk4IiwieDkiLCJ5OSIsImdldE1vbm9DdXJ2ZXMiLCJpbyIsIm8wIiwibzEiLCJvMiIsIm8zIiwiaXNTdHJhaWdodCIsInNvcnQiLCJjb29yZCIsInYwIiwidjMiLCJnZXRUaW1lT2YiLCJwMyIsImdldE5lYXJlc3RUaW1lIiwibWluRGlzdCIsIm1pblQiLCJyZWZpbmUiLCJkaXN0Iiwic3RlcCIsImZsaXAiLCJpc0ZsYXRFbm91Z2giLCJmbGF0bmVzcyIsInV4IiwidXkiLCJfYWRkQm91bmRzIiwibWluUGFkIiwibWF4UGFkIiwiczEiLCJzMiIsImlzTGluZWFyIiwidGhpcmQiLCJoYXNMZW5ndGgiLCJpc0hvcml6b250YWwiLCJnZXRUYW5nZW50QXRUaW1lIiwiaXNWZXJ0aWNhbCIsImdldExvY2F0aW9uQXQiLCJfaXNUaW1lIiwiZ2V0UGFyYW1ldGVyQXQiLCJnZXRUaW1lc1dpdGhUYW5nZW50IiwidGFuZ2VudCIsImdldE9mZnNldEF0VGltZSIsImdldExvY2F0aW9uT2YiLCJnZXRPZmZzZXRPZiIsImxvYyIsImdldE9mZnNldCIsImdldFBhcmFtZXRlck9mIiwiZ2V0TmVhcmVzdExvY2F0aW9uIiwiZ2V0TmVhcmVzdFBvaW50IiwibWV0aG9kcyIsIl9ldmFsdWF0ZU1ldGhvZHMiLCJnZXRMZW5ndGhJbnRlZ3JhbmQiLCJheCIsImJ4IiwiYXkiLCJieSIsImdldEl0ZXJhdGlvbnMiLCJub3JtYWxpemVkIiwibGVuIiwiZDMiLCJ0MSIsInQyIiwiaGFzUm9vdHMiLCJ0MU9rIiwidDJPayIsImYxIiwiZjIiLCJkcyIsImZvcndhcmQiLCJyYW5nZUxlbmd0aCIsImRpZmYiLCJndWVzcyIsImdldFRhbmdlbnQiLCJnZXRXZWlnaHRlZFRhbmdlbnQiLCJnZXROb3JtYWwiLCJnZXRXZWlnaHRlZE5vcm1hbCIsImdldEN1cnZhdHVyZSIsImdldFBlYWtzIiwiYWRkTG9jYXRpb24iLCJsb2NhdGlvbnMiLCJvdmVybGFwIiwiZXhjbHVkZVN0YXJ0IiwiZXhjbHVkZUVuZCIsImxvYzEiLCJsb2MyIiwiX2ludGVyc2VjdGlvbiIsImNsaXBDb252ZXhIdWxsIiwiaHVsbFRvcCIsImh1bGxCb3R0b20iLCJkTWluIiwiZE1heCIsImNsaXBDb252ZXhIdWxsUGFydCIsInRocmVzaG9sZCIsInF4IiwicXkiLCJnZXRDdXJ2ZUxpbmVJbnRlcnNlY3Rpb25zIiwiZ2V0Q3VydmVJbnRlcnNlY3Rpb25zIiwib3ZlcmxhcHMiLCJnZXRPdmVybGFwcyIsInN0cmFpZ2h0MSIsInN0cmFpZ2h0MiIsImJlZm9yZSIsImFkZEN1cnZlSW50ZXJzZWN0aW9ucyIsInJlY3Vyc2lvbiIsImNhbGxzIiwidE1pbiIsInRNYXgiLCJ1TWluIiwidU1heCIsInRNaW5DbGlwIiwidE1heENsaXAiLCJxMHgiLCJxMHkiLCJxM3giLCJxM3kiLCJkcDAiLCJkcDEiLCJkcDIiLCJkcDMiLCJodWxsIiwiZHEwIiwiZHExIiwiZHEyIiwiZHEzIiwiZGlzdDEiLCJkaXN0MiIsImRpc3RSYXRpbyIsImdldENvbnZleEh1bGwiLCJ0TWluTmV3IiwidE1heE5ldyIsImkxIiwiaTIiLCJnZXRMb29wSW50ZXJzZWN0aW9uIiwiaW5mbyIsImdldFNxdWFyZWRMaW5lTGVuZ3RoIiwic3RyYWlnaHRCb3RoIiwibDEiLCJsMiIsInBhaXJzIiwiY3VydmVzMSIsImN1cnZlczIiLCJtYXRyaXgxIiwibWF0cml4MiIsIl9yZXR1cm5GaXJzdCIsImxlbmd0aDEiLCJsZW5ndGgyIiwidmFsdWVzMiIsImFycmF5cyIsImN1cnZlMSIsInZhbHVlczEiLCJwYXRoMSIsImRlbiIsInRpbWVzIiwidDAiLCJfb3ZlcmxhcCIsIl9kaXN0YW5jZSIsIl9zZXRDdXJ2ZSIsIl90aW1lIiwiZ2V0UG9pbnRBdFRpbWUiLCJfbmV4dCIsIl9wcmV2aW91cyIsIl92ZXJzaW9uIiwiX2N1cnZlIiwiX3NlZ21lbnQiLCJfc2V0U2VnbWVudCIsImdldFNlZ21lbnQiLCJnZXRUaW1lIiwidHJ5U2VnbWVudCIsIl9vZmZzZXQiLCJfY3VydmVPZmZzZXQiLCJnZXRQYXJhbWV0ZXIiLCJnZXRDdXJ2ZU9mZnNldCIsImdldEludGVyc2VjdGlvbiIsImdldExhc3RTZWdtZW50IiwiX2lnbm9yZU90aGVyIiwiaXNUb3VjaGluZyIsImludGVyIiwiY3VydmUyIiwiaXNDcm9zc2luZyIsInQxSW5zaWRlIiwidDJJbnNpZGUiLCJjNCIsImMzIiwib2Zmc2V0cyIsImFkZE9mZnNldHMiLCJpc0luUmFuZ2UiLCJnZXRQb2ludEF0IiwidjQiLCJhMyIsImE0IiwiaGFzT3ZlcmxhcCIsIm1lcmdlIiwic2VhcmNoIiwiZm91bmQiLCJwYXRoMiIsImV4cGFuZGVkIiwiY29tcG91bmQiLCJwYXRoRGF0YSIsImZpcnN0IiwiaXNDbG9ja3dpc2UiLCJzZXRDbG9ja3dpc2UiLCJjbG9ja3dpc2UiLCJzZXRQYXRoRGF0YSIsInByZXZpb3VzIiwiY29udHJvbCIsInJlbGF0aXZlIiwiZ2V0Q29vcmQiLCJjb21tYW5kIiwibG93ZXIiLCJtb3ZlIiwiY3ViaWNDdXJ2ZVRvIiwicXVhZHJhdGljQ3VydmVUbyIsImFyY1RvIiwid2luZGluZyIsIl9nZXRXaW5kaW5nIiwib25QYXRoIiwid2luZGluZ0wiLCJ3aW5kaW5nUiIsImdldENyb3NzaW5ncyIsIm1pbkxvYyIsImlzUGF0aCIsIml0ZW1zRnJvbSIsIml0ZW1zVG8iLCJzZXRDbG9zZWQiLCJwYXRoczEiLCJwYXRoczIiLCJtYXRjaGVkIiwiY2xvc2VkIiwic2V0U2VnbWVudHMiLCJfc2VnbWVudFNlbGVjdGlvbiIsIl9hcmVhIiwiZ2V0U2VnbWVudHMiLCJmdWxseVNlbGVjdGVkIiwibGFzdCIsIl9hZGQiLCJnZXRGaXJzdFNlZ21lbnQiLCJfY291bnRDdXJ2ZXMiLCJnZXRGaXJzdEN1cnZlIiwiZ2V0TGFzdEN1cnZlIiwiaXNDbG9zZWQiLCJnZXRQYXRoRGF0YSIsIl9wcmVjaXNpb24iLCJjdXJYIiwiY3VyWSIsInByZXZYIiwicHJldlkiLCJpblgiLCJpblkiLCJvdXRYIiwib3V0WSIsImFkZFNlZ21lbnQiLCJza2lwTGluZSIsInNlZ3MiLCJfYWRqdXN0Q3VydmVzIiwiaW5zZXJ0U2VnbWVudCIsImFkZFNlZ21lbnRzIiwiaW5zZXJ0U2VnbWVudHMiLCJyZW1vdmVTZWdtZW50cyIsIl9pbmNsdWRlQ3VydmVzIiwiYXJlYSIsIl9zZWxlY3RTZWdtZW50cyIsIm5ld1NlbGVjdGlvbiIsImxhc3QxIiwibGFzdDIiLCJmaXJzdDIiLCJmaXJzdDEiLCJzaW1wbGlmeSIsImZsYXR0ZW4iLCJQYXRoRmxhdHRlbmVyIiwiUGF0aEZpdHRlciIsImZpdCIsIl9kZWZhdWx0IiwibG9vcCIsImFzeW1tZXRyaWMiLCJwYWRkaW5nTGVmdCIsInBhZGRpbmdSaWdodCIsImtub3RzIiwibl8xIiwicmYiLCJoeCIsImh5IiwidG9wQ2VudGVyIiwic2VnMyIsInNlZzQiLCJpc0FyYyIsInB0MSIsInB0MiIsInNoYXBlIiwicG9zMiIsImVuZDIiLCJwb3MxIiwiZW5kMSIsInN0YXJ0MiIsImNhcCIsIm51bVNlZ21lbnRzIiwiaGl0Q3VydmVzIiwiaXNDbG9zZUVub3VnaCIsImNoZWNrU2VnbWVudFBvaW50Iiwic2VnIiwiYW5jaG9yIiwiY2hlY2tTZWdtZW50UG9pbnRzIiwiYWRkVG9BcmVhIiwiY2hlY2tTZWdtZW50U3Ryb2tlIiwiaXNKb2luIiwiX2FkZEJldmVsSm9pbiIsIl9hZGRTcXVhcmVDYXAiLCJnZXRPZmZzZXRzV2l0aFRhbmdlbnQiLCJjdXJ2ZVN0YXJ0IiwiY3VydmVUaW1lcyIsImRyYXdTZWdtZW50cyIsImRyYXdTZWdtZW50IiwiZGFzaExlbmd0aCIsImZsYXR0ZW5lciIsImRyYXdQYXJ0IiwicFgiLCJwWSIsImRyYXdIYW5kbGUiLCJoWCIsImhZIiwiZHJhd0hhbmRsZXMiLCJnZXRDdXJyZW50U2VnbWVudCIsIm1vdmVCeSIsImN1cnZlVG8iLCJ0aHJvdWdoIiwiZXh0ZW50IiwibWlkZGxlIiwibGFyZ2UiLCJyeFNxIiwicnlTcSIsInhTcSIsInlTcSIsInRocm91Z2hTaWRlIiwiY2VudGVyU2lkZSIsImV4dCIsImluYyIsInoiLCJvdXQiLCJfaW4iLCJsaW5lQnkiLCJjdXJ2ZUJ5IiwicGFyYW1ldGVyIiwiY3ViaWNDdXJ2ZUJ5IiwicXVhZHJhdGljQ3VydmVCeSIsImFyY0J5IiwibWV0aG9kIiwicHJldkNvb3JkcyIsInByb2Nlc3NTZWdtZW50Iiwiam9pbkJvdW5kcyIsImFkZFBvaW50IiwiYWRkUm91bmQiLCJhZGRKb2luIiwiYWRkQ2FwIiwicGhpIiwiaXNBcmVhIiwibm9ybWFsMSIsImdldE5vcm1hbEF0VGltZSIsIm5vcm1hbDIiLCJub3JtYWwiLCJqb2luUGFkZGluZyIsImpvaW5SYWRpdXMiLCJTUVJUMiIsInBhZGRpbmdYIiwicGFkZGluZ1kiLCJ4biIsInh4IiwieW4iLCJ5eCIsImVsbGlwc2VTZWdtZW50cyIsImNyZWF0ZVBhdGgiLCJjcmVhdGVFbGxpcHNlIiwiYmwiLCJnZXRCb3R0b21MZWZ0IiwidGwiLCJ0ciIsImdldFRvcFJpZ2h0IiwiYnIiLCJSb3VuZFJlY3RhbmdsZSIsIk92YWwiLCJBcmMiLCJSZWd1bGFyUG9seWdvbiIsInNpZGVzIiwidGhyZWUiLCJTdGFyIiwicmFkaXVzMSIsInJhZGl1czIiLCJwYXRocyIsImdldEN1cnJlbnRQYXRoIiwiY2hlY2siLCJvcGVyYXRvcnMiLCIxIiwiMiIsIi0xIiwicHJlcGFyZVBhdGgiLCJyZXNvbHZlIiwicmVzb2x2ZUNyb3NzaW5ncyIsInJlb3JpZW50IiwiY3JlYXRlUmVzdWx0IiwicmVzdWx0IiwidHJhY2VCb29sZWFuIiwib3BlcmF0aW9uIiwidHJhY2UiLCJzcGxpdEJvb2xlYW4iLCJfcGF0aDEiLCJfcGF0aDIiLCJvcGVyYXRvciIsImNyb3NzaW5ncyIsImRpdmlkZUxvY2F0aW9ucyIsImNvbGxlY3QiLCJfb3ZlcmxhcHNPbmx5IiwicHJvcGFnYXRlV2luZGluZyIsIl93aW5kaW5nIiwidHJhY2VQYXRocyIsInJlb3JpZW50UGF0aHMiLCJhZGRlZCIsImFkZFBhdGgiLCJsaW5rSW50ZXJzZWN0aW9ucyIsImNsZWFyQ3VydmVIYW5kbGVzIiwibG9va3VwIiwiY29udGFpbmVyIiwic29ydGVkIiwiZW50cnkxIiwiZ2V0SW50ZXJpb3JQb2ludCIsImNvbnRhaW5lcldpbmRpbmciLCJlbnRyeTIiLCJjbGVhckxhdGVyIiwicmVub3JtYWxpemVMb2NzIiwicHJldkN1cnZlIiwicHJldlRpbWUiLCJyZXN1bHRzIiwiY2xlYXJDdXJ2ZXMiLCJjbGVhckxvb2t1cCIsIm9yaWdUaW1lIiwibmV3Q3VydmUiLCJnZXRXaW5kaW5nIiwiZG9udEZsaXAiLCJ2UHJldiIsInZDbG9zZSIsImlhIiwicHYiLCJwYSIsInBvIiwicXVhbGl0eUVwc2lsb24iLCJwYUwiLCJwYVIiLCJwYXRoV2luZGluZ0wiLCJwYXRoV2luZGluZ1IiLCJvbkFueVBhdGgiLCJxdWFsaXR5IiwiYWRkV2luZGluZyIsImEwIiwid2luZGluZ1ByZXYiLCJhM1ByZXYiLCJoYW5kbGVDdXJ2ZSIsIm1vbm9DdXJ2ZXMiLCJ0b3RhbExlbmd0aCIsImN1cnZlTGVuZ3RoIiwib3BlcmFuZCIsIlNRUlQxXzIiLCJ3aW5kIiwicGF0aFdpbmRpbmciLCJzdGFydHMiLCJpc1ZhbGlkIiwiX3Zpc2l0ZWQiLCJpc1N0YXJ0IiwidmlzaXRQYXRoIiwiZ2V0Q3Jvc3NpbmdTZWdtZW50cyIsImNvbGxlY3RTdGFydHMiLCJuZXh0SW50ZXIiLCJfcHJldiIsImludGVyMSIsImludGVyMiIsIm92ZXIxIiwib3ZlcjIiLCJicmFuY2giLCJ2aXNpdGVkIiwidmFsaWQiLCJmaW5pc2hlZCIsImJyYW5jaGVzIiwic2hpZnQiLCJoYXNPdmVybGFwcyIsImhhc0Nyb3NzaW5ncyIsImludGVyc2VjdGlvbnMiLCJub25aZXJvIiwiaW50ZXJjZXB0cyIsIm12IiwibW8wIiwibW8zIiwibWF4UmVjdXJzaW9uIiwiaWdub3JlU3RyYWlnaHQiLCJtaW5TcGFuIiwiYWRkQ3VydmUiLCJjb21wdXRlUGFydHMiLCJoYWx2ZXMiLCJ0TWlkIiwiX2dldCIsImZpdEN1YmljIiwidGFuMSIsInRhbjIiLCJ1UHJpbWUiLCJjaG9yZExlbmd0aFBhcmFtZXRlcml6ZSIsIm1heEVycm9yIiwicGFyYW1ldGVyc0luT3JkZXIiLCJnZW5lcmF0ZUJlemllciIsImZpbmRNYXhFcnJvciIsInJlcGFyYW1ldGVyaXplIiwidGFuQ2VudGVyIiwiQyIsIlgiLCJiMCIsImIzIiwiYWxwaGExIiwiYWxwaGEyIiwiZGV0QzBDMSIsImRldEMwWCIsImMwIiwic2VnTGVuZ3RoIiwiZXBzIiwiZGVncmVlIiwibWF4RGlzdCIsIlRleHRJdGVtIiwiY29udGVudCIsIl9jb250ZW50IiwiX2xpbmVzIiwic2V0Q29udGVudCIsImdldENvbnRlbnQiLCJnZXRDaGFyYWN0ZXJTdHlsZSIsInNldENoYXJhY3RlclN0eWxlIiwiZ2V0UGFyYWdyYXBoU3R5bGUiLCJzZXRQYXJhZ3JhcGhTdHlsZSIsIlBvaW50VGV4dCIsImxpbmVzIiwibGVhZGluZyIsImdldExlYWRpbmciLCJmb250IiwiZ2V0Rm9udFN0eWxlIiwidGV4dEFsaWduIiwiZ2V0SnVzdGlmaWNhdGlvbiIsImZpbGxUZXh0Iiwic3Ryb2tlVGV4dCIsIm51bUxpbmVzIiwianVzdGlmaWNhdGlvbiIsImdldFRleHRXaWR0aCIsImNvbG9yQ3R4IiwiZ3JheSIsInJnYiIsImhzYiIsImhzbCIsImdyYWRpZW50IiwiY29tcG9uZW50UGFyc2VycyIsIm5hbWVkQ29sb3JzIiwidHJhbnNwYXJlbnQiLCJoc2JJbmRpY2VzIiwiY29udmVydGVycyIsInJnYi1oc2IiLCJnIiwiaHNiLXJnYiIsInJnYi1oc2wiLCJhY2hyb21hdGljIiwiaHNsLXJnYiIsInQzcyIsInQzIiwicmdiLWdyYXkiLCJncmF5LXJnYiIsImdyYXktaHNiIiwiZ3JheS1oc2wiLCJncmFkaWVudC1yZ2IiLCJyZ2ItZ3JhZGllbnQiLCJwcm9wZXJ0aWVzIiwicGFyc2VyIiwiX2NvbXBvbmVudHMiLCJHcmFkaWVudCIsIl9yZW1vdmVPd25lciIsIl9hZGRPd25lciIsIl9wcm9wZXJ0aWVzIiwiYXJnVHlwZSIsImNvbnZlcnRlZCIsInN0cmluZyIsInBhcnNlSW50IiwiaXNIU0wiLCJjb21wb25lbnQiLCJ1bml0IiwidHVybiIsImdyYWQiLCJmcm9tQ1NTIiwicGFyc2VycyIsInN0b3BzIiwicmFkaWFsIiwiZ2V0Q29tcG9uZW50cyIsIl9jYW52YXNTdHlsZSIsImNvbnZlcnRlciIsImNvbnZlcnQiLCJnZXRBbHBoYSIsInNldEFscGhhIiwiaGFzQWxwaGEiLCJjb2wiLCJpc0dyYWRpZW50IiwidG9DU1MiLCJoZXgiLCJjYW52YXNHcmFkaWVudCIsIl9zdG9wcyIsIm9yaWdpbiIsImRlc3RpbmF0aW9uIiwiaGlnaGxpZ2h0IiwiaW52ZXJzZSIsIl9yYWRpYWwiLCJjcmVhdGVSYWRpYWxHcmFkaWVudCIsImNyZWF0ZUxpbmVhckdyYWRpZW50IiwiYWRkQ29sb3JTdG9wIiwiX2NvbG9yIiwiX3R5cGVzIiwiY29tcG9uZW50czEiLCJjb21wb25lbnRzMiIsInNldFN0b3BzIiwic2V0UmFkaWFsIiwiX293bmVycyIsImdldFN0b3BzIiwiR3JhZGllbnRTdG9wIiwiZ2V0UmFkaWFsIiwic3RvcHMxIiwic3RvcHMyIiwicmFtcFBvaW50Iiwic2V0Q29sb3IiLCJzZXRPZmZzZXQiLCJnZXRSYW1wUG9pbnQiLCJzZXRSYW1wUG9pbnQiLCJnZXRDb2xvciIsIml0ZW1EZWZhdWx0cyIsImZpbGxSdWxlIiwic3Ryb2tlU2NhbGluZyIsInNoYWRvd09mZnNldCIsInNlbGVjdGVkQ29sb3IiLCJncm91cERlZmF1bHRzIiwiZm9udEZhbWlseSIsImZvbnRXZWlnaHQiLCJ0ZXh0RGVmYXVsdHMiLCJfdmFsdWVzIiwiaXNDb2xvciIsImlzUG9pbnQiLCJhcHBseVRvQ2hpbGRyZW4iLCJvbGQiLCJfZG9udE1lcmdlIiwiY2hpbGRWYWx1ZSIsIkZvbnQiLCJXaW5kaW5nUnVsZSIsImlzU3R5bGUiLCJzdHlsZTEiLCJzdHlsZTIiLCJzZWNvbmRhcnkiLCJkZWZhdWx0czIiLCJ2YWx1ZTEiLCJ2YWx1ZTIiLCJnZXRGb250U2l6ZSIsImdldEZvbnRXZWlnaHQiLCJnZXRGb250RmFtaWx5IiwiZ2V0Rm9udCIsInNldEZvbnQiLCJnZXRQaXhlbFNpemUiLCJoYW5kbGVQcmVmaXgiLCJwcmVmaXhlcyIsInN1ZmZpeCIsInByZWZpeCIsImdldFN0eWxlcyIsImRvYyIsIm5vZGVUeXBlIiwib3duZXJEb2N1bWVudCIsImRlZmF1bHRWaWV3IiwiZ2V0Q29tcHV0ZWRTdHlsZSIsInZpZXdwb3J0IiwiYm9keSIsImh0bWwiLCJkb2N1bWVudEVsZW1lbnQiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJjbGllbnRMZWZ0IiwiY2xpZW50VG9wIiwicGFnZVhPZmZzZXQiLCJzY3JvbGxMZWZ0IiwicGFnZVlPZmZzZXQiLCJzY3JvbGxUb3AiLCJnZXRWaWV3cG9ydEJvdW5kcyIsImlubmVyV2lkdGgiLCJjbGllbnRXaWR0aCIsImlubmVySGVpZ2h0IiwiY2xpZW50SGVpZ2h0IiwiaXNJbnZpc2libGUiLCJpc0luVmlldyIsImdldFByZWZpeGVkIiwicGFzc2l2ZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwidGFyZ2V0VG91Y2hlcyIsImNoYW5nZWRUb3VjaGVzIiwicGFnZVgiLCJjbGllbnRYIiwicGFnZVkiLCJjbGllbnRZIiwiZ2V0VGFyZ2V0Iiwic3JjRWxlbWVudCIsImdldFJlbGF0ZWRUYXJnZXQiLCJyZWxhdGVkVGFyZ2V0IiwidG9FbGVtZW50IiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwidGltZXIiLCJuYXRpdmVSZXF1ZXN0IiwicmVxdWVzdGVkIiwiY2FsbGJhY2tzIiwiaGFuZGxlQ2FsbGJhY2tzIiwiZnVuY3Rpb25zIiwiY2FsbGJhY2siLCJzZXRJbnRlcnZhbCIsImdldENhbnZhc1NpemUiLCJzZXRBdHRyaWJ1dGUiLCJfdmlld0V2ZW50cyIsInVzZXJEcmFnIiwidXNlclNlbGVjdCIsInRvdWNoQ2FsbG91dCIsImNvbnRlbnRab29taW5nIiwidGFwSGlnaGxpZ2h0Q29sb3IiLCJfd2luZG93RXZlbnRzIiwicmVzaXplIiwic2V0Vmlld1NpemUiLCJTdGF0cyIsIl9zdGF0cyIsInN0YXRzIiwiZG9tRWxlbWVudCIsImFwcGVuZENoaWxkIiwiX2VsZW1lbnQiLCJfcGl4ZWxSYXRpbyIsImRldmljZVBpeGVsUmF0aW8iLCJfc2V0RWxlbWVudFNpemUiLCJfdmlld1NpemUiLCJfdmlld3MiLCJfdmlld3NCeUlkIiwiX2ZvY3VzZWQiLCJfZnJhbWVJdGVtcyIsIl9mcmFtZUl0ZW1Db3VudCIsIl9pdGVtRXZlbnRzIiwibmF0aXZlIiwidmlydHVhbCIsIm5vZGUiLCJfYW5pbWF0ZSIsInBsYXkiLCJwYXVzZSIsIl9jb3VudCIsImdldEF1dG9VcGRhdGUiLCJzZXRBdXRvVXBkYXRlIiwiYXV0b1VwZGF0ZSIsInVwZGF0ZSIsIm5vdyIsIkRhdGUiLCJhbmltYXRlIiwiX2hhbmRsZUZyYW1lSXRlbXMiLCJnZXRQaXhlbFJhdGlvIiwiZ2V0Vmlld1NpemUiLCJpc1Zpc2libGUiLCJwYXJlbnROb2RlIiwidGVtcCIsImNyZWF0ZUVsZW1lbnQiLCJyZW1vdmVDaGlsZCIsImdldFpvb20iLCJzZXRab29tIiwiem9vbSIsInNjcm9sbEJ5IiwicHJvamVjdFRvVmlldyIsInZpZXdUb1Byb2plY3QiLCJnZXRFdmVudFBvaW50IiwiQ2FudmFzVmlldyIsInByZXZGb2N1cyIsInRlbXBGb2N1cyIsIm1vdXNlZG93biIsIm1vdXNlbW92ZSIsIm1vdXNldXAiLCJkcmFnZ2luZyIsIm1vdXNlRG93biIsInBvaW50ZXJFbmFibGVkIiwibXNQb2ludGVyRW5hYmxlZCIsInZpZXdFdmVudHMiLCJkb2NFdmVudHMiLCJtb3VzZW91dCIsIm5vZGVOYW1lIiwiaGFuZGxlTW91c2VNb3ZlIiwic2Nyb2xsIiwiX2hhbmRsZU1vdXNlRXZlbnQiLCJkb3duUG9pbnQiLCJsYXN0UG9pbnQiLCJkb3duSXRlbSIsIm92ZXJJdGVtIiwiZHJhZ0l0ZW0iLCJjbGlja0l0ZW0iLCJjbGlja1RpbWUiLCJkYmxDbGljayIsImNhbGxlZCIsInByZXZlbnRlZCIsImZhbGxiYWNrcyIsImRvdWJsZWNsaWNrIiwid2FzSW5WaWV3IiwiaXRlbUV2ZW50c01hcCIsImNsaWNrIiwibW91c2VlbnRlciIsIm1vdXNlbGVhdmUiLCJpdGVtRXZlbnRzIiwiaGl0SXRlbXMiLCJuYXRpdmVNb3ZlIiwidG9vbCIsImluVmlldyIsImhpdEl0ZW0iLCJtb3VzZSIsInN1YnN0ciIsImVtaXRNb3VzZUV2ZW50IiwiZHJhZyIsImVtaXRNb3VzZUV2ZW50cyIsImRvd24iLCJ1cCIsImNhbmNlbGFibGUiLCJwcmV2ZW50RGVmYXVsdCIsIl9oYW5kbGVLZXlFdmVudCIsImNoYXJhY3RlciIsImtleUV2ZW50IiwiS2V5RXZlbnQiLCJzaWduIiwiX3Jlc2V0U3RhdGUiLCJwcmV2UG9pbnQiLCJzdG9wSXRlbSIsIm1vdXNlRXZlbnQiLCJzdG9wcGVkIiwiTW91c2VFdmVudCIsImZhbGxiYWNrIiwiSFRNTENhbnZhc0VsZW1lbnQiLCJkZXZpY2VSYXRpbyIsImJhY2tpbmdTdG9yZVJhdGlvIiwiZmlyZWZveCIsInByZXZGb250IiwibWVhc3VyZVRleHQiLCJzdG9wUHJvcGFnYXRpb24iLCJnZXRUaW1lU3RhbXAiLCJ0aW1lU3RhbXAiLCJnZXRNb2RpZmllcnMiLCJLZXkiLCJtb2RpZmllcnMiLCJtZXRhRml4TWFwIiwiZG93bktleSIsImtleUxvb2t1cCIsIlx0IiwiICIsIlxiIiwifyIsIlNwYWNlYmFyIiwiRGVsIiwiV2luIiwiRXNjIiwiY2hhckxvb2t1cCIsInRhYiIsInNwYWNlIiwiZW50ZXIiLCJrZXlNYXAiLCJjaGFyTWFwIiwiYWx0IiwibWV0YSIsImNhcHNMb2NrIiwib3B0aW9uIiwibWFjIiwiZ2V0S2V5Iiwia2V5SWRlbnRpZmllciIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsImtleUNvZGUiLCJrZXlkb3duIiwiYWx0S2V5IiwibWV0YUtleSIsImN0cmxLZXkiLCJrZXlwcmVzcyIsImNoYXJDb2RlIiwia2V5dXAiLCJpc0Rvd24iLCJUb29sRXZlbnQiLCJfY2hvb3NlUG9pbnQiLCJ0b29sUG9pbnQiLCJnZXRMYXN0UG9pbnQiLCJfbGFzdFBvaW50Iiwic2V0TGFzdFBvaW50IiwiZ2V0RG93blBvaW50IiwiX2Rvd25Qb2ludCIsInNldERvd25Qb2ludCIsImdldE1pZGRsZVBvaW50IiwiX21pZGRsZVBvaW50Iiwic2V0TWlkZGxlUG9pbnQiLCJtaWRkbGVQb2ludCIsImdldERlbHRhIiwiX2RlbHRhIiwic2V0RGVsdGEiLCJnZXRDb3VudCIsInNldENvdW50IiwiVG9vbCIsIl9tb3ZlQ291bnQiLCJfZG93bkNvdW50IiwiZ2V0TWluRGlzdGFuY2UiLCJfbWluRGlzdGFuY2UiLCJzZXRNaW5EaXN0YW5jZSIsIm1pbkRpc3RhbmNlIiwiX21heERpc3RhbmNlIiwiZ2V0TWF4RGlzdGFuY2UiLCJzZXRNYXhEaXN0YW5jZSIsIm1heERpc3RhbmNlIiwiZ2V0Rml4ZWREaXN0YW5jZSIsInNldEZpeGVkRGlzdGFuY2UiLCJkaXN0YW5jZSIsImVhc2luZ3MiLCJsaW5lYXIiLCJlYXNlSW5RdWFkIiwiZWFzZU91dFF1YWQiLCJlYXNlSW5PdXRRdWFkIiwiZWFzZUluQ3ViaWMiLCJlYXNlT3V0Q3ViaWMiLCJlYXNlSW5PdXRDdWJpYyIsImVhc2VJblF1YXJ0IiwiZWFzZU91dFF1YXJ0IiwiZWFzZUluT3V0UXVhcnQiLCJlYXNlSW5RdWludCIsImVhc2VPdXRRdWludCIsImVhc2VJbk91dFF1aW50IiwiaXNGdW5jdGlvbiIsIl90aGVuIiwiX3N0YXJ0VGltZSIsInN0YXRlIiwiX2tleXMiLCJfcGFyc2VkS2V5cyIsIl9wYXJzZUtleXMiLCJfZnJvbSIsIl9nZXRTdGF0ZSIsIl90byIsInRoZW4iLCJwcm9ncmVzcyIsImdldFZhbHVlIiwiX19hZGQiLCJfX3N1YnRyYWN0IiwiX19tdWx0aXBseSIsIl9zZXRQcm9wZXJ0eSIsIm9uVXBkYXRlIiwic3RhcnRUaW1lIiwiX2dldFByb3BlcnR5IiwicmVzb2x2ZWQiLCJfcmVzb2x2ZVZhbHVlIiwiX2NhbGN1bGF0ZSIsInBhcnNlZCIsImNhbGN1bGF0ZUJpbmFyeSIsIkh0dHAiLCJyZXF1ZXN0IiwieGhyIiwiWE1MSHR0cFJlcXVlc3QiLCJvcGVuIiwidXJsIiwiYXN5bmMiLCJtaW1lVHlwZSIsIm92ZXJyaWRlTWltZVR5cGUiLCJvbmxvYWQiLCJzdGF0dXMiLCJyZXNwb25zZVRleHQiLCJvbmVycm9yIiwibWVzc2FnZSIsInNlbmQiLCJjYW52YXNlcyIsInNyIiwic2ciLCJzYiIsInNhIiwiYmciLCJiYiIsImJhIiwiZHIiLCJkZyIsImRiIiwiZ2V0THVtIiwic2V0THVtIiwibW4iLCJsbW4iLCJsbiIsIm14bCIsImdldFNhdCIsInNldFNhdCIsIm1kIiwibW9kZXMiLCJzY3JlZW4iLCJvdmVybGF5Iiwic29mdC1saWdodCIsImhhcmQtbGlnaHQiLCJjb2xvci1kb2RnZSIsImNvbG9yLWJ1cm4iLCJkYXJrZW4iLCJsaWdodGVuIiwiZGlmZmVyZW5jZSIsImV4Y2x1c2lvbiIsImh1ZSIsInNhdHVyYXRpb24iLCJsdW1pbm9zaXR5IiwiYXZlcmFnZSIsIm5lZ2F0aW9uIiwic3JjQ29udGV4dCIsImRzdENvbnRleHQiLCJzcmNDYW52YXMiLCJkc3REYXRhIiwiU3ZnRWxlbWVudCIsInN2ZyIsInhtbG5zIiwieGxpbmsiLCJhdHRyaWJ1dGVOYW1lc3BhY2UiLCJocmVmIiwieG1sbnM6eGxpbmsiLCJhdHRyaWJ1dGVzIiwibmFtZXNwYWNlIiwic2V0QXR0cmlidXRlTlMiLCJ0YWciLCJjcmVhdGVFbGVtZW50TlMiLCJnZXRBdHRyaWJ1dGVOUyIsIlN2Z1N0eWxlcyIsInRydWUiLCJmYWxzZSIsImF0dHJpYnV0ZSIsInRvU1ZHIiwiZnJvbVNWRyIsImV4cG9ydEZpbHRlciIsImdldFRyYW5zZm9ybSIsImNvb3JkaW5hdGVzIiwiYXR0cnMiLCJ0cmFucyIsImV4cG9ydEdyb3VwIiwiY2hpbGROb2RlIiwiZXhwb3J0U1ZHIiwiY2xpcC1wYXRoIiwiZXhwb3J0U2hhcGUiLCJleHBvcnRlcnMiLCJlbWJlZEltYWdlcyIsIm1hdGNoU2hhcGVzIiwiZGVmaW5pdGlvbkl0ZW0iLCJ2aWV3Qm94Iiwib3ZlcmZsb3ciLCJ0ZXh0Q29udGVudCIsImFwcGx5U3R5bGUiLCJncmFkaWVudE5vZGUiLCJnZXRHcmFkaWVudCIsImdldE9yaWdpbiIsImdldERlc3RpbmF0aW9uIiwiZ2V0SGlnaGxpZ2h0IiwiZnkiLCJncmFkaWVudFVuaXRzIiwic3RvcENvbG9yIiwiZXhwb3J0R3JhZGllbnQiLCJ2aXNpYmlsaXR5Iiwic3ZncyIsIl9faWQiLCJ0eXBlSWQiLCJleHBvcnREZWZpbml0aW9ucyIsImRlZnMiLCJpbnNlcnRCZWZvcmUiLCJmaXJzdENoaWxkIiwiWE1MU2VyaWFsaXplciIsInNlcmlhbGl6ZVRvU3RyaW5nIiwiZXhwb3J0ZXIiLCJvbkV4cG9ydCIsInNldE9wdGlvbnMiLCJyb290U2l6ZSIsImFsbG93TnVsbCIsImFsbG93UGVyY2VudCIsImNvbnZlcnRWYWx1ZSIsIm1hcCIsImltcG9ydEdyb3VwIiwibm9kZXMiLCJjaGlsZE5vZGVzIiwiaXNDbGlwIiwiaXNEZWZzIiwiY3VycmVudFN0eWxlIiwiYXBwbHlBdHRyaWJ1dGVzIiwicXVlcnlTZWxlY3RvckFsbCIsImltcG9ydE5vZGUiLCJpbXBvcnRQb2x5IiwiaW1wb3J0R3JhZGllbnQiLCJzY2FsZVRvQm91bmRzIiwiX3NjYWxlVG9Cb3VuZHMiLCJpbXBvcnRlcnMiLCIjZG9jdW1lbnQiLCJjbGlwcGF0aCIsInBvbHlnb24iLCJwb2x5bGluZSIsImxpbmVhcmdyYWRpZW50IiwicmFkaWFsZ3JhZGllbnQiLCJ1c2UiLCJjaXJjbGUiLCJ0ZXh0IiwidHJpbSIsImFwcGx5VHJhbnNmb3JtIiwidHJhbnNmb3JtcyIsImFwcGx5T3BhY2l0eSIsImdyYWRpZW50VHJhbnNmb3JtIiwiZmlsbC1vcGFjaXR5Iiwic3Ryb2tlLW9wYWNpdHkiLCJzZXRWaXNpYmxlIiwiZGlzcGxheSIsInN0b3AtY29sb3IiLCJzdG9wLW9wYWNpdHkiLCJwZXJjZW50Iiwic3R5bGVzIiwiZ3JvdXAiLCJ0YWdOYW1lIiwiaXNFbGVtZW50IiwibmV4dFNpYmxpbmciLCJpbXBvcnRlciIsIm9uSW1wb3J0IiwiZXhwYW5kU2hhcGVzIiwiaW1wb3J0U1ZHIiwiRE9NUGFyc2VyIiwicGFyc2VGcm9tU3RyaW5nIiwiRmlsZSIsInJlYWRlciIsIkZpbGVSZWFkZXIiLCJyZWFkQXNUZXh0IiwibW9kIiwiZ2xvYmFsIiwiYWNvcm4iLCJpbnB1dCIsImlucHV0TGVuIiwic291cmNlRmlsZSIsImlucHQiLCJpbml0VG9rZW5TdGF0ZSIsInByb2dyYW0iLCJsYXN0U3RhcnQiLCJsYXN0RW5kIiwidG9rUG9zIiwibGFzdEVuZExvYyIsImxpbmVfbG9jX3QiLCJpbkZ1bmN0aW9uIiwic3RyaWN0IiwibGFiZWxzIiwicmVhZFRva2VuIiwic3RhcnROb2RlIiwidG9rVHlwZSIsIl9lb2YiLCJzdG10IiwicGFyc2VTdGF0ZW1lbnQiLCJpc1VzZVN0cmljdCIsInNldFN0cmljdCIsImZpbmlzaE5vZGUiLCJwYXJzZVRvcExldmVsIiwiZGVmYXVsdE9wdGlvbnMiLCJlY21hVmVyc2lvbiIsInN0cmljdFNlbWljb2xvbnMiLCJhbGxvd1RyYWlsaW5nQ29tbWFzIiwiZm9yYmlkUmVzZXJ2ZWQiLCJhbGxvd1JldHVybk91dHNpZGVGdW5jdGlvbiIsIm9uQ29tbWVudCIsInJhbmdlcyIsImRpcmVjdFNvdXJjZUZpbGUiLCJvcHQiLCJ0b2tTdGFydCIsInRva0VuZCIsInRva1N0YXJ0TG9jIiwidG9rRW5kTG9jIiwidG9rVmFsIiwidG9rUmVnZXhwQWxsb3dlZCIsInRva0N1ckxpbmUiLCJ0b2tMaW5lU3RhcnQiLCJnZXRMaW5lSW5mbyIsImN1ciIsImxpbmVCcmVhayIsImxhc3RJbmRleCIsImNvbHVtbiIsInJhaXNlIiwiZXJyIiwiU3ludGF4RXJyb3IiLCJyYWlzZWRBdCIsInRva2VuaXplIiwiZ2V0VG9rZW4iLCJmb3JjZVJlZ2V4cCIsInN0YXJ0TG9jIiwiZW5kTG9jIiwianVtcFRvIiwicmVBbGxvd2VkIiwic2tpcFNwYWNlIiwiZW1wdHkiLCJfbnVtIiwiX3JlZ2V4cCIsIl9zdHJpbmciLCJfYnJlYWsiLCJrZXl3b3JkIiwiX2Nhc2UiLCJiZWZvcmVFeHByIiwiX2NhdGNoIiwiX2NvbnRpbnVlIiwiX2RlYnVnZ2VyIiwiX2RvIiwiaXNMb29wIiwiX2Vsc2UiLCJfZmluYWxseSIsIl9mb3IiLCJfZnVuY3Rpb24iLCJfaWYiLCJfcmV0dXJuIiwiX3N3aXRjaCIsIl90aHJvdyIsIl90cnkiLCJfdmFyIiwiX3doaWxlIiwiX3dpdGgiLCJfbmV3IiwiX3RoaXMiLCJfbnVsbCIsImF0b21WYWx1ZSIsIl90cnVlIiwiX2ZhbHNlIiwiYmlub3AiLCJrZXl3b3JkVHlwZXMiLCJicmVhayIsImNhc2UiLCJjYXRjaCIsImNvbnRpbnVlIiwiZGVidWdnZXIiLCJkZWZhdWx0IiwiZG8iLCJlbHNlIiwiZmluYWxseSIsImZvciIsImZ1bmN0aW9uIiwiaWYiLCJyZXR1cm4iLCJzd2l0Y2giLCJ0aHJvdyIsInRyeSIsInZhciIsIndoaWxlIiwid2l0aCIsIm51bGwiLCJuZXciLCJpbiIsImluc3RhbmNlb2YiLCJ0eXBlb2YiLCJ2b2lkIiwiZGVsZXRlIiwiX2JyYWNrZXRMIiwiX2JyYWNrZXRSIiwiX2JyYWNlTCIsIl9icmFjZVIiLCJfcGFyZW5MIiwiX3BhcmVuUiIsIl9jb21tYSIsIl9zZW1pIiwiX2NvbG9uIiwiX2RvdCIsIl9xdWVzdGlvbiIsIl9zbGFzaCIsIl9lcSIsImlzQXNzaWduIiwiX2Fzc2lnbiIsIl9pbmNEZWMiLCJwb3N0Zml4IiwiaXNVcGRhdGUiLCJfcHJlZml4IiwiX2xvZ2ljYWxPUiIsIl9sb2dpY2FsQU5EIiwiX2JpdHdpc2VPUiIsIl9iaXR3aXNlWE9SIiwiX2JpdHdpc2VBTkQiLCJfZXF1YWxpdHkiLCJfcmVsYXRpb25hbCIsIl9iaXRTaGlmdCIsIl9wbHVzTWluIiwiX211bHRpcGx5TW9kdWxvIiwia3ciLCJ0b2tUeXBlcyIsImJyYWNrZXRMIiwiYnJhY2tldFIiLCJicmFjZUwiLCJicmFjZVIiLCJwYXJlbkwiLCJwYXJlblIiLCJjb21tYSIsInNlbWkiLCJjb2xvbiIsInF1ZXN0aW9uIiwic2xhc2giLCJlcSIsImVvZiIsIm51bSIsInJlZ2V4cCIsIm1ha2VQcmVkaWNhdGUiLCJ3b3JkcyIsImNhdHMiLCJjb21wYXJlVG8iLCJhcnIiLCJjYXQiLCJGdW5jdGlvbiIsImNvbnRhaW5zRXNjIiwiaXNSZXNlcnZlZFdvcmQzIiwiaXNSZXNlcnZlZFdvcmQ1IiwiaXNTdHJpY3RSZXNlcnZlZFdvcmQiLCJpc1N0cmljdEJhZElkV29yZCIsImlzS2V5d29yZCIsIm5vbkFTQ0lJd2hpdGVzcGFjZSIsIm5vbkFTQ0lJaWRlbnRpZmllclN0YXJ0Q2hhcnMiLCJub25BU0NJSWlkZW50aWZpZXJTdGFydCIsIlJlZ0V4cCIsIm5vbkFTQ0lJaWRlbnRpZmllciIsIm5ld2xpbmUiLCJpc0lkZW50aWZpZXJTdGFydCIsImlzSWRlbnRpZmllckNoYXIiLCJmaW5pc2hUb2tlbiIsInNraXBCbG9ja0NvbW1lbnQiLCJza2lwTGluZUNvbW1lbnQiLCJjaCIsImNoYXJDb2RlQXQiLCJnZXRUb2tlbkZyb21Db2RlIiwicmVhZE51bWJlciIsInJlYWRUb2tlbl9kb3QiLCJyZWFkSW50IiwicmVhZEhleE51bWJlciIsInF1b3RlIiwib2N0YWwiLCJyZWFkSGV4Q2hhciIsInJlYWRTdHJpbmciLCJyZWFkUmVnZXhwIiwiZmluaXNoT3AiLCJyZWFkVG9rZW5fc2xhc2giLCJyZWFkVG9rZW5fcGlwZV9hbXAiLCJyZWFkVG9rZW5fcGx1c19taW4iLCJyZWFkVG9rZW5fbHRfZ3QiLCJyZWFkVG9rZW5fZXFfZXhjbCIsInJlYWRXb3JkIiwidG9rIiwiZXNjYXBlZCIsImluQ2xhc3MiLCJjaGFyQXQiLCJtb2RzIiwicmVhZFdvcmQxIiwicmFkaXgiLCJzdGFydHNXaXRoRG90IiwiaXNGbG9hdCIsIndvcmQiLCJlc2MiLCJlc2NTdHIiLCJzdHJjdCIsImxhc3RJbmRleE9mIiwibm9kZV90Iiwibm9kZV9sb2NfdCIsInJhbmdlIiwic3RhcnROb2RlRnJvbSIsImV4cHJlc3Npb24iLCJlYXQiLCJjYW5JbnNlcnRTZW1pY29sb24iLCJzZW1pY29sb24iLCJ1bmV4cGVjdGVkIiwiZXhwZWN0IiwiY2hlY2tMVmFsIiwiZXhwciIsImxvb3BMYWJlbCIsImtpbmQiLCJzd2l0Y2hMYWJlbCIsInN0YXJ0dHlwZSIsImlzQnJlYWsiLCJsYWJlbCIsInBhcnNlSWRlbnQiLCJsYWIiLCJwYXJzZVBhcmVuRXhwcmVzc2lvbiIsInBhcnNlRm9yIiwiaW5pdCIsInBhcnNlVmFyIiwiZGVjbGFyYXRpb25zIiwicGFyc2VGb3JJbiIsInBhcnNlRXhwcmVzc2lvbiIsInBhcnNlRnVuY3Rpb24iLCJjb25zZXF1ZW50IiwiYWx0ZXJuYXRlIiwiYXJndW1lbnQiLCJkaXNjcmltaW5hbnQiLCJjYXNlcyIsInNhd0RlZmF1bHQiLCJpc0Nhc2UiLCJibG9jayIsInBhcnNlQmxvY2siLCJjbGF1c2UiLCJndWFyZCIsImd1YXJkZWRIYW5kbGVycyIsImZpbmFsaXplciIsIm1heWJlTmFtZSIsImFsbG93U3RyaWN0Iiwib2xkU3RyaWN0Iiwibm9JbiIsImRlY2wiLCJub0NvbW1hIiwicGFyc2VNYXliZUFzc2lnbiIsImV4cHJlc3Npb25zIiwicGFyc2VFeHByT3AiLCJtaW5QcmVjIiwicHJlYyIsInBhcnNlTWF5YmVVbmFyeSIsImV4cHJOb2RlIiwicGFyc2VFeHByT3BzIiwicGFyc2VNYXliZUNvbmRpdGlvbmFsIiwicGFyc2VTdWJzY3JpcHRzIiwicGFyc2VFeHByQXRvbSIsIm5vQ2FsbHMiLCJjb21wdXRlZCIsImNhbGxlZSIsInBhcnNlRXhwckxpc3QiLCJyYXciLCJ0b2tTdGFydExvYzEiLCJ0b2tTdGFydDEiLCJlbGVtZW50cyIsInNhd0dldFNldCIsInBhcnNlUHJvcGVydHlOYW1lIiwiaXNHZXRTZXQiLCJjb25mbGljdCIsInBhcnNlT2JqIiwicGFyc2VOZXciLCJpc1N0YXRlbWVudCIsInBhcmFtcyIsIm9sZEluRnVuYyIsIm9sZExhYmVscyIsImNsb3NlIiwiYWxsb3dUcmFpbGluZ0NvbW1hIiwiYWxsb3dFbXB0eSIsImVsdHMiLCJsaWJlcmFsIiwiYmluYXJ5T3BlcmF0b3JzIiwiKyIsIi0iLCIqIiwiLyIsIiUiLCI9PSIsIiE9IiwidW5hcnlPcGVyYXRvcnMiLCJfX3NlbGYiLCJfXyRfXyIsIiRfXyIsImNvbXBpbGUiLCJpbnNlcnRpb25zIiwiaW5zZXJ0aW9uIiwiZ2V0Q29kZSIsInJlcGxhY2VDb2RlIiwib2Zmc2V0Q29kZSIsInNvdXJjZU1hcHMiLCJsaW5lQnJlYWtzIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJpbm5lckhUTUwiLCJtYXBwaW5ncyIsImVuY29kZVZMUSIsInNhZmFyaSIsImZpbGUiLCJuYW1lcyIsInNvdXJjZVJvb3QiLCJzb3VyY2VzIiwic291cmNlc0NvbnRlbnQiLCJ3YWxrQVNUIiwiYmV0d2VlbiIsImdldEJldHdlZW4iLCJwYXJlbnRUeXBlIiwiZXhwIiwiZGVjbGFyYXRpb24iLCJzcGVjaWZpZXJzIiwiZGVjIiwic3BlY2lmaWVyIiwicHJlc2VydmVQYXJlbnMiLCJzb3VyY2VUeXBlIiwiYnRvYSIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwidG9vbEhhbmRsZXJzIiwiY29tcGlsZWQiLCJleHBvc2UiLCJzY3JpcHQiLCJoZWFkIiwiY3JlYXRlVGV4dE5vZGUiLCJfX3BhcGVyc2NyaXB0X18iLCJvblJlc2l6ZSIsInNldE9uUmVzaXplIiwic2V0T25GcmFtZSIsImxvYWRTY3JpcHQiLCJjYW52YXNJZCIsImJhc2VVUkkiLCJsb2FkQWxsIiwicmVhZHlTdGF0ZSIsImNhbGN1bGF0ZVVuYXJ5IiwiUGxhY2VkU3ltYm9sIiwiZmFjdG9yeSIsIm5vR2xvYmFsIiwiZ2V0UHJvdG8iLCJnZXRQcm90b3R5cGVPZiIsImNsYXNzMnR5cGUiLCJoYXNPd24iLCJmblRvU3RyaW5nIiwiT2JqZWN0RnVuY3Rpb25TdHJpbmciLCJpc1dpbmRvdyIsInByZXNlcnZlZFNjcmlwdEF0dHJpYnV0ZXMiLCJub01vZHVsZSIsIkRPTUV2YWwiLCJ0b1R5cGUiLCJqUXVlcnkiLCJzZWxlY3RvciIsImZuIiwicnRyaW0iLCJpc0FycmF5TGlrZSIsImpxdWVyeSIsInRvQXJyYXkiLCJwdXNoU3RhY2siLCJlbGVtcyIsInJldCIsInByZXZPYmplY3QiLCJlbGVtIiwiY29weUlzQXJyYXkiLCJleHBhbmRvIiwiaXNSZWFkeSIsIm1zZyIsIm5vb3AiLCJDdG9yIiwiaXNFbXB0eU9iamVjdCIsImdsb2JhbEV2YWwiLCJtYWtlQXJyYXkiLCJpbkFycmF5Iiwic2Vjb25kIiwiZ3JlcCIsImNhbGxiYWNrRXhwZWN0IiwiZ3VpZCIsIml0ZXJhdG9yIiwiU2l6emxlIiwiRXhwciIsImdldFRleHQiLCJpc1hNTCIsInNlbGVjdCIsIm91dGVybW9zdENvbnRleHQiLCJzb3J0SW5wdXQiLCJoYXNEdXBsaWNhdGUiLCJzZXREb2N1bWVudCIsImRvY0VsZW0iLCJkb2N1bWVudElzSFRNTCIsInJidWdneVFTQSIsInJidWdneU1hdGNoZXMiLCJwcmVmZXJyZWREb2MiLCJkaXJydW5zIiwiZG9uZSIsImNsYXNzQ2FjaGUiLCJjcmVhdGVDYWNoZSIsInRva2VuQ2FjaGUiLCJjb21waWxlckNhY2hlIiwic29ydE9yZGVyIiwicHVzaF9uYXRpdmUiLCJib29sZWFucyIsIndoaXRlc3BhY2UiLCJpZGVudGlmaWVyIiwicHNldWRvcyIsInJ3aGl0ZXNwYWNlIiwicmNvbW1hIiwicmNvbWJpbmF0b3JzIiwicmF0dHJpYnV0ZVF1b3RlcyIsInJwc2V1ZG8iLCJyaWRlbnRpZmllciIsIm1hdGNoRXhwciIsIklEIiwiQ0xBU1MiLCJUQUciLCJBVFRSIiwiUFNFVURPIiwiQ0hJTEQiLCJib29sIiwibmVlZHNDb250ZXh0IiwicmlucHV0cyIsInJoZWFkZXIiLCJybmF0aXZlIiwicnF1aWNrRXhwciIsInJzaWJsaW5nIiwicnVuZXNjYXBlIiwiZnVuZXNjYXBlIiwiXyIsImVzY2FwZWRXaGl0ZXNwYWNlIiwiaGlnaCIsInJjc3Nlc2NhcGUiLCJmY3NzZXNjYXBlIiwiYXNDb2RlUG9pbnQiLCJ1bmxvYWRIYW5kbGVyIiwiZGlzYWJsZWRBbmNlc3RvciIsImFkZENvbWJpbmF0b3IiLCJkaXNhYmxlZCIsImVscyIsInNlZWQiLCJuaWQiLCJncm91cHMiLCJuZXdTZWxlY3RvciIsIm5ld0NvbnRleHQiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwicXNhIiwidG9TZWxlY3RvciIsInRlc3RDb250ZXh0IiwicXNhRXJyb3IiLCJyZW1vdmVBdHRyaWJ1dGUiLCJjYWNoZUxlbmd0aCIsIm1hcmtGdW5jdGlvbiIsImFzc2VydCIsImFkZEhhbmRsZSIsImF0dHJIYW5kbGUiLCJzaWJsaW5nQ2hlY2siLCJzb3VyY2VJbmRleCIsImNyZWF0ZUlucHV0UHNldWRvIiwiY3JlYXRlQnV0dG9uUHNldWRvIiwiY3JlYXRlRGlzYWJsZWRQc2V1ZG8iLCJpc0Rpc2FibGVkIiwiY3JlYXRlUG9zaXRpb25hbFBzZXVkbyIsIm1hdGNoSW5kZXhlcyIsImhhc0NvbXBhcmUiLCJzdWJXaW5kb3ciLCJhdHRhY2hFdmVudCIsImNsYXNzTmFtZSIsImNyZWF0ZUNvbW1lbnQiLCJnZXRCeUlkIiwiZ2V0RWxlbWVudHNCeU5hbWUiLCJhdHRySWQiLCJmaW5kIiwiZ2V0QXR0cmlidXRlTm9kZSIsIm1hdGNoZXNTZWxlY3RvciIsIndlYmtpdE1hdGNoZXNTZWxlY3RvciIsIm1vek1hdGNoZXNTZWxlY3RvciIsIm9NYXRjaGVzU2VsZWN0b3IiLCJtc01hdGNoZXNTZWxlY3RvciIsImRpc2Nvbm5lY3RlZE1hdGNoIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJhZG93biIsImJ1cCIsInNvcnREZXRhY2hlZCIsImF1cCIsImFwIiwiYnAiLCJzcGVjaWZpZWQiLCJlc2NhcGUiLCJzZWwiLCJ1bmlxdWVTb3J0IiwiZHVwbGljYXRlcyIsImRldGVjdER1cGxpY2F0ZXMiLCJzb3J0U3RhYmxlIiwibm9kZVZhbHVlIiwic2VsZWN0b3JzIiwiY3JlYXRlUHNldWRvIiwiPiIsIn4iLCJwcmVGaWx0ZXIiLCJleGNlc3MiLCJ1bnF1b3RlZCIsIm5vZGVOYW1lU2VsZWN0b3IiLCJwYXR0ZXJuIiwid2hhdCIsInNpbXBsZSIsIm9mVHlwZSIsInhtbCIsInVuaXF1ZUNhY2hlIiwib3V0ZXJDYWNoZSIsIm5vZGVJbmRleCIsInVzZUNhY2hlIiwibGFzdENoaWxkIiwidW5pcXVlSUQiLCJwc2V1ZG8iLCJzZXRGaWx0ZXJzIiwiaWR4Iiwibm90IiwibWF0Y2hlciIsInVubWF0Y2hlZCIsImhhcyIsImlubmVyVGV4dCIsImxhbmciLCJlbGVtTGFuZyIsInJvb3QiLCJmb2N1cyIsImFjdGl2ZUVsZW1lbnQiLCJoYXNGb2N1cyIsInRhYkluZGV4IiwiZW5hYmxlZCIsImNoZWNrZWQiLCJzZWxlY3RlZEluZGV4IiwiaGVhZGVyIiwiYnV0dG9uIiwiZXZlbiIsIm9kZCIsImx0IiwiZ3QiLCJyYWRpbyIsImNoZWNrYm94IiwicGFzc3dvcmQiLCJzdWJtaXQiLCJ0b2tlbnMiLCJjb21iaW5hdG9yIiwic2tpcCIsImNoZWNrTm9uRWxlbWVudHMiLCJkb25lTmFtZSIsIm9sZENhY2hlIiwibmV3Q2FjaGUiLCJlbGVtZW50TWF0Y2hlciIsIm1hdGNoZXJzIiwiY29uZGVuc2UiLCJuZXdVbm1hdGNoZWQiLCJtYXBwZWQiLCJzZXRNYXRjaGVyIiwicG9zdEZpbHRlciIsInBvc3RGaW5kZXIiLCJwb3N0U2VsZWN0b3IiLCJwcmVNYXAiLCJwb3N0TWFwIiwicHJlZXhpc3RpbmciLCJjb250ZXh0cyIsIm11bHRpcGxlQ29udGV4dHMiLCJtYXRjaGVySW4iLCJtYXRjaGVyT3V0IiwibWF0Y2hlckZyb21Ub2tlbnMiLCJjaGVja0NvbnRleHQiLCJsZWFkaW5nUmVsYXRpdmUiLCJpbXBsaWNpdFJlbGF0aXZlIiwibWF0Y2hDb250ZXh0IiwibWF0Y2hBbnlDb250ZXh0IiwiZmlsdGVycyIsInBhcnNlT25seSIsInNvRmFyIiwicHJlRmlsdGVycyIsInNldE1hdGNoZXJzIiwiZWxlbWVudE1hdGNoZXJzIiwiYnlTZXQiLCJieUVsZW1lbnQiLCJzdXBlck1hdGNoZXIiLCJvdXRlcm1vc3QiLCJtYXRjaGVkQ291bnQiLCJzZXRNYXRjaGVkIiwiY29udGV4dEJhY2t1cCIsImRpcnJ1bnNVbmlxdWUiLCJtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMiLCJ0b2tlbiIsImRlZmF1bHRWYWx1ZSIsInVuaXF1ZSIsImlzWE1MRG9jIiwiZXNjYXBlU2VsZWN0b3IiLCJ1bnRpbCIsInRydW5jYXRlIiwiaXMiLCJzaWJsaW5ncyIsInJuZWVkc0NvbnRleHQiLCJyc2luZ2xlVGFnIiwid2lubm93IiwicXVhbGlmaWVyIiwicm9vdGpRdWVyeSIsInBhcnNlSFRNTCIsInJlYWR5IiwicnBhcmVudHNwcmV2IiwiZ3VhcmFudGVlZFVuaXF1ZSIsImNvbnRlbnRzIiwic2libGluZyIsInRhcmdldHMiLCJjbG9zZXN0IiwicHJldkFsbCIsImFkZEJhY2siLCJwYXJlbnRzVW50aWwiLCJuZXh0QWxsIiwibmV4dFVudGlsIiwicHJldlVudGlsIiwiY29udGVudERvY3VtZW50Iiwicm5vdGh0bWx3aGl0ZSIsIklkZW50aXR5IiwiVGhyb3dlciIsImV4IiwiYWRvcHRWYWx1ZSIsInJlamVjdCIsIm5vVmFsdWUiLCJwcm9taXNlIiwiZmFpbCIsIkNhbGxiYWNrcyIsImNyZWF0ZU9wdGlvbnMiLCJmaXJpbmciLCJtZW1vcnkiLCJmaXJlZCIsInF1ZXVlIiwiZmlyaW5nSW5kZXgiLCJzdG9wT25GYWxzZSIsImRpc2FibGUiLCJsb2NrIiwiZmlyZVdpdGgiLCJEZWZlcnJlZCIsInR1cGxlcyIsImFsd2F5cyIsImRlZmVycmVkIiwicGlwZSIsImZucyIsIm5ld0RlZmVyIiwidHVwbGUiLCJyZXR1cm5lZCIsIm5vdGlmeSIsIm9uRnVsZmlsbGVkIiwib25SZWplY3RlZCIsIm9uUHJvZ3Jlc3MiLCJtYXhEZXB0aCIsImRlcHRoIiwic3BlY2lhbCIsIm1pZ2h0VGhyb3ciLCJUeXBlRXJyb3IiLCJub3RpZnlXaXRoIiwicmVzb2x2ZVdpdGgiLCJleGNlcHRpb25Ib29rIiwic3RhY2tUcmFjZSIsInJlamVjdFdpdGgiLCJnZXRTdGFja0hvb2siLCJzdGF0ZVN0cmluZyIsIndoZW4iLCJzaW5nbGVWYWx1ZSIsInJlbWFpbmluZyIsInJlc29sdmVDb250ZXh0cyIsInJlc29sdmVWYWx1ZXMiLCJtYXN0ZXIiLCJ1cGRhdGVGdW5jIiwicmVycm9yTmFtZXMiLCJzdGFjayIsImNvbnNvbGUiLCJ3YXJuIiwicmVhZHlFeGNlcHRpb24iLCJyZWFkeUxpc3QiLCJjb21wbGV0ZWQiLCJyZWFkeVdhaXQiLCJ3YWl0IiwiZG9TY3JvbGwiLCJhY2Nlc3MiLCJjaGFpbmFibGUiLCJlbXB0eUdldCIsImJ1bGsiLCJybXNQcmVmaXgiLCJyZGFzaEFscGhhIiwiZmNhbWVsQ2FzZSIsImxldHRlciIsImNhbWVsQ2FzZSIsImFjY2VwdERhdGEiLCJEYXRhIiwidWlkIiwiaGFzRGF0YSIsImRhdGFQcml2IiwiZGF0YVVzZXIiLCJyYnJhY2UiLCJybXVsdGlEYXNoIiwiZGF0YUF0dHIiLCJyZW1vdmVEYXRhIiwiX3JlbW92ZURhdGEiLCJkZXF1ZXVlIiwiaG9va3MiLCJfcXVldWVIb29rcyIsImNsZWFyUXVldWUiLCJkZWZlciIsInBudW0iLCJyY3NzTnVtIiwiY3NzRXhwYW5kIiwiaXNIaWRkZW5XaXRoaW5UcmVlIiwiY3NzIiwic3dhcCIsImFkanVzdENTUyIsInZhbHVlUGFydHMiLCJhZGp1c3RlZCIsIm1heEl0ZXJhdGlvbnMiLCJjdXJyZW50VmFsdWUiLCJpbml0aWFsIiwiY3NzTnVtYmVyIiwiaW5pdGlhbEluVW5pdCIsImRlZmF1bHREaXNwbGF5TWFwIiwiZ2V0RGVmYXVsdERpc3BsYXkiLCJzaG93SGlkZSIsInNob3ciLCJoaWRlIiwidG9nZ2xlIiwicmNoZWNrYWJsZVR5cGUiLCJydGFnTmFtZSIsInJzY3JpcHRUeXBlIiwid3JhcE1hcCIsInRoZWFkIiwiZ2V0QWxsIiwic2V0R2xvYmFsRXZhbCIsInJlZkVsZW1lbnRzIiwib3B0Z3JvdXAiLCJ0Ym9keSIsInRmb290IiwiY29sZ3JvdXAiLCJjYXB0aW9uIiwidGgiLCJyaHRtbCIsImJ1aWxkRnJhZ21lbnQiLCJzY3JpcHRzIiwiaWdub3JlZCIsIndyYXAiLCJmcmFnbWVudCIsImNyZWF0ZURvY3VtZW50RnJhZ21lbnQiLCJodG1sUHJlZmlsdGVyIiwiY2hlY2tDbG9uZSIsImNsb25lTm9kZSIsIm5vQ2xvbmVDaGVja2VkIiwicmtleUV2ZW50Iiwicm1vdXNlRXZlbnQiLCJydHlwZW5hbWVzcGFjZSIsInJldHVyblRydWUiLCJyZXR1cm5GYWxzZSIsInNhZmVBY3RpdmVFbGVtZW50Iiwib25lIiwib3JpZ0ZuIiwiaGFuZGxlT2JqSW4iLCJldmVudEhhbmRsZSIsImhhbmRsZU9iaiIsIm5hbWVzcGFjZXMiLCJvcmlnVHlwZSIsImVsZW1EYXRhIiwidHJpZ2dlcmVkIiwiZGlzcGF0Y2giLCJkZWxlZ2F0ZVR5cGUiLCJiaW5kVHlwZSIsImRlbGVnYXRlQ291bnQiLCJtYXBwZWRUeXBlcyIsIm9yaWdDb3VudCIsInRlYXJkb3duIiwicmVtb3ZlRXZlbnQiLCJuYXRpdmVFdmVudCIsImhhbmRsZXJRdWV1ZSIsImZpeCIsImRlbGVnYXRlVGFyZ2V0IiwicHJlRGlzcGF0Y2giLCJpc1Byb3BhZ2F0aW9uU3RvcHBlZCIsImlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkIiwicm5hbWVzcGFjZSIsInBvc3REaXNwYXRjaCIsIm1hdGNoZWRIYW5kbGVycyIsIm1hdGNoZWRTZWxlY3RvcnMiLCJhZGRQcm9wIiwiaG9vayIsIm9yaWdpbmFsRXZlbnQiLCJub0J1YmJsZSIsInRyaWdnZXIiLCJiZWZvcmV1bmxvYWQiLCJyZXR1cm5WYWx1ZSIsImlzRGVmYXVsdFByZXZlbnRlZCIsImRlZmF1bHRQcmV2ZW50ZWQiLCJpc1NpbXVsYXRlZCIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsImJ1YmJsZXMiLCJkZXRhaWwiLCJldmVudFBoYXNlIiwic2hpZnRLZXkiLCJjaGFyIiwiYnV0dG9ucyIsIm9mZnNldFgiLCJvZmZzZXRZIiwicG9pbnRlcklkIiwicG9pbnRlclR5cGUiLCJzY3JlZW5YIiwic2NyZWVuWSIsInRvdWNoZXMiLCJ3aGljaCIsInBvaW50ZXJlbnRlciIsInBvaW50ZXJsZWF2ZSIsInJlbGF0ZWQiLCJyeGh0bWxUYWciLCJybm9Jbm5lcmh0bWwiLCJyY2hlY2tlZCIsInJjbGVhblNjcmlwdCIsIm1hbmlwdWxhdGlvblRhcmdldCIsImRpc2FibGVTY3JpcHQiLCJyZXN0b3JlU2NyaXB0IiwiY2xvbmVDb3B5RXZlbnQiLCJwZGF0YU9sZCIsInBkYXRhQ3VyIiwidWRhdGFPbGQiLCJ1ZGF0YUN1ciIsImRvbU1hbmlwIiwiY29sbGVjdGlvbiIsImhhc1NjcmlwdHMiLCJpTm9DbG9uZSIsInZhbHVlSXNGdW5jdGlvbiIsIl9ldmFsVXJsIiwia2VlcERhdGEiLCJjbGVhbkRhdGEiLCJkYXRhQW5kRXZlbnRzIiwiZGVlcERhdGFBbmRFdmVudHMiLCJzcmNFbGVtZW50cyIsImRlc3RFbGVtZW50cyIsImluUGFnZSIsImFmdGVyIiwicmVwbGFjZUNoaWxkIiwiYXBwZW5kVG8iLCJwcmVwZW5kVG8iLCJpbnNlcnRBZnRlciIsInJlcGxhY2VBbGwiLCJvcmlnaW5hbCIsInJudW1ub25weCIsIm9wZW5lciIsInJib3hTdHlsZSIsImN1ckNTUyIsIm1pbldpZHRoIiwibWF4V2lkdGgiLCJnZXRQcm9wZXJ0eVZhbHVlIiwicGl4ZWxCb3hTdHlsZXMiLCJhZGRHZXRIb29rSWYiLCJjb25kaXRpb25GbiIsImhvb2tGbiIsImNvbXB1dGVTdHlsZVRlc3RzIiwiY3NzVGV4dCIsImRpdlN0eWxlIiwicGl4ZWxQb3NpdGlvblZhbCIsInJlbGlhYmxlTWFyZ2luTGVmdFZhbCIsInJvdW5kUGl4ZWxNZWFzdXJlcyIsIm1hcmdpbkxlZnQiLCJwaXhlbEJveFN0eWxlc1ZhbCIsImJveFNpemluZ1JlbGlhYmxlVmFsIiwic2Nyb2xsYm94U2l6ZVZhbCIsIm9mZnNldFdpZHRoIiwibWVhc3VyZSIsImJhY2tncm91bmRDbGlwIiwiY2xlYXJDbG9uZVN0eWxlIiwiYm94U2l6aW5nUmVsaWFibGUiLCJwaXhlbFBvc2l0aW9uIiwicmVsaWFibGVNYXJnaW5MZWZ0Iiwic2Nyb2xsYm94U2l6ZSIsInJkaXNwbGF5c3dhcCIsInJjdXN0b21Qcm9wIiwiY3NzU2hvdyIsImNzc05vcm1hbFRyYW5zZm9ybSIsImxldHRlclNwYWNpbmciLCJjc3NQcmVmaXhlcyIsImVtcHR5U3R5bGUiLCJmaW5hbFByb3BOYW1lIiwiY3NzUHJvcHMiLCJjYXBOYW1lIiwidmVuZG9yUHJvcE5hbWUiLCJzZXRQb3NpdGl2ZU51bWJlciIsImJveE1vZGVsQWRqdXN0bWVudCIsImRpbWVuc2lvbiIsImJveCIsImlzQm9yZGVyQm94IiwiY29tcHV0ZWRWYWwiLCJleHRyYSIsImdldFdpZHRoT3JIZWlnaHQiLCJ2YWx1ZUlzQm9yZGVyQm94IiwiY3NzSG9va3MiLCJhbmltYXRpb25JdGVyYXRpb25Db3VudCIsImNvbHVtbkNvdW50IiwiZmlsbE9wYWNpdHkiLCJmbGV4R3JvdyIsImZsZXhTaHJpbmsiLCJsaW5lSGVpZ2h0Iiwib3JkZXIiLCJvcnBoYW5zIiwid2lkb3dzIiwiekluZGV4Iiwib3JpZ05hbWUiLCJpc0N1c3RvbVByb3AiLCJzZXRQcm9wZXJ0eSIsImdldENsaWVudFJlY3RzIiwibWFyZ2luIiwiYm9yZGVyIiwicHJvcEhvb2tzIiwicnVuIiwiZWFzZWQiLCJzd2luZyIsImZ4Tm93IiwiaW5Qcm9ncmVzcyIsInJmeHR5cGVzIiwicnJ1biIsInNjaGVkdWxlIiwiaW50ZXJ2YWwiLCJ0aWNrIiwiY3JlYXRlRnhOb3ciLCJnZW5GeCIsImluY2x1ZGVXaWR0aCIsImNyZWF0ZVR3ZWVuIiwiYW5pbWF0aW9uIiwiQW5pbWF0aW9uIiwidHdlZW5lcnMiLCJwcmVmaWx0ZXJzIiwiY3VycmVudFRpbWUiLCJ0d2VlbnMiLCJzcGVjaWFsRWFzaW5nIiwib3JpZ2luYWxQcm9wZXJ0aWVzIiwib3JpZ2luYWxPcHRpb25zIiwiZ290b0VuZCIsInByb3BGaWx0ZXIiLCJhbmltIiwidHdlZW5lciIsIm9sZGZpcmUiLCJwcm9wVHdlZW4iLCJyZXN0b3JlRGlzcGxheSIsImlzQm94IiwiZGF0YVNob3ciLCJ1bnF1ZXVlZCIsIm92ZXJmbG93WCIsIm92ZXJmbG93WSIsInByZWZpbHRlciIsInNwZWVkIiwic3BlZWRzIiwiZmFkZVRvIiwib3B0YWxsIiwiZG9BbmltYXRpb24iLCJmaW5pc2giLCJzdG9wUXVldWUiLCJ0aW1lcnMiLCJjc3NGbiIsInNsaWRlRG93biIsInNsaWRlVXAiLCJzbGlkZVRvZ2dsZSIsImZhZGVJbiIsImZhZGVPdXQiLCJmYWRlVG9nZ2xlIiwic2xvdyIsImZhc3QiLCJkZWxheSIsInRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJjaGVja09uIiwib3B0U2VsZWN0ZWQiLCJyYWRpb1ZhbHVlIiwiYm9vbEhvb2siLCJyZW1vdmVBdHRyIiwiblR5cGUiLCJhdHRySG9va3MiLCJhdHRyTmFtZXMiLCJsb3dlcmNhc2VOYW1lIiwicmZvY3VzYWJsZSIsInJjbGlja2FibGUiLCJzdHJpcEFuZENvbGxhcHNlIiwiZ2V0Q2xhc3MiLCJjbGFzc2VzVG9BcnJheSIsInJlbW92ZVByb3AiLCJwcm9wRml4IiwidGFiaW5kZXgiLCJhZGRDbGFzcyIsImNsYXNzZXMiLCJjdXJWYWx1ZSIsImNsYXp6IiwiZmluYWxWYWx1ZSIsInJlbW92ZUNsYXNzIiwidG9nZ2xlQ2xhc3MiLCJzdGF0ZVZhbCIsImlzVmFsaWRWYWx1ZSIsImNsYXNzTmFtZXMiLCJoYXNDbGFzcyIsInJyZXR1cm4iLCJ2YWxIb29rcyIsIm9wdGlvblNldCIsImZvY3VzaW4iLCJyZm9jdXNNb3JwaCIsInN0b3BQcm9wYWdhdGlvbkNhbGxiYWNrIiwib25seUhhbmRsZXJzIiwiYnViYmxlVHlwZSIsIm9udHlwZSIsImxhc3RFbGVtZW50IiwiZXZlbnRQYXRoIiwiaXNUcmlnZ2VyIiwicGFyZW50V2luZG93Iiwic2ltdWxhdGUiLCJ0cmlnZ2VySGFuZGxlciIsImF0dGFjaGVzIiwibm9uY2UiLCJycXVlcnkiLCJwYXJzZVhNTCIsInJicmFja2V0IiwickNSTEYiLCJyc3VibWl0dGVyVHlwZXMiLCJyc3VibWl0dGFibGUiLCJidWlsZFBhcmFtcyIsInRyYWRpdGlvbmFsIiwidmFsdWVPckZ1bmN0aW9uIiwic2VyaWFsaXplQXJyYXkiLCJyMjAiLCJyaGFzaCIsInJhbnRpQ2FjaGUiLCJyaGVhZGVycyIsInJub0NvbnRlbnQiLCJycHJvdG9jb2wiLCJ0cmFuc3BvcnRzIiwiYWxsVHlwZXMiLCJvcmlnaW5BbmNob3IiLCJhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMiLCJzdHJ1Y3R1cmUiLCJkYXRhVHlwZUV4cHJlc3Npb24iLCJkYXRhVHlwZSIsImRhdGFUeXBlcyIsImluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzIiwianFYSFIiLCJpbnNwZWN0ZWQiLCJzZWVraW5nVHJhbnNwb3J0IiwiaW5zcGVjdCIsInByZWZpbHRlck9yRmFjdG9yeSIsImRhdGFUeXBlT3JUcmFuc3BvcnQiLCJhamF4RXh0ZW5kIiwiZmxhdE9wdGlvbnMiLCJhamF4U2V0dGluZ3MiLCJhY3RpdmUiLCJsYXN0TW9kaWZpZWQiLCJldGFnIiwiaXNMb2NhbCIsInByb3RvY29sIiwicHJvY2Vzc0RhdGEiLCJjb250ZW50VHlwZSIsImFjY2VwdHMiLCJyZXNwb25zZUZpZWxkcyIsIiogdGV4dCIsInRleHQgaHRtbCIsInRleHQganNvbiIsInRleHQgeG1sIiwiYWpheFNldHVwIiwiYWpheFByZWZpbHRlciIsImFqYXhUcmFuc3BvcnQiLCJhamF4IiwidHJhbnNwb3J0IiwiY2FjaGVVUkwiLCJyZXNwb25zZUhlYWRlcnNTdHJpbmciLCJyZXNwb25zZUhlYWRlcnMiLCJ0aW1lb3V0VGltZXIiLCJ1cmxBbmNob3IiLCJmaXJlR2xvYmFscyIsInVuY2FjaGVkIiwiY2FsbGJhY2tDb250ZXh0IiwiZ2xvYmFsRXZlbnRDb250ZXh0IiwiY29tcGxldGVEZWZlcnJlZCIsInN0YXR1c0NvZGUiLCJyZXF1ZXN0SGVhZGVycyIsInJlcXVlc3RIZWFkZXJzTmFtZXMiLCJzdHJBYm9ydCIsImdldFJlc3BvbnNlSGVhZGVyIiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwic2V0UmVxdWVzdEhlYWRlciIsImFib3J0Iiwic3RhdHVzVGV4dCIsImZpbmFsVGV4dCIsImNyb3NzRG9tYWluIiwiaG9zdCIsImhhc0NvbnRlbnQiLCJpZk1vZGlmaWVkIiwiaGVhZGVycyIsImJlZm9yZVNlbmQiLCJzdWNjZXNzIiwibmF0aXZlU3RhdHVzVGV4dCIsInJlc3BvbnNlcyIsImlzU3VjY2VzcyIsInJlc3BvbnNlIiwibW9kaWZpZWQiLCJjdCIsImZpbmFsRGF0YVR5cGUiLCJmaXJzdERhdGFUeXBlIiwiYWpheEhhbmRsZVJlc3BvbnNlcyIsImNvbnYyIiwiY29udiIsImRhdGFGaWx0ZXIiLCJ0aHJvd3MiLCJhamF4Q29udmVydCIsImdldEpTT04iLCJnZXRTY3JpcHQiLCJ3cmFwQWxsIiwiZmlyc3RFbGVtZW50Q2hpbGQiLCJ3cmFwSW5uZXIiLCJodG1sSXNGdW5jdGlvbiIsInVud3JhcCIsIm9mZnNldEhlaWdodCIsInhoclN1Y2Nlc3NTdGF0dXMiLCIwIiwiMTIyMyIsInhoclN1cHBvcnRlZCIsImNvcnMiLCJlcnJvckNhbGxiYWNrIiwidXNlcm5hbWUiLCJ4aHJGaWVsZHMiLCJvbmFib3J0Iiwib250aW1lb3V0Iiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVzcG9uc2VUeXBlIiwiYmluYXJ5IiwidGV4dCBzY3JpcHQiLCJjaGFyc2V0Iiwic2NyaXB0Q2hhcnNldCIsImV2dCIsIm9sZENhbGxiYWNrcyIsInJqc29ucCIsImpzb25wIiwianNvbnBDYWxsYmFjayIsIm9yaWdpbmFsU2V0dGluZ3MiLCJjYWxsYmFja05hbWUiLCJvdmVyd3JpdHRlbiIsInJlc3BvbnNlQ29udGFpbmVyIiwianNvblByb3AiLCJjcmVhdGVIVE1MRG9jdW1lbnQiLCJpbXBsZW1lbnRhdGlvbiIsImtlZXBTY3JpcHRzIiwiYW5pbWF0ZWQiLCJjdXJQb3NpdGlvbiIsImN1ckxlZnQiLCJjdXJDU1NUb3AiLCJjdXJUb3AiLCJjdXJPZmZzZXQiLCJjdXJDU1NMZWZ0IiwiY3VyRWxlbSIsInVzaW5nIiwid2luIiwib2Zmc2V0UGFyZW50IiwicGFyZW50T2Zmc2V0Iiwic2Nyb2xsVG8iLCJIZWlnaHQiLCJXaWR0aCIsIiIsImRlZmF1bHRFeHRyYSIsImZ1bmNOYW1lIiwiaG92ZXIiLCJmbk92ZXIiLCJmbk91dCIsInVuYmluZCIsImRlbGVnYXRlIiwidW5kZWxlZ2F0ZSIsInByb3h5IiwiaG9sZFJlYWR5IiwiaG9sZCIsInBhcnNlSlNPTiIsImlzTnVtZXJpYyIsIl9qUXVlcnkiLCJfJCIsIiQiLCJub0NvbmZsaWN0IiwiX193ZWJwYWNrX2V4cG9ydHNfXyIsInBhcnNlRXhwcmVzc2lvbkF0IiwidG9rZW5pemVyIiwiUGFyc2VyIiwiUG9zaXRpb24iLCJTb3VyY2VMb2NhdGlvbiIsIk5vZGUiLCJUb2tlblR5cGUiLCJrZXl3b3JkcyQxIiwiVG9rQ29udGV4dCIsInR5cGVzJDEiLCJUb2tlbiIsImlzTmV3TGluZSIsImxpbmVCcmVha0ciLCJyZXNlcnZlZFdvcmRzIiwiMyIsIjUiLCI2Iiwic3RyaWN0QmluZCIsImVjbWE1QW5kTGVzc0tleXdvcmRzIiwia2V5d29yZHMiLCJrZXl3b3JkUmVsYXRpb25hbE9wZXJhdG9yIiwibm9uQVNDSUlpZGVudGlmaWVyQ2hhcnMiLCJhc3RyYWxJZGVudGlmaWVyU3RhcnRDb2RlcyIsImFzdHJhbElkZW50aWZpZXJDb2RlcyIsImlzSW5Bc3RyYWxTZXQiLCJhc3RyYWwiLCJjb25mIiwic3RhcnRzRXhwciIsInVwZGF0ZUNvbnRleHQiLCJhcnJvdyIsInRlbXBsYXRlIiwiaW52YWxpZFRlbXBsYXRlIiwiZWxsaXBzaXMiLCJiYWNrUXVvdGUiLCJkb2xsYXJCcmFjZUwiLCJpbmNEZWMiLCJsb2dpY2FsT1IiLCJsb2dpY2FsQU5EIiwiYml0d2lzZU9SIiwiYml0d2lzZVhPUiIsImJpdHdpc2VBTkQiLCJlcXVhbGl0eSIsInJlbGF0aW9uYWwiLCJiaXRTaGlmdCIsInBsdXNNaW4iLCJzdGFyIiwic3RhcnN0YXIiLCJfY29uc3QiLCJfc3VwZXIiLCJfZXh0ZW5kcyIsIl9leHBvcnQiLCJfaW1wb3J0IiwiX2luc3RhbmNlb2YiLCJfdHlwZW9mIiwiX3ZvaWQiLCJfZGVsZXRlIiwiZWNtYTIwMTlTdHJpbmciLCJza2lwV2hpdGVTcGFjZSIsInByb3BOYW1lIiwid29yZHNSZWdleHAiLCJvbkluc2VydGVkU2VtaWNvbG9uIiwib25UcmFpbGluZ0NvbW1hIiwiYWxsb3dSZXNlcnZlZCIsImFsbG93SW1wb3J0RXhwb3J0RXZlcnl3aGVyZSIsImFsbG93QXdhaXRPdXRzaWRlRnVuY3Rpb24iLCJhbGxvd0hhc2hCYW5nIiwib25Ub2tlbiIsImNvbW1lbnQiLCJwdXNoQ29tbWVudCIsIlNDT1BFX0ZVTkNUSU9OIiwiU0NPUEVfVkFSIiwiU0NPUEVfQVNZTkMiLCJTQ09QRV9HRU5FUkFUT1IiLCJmdW5jdGlvbkZsYWdzIiwiZ2VuZXJhdG9yIiwic3RhcnRQb3MiLCJyZXNlcnZlZCIsInJlc2VydmVkU3RyaWN0IiwicmVzZXJ2ZWRXb3Jkc1N0cmljdCIsInJlc2VydmVkV29yZHNTdHJpY3RCaW5kIiwibGluZVN0YXJ0IiwiY3VyTGluZSIsImxhc3RUb2tFbmRMb2MiLCJsYXN0VG9rU3RhcnRMb2MiLCJsYXN0VG9rU3RhcnQiLCJsYXN0VG9rRW5kIiwiaW5pdGlhbENvbnRleHQiLCJleHByQWxsb3dlZCIsImluTW9kdWxlIiwic3RyaWN0RGlyZWN0aXZlIiwicG90ZW50aWFsQXJyb3dBdCIsInlpZWxkUG9zIiwiYXdhaXRQb3MiLCJhd2FpdElkZW50UG9zIiwidW5kZWZpbmVkRXhwb3J0cyIsInNjb3BlU3RhY2siLCJlbnRlclNjb3BlIiwicmVnZXhwU3RhdGUiLCJwcm90b3R5cGVBY2Nlc3NvcnMiLCJpbkdlbmVyYXRvciIsImluQXN5bmMiLCJhbGxvd1N1cGVyIiwiYWxsb3dEaXJlY3RTdXBlciIsInRyZWF0RnVuY3Rpb25zQXNWYXIiLCJuZXh0VG9rZW4iLCJjdXJyZW50VmFyU2NvcGUiLCJjdXJyZW50VGhpc1Njb3BlIiwidHJlYXRGdW5jdGlvbnNBc1ZhckluU2NvcGUiLCJjdXJyZW50U2NvcGUiLCJpbk5vbkFycm93RnVuY3Rpb24iLCJwbHVnaW5zIiwiY2xzIiwiZGVmaW5lUHJvcGVydGllcyIsInBwIiwibGl0ZXJhbCIsIkRlc3RydWN0dXJpbmdFcnJvcnMiLCJzaG9ydGhhbmRBc3NpZ24iLCJ0cmFpbGluZ0NvbW1hIiwicGFyZW50aGVzaXplZEFzc2lnbiIsInBhcmVudGhlc2l6ZWRCaW5kIiwiZG91YmxlUHJvdG8iLCJpc0NvbnRleHR1YWwiLCJlYXRDb250ZXh0dWFsIiwiZXhwZWN0Q29udGV4dHVhbCIsImluc2VydFNlbWljb2xvbiIsImFmdGVyVHJhaWxpbmdDb21tYSIsIm5vdE5leHQiLCJjaGVja1BhdHRlcm5FcnJvcnMiLCJyZWZEZXN0cnVjdHVyaW5nRXJyb3JzIiwicmFpc2VSZWNvdmVyYWJsZSIsInBhcmVucyIsImNoZWNrRXhwcmVzc2lvbkVycm9ycyIsImFuZFRocm93IiwiY2hlY2tZaWVsZEF3YWl0SW5EZWZhdWx0UGFyYW1zIiwiaXNTaW1wbGVBc3NpZ25UYXJnZXQiLCJwcCQxIiwiYWRhcHREaXJlY3RpdmVQcm9sb2d1ZSIsImlzTGV0IiwibmV4dENoIiwiaWRlbnQiLCJpc0FzeW5jRnVuY3Rpb24iLCJ0b3BMZXZlbCIsInBhcnNlQnJlYWtDb250aW51ZVN0YXRlbWVudCIsInBhcnNlRGVidWdnZXJTdGF0ZW1lbnQiLCJwYXJzZURvU3RhdGVtZW50IiwicGFyc2VGb3JTdGF0ZW1lbnQiLCJwYXJzZUZ1bmN0aW9uU3RhdGVtZW50IiwicGFyc2VDbGFzcyIsInBhcnNlSWZTdGF0ZW1lbnQiLCJwYXJzZVJldHVyblN0YXRlbWVudCIsInBhcnNlU3dpdGNoU3RhdGVtZW50IiwicGFyc2VUaHJvd1N0YXRlbWVudCIsInBhcnNlVHJ5U3RhdGVtZW50IiwicGFyc2VWYXJTdGF0ZW1lbnQiLCJwYXJzZVdoaWxlU3RhdGVtZW50IiwicGFyc2VXaXRoU3RhdGVtZW50IiwicGFyc2VFbXB0eVN0YXRlbWVudCIsInBhcnNlSW1wb3J0IiwicGFyc2VFeHBvcnQiLCJwYXJzZUxhYmVsZWRTdGF0ZW1lbnQiLCJwYXJzZUV4cHJlc3Npb25TdGF0ZW1lbnQiLCJhd2FpdEF0IiwiaW5pdCQxIiwiYXdhaXQiLCJ0b0Fzc2lnbmFibGUiLCJpc0FzeW5jIiwiZGVjbGFyYXRpb25Qb3NpdGlvbiIsIkZVTkNfU1RBVEVNRU5UIiwiRlVOQ19IQU5HSU5HX1NUQVRFTUVOVCIsImV4aXRTY29wZSIsInBhcnNlQmluZGluZ0F0b20iLCJpJDEiLCJsYWJlbCQxIiwic3RhdGVtZW50U3RhcnQiLCJjcmVhdGVOZXdMZXhpY2FsU2NvcGUiLCJpc0ZvciIsInBhcnNlVmFySWQiLCJzdGF0ZW1lbnQiLCJhbGxvd0V4cHJlc3Npb25Cb2R5IiwiaW5pdEZ1bmN0aW9uIiwib2xkWWllbGRQb3MiLCJvbGRBd2FpdFBvcyIsIm9sZEF3YWl0SWRlbnRQb3MiLCJwYXJzZUZ1bmN0aW9uUGFyYW1zIiwicGFyc2VGdW5jdGlvbkJvZHkiLCJwYXJzZUJpbmRpbmdMaXN0IiwicGFyc2VDbGFzc0lkIiwicGFyc2VDbGFzc1N1cGVyIiwiY2xhc3NCb2R5IiwiaGFkQ29uc3RydWN0b3IiLCJwYXJzZUNsYXNzRWxlbWVudCIsInN1cGVyQ2xhc3MiLCJjb25zdHJ1Y3RvckFsbG93c1N1cGVyIiwidGhpcyQxIiwidHJ5Q29udGV4dHVhbCIsIm5vTGluZUJyZWFrIiwic3RhcnROb2RlQXQiLCJzdGF0aWMiLCJpc0dlbmVyYXRvciIsImFsbG93c0RpcmVjdFN1cGVyIiwicGFyc2VDbGFzc01ldGhvZCIsInBhcnNlTWV0aG9kIiwicGFyc2VFeHByU3Vic2NyaXB0cyIsImNoZWNrRXhwb3J0IiwiZk5vZGUiLCJjTm9kZSIsInNob3VsZFBhcnNlRXhwb3J0U3RhdGVtZW50IiwiY2hlY2tWYXJpYWJsZUV4cG9ydCIsInBhcnNlRXhwb3J0U3BlY2lmaWVycyIsInNwZWMiLCJjaGVja1VucmVzZXJ2ZWQiLCJsb2NhbCIsImNoZWNrTG9jYWxFeHBvcnQiLCJjaGVja1BhdHRlcm5FeHBvcnQiLCJwYXQiLCJsaXN0JDEiLCJlbHQiLCJkZWNscyIsImV4cG9ydGVkIiwicGFyc2VJbXBvcnRTcGVjaWZpZXJzIiwibm9kZSQxIiwibm9kZSQyIiwiaW1wb3J0ZWQiLCJzdGF0ZW1lbnRzIiwiaXNEaXJlY3RpdmVDYW5kaWRhdGUiLCJkaXJlY3RpdmUiLCJwcCQyIiwiaXNCaW5kaW5nIiwidG9Bc3NpZ25hYmxlTGlzdCIsImV4cHJMaXN0IiwicGFyc2VTcHJlYWQiLCJwYXJzZVJlc3RCaW5kaW5nIiwicmVzdCIsInBhcnNlQmluZGluZ0xpc3RJdGVtIiwicGFyc2VNYXliZURlZmF1bHQiLCJiaW5kaW5nVHlwZSIsImNoZWNrQ2xhc2hlcyIsImRlY2xhcmVOYW1lIiwicHAkMyIsImNoZWNrUHJvcENsYXNoIiwicHJvcEhhc2giLCJzaG9ydGhhbmQiLCJhZnRlckxlZnRQYXJzZSIsInBhcnNlWWllbGQiLCJvd25EZXN0cnVjdHVyaW5nRXJyb3JzIiwib2xkUGFyZW5Bc3NpZ24iLCJvbGRUcmFpbGluZ0NvbW1hIiwib2xkU2hvcnRoYW5kQXNzaWduIiwibGVmdFN0YXJ0UG9zIiwibGVmdFN0YXJ0TG9jIiwibG9naWNhbCIsImJ1aWxkQmluYXJ5Iiwic2F3VW5hcnkiLCJwYXJzZUF3YWl0Iiwic2tpcEFycm93U3Vic2NyaXB0cyIsIm1heWJlQXN5bmNBcnJvdyIsInBhcnNlU3Vic2NyaXB0IiwicGFyc2VBcnJvd0V4cHJlc3Npb24iLCJxdWFzaSIsInBhcnNlVGVtcGxhdGUiLCJpc1RhZ2dlZCIsImNhbkJlQXJyb3ciLCJwYXJzZUxpdGVyYWwiLCJyZWdleCIsInBhcnNlUGFyZW5BbmREaXN0aW5ndWlzaEV4cHJlc3Npb24iLCJzcHJlYWRTdGFydCIsImlubmVyU3RhcnRQb3MiLCJpbm5lclN0YXJ0TG9jIiwibGFzdElzQ29tbWEiLCJwYXJzZVBhcmVuSXRlbSIsImlubmVyRW5kUG9zIiwiaW5uZXJFbmRMb2MiLCJwYXJzZVBhcmVuQXJyb3dMaXN0IiwiZmluaXNoTm9kZUF0IiwicGFyIiwiZW1wdHkkMSIsInBhcnNlVGVtcGxhdGVFbGVtZW50IiwiY29va2VkIiwidGFpbCIsImN1ckVsdCIsInF1YXNpcyIsImlzQXN5bmNQcm9wIiwiaXNQYXR0ZXJuIiwicGFyc2VQcm9wZXJ0eSIsInBhcnNlUHJvcGVydHlWYWx1ZSIsInBhcmFtQ291bnQiLCJpc0Fycm93RnVuY3Rpb24iLCJpc01ldGhvZCIsImlzRXhwcmVzc2lvbiIsInVzZVN0cmljdCIsImNoZWNrUGFyYW1zIiwibm9uU2ltcGxlIiwiaXNTaW1wbGVQYXJhbUxpc3QiLCJhbGxvd0R1cGxpY2F0ZXMiLCJuYW1lSGFzaCIsInBwJDQiLCJwcCQ1IiwiU2NvcGUiLCJsZXhpY2FsIiwicmVkZWNsYXJlZCIsInNjb3BlJDIiLCJzY29wZSQzIiwicHAkNiIsImlzRXhwciIsInByZXNlcnZlU3BhY2UiLCJvdmVycmlkZSIsImJfc3RhdCIsImJfZXhwciIsImJfdG1wbCIsInBfc3RhdCIsInBfZXhwciIsInFfdG1wbCIsInRyeVJlYWRUZW1wbGF0ZVRva2VuIiwiZl9zdGF0IiwiZl9leHByIiwiZl9leHByX2dlbiIsImZfZ2VuIiwicHAkNyIsImJyYWNlSXNCbG9jayIsInByZXZUeXBlIiwiY3VyQ29udGV4dCIsImluR2VuZXJhdG9yQ29udGV4dCIsInN0YXRlbWVudFBhcmVucyIsImFsbG93ZWQiLCJlY21hOUJpbmFyeVByb3BlcnRpZXMiLCJ1bmljb2RlQmluYXJ5UHJvcGVydGllcyIsIjkiLCIxMCIsInVuaWNvZGVHZW5lcmFsQ2F0ZWdvcnlWYWx1ZXMiLCJlY21hOVNjcmlwdFZhbHVlcyIsInVuaWNvZGVTY3JpcHRWYWx1ZXMiLCJidWlsZFVuaWNvZGVEYXRhIiwibm9uQmluYXJ5IiwiR2VuZXJhbF9DYXRlZ29yeSIsIlNjcmlwdCIsIlNjcmlwdF9FeHRlbnNpb25zIiwiZ2MiLCJzYyIsInNjeCIsInBwJDkiLCJSZWdFeHBWYWxpZGF0aW9uU3RhdGUiLCJ2YWxpZEZsYWdzIiwidW5pY29kZVByb3BlcnRpZXMiLCJzd2l0Y2hVIiwic3dpdGNoTiIsImxhc3RJbnRWYWx1ZSIsImxhc3RTdHJpbmdWYWx1ZSIsImxhc3RBc3NlcnRpb25Jc1F1YW50aWZpYWJsZSIsIm51bUNhcHR1cmluZ1BhcmVucyIsIm1heEJhY2tSZWZlcmVuY2UiLCJncm91cE5hbWVzIiwiYmFja1JlZmVyZW5jZU5hbWVzIiwiY29kZVBvaW50VG9TdHJpbmckMSIsImlzU3ludGF4Q2hhcmFjdGVyIiwiaXNDb250cm9sTGV0dGVyIiwiaXNVbmljb2RlUHJvcGVydHlOYW1lQ2hhcmFjdGVyIiwiaXNVbmljb2RlUHJvcGVydHlWYWx1ZUNoYXJhY3RlciIsImlzRGVjaW1hbERpZ2l0IiwiaXNIZXhEaWdpdCIsImhleFRvSW50IiwiaXNPY3RhbERpZ2l0IiwidW5pY29kZSIsImF0IiwibmV4dEluZGV4IiwibG9va2FoZWFkIiwiYWR2YW5jZSIsInZhbGlkYXRlUmVnRXhwRmxhZ3MiLCJ2YWxpZGF0ZVJlZ0V4cFBhdHRlcm4iLCJyZWdleHBfcGF0dGVybiIsInJlZ2V4cF9kaXNqdW5jdGlvbiIsInJlZ2V4cF9hbHRlcm5hdGl2ZSIsInJlZ2V4cF9lYXRRdWFudGlmaWVyIiwicmVnZXhwX2VhdFRlcm0iLCJyZWdleHBfZWF0QXNzZXJ0aW9uIiwicmVnZXhwX2VhdEF0b20iLCJyZWdleHBfZWF0RXh0ZW5kZWRBdG9tIiwibG9va2JlaGluZCIsIm5vRXJyb3IiLCJyZWdleHBfZWF0UXVhbnRpZmllclByZWZpeCIsInJlZ2V4cF9lYXRCcmFjZWRRdWFudGlmaWVyIiwicmVnZXhwX2VhdERlY2ltYWxEaWdpdHMiLCJyZWdleHBfZWF0UGF0dGVybkNoYXJhY3RlcnMiLCJyZWdleHBfZWF0UmV2ZXJzZVNvbGlkdXNBdG9tRXNjYXBlIiwicmVnZXhwX2VhdENoYXJhY3RlckNsYXNzIiwicmVnZXhwX2VhdFVuY2FwdHVyaW5nR3JvdXAiLCJyZWdleHBfZWF0Q2FwdHVyaW5nR3JvdXAiLCJyZWdleHBfZWF0QXRvbUVzY2FwZSIsInJlZ2V4cF9ncm91cFNwZWNpZmllciIsInJlZ2V4cF9lYXRJbnZhbGlkQnJhY2VkUXVhbnRpZmllciIsInJlZ2V4cF9lYXRFeHRlbmRlZFBhdHRlcm5DaGFyYWN0ZXIiLCJyZWdleHBfZWF0U3ludGF4Q2hhcmFjdGVyIiwicmVnZXhwX2VhdEdyb3VwTmFtZSIsInJlZ2V4cF9lYXRSZWdFeHBJZGVudGlmaWVyTmFtZSIsInJlZ2V4cF9lYXRSZWdFeHBJZGVudGlmaWVyU3RhcnQiLCJyZWdleHBfZWF0UmVnRXhwSWRlbnRpZmllclBhcnQiLCJyZWdleHBfZWF0UmVnRXhwVW5pY29kZUVzY2FwZVNlcXVlbmNlIiwiaXNSZWdFeHBJZGVudGlmaWVyU3RhcnQiLCJpc1JlZ0V4cElkZW50aWZpZXJQYXJ0IiwicmVnZXhwX2VhdEJhY2tSZWZlcmVuY2UiLCJyZWdleHBfZWF0Q2hhcmFjdGVyQ2xhc3NFc2NhcGUiLCJyZWdleHBfZWF0Q2hhcmFjdGVyRXNjYXBlIiwicmVnZXhwX2VhdEtHcm91cE5hbWUiLCJyZWdleHBfZWF0RGVjaW1hbEVzY2FwZSIsInJlZ2V4cF9lYXRDb250cm9sRXNjYXBlIiwicmVnZXhwX2VhdENDb250cm9sTGV0dGVyIiwicmVnZXhwX2VhdFplcm8iLCJyZWdleHBfZWF0SGV4RXNjYXBlU2VxdWVuY2UiLCJyZWdleHBfZWF0TGVnYWN5T2N0YWxFc2NhcGVTZXF1ZW5jZSIsInJlZ2V4cF9lYXRJZGVudGl0eUVzY2FwZSIsInJlZ2V4cF9lYXRDb250cm9sTGV0dGVyIiwicmVnZXhwX2VhdEZpeGVkSGV4RGlnaXRzIiwibGVhZCIsImxlYWRTdXJyb2dhdGVFbmQiLCJ0cmFpbCIsInJlZ2V4cF9lYXRIZXhEaWdpdHMiLCJpc0NoYXJhY3RlckNsYXNzRXNjYXBlIiwicmVnZXhwX2VhdFVuaWNvZGVQcm9wZXJ0eVZhbHVlRXhwcmVzc2lvbiIsInJlZ2V4cF9lYXRVbmljb2RlUHJvcGVydHlOYW1lIiwicmVnZXhwX2VhdFVuaWNvZGVQcm9wZXJ0eVZhbHVlIiwicmVnZXhwX3ZhbGlkYXRlVW5pY29kZVByb3BlcnR5TmFtZUFuZFZhbHVlIiwicmVnZXhwX2VhdExvbmVVbmljb2RlUHJvcGVydHlOYW1lT3JWYWx1ZSIsIm5hbWVPclZhbHVlIiwicmVnZXhwX3ZhbGlkYXRlVW5pY29kZVByb3BlcnR5TmFtZU9yVmFsdWUiLCJyZWdleHBfY2xhc3NSYW5nZXMiLCJyZWdleHBfZWF0Q2xhc3NBdG9tIiwicmVnZXhwX2VhdENsYXNzRXNjYXBlIiwiY2gkMSIsInJlZ2V4cF9lYXRDbGFzc0NvbnRyb2xMZXR0ZXIiLCJyZWdleHBfZWF0T2N0YWxEaWdpdCIsIm4xIiwibjIiLCJwcCQ4IiwiY29kZVBvaW50VG9TdHJpbmciLCJmdWxsQ2hhckNvZGVBdFBvcyIsInN0YXJ0U2tpcCIsIm5leHQyIiwicmVhZFRva2VuX211bHRfbW9kdWxvX2V4cCIsInRva2VudHlwZSIsInJlYWRUb2tlbl9jYXJldCIsInJlYWRSYWRpeE51bWJlciIsImZsYWdzU3RhcnQiLCJyZWFkQ29kZVBvaW50IiwiY29kZVBvcyIsImludmFsaWRTdHJpbmdUb2tlbiIsImNodW5rU3RhcnQiLCJyZWFkRXNjYXBlZENoYXIiLCJJTlZBTElEX1RFTVBMQVRFX0VTQ0FQRV9FUlJPUiIsImluVGVtcGxhdGVFbGVtZW50IiwicmVhZFRtcGxUb2tlbiIsInJlYWRJbnZhbGlkVGVtcGxhdGVUb2tlbiIsImluVGVtcGxhdGUiLCJvY3RhbFN0ciIsImVzY1N0YXJ0IiwicmVuZGVyZXJfUmVuZGVyZXIiLCJbb2JqZWN0IE9iamVjdF0iLCJzcGFjaW5nIiwicGFwZXJfZnVsbCIsInRvSGV4TWF0cml4IiwidG9FdWNsaWRlYW5NYXRyaXgiLCJldWNsaWRlYW5Db29yZCIsImhleENvb3JkIiwiZXVjbGlkZWFuQ29vcmRzIiwidG9IZXhDb29yZCIsImdyaWQiLCJhdXRvbWF0YSIsInBvaW50Q29vcmQiLCJoZXhDb29yZHMiLCJnZXRQb2ludENvb3JkcyIsImV1Y2xpZGVhbkNpcmNsZUNvb3JkcyIsImdldENpcmNsZUNvb3JkcyIsImNpcmNsZUNvb3JkIiwiZ3JpZF9HcmlkIiwiY2Fub25pY2FsX25laWdoYm9yaG9vZF9kZWx0YXMiLCJjYW5vbmljYWxfYmxvY2tlcl9kZWx0YXMiLCJEaXJlY3Rpb24iLCJNb3ZlIiwiZGlyZWN0aW9uIiwiZGlyZWN0aW9uU3RyaW5nIiwiQ1ciLCJ0b0tleSIsIk1vdmVNYXAiLCJNYXAiLCJhdXRvbWF0YV9BdXRvbWF0YSIsImNpcmNsZXMiLCJpdGVyYXRpb24iLCJtb3ZlTWFwIiwiQ0NXIiwiY2hvb3NlQ2lyY2xlIiwiY2hvb3NlRGVzaXJlZE1vdmUiLCJjaXJjbGVDb29yZHMiLCJjaXJjbGVJbmRleCIsImNob3NlbkNpcmNsZUNvb3JkIiwibGVnYWxNb3ZlcyIsImdldExlZ2FsTW92ZVBvaW50cyIsImRlc2lyZWRNb3ZlIiwibmV3Q29vcmQiLCJibG9ja2luZ1BvaW50cyIsIm5laWdoYm9yaG9vZFBvaW50cyIsImdyaWRPZmZzZXQiLCJncmlkU2l6ZSIsInJlbmRlcmVyIiwicmVuZGVyIiwiaXRlcmF0ZSIsImNob3NlbkNpcmNsZSJdLCJtYXBwaW5ncyI6ImFBQ0EsSUFBQUEsRUFBQSxHQUdBLFNBQUFDLEVBQUFDLEdBR0EsR0FBQUYsRUFBQUUsR0FDQSxPQUFBRixFQUFBRSxHQUFBQyxRQUdBLElBQUFDLEVBQUFKLEVBQUFFLEdBQUEsQ0FDQUcsRUFBQUgsRUFDQUksR0FBQSxFQUNBSCxRQUFBLElBVUEsT0FOQUksRUFBQUwsR0FBQU0sS0FBQUosRUFBQUQsUUFBQUMsSUFBQUQsUUFBQUYsR0FHQUcsRUFBQUUsR0FBQSxFQUdBRixFQUFBRCxRQUtBRixFQUFBUSxFQUFBRixFQUdBTixFQUFBUyxFQUFBVixFQUdBQyxFQUFBVSxFQUFBLFNBQUFSLEVBQUFTLEVBQUFDLEdBQ0FaLEVBQUFhLEVBQUFYLEVBQUFTLElBQ0FHLE9BQUFDLGVBQUFiLEVBQUFTLEVBQUEsQ0FBMENLLFlBQUEsRUFBQUMsSUFBQUwsS0FLMUNaLEVBQUFrQixFQUFBLFNBQUFoQixHQUNBLG9CQUFBaUIsZUFBQUMs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LEVBQUtELEVBQVVZLElBQU1GLEVBQVksRUFBSyxJQUd6RWdCLEVBQVNDLE9BQU90QyxFQUFNQyxJQUNyQiIsImZpbGUiOiJtYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDUpO1xuIiwiLyohXG4gKiBQYXBlci5qcyB2MC4xMi4wIC0gVGhlIFN3aXNzIEFybXkgS25pZmUgb2YgVmVjdG9yIEdyYXBoaWNzIFNjcmlwdGluZy5cbiAqIGh0dHA6Ly9wYXBlcmpzLm9yZy9cbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTEgLSAyMDE2LCBKdWVyZyBMZWhuaSAmIEpvbmF0aGFuIFB1Y2tleVxuICogaHR0cDovL3NjcmF0Y2hkaXNrLmNvbS8gJiBodHRwczovL3B1Y2tleS5zdHVkaW8vXG4gKlxuICogRGlzdHJpYnV0ZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLiBTZWUgTElDRU5TRSBmaWxlIGZvciBkZXRhaWxzLlxuICpcbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogRGF0ZTogTW9uIERlYyAzIDE0OjE5OjExIDIwMTggKzAxMDBcbiAqXG4gKioqXG4gKlxuICogU3RyYXBzLmpzIC0gQ2xhc3MgaW5oZXJpdGFuY2UgbGlicmFyeSB3aXRoIHN1cHBvcnQgZm9yIGJlYW4tc3R5bGUgYWNjZXNzb3JzXG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDA2IC0gMjAxNiBKdWVyZyBMZWhuaVxuICogaHR0cDovL3NjcmF0Y2hkaXNrLmNvbS9cbiAqXG4gKiBEaXN0cmlidXRlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG4gKlxuICoqKlxuICpcbiAqIEFjb3JuLmpzXG4gKiBodHRwczovL21hcmlqbmhhdmVyYmVrZS5ubC9hY29ybi9cbiAqXG4gKiBBY29ybiBpcyBhIHRpbnksIGZhc3QgSmF2YVNjcmlwdCBwYXJzZXIgd3JpdHRlbiBpbiBKYXZhU2NyaXB0LFxuICogY3JlYXRlZCBieSBNYXJpam4gSGF2ZXJiZWtlIGFuZCByZWxlYXNlZCB1bmRlciBhbiBNSVQgbGljZW5zZS5cbiAqXG4gKi9cblxudmFyIHBhcGVyID0gZnVuY3Rpb24oc2VsZiwgdW5kZWZpbmVkKSB7XG5cbnNlbGYgPSBzZWxmIHx8IHJlcXVpcmUoJy4vbm9kZS9zZWxmLmpzJyk7XG52YXIgd2luZG93ID0gc2VsZi53aW5kb3csXG5cdGRvY3VtZW50ID0gc2VsZi5kb2N1bWVudDtcblxudmFyIEJhc2UgPSBuZXcgZnVuY3Rpb24oKSB7XG5cdHZhciBoaWRkZW4gPSAvXihzdGF0aWNzfGVudW1lcmFibGV8YmVhbnN8cHJlc2VydmUpJC8sXG5cdFx0YXJyYXkgPSBbXSxcblx0XHRzbGljZSA9IGFycmF5LnNsaWNlLFxuXHRcdGNyZWF0ZSA9IE9iamVjdC5jcmVhdGUsXG5cdFx0ZGVzY3JpYmUgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yLFxuXHRcdGRlZmluZSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSxcblxuXHRcdGZvckVhY2ggPSBhcnJheS5mb3JFYWNoIHx8IGZ1bmN0aW9uKGl0ZXIsIGJpbmQpIHtcblx0XHRcdGZvciAodmFyIGkgPSAwLCBsID0gdGhpcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcblx0XHRcdFx0aXRlci5jYWxsKGJpbmQsIHRoaXNbaV0sIGksIHRoaXMpO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRmb3JJbiA9IGZ1bmN0aW9uKGl0ZXIsIGJpbmQpIHtcblx0XHRcdGZvciAodmFyIGkgaW4gdGhpcykge1xuXHRcdFx0XHRpZiAodGhpcy5oYXNPd25Qcm9wZXJ0eShpKSlcblx0XHRcdFx0XHRpdGVyLmNhbGwoYmluZCwgdGhpc1tpXSwgaSwgdGhpcyk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdHNldCA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24oZHN0KSB7XG5cdFx0XHRmb3IgKHZhciBpID0gMSwgbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcblx0XHRcdFx0dmFyIHNyYyA9IGFyZ3VtZW50c1tpXTtcblx0XHRcdFx0Zm9yICh2YXIga2V5IGluIHNyYykge1xuXHRcdFx0XHRcdGlmIChzcmMuaGFzT3duUHJvcGVydHkoa2V5KSlcblx0XHRcdFx0XHRcdGRzdFtrZXldID0gc3JjW2tleV07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBkc3Q7XG5cdFx0fSxcblxuXHRcdGVhY2ggPSBmdW5jdGlvbihvYmosIGl0ZXIsIGJpbmQpIHtcblx0XHRcdGlmIChvYmopIHtcblx0XHRcdFx0dmFyIGRlc2MgPSBkZXNjcmliZShvYmosICdsZW5ndGgnKTtcblx0XHRcdFx0KGRlc2MgJiYgdHlwZW9mIGRlc2MudmFsdWUgPT09ICdudW1iZXInID8gZm9yRWFjaCA6IGZvckluKVxuXHRcdFx0XHRcdC5jYWxsKG9iaiwgaXRlciwgYmluZCA9IGJpbmQgfHwgb2JqKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBiaW5kO1xuXHRcdH07XG5cblx0ZnVuY3Rpb24gaW5qZWN0KGRlc3QsIHNyYywgZW51bWVyYWJsZSwgYmVhbnMsIHByZXNlcnZlKSB7XG5cdFx0dmFyIGJlYW5zTmFtZXMgPSB7fTtcblxuXHRcdGZ1bmN0aW9uIGZpZWxkKG5hbWUsIHZhbCkge1xuXHRcdFx0dmFsID0gdmFsIHx8ICh2YWwgPSBkZXNjcmliZShzcmMsIG5hbWUpKVxuXHRcdFx0XHRcdCYmICh2YWwuZ2V0ID8gdmFsIDogdmFsLnZhbHVlKTtcblx0XHRcdGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJyAmJiB2YWxbMF0gPT09ICcjJylcblx0XHRcdFx0dmFsID0gZGVzdFt2YWwuc3Vic3RyaW5nKDEpXSB8fCB2YWw7XG5cdFx0XHR2YXIgaXNGdW5jID0gdHlwZW9mIHZhbCA9PT0gJ2Z1bmN0aW9uJyxcblx0XHRcdFx0cmVzID0gdmFsLFxuXHRcdFx0XHRwcmV2ID0gcHJlc2VydmUgfHwgaXNGdW5jICYmICF2YWwuYmFzZVxuXHRcdFx0XHRcdFx0PyAodmFsICYmIHZhbC5nZXQgPyBuYW1lIGluIGRlc3QgOiBkZXN0W25hbWVdKVxuXHRcdFx0XHRcdFx0OiBudWxsLFxuXHRcdFx0XHRiZWFuO1xuXHRcdFx0aWYgKCFwcmVzZXJ2ZSB8fCAhcHJldikge1xuXHRcdFx0XHRpZiAoaXNGdW5jICYmIHByZXYpXG5cdFx0XHRcdFx0dmFsLmJhc2UgPSBwcmV2O1xuXHRcdFx0XHRpZiAoaXNGdW5jICYmIGJlYW5zICE9PSBmYWxzZVxuXHRcdFx0XHRcdFx0JiYgKGJlYW4gPSBuYW1lLm1hdGNoKC9eKFtnc11ldHxpcykoKFtBLVpdKSguKikpJC8pKSlcblx0XHRcdFx0XHRiZWFuc05hbWVzW2JlYW5bM10udG9Mb3dlckNhc2UoKSArIGJlYW5bNF1dID0gYmVhblsyXTtcblx0XHRcdFx0aWYgKCFyZXMgfHwgaXNGdW5jIHx8ICFyZXMuZ2V0IHx8IHR5cGVvZiByZXMuZ2V0ICE9PSAnZnVuY3Rpb24nXG5cdFx0XHRcdFx0XHR8fCAhQmFzZS5pc1BsYWluT2JqZWN0KHJlcykpIHtcblx0XHRcdFx0XHRyZXMgPSB7IHZhbHVlOiByZXMsIHdyaXRhYmxlOiB0cnVlIH07XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKChkZXNjcmliZShkZXN0LCBuYW1lKVxuXHRcdFx0XHRcdFx0fHwgeyBjb25maWd1cmFibGU6IHRydWUgfSkuY29uZmlndXJhYmxlKSB7XG5cdFx0XHRcdFx0cmVzLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG5cdFx0XHRcdFx0cmVzLmVudW1lcmFibGUgPSBlbnVtZXJhYmxlICE9IG51bGwgPyBlbnVtZXJhYmxlIDogIWJlYW47XG5cdFx0XHRcdH1cblx0XHRcdFx0ZGVmaW5lKGRlc3QsIG5hbWUsIHJlcyk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGlmIChzcmMpIHtcblx0XHRcdGZvciAodmFyIG5hbWUgaW4gc3JjKSB7XG5cdFx0XHRcdGlmIChzcmMuaGFzT3duUHJvcGVydHkobmFtZSkgJiYgIWhpZGRlbi50ZXN0KG5hbWUpKVxuXHRcdFx0XHRcdGZpZWxkKG5hbWUpO1xuXHRcdFx0fVxuXHRcdFx0Zm9yICh2YXIgbmFtZSBpbiBiZWFuc05hbWVzKSB7XG5cdFx0XHRcdHZhciBwYXJ0ID0gYmVhbnNOYW1lc1tuYW1lXSxcblx0XHRcdFx0XHRzZXQgPSBkZXN0WydzZXQnICsgcGFydF0sXG5cdFx0XHRcdFx0Z2V0ID0gZGVzdFsnZ2V0JyArIHBhcnRdIHx8IHNldCAmJiBkZXN0WydpcycgKyBwYXJ0XTtcblx0XHRcdFx0aWYgKGdldCAmJiAoYmVhbnMgPT09IHRydWUgfHwgZ2V0Lmxlbmd0aCA9PT0gMCkpXG5cdFx0XHRcdFx0ZmllbGQobmFtZSwgeyBnZXQ6IGdldCwgc2V0OiBzZXQgfSk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBkZXN0O1xuXHR9XG5cblx0ZnVuY3Rpb24gQmFzZSgpIHtcblx0XHRmb3IgKHZhciBpID0gMCwgbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcblx0XHRcdHZhciBzcmMgPSBhcmd1bWVudHNbaV07XG5cdFx0XHRpZiAoc3JjKVxuXHRcdFx0XHRzZXQodGhpcywgc3JjKTtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHRyZXR1cm4gaW5qZWN0KEJhc2UsIHtcblx0XHRpbmplY3Q6IGZ1bmN0aW9uKHNyYykge1xuXHRcdFx0aWYgKHNyYykge1xuXHRcdFx0XHR2YXIgc3RhdGljcyA9IHNyYy5zdGF0aWNzID09PSB0cnVlID8gc3JjIDogc3JjLnN0YXRpY3MsXG5cdFx0XHRcdFx0YmVhbnMgPSBzcmMuYmVhbnMsXG5cdFx0XHRcdFx0cHJlc2VydmUgPSBzcmMucHJlc2VydmU7XG5cdFx0XHRcdGlmIChzdGF0aWNzICE9PSBzcmMpXG5cdFx0XHRcdFx0aW5qZWN0KHRoaXMucHJvdG90eXBlLCBzcmMsIHNyYy5lbnVtZXJhYmxlLCBiZWFucywgcHJlc2VydmUpO1xuXHRcdFx0XHRpbmplY3QodGhpcywgc3RhdGljcywgbnVsbCwgYmVhbnMsIHByZXNlcnZlKTtcblx0XHRcdH1cblx0XHRcdGZvciAodmFyIGkgPSAxLCBsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKylcblx0XHRcdFx0dGhpcy5pbmplY3QoYXJndW1lbnRzW2ldKTtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH0sXG5cblx0XHRleHRlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGJhc2UgPSB0aGlzLFxuXHRcdFx0XHRjdG9yLFxuXHRcdFx0XHRwcm90bztcblx0XHRcdGZvciAodmFyIGkgPSAwLCBvYmosIGwgPSBhcmd1bWVudHMubGVuZ3RoO1xuXHRcdFx0XHRcdGkgPCBsICYmICEoY3RvciAmJiBwcm90byk7IGkrKykge1xuXHRcdFx0XHRvYmogPSBhcmd1bWVudHNbaV07XG5cdFx0XHRcdGN0b3IgPSBjdG9yIHx8IG9iai5pbml0aWFsaXplO1xuXHRcdFx0XHRwcm90byA9IHByb3RvIHx8IG9iai5wcm90b3R5cGU7XG5cdFx0XHR9XG5cdFx0XHRjdG9yID0gY3RvciB8fCBmdW5jdGlvbigpIHtcblx0XHRcdFx0YmFzZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHRcdFx0fTtcblx0XHRcdHByb3RvID0gY3Rvci5wcm90b3R5cGUgPSBwcm90byB8fCBjcmVhdGUodGhpcy5wcm90b3R5cGUpO1xuXHRcdFx0ZGVmaW5lKHByb3RvLCAnY29uc3RydWN0b3InLFxuXHRcdFx0XHRcdHsgdmFsdWU6IGN0b3IsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSk7XG5cdFx0XHRpbmplY3QoY3RvciwgdGhpcyk7XG5cdFx0XHRpZiAoYXJndW1lbnRzLmxlbmd0aClcblx0XHRcdFx0dGhpcy5pbmplY3QuYXBwbHkoY3RvciwgYXJndW1lbnRzKTtcblx0XHRcdGN0b3IuYmFzZSA9IGJhc2U7XG5cdFx0XHRyZXR1cm4gY3Rvcjtcblx0XHR9XG5cdH0pLmluamVjdCh7XG5cdFx0ZW51bWVyYWJsZTogZmFsc2UsXG5cblx0XHRpbml0aWFsaXplOiBCYXNlLFxuXG5cdFx0c2V0OiBCYXNlLFxuXG5cdFx0aW5qZWN0OiBmdW5jdGlvbigpIHtcblx0XHRcdGZvciAodmFyIGkgPSAwLCBsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuXHRcdFx0XHR2YXIgc3JjID0gYXJndW1lbnRzW2ldO1xuXHRcdFx0XHRpZiAoc3JjKSB7XG5cdFx0XHRcdFx0aW5qZWN0KHRoaXMsIHNyYywgc3JjLmVudW1lcmFibGUsIHNyYy5iZWFucywgc3JjLnByZXNlcnZlKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fSxcblxuXHRcdGV4dGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgcmVzID0gY3JlYXRlKHRoaXMpO1xuXHRcdFx0cmV0dXJuIHJlcy5pbmplY3QuYXBwbHkocmVzLCBhcmd1bWVudHMpO1xuXHRcdH0sXG5cblx0XHRlYWNoOiBmdW5jdGlvbihpdGVyLCBiaW5kKSB7XG5cdFx0XHRyZXR1cm4gZWFjaCh0aGlzLCBpdGVyLCBiaW5kKTtcblx0XHR9LFxuXG5cdFx0Y2xvbmU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKHRoaXMpO1xuXHRcdH0sXG5cblx0XHRzdGF0aWNzOiB7XG5cdFx0XHRzZXQ6IHNldCxcblx0XHRcdGVhY2g6IGVhY2gsXG5cdFx0XHRjcmVhdGU6IGNyZWF0ZSxcblx0XHRcdGRlZmluZTogZGVmaW5lLFxuXHRcdFx0ZGVzY3JpYmU6IGRlc2NyaWJlLFxuXG5cdFx0XHRjbG9uZTogZnVuY3Rpb24ob2JqKSB7XG5cdFx0XHRcdHJldHVybiBzZXQobmV3IG9iai5jb25zdHJ1Y3RvcigpLCBvYmopO1xuXHRcdFx0fSxcblxuXHRcdFx0aXNQbGFpbk9iamVjdDogZnVuY3Rpb24ob2JqKSB7XG5cdFx0XHRcdHZhciBjdG9yID0gb2JqICE9IG51bGwgJiYgb2JqLmNvbnN0cnVjdG9yO1xuXHRcdFx0XHRyZXR1cm4gY3RvciAmJiAoY3RvciA9PT0gT2JqZWN0IHx8IGN0b3IgPT09IEJhc2Vcblx0XHRcdFx0XHRcdHx8IGN0b3IubmFtZSA9PT0gJ09iamVjdCcpO1xuXHRcdFx0fSxcblxuXHRcdFx0cGljazogZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0XHRyZXR1cm4gYSAhPT0gdW5kZWZpbmVkID8gYSA6IGI7XG5cdFx0XHR9LFxuXG5cdFx0XHRzbGljZTogZnVuY3Rpb24obGlzdCwgYmVnaW4sIGVuZCkge1xuXHRcdFx0XHRyZXR1cm4gc2xpY2UuY2FsbChsaXN0LCBiZWdpbiwgZW5kKTtcblx0XHRcdH1cblx0XHR9XG5cdH0pO1xufTtcblxuaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnKVxuXHRtb2R1bGUuZXhwb3J0cyA9IEJhc2U7XG5cbkJhc2UuaW5qZWN0KHtcblx0ZW51bWVyYWJsZTogZmFsc2UsXG5cblx0dG9TdHJpbmc6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLl9pZCAhPSBudWxsXG5cdFx0XHQ/ICAodGhpcy5fY2xhc3MgfHwgJ09iamVjdCcpICsgKHRoaXMuX25hbWVcblx0XHRcdFx0PyBcIiAnXCIgKyB0aGlzLl9uYW1lICsgXCInXCJcblx0XHRcdFx0OiAnIEAnICsgdGhpcy5faWQpXG5cdFx0XHQ6ICd7ICcgKyBCYXNlLmVhY2godGhpcywgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuXHRcdFx0XHRpZiAoIS9eXy8udGVzdChrZXkpKSB7XG5cdFx0XHRcdFx0dmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG5cdFx0XHRcdFx0dGhpcy5wdXNoKGtleSArICc6ICcgKyAodHlwZSA9PT0gJ251bWJlcidcblx0XHRcdFx0XHRcdFx0PyBGb3JtYXR0ZXIuaW5zdGFuY2UubnVtYmVyKHZhbHVlKVxuXHRcdFx0XHRcdFx0XHQ6IHR5cGUgPT09ICdzdHJpbmcnID8gXCInXCIgKyB2YWx1ZSArIFwiJ1wiIDogdmFsdWUpKTtcblx0XHRcdFx0fVxuXHRcdFx0fSwgW10pLmpvaW4oJywgJykgKyAnIH0nO1xuXHR9LFxuXG5cdGdldENsYXNzTmFtZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuX2NsYXNzIHx8ICcnO1xuXHR9LFxuXG5cdGltcG9ydEpTT046IGZ1bmN0aW9uKGpzb24pIHtcblx0XHRyZXR1cm4gQmFzZS5pbXBvcnRKU09OKGpzb24sIHRoaXMpO1xuXHR9LFxuXG5cdGV4cG9ydEpTT046IGZ1bmN0aW9uKG9wdGlvbnMpIHtcblx0XHRyZXR1cm4gQmFzZS5leHBvcnRKU09OKHRoaXMsIG9wdGlvbnMpO1xuXHR9LFxuXG5cdHRvSlNPTjogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIEJhc2Uuc2VyaWFsaXplKHRoaXMpO1xuXHR9LFxuXG5cdHNldDogZnVuY3Rpb24ocHJvcHMsIGV4Y2x1ZGUpIHtcblx0XHRpZiAocHJvcHMpXG5cdFx0XHRCYXNlLmZpbHRlcih0aGlzLCBwcm9wcywgZXhjbHVkZSwgdGhpcy5fcHJpb3JpdGl6ZSk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cbn0sIHtcblxuYmVhbnM6IGZhbHNlLFxuc3RhdGljczoge1xuXHRleHBvcnRzOiB7fSxcblxuXHRleHRlbmQ6IGZ1bmN0aW9uIGV4dGVuZCgpIHtcblx0XHR2YXIgcmVzID0gZXh0ZW5kLmJhc2UuYXBwbHkodGhpcywgYXJndW1lbnRzKSxcblx0XHRcdG5hbWUgPSByZXMucHJvdG90eXBlLl9jbGFzcztcblx0XHRpZiAobmFtZSAmJiAhQmFzZS5leHBvcnRzW25hbWVdKVxuXHRcdFx0QmFzZS5leHBvcnRzW25hbWVdID0gcmVzO1xuXHRcdHJldHVybiByZXM7XG5cdH0sXG5cblx0ZXF1YWxzOiBmdW5jdGlvbihvYmoxLCBvYmoyKSB7XG5cdFx0aWYgKG9iajEgPT09IG9iajIpXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRpZiAob2JqMSAmJiBvYmoxLmVxdWFscylcblx0XHRcdHJldHVybiBvYmoxLmVxdWFscyhvYmoyKTtcblx0XHRpZiAob2JqMiAmJiBvYmoyLmVxdWFscylcblx0XHRcdHJldHVybiBvYmoyLmVxdWFscyhvYmoxKTtcblx0XHRpZiAob2JqMSAmJiBvYmoyXG5cdFx0XHRcdCYmIHR5cGVvZiBvYmoxID09PSAnb2JqZWN0JyAmJiB0eXBlb2Ygb2JqMiA9PT0gJ29iamVjdCcpIHtcblx0XHRcdGlmIChBcnJheS5pc0FycmF5KG9iajEpICYmIEFycmF5LmlzQXJyYXkob2JqMikpIHtcblx0XHRcdFx0dmFyIGxlbmd0aCA9IG9iajEubGVuZ3RoO1xuXHRcdFx0XHRpZiAobGVuZ3RoICE9PSBvYmoyLmxlbmd0aClcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdHdoaWxlIChsZW5ndGgtLSkge1xuXHRcdFx0XHRcdGlmICghQmFzZS5lcXVhbHMob2JqMVtsZW5ndGhdLCBvYmoyW2xlbmd0aF0pKVxuXHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iajEpLFxuXHRcdFx0XHRcdGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuXHRcdFx0XHRpZiAobGVuZ3RoICE9PSBPYmplY3Qua2V5cyhvYmoyKS5sZW5ndGgpXG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR3aGlsZSAobGVuZ3RoLS0pIHtcblx0XHRcdFx0XHR2YXIga2V5ID0ga2V5c1tsZW5ndGhdO1xuXHRcdFx0XHRcdGlmICghKG9iajIuaGFzT3duUHJvcGVydHkoa2V5KVxuXHRcdFx0XHRcdFx0XHQmJiBCYXNlLmVxdWFscyhvYmoxW2tleV0sIG9iajJba2V5XSkpKVxuXHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9LFxuXG5cdHJlYWQ6IGZ1bmN0aW9uKGxpc3QsIHN0YXJ0LCBvcHRpb25zLCBhbW91bnQpIHtcblx0XHRpZiAodGhpcyA9PT0gQmFzZSkge1xuXHRcdFx0dmFyIHZhbHVlID0gdGhpcy5wZWVrKGxpc3QsIHN0YXJ0KTtcblx0XHRcdGxpc3QuX19pbmRleCsrO1xuXHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdH1cblx0XHR2YXIgcHJvdG8gPSB0aGlzLnByb3RvdHlwZSxcblx0XHRcdHJlYWRJbmRleCA9IHByb3RvLl9yZWFkSW5kZXgsXG5cdFx0XHRiZWdpbiA9IHN0YXJ0IHx8IHJlYWRJbmRleCAmJiBsaXN0Ll9faW5kZXggfHwgMCxcblx0XHRcdGxlbmd0aCA9IGxpc3QubGVuZ3RoLFxuXHRcdFx0b2JqID0gbGlzdFtiZWdpbl07XG5cdFx0YW1vdW50ID0gYW1vdW50IHx8IGxlbmd0aCAtIGJlZ2luO1xuXHRcdGlmIChvYmogaW5zdGFuY2VvZiB0aGlzXG5cdFx0XHR8fCBvcHRpb25zICYmIG9wdGlvbnMucmVhZE51bGwgJiYgb2JqID09IG51bGwgJiYgYW1vdW50IDw9IDEpIHtcblx0XHRcdGlmIChyZWFkSW5kZXgpXG5cdFx0XHRcdGxpc3QuX19pbmRleCA9IGJlZ2luICsgMTtcblx0XHRcdHJldHVybiBvYmogJiYgb3B0aW9ucyAmJiBvcHRpb25zLmNsb25lID8gb2JqLmNsb25lKCkgOiBvYmo7XG5cdFx0fVxuXHRcdG9iaiA9IEJhc2UuY3JlYXRlKHByb3RvKTtcblx0XHRpZiAocmVhZEluZGV4KVxuXHRcdFx0b2JqLl9fcmVhZCA9IHRydWU7XG5cdFx0b2JqID0gb2JqLmluaXRpYWxpemUuYXBwbHkob2JqLCBiZWdpbiA+IDAgfHwgYmVnaW4gKyBhbW91bnQgPCBsZW5ndGhcblx0XHRcdFx0PyBCYXNlLnNsaWNlKGxpc3QsIGJlZ2luLCBiZWdpbiArIGFtb3VudClcblx0XHRcdFx0OiBsaXN0KSB8fCBvYmo7XG5cdFx0aWYgKHJlYWRJbmRleCkge1xuXHRcdFx0bGlzdC5fX2luZGV4ID0gYmVnaW4gKyBvYmouX19yZWFkO1xuXHRcdFx0dmFyIGZpbHRlcmVkID0gb2JqLl9fZmlsdGVyZWQ7XG5cdFx0XHRpZiAoZmlsdGVyZWQpIHtcblx0XHRcdFx0bGlzdC5fX2ZpbHRlcmVkID0gZmlsdGVyZWQ7XG5cdFx0XHRcdG9iai5fX2ZpbHRlcmVkID0gdW5kZWZpbmVkO1xuXHRcdFx0fVxuXHRcdFx0b2JqLl9fcmVhZCA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0cmV0dXJuIG9iajtcblx0fSxcblxuXHRwZWVrOiBmdW5jdGlvbihsaXN0LCBzdGFydCkge1xuXHRcdHJldHVybiBsaXN0W2xpc3QuX19pbmRleCA9IHN0YXJ0IHx8IGxpc3QuX19pbmRleCB8fCAwXTtcblx0fSxcblxuXHRyZW1haW46IGZ1bmN0aW9uKGxpc3QpIHtcblx0XHRyZXR1cm4gbGlzdC5sZW5ndGggLSAobGlzdC5fX2luZGV4IHx8IDApO1xuXHR9LFxuXG5cdHJlYWRMaXN0OiBmdW5jdGlvbihsaXN0LCBzdGFydCwgb3B0aW9ucywgYW1vdW50KSB7XG5cdFx0dmFyIHJlcyA9IFtdLFxuXHRcdFx0ZW50cnksXG5cdFx0XHRiZWdpbiA9IHN0YXJ0IHx8IDAsXG5cdFx0XHRlbmQgPSBhbW91bnQgPyBiZWdpbiArIGFtb3VudCA6IGxpc3QubGVuZ3RoO1xuXHRcdGZvciAodmFyIGkgPSBiZWdpbjsgaSA8IGVuZDsgaSsrKSB7XG5cdFx0XHRyZXMucHVzaChBcnJheS5pc0FycmF5KGVudHJ5ID0gbGlzdFtpXSlcblx0XHRcdFx0XHQ/IHRoaXMucmVhZChlbnRyeSwgMCwgb3B0aW9ucylcblx0XHRcdFx0XHQ6IHRoaXMucmVhZChsaXN0LCBpLCBvcHRpb25zLCAxKSk7XG5cdFx0fVxuXHRcdHJldHVybiByZXM7XG5cdH0sXG5cblx0cmVhZE5hbWVkOiBmdW5jdGlvbihsaXN0LCBuYW1lLCBzdGFydCwgb3B0aW9ucywgYW1vdW50KSB7XG5cdFx0dmFyIHZhbHVlID0gdGhpcy5nZXROYW1lZChsaXN0LCBuYW1lKSxcblx0XHRcdGhhc09iamVjdCA9IHZhbHVlICE9PSB1bmRlZmluZWQ7XG5cdFx0aWYgKGhhc09iamVjdCkge1xuXHRcdFx0dmFyIGZpbHRlcmVkID0gbGlzdC5fX2ZpbHRlcmVkO1xuXHRcdFx0aWYgKCFmaWx0ZXJlZCkge1xuXHRcdFx0XHRmaWx0ZXJlZCA9IGxpc3QuX19maWx0ZXJlZCA9IEJhc2UuY3JlYXRlKGxpc3RbMF0pO1xuXHRcdFx0XHRmaWx0ZXJlZC5fX3VuZmlsdGVyZWQgPSBsaXN0WzBdO1xuXHRcdFx0fVxuXHRcdFx0ZmlsdGVyZWRbbmFtZV0gPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdHZhciBsID0gaGFzT2JqZWN0ID8gW3ZhbHVlXSA6IGxpc3QsXG5cdFx0XHRyZXMgPSB0aGlzLnJlYWQobCwgc3RhcnQsIG9wdGlvbnMsIGFtb3VudCk7XG5cdFx0cmV0dXJuIHJlcztcblx0fSxcblxuXHRnZXROYW1lZDogZnVuY3Rpb24obGlzdCwgbmFtZSkge1xuXHRcdHZhciBhcmcgPSBsaXN0WzBdO1xuXHRcdGlmIChsaXN0Ll9oYXNPYmplY3QgPT09IHVuZGVmaW5lZClcblx0XHRcdGxpc3QuX2hhc09iamVjdCA9IGxpc3QubGVuZ3RoID09PSAxICYmIEJhc2UuaXNQbGFpbk9iamVjdChhcmcpO1xuXHRcdGlmIChsaXN0Ll9oYXNPYmplY3QpXG5cdFx0XHRyZXR1cm4gbmFtZSA/IGFyZ1tuYW1lXSA6IGxpc3QuX19maWx0ZXJlZCB8fCBhcmc7XG5cdH0sXG5cblx0aGFzTmFtZWQ6IGZ1bmN0aW9uKGxpc3QsIG5hbWUpIHtcblx0XHRyZXR1cm4gISF0aGlzLmdldE5hbWVkKGxpc3QsIG5hbWUpO1xuXHR9LFxuXG5cdGZpbHRlcjogZnVuY3Rpb24oZGVzdCwgc291cmNlLCBleGNsdWRlLCBwcmlvcml0aXplKSB7XG5cdFx0dmFyIHByb2Nlc3NlZDtcblxuXHRcdGZ1bmN0aW9uIGhhbmRsZUtleShrZXkpIHtcblx0XHRcdGlmICghKGV4Y2x1ZGUgJiYga2V5IGluIGV4Y2x1ZGUpICYmXG5cdFx0XHRcdCEocHJvY2Vzc2VkICYmIGtleSBpbiBwcm9jZXNzZWQpKSB7XG5cdFx0XHRcdHZhciB2YWx1ZSA9IHNvdXJjZVtrZXldO1xuXHRcdFx0XHRpZiAodmFsdWUgIT09IHVuZGVmaW5lZClcblx0XHRcdFx0XHRkZXN0W2tleV0gPSB2YWx1ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAocHJpb3JpdGl6ZSkge1xuXHRcdFx0dmFyIGtleXMgPSB7fTtcblx0XHRcdGZvciAodmFyIGkgPSAwLCBrZXksIGwgPSBwcmlvcml0aXplLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuXHRcdFx0XHRpZiAoKGtleSA9IHByaW9yaXRpemVbaV0pIGluIHNvdXJjZSkge1xuXHRcdFx0XHRcdGhhbmRsZUtleShrZXkpO1xuXHRcdFx0XHRcdGtleXNba2V5XSA9IHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHByb2Nlc3NlZCA9IGtleXM7XG5cdFx0fVxuXG5cdFx0T2JqZWN0LmtleXMoc291cmNlLl9fdW5maWx0ZXJlZCB8fCBzb3VyY2UpLmZvckVhY2goaGFuZGxlS2V5KTtcblx0XHRyZXR1cm4gZGVzdDtcblx0fSxcblxuXHRpc1BsYWluVmFsdWU6IGZ1bmN0aW9uKG9iaiwgYXNTdHJpbmcpIHtcblx0XHRyZXR1cm4gQmFzZS5pc1BsYWluT2JqZWN0KG9iaikgfHwgQXJyYXkuaXNBcnJheShvYmopXG5cdFx0XHRcdHx8IGFzU3RyaW5nICYmIHR5cGVvZiBvYmogPT09ICdzdHJpbmcnO1xuXHR9LFxuXG5cdHNlcmlhbGl6ZTogZnVuY3Rpb24ob2JqLCBvcHRpb25zLCBjb21wYWN0LCBkaWN0aW9uYXJ5KSB7XG5cdFx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cblx0XHR2YXIgaXNSb290ID0gIWRpY3Rpb25hcnksXG5cdFx0XHRyZXM7XG5cdFx0aWYgKGlzUm9vdCkge1xuXHRcdFx0b3B0aW9ucy5mb3JtYXR0ZXIgPSBuZXcgRm9ybWF0dGVyKG9wdGlvbnMucHJlY2lzaW9uKTtcblx0XHRcdGRpY3Rpb25hcnkgPSB7XG5cdFx0XHRcdGxlbmd0aDogMCxcblx0XHRcdFx0ZGVmaW5pdGlvbnM6IHt9LFxuXHRcdFx0XHRyZWZlcmVuY2VzOiB7fSxcblx0XHRcdFx0YWRkOiBmdW5jdGlvbihpdGVtLCBjcmVhdGUpIHtcblx0XHRcdFx0XHR2YXIgaWQgPSAnIycgKyBpdGVtLl9pZCxcblx0XHRcdFx0XHRcdHJlZiA9IHRoaXMucmVmZXJlbmNlc1tpZF07XG5cdFx0XHRcdFx0aWYgKCFyZWYpIHtcblx0XHRcdFx0XHRcdHRoaXMubGVuZ3RoKys7XG5cdFx0XHRcdFx0XHR2YXIgcmVzID0gY3JlYXRlLmNhbGwoaXRlbSksXG5cdFx0XHRcdFx0XHRcdG5hbWUgPSBpdGVtLl9jbGFzcztcblx0XHRcdFx0XHRcdGlmIChuYW1lICYmIHJlc1swXSAhPT0gbmFtZSlcblx0XHRcdFx0XHRcdFx0cmVzLnVuc2hpZnQobmFtZSk7XG5cdFx0XHRcdFx0XHR0aGlzLmRlZmluaXRpb25zW2lkXSA9IHJlcztcblx0XHRcdFx0XHRcdHJlZiA9IHRoaXMucmVmZXJlbmNlc1tpZF0gPSBbaWRdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gcmVmO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXHRcdH1cblx0XHRpZiAob2JqICYmIG9iai5fc2VyaWFsaXplKSB7XG5cdFx0XHRyZXMgPSBvYmouX3NlcmlhbGl6ZShvcHRpb25zLCBkaWN0aW9uYXJ5KTtcblx0XHRcdHZhciBuYW1lID0gb2JqLl9jbGFzcztcblx0XHRcdGlmIChuYW1lICYmICFvYmouX2NvbXBhY3RTZXJpYWxpemUgJiYgKGlzUm9vdCB8fCAhY29tcGFjdClcblx0XHRcdFx0XHQmJiByZXNbMF0gIT09IG5hbWUpIHtcblx0XHRcdFx0cmVzLnVuc2hpZnQobmFtZSk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIGlmIChBcnJheS5pc0FycmF5KG9iaikpIHtcblx0XHRcdHJlcyA9IFtdO1xuXHRcdFx0Zm9yICh2YXIgaSA9IDAsIGwgPSBvYmoubGVuZ3RoOyBpIDwgbDsgaSsrKVxuXHRcdFx0XHRyZXNbaV0gPSBCYXNlLnNlcmlhbGl6ZShvYmpbaV0sIG9wdGlvbnMsIGNvbXBhY3QsIGRpY3Rpb25hcnkpO1xuXHRcdH0gZWxzZSBpZiAoQmFzZS5pc1BsYWluT2JqZWN0KG9iaikpIHtcblx0XHRcdHJlcyA9IHt9O1xuXHRcdFx0dmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmopO1xuXHRcdFx0Zm9yICh2YXIgaSA9IDAsIGwgPSBrZXlzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuXHRcdFx0XHR2YXIga2V5ID0ga2V5c1tpXTtcblx0XHRcdFx0cmVzW2tleV0gPSBCYXNlLnNlcmlhbGl6ZShvYmpba2V5XSwgb3B0aW9ucywgY29tcGFjdCxcblx0XHRcdFx0XHRcdGRpY3Rpb25hcnkpO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSBpZiAodHlwZW9mIG9iaiA9PT0gJ251bWJlcicpIHtcblx0XHRcdHJlcyA9IG9wdGlvbnMuZm9ybWF0dGVyLm51bWJlcihvYmosIG9wdGlvbnMucHJlY2lzaW9uKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmVzID0gb2JqO1xuXHRcdH1cblx0XHRyZXR1cm4gaXNSb290ICYmIGRpY3Rpb25hcnkubGVuZ3RoID4gMFxuXHRcdFx0XHQ/IFtbJ2RpY3Rpb25hcnknLCBkaWN0aW9uYXJ5LmRlZmluaXRpb25zXSwgcmVzXVxuXHRcdFx0XHQ6IHJlcztcblx0fSxcblxuXHRkZXNlcmlhbGl6ZTogZnVuY3Rpb24oanNvbiwgY3JlYXRlLCBfZGF0YSwgX3NldERpY3Rpb25hcnksIF9pc1Jvb3QpIHtcblx0XHR2YXIgcmVzID0ganNvbixcblx0XHRcdGlzRmlyc3QgPSAhX2RhdGEsXG5cdFx0XHRoYXNEaWN0aW9uYXJ5ID0gaXNGaXJzdCAmJiBqc29uICYmIGpzb24ubGVuZ3RoXG5cdFx0XHRcdCYmIGpzb25bMF1bMF0gPT09ICdkaWN0aW9uYXJ5Jztcblx0XHRfZGF0YSA9IF9kYXRhIHx8IHt9O1xuXHRcdGlmIChBcnJheS5pc0FycmF5KGpzb24pKSB7XG5cdFx0XHR2YXIgdHlwZSA9IGpzb25bMF0sXG5cdFx0XHRcdGlzRGljdGlvbmFyeSA9IHR5cGUgPT09ICdkaWN0aW9uYXJ5Jztcblx0XHRcdGlmIChqc29uLmxlbmd0aCA9PSAxICYmIC9eIy8udGVzdCh0eXBlKSkge1xuXHRcdFx0XHRyZXR1cm4gX2RhdGEuZGljdGlvbmFyeVt0eXBlXTtcblx0XHRcdH1cblx0XHRcdHR5cGUgPSBCYXNlLmV4cG9ydHNbdHlwZV07XG5cdFx0XHRyZXMgPSBbXTtcblx0XHRcdGZvciAodmFyIGkgPSB0eXBlID8gMSA6IDAsIGwgPSBqc29uLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuXHRcdFx0XHRyZXMucHVzaChCYXNlLmRlc2VyaWFsaXplKGpzb25baV0sIGNyZWF0ZSwgX2RhdGEsXG5cdFx0XHRcdFx0XHRpc0RpY3Rpb25hcnksIGhhc0RpY3Rpb25hcnkpKTtcblx0XHRcdH1cblx0XHRcdGlmICh0eXBlKSB7XG5cdFx0XHRcdHZhciBhcmdzID0gcmVzO1xuXHRcdFx0XHRpZiAoY3JlYXRlKSB7XG5cdFx0XHRcdFx0cmVzID0gY3JlYXRlKHR5cGUsIGFyZ3MsIGlzRmlyc3QgfHwgX2lzUm9vdCk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cmVzID0gbmV3IHR5cGUoYXJncyk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9IGVsc2UgaWYgKEJhc2UuaXNQbGFpbk9iamVjdChqc29uKSkge1xuXHRcdFx0cmVzID0ge307XG5cdFx0XHRpZiAoX3NldERpY3Rpb25hcnkpXG5cdFx0XHRcdF9kYXRhLmRpY3Rpb25hcnkgPSByZXM7XG5cdFx0XHRmb3IgKHZhciBrZXkgaW4ganNvbilcblx0XHRcdFx0cmVzW2tleV0gPSBCYXNlLmRlc2VyaWFsaXplKGpzb25ba2V5XSwgY3JlYXRlLCBfZGF0YSk7XG5cdFx0fVxuXHRcdHJldHVybiBoYXNEaWN0aW9uYXJ5ID8gcmVzWzFdIDogcmVzO1xuXHR9LFxuXG5cdGV4cG9ydEpTT046IGZ1bmN0aW9uKG9iaiwgb3B0aW9ucykge1xuXHRcdHZhciBqc29uID0gQmFzZS5zZXJpYWxpemUob2JqLCBvcHRpb25zKTtcblx0XHRyZXR1cm4gb3B0aW9ucyAmJiBvcHRpb25zLmFzU3RyaW5nID09IGZhbHNlXG5cdFx0XHRcdD8ganNvblxuXHRcdFx0XHQ6IEpTT04uc3RyaW5naWZ5KGpzb24pO1xuXHR9LFxuXG5cdGltcG9ydEpTT046IGZ1bmN0aW9uKGpzb24sIHRhcmdldCkge1xuXHRcdHJldHVybiBCYXNlLmRlc2VyaWFsaXplKFxuXHRcdFx0XHR0eXBlb2YganNvbiA9PT0gJ3N0cmluZycgPyBKU09OLnBhcnNlKGpzb24pIDoganNvbixcblx0XHRcdFx0ZnVuY3Rpb24oY3RvciwgYXJncywgaXNSb290KSB7XG5cdFx0XHRcdFx0dmFyIHVzZVRhcmdldCA9IGlzUm9vdCAmJiB0YXJnZXRcblx0XHRcdFx0XHRcdFx0JiYgdGFyZ2V0LmNvbnN0cnVjdG9yID09PSBjdG9yLFxuXHRcdFx0XHRcdFx0b2JqID0gdXNlVGFyZ2V0ID8gdGFyZ2V0XG5cdFx0XHRcdFx0XHRcdDogQmFzZS5jcmVhdGUoY3Rvci5wcm90b3R5cGUpO1xuXHRcdFx0XHRcdGlmIChhcmdzLmxlbmd0aCA9PT0gMSAmJiBvYmogaW5zdGFuY2VvZiBJdGVtXG5cdFx0XHRcdFx0XHRcdCYmICh1c2VUYXJnZXQgfHwgIShvYmogaW5zdGFuY2VvZiBMYXllcikpKSB7XG5cdFx0XHRcdFx0XHR2YXIgYXJnID0gYXJnc1swXTtcblx0XHRcdFx0XHRcdGlmIChCYXNlLmlzUGxhaW5PYmplY3QoYXJnKSlcblx0XHRcdFx0XHRcdFx0YXJnLmluc2VydCA9IGZhbHNlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHQodXNlVGFyZ2V0ID8gb2JqLnNldCA6IGN0b3IpLmFwcGx5KG9iaiwgYXJncyk7XG5cdFx0XHRcdFx0aWYgKHVzZVRhcmdldClcblx0XHRcdFx0XHRcdHRhcmdldCA9IG51bGw7XG5cdFx0XHRcdFx0cmV0dXJuIG9iajtcblx0XHRcdFx0fSk7XG5cdH0sXG5cblx0cHVzaDogZnVuY3Rpb24obGlzdCwgaXRlbXMpIHtcblx0XHR2YXIgaXRlbXNMZW5ndGggPSBpdGVtcy5sZW5ndGg7XG5cdFx0aWYgKGl0ZW1zTGVuZ3RoIDwgNDA5Nikge1xuXHRcdFx0bGlzdC5wdXNoLmFwcGx5KGxpc3QsIGl0ZW1zKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dmFyIHN0YXJ0TGVuZ3RoID0gbGlzdC5sZW5ndGg7XG5cdFx0XHRsaXN0Lmxlbmd0aCArPSBpdGVtc0xlbmd0aDtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgaXRlbXNMZW5ndGg7IGkrKykge1xuXHRcdFx0XHRsaXN0W3N0YXJ0TGVuZ3RoICsgaV0gPSBpdGVtc1tpXTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIGxpc3Q7XG5cdH0sXG5cblx0c3BsaWNlOiBmdW5jdGlvbihsaXN0LCBpdGVtcywgaW5kZXgsIHJlbW92ZSkge1xuXHRcdHZhciBhbW91bnQgPSBpdGVtcyAmJiBpdGVtcy5sZW5ndGgsXG5cdFx0XHRhcHBlbmQgPSBpbmRleCA9PT0gdW5kZWZpbmVkO1xuXHRcdGluZGV4ID0gYXBwZW5kID8gbGlzdC5sZW5ndGggOiBpbmRleDtcblx0XHRpZiAoaW5kZXggPiBsaXN0Lmxlbmd0aClcblx0XHRcdGluZGV4ID0gbGlzdC5sZW5ndGg7XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBhbW91bnQ7IGkrKylcblx0XHRcdGl0ZW1zW2ldLl9pbmRleCA9IGluZGV4ICsgaTtcblx0XHRpZiAoYXBwZW5kKSB7XG5cdFx0XHRCYXNlLnB1c2gobGlzdCwgaXRlbXMpO1xuXHRcdFx0cmV0dXJuIFtdO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR2YXIgYXJncyA9IFtpbmRleCwgcmVtb3ZlXTtcblx0XHRcdGlmIChpdGVtcylcblx0XHRcdFx0QmFzZS5wdXNoKGFyZ3MsIGl0ZW1zKTtcblx0XHRcdHZhciByZW1vdmVkID0gbGlzdC5zcGxpY2UuYXBwbHkobGlzdCwgYXJncyk7XG5cdFx0XHRmb3IgKHZhciBpID0gMCwgbCA9IHJlbW92ZWQubGVuZ3RoOyBpIDwgbDsgaSsrKVxuXHRcdFx0XHRyZW1vdmVkW2ldLl9pbmRleCA9IHVuZGVmaW5lZDtcblx0XHRcdGZvciAodmFyIGkgPSBpbmRleCArIGFtb3VudCwgbCA9IGxpc3QubGVuZ3RoOyBpIDwgbDsgaSsrKVxuXHRcdFx0XHRsaXN0W2ldLl9pbmRleCA9IGk7XG5cdFx0XHRyZXR1cm4gcmVtb3ZlZDtcblx0XHR9XG5cdH0sXG5cblx0Y2FwaXRhbGl6ZTogZnVuY3Rpb24oc3RyKSB7XG5cdFx0cmV0dXJuIHN0ci5yZXBsYWNlKC9cXGJbYS16XS9nLCBmdW5jdGlvbihtYXRjaCkge1xuXHRcdFx0cmV0dXJuIG1hdGNoLnRvVXBwZXJDYXNlKCk7XG5cdFx0fSk7XG5cdH0sXG5cblx0Y2FtZWxpemU6IGZ1bmN0aW9uKHN0cikge1xuXHRcdHJldHVybiBzdHIucmVwbGFjZSgvLSguKS9nLCBmdW5jdGlvbihtYXRjaCwgY2hyKSB7XG5cdFx0XHRyZXR1cm4gY2hyLnRvVXBwZXJDYXNlKCk7XG5cdFx0fSk7XG5cdH0sXG5cblx0aHlwaGVuYXRlOiBmdW5jdGlvbihzdHIpIHtcblx0XHRyZXR1cm4gc3RyLnJlcGxhY2UoLyhbYS16XSkoW0EtWl0pL2csICckMS0kMicpLnRvTG93ZXJDYXNlKCk7XG5cdH1cbn19KTtcblxudmFyIEVtaXR0ZXIgPSB7XG5cdG9uOiBmdW5jdGlvbih0eXBlLCBmdW5jKSB7XG5cdFx0aWYgKHR5cGVvZiB0eXBlICE9PSAnc3RyaW5nJykge1xuXHRcdFx0QmFzZS5lYWNoKHR5cGUsIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcblx0XHRcdFx0dGhpcy5vbihrZXksIHZhbHVlKTtcblx0XHRcdH0sIHRoaXMpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR2YXIgdHlwZXMgPSB0aGlzLl9ldmVudFR5cGVzLFxuXHRcdFx0XHRlbnRyeSA9IHR5cGVzICYmIHR5cGVzW3R5cGVdLFxuXHRcdFx0XHRoYW5kbGVycyA9IHRoaXMuX2NhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrcyB8fCB7fTtcblx0XHRcdGhhbmRsZXJzID0gaGFuZGxlcnNbdHlwZV0gPSBoYW5kbGVyc1t0eXBlXSB8fCBbXTtcblx0XHRcdGlmIChoYW5kbGVycy5pbmRleE9mKGZ1bmMpID09PSAtMSkge1xuXHRcdFx0XHRoYW5kbGVycy5wdXNoKGZ1bmMpO1xuXHRcdFx0XHRpZiAoZW50cnkgJiYgZW50cnkuaW5zdGFsbCAmJiBoYW5kbGVycy5sZW5ndGggPT09IDEpXG5cdFx0XHRcdFx0ZW50cnkuaW5zdGFsbC5jYWxsKHRoaXMsIHR5cGUpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRvZmY6IGZ1bmN0aW9uKHR5cGUsIGZ1bmMpIHtcblx0XHRpZiAodHlwZW9mIHR5cGUgIT09ICdzdHJpbmcnKSB7XG5cdFx0XHRCYXNlLmVhY2godHlwZSwgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuXHRcdFx0XHR0aGlzLm9mZihrZXksIHZhbHVlKTtcblx0XHRcdH0sIHRoaXMpO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHR2YXIgdHlwZXMgPSB0aGlzLl9ldmVudFR5cGVzLFxuXHRcdFx0ZW50cnkgPSB0eXBlcyAmJiB0eXBlc1t0eXBlXSxcblx0XHRcdGhhbmRsZXJzID0gdGhpcy5fY2FsbGJhY2tzICYmIHRoaXMuX2NhbGxiYWNrc1t0eXBlXSxcblx0XHRcdGluZGV4O1xuXHRcdGlmIChoYW5kbGVycykge1xuXHRcdFx0aWYgKCFmdW5jIHx8IChpbmRleCA9IGhhbmRsZXJzLmluZGV4T2YoZnVuYykpICE9PSAtMVxuXHRcdFx0XHRcdCYmIGhhbmRsZXJzLmxlbmd0aCA9PT0gMSkge1xuXHRcdFx0XHRpZiAoZW50cnkgJiYgZW50cnkudW5pbnN0YWxsKVxuXHRcdFx0XHRcdGVudHJ5LnVuaW5zdGFsbC5jYWxsKHRoaXMsIHR5cGUpO1xuXHRcdFx0XHRkZWxldGUgdGhpcy5fY2FsbGJhY2tzW3R5cGVdO1xuXHRcdFx0fSBlbHNlIGlmIChpbmRleCAhPT0gLTEpIHtcblx0XHRcdFx0aGFuZGxlcnMuc3BsaWNlKGluZGV4LCAxKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0b25jZTogZnVuY3Rpb24odHlwZSwgZnVuYykge1xuXHRcdHJldHVybiB0aGlzLm9uKHR5cGUsIGZ1bmN0aW9uIGhhbmRsZXIoKSB7XG5cdFx0XHRmdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cdFx0XHR0aGlzLm9mZih0eXBlLCBoYW5kbGVyKTtcblx0XHR9KTtcblx0fSxcblxuXHRlbWl0OiBmdW5jdGlvbih0eXBlLCBldmVudCkge1xuXHRcdHZhciBoYW5kbGVycyA9IHRoaXMuX2NhbGxiYWNrcyAmJiB0aGlzLl9jYWxsYmFja3NbdHlwZV07XG5cdFx0aWYgKCFoYW5kbGVycylcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR2YXIgYXJncyA9IEJhc2Uuc2xpY2UoYXJndW1lbnRzLCAxKSxcblx0XHRcdHNldFRhcmdldCA9IGV2ZW50ICYmIGV2ZW50LnRhcmdldCAmJiAhZXZlbnQuY3VycmVudFRhcmdldDtcblx0XHRoYW5kbGVycyA9IGhhbmRsZXJzLnNsaWNlKCk7XG5cdFx0aWYgKHNldFRhcmdldClcblx0XHRcdGV2ZW50LmN1cnJlbnRUYXJnZXQgPSB0aGlzO1xuXHRcdGZvciAodmFyIGkgPSAwLCBsID0gaGFuZGxlcnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG5cdFx0XHRpZiAoaGFuZGxlcnNbaV0uYXBwbHkodGhpcywgYXJncykgPT0gZmFsc2UpIHtcblx0XHRcdFx0aWYgKGV2ZW50ICYmIGV2ZW50LnN0b3ApXG5cdFx0XHRcdFx0ZXZlbnQuc3RvcCgpO1xuXHRcdFx0XHRicmVhaztcblx0XHQgICB9XG5cdFx0fVxuXHRcdGlmIChzZXRUYXJnZXQpXG5cdFx0XHRkZWxldGUgZXZlbnQuY3VycmVudFRhcmdldDtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSxcblxuXHRyZXNwb25kczogZnVuY3Rpb24odHlwZSkge1xuXHRcdHJldHVybiAhISh0aGlzLl9jYWxsYmFja3MgJiYgdGhpcy5fY2FsbGJhY2tzW3R5cGVdKTtcblx0fSxcblxuXHRhdHRhY2g6ICcjb24nLFxuXHRkZXRhY2g6ICcjb2ZmJyxcblx0ZmlyZTogJyNlbWl0JyxcblxuXHRfaW5zdGFsbEV2ZW50czogZnVuY3Rpb24oaW5zdGFsbCkge1xuXHRcdHZhciB0eXBlcyA9IHRoaXMuX2V2ZW50VHlwZXMsXG5cdFx0XHRoYW5kbGVycyA9IHRoaXMuX2NhbGxiYWNrcyxcblx0XHRcdGtleSA9IGluc3RhbGwgPyAnaW5zdGFsbCcgOiAndW5pbnN0YWxsJztcblx0XHRpZiAodHlwZXMpIHtcblx0XHRcdGZvciAodmFyIHR5cGUgaW4gaGFuZGxlcnMpIHtcblx0XHRcdFx0aWYgKGhhbmRsZXJzW3R5cGVdLmxlbmd0aCA+IDApIHtcblx0XHRcdFx0XHR2YXIgZW50cnkgPSB0eXBlc1t0eXBlXSxcblx0XHRcdFx0XHRcdGZ1bmMgPSBlbnRyeSAmJiBlbnRyeVtrZXldO1xuXHRcdFx0XHRcdGlmIChmdW5jKVxuXHRcdFx0XHRcdFx0ZnVuYy5jYWxsKHRoaXMsIHR5cGUpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdHN0YXRpY3M6IHtcblx0XHRpbmplY3Q6IGZ1bmN0aW9uIGluamVjdChzcmMpIHtcblx0XHRcdHZhciBldmVudHMgPSBzcmMuX2V2ZW50cztcblx0XHRcdGlmIChldmVudHMpIHtcblx0XHRcdFx0dmFyIHR5cGVzID0ge307XG5cdFx0XHRcdEJhc2UuZWFjaChldmVudHMsIGZ1bmN0aW9uKGVudHJ5LCBrZXkpIHtcblx0XHRcdFx0XHR2YXIgaXNTdHJpbmcgPSB0eXBlb2YgZW50cnkgPT09ICdzdHJpbmcnLFxuXHRcdFx0XHRcdFx0bmFtZSA9IGlzU3RyaW5nID8gZW50cnkgOiBrZXksXG5cdFx0XHRcdFx0XHRwYXJ0ID0gQmFzZS5jYXBpdGFsaXplKG5hbWUpLFxuXHRcdFx0XHRcdFx0dHlwZSA9IG5hbWUuc3Vic3RyaW5nKDIpLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRcdFx0dHlwZXNbdHlwZV0gPSBpc1N0cmluZyA/IHt9IDogZW50cnk7XG5cdFx0XHRcdFx0bmFtZSA9ICdfJyArIG5hbWU7XG5cdFx0XHRcdFx0c3JjWydnZXQnICsgcGFydF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdHJldHVybiB0aGlzW25hbWVdO1xuXHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0c3JjWydzZXQnICsgcGFydF0gPSBmdW5jdGlvbihmdW5jKSB7XG5cdFx0XHRcdFx0XHR2YXIgcHJldiA9IHRoaXNbbmFtZV07XG5cdFx0XHRcdFx0XHRpZiAocHJldilcblx0XHRcdFx0XHRcdFx0dGhpcy5vZmYodHlwZSwgcHJldik7XG5cdFx0XHRcdFx0XHRpZiAoZnVuYylcblx0XHRcdFx0XHRcdFx0dGhpcy5vbih0eXBlLCBmdW5jKTtcblx0XHRcdFx0XHRcdHRoaXNbbmFtZV0gPSBmdW5jO1xuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRzcmMuX2V2ZW50VHlwZXMgPSB0eXBlcztcblx0XHRcdH1cblx0XHRcdHJldHVybiBpbmplY3QuYmFzZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHRcdH1cblx0fVxufTtcblxudmFyIFBhcGVyU2NvcGUgPSBCYXNlLmV4dGVuZCh7XG5cdF9jbGFzczogJ1BhcGVyU2NvcGUnLFxuXG5cdGluaXRpYWxpemU6IGZ1bmN0aW9uIFBhcGVyU2NvcGUoKSB7XG5cdFx0cGFwZXIgPSB0aGlzO1xuXHRcdHRoaXMuc2V0dGluZ3MgPSBuZXcgQmFzZSh7XG5cdFx0XHRhcHBseU1hdHJpeDogdHJ1ZSxcblx0XHRcdGluc2VydEl0ZW1zOiB0cnVlLFxuXHRcdFx0aGFuZGxlU2l6ZTogNCxcblx0XHRcdGhpdFRvbGVyYW5jZTogMFxuXHRcdH0pO1xuXHRcdHRoaXMucHJvamVjdCA9IG51bGw7XG5cdFx0dGhpcy5wcm9qZWN0cyA9IFtdO1xuXHRcdHRoaXMudG9vbHMgPSBbXTtcblx0XHR0aGlzLl9pZCA9IFBhcGVyU2NvcGUuX2lkKys7XG5cdFx0UGFwZXJTY29wZS5fc2NvcGVzW3RoaXMuX2lkXSA9IHRoaXM7XG5cdFx0dmFyIHByb3RvID0gUGFwZXJTY29wZS5wcm90b3R5cGU7XG5cdFx0aWYgKCF0aGlzLnN1cHBvcnQpIHtcblx0XHRcdHZhciBjdHggPSBDYW52YXNQcm92aWRlci5nZXRDb250ZXh0KDEsIDEpIHx8IHt9O1xuXHRcdFx0cHJvdG8uc3VwcG9ydCA9IHtcblx0XHRcdFx0bmF0aXZlRGFzaDogJ3NldExpbmVEYXNoJyBpbiBjdHggfHwgJ21vekRhc2gnIGluIGN0eCxcblx0XHRcdFx0bmF0aXZlQmxlbmRNb2RlczogQmxlbmRNb2RlLm5hdGl2ZU1vZGVzXG5cdFx0XHR9O1xuXHRcdFx0Q2FudmFzUHJvdmlkZXIucmVsZWFzZShjdHgpO1xuXHRcdH1cblx0XHRpZiAoIXRoaXMuYWdlbnQpIHtcblx0XHRcdHZhciB1c2VyID0gc2VsZi5uYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCksXG5cdFx0XHRcdG9zID0gKC8oZGFyd2lufHdpbnxtYWN8bGludXh8ZnJlZWJzZHxzdW5vcykvLmV4ZWModXNlcil8fFtdKVswXSxcblx0XHRcdFx0cGxhdGZvcm0gPSBvcyA9PT0gJ2RhcndpbicgPyAnbWFjJyA6IG9zLFxuXHRcdFx0XHRhZ2VudCA9IHByb3RvLmFnZW50ID0gcHJvdG8uYnJvd3NlciA9IHsgcGxhdGZvcm06IHBsYXRmb3JtIH07XG5cdFx0XHRpZiAocGxhdGZvcm0pXG5cdFx0XHRcdGFnZW50W3BsYXRmb3JtXSA9IHRydWU7XG5cdFx0XHR1c2VyLnJlcGxhY2UoXG5cdFx0XHRcdC8ob3BlcmF8Y2hyb21lfHNhZmFyaXx3ZWJraXR8ZmlyZWZveHxtc2llfHRyaWRlbnR8YXRvbXxub2RlKVxcLz9cXHMqKFsuXFxkXSspKD86Lip2ZXJzaW9uXFwvKFsuXFxkXSspKT8oPzouKnJ2XFw6dj8oWy5cXGRdKykpPy9nLFxuXHRcdFx0XHRmdW5jdGlvbihtYXRjaCwgbiwgdjEsIHYyLCBydikge1xuXHRcdFx0XHRcdGlmICghYWdlbnQuY2hyb21lKSB7XG5cdFx0XHRcdFx0XHR2YXIgdiA9IG4gPT09ICdvcGVyYScgPyB2MiA6XG5cdFx0XHRcdFx0XHRcdFx0L14obm9kZXx0cmlkZW50KSQvLnRlc3QobikgPyBydiA6IHYxO1xuXHRcdFx0XHRcdFx0YWdlbnQudmVyc2lvbiA9IHY7XG5cdFx0XHRcdFx0XHRhZ2VudC52ZXJzaW9uTnVtYmVyID0gcGFyc2VGbG9hdCh2KTtcblx0XHRcdFx0XHRcdG4gPSBuID09PSAndHJpZGVudCcgPyAnbXNpZScgOiBuO1xuXHRcdFx0XHRcdFx0YWdlbnQubmFtZSA9IG47XG5cdFx0XHRcdFx0XHRhZ2VudFtuXSA9IHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHQpO1xuXHRcdFx0aWYgKGFnZW50LmNocm9tZSlcblx0XHRcdFx0ZGVsZXRlIGFnZW50LndlYmtpdDtcblx0XHRcdGlmIChhZ2VudC5hdG9tKVxuXHRcdFx0XHRkZWxldGUgYWdlbnQuY2hyb21lO1xuXHRcdH1cblx0fSxcblxuXHR2ZXJzaW9uOiBcIjAuMTIuMFwiLFxuXG5cdGdldFZpZXc6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBwcm9qZWN0ID0gdGhpcy5wcm9qZWN0O1xuXHRcdHJldHVybiBwcm9qZWN0ICYmIHByb2plY3QuX3ZpZXc7XG5cdH0sXG5cblx0Z2V0UGFwZXI6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdGV4ZWN1dGU6IGZ1bmN0aW9uKGNvZGUsIG9wdGlvbnMpIHtcblx0XHRcdHZhciBleHBvcnRzID0gcGFwZXIuUGFwZXJTY3JpcHQuZXhlY3V0ZShjb2RlLCB0aGlzLCBvcHRpb25zKTtcblx0XHRcdFZpZXcudXBkYXRlRm9jdXMoKTtcblx0XHRcdHJldHVybiBleHBvcnRzO1xuXHR9LFxuXG5cdGluc3RhbGw6IGZ1bmN0aW9uKHNjb3BlKSB7XG5cdFx0dmFyIHRoYXQgPSB0aGlzO1xuXHRcdEJhc2UuZWFjaChbJ3Byb2plY3QnLCAndmlldycsICd0b29sJ10sIGZ1bmN0aW9uKGtleSkge1xuXHRcdFx0QmFzZS5kZWZpbmUoc2NvcGUsIGtleSwge1xuXHRcdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRoYXRba2V5XTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fSk7XG5cdFx0Zm9yICh2YXIga2V5IGluIHRoaXMpXG5cdFx0XHRpZiAoIS9eXy8udGVzdChrZXkpICYmIHRoaXNba2V5XSlcblx0XHRcdFx0c2NvcGVba2V5XSA9IHRoaXNba2V5XTtcblx0fSxcblxuXHRzZXR1cDogZnVuY3Rpb24oZWxlbWVudCkge1xuXHRcdHBhcGVyID0gdGhpcztcblx0XHR0aGlzLnByb2plY3QgPSBuZXcgUHJvamVjdChlbGVtZW50KTtcblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRjcmVhdGVDYW52YXM6IGZ1bmN0aW9uKHdpZHRoLCBoZWlnaHQpIHtcblx0XHRyZXR1cm4gQ2FudmFzUHJvdmlkZXIuZ2V0Q2FudmFzKHdpZHRoLCBoZWlnaHQpO1xuXHR9LFxuXG5cdGFjdGl2YXRlOiBmdW5jdGlvbigpIHtcblx0XHRwYXBlciA9IHRoaXM7XG5cdH0sXG5cblx0Y2xlYXI6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBwcm9qZWN0cyA9IHRoaXMucHJvamVjdHMsXG5cdFx0XHR0b29scyA9IHRoaXMudG9vbHM7XG5cdFx0Zm9yICh2YXIgaSA9IHByb2plY3RzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKVxuXHRcdFx0cHJvamVjdHNbaV0ucmVtb3ZlKCk7XG5cdFx0Zm9yICh2YXIgaSA9IHRvb2xzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKVxuXHRcdFx0dG9vbHNbaV0ucmVtb3ZlKCk7XG5cdH0sXG5cblx0cmVtb3ZlOiBmdW5jdGlvbigpIHtcblx0XHR0aGlzLmNsZWFyKCk7XG5cdFx0ZGVsZXRlIFBhcGVyU2NvcGUuX3Njb3Blc1t0aGlzLl9pZF07XG5cdH0sXG5cblx0c3RhdGljczogbmV3IGZ1bmN0aW9uKCkge1xuXHRcdGZ1bmN0aW9uIGhhbmRsZUF0dHJpYnV0ZShuYW1lKSB7XG5cdFx0XHRuYW1lICs9ICdBdHRyaWJ1dGUnO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKGVsLCBhdHRyKSB7XG5cdFx0XHRcdHJldHVybiBlbFtuYW1lXShhdHRyKSB8fCBlbFtuYW1lXSgnZGF0YS1wYXBlci0nICsgYXR0cik7XG5cdFx0XHR9O1xuXHRcdH1cblxuXHRcdHJldHVybiB7XG5cdFx0XHRfc2NvcGVzOiB7fSxcblx0XHRcdF9pZDogMCxcblxuXHRcdFx0Z2V0OiBmdW5jdGlvbihpZCkge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5fc2NvcGVzW2lkXSB8fCBudWxsO1xuXHRcdFx0fSxcblxuXHRcdFx0Z2V0QXR0cmlidXRlOiBoYW5kbGVBdHRyaWJ1dGUoJ2dldCcpLFxuXHRcdFx0aGFzQXR0cmlidXRlOiBoYW5kbGVBdHRyaWJ1dGUoJ2hhcycpXG5cdFx0fTtcblx0fVxufSk7XG5cbnZhciBQYXBlclNjb3BlSXRlbSA9IEJhc2UuZXh0ZW5kKEVtaXR0ZXIsIHtcblxuXHRpbml0aWFsaXplOiBmdW5jdGlvbihhY3RpdmF0ZSkge1xuXHRcdHRoaXMuX3Njb3BlID0gcGFwZXI7XG5cdFx0dGhpcy5faW5kZXggPSB0aGlzLl9zY29wZVt0aGlzLl9saXN0XS5wdXNoKHRoaXMpIC0gMTtcblx0XHRpZiAoYWN0aXZhdGUgfHwgIXRoaXMuX3Njb3BlW3RoaXMuX3JlZmVyZW5jZV0pXG5cdFx0XHR0aGlzLmFjdGl2YXRlKCk7XG5cdH0sXG5cblx0YWN0aXZhdGU6IGZ1bmN0aW9uKCkge1xuXHRcdGlmICghdGhpcy5fc2NvcGUpXG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0dmFyIHByZXYgPSB0aGlzLl9zY29wZVt0aGlzLl9yZWZlcmVuY2VdO1xuXHRcdGlmIChwcmV2ICYmIHByZXYgIT09IHRoaXMpXG5cdFx0XHRwcmV2LmVtaXQoJ2RlYWN0aXZhdGUnKTtcblx0XHR0aGlzLl9zY29wZVt0aGlzLl9yZWZlcmVuY2VdID0gdGhpcztcblx0XHR0aGlzLmVtaXQoJ2FjdGl2YXRlJywgcHJldik7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH0sXG5cblx0aXNBY3RpdmU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLl9zY29wZVt0aGlzLl9yZWZlcmVuY2VdID09PSB0aGlzO1xuXHR9LFxuXG5cdHJlbW92ZTogZnVuY3Rpb24oKSB7XG5cdFx0aWYgKHRoaXMuX2luZGV4ID09IG51bGwpXG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0QmFzZS5zcGxpY2UodGhpcy5fc2NvcGVbdGhpcy5fbGlzdF0sIG51bGwsIHRoaXMuX2luZGV4LCAxKTtcblx0XHRpZiAodGhpcy5fc2NvcGVbdGhpcy5fcmVmZXJlbmNlXSA9PSB0aGlzKVxuXHRcdFx0dGhpcy5fc2NvcGVbdGhpcy5fcmVmZXJlbmNlXSA9IG51bGw7XG5cdFx0dGhpcy5fc2NvcGUgPSBudWxsO1xuXHRcdHJldHVybiB0cnVlO1xuXHR9LFxuXG5cdGdldFZpZXc6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLl9zY29wZS5nZXRWaWV3KCk7XG5cdH1cbn0pO1xuXG52YXIgRm9ybWF0dGVyID0gQmFzZS5leHRlbmQoe1xuXHRpbml0aWFsaXplOiBmdW5jdGlvbihwcmVjaXNpb24pIHtcblx0XHR0aGlzLnByZWNpc2lvbiA9IEJhc2UucGljayhwcmVjaXNpb24sIDUpO1xuXHRcdHRoaXMubXVsdGlwbGllciA9IE1hdGgucG93KDEwLCB0aGlzLnByZWNpc2lvbik7XG5cdH0sXG5cblx0bnVtYmVyOiBmdW5jdGlvbih2YWwpIHtcblx0XHRyZXR1cm4gdGhpcy5wcmVjaXNpb24gPCAxNlxuXHRcdFx0XHQ/IE1hdGgucm91bmQodmFsICogdGhpcy5tdWx0aXBsaWVyKSAvIHRoaXMubXVsdGlwbGllciA6IHZhbDtcblx0fSxcblxuXHRwYWlyOiBmdW5jdGlvbih2YWwxLCB2YWwyLCBzZXBhcmF0b3IpIHtcblx0XHRyZXR1cm4gdGhpcy5udW1iZXIodmFsMSkgKyAoc2VwYXJhdG9yIHx8ICcsJykgKyB0aGlzLm51bWJlcih2YWwyKTtcblx0fSxcblxuXHRwb2ludDogZnVuY3Rpb24odmFsLCBzZXBhcmF0b3IpIHtcblx0XHRyZXR1cm4gdGhpcy5udW1iZXIodmFsLngpICsgKHNlcGFyYXRvciB8fCAnLCcpICsgdGhpcy5udW1iZXIodmFsLnkpO1xuXHR9LFxuXG5cdHNpemU6IGZ1bmN0aW9uKHZhbCwgc2VwYXJhdG9yKSB7XG5cdFx0cmV0dXJuIHRoaXMubnVtYmVyKHZhbC53aWR0aCkgKyAoc2VwYXJhdG9yIHx8ICcsJylcblx0XHRcdFx0KyB0aGlzLm51bWJlcih2YWwuaGVpZ2h0KTtcblx0fSxcblxuXHRyZWN0YW5nbGU6IGZ1bmN0aW9uKHZhbCwgc2VwYXJhdG9yKSB7XG5cdFx0cmV0dXJuIHRoaXMucG9pbnQodmFsLCBzZXBhcmF0b3IpICsgKHNlcGFyYXRvciB8fCAnLCcpXG5cdFx0XHRcdCsgdGhpcy5zaXplKHZhbCwgc2VwYXJhdG9yKTtcblx0fVxufSk7XG5cbkZvcm1hdHRlci5pbnN0YW5jZSA9IG5ldyBGb3JtYXR0ZXIoKTtcblxudmFyIE51bWVyaWNhbCA9IG5ldyBmdW5jdGlvbigpIHtcblxuXHR2YXIgYWJzY2lzc2FzID0gW1xuXHRcdFsgIDAuNTc3MzUwMjY5MTg5NjI1NzY0NTA5MTQ4OF0sXG5cdFx0WzAsMC43NzQ1OTY2NjkyNDE0ODMzNzcwMzU4NTMxXSxcblx0XHRbICAwLjMzOTk4MTA0MzU4NDg1NjI2NDgwMjY2NTgsMC44NjExMzYzMTE1OTQwNTI1NzUyMjM5NDY1XSxcblx0XHRbMCwwLjUzODQ2OTMxMDEwNTY4MzA5MTAzNjMxNDQsMC45MDYxNzk4NDU5Mzg2NjM5OTI3OTc2MjY5XSxcblx0XHRbICAwLjIzODYxOTE4NjA4MzE5NjkwODYzMDUwMTcsMC42NjEyMDkzODY0NjYyNjQ1MTM2NjEzOTk2LDAuOTMyNDY5NTE0MjAzMTUyMDI3ODEyMzAxNl0sXG5cdFx0WzAsMC40MDU4NDUxNTEzNzczOTcxNjY5MDY2MDY0LDAuNzQxNTMxMTg1NTk5Mzk0NDM5ODYzODY0OCwwLjk0OTEwNzkxMjM0Mjc1ODUyNDUyNjE4OTddLFxuXHRcdFsgIDAuMTgzNDM0NjQyNDk1NjQ5ODA0OTM5NDc2MSwwLjUyNTUzMjQwOTkxNjMyODk4NTgxNzczOTAsMC43OTY2NjY0Nzc0MTM2MjY3Mzk1OTE1NTM5LDAuOTYwMjg5ODU2NDk3NTM2MjMxNjgzNTYwOV0sXG5cdFx0WzAsMC4zMjQyNTM0MjM0MDM4MDg5MjkwMzg1MzgwLDAuNjEzMzcxNDMyNzAwNTkwMzk3MzA4NzAyMCwwLjgzNjAzMTEwNzMyNjYzNTc5NDI5OTQyOTgsMC45NjgxNjAyMzk1MDc2MjYwODk4MzU1NzYyXSxcblx0XHRbICAwLjE0ODg3NDMzODk4MTYzMTIxMDg4NDgyNjAsMC40MzMzOTUzOTQxMjkyNDcxOTA3OTkyNjU5LDAuNjc5NDA5NTY4Mjk5MDI0NDA2MjM0MzI3NCwwLjg2NTA2MzM2NjY4ODk4NDUxMDczMjA5NjcsMC45NzM5MDY1Mjg1MTcxNzE3MjAwNzc5NjQwXSxcblx0XHRbMCwwLjI2OTU0MzE1NTk1MjM0NDk3MjMzMTUzMjAsMC41MTkwOTYxMjkyMDY4MTE4MTU5MjU3MjU3LDAuNzMwMTUyMDA1NTc0MDQ5MzI0MDkzNDE2MywwLjg4NzA2MjU5OTc2ODA5NTI5OTA3NTE1NzgsMC45NzgyMjg2NTgxNDYwNTY5OTI4MDM5MzgwXSxcblx0XHRbICAwLjEyNTIzMzQwODUxMTQ2ODkxNTQ3MjQ0MTQsMC4zNjc4MzE0OTg5OTgxODAxOTM3NTI2OTE1LDAuNTg3MzE3OTU0Mjg2NjE3NDQ3Mjk2NzAyNCwwLjc2OTkwMjY3NDE5NDMwNDY4NzAzNjg5MzgsMC45MDQxMTcyNTYzNzA0NzQ4NTY2Nzg0NjU5LDAuOTgxNTYwNjM0MjQ2NzE5MjUwNjkwNTQ5MV0sXG5cdFx0WzAsMC4yMzA0NTgzMTU5NTUxMzQ3OTQwNjU1MjgxLDAuNDQ4NDkyNzUxMDM2NDQ2ODUyODc3OTEyOSwwLjY0MjM0OTMzOTQ0MDM0MDIyMDY0Mzk4NDYsMC44MDE1NzgwOTA3MzMzMDk5MTI3OTQyMDY1LDAuOTE3NTk4Mzk5MjIyOTc3OTY1MjA2NTQ3OCwwLjk4NDE4MzA1NDcxODU4ODE0OTQ3MjgyOTRdLFxuXHRcdFsgIDAuMTA4MDU0OTQ4NzA3MzQzNjYyMDY2MjQ0NywwLjMxOTExMjM2ODkyNzg4OTc2MDQzNTY3MTgsMC41MTUyNDg2MzYzNTgxNTQwOTE5NjUyOTA3LDAuNjg3MjkyOTA0ODExNjg1NDcwMTQ4MDE5OCwwLjgyNzIwMTMxNTA2OTc2NDk5MzE4OTc5NDcsMC45Mjg0MzQ4ODM2NjM1NzM1MTczMzYzOTExLDAuOTg2MjgzODA4Njk2ODEyMzM4ODQxNTk3M10sXG5cdFx0WzAsMC4yMDExOTQwOTM5OTc0MzQ1MjIzMDA2MjgzLDAuMzk0MTUxMzQ3MDc3NTYzMzY5ODk3MjA3NCwwLjU3MDk3MjE3MjYwODUzODg0NzUzNzIyNjcsMC43MjQ0MTc3MzEzNjAxNzAwNDc0MTYxODYxLDAuODQ4MjA2NTgzNDEwNDI3MjE2MjAwNjQ4MywwLjkzNzI3MzM5MjQwMDcwNTkwNDMwNzc1ODksMC45ODc5OTI1MTgwMjA0ODU0Mjg0ODk1NjU3XSxcblx0XHRbICAwLjA5NTAxMjUwOTgzNzYzNzQ0MDE4NTMxOTMsMC4yODE2MDM1NTA3NzkyNTg5MTMyMzA0NjA1LDAuNDU4MDE2Nzc3NjU3MjI3Mzg2MzQyNDE5NCwwLjYxNzg3NjI0NDQwMjY0Mzc0ODQ0NjY3MTgsMC43NTU0MDQ0MDgzNTUwMDMwMzM4OTUxMDEyLDAuODY1NjMxMjAyMzg3ODMxNzQzODgwNDY3OSwwLjk0NDU3NTAyMzA3MzIzMjU3NjA3Nzk4ODQsMC45ODk0MDA5MzQ5OTE2NDk5MzI1OTYxNTQyXVxuXHRdO1xuXG5cdHZhciB3ZWlnaHRzID0gW1xuXHRcdFsxXSxcblx0XHRbMC44ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg5LDAuNTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1Nl0sXG5cdFx0WzAuNjUyMTQ1MTU0ODYyNTQ2MTQyNjI2OTM2MSwwLjM0Nzg1NDg0NTEzNzQ1Mzg1NzM3MzA2MzldLFxuXHRcdFswLjU2ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODksMC40Nzg2Mjg2NzA0OTkzNjY0NjgwNDEyOTE1LDAuMjM2OTI2ODg1MDU2MTg5MDg3NTE0MjY0MF0sXG5cdFx0WzAuNDY3OTEzOTM0NTcyNjkxMDQ3Mzg5ODcwMywwLjM2MDc2MTU3MzA0ODEzODYwNzU2OTgzMzUsMC4xNzEzMjQ0OTIzNzkxNzAzNDUwNDAyOTYxXSxcblx0XHRbMC40MTc5NTkxODM2NzM0NjkzODc3NTUxMDIwLDAuMzgxODMwMDUwNTA1MTE4OTQ0OTUwMzY5OCwwLjI3OTcwNTM5MTQ4OTI3NjY2NzkwMTQ2NzgsMC4xMjk0ODQ5NjYxNjg4Njk2OTMyNzA2MTE0XSxcblx0XHRbMC4zNjI2ODM3ODMzNzgzNjE5ODI5NjUxNTA0LDAuMzEzNzA2NjQ1ODc3ODg3Mjg3MzM3OTYyMiwwLjIyMjM4MTAzNDQ1MzM3NDQ3MDU0NDM1NjAsMC4xMDEyMjg1MzYyOTAzNzYyNTkxNTI1MzE0XSxcblx0XHRbMC4zMzAyMzkzNTUwMDEyNTk3NjMxNjQ1MjUxLDAuMzEyMzQ3MDc3MDQwMDAyODQwMDY4NjMwNCwwLjI2MDYxMDY5NjQwMjkzNTQ2MjMxODc0MjksMC4xODA2NDgxNjA2OTQ4NTc0MDQwNTg0NzIwLDAuMDgxMjc0Mzg4MzYxNTc0NDExOTcxODkyMl0sXG5cdFx0WzAuMjk1NTI0MjI0NzE0NzUyODcwMTczODkzMCwwLjI2OTI2NjcxOTMwOTk5NjM1NTA5MTIyNjksMC4yMTkwODYzNjI1MTU5ODIwNDM5OTU1MzQ5LDAuMTQ5NDUxMzQ5MTUwNTgwNTkzMTQ1Nzc2MywwLjA2NjY3MTM0NDMwODY4ODEzNzU5MzU2ODhdLFxuXHRcdFswLjI3MjkyNTA4Njc3NzkwMDYzMDcxNDQ4MzUsMC4yNjI4MDQ1NDQ1MTAyNDY2NjIxODA2ODg5LDAuMjMzMTkzNzY0NTkxOTkwNDc5OTE4NTIzNywwLjE4NjI5MDIxMDkyNzczNDI1MTQyNjA5NzYsMC4xMjU1ODAzNjk0NjQ5MDQ2MjQ2MzQ2OTQzLDAuMDU1NjY4NTY3MTE2MTczNjY2NDgyNzUzN10sXG5cdFx0WzAuMjQ5MTQ3MDQ1ODEzNDAyNzg1MDAwNTYyNCwwLjIzMzQ5MjUzNjUzODM1NDgwODc2MDg0OTksMC4yMDMxNjc0MjY3MjMwNjU5MjE3NDkwNjQ1LDAuMTYwMDc4MzI4NTQzMzQ2MjI2MzM0NjUyNSwwLjEwNjkzOTMyNTk5NTMxODQzMDk2MDI1NDcsMC4wNDcxNzUzMzYzODY1MTE4MjcxOTQ2MTYwXSxcblx0XHRbMC4yMzI1NTE1NTMyMzA4NzM5MTAxOTQ1ODk1LDAuMjI2MjgzMTgwMjYyODk3MjM4NDEyMDkwMiwwLjIwNzgxNjA0NzUzNjg4ODUwMjMxMjUyMzIsMC4xNzgxNDU5ODA3NjE5NDU3MzgyODAwNDY3LDAuMTM4ODczNTEwMjE5Nzg3MjM4NDYzNjAxOCwwLjA5MjEyMTQ5OTgzNzcyODQ0NzkxNDQyMTgsMC4wNDA0ODQwMDQ3NjUzMTU4Nzk1MjAwMjE2XSxcblx0XHRbMC4yMTUyNjM4NTM0NjMxNTc3OTAxOTU4NzY0LDAuMjA1MTk4NDYzNzIxMjk1NjAzOTY1OTI0MSwwLjE4NTUzODM5NzQ3NzkzNzgxMzc0MTcxNjYsMC4xNTcyMDMxNjcxNTgxOTM1MzQ1Njk2MDE5LDAuMTIxNTE4NTcwNjg3OTAzMTg0Njg5NDE0OCwwLjA4MDE1ODA4NzE1OTc2MDIwOTgwNTYzMzMsMC4wMzUxMTk0NjAzMzE3NTE4NjMwMzE4MzI5XSxcblx0XHRbMC4yMDI1NzgyNDE5MjU1NjEyNzI4ODA2MjAyLDAuMTk4NDMxNDg1MzI3MTExNTc2NDU2MTE4MywwLjE4NjE2MTAwMDAxNTU2MjIxMTAyNjgwMDYsMC4xNjYyNjkyMDU4MTY5OTM5MzM1NTMyMDA5LDAuMTM5NTcwNjc3OTI2MTU0MzE0NDQ3ODA0OCwwLjEwNzE1OTIyMDQ2NzE3MTkzNTAxMTg2OTUsMC4wNzAzNjYwNDc0ODgxMDgxMjQ3MDkyNjc0LDAuMDMwNzUzMjQxOTk2MTE3MjY4MzU0NjI4NF0sXG5cdFx0WzAuMTg5NDUwNjEwNDU1MDY4NDk2Mjg1Mzk2NywwLjE4MjYwMzQxNTA0NDkyMzU4ODg2Njc2MzcsMC4xNjkxNTY1MTkzOTUwMDI1MzgxODkzMTIxLDAuMTQ5NTk1OTg4ODE2NTc2NzMyMDgxNTAxNywwLjEyNDYyODk3MTI1NTUzMzg3MjA1MjQ3NjMsMC4wOTUxNTg1MTE2ODI0OTI3ODQ4MDk5MjUxLDAuMDYyMjUzNTIzOTM4NjQ3ODkyODYyODQzOCwwLjAyNzE1MjQ1OTQxMTc1NDA5NDg1MTc4MDZdXG5cdF07XG5cblx0dmFyIGFicyA9IE1hdGguYWJzLFxuXHRcdHNxcnQgPSBNYXRoLnNxcnQsXG5cdFx0cG93ID0gTWF0aC5wb3csXG5cdFx0bG9nMiA9IE1hdGgubG9nMiB8fCBmdW5jdGlvbih4KSB7XG5cdFx0XHRyZXR1cm4gTWF0aC5sb2coeCkgKiBNYXRoLkxPRzJFO1xuXHRcdH0sXG5cdFx0RVBTSUxPTiA9IDFlLTEyLFxuXHRcdE1BQ0hJTkVfRVBTSUxPTiA9IDEuMTJlLTE2O1xuXG5cdGZ1bmN0aW9uIGNsYW1wKHZhbHVlLCBtaW4sIG1heCkge1xuXHRcdHJldHVybiB2YWx1ZSA8IG1pbiA/IG1pbiA6IHZhbHVlID4gbWF4ID8gbWF4IDogdmFsdWU7XG5cdH1cblxuXHRmdW5jdGlvbiBnZXREaXNjcmltaW5hbnQoYSwgYiwgYykge1xuXHRcdGZ1bmN0aW9uIHNwbGl0KHYpIHtcblx0XHRcdHZhciB4ID0gdiAqIDEzNDIxNzcyOSxcblx0XHRcdFx0eSA9IHYgLSB4LFxuXHRcdFx0XHRoaSA9IHkgKyB4LFxuXHRcdFx0XHRsbyA9IHYgLSBoaTtcblx0XHRcdHJldHVybiBbaGksIGxvXTtcblx0XHR9XG5cblx0XHR2YXIgRCA9IGIgKiBiIC0gYSAqIGMsXG5cdFx0XHRFID0gYiAqIGIgKyBhICogYztcblx0XHRpZiAoYWJzKEQpICogMyA8IEUpIHtcblx0XHRcdHZhciBhZCA9IHNwbGl0KGEpLFxuXHRcdFx0XHRiZCA9IHNwbGl0KGIpLFxuXHRcdFx0XHRjZCA9IHNwbGl0KGMpLFxuXHRcdFx0XHRwID0gYiAqIGIsXG5cdFx0XHRcdGRwID0gKGJkWzBdICogYmRbMF0gLSBwICsgMiAqIGJkWzBdICogYmRbMV0pICsgYmRbMV0gKiBiZFsxXSxcblx0XHRcdFx0cSA9IGEgKiBjLFxuXHRcdFx0XHRkcSA9IChhZFswXSAqIGNkWzBdIC0gcSArIGFkWzBdICogY2RbMV0gKyBhZFsxXSAqIGNkWzBdKVxuXHRcdFx0XHRcdFx0KyBhZFsxXSAqIGNkWzFdO1xuXHRcdFx0RCA9IChwIC0gcSkgKyAoZHAgLSBkcSk7XG5cdFx0fVxuXHRcdHJldHVybiBEO1xuXHR9XG5cblx0ZnVuY3Rpb24gZ2V0Tm9ybWFsaXphdGlvbkZhY3RvcigpIHtcblx0XHR2YXIgbm9ybSA9IE1hdGgubWF4LmFwcGx5KE1hdGgsIGFyZ3VtZW50cyk7XG5cdFx0cmV0dXJuIG5vcm0gJiYgKG5vcm0gPCAxZS04IHx8IG5vcm0gPiAxZTgpXG5cdFx0XHRcdD8gcG93KDIsIC1NYXRoLnJvdW5kKGxvZzIobm9ybSkpKVxuXHRcdFx0XHQ6IDA7XG5cdH1cblxuXHRyZXR1cm4ge1xuXHRcdEVQU0lMT046IEVQU0lMT04sXG5cdFx0TUFDSElORV9FUFNJTE9OOiBNQUNISU5FX0VQU0lMT04sXG5cdFx0Q1VSVkVUSU1FX0VQU0lMT046IDFlLTgsXG5cdFx0R0VPTUVUUklDX0VQU0lMT046IDFlLTcsXG5cdFx0VFJJR09OT01FVFJJQ19FUFNJTE9OOiAxZS04LFxuXHRcdEtBUFBBOiA0ICogKHNxcnQoMikgLSAxKSAvIDMsXG5cblx0XHRpc1plcm86IGZ1bmN0aW9uKHZhbCkge1xuXHRcdFx0cmV0dXJuIHZhbCA+PSAtRVBTSUxPTiAmJiB2YWwgPD0gRVBTSUxPTjtcblx0XHR9LFxuXG5cdFx0Y2xhbXA6IGNsYW1wLFxuXG5cdFx0aW50ZWdyYXRlOiBmdW5jdGlvbihmLCBhLCBiLCBuKSB7XG5cdFx0XHR2YXIgeCA9IGFic2Npc3Nhc1tuIC0gMl0sXG5cdFx0XHRcdHcgPSB3ZWlnaHRzW24gLSAyXSxcblx0XHRcdFx0QSA9IChiIC0gYSkgKiAwLjUsXG5cdFx0XHRcdEIgPSBBICsgYSxcblx0XHRcdFx0aSA9IDAsXG5cdFx0XHRcdG0gPSAobiArIDEpID4+IDEsXG5cdFx0XHRcdHN1bSA9IG4gJiAxID8gd1tpKytdICogZihCKSA6IDA7XG5cdFx0XHR3aGlsZSAoaSA8IG0pIHtcblx0XHRcdFx0dmFyIEF4ID0gQSAqIHhbaV07XG5cdFx0XHRcdHN1bSArPSB3W2krK10gKiAoZihCICsgQXgpICsgZihCIC0gQXgpKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBBICogc3VtO1xuXHRcdH0sXG5cblx0XHRmaW5kUm9vdDogZnVuY3Rpb24oZiwgZGYsIHgsIGEsIGIsIG4sIHRvbGVyYW5jZSkge1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBuOyBpKyspIHtcblx0XHRcdFx0dmFyIGZ4ID0gZih4KSxcblx0XHRcdFx0XHRkeCA9IGZ4IC8gZGYoeCksXG5cdFx0XHRcdFx0bnggPSB4IC0gZHg7XG5cdFx0XHRcdGlmIChhYnMoZHgpIDwgdG9sZXJhbmNlKSB7XG5cdFx0XHRcdFx0eCA9IG54O1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChmeCA+IDApIHtcblx0XHRcdFx0XHRiID0geDtcblx0XHRcdFx0XHR4ID0gbnggPD0gYSA/IChhICsgYikgKiAwLjUgOiBueDtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRhID0geDtcblx0XHRcdFx0XHR4ID0gbnggPj0gYiA/IChhICsgYikgKiAwLjUgOiBueDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGNsYW1wKHgsIGEsIGIpO1xuXHRcdH0sXG5cblx0XHRzb2x2ZVF1YWRyYXRpYzogZnVuY3Rpb24oYSwgYiwgYywgcm9vdHMsIG1pbiwgbWF4KSB7XG5cdFx0XHR2YXIgeDEsIHgyID0gSW5maW5pdHk7XG5cdFx0XHRpZiAoYWJzKGEpIDwgRVBTSUxPTikge1xuXHRcdFx0XHRpZiAoYWJzKGIpIDwgRVBTSUxPTilcblx0XHRcdFx0XHRyZXR1cm4gYWJzKGMpIDwgRVBTSUxPTiA/IC0xIDogMDtcblx0XHRcdFx0eDEgPSAtYyAvIGI7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRiICo9IC0wLjU7XG5cdFx0XHRcdHZhciBEID0gZ2V0RGlzY3JpbWluYW50KGEsIGIsIGMpO1xuXHRcdFx0XHRpZiAoRCAmJiBhYnMoRCkgPCBNQUNISU5FX0VQU0lMT04pIHtcblx0XHRcdFx0XHR2YXIgZiA9IGdldE5vcm1hbGl6YXRpb25GYWN0b3IoYWJzKGEpLCBhYnMoYiksIGFicyhjKSk7XG5cdFx0XHRcdFx0aWYgKGYpIHtcblx0XHRcdFx0XHRcdGEgKj0gZjtcblx0XHRcdFx0XHRcdGIgKj0gZjtcblx0XHRcdFx0XHRcdGMgKj0gZjtcblx0XHRcdFx0XHRcdEQgPSBnZXREaXNjcmltaW5hbnQoYSwgYiwgYyk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChEID49IC1NQUNISU5FX0VQU0lMT04pIHtcblx0XHRcdFx0XHR2YXIgUSA9IEQgPCAwID8gMCA6IHNxcnQoRCksXG5cdFx0XHRcdFx0XHRSID0gYiArIChiIDwgMCA/IC1RIDogUSk7XG5cdFx0XHRcdFx0aWYgKFIgPT09IDApIHtcblx0XHRcdFx0XHRcdHgxID0gYyAvIGE7XG5cdFx0XHRcdFx0XHR4MiA9IC14MTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0eDEgPSBSIC8gYTtcblx0XHRcdFx0XHRcdHgyID0gYyAvIFI7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHR2YXIgY291bnQgPSAwLFxuXHRcdFx0XHRib3VuZGxlc3MgPSBtaW4gPT0gbnVsbCxcblx0XHRcdFx0bWluQiA9IG1pbiAtIEVQU0lMT04sXG5cdFx0XHRcdG1heEIgPSBtYXggKyBFUFNJTE9OO1xuXHRcdFx0aWYgKGlzRmluaXRlKHgxKSAmJiAoYm91bmRsZXNzIHx8IHgxID4gbWluQiAmJiB4MSA8IG1heEIpKVxuXHRcdFx0XHRyb290c1tjb3VudCsrXSA9IGJvdW5kbGVzcyA/IHgxIDogY2xhbXAoeDEsIG1pbiwgbWF4KTtcblx0XHRcdGlmICh4MiAhPT0geDFcblx0XHRcdFx0XHQmJiBpc0Zpbml0ZSh4MikgJiYgKGJvdW5kbGVzcyB8fCB4MiA+IG1pbkIgJiYgeDIgPCBtYXhCKSlcblx0XHRcdFx0cm9vdHNbY291bnQrK10gPSBib3VuZGxlc3MgPyB4MiA6IGNsYW1wKHgyLCBtaW4sIG1heCk7XG5cdFx0XHRyZXR1cm4gY291bnQ7XG5cdFx0fSxcblxuXHRcdHNvbHZlQ3ViaWM6IGZ1bmN0aW9uKGEsIGIsIGMsIGQsIHJvb3RzLCBtaW4sIG1heCkge1xuXHRcdFx0dmFyIGYgPSBnZXROb3JtYWxpemF0aW9uRmFjdG9yKGFicyhhKSwgYWJzKGIpLCBhYnMoYyksIGFicyhkKSksXG5cdFx0XHRcdHgsIGIxLCBjMiwgcWQsIHE7XG5cdFx0XHRpZiAoZikge1xuXHRcdFx0XHRhICo9IGY7XG5cdFx0XHRcdGIgKj0gZjtcblx0XHRcdFx0YyAqPSBmO1xuXHRcdFx0XHRkICo9IGY7XG5cdFx0XHR9XG5cblx0XHRcdGZ1bmN0aW9uIGV2YWx1YXRlKHgwKSB7XG5cdFx0XHRcdHggPSB4MDtcblx0XHRcdFx0dmFyIHRtcCA9IGEgKiB4O1xuXHRcdFx0XHRiMSA9IHRtcCArIGI7XG5cdFx0XHRcdGMyID0gYjEgKiB4ICsgYztcblx0XHRcdFx0cWQgPSAodG1wICsgYjEpICogeCArIGMyO1xuXHRcdFx0XHRxID0gYzIgKiB4ICsgZDtcblx0XHRcdH1cblxuXHRcdFx0aWYgKGFicyhhKSA8IEVQU0lMT04pIHtcblx0XHRcdFx0YSA9IGI7XG5cdFx0XHRcdGIxID0gYztcblx0XHRcdFx0YzIgPSBkO1xuXHRcdFx0XHR4ID0gSW5maW5pdHk7XG5cdFx0XHR9IGVsc2UgaWYgKGFicyhkKSA8IEVQU0lMT04pIHtcblx0XHRcdFx0YjEgPSBiO1xuXHRcdFx0XHRjMiA9IGM7XG5cdFx0XHRcdHggPSAwO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZXZhbHVhdGUoLShiIC8gYSkgLyAzKTtcblx0XHRcdFx0dmFyIHQgPSBxIC8gYSxcblx0XHRcdFx0XHRyID0gcG93KGFicyh0KSwgMS8zKSxcblx0XHRcdFx0XHRzID0gdCA8IDAgPyAtMSA6IDEsXG5cdFx0XHRcdFx0dGQgPSAtcWQgLyBhLFxuXHRcdFx0XHRcdHJkID0gdGQgPiAwID8gMS4zMjQ3MTc5NTcyNDQ3NDYgKiBNYXRoLm1heChyLCBzcXJ0KHRkKSkgOiByLFxuXHRcdFx0XHRcdHgwID0geCAtIHMgKiByZDtcblx0XHRcdFx0aWYgKHgwICE9PSB4KSB7XG5cdFx0XHRcdFx0ZG8ge1xuXHRcdFx0XHRcdFx0ZXZhbHVhdGUoeDApO1xuXHRcdFx0XHRcdFx0eDAgPSBxZCA9PT0gMCA/IHggOiB4IC0gcSAvIHFkIC8gKDEgKyBNQUNISU5FX0VQU0lMT04pO1xuXHRcdFx0XHRcdH0gd2hpbGUgKHMgKiB4MCA+IHMgKiB4KTtcblx0XHRcdFx0XHRpZiAoYWJzKGEpICogeCAqIHggPiBhYnMoZCAvIHgpKSB7XG5cdFx0XHRcdFx0XHRjMiA9IC1kIC8geDtcblx0XHRcdFx0XHRcdGIxID0gKGMyIC0gYykgLyB4O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0dmFyIGNvdW50ID0gTnVtZXJpY2FsLnNvbHZlUXVhZHJhdGljKGEsIGIxLCBjMiwgcm9vdHMsIG1pbiwgbWF4KSxcblx0XHRcdFx0Ym91bmRsZXNzID0gbWluID09IG51bGw7XG5cdFx0XHRpZiAoaXNGaW5pdGUoeCkgJiYgKGNvdW50ID09PSAwXG5cdFx0XHRcdFx0fHwgY291bnQgPiAwICYmIHggIT09IHJvb3RzWzBdICYmIHggIT09IHJvb3RzWzFdKVxuXHRcdFx0XHRcdCYmIChib3VuZGxlc3MgfHwgeCA+IG1pbiAtIEVQU0lMT04gJiYgeCA8IG1heCArIEVQU0lMT04pKVxuXHRcdFx0XHRyb290c1tjb3VudCsrXSA9IGJvdW5kbGVzcyA/IHggOiBjbGFtcCh4LCBtaW4sIG1heCk7XG5cdFx0XHRyZXR1cm4gY291bnQ7XG5cdFx0fVxuXHR9O1xufTtcblxudmFyIFVJRCA9IHtcblx0X2lkOiAxLFxuXHRfcG9vbHM6IHt9LFxuXG5cdGdldDogZnVuY3Rpb24obmFtZSkge1xuXHRcdGlmIChuYW1lKSB7XG5cdFx0XHR2YXIgcG9vbCA9IHRoaXMuX3Bvb2xzW25hbWVdO1xuXHRcdFx0aWYgKCFwb29sKVxuXHRcdFx0XHRwb29sID0gdGhpcy5fcG9vbHNbbmFtZV0gPSB7IF9pZDogMSB9O1xuXHRcdFx0cmV0dXJuIHBvb2wuX2lkKys7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJldHVybiB0aGlzLl9pZCsrO1xuXHRcdH1cblx0fVxufTtcblxudmFyIFBvaW50ID0gQmFzZS5leHRlbmQoe1xuXHRfY2xhc3M6ICdQb2ludCcsXG5cdF9yZWFkSW5kZXg6IHRydWUsXG5cblx0aW5pdGlhbGl6ZTogZnVuY3Rpb24gUG9pbnQoYXJnMCwgYXJnMSkge1xuXHRcdHZhciB0eXBlID0gdHlwZW9mIGFyZzAsXG5cdFx0XHRyZWFkaW5nID0gdGhpcy5fX3JlYWQsXG5cdFx0XHRyZWFkID0gMDtcblx0XHRpZiAodHlwZSA9PT0gJ251bWJlcicpIHtcblx0XHRcdHZhciBoYXNZID0gdHlwZW9mIGFyZzEgPT09ICdudW1iZXInO1xuXHRcdFx0dGhpcy5fc2V0KGFyZzAsIGhhc1kgPyBhcmcxIDogYXJnMCk7XG5cdFx0XHRpZiAocmVhZGluZylcblx0XHRcdFx0cmVhZCA9IGhhc1kgPyAyIDogMTtcblx0XHR9IGVsc2UgaWYgKHR5cGUgPT09ICd1bmRlZmluZWQnIHx8IGFyZzAgPT09IG51bGwpIHtcblx0XHRcdHRoaXMuX3NldCgwLCAwKTtcblx0XHRcdGlmIChyZWFkaW5nKVxuXHRcdFx0XHRyZWFkID0gYXJnMCA9PT0gbnVsbCA/IDEgOiAwO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR2YXIgb2JqID0gdHlwZSA9PT0gJ3N0cmluZycgPyBhcmcwLnNwbGl0KC9bXFxzLF0rLykgfHwgW10gOiBhcmcwO1xuXHRcdFx0cmVhZCA9IDE7XG5cdFx0XHRpZiAoQXJyYXkuaXNBcnJheShvYmopKSB7XG5cdFx0XHRcdHRoaXMuX3NldCgrb2JqWzBdLCArKG9iai5sZW5ndGggPiAxID8gb2JqWzFdIDogb2JqWzBdKSk7XG5cdFx0XHR9IGVsc2UgaWYgKCd4JyBpbiBvYmopIHtcblx0XHRcdFx0dGhpcy5fc2V0KG9iai54IHx8IDAsIG9iai55IHx8IDApO1xuXHRcdFx0fSBlbHNlIGlmICgnd2lkdGgnIGluIG9iaikge1xuXHRcdFx0XHR0aGlzLl9zZXQob2JqLndpZHRoIHx8IDAsIG9iai5oZWlnaHQgfHwgMCk7XG5cdFx0XHR9IGVsc2UgaWYgKCdhbmdsZScgaW4gb2JqKSB7XG5cdFx0XHRcdHRoaXMuX3NldChvYmoubGVuZ3RoIHx8IDAsIDApO1xuXHRcdFx0XHR0aGlzLnNldEFuZ2xlKG9iai5hbmdsZSB8fCAwKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRoaXMuX3NldCgwLCAwKTtcblx0XHRcdFx0cmVhZCA9IDA7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGlmIChyZWFkaW5nKVxuXHRcdFx0dGhpcy5fX3JlYWQgPSByZWFkO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHNldDogJyNpbml0aWFsaXplJyxcblxuXHRfc2V0OiBmdW5jdGlvbih4LCB5KSB7XG5cdFx0dGhpcy54ID0geDtcblx0XHR0aGlzLnkgPSB5O1xuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdGVxdWFsczogZnVuY3Rpb24ocG9pbnQpIHtcblx0XHRyZXR1cm4gdGhpcyA9PT0gcG9pbnQgfHwgcG9pbnRcblx0XHRcdFx0JiYgKHRoaXMueCA9PT0gcG9pbnQueCAmJiB0aGlzLnkgPT09IHBvaW50Lnlcblx0XHRcdFx0XHR8fCBBcnJheS5pc0FycmF5KHBvaW50KVxuXHRcdFx0XHRcdFx0JiYgdGhpcy54ID09PSBwb2ludFswXSAmJiB0aGlzLnkgPT09IHBvaW50WzFdKVxuXHRcdFx0XHR8fCBmYWxzZTtcblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIG5ldyBQb2ludCh0aGlzLngsIHRoaXMueSk7XG5cdH0sXG5cblx0dG9TdHJpbmc6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBmID0gRm9ybWF0dGVyLmluc3RhbmNlO1xuXHRcdHJldHVybiAneyB4OiAnICsgZi5udW1iZXIodGhpcy54KSArICcsIHk6ICcgKyBmLm51bWJlcih0aGlzLnkpICsgJyB9Jztcblx0fSxcblxuXHRfc2VyaWFsaXplOiBmdW5jdGlvbihvcHRpb25zKSB7XG5cdFx0dmFyIGYgPSBvcHRpb25zLmZvcm1hdHRlcjtcblx0XHRyZXR1cm4gW2YubnVtYmVyKHRoaXMueCksIGYubnVtYmVyKHRoaXMueSldO1xuXHR9LFxuXG5cdGdldExlbmd0aDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIE1hdGguc3FydCh0aGlzLnggKiB0aGlzLnggKyB0aGlzLnkgKiB0aGlzLnkpO1xuXHR9LFxuXG5cdHNldExlbmd0aDogZnVuY3Rpb24obGVuZ3RoKSB7XG5cdFx0aWYgKHRoaXMuaXNaZXJvKCkpIHtcblx0XHRcdHZhciBhbmdsZSA9IHRoaXMuX2FuZ2xlIHx8IDA7XG5cdFx0XHR0aGlzLl9zZXQoXG5cdFx0XHRcdE1hdGguY29zKGFuZ2xlKSAqIGxlbmd0aCxcblx0XHRcdFx0TWF0aC5zaW4oYW5nbGUpICogbGVuZ3RoXG5cdFx0XHQpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR2YXIgc2NhbGUgPSBsZW5ndGggLyB0aGlzLmdldExlbmd0aCgpO1xuXHRcdFx0aWYgKE51bWVyaWNhbC5pc1plcm8oc2NhbGUpKVxuXHRcdFx0XHR0aGlzLmdldEFuZ2xlKCk7XG5cdFx0XHR0aGlzLl9zZXQoXG5cdFx0XHRcdHRoaXMueCAqIHNjYWxlLFxuXHRcdFx0XHR0aGlzLnkgKiBzY2FsZVxuXHRcdFx0KTtcblx0XHR9XG5cdH0sXG5cdGdldEFuZ2xlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5nZXRBbmdsZUluUmFkaWFucy5hcHBseSh0aGlzLCBhcmd1bWVudHMpICogMTgwIC8gTWF0aC5QSTtcblx0fSxcblxuXHRzZXRBbmdsZTogZnVuY3Rpb24oYW5nbGUpIHtcblx0XHR0aGlzLnNldEFuZ2xlSW5SYWRpYW5zLmNhbGwodGhpcywgYW5nbGUgKiBNYXRoLlBJIC8gMTgwKTtcblx0fSxcblxuXHRnZXRBbmdsZUluRGVncmVlczogJyNnZXRBbmdsZScsXG5cdHNldEFuZ2xlSW5EZWdyZWVzOiAnI3NldEFuZ2xlJyxcblxuXHRnZXRBbmdsZUluUmFkaWFuczogZnVuY3Rpb24oKSB7XG5cdFx0aWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5pc1plcm8oKVxuXHRcdFx0XHRcdD8gdGhpcy5fYW5nbGUgfHwgMFxuXHRcdFx0XHRcdDogdGhpcy5fYW5nbGUgPSBNYXRoLmF0YW4yKHRoaXMueSwgdGhpcy54KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dmFyIHBvaW50ID0gUG9pbnQucmVhZChhcmd1bWVudHMpLFxuXHRcdFx0XHRkaXYgPSB0aGlzLmdldExlbmd0aCgpICogcG9pbnQuZ2V0TGVuZ3RoKCk7XG5cdFx0XHRpZiAoTnVtZXJpY2FsLmlzWmVybyhkaXYpKSB7XG5cdFx0XHRcdHJldHVybiBOYU47XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR2YXIgYSA9IHRoaXMuZG90KHBvaW50KSAvIGRpdjtcblx0XHRcdFx0cmV0dXJuIE1hdGguYWNvcyhhIDwgLTEgPyAtMSA6IGEgPiAxID8gMSA6IGEpO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHRzZXRBbmdsZUluUmFkaWFuczogZnVuY3Rpb24oYW5nbGUpIHtcblx0XHR0aGlzLl9hbmdsZSA9IGFuZ2xlO1xuXHRcdGlmICghdGhpcy5pc1plcm8oKSkge1xuXHRcdFx0dmFyIGxlbmd0aCA9IHRoaXMuZ2V0TGVuZ3RoKCk7XG5cdFx0XHR0aGlzLl9zZXQoXG5cdFx0XHRcdE1hdGguY29zKGFuZ2xlKSAqIGxlbmd0aCxcblx0XHRcdFx0TWF0aC5zaW4oYW5nbGUpICogbGVuZ3RoXG5cdFx0XHQpO1xuXHRcdH1cblx0fSxcblxuXHRnZXRRdWFkcmFudDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMueCA+PSAwID8gdGhpcy55ID49IDAgPyAxIDogNCA6IHRoaXMueSA+PSAwID8gMiA6IDM7XG5cdH1cbn0sIHtcblx0YmVhbnM6IGZhbHNlLFxuXG5cdGdldERpcmVjdGVkQW5nbGU6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBwb2ludCA9IFBvaW50LnJlYWQoYXJndW1lbnRzKTtcblx0XHRyZXR1cm4gTWF0aC5hdGFuMih0aGlzLmNyb3NzKHBvaW50KSwgdGhpcy5kb3QocG9pbnQpKSAqIDE4MCAvIE1hdGguUEk7XG5cdH0sXG5cblx0Z2V0RGlzdGFuY2U6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBwb2ludCA9IFBvaW50LnJlYWQoYXJndW1lbnRzKSxcblx0XHRcdHggPSBwb2ludC54IC0gdGhpcy54LFxuXHRcdFx0eSA9IHBvaW50LnkgLSB0aGlzLnksXG5cdFx0XHRkID0geCAqIHggKyB5ICogeSxcblx0XHRcdHNxdWFyZWQgPSBCYXNlLnJlYWQoYXJndW1lbnRzKTtcblx0XHRyZXR1cm4gc3F1YXJlZCA/IGQgOiBNYXRoLnNxcnQoZCk7XG5cdH0sXG5cblx0bm9ybWFsaXplOiBmdW5jdGlvbihsZW5ndGgpIHtcblx0XHRpZiAobGVuZ3RoID09PSB1bmRlZmluZWQpXG5cdFx0XHRsZW5ndGggPSAxO1xuXHRcdHZhciBjdXJyZW50ID0gdGhpcy5nZXRMZW5ndGgoKSxcblx0XHRcdHNjYWxlID0gY3VycmVudCAhPT0gMCA/IGxlbmd0aCAvIGN1cnJlbnQgOiAwLFxuXHRcdFx0cG9pbnQgPSBuZXcgUG9pbnQodGhpcy54ICogc2NhbGUsIHRoaXMueSAqIHNjYWxlKTtcblx0XHRpZiAoc2NhbGUgPj0gMClcblx0XHRcdHBvaW50Ll9hbmdsZSA9IHRoaXMuX2FuZ2xlO1xuXHRcdHJldHVybiBwb2ludDtcblx0fSxcblxuXHRyb3RhdGU6IGZ1bmN0aW9uKGFuZ2xlLCBjZW50ZXIpIHtcblx0XHRpZiAoYW5nbGUgPT09IDApXG5cdFx0XHRyZXR1cm4gdGhpcy5jbG9uZSgpO1xuXHRcdGFuZ2xlID0gYW5nbGUgKiBNYXRoLlBJIC8gMTgwO1xuXHRcdHZhciBwb2ludCA9IGNlbnRlciA/IHRoaXMuc3VidHJhY3QoY2VudGVyKSA6IHRoaXMsXG5cdFx0XHRzaW4gPSBNYXRoLnNpbihhbmdsZSksXG5cdFx0XHRjb3MgPSBNYXRoLmNvcyhhbmdsZSk7XG5cdFx0cG9pbnQgPSBuZXcgUG9pbnQoXG5cdFx0XHRwb2ludC54ICogY29zIC0gcG9pbnQueSAqIHNpbixcblx0XHRcdHBvaW50LnggKiBzaW4gKyBwb2ludC55ICogY29zXG5cdFx0KTtcblx0XHRyZXR1cm4gY2VudGVyID8gcG9pbnQuYWRkKGNlbnRlcikgOiBwb2ludDtcblx0fSxcblxuXHR0cmFuc2Zvcm06IGZ1bmN0aW9uKG1hdHJpeCkge1xuXHRcdHJldHVybiBtYXRyaXggPyBtYXRyaXguX3RyYW5zZm9ybVBvaW50KHRoaXMpIDogdGhpcztcblx0fSxcblxuXHRhZGQ6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBwb2ludCA9IFBvaW50LnJlYWQoYXJndW1lbnRzKTtcblx0XHRyZXR1cm4gbmV3IFBvaW50KHRoaXMueCArIHBvaW50LngsIHRoaXMueSArIHBvaW50LnkpO1xuXHR9LFxuXG5cdHN1YnRyYWN0OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgcG9pbnQgPSBQb2ludC5yZWFkKGFyZ3VtZW50cyk7XG5cdFx0cmV0dXJuIG5ldyBQb2ludCh0aGlzLnggLSBwb2ludC54LCB0aGlzLnkgLSBwb2ludC55KTtcblx0fSxcblxuXHRtdWx0aXBseTogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIHBvaW50ID0gUG9pbnQucmVhZChhcmd1bWVudHMpO1xuXHRcdHJldHVybiBuZXcgUG9pbnQodGhpcy54ICogcG9pbnQueCwgdGhpcy55ICogcG9pbnQueSk7XG5cdH0sXG5cblx0ZGl2aWRlOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgcG9pbnQgPSBQb2ludC5yZWFkKGFyZ3VtZW50cyk7XG5cdFx0cmV0dXJuIG5ldyBQb2ludCh0aGlzLnggLyBwb2ludC54LCB0aGlzLnkgLyBwb2ludC55KTtcblx0fSxcblxuXHRtb2R1bG86IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBwb2ludCA9IFBvaW50LnJlYWQoYXJndW1lbnRzKTtcblx0XHRyZXR1cm4gbmV3IFBvaW50KHRoaXMueCAlIHBvaW50LngsIHRoaXMueSAlIHBvaW50LnkpO1xuXHR9LFxuXG5cdG5lZ2F0ZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIG5ldyBQb2ludCgtdGhpcy54LCAtdGhpcy55KTtcblx0fSxcblxuXHRpc0luc2lkZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIFJlY3RhbmdsZS5yZWFkKGFyZ3VtZW50cykuY29udGFpbnModGhpcyk7XG5cdH0sXG5cblx0aXNDbG9zZTogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIHBvaW50ID0gUG9pbnQucmVhZChhcmd1bWVudHMpLFxuXHRcdFx0dG9sZXJhbmNlID0gQmFzZS5yZWFkKGFyZ3VtZW50cyk7XG5cdFx0cmV0dXJuIHRoaXMuZ2V0RGlzdGFuY2UocG9pbnQpIDw9IHRvbGVyYW5jZTtcblx0fSxcblxuXHRpc0NvbGxpbmVhcjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIHBvaW50ID0gUG9pbnQucmVhZChhcmd1bWVudHMpO1xuXHRcdHJldHVybiBQb2ludC5pc0NvbGxpbmVhcih0aGlzLngsIHRoaXMueSwgcG9pbnQueCwgcG9pbnQueSk7XG5cdH0sXG5cblx0aXNDb2xpbmVhcjogJyNpc0NvbGxpbmVhcicsXG5cblx0aXNPcnRob2dvbmFsOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgcG9pbnQgPSBQb2ludC5yZWFkKGFyZ3VtZW50cyk7XG5cdFx0cmV0dXJuIFBvaW50LmlzT3J0aG9nb25hbCh0aGlzLngsIHRoaXMueSwgcG9pbnQueCwgcG9pbnQueSk7XG5cdH0sXG5cblx0aXNaZXJvOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgaXNaZXJvID0gTnVtZXJpY2FsLmlzWmVybztcblx0XHRyZXR1cm4gaXNaZXJvKHRoaXMueCkgJiYgaXNaZXJvKHRoaXMueSk7XG5cdH0sXG5cblx0aXNOYU46IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBpc05hTih0aGlzLngpIHx8IGlzTmFOKHRoaXMueSk7XG5cdH0sXG5cblx0aXNJblF1YWRyYW50OiBmdW5jdGlvbihxKSB7XG5cdFx0cmV0dXJuIHRoaXMueCAqIChxID4gMSAmJiBxIDwgNCA/IC0xIDogMSkgPj0gMFxuXHRcdFx0JiYgdGhpcy55ICogKHEgPiAyID8gLTEgOiAxKSA+PSAwO1xuXHR9LFxuXG5cdGRvdDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIHBvaW50ID0gUG9pbnQucmVhZChhcmd1bWVudHMpO1xuXHRcdHJldHVybiB0aGlzLnggKiBwb2ludC54ICsgdGhpcy55ICogcG9pbnQueTtcblx0fSxcblxuXHRjcm9zczogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIHBvaW50ID0gUG9pbnQucmVhZChhcmd1bWVudHMpO1xuXHRcdHJldHVybiB0aGlzLnggKiBwb2ludC55IC0gdGhpcy55ICogcG9pbnQueDtcblx0fSxcblxuXHRwcm9qZWN0OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgcG9pbnQgPSBQb2ludC5yZWFkKGFyZ3VtZW50cyksXG5cdFx0XHRzY2FsZSA9IHBvaW50LmlzWmVybygpID8gMCA6IHRoaXMuZG90KHBvaW50KSAvIHBvaW50LmRvdChwb2ludCk7XG5cdFx0cmV0dXJuIG5ldyBQb2ludChcblx0XHRcdHBvaW50LnggKiBzY2FsZSxcblx0XHRcdHBvaW50LnkgKiBzY2FsZVxuXHRcdCk7XG5cdH0sXG5cblx0c3RhdGljczoge1xuXHRcdG1pbjogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgcG9pbnQxID0gUG9pbnQucmVhZChhcmd1bWVudHMpLFxuXHRcdFx0XHRwb2ludDIgPSBQb2ludC5yZWFkKGFyZ3VtZW50cyk7XG5cdFx0XHRyZXR1cm4gbmV3IFBvaW50KFxuXHRcdFx0XHRNYXRoLm1pbihwb2ludDEueCwgcG9pbnQyLngpLFxuXHRcdFx0XHRNYXRoLm1pbihwb2ludDEueSwgcG9pbnQyLnkpXG5cdFx0XHQpO1xuXHRcdH0sXG5cblx0XHRtYXg6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHBvaW50MSA9IFBvaW50LnJlYWQoYXJndW1lbnRzKSxcblx0XHRcdFx0cG9pbnQyID0gUG9pbnQucmVhZChhcmd1bWVudHMpO1xuXHRcdFx0cmV0dXJuIG5ldyBQb2ludChcblx0XHRcdFx0TWF0aC5tYXgocG9pbnQxLngsIHBvaW50Mi54KSxcblx0XHRcdFx0TWF0aC5tYXgocG9pbnQxLnksIHBvaW50Mi55KVxuXHRcdFx0KTtcblx0XHR9LFxuXG5cdFx0cmFuZG9tOiBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBuZXcgUG9pbnQoTWF0aC5yYW5kb20oKSwgTWF0aC5yYW5kb20oKSk7XG5cdFx0fSxcblxuXHRcdGlzQ29sbGluZWFyOiBmdW5jdGlvbih4MSwgeTEsIHgyLCB5Mikge1xuXHRcdFx0cmV0dXJuIE1hdGguYWJzKHgxICogeTIgLSB5MSAqIHgyKVxuXHRcdFx0XHRcdDw9IE1hdGguc3FydCgoeDEgKiB4MSArIHkxICogeTEpICogKHgyICogeDIgKyB5MiAqIHkyKSlcblx0XHRcdFx0XHRcdCogMWUtODtcblx0XHR9LFxuXG5cdFx0aXNPcnRob2dvbmFsOiBmdW5jdGlvbih4MSwgeTEsIHgyLCB5Mikge1xuXHRcdFx0cmV0dXJuIE1hdGguYWJzKHgxICogeDIgKyB5MSAqIHkyKVxuXHRcdFx0XHRcdDw9IE1hdGguc3FydCgoeDEgKiB4MSArIHkxICogeTEpICogKHgyICogeDIgKyB5MiAqIHkyKSlcblx0XHRcdFx0XHRcdCogMWUtODtcblx0XHR9XG5cdH1cbn0sIEJhc2UuZWFjaChbJ3JvdW5kJywgJ2NlaWwnLCAnZmxvb3InLCAnYWJzJ10sIGZ1bmN0aW9uKGtleSkge1xuXHR2YXIgb3AgPSBNYXRoW2tleV07XG5cdHRoaXNba2V5XSA9IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBuZXcgUG9pbnQob3AodGhpcy54KSwgb3AodGhpcy55KSk7XG5cdH07XG59LCB7fSkpO1xuXG52YXIgTGlua2VkUG9pbnQgPSBQb2ludC5leHRlbmQoe1xuXHRpbml0aWFsaXplOiBmdW5jdGlvbiBQb2ludCh4LCB5LCBvd25lciwgc2V0dGVyKSB7XG5cdFx0dGhpcy5feCA9IHg7XG5cdFx0dGhpcy5feSA9IHk7XG5cdFx0dGhpcy5fb3duZXIgPSBvd25lcjtcblx0XHR0aGlzLl9zZXR0ZXIgPSBzZXR0ZXI7XG5cdH0sXG5cblx0X3NldDogZnVuY3Rpb24oeCwgeSwgX2RvbnROb3RpZnkpIHtcblx0XHR0aGlzLl94ID0geDtcblx0XHR0aGlzLl95ID0geTtcblx0XHRpZiAoIV9kb250Tm90aWZ5KVxuXHRcdFx0dGhpcy5fb3duZXJbdGhpcy5fc2V0dGVyXSh0aGlzKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRnZXRYOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5feDtcblx0fSxcblxuXHRzZXRYOiBmdW5jdGlvbih4KSB7XG5cdFx0dGhpcy5feCA9IHg7XG5cdFx0dGhpcy5fb3duZXJbdGhpcy5fc2V0dGVyXSh0aGlzKTtcblx0fSxcblxuXHRnZXRZOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5feTtcblx0fSxcblxuXHRzZXRZOiBmdW5jdGlvbih5KSB7XG5cdFx0dGhpcy5feSA9IHk7XG5cdFx0dGhpcy5fb3duZXJbdGhpcy5fc2V0dGVyXSh0aGlzKTtcblx0fSxcblxuXHRpc1NlbGVjdGVkOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gISEodGhpcy5fb3duZXIuX3NlbGVjdGlvbiAmIHRoaXMuX2dldFNlbGVjdGlvbigpKTtcblx0fSxcblxuXHRzZXRTZWxlY3RlZDogZnVuY3Rpb24oc2VsZWN0ZWQpIHtcblx0XHR0aGlzLl9vd25lci5fY2hhbmdlU2VsZWN0aW9uKHRoaXMuX2dldFNlbGVjdGlvbigpLCBzZWxlY3RlZCk7XG5cdH0sXG5cblx0X2dldFNlbGVjdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuX3NldHRlciA9PT0gJ3NldFBvc2l0aW9uJyA/IDQgOiAwO1xuXHR9XG59KTtcblxudmFyIFNpemUgPSBCYXNlLmV4dGVuZCh7XG5cdF9jbGFzczogJ1NpemUnLFxuXHRfcmVhZEluZGV4OiB0cnVlLFxuXG5cdGluaXRpYWxpemU6IGZ1bmN0aW9uIFNpemUoYXJnMCwgYXJnMSkge1xuXHRcdHZhciB0eXBlID0gdHlwZW9mIGFyZzAsXG5cdFx0XHRyZWFkaW5nID0gdGhpcy5fX3JlYWQsXG5cdFx0XHRyZWFkID0gMDtcblx0XHRpZiAodHlwZSA9PT0gJ251bWJlcicpIHtcblx0XHRcdHZhciBoYXNIZWlnaHQgPSB0eXBlb2YgYXJnMSA9PT0gJ251bWJlcic7XG5cdFx0XHR0aGlzLl9zZXQoYXJnMCwgaGFzSGVpZ2h0ID8gYXJnMSA6IGFyZzApO1xuXHRcdFx0aWYgKHJlYWRpbmcpXG5cdFx0XHRcdHJlYWQgPSBoYXNIZWlnaHQgPyAyIDogMTtcblx0XHR9IGVsc2UgaWYgKHR5cGUgPT09ICd1bmRlZmluZWQnIHx8IGFyZzAgPT09IG51bGwpIHtcblx0XHRcdHRoaXMuX3NldCgwLCAwKTtcblx0XHRcdGlmIChyZWFkaW5nKVxuXHRcdFx0XHRyZWFkID0gYXJnMCA9PT0gbnVsbCA/IDEgOiAwO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR2YXIgb2JqID0gdHlwZSA9PT0gJ3N0cmluZycgPyBhcmcwLnNwbGl0KC9bXFxzLF0rLykgfHwgW10gOiBhcmcwO1xuXHRcdFx0cmVhZCA9IDE7XG5cdFx0XHRpZiAoQXJyYXkuaXNBcnJheShvYmopKSB7XG5cdFx0XHRcdHRoaXMuX3NldCgrb2JqWzBdLCArKG9iai5sZW5ndGggPiAxID8gb2JqWzFdIDogb2JqWzBdKSk7XG5cdFx0XHR9IGVsc2UgaWYgKCd3aWR0aCcgaW4gb2JqKSB7XG5cdFx0XHRcdHRoaXMuX3NldChvYmoud2lkdGggfHwgMCwgb2JqLmhlaWdodCB8fCAwKTtcblx0XHRcdH0gZWxzZSBpZiAoJ3gnIGluIG9iaikge1xuXHRcdFx0XHR0aGlzLl9zZXQob2JqLnggfHwgMCwgb2JqLnkgfHwgMCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0aGlzLl9zZXQoMCwgMCk7XG5cdFx0XHRcdHJlYWQgPSAwO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRpZiAocmVhZGluZylcblx0XHRcdHRoaXMuX19yZWFkID0gcmVhZDtcblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRzZXQ6ICcjaW5pdGlhbGl6ZScsXG5cblx0X3NldDogZnVuY3Rpb24od2lkdGgsIGhlaWdodCkge1xuXHRcdHRoaXMud2lkdGggPSB3aWR0aDtcblx0XHR0aGlzLmhlaWdodCA9IGhlaWdodDtcblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRlcXVhbHM6IGZ1bmN0aW9uKHNpemUpIHtcblx0XHRyZXR1cm4gc2l6ZSA9PT0gdGhpcyB8fCBzaXplICYmICh0aGlzLndpZHRoID09PSBzaXplLndpZHRoXG5cdFx0XHRcdCYmIHRoaXMuaGVpZ2h0ID09PSBzaXplLmhlaWdodFxuXHRcdFx0XHR8fCBBcnJheS5pc0FycmF5KHNpemUpICYmIHRoaXMud2lkdGggPT09IHNpemVbMF1cblx0XHRcdFx0XHQmJiB0aGlzLmhlaWdodCA9PT0gc2l6ZVsxXSkgfHwgZmFsc2U7XG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBuZXcgU2l6ZSh0aGlzLndpZHRoLCB0aGlzLmhlaWdodCk7XG5cdH0sXG5cblx0dG9TdHJpbmc6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBmID0gRm9ybWF0dGVyLmluc3RhbmNlO1xuXHRcdHJldHVybiAneyB3aWR0aDogJyArIGYubnVtYmVyKHRoaXMud2lkdGgpXG5cdFx0XHRcdCsgJywgaGVpZ2h0OiAnICsgZi5udW1iZXIodGhpcy5oZWlnaHQpICsgJyB9Jztcblx0fSxcblxuXHRfc2VyaWFsaXplOiBmdW5jdGlvbihvcHRpb25zKSB7XG5cdFx0dmFyIGYgPSBvcHRpb25zLmZvcm1hdHRlcjtcblx0XHRyZXR1cm4gW2YubnVtYmVyKHRoaXMud2lkdGgpLFxuXHRcdFx0XHRmLm51bWJlcih0aGlzLmhlaWdodCldO1xuXHR9LFxuXG5cdGFkZDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIHNpemUgPSBTaXplLnJlYWQoYXJndW1lbnRzKTtcblx0XHRyZXR1cm4gbmV3IFNpemUodGhpcy53aWR0aCArIHNpemUud2lkdGgsIHRoaXMuaGVpZ2h0ICsgc2l6ZS5oZWlnaHQpO1xuXHR9LFxuXG5cdHN1YnRyYWN0OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgc2l6ZSA9IFNpemUucmVhZChhcmd1bWVudHMpO1xuXHRcdHJldHVybiBuZXcgU2l6ZSh0aGlzLndpZHRoIC0gc2l6ZS53aWR0aCwgdGhpcy5oZWlnaHQgLSBzaXplLmhlaWdodCk7XG5cdH0sXG5cblx0bXVsdGlwbHk6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBzaXplID0gU2l6ZS5yZWFkKGFyZ3VtZW50cyk7XG5cdFx0cmV0dXJuIG5ldyBTaXplKHRoaXMud2lkdGggKiBzaXplLndpZHRoLCB0aGlzLmhlaWdodCAqIHNpemUuaGVpZ2h0KTtcblx0fSxcblxuXHRkaXZpZGU6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBzaXplID0gU2l6ZS5yZWFkKGFyZ3VtZW50cyk7XG5cdFx0cmV0dXJuIG5ldyBTaXplKHRoaXMud2lkdGggLyBzaXplLndpZHRoLCB0aGlzLmhlaWdodCAvIHNpemUuaGVpZ2h0KTtcblx0fSxcblxuXHRtb2R1bG86IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBzaXplID0gU2l6ZS5yZWFkKGFyZ3VtZW50cyk7XG5cdFx0cmV0dXJuIG5ldyBTaXplKHRoaXMud2lkdGggJSBzaXplLndpZHRoLCB0aGlzLmhlaWdodCAlIHNpemUuaGVpZ2h0KTtcblx0fSxcblxuXHRuZWdhdGU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBuZXcgU2l6ZSgtdGhpcy53aWR0aCwgLXRoaXMuaGVpZ2h0KTtcblx0fSxcblxuXHRpc1plcm86IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBpc1plcm8gPSBOdW1lcmljYWwuaXNaZXJvO1xuXHRcdHJldHVybiBpc1plcm8odGhpcy53aWR0aCkgJiYgaXNaZXJvKHRoaXMuaGVpZ2h0KTtcblx0fSxcblxuXHRpc05hTjogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGlzTmFOKHRoaXMud2lkdGgpIHx8IGlzTmFOKHRoaXMuaGVpZ2h0KTtcblx0fSxcblxuXHRzdGF0aWNzOiB7XG5cdFx0bWluOiBmdW5jdGlvbihzaXplMSwgc2l6ZTIpIHtcblx0XHRcdHJldHVybiBuZXcgU2l6ZShcblx0XHRcdFx0TWF0aC5taW4oc2l6ZTEud2lkdGgsIHNpemUyLndpZHRoKSxcblx0XHRcdFx0TWF0aC5taW4oc2l6ZTEuaGVpZ2h0LCBzaXplMi5oZWlnaHQpKTtcblx0XHR9LFxuXG5cdFx0bWF4OiBmdW5jdGlvbihzaXplMSwgc2l6ZTIpIHtcblx0XHRcdHJldHVybiBuZXcgU2l6ZShcblx0XHRcdFx0TWF0aC5tYXgoc2l6ZTEud2lkdGgsIHNpemUyLndpZHRoKSxcblx0XHRcdFx0TWF0aC5tYXgoc2l6ZTEuaGVpZ2h0LCBzaXplMi5oZWlnaHQpKTtcblx0XHR9LFxuXG5cdFx0cmFuZG9tOiBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBuZXcgU2l6ZShNYXRoLnJhbmRvbSgpLCBNYXRoLnJhbmRvbSgpKTtcblx0XHR9XG5cdH1cbn0sIEJhc2UuZWFjaChbJ3JvdW5kJywgJ2NlaWwnLCAnZmxvb3InLCAnYWJzJ10sIGZ1bmN0aW9uKGtleSkge1xuXHR2YXIgb3AgPSBNYXRoW2tleV07XG5cdHRoaXNba2V5XSA9IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBuZXcgU2l6ZShvcCh0aGlzLndpZHRoKSwgb3AodGhpcy5oZWlnaHQpKTtcblx0fTtcbn0sIHt9KSk7XG5cbnZhciBMaW5rZWRTaXplID0gU2l6ZS5leHRlbmQoe1xuXHRpbml0aWFsaXplOiBmdW5jdGlvbiBTaXplKHdpZHRoLCBoZWlnaHQsIG93bmVyLCBzZXR0ZXIpIHtcblx0XHR0aGlzLl93aWR0aCA9IHdpZHRoO1xuXHRcdHRoaXMuX2hlaWdodCA9IGhlaWdodDtcblx0XHR0aGlzLl9vd25lciA9IG93bmVyO1xuXHRcdHRoaXMuX3NldHRlciA9IHNldHRlcjtcblx0fSxcblxuXHRfc2V0OiBmdW5jdGlvbih3aWR0aCwgaGVpZ2h0LCBfZG9udE5vdGlmeSkge1xuXHRcdHRoaXMuX3dpZHRoID0gd2lkdGg7XG5cdFx0dGhpcy5faGVpZ2h0ID0gaGVpZ2h0O1xuXHRcdGlmICghX2RvbnROb3RpZnkpXG5cdFx0XHR0aGlzLl9vd25lclt0aGlzLl9zZXR0ZXJdKHRoaXMpO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdGdldFdpZHRoOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5fd2lkdGg7XG5cdH0sXG5cblx0c2V0V2lkdGg6IGZ1bmN0aW9uKHdpZHRoKSB7XG5cdFx0dGhpcy5fd2lkdGggPSB3aWR0aDtcblx0XHR0aGlzLl9vd25lclt0aGlzLl9zZXR0ZXJdKHRoaXMpO1xuXHR9LFxuXG5cdGdldEhlaWdodDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuX2hlaWdodDtcblx0fSxcblxuXHRzZXRIZWlnaHQ6IGZ1bmN0aW9uKGhlaWdodCkge1xuXHRcdHRoaXMuX2hlaWdodCA9IGhlaWdodDtcblx0XHR0aGlzLl9vd25lclt0aGlzLl9zZXR0ZXJdKHRoaXMpO1xuXHR9XG59KTtcblxudmFyIFJlY3RhbmdsZSA9IEJhc2UuZXh0ZW5kKHtcblx0X2NsYXNzOiAnUmVjdGFuZ2xlJyxcblx0X3JlYWRJbmRleDogdHJ1ZSxcblx0YmVhbnM6IHRydWUsXG5cblx0aW5pdGlhbGl6ZTogZnVuY3Rpb24gUmVjdGFuZ2xlKGFyZzAsIGFyZzEsIGFyZzIsIGFyZzMpIHtcblx0XHR2YXIgdHlwZSA9IHR5cGVvZiBhcmcwLFxuXHRcdFx0cmVhZDtcblx0XHRpZiAodHlwZSA9PT0gJ251bWJlcicpIHtcblx0XHRcdHRoaXMuX3NldChhcmcwLCBhcmcxLCBhcmcyLCBhcmczKTtcblx0XHRcdHJlYWQgPSA0O1xuXHRcdH0gZWxzZSBpZiAodHlwZSA9PT0gJ3VuZGVmaW5lZCcgfHwgYXJnMCA9PT0gbnVsbCkge1xuXHRcdFx0dGhpcy5fc2V0KDAsIDAsIDAsIDApO1xuXHRcdFx0cmVhZCA9IGFyZzAgPT09IG51bGwgPyAxIDogMDtcblx0XHR9IGVsc2UgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcblx0XHRcdGlmIChBcnJheS5pc0FycmF5KGFyZzApKSB7XG5cdFx0XHRcdHRoaXMuX3NldC5hcHBseSh0aGlzLCBhcmcwKTtcblx0XHRcdFx0cmVhZCA9IDE7XG5cdFx0XHR9IGVsc2UgaWYgKGFyZzAueCAhPT0gdW5kZWZpbmVkIHx8IGFyZzAud2lkdGggIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHR0aGlzLl9zZXQoYXJnMC54IHx8IDAsIGFyZzAueSB8fCAwLFxuXHRcdFx0XHRcdFx0YXJnMC53aWR0aCB8fCAwLCBhcmcwLmhlaWdodCB8fCAwKTtcblx0XHRcdFx0cmVhZCA9IDE7XG5cdFx0XHR9IGVsc2UgaWYgKGFyZzAuZnJvbSA9PT0gdW5kZWZpbmVkICYmIGFyZzAudG8gPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHR0aGlzLl9zZXQoMCwgMCwgMCwgMCk7XG5cdFx0XHRcdEJhc2UuZmlsdGVyKHRoaXMsIGFyZzApO1xuXHRcdFx0XHRyZWFkID0gMTtcblx0XHRcdH1cblx0XHR9XG5cdFx0aWYgKHJlYWQgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0dmFyIGZybSA9IFBvaW50LnJlYWROYW1lZChhcmd1bWVudHMsICdmcm9tJyksXG5cdFx0XHRcdG5leHQgPSBCYXNlLnBlZWsoYXJndW1lbnRzKSxcblx0XHRcdFx0eCA9IGZybS54LFxuXHRcdFx0XHR5ID0gZnJtLnksXG5cdFx0XHRcdHdpZHRoLFxuXHRcdFx0XHRoZWlnaHQ7XG5cdFx0XHRpZiAobmV4dCAmJiBuZXh0LnggIT09IHVuZGVmaW5lZFxuXHRcdFx0XHRcdHx8IEJhc2UuaGFzTmFtZWQoYXJndW1lbnRzLCAndG8nKSkge1xuXHRcdFx0XHR2YXIgdG8gPSBQb2ludC5yZWFkTmFtZWQoYXJndW1lbnRzLCAndG8nKTtcblx0XHRcdFx0d2lkdGggPSB0by54IC0geDtcblx0XHRcdFx0aGVpZ2h0ID0gdG8ueSAtIHk7XG5cdFx0XHRcdGlmICh3aWR0aCA8IDApIHtcblx0XHRcdFx0XHR4ID0gdG8ueDtcblx0XHRcdFx0XHR3aWR0aCA9IC13aWR0aDtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoaGVpZ2h0IDwgMCkge1xuXHRcdFx0XHRcdHkgPSB0by55O1xuXHRcdFx0XHRcdGhlaWdodCA9IC1oZWlnaHQ7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHZhciBzaXplID0gU2l6ZS5yZWFkKGFyZ3VtZW50cyk7XG5cdFx0XHRcdHdpZHRoID0gc2l6ZS53aWR0aDtcblx0XHRcdFx0aGVpZ2h0ID0gc2l6ZS5oZWlnaHQ7XG5cdFx0XHR9XG5cdFx0XHR0aGlzLl9zZXQoeCwgeSwgd2lkdGgsIGhlaWdodCk7XG5cdFx0XHRyZWFkID0gYXJndW1lbnRzLl9faW5kZXg7XG5cdFx0XHR2YXIgZmlsdGVyZWQgPSBhcmd1bWVudHMuX19maWx0ZXJlZDtcblx0XHRcdGlmIChmaWx0ZXJlZClcblx0XHRcdFx0dGhpcy5fX2ZpbHRlcmVkID0gZmlsdGVyZWQ7XG5cdFx0fVxuXHRcdGlmICh0aGlzLl9fcmVhZClcblx0XHRcdHRoaXMuX19yZWFkID0gcmVhZDtcblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRzZXQ6ICcjaW5pdGlhbGl6ZScsXG5cblx0X3NldDogZnVuY3Rpb24oeCwgeSwgd2lkdGgsIGhlaWdodCkge1xuXHRcdHRoaXMueCA9IHg7XG5cdFx0dGhpcy55ID0geTtcblx0XHR0aGlzLndpZHRoID0gd2lkdGg7XG5cdFx0dGhpcy5oZWlnaHQgPSBoZWlnaHQ7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBuZXcgUmVjdGFuZ2xlKHRoaXMueCwgdGhpcy55LCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCk7XG5cdH0sXG5cblx0ZXF1YWxzOiBmdW5jdGlvbihyZWN0KSB7XG5cdFx0dmFyIHJ0ID0gQmFzZS5pc1BsYWluVmFsdWUocmVjdClcblx0XHRcdFx0PyBSZWN0YW5nbGUucmVhZChhcmd1bWVudHMpXG5cdFx0XHRcdDogcmVjdDtcblx0XHRyZXR1cm4gcnQgPT09IHRoaXNcblx0XHRcdFx0fHwgcnQgJiYgdGhpcy54ID09PSBydC54ICYmIHRoaXMueSA9PT0gcnQueVxuXHRcdFx0XHRcdCYmIHRoaXMud2lkdGggPT09IHJ0LndpZHRoICYmIHRoaXMuaGVpZ2h0ID09PSBydC5oZWlnaHRcblx0XHRcdFx0fHwgZmFsc2U7XG5cdH0sXG5cblx0dG9TdHJpbmc6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBmID0gRm9ybWF0dGVyLmluc3RhbmNlO1xuXHRcdHJldHVybiAneyB4OiAnICsgZi5udW1iZXIodGhpcy54KVxuXHRcdFx0XHQrICcsIHk6ICcgKyBmLm51bWJlcih0aGlzLnkpXG5cdFx0XHRcdCsgJywgd2lkdGg6ICcgKyBmLm51bWJlcih0aGlzLndpZHRoKVxuXHRcdFx0XHQrICcsIGhlaWdodDogJyArIGYubnVtYmVyKHRoaXMuaGVpZ2h0KVxuXHRcdFx0XHQrICcgfSc7XG5cdH0sXG5cblx0X3NlcmlhbGl6ZTogZnVuY3Rpb24ob3B0aW9ucykge1xuXHRcdHZhciBmID0gb3B0aW9ucy5mb3JtYXR0ZXI7XG5cdFx0cmV0dXJuIFtmLm51bWJlcih0aGlzLngpLFxuXHRcdFx0XHRmLm51bWJlcih0aGlzLnkpLFxuXHRcdFx0XHRmLm51bWJlcih0aGlzLndpZHRoKSxcblx0XHRcdFx0Zi5udW1iZXIodGhpcy5oZWlnaHQpXTtcblx0fSxcblxuXHRnZXRQb2ludDogZnVuY3Rpb24oX2RvbnRMaW5rKSB7XG5cdFx0dmFyIGN0b3IgPSBfZG9udExpbmsgPyBQb2ludCA6IExpbmtlZFBvaW50O1xuXHRcdHJldHVybiBuZXcgY3Rvcih0aGlzLngsIHRoaXMueSwgdGhpcywgJ3NldFBvaW50Jyk7XG5cdH0sXG5cblx0c2V0UG9pbnQ6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBwb2ludCA9IFBvaW50LnJlYWQoYXJndW1lbnRzKTtcblx0XHR0aGlzLnggPSBwb2ludC54O1xuXHRcdHRoaXMueSA9IHBvaW50Lnk7XG5cdH0sXG5cblx0Z2V0U2l6ZTogZnVuY3Rpb24oX2RvbnRMaW5rKSB7XG5cdFx0dmFyIGN0b3IgPSBfZG9udExpbmsgPyBTaXplIDogTGlua2VkU2l6ZTtcblx0XHRyZXR1cm4gbmV3IGN0b3IodGhpcy53aWR0aCwgdGhpcy5oZWlnaHQsIHRoaXMsICdzZXRTaXplJyk7XG5cdH0sXG5cblx0X2Z3OiAxLFxuXHRfZmg6IDEsXG5cblx0c2V0U2l6ZTogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIHNpemUgPSBTaXplLnJlYWQoYXJndW1lbnRzKSxcblx0XHRcdHN4ID0gdGhpcy5fc3gsXG5cdFx0XHRzeSA9IHRoaXMuX3N5LFxuXHRcdFx0dyA9IHNpemUud2lkdGgsXG5cdFx0XHRoID0gc2l6ZS5oZWlnaHQ7XG5cdFx0aWYgKHN4KSB7XG5cdFx0XHR0aGlzLnggKz0gKHRoaXMud2lkdGggLSB3KSAqIHN4O1xuXHRcdH1cblx0XHRpZiAoc3kpIHtcblx0XHRcdHRoaXMueSArPSAodGhpcy5oZWlnaHQgLSBoKSAqIHN5O1xuXHRcdH1cblx0XHR0aGlzLndpZHRoID0gdztcblx0XHR0aGlzLmhlaWdodCA9IGg7XG5cdFx0dGhpcy5fZncgPSB0aGlzLl9maCA9IDE7XG5cdH0sXG5cblx0Z2V0TGVmdDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMueDtcblx0fSxcblxuXHRzZXRMZWZ0OiBmdW5jdGlvbihsZWZ0KSB7XG5cdFx0aWYgKCF0aGlzLl9mdykge1xuXHRcdFx0dmFyIGFtb3VudCA9IGxlZnQgLSB0aGlzLng7XG5cdFx0XHR0aGlzLndpZHRoIC09IHRoaXMuX3N4ID09PSAwLjUgPyBhbW91bnQgKiAyIDogYW1vdW50O1xuXHRcdH1cblx0XHR0aGlzLnggPSBsZWZ0O1xuXHRcdHRoaXMuX3N4ID0gdGhpcy5fZncgPSAwO1xuXHR9LFxuXG5cdGdldFRvcDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMueTtcblx0fSxcblxuXHRzZXRUb3A6IGZ1bmN0aW9uKHRvcCkge1xuXHRcdGlmICghdGhpcy5fZmgpIHtcblx0XHRcdHZhciBhbW91bnQgPSB0b3AgLSB0aGlzLnk7XG5cdFx0XHR0aGlzLmhlaWdodCAtPSB0aGlzLl9zeSA9PT0gMC41ID8gYW1vdW50ICogMiA6IGFtb3VudDtcblx0XHR9XG5cdFx0dGhpcy55ID0gdG9wO1xuXHRcdHRoaXMuX3N5ID0gdGhpcy5fZmggPSAwO1xuXHR9LFxuXG5cdGdldFJpZ2h0OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy54ICsgdGhpcy53aWR0aDtcblx0fSxcblxuXHRzZXRSaWdodDogZnVuY3Rpb24ocmlnaHQpIHtcblx0XHRpZiAoIXRoaXMuX2Z3KSB7XG5cdFx0XHR2YXIgYW1vdW50ID0gcmlnaHQgLSB0aGlzLng7XG5cdFx0XHR0aGlzLndpZHRoID0gdGhpcy5fc3ggPT09IDAuNSA/IGFtb3VudCAqIDIgOiBhbW91bnQ7XG5cdFx0fVxuXHRcdHRoaXMueCA9IHJpZ2h0IC0gdGhpcy53aWR0aDtcblx0XHR0aGlzLl9zeCA9IDE7XG5cdFx0dGhpcy5fZncgPSAwO1xuXHR9LFxuXG5cdGdldEJvdHRvbTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMueSArIHRoaXMuaGVpZ2h0O1xuXHR9LFxuXG5cdHNldEJvdHRvbTogZnVuY3Rpb24oYm90dG9tKSB7XG5cdFx0aWYgKCF0aGlzLl9maCkge1xuXHRcdFx0dmFyIGFtb3VudCA9IGJvdHRvbSAtIHRoaXMueTtcblx0XHRcdHRoaXMuaGVpZ2h0ID0gdGhpcy5fc3kgPT09IDAuNSA/IGFtb3VudCAqIDIgOiBhbW91bnQ7XG5cdFx0fVxuXHRcdHRoaXMueSA9IGJvdHRvbSAtIHRoaXMuaGVpZ2h0O1xuXHRcdHRoaXMuX3N5ID0gMTtcblx0XHR0aGlzLl9maCA9IDA7XG5cdH0sXG5cblx0Z2V0Q2VudGVyWDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMueCArIHRoaXMud2lkdGggLyAyO1xuXHR9LFxuXG5cdHNldENlbnRlclg6IGZ1bmN0aW9uKHgpIHtcblx0XHRpZiAodGhpcy5fZncgfHwgdGhpcy5fc3ggPT09IDAuNSkge1xuXHRcdFx0dGhpcy54ID0geCAtIHRoaXMud2lkdGggLyAyO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRpZiAodGhpcy5fc3gpIHtcblx0XHRcdFx0dGhpcy54ICs9ICh4IC0gdGhpcy54KSAqIDIgKiB0aGlzLl9zeDtcblx0XHRcdH1cblx0XHRcdHRoaXMud2lkdGggPSAoeCAtIHRoaXMueCkgKiAyO1xuXHRcdH1cblx0XHR0aGlzLl9zeCA9IDAuNTtcblx0XHR0aGlzLl9mdyA9IDA7XG5cdH0sXG5cblx0Z2V0Q2VudGVyWTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMueSArIHRoaXMuaGVpZ2h0IC8gMjtcblx0fSxcblxuXHRzZXRDZW50ZXJZOiBmdW5jdGlvbih5KSB7XG5cdFx0aWYgKHRoaXMuX2ZoIHx8IHRoaXMuX3N5ID09PSAwLjUpIHtcblx0XHRcdHRoaXMueSA9IHkgLSB0aGlzLmhlaWdodCAvIDI7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGlmICh0aGlzLl9zeSkge1xuXHRcdFx0XHR0aGlzLnkgKz0gKHkgLSB0aGlzLnkpICogMiAqIHRoaXMuX3N5O1xuXHRcdFx0fVxuXHRcdFx0dGhpcy5oZWlnaHQgPSAoeSAtIHRoaXMueSkgKiAyO1xuXHRcdH1cblx0XHR0aGlzLl9zeSA9IDAuNTtcblx0XHR0aGlzLl9maCA9IDA7XG5cdH0sXG5cblx0Z2V0Q2VudGVyOiBmdW5jdGlvbihfZG9udExpbmspIHtcblx0XHR2YXIgY3RvciA9IF9kb250TGluayA/IFBvaW50IDogTGlua2VkUG9pbnQ7XG5cdFx0cmV0dXJuIG5ldyBjdG9yKHRoaXMuZ2V0Q2VudGVyWCgpLCB0aGlzLmdldENlbnRlclkoKSwgdGhpcywgJ3NldENlbnRlcicpO1xuXHR9LFxuXG5cdHNldENlbnRlcjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIHBvaW50ID0gUG9pbnQucmVhZChhcmd1bWVudHMpO1xuXHRcdHRoaXMuc2V0Q2VudGVyWChwb2ludC54KTtcblx0XHR0aGlzLnNldENlbnRlclkocG9pbnQueSk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0Z2V0QXJlYTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMud2lkdGggKiB0aGlzLmhlaWdodDtcblx0fSxcblxuXHRpc0VtcHR5OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy53aWR0aCA9PT0gMCB8fCB0aGlzLmhlaWdodCA9PT0gMDtcblx0fSxcblxuXHRjb250YWluczogZnVuY3Rpb24oYXJnKSB7XG5cdFx0cmV0dXJuIGFyZyAmJiBhcmcud2lkdGggIT09IHVuZGVmaW5lZFxuXHRcdFx0XHR8fCAoQXJyYXkuaXNBcnJheShhcmcpID8gYXJnIDogYXJndW1lbnRzKS5sZW5ndGggPT09IDRcblx0XHRcdFx0PyB0aGlzLl9jb250YWluc1JlY3RhbmdsZShSZWN0YW5nbGUucmVhZChhcmd1bWVudHMpKVxuXHRcdFx0XHQ6IHRoaXMuX2NvbnRhaW5zUG9pbnQoUG9pbnQucmVhZChhcmd1bWVudHMpKTtcblx0fSxcblxuXHRfY29udGFpbnNQb2ludDogZnVuY3Rpb24ocG9pbnQpIHtcblx0XHR2YXIgeCA9IHBvaW50LngsXG5cdFx0XHR5ID0gcG9pbnQueTtcblx0XHRyZXR1cm4geCA+PSB0aGlzLnggJiYgeSA+PSB0aGlzLnlcblx0XHRcdFx0JiYgeCA8PSB0aGlzLnggKyB0aGlzLndpZHRoXG5cdFx0XHRcdCYmIHkgPD0gdGhpcy55ICsgdGhpcy5oZWlnaHQ7XG5cdH0sXG5cblx0X2NvbnRhaW5zUmVjdGFuZ2xlOiBmdW5jdGlvbihyZWN0KSB7XG5cdFx0dmFyIHggPSByZWN0LngsXG5cdFx0XHR5ID0gcmVjdC55O1xuXHRcdHJldHVybiB4ID49IHRoaXMueCAmJiB5ID49IHRoaXMueVxuXHRcdFx0XHQmJiB4ICsgcmVjdC53aWR0aCA8PSB0aGlzLnggKyB0aGlzLndpZHRoXG5cdFx0XHRcdCYmIHkgKyByZWN0LmhlaWdodCA8PSB0aGlzLnkgKyB0aGlzLmhlaWdodDtcblx0fSxcblxuXHRpbnRlcnNlY3RzOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgcmVjdCA9IFJlY3RhbmdsZS5yZWFkKGFyZ3VtZW50cyksXG5cdFx0XHRlcHNpbG9uID0gQmFzZS5yZWFkKGFyZ3VtZW50cykgfHwgMDtcblx0XHRyZXR1cm4gcmVjdC54ICsgcmVjdC53aWR0aCA+IHRoaXMueCAtIGVwc2lsb25cblx0XHRcdFx0JiYgcmVjdC55ICsgcmVjdC5oZWlnaHQgPiB0aGlzLnkgLSBlcHNpbG9uXG5cdFx0XHRcdCYmIHJlY3QueCA8IHRoaXMueCArIHRoaXMud2lkdGggKyBlcHNpbG9uXG5cdFx0XHRcdCYmIHJlY3QueSA8IHRoaXMueSArIHRoaXMuaGVpZ2h0ICsgZXBzaWxvbjtcblx0fSxcblxuXHRpbnRlcnNlY3Q6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciByZWN0ID0gUmVjdGFuZ2xlLnJlYWQoYXJndW1lbnRzKSxcblx0XHRcdHgxID0gTWF0aC5tYXgodGhpcy54LCByZWN0LngpLFxuXHRcdFx0eTEgPSBNYXRoLm1heCh0aGlzLnksIHJlY3QueSksXG5cdFx0XHR4MiA9IE1hdGgubWluKHRoaXMueCArIHRoaXMud2lkdGgsIHJlY3QueCArIHJlY3Qud2lkdGgpLFxuXHRcdFx0eTIgPSBNYXRoLm1pbih0aGlzLnkgKyB0aGlzLmhlaWdodCwgcmVjdC55ICsgcmVjdC5oZWlnaHQpO1xuXHRcdHJldHVybiBuZXcgUmVjdGFuZ2xlKHgxLCB5MSwgeDIgLSB4MSwgeTIgLSB5MSk7XG5cdH0sXG5cblx0dW5pdGU6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciByZWN0ID0gUmVjdGFuZ2xlLnJlYWQoYXJndW1lbnRzKSxcblx0XHRcdHgxID0gTWF0aC5taW4odGhpcy54LCByZWN0LngpLFxuXHRcdFx0eTEgPSBNYXRoLm1pbih0aGlzLnksIHJlY3QueSksXG5cdFx0XHR4MiA9IE1hdGgubWF4KHRoaXMueCArIHRoaXMud2lkdGgsIHJlY3QueCArIHJlY3Qud2lkdGgpLFxuXHRcdFx0eTIgPSBNYXRoLm1heCh0aGlzLnkgKyB0aGlzLmhlaWdodCwgcmVjdC55ICsgcmVjdC5oZWlnaHQpO1xuXHRcdHJldHVybiBuZXcgUmVjdGFuZ2xlKHgxLCB5MSwgeDIgLSB4MSwgeTIgLSB5MSk7XG5cdH0sXG5cblx0aW5jbHVkZTogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIHBvaW50ID0gUG9pbnQucmVhZChhcmd1bWVudHMpO1xuXHRcdHZhciB4MSA9IE1hdGgubWluKHRoaXMueCwgcG9pbnQueCksXG5cdFx0XHR5MSA9IE1hdGgubWluKHRoaXMueSwgcG9pbnQueSksXG5cdFx0XHR4MiA9IE1hdGgubWF4KHRoaXMueCArIHRoaXMud2lkdGgsIHBvaW50LngpLFxuXHRcdFx0eTIgPSBNYXRoLm1heCh0aGlzLnkgKyB0aGlzLmhlaWdodCwgcG9pbnQueSk7XG5cdFx0cmV0dXJuIG5ldyBSZWN0YW5nbGUoeDEsIHkxLCB4MiAtIHgxLCB5MiAtIHkxKTtcblx0fSxcblxuXHRleHBhbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBhbW91bnQgPSBTaXplLnJlYWQoYXJndW1lbnRzKSxcblx0XHRcdGhvciA9IGFtb3VudC53aWR0aCxcblx0XHRcdHZlciA9IGFtb3VudC5oZWlnaHQ7XG5cdFx0cmV0dXJuIG5ldyBSZWN0YW5nbGUodGhpcy54IC0gaG9yIC8gMiwgdGhpcy55IC0gdmVyIC8gMixcblx0XHRcdFx0dGhpcy53aWR0aCArIGhvciwgdGhpcy5oZWlnaHQgKyB2ZXIpO1xuXHR9LFxuXG5cdHNjYWxlOiBmdW5jdGlvbihob3IsIHZlcikge1xuXHRcdHJldHVybiB0aGlzLmV4cGFuZCh0aGlzLndpZHRoICogaG9yIC0gdGhpcy53aWR0aCxcblx0XHRcdFx0dGhpcy5oZWlnaHQgKiAodmVyID09PSB1bmRlZmluZWQgPyBob3IgOiB2ZXIpIC0gdGhpcy5oZWlnaHQpO1xuXHR9XG59LCBCYXNlLmVhY2goW1xuXHRcdFsnVG9wJywgJ0xlZnQnXSwgWydUb3AnLCAnUmlnaHQnXSxcblx0XHRbJ0JvdHRvbScsICdMZWZ0J10sIFsnQm90dG9tJywgJ1JpZ2h0J10sXG5cdFx0WydMZWZ0JywgJ0NlbnRlciddLCBbJ1RvcCcsICdDZW50ZXInXSxcblx0XHRbJ1JpZ2h0JywgJ0NlbnRlciddLCBbJ0JvdHRvbScsICdDZW50ZXInXVxuXHRdLFxuXHRmdW5jdGlvbihwYXJ0cywgaW5kZXgpIHtcblx0XHR2YXIgcGFydCA9IHBhcnRzLmpvaW4oJycpLFxuXHRcdFx0eEZpcnN0ID0gL15bUkxdLy50ZXN0KHBhcnQpO1xuXHRcdGlmIChpbmRleCA+PSA0KVxuXHRcdFx0cGFydHNbMV0gKz0geEZpcnN0ID8gJ1knIDogJ1gnO1xuXHRcdHZhciB4ID0gcGFydHNbeEZpcnN0ID8gMCA6IDFdLFxuXHRcdFx0eSA9IHBhcnRzW3hGaXJzdCA/IDEgOiAwXSxcblx0XHRcdGdldFggPSAnZ2V0JyArIHgsXG5cdFx0XHRnZXRZID0gJ2dldCcgKyB5LFxuXHRcdFx0c2V0WCA9ICdzZXQnICsgeCxcblx0XHRcdHNldFkgPSAnc2V0JyArIHksXG5cdFx0XHRnZXQgPSAnZ2V0JyArIHBhcnQsXG5cdFx0XHRzZXQgPSAnc2V0JyArIHBhcnQ7XG5cdFx0dGhpc1tnZXRdID0gZnVuY3Rpb24oX2RvbnRMaW5rKSB7XG5cdFx0XHR2YXIgY3RvciA9IF9kb250TGluayA/IFBvaW50IDogTGlua2VkUG9pbnQ7XG5cdFx0XHRyZXR1cm4gbmV3IGN0b3IodGhpc1tnZXRYXSgpLCB0aGlzW2dldFldKCksIHRoaXMsIHNldCk7XG5cdFx0fTtcblx0XHR0aGlzW3NldF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBwb2ludCA9IFBvaW50LnJlYWQoYXJndW1lbnRzKTtcblx0XHRcdHRoaXNbc2V0WF0ocG9pbnQueCk7XG5cdFx0XHR0aGlzW3NldFldKHBvaW50LnkpO1xuXHRcdH07XG5cdH0sIHtcblx0XHRiZWFuczogdHJ1ZVxuXHR9XG4pKTtcblxudmFyIExpbmtlZFJlY3RhbmdsZSA9IFJlY3RhbmdsZS5leHRlbmQoe1xuXHRpbml0aWFsaXplOiBmdW5jdGlvbiBSZWN0YW5nbGUoeCwgeSwgd2lkdGgsIGhlaWdodCwgb3duZXIsIHNldHRlcikge1xuXHRcdHRoaXMuX3NldCh4LCB5LCB3aWR0aCwgaGVpZ2h0LCB0cnVlKTtcblx0XHR0aGlzLl9vd25lciA9IG93bmVyO1xuXHRcdHRoaXMuX3NldHRlciA9IHNldHRlcjtcblx0fSxcblxuXHRfc2V0OiBmdW5jdGlvbih4LCB5LCB3aWR0aCwgaGVpZ2h0LCBfZG9udE5vdGlmeSkge1xuXHRcdHRoaXMuX3ggPSB4O1xuXHRcdHRoaXMuX3kgPSB5O1xuXHRcdHRoaXMuX3dpZHRoID0gd2lkdGg7XG5cdFx0dGhpcy5faGVpZ2h0ID0gaGVpZ2h0O1xuXHRcdGlmICghX2RvbnROb3RpZnkpXG5cdFx0XHR0aGlzLl9vd25lclt0aGlzLl9zZXR0ZXJdKHRoaXMpO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG59LFxubmV3IGZ1bmN0aW9uKCkge1xuXHR2YXIgcHJvdG8gPSBSZWN0YW5nbGUucHJvdG90eXBlO1xuXG5cdHJldHVybiBCYXNlLmVhY2goWyd4JywgJ3knLCAnd2lkdGgnLCAnaGVpZ2h0J10sIGZ1bmN0aW9uKGtleSkge1xuXHRcdHZhciBwYXJ0ID0gQmFzZS5jYXBpdGFsaXplKGtleSksXG5cdFx0XHRpbnRlcm5hbCA9ICdfJyArIGtleTtcblx0XHR0aGlzWydnZXQnICsgcGFydF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiB0aGlzW2ludGVybmFsXTtcblx0XHR9O1xuXG5cdFx0dGhpc1snc2V0JyArIHBhcnRdID0gZnVuY3Rpb24odmFsdWUpIHtcblx0XHRcdHRoaXNbaW50ZXJuYWxdID0gdmFsdWU7XG5cdFx0XHRpZiAoIXRoaXMuX2RvbnROb3RpZnkpXG5cdFx0XHRcdHRoaXMuX293bmVyW3RoaXMuX3NldHRlcl0odGhpcyk7XG5cdFx0fTtcblx0fSwgQmFzZS5lYWNoKFsnUG9pbnQnLCAnU2l6ZScsICdDZW50ZXInLFxuXHRcdFx0J0xlZnQnLCAnVG9wJywgJ1JpZ2h0JywgJ0JvdHRvbScsICdDZW50ZXJYJywgJ0NlbnRlclknLFxuXHRcdFx0J1RvcExlZnQnLCAnVG9wUmlnaHQnLCAnQm90dG9tTGVmdCcsICdCb3R0b21SaWdodCcsXG5cdFx0XHQnTGVmdENlbnRlcicsICdUb3BDZW50ZXInLCAnUmlnaHRDZW50ZXInLCAnQm90dG9tQ2VudGVyJ10sXG5cdFx0ZnVuY3Rpb24oa2V5KSB7XG5cdFx0XHR2YXIgbmFtZSA9ICdzZXQnICsga2V5O1xuXHRcdFx0dGhpc1tuYW1lXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR0aGlzLl9kb250Tm90aWZ5ID0gdHJ1ZTtcblx0XHRcdFx0cHJvdG9bbmFtZV0uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblx0XHRcdFx0dGhpcy5fZG9udE5vdGlmeSA9IGZhbHNlO1xuXHRcdFx0XHR0aGlzLl9vd25lclt0aGlzLl9zZXR0ZXJdKHRoaXMpO1xuXHRcdFx0fTtcblx0XHR9LCB7XG5cdFx0XHRpc1NlbGVjdGVkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICEhKHRoaXMuX293bmVyLl9zZWxlY3Rpb24gJiAyKTtcblx0XHRcdH0sXG5cblx0XHRcdHNldFNlbGVjdGVkOiBmdW5jdGlvbihzZWxlY3RlZCkge1xuXHRcdFx0XHR2YXIgb3duZXIgPSB0aGlzLl9vd25lcjtcblx0XHRcdFx0aWYgKG93bmVyLl9jaGFuZ2VTZWxlY3Rpb24pIHtcblx0XHRcdFx0XHRvd25lci5fY2hhbmdlU2VsZWN0aW9uKDIsIHNlbGVjdGVkKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0pXG5cdCk7XG59KTtcblxudmFyIE1hdHJpeCA9IEJhc2UuZXh0ZW5kKHtcblx0X2NsYXNzOiAnTWF0cml4JyxcblxuXHRpbml0aWFsaXplOiBmdW5jdGlvbiBNYXRyaXgoYXJnLCBfZG9udE5vdGlmeSkge1xuXHRcdHZhciBjb3VudCA9IGFyZ3VtZW50cy5sZW5ndGgsXG5cdFx0XHRvayA9IHRydWU7XG5cdFx0aWYgKGNvdW50ID49IDYpIHtcblx0XHRcdHRoaXMuX3NldC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHRcdH0gZWxzZSBpZiAoY291bnQgPT09IDEgfHwgY291bnQgPT09IDIpIHtcblx0XHRcdGlmIChhcmcgaW5zdGFuY2VvZiBNYXRyaXgpIHtcblx0XHRcdFx0dGhpcy5fc2V0KGFyZy5fYSwgYXJnLl9iLCBhcmcuX2MsIGFyZy5fZCwgYXJnLl90eCwgYXJnLl90eSxcblx0XHRcdFx0XHRcdF9kb250Tm90aWZ5KTtcblx0XHRcdH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShhcmcpKSB7XG5cdFx0XHRcdHRoaXMuX3NldC5hcHBseSh0aGlzLFxuXHRcdFx0XHRcdFx0X2RvbnROb3RpZnkgPyBhcmcuY29uY2F0KFtfZG9udE5vdGlmeV0pIDogYXJnKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG9rID0gZmFsc2U7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIGlmICghY291bnQpIHtcblx0XHRcdHRoaXMucmVzZXQoKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0b2sgPSBmYWxzZTtcblx0XHR9XG5cdFx0aWYgKCFvaykge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdVbnN1cHBvcnRlZCBtYXRyaXggcGFyYW1ldGVycycpO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRzZXQ6ICcjaW5pdGlhbGl6ZScsXG5cblx0X3NldDogZnVuY3Rpb24oYSwgYiwgYywgZCwgdHgsIHR5LCBfZG9udE5vdGlmeSkge1xuXHRcdHRoaXMuX2EgPSBhO1xuXHRcdHRoaXMuX2IgPSBiO1xuXHRcdHRoaXMuX2MgPSBjO1xuXHRcdHRoaXMuX2QgPSBkO1xuXHRcdHRoaXMuX3R4ID0gdHg7XG5cdFx0dGhpcy5fdHkgPSB0eTtcblx0XHRpZiAoIV9kb250Tm90aWZ5KVxuXHRcdFx0dGhpcy5fY2hhbmdlZCgpO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdF9zZXJpYWxpemU6IGZ1bmN0aW9uKG9wdGlvbnMsIGRpY3Rpb25hcnkpIHtcblx0XHRyZXR1cm4gQmFzZS5zZXJpYWxpemUodGhpcy5nZXRWYWx1ZXMoKSwgb3B0aW9ucywgdHJ1ZSwgZGljdGlvbmFyeSk7XG5cdH0sXG5cblx0X2NoYW5nZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBvd25lciA9IHRoaXMuX293bmVyO1xuXHRcdGlmIChvd25lcikge1xuXHRcdFx0aWYgKG93bmVyLl9hcHBseU1hdHJpeCkge1xuXHRcdFx0XHRvd25lci50cmFuc2Zvcm0obnVsbCwgdHJ1ZSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRvd25lci5fY2hhbmdlZCgyNSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gbmV3IE1hdHJpeCh0aGlzLl9hLCB0aGlzLl9iLCB0aGlzLl9jLCB0aGlzLl9kLFxuXHRcdFx0XHR0aGlzLl90eCwgdGhpcy5fdHkpO1xuXHR9LFxuXG5cdGVxdWFsczogZnVuY3Rpb24obXgpIHtcblx0XHRyZXR1cm4gbXggPT09IHRoaXMgfHwgbXggJiYgdGhpcy5fYSA9PT0gbXguX2EgJiYgdGhpcy5fYiA9PT0gbXguX2Jcblx0XHRcdFx0JiYgdGhpcy5fYyA9PT0gbXguX2MgJiYgdGhpcy5fZCA9PT0gbXguX2Rcblx0XHRcdFx0JiYgdGhpcy5fdHggPT09IG14Ll90eCAmJiB0aGlzLl90eSA9PT0gbXguX3R5O1xuXHR9LFxuXG5cdHRvU3RyaW5nOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZiA9IEZvcm1hdHRlci5pbnN0YW5jZTtcblx0XHRyZXR1cm4gJ1tbJyArIFtmLm51bWJlcih0aGlzLl9hKSwgZi5udW1iZXIodGhpcy5fYyksXG5cdFx0XHRcdFx0Zi5udW1iZXIodGhpcy5fdHgpXS5qb2luKCcsICcpICsgJ10sIFsnXG5cdFx0XHRcdCsgW2YubnVtYmVyKHRoaXMuX2IpLCBmLm51bWJlcih0aGlzLl9kKSxcblx0XHRcdFx0XHRmLm51bWJlcih0aGlzLl90eSldLmpvaW4oJywgJykgKyAnXV0nO1xuXHR9LFxuXG5cdHJlc2V0OiBmdW5jdGlvbihfZG9udE5vdGlmeSkge1xuXHRcdHRoaXMuX2EgPSB0aGlzLl9kID0gMTtcblx0XHR0aGlzLl9iID0gdGhpcy5fYyA9IHRoaXMuX3R4ID0gdGhpcy5fdHkgPSAwO1xuXHRcdGlmICghX2RvbnROb3RpZnkpXG5cdFx0XHR0aGlzLl9jaGFuZ2VkKCk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0YXBwbHk6IGZ1bmN0aW9uKHJlY3Vyc2l2ZWx5LCBfc2V0QXBwbHlNYXRyaXgpIHtcblx0XHR2YXIgb3duZXIgPSB0aGlzLl9vd25lcjtcblx0XHRpZiAob3duZXIpIHtcblx0XHRcdG93bmVyLnRyYW5zZm9ybShudWxsLCB0cnVlLCBCYXNlLnBpY2socmVjdXJzaXZlbHksIHRydWUpLFxuXHRcdFx0XHRcdF9zZXRBcHBseU1hdHJpeCk7XG5cdFx0XHRyZXR1cm4gdGhpcy5pc0lkZW50aXR5KCk7XG5cdFx0fVxuXHRcdHJldHVybiBmYWxzZTtcblx0fSxcblxuXHR0cmFuc2xhdGU6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBwb2ludCA9IFBvaW50LnJlYWQoYXJndW1lbnRzKSxcblx0XHRcdHggPSBwb2ludC54LFxuXHRcdFx0eSA9IHBvaW50Lnk7XG5cdFx0dGhpcy5fdHggKz0geCAqIHRoaXMuX2EgKyB5ICogdGhpcy5fYztcblx0XHR0aGlzLl90eSArPSB4ICogdGhpcy5fYiArIHkgKiB0aGlzLl9kO1xuXHRcdHRoaXMuX2NoYW5nZWQoKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRzY2FsZTogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIHNjYWxlID0gUG9pbnQucmVhZChhcmd1bWVudHMpLFxuXHRcdFx0Y2VudGVyID0gUG9pbnQucmVhZChhcmd1bWVudHMsIDAsIHsgcmVhZE51bGw6IHRydWUgfSk7XG5cdFx0aWYgKGNlbnRlcilcblx0XHRcdHRoaXMudHJhbnNsYXRlKGNlbnRlcik7XG5cdFx0dGhpcy5fYSAqPSBzY2FsZS54O1xuXHRcdHRoaXMuX2IgKj0gc2NhbGUueDtcblx0XHR0aGlzLl9jICo9IHNjYWxlLnk7XG5cdFx0dGhpcy5fZCAqPSBzY2FsZS55O1xuXHRcdGlmIChjZW50ZXIpXG5cdFx0XHR0aGlzLnRyYW5zbGF0ZShjZW50ZXIubmVnYXRlKCkpO1xuXHRcdHRoaXMuX2NoYW5nZWQoKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRyb3RhdGU6IGZ1bmN0aW9uKGFuZ2xlICkge1xuXHRcdGFuZ2xlICo9IE1hdGguUEkgLyAxODA7XG5cdFx0dmFyIGNlbnRlciA9IFBvaW50LnJlYWQoYXJndW1lbnRzLCAxKSxcblx0XHRcdHggPSBjZW50ZXIueCxcblx0XHRcdHkgPSBjZW50ZXIueSxcblx0XHRcdGNvcyA9IE1hdGguY29zKGFuZ2xlKSxcblx0XHRcdHNpbiA9IE1hdGguc2luKGFuZ2xlKSxcblx0XHRcdHR4ID0geCAtIHggKiBjb3MgKyB5ICogc2luLFxuXHRcdFx0dHkgPSB5IC0geCAqIHNpbiAtIHkgKiBjb3MsXG5cdFx0XHRhID0gdGhpcy5fYSxcblx0XHRcdGIgPSB0aGlzLl9iLFxuXHRcdFx0YyA9IHRoaXMuX2MsXG5cdFx0XHRkID0gdGhpcy5fZDtcblx0XHR0aGlzLl9hID0gY29zICogYSArIHNpbiAqIGM7XG5cdFx0dGhpcy5fYiA9IGNvcyAqIGIgKyBzaW4gKiBkO1xuXHRcdHRoaXMuX2MgPSAtc2luICogYSArIGNvcyAqIGM7XG5cdFx0dGhpcy5fZCA9IC1zaW4gKiBiICsgY29zICogZDtcblx0XHR0aGlzLl90eCArPSB0eCAqIGEgKyB0eSAqIGM7XG5cdFx0dGhpcy5fdHkgKz0gdHggKiBiICsgdHkgKiBkO1xuXHRcdHRoaXMuX2NoYW5nZWQoKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRzaGVhcjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIHNoZWFyID0gUG9pbnQucmVhZChhcmd1bWVudHMpLFxuXHRcdFx0Y2VudGVyID0gUG9pbnQucmVhZChhcmd1bWVudHMsIDAsIHsgcmVhZE51bGw6IHRydWUgfSk7XG5cdFx0aWYgKGNlbnRlcilcblx0XHRcdHRoaXMudHJhbnNsYXRlKGNlbnRlcik7XG5cdFx0dmFyIGEgPSB0aGlzLl9hLFxuXHRcdFx0YiA9IHRoaXMuX2I7XG5cdFx0dGhpcy5fYSArPSBzaGVhci55ICogdGhpcy5fYztcblx0XHR0aGlzLl9iICs9IHNoZWFyLnkgKiB0aGlzLl9kO1xuXHRcdHRoaXMuX2MgKz0gc2hlYXIueCAqIGE7XG5cdFx0dGhpcy5fZCArPSBzaGVhci54ICogYjtcblx0XHRpZiAoY2VudGVyKVxuXHRcdFx0dGhpcy50cmFuc2xhdGUoY2VudGVyLm5lZ2F0ZSgpKTtcblx0XHR0aGlzLl9jaGFuZ2VkKCk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0c2tldzogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIHNrZXcgPSBQb2ludC5yZWFkKGFyZ3VtZW50cyksXG5cdFx0XHRjZW50ZXIgPSBQb2ludC5yZWFkKGFyZ3VtZW50cywgMCwgeyByZWFkTnVsbDogdHJ1ZSB9KSxcblx0XHRcdHRvUmFkaWFucyA9IE1hdGguUEkgLyAxODAsXG5cdFx0XHRzaGVhciA9IG5ldyBQb2ludChNYXRoLnRhbihza2V3LnggKiB0b1JhZGlhbnMpLFxuXHRcdFx0XHRNYXRoLnRhbihza2V3LnkgKiB0b1JhZGlhbnMpKTtcblx0XHRyZXR1cm4gdGhpcy5zaGVhcihzaGVhciwgY2VudGVyKTtcblx0fSxcblxuXHRhcHBlbmQ6IGZ1bmN0aW9uKG14LCBfZG9udE5vdGlmeSkge1xuXHRcdGlmIChteCkge1xuXHRcdFx0dmFyIGExID0gdGhpcy5fYSxcblx0XHRcdFx0YjEgPSB0aGlzLl9iLFxuXHRcdFx0XHRjMSA9IHRoaXMuX2MsXG5cdFx0XHRcdGQxID0gdGhpcy5fZCxcblx0XHRcdFx0YTIgPSBteC5fYSxcblx0XHRcdFx0YjIgPSBteC5fYyxcblx0XHRcdFx0YzIgPSBteC5fYixcblx0XHRcdFx0ZDIgPSBteC5fZCxcblx0XHRcdFx0dHgyID0gbXguX3R4LFxuXHRcdFx0XHR0eTIgPSBteC5fdHk7XG5cdFx0XHR0aGlzLl9hID0gYTIgKiBhMSArIGMyICogYzE7XG5cdFx0XHR0aGlzLl9jID0gYjIgKiBhMSArIGQyICogYzE7XG5cdFx0XHR0aGlzLl9iID0gYTIgKiBiMSArIGMyICogZDE7XG5cdFx0XHR0aGlzLl9kID0gYjIgKiBiMSArIGQyICogZDE7XG5cdFx0XHR0aGlzLl90eCArPSB0eDIgKiBhMSArIHR5MiAqIGMxO1xuXHRcdFx0dGhpcy5fdHkgKz0gdHgyICogYjEgKyB0eTIgKiBkMTtcblx0XHRcdGlmICghX2RvbnROb3RpZnkpXG5cdFx0XHRcdHRoaXMuX2NoYW5nZWQoKTtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0cHJlcGVuZDogZnVuY3Rpb24obXgsIF9kb250Tm90aWZ5KSB7XG5cdFx0aWYgKG14KSB7XG5cdFx0XHR2YXIgYTEgPSB0aGlzLl9hLFxuXHRcdFx0XHRiMSA9IHRoaXMuX2IsXG5cdFx0XHRcdGMxID0gdGhpcy5fYyxcblx0XHRcdFx0ZDEgPSB0aGlzLl9kLFxuXHRcdFx0XHR0eDEgPSB0aGlzLl90eCxcblx0XHRcdFx0dHkxID0gdGhpcy5fdHksXG5cdFx0XHRcdGEyID0gbXguX2EsXG5cdFx0XHRcdGIyID0gbXguX2MsXG5cdFx0XHRcdGMyID0gbXguX2IsXG5cdFx0XHRcdGQyID0gbXguX2QsXG5cdFx0XHRcdHR4MiA9IG14Ll90eCxcblx0XHRcdFx0dHkyID0gbXguX3R5O1xuXHRcdFx0dGhpcy5fYSA9IGEyICogYTEgKyBiMiAqIGIxO1xuXHRcdFx0dGhpcy5fYyA9IGEyICogYzEgKyBiMiAqIGQxO1xuXHRcdFx0dGhpcy5fYiA9IGMyICogYTEgKyBkMiAqIGIxO1xuXHRcdFx0dGhpcy5fZCA9IGMyICogYzEgKyBkMiAqIGQxO1xuXHRcdFx0dGhpcy5fdHggPSBhMiAqIHR4MSArIGIyICogdHkxICsgdHgyO1xuXHRcdFx0dGhpcy5fdHkgPSBjMiAqIHR4MSArIGQyICogdHkxICsgdHkyO1xuXHRcdFx0aWYgKCFfZG9udE5vdGlmeSlcblx0XHRcdFx0dGhpcy5fY2hhbmdlZCgpO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRhcHBlbmRlZDogZnVuY3Rpb24obXgpIHtcblx0XHRyZXR1cm4gdGhpcy5jbG9uZSgpLmFwcGVuZChteCk7XG5cdH0sXG5cblx0cHJlcGVuZGVkOiBmdW5jdGlvbihteCkge1xuXHRcdHJldHVybiB0aGlzLmNsb25lKCkucHJlcGVuZChteCk7XG5cdH0sXG5cblx0aW52ZXJ0OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgYSA9IHRoaXMuX2EsXG5cdFx0XHRiID0gdGhpcy5fYixcblx0XHRcdGMgPSB0aGlzLl9jLFxuXHRcdFx0ZCA9IHRoaXMuX2QsXG5cdFx0XHR0eCA9IHRoaXMuX3R4LFxuXHRcdFx0dHkgPSB0aGlzLl90eSxcblx0XHRcdGRldCA9IGEgKiBkIC0gYiAqIGMsXG5cdFx0XHRyZXMgPSBudWxsO1xuXHRcdGlmIChkZXQgJiYgIWlzTmFOKGRldCkgJiYgaXNGaW5pdGUodHgpICYmIGlzRmluaXRlKHR5KSkge1xuXHRcdFx0dGhpcy5fYSA9IGQgLyBkZXQ7XG5cdFx0XHR0aGlzLl9iID0gLWIgLyBkZXQ7XG5cdFx0XHR0aGlzLl9jID0gLWMgLyBkZXQ7XG5cdFx0XHR0aGlzLl9kID0gYSAvIGRldDtcblx0XHRcdHRoaXMuX3R4ID0gKGMgKiB0eSAtIGQgKiB0eCkgLyBkZXQ7XG5cdFx0XHR0aGlzLl90eSA9IChiICogdHggLSBhICogdHkpIC8gZGV0O1xuXHRcdFx0cmVzID0gdGhpcztcblx0XHR9XG5cdFx0cmV0dXJuIHJlcztcblx0fSxcblxuXHRpbnZlcnRlZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuY2xvbmUoKS5pbnZlcnQoKTtcblx0fSxcblxuXHRjb25jYXRlbmF0ZTogJyNhcHBlbmQnLFxuXHRwcmVDb25jYXRlbmF0ZTogJyNwcmVwZW5kJyxcblx0Y2hhaW46ICcjYXBwZW5kZWQnLFxuXG5cdF9zaGlmdGxlc3M6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBuZXcgTWF0cml4KHRoaXMuX2EsIHRoaXMuX2IsIHRoaXMuX2MsIHRoaXMuX2QsIDAsIDApO1xuXHR9LFxuXG5cdF9vck51bGxJZklkZW50aXR5OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5pc0lkZW50aXR5KCkgPyBudWxsIDogdGhpcztcblx0fSxcblxuXHRpc0lkZW50aXR5OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5fYSA9PT0gMSAmJiB0aGlzLl9iID09PSAwICYmIHRoaXMuX2MgPT09IDAgJiYgdGhpcy5fZCA9PT0gMVxuXHRcdFx0XHQmJiB0aGlzLl90eCA9PT0gMCAmJiB0aGlzLl90eSA9PT0gMDtcblx0fSxcblxuXHRpc0ludmVydGlibGU6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBkZXQgPSB0aGlzLl9hICogdGhpcy5fZCAtIHRoaXMuX2MgKiB0aGlzLl9iO1xuXHRcdHJldHVybiBkZXQgJiYgIWlzTmFOKGRldCkgJiYgaXNGaW5pdGUodGhpcy5fdHgpICYmIGlzRmluaXRlKHRoaXMuX3R5KTtcblx0fSxcblxuXHRpc1Npbmd1bGFyOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gIXRoaXMuaXNJbnZlcnRpYmxlKCk7XG5cdH0sXG5cblx0dHJhbnNmb3JtOiBmdW5jdGlvbiggc3JjLCBkc3QsIGNvdW50KSB7XG5cdFx0cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPCAzXG5cdFx0XHQ/IHRoaXMuX3RyYW5zZm9ybVBvaW50KFBvaW50LnJlYWQoYXJndW1lbnRzKSlcblx0XHRcdDogdGhpcy5fdHJhbnNmb3JtQ29vcmRpbmF0ZXMoc3JjLCBkc3QsIGNvdW50KTtcblx0fSxcblxuXHRfdHJhbnNmb3JtUG9pbnQ6IGZ1bmN0aW9uKHBvaW50LCBkZXN0LCBfZG9udE5vdGlmeSkge1xuXHRcdHZhciB4ID0gcG9pbnQueCxcblx0XHRcdHkgPSBwb2ludC55O1xuXHRcdGlmICghZGVzdClcblx0XHRcdGRlc3QgPSBuZXcgUG9pbnQoKTtcblx0XHRyZXR1cm4gZGVzdC5fc2V0KFxuXHRcdFx0XHR4ICogdGhpcy5fYSArIHkgKiB0aGlzLl9jICsgdGhpcy5fdHgsXG5cdFx0XHRcdHggKiB0aGlzLl9iICsgeSAqIHRoaXMuX2QgKyB0aGlzLl90eSxcblx0XHRcdFx0X2RvbnROb3RpZnkpO1xuXHR9LFxuXG5cdF90cmFuc2Zvcm1Db29yZGluYXRlczogZnVuY3Rpb24oc3JjLCBkc3QsIGNvdW50KSB7XG5cdFx0Zm9yICh2YXIgaSA9IDAsIG1heCA9IDIgKiBjb3VudDsgaSA8IG1heDsgaSArPSAyKSB7XG5cdFx0XHR2YXIgeCA9IHNyY1tpXSxcblx0XHRcdFx0eSA9IHNyY1tpICsgMV07XG5cdFx0XHRkc3RbaV0gPSB4ICogdGhpcy5fYSArIHkgKiB0aGlzLl9jICsgdGhpcy5fdHg7XG5cdFx0XHRkc3RbaSArIDFdID0geCAqIHRoaXMuX2IgKyB5ICogdGhpcy5fZCArIHRoaXMuX3R5O1xuXHRcdH1cblx0XHRyZXR1cm4gZHN0O1xuXHR9LFxuXG5cdF90cmFuc2Zvcm1Db3JuZXJzOiBmdW5jdGlvbihyZWN0KSB7XG5cdFx0dmFyIHgxID0gcmVjdC54LFxuXHRcdFx0eTEgPSByZWN0LnksXG5cdFx0XHR4MiA9IHgxICsgcmVjdC53aWR0aCxcblx0XHRcdHkyID0geTEgKyByZWN0LmhlaWdodCxcblx0XHRcdGNvb3JkcyA9IFsgeDEsIHkxLCB4MiwgeTEsIHgyLCB5MiwgeDEsIHkyIF07XG5cdFx0cmV0dXJuIHRoaXMuX3RyYW5zZm9ybUNvb3JkaW5hdGVzKGNvb3JkcywgY29vcmRzLCA0KTtcblx0fSxcblxuXHRfdHJhbnNmb3JtQm91bmRzOiBmdW5jdGlvbihib3VuZHMsIGRlc3QsIF9kb250Tm90aWZ5KSB7XG5cdFx0dmFyIGNvb3JkcyA9IHRoaXMuX3RyYW5zZm9ybUNvcm5lcnMoYm91bmRzKSxcblx0XHRcdG1pbiA9IGNvb3Jkcy5zbGljZSgwLCAyKSxcblx0XHRcdG1heCA9IG1pbi5zbGljZSgpO1xuXHRcdGZvciAodmFyIGkgPSAyOyBpIDwgODsgaSsrKSB7XG5cdFx0XHR2YXIgdmFsID0gY29vcmRzW2ldLFxuXHRcdFx0XHRqID0gaSAmIDE7XG5cdFx0XHRpZiAodmFsIDwgbWluW2pdKSB7XG5cdFx0XHRcdG1pbltqXSA9IHZhbDtcblx0XHRcdH0gZWxzZSBpZiAodmFsID4gbWF4W2pdKSB7XG5cdFx0XHRcdG1heFtqXSA9IHZhbDtcblx0XHRcdH1cblx0XHR9XG5cdFx0aWYgKCFkZXN0KVxuXHRcdFx0ZGVzdCA9IG5ldyBSZWN0YW5nbGUoKTtcblx0XHRyZXR1cm4gZGVzdC5fc2V0KG1pblswXSwgbWluWzFdLCBtYXhbMF0gLSBtaW5bMF0sIG1heFsxXSAtIG1pblsxXSxcblx0XHRcdFx0X2RvbnROb3RpZnkpO1xuXHR9LFxuXG5cdGludmVyc2VUcmFuc2Zvcm06IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLl9pbnZlcnNlVHJhbnNmb3JtKFBvaW50LnJlYWQoYXJndW1lbnRzKSk7XG5cdH0sXG5cblx0X2ludmVyc2VUcmFuc2Zvcm06IGZ1bmN0aW9uKHBvaW50LCBkZXN0LCBfZG9udE5vdGlmeSkge1xuXHRcdHZhciBhID0gdGhpcy5fYSxcblx0XHRcdGIgPSB0aGlzLl9iLFxuXHRcdFx0YyA9IHRoaXMuX2MsXG5cdFx0XHRkID0gdGhpcy5fZCxcblx0XHRcdHR4ID0gdGhpcy5fdHgsXG5cdFx0XHR0eSA9IHRoaXMuX3R5LFxuXHRcdFx0ZGV0ID0gYSAqIGQgLSBiICogYyxcblx0XHRcdHJlcyA9IG51bGw7XG5cdFx0aWYgKGRldCAmJiAhaXNOYU4oZGV0KSAmJiBpc0Zpbml0ZSh0eCkgJiYgaXNGaW5pdGUodHkpKSB7XG5cdFx0XHR2YXIgeCA9IHBvaW50LnggLSB0aGlzLl90eCxcblx0XHRcdFx0eSA9IHBvaW50LnkgLSB0aGlzLl90eTtcblx0XHRcdGlmICghZGVzdClcblx0XHRcdFx0ZGVzdCA9IG5ldyBQb2ludCgpO1xuXHRcdFx0cmVzID0gZGVzdC5fc2V0KFxuXHRcdFx0XHRcdCh4ICogZCAtIHkgKiBjKSAvIGRldCxcblx0XHRcdFx0XHQoeSAqIGEgLSB4ICogYikgLyBkZXQsXG5cdFx0XHRcdFx0X2RvbnROb3RpZnkpO1xuXHRcdH1cblx0XHRyZXR1cm4gcmVzO1xuXHR9LFxuXG5cdGRlY29tcG9zZTogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGEgPSB0aGlzLl9hLFxuXHRcdFx0YiA9IHRoaXMuX2IsXG5cdFx0XHRjID0gdGhpcy5fYyxcblx0XHRcdGQgPSB0aGlzLl9kLFxuXHRcdFx0ZGV0ID0gYSAqIGQgLSBiICogYyxcblx0XHRcdHNxcnQgPSBNYXRoLnNxcnQsXG5cdFx0XHRhdGFuMiA9IE1hdGguYXRhbjIsXG5cdFx0XHRkZWdyZWVzID0gMTgwIC8gTWF0aC5QSSxcblx0XHRcdHJvdGF0ZSxcblx0XHRcdHNjYWxlLFxuXHRcdFx0c2tldztcblx0XHRpZiAoYSAhPT0gMCB8fCBiICE9PSAwKSB7XG5cdFx0XHR2YXIgciA9IHNxcnQoYSAqIGEgKyBiICogYik7XG5cdFx0XHRyb3RhdGUgPSBNYXRoLmFjb3MoYSAvIHIpICogKGIgPiAwID8gMSA6IC0xKTtcblx0XHRcdHNjYWxlID0gW3IsIGRldCAvIHJdO1xuXHRcdFx0c2tldyA9IFthdGFuMihhICogYyArIGIgKiBkLCByICogciksIDBdO1xuXHRcdH0gZWxzZSBpZiAoYyAhPT0gMCB8fCBkICE9PSAwKSB7XG5cdFx0XHR2YXIgcyA9IHNxcnQoYyAqIGMgKyBkICogZCk7XG5cdFx0XHRyb3RhdGUgPSBNYXRoLmFzaW4oYyAvIHMpICAqIChkID4gMCA/IDEgOiAtMSk7XG5cdFx0XHRzY2FsZSA9IFtkZXQgLyBzLCBzXTtcblx0XHRcdHNrZXcgPSBbMCwgYXRhbjIoYSAqIGMgKyBiICogZCwgcyAqIHMpXTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cm90YXRlID0gMDtcblx0XHRcdHNrZXcgPSBzY2FsZSA9IFswLCAwXTtcblx0XHR9XG5cdFx0cmV0dXJuIHtcblx0XHRcdHRyYW5zbGF0aW9uOiB0aGlzLmdldFRyYW5zbGF0aW9uKCksXG5cdFx0XHRyb3RhdGlvbjogcm90YXRlICogZGVncmVlcyxcblx0XHRcdHNjYWxpbmc6IG5ldyBQb2ludChzY2FsZSksXG5cdFx0XHRza2V3aW5nOiBuZXcgUG9pbnQoc2tld1swXSAqIGRlZ3JlZXMsIHNrZXdbMV0gKiBkZWdyZWVzKVxuXHRcdH07XG5cdH0sXG5cblx0Z2V0VmFsdWVzOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gWyB0aGlzLl9hLCB0aGlzLl9iLCB0aGlzLl9jLCB0aGlzLl9kLCB0aGlzLl90eCwgdGhpcy5fdHkgXTtcblx0fSxcblxuXHRnZXRUcmFuc2xhdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIG5ldyBQb2ludCh0aGlzLl90eCwgdGhpcy5fdHkpO1xuXHR9LFxuXG5cdGdldFNjYWxpbmc6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmRlY29tcG9zZSgpLnNjYWxpbmc7XG5cdH0sXG5cblx0Z2V0Um90YXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmRlY29tcG9zZSgpLnJvdGF0aW9uO1xuXHR9LFxuXG5cdGFwcGx5VG9Db250ZXh0OiBmdW5jdGlvbihjdHgpIHtcblx0XHRpZiAoIXRoaXMuaXNJZGVudGl0eSgpKSB7XG5cdFx0XHRjdHgudHJhbnNmb3JtKHRoaXMuX2EsIHRoaXMuX2IsIHRoaXMuX2MsIHRoaXMuX2QsXG5cdFx0XHRcdFx0dGhpcy5fdHgsIHRoaXMuX3R5KTtcblx0XHR9XG5cdH1cbn0sIEJhc2UuZWFjaChbJ2EnLCAnYicsICdjJywgJ2QnLCAndHgnLCAndHknXSwgZnVuY3Rpb24oa2V5KSB7XG5cdHZhciBwYXJ0ID0gQmFzZS5jYXBpdGFsaXplKGtleSksXG5cdFx0cHJvcCA9ICdfJyArIGtleTtcblx0dGhpc1snZ2V0JyArIHBhcnRdID0gZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXNbcHJvcF07XG5cdH07XG5cdHRoaXNbJ3NldCcgKyBwYXJ0XSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG5cdFx0dGhpc1twcm9wXSA9IHZhbHVlO1xuXHRcdHRoaXMuX2NoYW5nZWQoKTtcblx0fTtcbn0sIHt9KSk7XG5cbnZhciBMaW5lID0gQmFzZS5leHRlbmQoe1xuXHRfY2xhc3M6ICdMaW5lJyxcblxuXHRpbml0aWFsaXplOiBmdW5jdGlvbiBMaW5lKGFyZzAsIGFyZzEsIGFyZzIsIGFyZzMsIGFyZzQpIHtcblx0XHR2YXIgYXNWZWN0b3IgPSBmYWxzZTtcblx0XHRpZiAoYXJndW1lbnRzLmxlbmd0aCA+PSA0KSB7XG5cdFx0XHR0aGlzLl9weCA9IGFyZzA7XG5cdFx0XHR0aGlzLl9weSA9IGFyZzE7XG5cdFx0XHR0aGlzLl92eCA9IGFyZzI7XG5cdFx0XHR0aGlzLl92eSA9IGFyZzM7XG5cdFx0XHRhc1ZlY3RvciA9IGFyZzQ7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMuX3B4ID0gYXJnMC54O1xuXHRcdFx0dGhpcy5fcHkgPSBhcmcwLnk7XG5cdFx0XHR0aGlzLl92eCA9IGFyZzEueDtcblx0XHRcdHRoaXMuX3Z5ID0gYXJnMS55O1xuXHRcdFx0YXNWZWN0b3IgPSBhcmcyO1xuXHRcdH1cblx0XHRpZiAoIWFzVmVjdG9yKSB7XG5cdFx0XHR0aGlzLl92eCAtPSB0aGlzLl9weDtcblx0XHRcdHRoaXMuX3Z5IC09IHRoaXMuX3B5O1xuXHRcdH1cblx0fSxcblxuXHRnZXRQb2ludDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIG5ldyBQb2ludCh0aGlzLl9weCwgdGhpcy5fcHkpO1xuXHR9LFxuXG5cdGdldFZlY3RvcjogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIG5ldyBQb2ludCh0aGlzLl92eCwgdGhpcy5fdnkpO1xuXHR9LFxuXG5cdGdldExlbmd0aDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuZ2V0VmVjdG9yKCkuZ2V0TGVuZ3RoKCk7XG5cdH0sXG5cblx0aW50ZXJzZWN0OiBmdW5jdGlvbihsaW5lLCBpc0luZmluaXRlKSB7XG5cdFx0cmV0dXJuIExpbmUuaW50ZXJzZWN0KFxuXHRcdFx0XHR0aGlzLl9weCwgdGhpcy5fcHksIHRoaXMuX3Z4LCB0aGlzLl92eSxcblx0XHRcdFx0bGluZS5fcHgsIGxpbmUuX3B5LCBsaW5lLl92eCwgbGluZS5fdnksXG5cdFx0XHRcdHRydWUsIGlzSW5maW5pdGUpO1xuXHR9LFxuXG5cdGdldFNpZGU6IGZ1bmN0aW9uKHBvaW50LCBpc0luZmluaXRlKSB7XG5cdFx0cmV0dXJuIExpbmUuZ2V0U2lkZShcblx0XHRcdFx0dGhpcy5fcHgsIHRoaXMuX3B5LCB0aGlzLl92eCwgdGhpcy5fdnksXG5cdFx0XHRcdHBvaW50LngsIHBvaW50LnksIHRydWUsIGlzSW5maW5pdGUpO1xuXHR9LFxuXG5cdGdldERpc3RhbmNlOiBmdW5jdGlvbihwb2ludCkge1xuXHRcdHJldHVybiBNYXRoLmFicyh0aGlzLmdldFNpZ25lZERpc3RhbmNlKHBvaW50KSk7XG5cdH0sXG5cblx0Z2V0U2lnbmVkRGlzdGFuY2U6IGZ1bmN0aW9uKHBvaW50KSB7XG5cdFx0cmV0dXJuIExpbmUuZ2V0U2lnbmVkRGlzdGFuY2UodGhpcy5fcHgsIHRoaXMuX3B5LCB0aGlzLl92eCwgdGhpcy5fdnksXG5cdFx0XHRcdHBvaW50LngsIHBvaW50LnksIHRydWUpO1xuXHR9LFxuXG5cdGlzQ29sbGluZWFyOiBmdW5jdGlvbihsaW5lKSB7XG5cdFx0cmV0dXJuIFBvaW50LmlzQ29sbGluZWFyKHRoaXMuX3Z4LCB0aGlzLl92eSwgbGluZS5fdngsIGxpbmUuX3Z5KTtcblx0fSxcblxuXHRpc09ydGhvZ29uYWw6IGZ1bmN0aW9uKGxpbmUpIHtcblx0XHRyZXR1cm4gUG9pbnQuaXNPcnRob2dvbmFsKHRoaXMuX3Z4LCB0aGlzLl92eSwgbGluZS5fdngsIGxpbmUuX3Z5KTtcblx0fSxcblxuXHRzdGF0aWNzOiB7XG5cdFx0aW50ZXJzZWN0OiBmdW5jdGlvbihwMXgsIHAxeSwgdjF4LCB2MXksIHAyeCwgcDJ5LCB2MngsIHYyeSwgYXNWZWN0b3IsXG5cdFx0XHRcdGlzSW5maW5pdGUpIHtcblx0XHRcdGlmICghYXNWZWN0b3IpIHtcblx0XHRcdFx0djF4IC09IHAxeDtcblx0XHRcdFx0djF5IC09IHAxeTtcblx0XHRcdFx0djJ4IC09IHAyeDtcblx0XHRcdFx0djJ5IC09IHAyeTtcblx0XHRcdH1cblx0XHRcdHZhciBjcm9zcyA9IHYxeCAqIHYyeSAtIHYxeSAqIHYyeDtcblx0XHRcdGlmICghTnVtZXJpY2FsLmlzWmVybyhjcm9zcykpIHtcblx0XHRcdFx0dmFyIGR4ID0gcDF4IC0gcDJ4LFxuXHRcdFx0XHRcdGR5ID0gcDF5IC0gcDJ5LFxuXHRcdFx0XHRcdHUxID0gKHYyeCAqIGR5IC0gdjJ5ICogZHgpIC8gY3Jvc3MsXG5cdFx0XHRcdFx0dTIgPSAodjF4ICogZHkgLSB2MXkgKiBkeCkgLyBjcm9zcyxcblx0XHRcdFx0XHRlcHNpbG9uID0gMWUtMTIsXG5cdFx0XHRcdFx0dU1pbiA9IC1lcHNpbG9uLFxuXHRcdFx0XHRcdHVNYXggPSAxICsgZXBzaWxvbjtcblx0XHRcdFx0aWYgKGlzSW5maW5pdGVcblx0XHRcdFx0XHRcdHx8IHVNaW4gPCB1MSAmJiB1MSA8IHVNYXggJiYgdU1pbiA8IHUyICYmIHUyIDwgdU1heCkge1xuXHRcdFx0XHRcdGlmICghaXNJbmZpbml0ZSkge1xuXHRcdFx0XHRcdFx0dTEgPSB1MSA8PSAwID8gMCA6IHUxID49IDEgPyAxIDogdTE7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiBuZXcgUG9pbnQoXG5cdFx0XHRcdFx0XHRcdHAxeCArIHUxICogdjF4LFxuXHRcdFx0XHRcdFx0XHRwMXkgKyB1MSAqIHYxeSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0Z2V0U2lkZTogZnVuY3Rpb24ocHgsIHB5LCB2eCwgdnksIHgsIHksIGFzVmVjdG9yLCBpc0luZmluaXRlKSB7XG5cdFx0XHRpZiAoIWFzVmVjdG9yKSB7XG5cdFx0XHRcdHZ4IC09IHB4O1xuXHRcdFx0XHR2eSAtPSBweTtcblx0XHRcdH1cblx0XHRcdHZhciB2MnggPSB4IC0gcHgsXG5cdFx0XHRcdHYyeSA9IHkgLSBweSxcblx0XHRcdFx0Y2N3ID0gdjJ4ICogdnkgLSB2MnkgKiB2eDtcblx0XHRcdGlmICghaXNJbmZpbml0ZSAmJiBOdW1lcmljYWwuaXNaZXJvKGNjdykpIHtcblx0XHRcdFx0Y2N3ID0gKHYyeCAqIHZ4ICsgdjJ4ICogdngpIC8gKHZ4ICogdnggKyB2eSAqIHZ5KTtcblx0XHRcdFx0aWYgKGNjdyA+PSAwICYmIGNjdyA8PSAxKVxuXHRcdFx0XHRcdGNjdyA9IDA7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gY2N3IDwgMCA/IC0xIDogY2N3ID4gMCA/IDEgOiAwO1xuXHRcdH0sXG5cblx0XHRnZXRTaWduZWREaXN0YW5jZTogZnVuY3Rpb24ocHgsIHB5LCB2eCwgdnksIHgsIHksIGFzVmVjdG9yKSB7XG5cdFx0XHRpZiAoIWFzVmVjdG9yKSB7XG5cdFx0XHRcdHZ4IC09IHB4O1xuXHRcdFx0XHR2eSAtPSBweTtcblx0XHRcdH1cblx0XHRcdHJldHVybiB2eCA9PT0gMCA/IHZ5ID4gMCA/IHggLSBweCA6IHB4IC0geFxuXHRcdFx0XHQgOiB2eSA9PT0gMCA/IHZ4IDwgMCA/IHkgLSBweSA6IHB5IC0geVxuXHRcdFx0XHQgOiAoKHgtcHgpICogdnkgLSAoeS1weSkgKiB2eCkgLyBNYXRoLnNxcnQodnggKiB2eCArIHZ5ICogdnkpO1xuXHRcdH0sXG5cblx0XHRnZXREaXN0YW5jZTogZnVuY3Rpb24ocHgsIHB5LCB2eCwgdnksIHgsIHksIGFzVmVjdG9yKSB7XG5cdFx0XHRyZXR1cm4gTWF0aC5hYnMoXG5cdFx0XHRcdFx0TGluZS5nZXRTaWduZWREaXN0YW5jZShweCwgcHksIHZ4LCB2eSwgeCwgeSwgYXNWZWN0b3IpKTtcblx0XHR9XG5cdH1cbn0pO1xuXG52YXIgUHJvamVjdCA9IFBhcGVyU2NvcGVJdGVtLmV4dGVuZCh7XG5cdF9jbGFzczogJ1Byb2plY3QnLFxuXHRfbGlzdDogJ3Byb2plY3RzJyxcblx0X3JlZmVyZW5jZTogJ3Byb2plY3QnLFxuXHRfY29tcGFjdFNlcmlhbGl6ZTogdHJ1ZSxcblxuXHRpbml0aWFsaXplOiBmdW5jdGlvbiBQcm9qZWN0KGVsZW1lbnQpIHtcblx0XHRQYXBlclNjb3BlSXRlbS5jYWxsKHRoaXMsIHRydWUpO1xuXHRcdHRoaXMuX2NoaWxkcmVuID0gW107XG5cdFx0dGhpcy5fbmFtZWRDaGlsZHJlbiA9IHt9O1xuXHRcdHRoaXMuX2FjdGl2ZUxheWVyID0gbnVsbDtcblx0XHR0aGlzLl9jdXJyZW50U3R5bGUgPSBuZXcgU3R5bGUobnVsbCwgbnVsbCwgdGhpcyk7XG5cdFx0dGhpcy5fdmlldyA9IFZpZXcuY3JlYXRlKHRoaXMsXG5cdFx0XHRcdGVsZW1lbnQgfHwgQ2FudmFzUHJvdmlkZXIuZ2V0Q2FudmFzKDEsIDEpKTtcblx0XHR0aGlzLl9zZWxlY3Rpb25JdGVtcyA9IHt9O1xuXHRcdHRoaXMuX3NlbGVjdGlvbkNvdW50ID0gMDtcblx0XHR0aGlzLl91cGRhdGVWZXJzaW9uID0gMDtcblx0fSxcblxuXHRfc2VyaWFsaXplOiBmdW5jdGlvbihvcHRpb25zLCBkaWN0aW9uYXJ5KSB7XG5cdFx0cmV0dXJuIEJhc2Uuc2VyaWFsaXplKHRoaXMuX2NoaWxkcmVuLCBvcHRpb25zLCB0cnVlLCBkaWN0aW9uYXJ5KTtcblx0fSxcblxuXHRfY2hhbmdlZDogZnVuY3Rpb24oZmxhZ3MsIGl0ZW0pIHtcblx0XHRpZiAoZmxhZ3MgJiAxKSB7XG5cdFx0XHR2YXIgdmlldyA9IHRoaXMuX3ZpZXc7XG5cdFx0XHRpZiAodmlldykge1xuXHRcdFx0XHR2aWV3Ll9uZWVkc1VwZGF0ZSA9IHRydWU7XG5cdFx0XHRcdGlmICghdmlldy5fcmVxdWVzdGVkICYmIHZpZXcuX2F1dG9VcGRhdGUpXG5cdFx0XHRcdFx0dmlldy5yZXF1ZXN0VXBkYXRlKCk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHZhciBjaGFuZ2VzID0gdGhpcy5fY2hhbmdlcztcblx0XHRpZiAoY2hhbmdlcyAmJiBpdGVtKSB7XG5cdFx0XHR2YXIgY2hhbmdlc0J5SWQgPSB0aGlzLl9jaGFuZ2VzQnlJZCxcblx0XHRcdFx0aWQgPSBpdGVtLl9pZCxcblx0XHRcdFx0ZW50cnkgPSBjaGFuZ2VzQnlJZFtpZF07XG5cdFx0XHRpZiAoZW50cnkpIHtcblx0XHRcdFx0ZW50cnkuZmxhZ3MgfD0gZmxhZ3M7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjaGFuZ2VzLnB1c2goY2hhbmdlc0J5SWRbaWRdID0geyBpdGVtOiBpdGVtLCBmbGFnczogZmxhZ3MgfSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdGNsZWFyOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgY2hpbGRyZW4gPSB0aGlzLl9jaGlsZHJlbjtcblx0XHRmb3IgKHZhciBpID0gY2hpbGRyZW4ubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pXG5cdFx0XHRjaGlsZHJlbltpXS5yZW1vdmUoKTtcblx0fSxcblxuXHRpc0VtcHR5OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gIXRoaXMuX2NoaWxkcmVuLmxlbmd0aDtcblx0fSxcblxuXHRyZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcblx0XHRpZiAoIXJlbW92ZS5iYXNlLmNhbGwodGhpcykpXG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0aWYgKHRoaXMuX3ZpZXcpXG5cdFx0XHR0aGlzLl92aWV3LnJlbW92ZSgpO1xuXHRcdHJldHVybiB0cnVlO1xuXHR9LFxuXG5cdGdldFZpZXc6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLl92aWV3O1xuXHR9LFxuXG5cdGdldEN1cnJlbnRTdHlsZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuX2N1cnJlbnRTdHlsZTtcblx0fSxcblxuXHRzZXRDdXJyZW50U3R5bGU6IGZ1bmN0aW9uKHN0eWxlKSB7XG5cdFx0dGhpcy5fY3VycmVudFN0eWxlLnNldChzdHlsZSk7XG5cdH0sXG5cblx0Z2V0SW5kZXg6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLl9pbmRleDtcblx0fSxcblxuXHRnZXRPcHRpb25zOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5fc2NvcGUuc2V0dGluZ3M7XG5cdH0sXG5cblx0Z2V0TGF5ZXJzOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5fY2hpbGRyZW47XG5cdH0sXG5cblx0Z2V0QWN0aXZlTGF5ZXI6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLl9hY3RpdmVMYXllciB8fCBuZXcgTGF5ZXIoeyBwcm9qZWN0OiB0aGlzLCBpbnNlcnQ6IHRydWUgfSk7XG5cdH0sXG5cblx0Z2V0U3ltYm9sRGVmaW5pdGlvbnM6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBkZWZpbml0aW9ucyA9IFtdLFxuXHRcdFx0aWRzID0ge307XG5cdFx0dGhpcy5nZXRJdGVtcyh7XG5cdFx0XHRjbGFzczogU3ltYm9sSXRlbSxcblx0XHRcdG1hdGNoOiBmdW5jdGlvbihpdGVtKSB7XG5cdFx0XHRcdHZhciBkZWZpbml0aW9uID0gaXRlbS5fZGVmaW5pdGlvbixcblx0XHRcdFx0XHRpZCA9IGRlZmluaXRpb24uX2lkO1xuXHRcdFx0XHRpZiAoIWlkc1tpZF0pIHtcblx0XHRcdFx0XHRpZHNbaWRdID0gdHJ1ZTtcblx0XHRcdFx0XHRkZWZpbml0aW9ucy5wdXNoKGRlZmluaXRpb24pO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRyZXR1cm4gZGVmaW5pdGlvbnM7XG5cdH0sXG5cblx0Z2V0U3ltYm9sczogJ2dldFN5bWJvbERlZmluaXRpb25zJyxcblxuXHRnZXRTZWxlY3RlZEl0ZW1zOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgc2VsZWN0aW9uSXRlbXMgPSB0aGlzLl9zZWxlY3Rpb25JdGVtcyxcblx0XHRcdGl0ZW1zID0gW107XG5cdFx0Zm9yICh2YXIgaWQgaW4gc2VsZWN0aW9uSXRlbXMpIHtcblx0XHRcdHZhciBpdGVtID0gc2VsZWN0aW9uSXRlbXNbaWRdLFxuXHRcdFx0XHRzZWxlY3Rpb24gPSBpdGVtLl9zZWxlY3Rpb247XG5cdFx0XHRpZiAoKHNlbGVjdGlvbiAmIDEpICYmIGl0ZW0uaXNJbnNlcnRlZCgpKSB7XG5cdFx0XHRcdGl0ZW1zLnB1c2goaXRlbSk7XG5cdFx0XHR9IGVsc2UgaWYgKCFzZWxlY3Rpb24pIHtcblx0XHRcdFx0dGhpcy5fdXBkYXRlU2VsZWN0aW9uKGl0ZW0pO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gaXRlbXM7XG5cdH0sXG5cblx0X3VwZGF0ZVNlbGVjdGlvbjogZnVuY3Rpb24oaXRlbSkge1xuXHRcdHZhciBpZCA9IGl0ZW0uX2lkLFxuXHRcdFx0c2VsZWN0aW9uSXRlbXMgPSB0aGlzLl9zZWxlY3Rpb25JdGVtcztcblx0XHRpZiAoaXRlbS5fc2VsZWN0aW9uKSB7XG5cdFx0XHRpZiAoc2VsZWN0aW9uSXRlbXNbaWRdICE9PSBpdGVtKSB7XG5cdFx0XHRcdHRoaXMuX3NlbGVjdGlvbkNvdW50Kys7XG5cdFx0XHRcdHNlbGVjdGlvbkl0ZW1zW2lkXSA9IGl0ZW07XG5cdFx0XHR9XG5cdFx0fSBlbHNlIGlmIChzZWxlY3Rpb25JdGVtc1tpZF0gPT09IGl0ZW0pIHtcblx0XHRcdHRoaXMuX3NlbGVjdGlvbkNvdW50LS07XG5cdFx0XHRkZWxldGUgc2VsZWN0aW9uSXRlbXNbaWRdO1xuXHRcdH1cblx0fSxcblxuXHRzZWxlY3RBbGw6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBjaGlsZHJlbiA9IHRoaXMuX2NoaWxkcmVuO1xuXHRcdGZvciAodmFyIGkgPSAwLCBsID0gY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSsrKVxuXHRcdFx0Y2hpbGRyZW5baV0uc2V0RnVsbHlTZWxlY3RlZCh0cnVlKTtcblx0fSxcblxuXHRkZXNlbGVjdEFsbDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIHNlbGVjdGlvbkl0ZW1zID0gdGhpcy5fc2VsZWN0aW9uSXRlbXM7XG5cdFx0Zm9yICh2YXIgaSBpbiBzZWxlY3Rpb25JdGVtcylcblx0XHRcdHNlbGVjdGlvbkl0ZW1zW2ldLnNldEZ1bGx5U2VsZWN0ZWQoZmFsc2UpO1xuXHR9LFxuXG5cdGFkZExheWVyOiBmdW5jdGlvbihsYXllcikge1xuXHRcdHJldHVybiB0aGlzLmluc2VydExheWVyKHVuZGVmaW5lZCwgbGF5ZXIpO1xuXHR9LFxuXG5cdGluc2VydExheWVyOiBmdW5jdGlvbihpbmRleCwgbGF5ZXIpIHtcblx0XHRpZiAobGF5ZXIgaW5zdGFuY2VvZiBMYXllcikge1xuXHRcdFx0bGF5ZXIuX3JlbW92ZShmYWxzZSwgdHJ1ZSk7XG5cdFx0XHRCYXNlLnNwbGljZSh0aGlzLl9jaGlsZHJlbiwgW2xheWVyXSwgaW5kZXgsIDApO1xuXHRcdFx0bGF5ZXIuX3NldFByb2plY3QodGhpcywgdHJ1ZSk7XG5cdFx0XHR2YXIgbmFtZSA9IGxheWVyLl9uYW1lO1xuXHRcdFx0aWYgKG5hbWUpXG5cdFx0XHRcdGxheWVyLnNldE5hbWUobmFtZSk7XG5cdFx0XHRpZiAodGhpcy5fY2hhbmdlcylcblx0XHRcdFx0bGF5ZXIuX2NoYW5nZWQoNSk7XG5cdFx0XHRpZiAoIXRoaXMuX2FjdGl2ZUxheWVyKVxuXHRcdFx0XHR0aGlzLl9hY3RpdmVMYXllciA9IGxheWVyO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRsYXllciA9IG51bGw7XG5cdFx0fVxuXHRcdHJldHVybiBsYXllcjtcblx0fSxcblxuXHRfaW5zZXJ0SXRlbTogZnVuY3Rpb24oaW5kZXgsIGl0ZW0sIF9jcmVhdGVkKSB7XG5cdFx0aXRlbSA9IHRoaXMuaW5zZXJ0TGF5ZXIoaW5kZXgsIGl0ZW0pXG5cdFx0XHRcdHx8ICh0aGlzLl9hY3RpdmVMYXllciB8fCB0aGlzLl9pbnNlcnRJdGVtKHVuZGVmaW5lZCxcblx0XHRcdFx0XHRcdG5ldyBMYXllcihJdGVtLk5PX0lOU0VSVCksIHRydWUpKVxuXHRcdFx0XHRcdFx0Lmluc2VydENoaWxkKGluZGV4LCBpdGVtKTtcblx0XHRpZiAoX2NyZWF0ZWQgJiYgaXRlbS5hY3RpdmF0ZSlcblx0XHRcdGl0ZW0uYWN0aXZhdGUoKTtcblx0XHRyZXR1cm4gaXRlbTtcblx0fSxcblxuXHRnZXRJdGVtczogZnVuY3Rpb24ob3B0aW9ucykge1xuXHRcdHJldHVybiBJdGVtLl9nZXRJdGVtcyh0aGlzLCBvcHRpb25zKTtcblx0fSxcblxuXHRnZXRJdGVtOiBmdW5jdGlvbihvcHRpb25zKSB7XG5cdFx0cmV0dXJuIEl0ZW0uX2dldEl0ZW1zKHRoaXMsIG9wdGlvbnMsIG51bGwsIG51bGwsIHRydWUpWzBdIHx8IG51bGw7XG5cdH0sXG5cblx0aW1wb3J0SlNPTjogZnVuY3Rpb24oanNvbikge1xuXHRcdHRoaXMuYWN0aXZhdGUoKTtcblx0XHR2YXIgbGF5ZXIgPSB0aGlzLl9hY3RpdmVMYXllcjtcblx0XHRyZXR1cm4gQmFzZS5pbXBvcnRKU09OKGpzb24sIGxheWVyICYmIGxheWVyLmlzRW1wdHkoKSAmJiBsYXllcik7XG5cdH0sXG5cblx0cmVtb3ZlT246IGZ1bmN0aW9uKHR5cGUpIHtcblx0XHR2YXIgc2V0cyA9IHRoaXMuX3JlbW92ZVNldHM7XG5cdFx0aWYgKHNldHMpIHtcblx0XHRcdGlmICh0eXBlID09PSAnbW91c2V1cCcpXG5cdFx0XHRcdHNldHMubW91c2VkcmFnID0gbnVsbDtcblx0XHRcdHZhciBzZXQgPSBzZXRzW3R5cGVdO1xuXHRcdFx0aWYgKHNldCkge1xuXHRcdFx0XHRmb3IgKHZhciBpZCBpbiBzZXQpIHtcblx0XHRcdFx0XHR2YXIgaXRlbSA9IHNldFtpZF07XG5cdFx0XHRcdFx0Zm9yICh2YXIga2V5IGluIHNldHMpIHtcblx0XHRcdFx0XHRcdHZhciBvdGhlciA9IHNldHNba2V5XTtcblx0XHRcdFx0XHRcdGlmIChvdGhlciAmJiBvdGhlciAhPSBzZXQpXG5cdFx0XHRcdFx0XHRcdGRlbGV0ZSBvdGhlcltpdGVtLl9pZF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGl0ZW0ucmVtb3ZlKCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0c2V0c1t0eXBlXSA9IG51bGw7XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdGRyYXc6IGZ1bmN0aW9uKGN0eCwgbWF0cml4LCBwaXhlbFJhdGlvKSB7XG5cdFx0dGhpcy5fdXBkYXRlVmVyc2lvbisrO1xuXHRcdGN0eC5zYXZlKCk7XG5cdFx0bWF0cml4LmFwcGx5VG9Db250ZXh0KGN0eCk7XG5cdFx0dmFyIGNoaWxkcmVuID0gdGhpcy5fY2hpbGRyZW4sXG5cdFx0XHRwYXJhbSA9IG5ldyBCYXNlKHtcblx0XHRcdFx0b2Zmc2V0OiBuZXcgUG9pbnQoMCwgMCksXG5cdFx0XHRcdHBpeGVsUmF0aW86IHBpeGVsUmF0aW8sXG5cdFx0XHRcdHZpZXdNYXRyaXg6IG1hdHJpeC5pc0lkZW50aXR5KCkgPyBudWxsIDogbWF0cml4LFxuXHRcdFx0XHRtYXRyaWNlczogW25ldyBNYXRyaXgoKV0sXG5cdFx0XHRcdHVwZGF0ZU1hdHJpeDogdHJ1ZVxuXHRcdFx0fSk7XG5cdFx0Zm9yICh2YXIgaSA9IDAsIGwgPSBjaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpKyspIHtcblx0XHRcdGNoaWxkcmVuW2ldLmRyYXcoY3R4LCBwYXJhbSk7XG5cdFx0fVxuXHRcdGN0eC5yZXN0b3JlKCk7XG5cblx0XHRpZiAodGhpcy5fc2VsZWN0aW9uQ291bnQgPiAwKSB7XG5cdFx0XHRjdHguc2F2ZSgpO1xuXHRcdFx0Y3R4LnN0cm9rZVdpZHRoID0gMTtcblx0XHRcdHZhciBpdGVtcyA9IHRoaXMuX3NlbGVjdGlvbkl0ZW1zLFxuXHRcdFx0XHRzaXplID0gdGhpcy5fc2NvcGUuc2V0dGluZ3MuaGFuZGxlU2l6ZSxcblx0XHRcdFx0dmVyc2lvbiA9IHRoaXMuX3VwZGF0ZVZlcnNpb247XG5cdFx0XHRmb3IgKHZhciBpZCBpbiBpdGVtcykge1xuXHRcdFx0XHRpdGVtc1tpZF0uX2RyYXdTZWxlY3Rpb24oY3R4LCBtYXRyaXgsIHNpemUsIGl0ZW1zLCB2ZXJzaW9uKTtcblx0XHRcdH1cblx0XHRcdGN0eC5yZXN0b3JlKCk7XG5cdFx0fVxuXHR9XG59KTtcblxudmFyIEl0ZW0gPSBCYXNlLmV4dGVuZChFbWl0dGVyLCB7XG5cdHN0YXRpY3M6IHtcblx0XHRleHRlbmQ6IGZ1bmN0aW9uIGV4dGVuZChzcmMpIHtcblx0XHRcdGlmIChzcmMuX3NlcmlhbGl6ZUZpZWxkcylcblx0XHRcdFx0c3JjLl9zZXJpYWxpemVGaWVsZHMgPSBCYXNlLnNldCh7fSxcblx0XHRcdFx0XHR0aGlzLnByb3RvdHlwZS5fc2VyaWFsaXplRmllbGRzLCBzcmMuX3NlcmlhbGl6ZUZpZWxkcyk7XG5cdFx0XHRyZXR1cm4gZXh0ZW5kLmJhc2UuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblx0XHR9LFxuXG5cdFx0Tk9fSU5TRVJUOiB7IGluc2VydDogZmFsc2UgfVxuXHR9LFxuXG5cdF9jbGFzczogJ0l0ZW0nLFxuXHRfbmFtZTogbnVsbCxcblx0X2FwcGx5TWF0cml4OiB0cnVlLFxuXHRfY2FuQXBwbHlNYXRyaXg6IHRydWUsXG5cdF9jYW5TY2FsZVN0cm9rZTogZmFsc2UsXG5cdF9waXZvdDogbnVsbCxcblx0X3Zpc2libGU6IHRydWUsXG5cdF9ibGVuZE1vZGU6ICdub3JtYWwnLFxuXHRfb3BhY2l0eTogMSxcblx0X2xvY2tlZDogZmFsc2UsXG5cdF9ndWlkZTogZmFsc2UsXG5cdF9jbGlwTWFzazogZmFsc2UsXG5cdF9zZWxlY3Rpb246IDAsXG5cdF9zZWxlY3RCb3VuZHM6IHRydWUsXG5cdF9zZWxlY3RDaGlsZHJlbjogZmFsc2UsXG5cdF9zZXJpYWxpemVGaWVsZHM6IHtcblx0XHRuYW1lOiBudWxsLFxuXHRcdGFwcGx5TWF0cml4OiBudWxsLFxuXHRcdG1hdHJpeDogbmV3IE1hdHJpeCgpLFxuXHRcdHBpdm90OiBudWxsLFxuXHRcdHZpc2libGU6IHRydWUsXG5cdFx0YmxlbmRNb2RlOiAnbm9ybWFsJyxcblx0XHRvcGFjaXR5OiAxLFxuXHRcdGxvY2tlZDogZmFsc2UsXG5cdFx0Z3VpZGU6IGZhbHNlLFxuXHRcdGNsaXBNYXNrOiBmYWxzZSxcblx0XHRzZWxlY3RlZDogZmFsc2UsXG5cdFx0ZGF0YToge31cblx0fSxcblx0X3ByaW9yaXRpemU6IFsnYXBwbHlNYXRyaXgnXVxufSxcbm5ldyBmdW5jdGlvbigpIHtcblx0dmFyIGhhbmRsZXJzID0gWydvbk1vdXNlRG93bicsICdvbk1vdXNlVXAnLCAnb25Nb3VzZURyYWcnLCAnb25DbGljaycsXG5cdFx0XHQnb25Eb3VibGVDbGljaycsICdvbk1vdXNlTW92ZScsICdvbk1vdXNlRW50ZXInLCAnb25Nb3VzZUxlYXZlJ107XG5cdHJldHVybiBCYXNlLmVhY2goaGFuZGxlcnMsXG5cdFx0ZnVuY3Rpb24obmFtZSkge1xuXHRcdFx0dGhpcy5fZXZlbnRzW25hbWVdID0ge1xuXHRcdFx0XHRpbnN0YWxsOiBmdW5jdGlvbih0eXBlKSB7XG5cdFx0XHRcdFx0dGhpcy5nZXRWaWV3KCkuX2NvdW50SXRlbUV2ZW50KHR5cGUsIDEpO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdHVuaW5zdGFsbDogZnVuY3Rpb24odHlwZSkge1xuXHRcdFx0XHRcdHRoaXMuZ2V0VmlldygpLl9jb3VudEl0ZW1FdmVudCh0eXBlLCAtMSk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0fSwge1xuXHRcdFx0X2V2ZW50czoge1xuXHRcdFx0XHRvbkZyYW1lOiB7XG5cdFx0XHRcdFx0aW5zdGFsbDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHR0aGlzLmdldFZpZXcoKS5fYW5pbWF0ZUl0ZW0odGhpcywgdHJ1ZSk7XG5cdFx0XHRcdFx0fSxcblxuXHRcdFx0XHRcdHVuaW5zdGFsbDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHR0aGlzLmdldFZpZXcoKS5fYW5pbWF0ZUl0ZW0odGhpcywgZmFsc2UpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSxcblxuXHRcdFx0XHRvbkxvYWQ6IHt9LFxuXHRcdFx0XHRvbkVycm9yOiB7fVxuXHRcdFx0fSxcblx0XHRcdHN0YXRpY3M6IHtcblx0XHRcdFx0X2l0ZW1IYW5kbGVyczogaGFuZGxlcnNcblx0XHRcdH1cblx0XHR9XG5cdCk7XG59LCB7XG5cdGluaXRpYWxpemU6IGZ1bmN0aW9uIEl0ZW0oKSB7XG5cdH0sXG5cblx0X2luaXRpYWxpemU6IGZ1bmN0aW9uKHByb3BzLCBwb2ludCkge1xuXHRcdHZhciBoYXNQcm9wcyA9IHByb3BzICYmIEJhc2UuaXNQbGFpbk9iamVjdChwcm9wcyksXG5cdFx0XHRpbnRlcm5hbCA9IGhhc1Byb3BzICYmIHByb3BzLmludGVybmFsID09PSB0cnVlLFxuXHRcdFx0bWF0cml4ID0gdGhpcy5fbWF0cml4ID0gbmV3IE1hdHJpeCgpLFxuXHRcdFx0cHJvamVjdCA9IGhhc1Byb3BzICYmIHByb3BzLnByb2plY3QgfHwgcGFwZXIucHJvamVjdCxcblx0XHRcdHNldHRpbmdzID0gcGFwZXIuc2V0dGluZ3M7XG5cdFx0dGhpcy5faWQgPSBpbnRlcm5hbCA/IG51bGwgOiBVSUQuZ2V0KCk7XG5cdFx0dGhpcy5fcGFyZW50ID0gdGhpcy5faW5kZXggPSBudWxsO1xuXHRcdHRoaXMuX2FwcGx5TWF0cml4ID0gdGhpcy5fY2FuQXBwbHlNYXRyaXggJiYgc2V0dGluZ3MuYXBwbHlNYXRyaXg7XG5cdFx0aWYgKHBvaW50KVxuXHRcdFx0bWF0cml4LnRyYW5zbGF0ZShwb2ludCk7XG5cdFx0bWF0cml4Ll9vd25lciA9IHRoaXM7XG5cdFx0dGhpcy5fc3R5bGUgPSBuZXcgU3R5bGUocHJvamVjdC5fY3VycmVudFN0eWxlLCB0aGlzLCBwcm9qZWN0KTtcblx0XHRpZiAoaW50ZXJuYWwgfHwgaGFzUHJvcHMgJiYgcHJvcHMuaW5zZXJ0ID09IGZhbHNlXG5cdFx0XHR8fCAhc2V0dGluZ3MuaW5zZXJ0SXRlbXMgJiYgIShoYXNQcm9wcyAmJiBwcm9wcy5pbnNlcnQgPT09IHRydWUpKSB7XG5cdFx0XHR0aGlzLl9zZXRQcm9qZWN0KHByb2plY3QpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQoaGFzUHJvcHMgJiYgcHJvcHMucGFyZW50IHx8IHByb2plY3QpXG5cdFx0XHRcdFx0Ll9pbnNlcnRJdGVtKHVuZGVmaW5lZCwgdGhpcywgdHJ1ZSk7XG5cdFx0fVxuXHRcdGlmIChoYXNQcm9wcyAmJiBwcm9wcyAhPT0gSXRlbS5OT19JTlNFUlQpIHtcblx0XHRcdHRoaXMuc2V0KHByb3BzLCB7XG5cdFx0XHRcdGludGVybmFsOiB0cnVlLCBpbnNlcnQ6IHRydWUsIHByb2plY3Q6IHRydWUsIHBhcmVudDogdHJ1ZVxuXHRcdFx0fSk7XG5cdFx0fVxuXHRcdHJldHVybiBoYXNQcm9wcztcblx0fSxcblxuXHRfc2VyaWFsaXplOiBmdW5jdGlvbihvcHRpb25zLCBkaWN0aW9uYXJ5KSB7XG5cdFx0dmFyIHByb3BzID0ge30sXG5cdFx0XHR0aGF0ID0gdGhpcztcblxuXHRcdGZ1bmN0aW9uIHNlcmlhbGl6ZShmaWVsZHMpIHtcblx0XHRcdGZvciAodmFyIGtleSBpbiBmaWVsZHMpIHtcblx0XHRcdFx0dmFyIHZhbHVlID0gdGhhdFtrZXldO1xuXHRcdFx0XHRpZiAoIUJhc2UuZXF1YWxzKHZhbHVlLCBrZXkgPT09ICdsZWFkaW5nJ1xuXHRcdFx0XHRcdFx0PyBmaWVsZHMuZm9udFNpemUgKiAxLjIgOiBmaWVsZHNba2V5XSkpIHtcblx0XHRcdFx0XHRwcm9wc1trZXldID0gQmFzZS5zZXJpYWxpemUodmFsdWUsIG9wdGlvbnMsXG5cdFx0XHRcdFx0XHRcdGtleSAhPT0gJ2RhdGEnLCBkaWN0aW9uYXJ5KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHNlcmlhbGl6ZSh0aGlzLl9zZXJpYWxpemVGaWVsZHMpO1xuXHRcdGlmICghKHRoaXMgaW5zdGFuY2VvZiBHcm91cCkpXG5cdFx0XHRzZXJpYWxpemUodGhpcy5fc3R5bGUuX2RlZmF1bHRzKTtcblx0XHRyZXR1cm4gWyB0aGlzLl9jbGFzcywgcHJvcHMgXTtcblx0fSxcblxuXHRfY2hhbmdlZDogZnVuY3Rpb24oZmxhZ3MpIHtcblx0XHR2YXIgc3ltYm9sID0gdGhpcy5fc3ltYm9sLFxuXHRcdFx0Y2FjaGVQYXJlbnQgPSB0aGlzLl9wYXJlbnQgfHwgc3ltYm9sLFxuXHRcdFx0cHJvamVjdCA9IHRoaXMuX3Byb2plY3Q7XG5cdFx0aWYgKGZsYWdzICYgOCkge1xuXHRcdFx0dGhpcy5fYm91bmRzID0gdGhpcy5fcG9zaXRpb24gPSB0aGlzLl9kZWNvbXBvc2VkID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRpZiAoZmxhZ3MgJiAxNikge1xuXHRcdFx0dGhpcy5fZ2xvYmFsTWF0cml4ID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRpZiAoY2FjaGVQYXJlbnRcblx0XHRcdFx0JiYgKGZsYWdzICYgNzIpKSB7XG5cdFx0XHRJdGVtLl9jbGVhckJvdW5kc0NhY2hlKGNhY2hlUGFyZW50KTtcblx0XHR9XG5cdFx0aWYgKGZsYWdzICYgMikge1xuXHRcdFx0SXRlbS5fY2xlYXJCb3VuZHNDYWNoZSh0aGlzKTtcblx0XHR9XG5cdFx0aWYgKHByb2plY3QpXG5cdFx0XHRwcm9qZWN0Ll9jaGFuZ2VkKGZsYWdzLCB0aGlzKTtcblx0XHRpZiAoc3ltYm9sKVxuXHRcdFx0c3ltYm9sLl9jaGFuZ2VkKGZsYWdzKTtcblx0fSxcblxuXHRnZXRJZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuX2lkO1xuXHR9LFxuXG5cdGdldE5hbWU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLl9uYW1lO1xuXHR9LFxuXG5cdHNldE5hbWU6IGZ1bmN0aW9uKG5hbWUpIHtcblxuXHRcdGlmICh0aGlzLl9uYW1lKVxuXHRcdFx0dGhpcy5fcmVtb3ZlTmFtZWQoKTtcblx0XHRpZiAobmFtZSA9PT0gKCtuYW1lKSArICcnKVxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKFxuXHRcdFx0XHRcdCdOYW1lcyBjb25zaXN0aW5nIG9ubHkgb2YgbnVtYmVycyBhcmUgbm90IHN1cHBvcnRlZC4nKTtcblx0XHR2YXIgb3duZXIgPSB0aGlzLl9nZXRPd25lcigpO1xuXHRcdGlmIChuYW1lICYmIG93bmVyKSB7XG5cdFx0XHR2YXIgY2hpbGRyZW4gPSBvd25lci5fY2hpbGRyZW4sXG5cdFx0XHRcdG5hbWVkQ2hpbGRyZW4gPSBvd25lci5fbmFtZWRDaGlsZHJlbjtcblx0XHRcdChuYW1lZENoaWxkcmVuW25hbWVdID0gbmFtZWRDaGlsZHJlbltuYW1lXSB8fCBbXSkucHVzaCh0aGlzKTtcblx0XHRcdGlmICghKG5hbWUgaW4gY2hpbGRyZW4pKVxuXHRcdFx0XHRjaGlsZHJlbltuYW1lXSA9IHRoaXM7XG5cdFx0fVxuXHRcdHRoaXMuX25hbWUgPSBuYW1lIHx8IHVuZGVmaW5lZDtcblx0XHR0aGlzLl9jaGFuZ2VkKDI1Nik7XG5cdH0sXG5cblx0Z2V0U3R5bGU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLl9zdHlsZTtcblx0fSxcblxuXHRzZXRTdHlsZTogZnVuY3Rpb24oc3R5bGUpIHtcblx0XHR0aGlzLmdldFN0eWxlKCkuc2V0KHN0eWxlKTtcblx0fVxufSwgQmFzZS5lYWNoKFsnbG9ja2VkJywgJ3Zpc2libGUnLCAnYmxlbmRNb2RlJywgJ29wYWNpdHknLCAnZ3VpZGUnXSxcblx0ZnVuY3Rpb24obmFtZSkge1xuXHRcdHZhciBwYXJ0ID0gQmFzZS5jYXBpdGFsaXplKG5hbWUpLFxuXHRcdFx0a2V5ID0gJ18nICsgbmFtZSxcblx0XHRcdGZsYWdzID0ge1xuXHRcdFx0XHRsb2NrZWQ6IDI1Nixcblx0XHRcdFx0dmlzaWJsZTogMjY1XG5cdFx0XHR9O1xuXHRcdHRoaXNbJ2dldCcgKyBwYXJ0XSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIHRoaXNba2V5XTtcblx0XHR9O1xuXHRcdHRoaXNbJ3NldCcgKyBwYXJ0XSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG5cdFx0XHRpZiAodmFsdWUgIT0gdGhpc1trZXldKSB7XG5cdFx0XHRcdHRoaXNba2V5XSA9IHZhbHVlO1xuXHRcdFx0XHR0aGlzLl9jaGFuZ2VkKGZsYWdzW25hbWVdIHx8IDI1Nyk7XG5cdFx0XHR9XG5cdFx0fTtcblx0fSxcbnt9KSwge1xuXHRiZWFuczogdHJ1ZSxcblxuXHRnZXRTZWxlY3Rpb246IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLl9zZWxlY3Rpb247XG5cdH0sXG5cblx0c2V0U2VsZWN0aW9uOiBmdW5jdGlvbihzZWxlY3Rpb24pIHtcblx0XHRpZiAoc2VsZWN0aW9uICE9PSB0aGlzLl9zZWxlY3Rpb24pIHtcblx0XHRcdHRoaXMuX3NlbGVjdGlvbiA9IHNlbGVjdGlvbjtcblx0XHRcdHZhciBwcm9qZWN0ID0gdGhpcy5fcHJvamVjdDtcblx0XHRcdGlmIChwcm9qZWN0KSB7XG5cdFx0XHRcdHByb2plY3QuX3VwZGF0ZVNlbGVjdGlvbih0aGlzKTtcblx0XHRcdFx0dGhpcy5fY2hhbmdlZCgyNTcpO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHRfY2hhbmdlU2VsZWN0aW9uOiBmdW5jdGlvbihmbGFnLCBzZWxlY3RlZCkge1xuXHRcdHZhciBzZWxlY3Rpb24gPSB0aGlzLl9zZWxlY3Rpb247XG5cdFx0dGhpcy5zZXRTZWxlY3Rpb24oc2VsZWN0ZWQgPyBzZWxlY3Rpb24gfCBmbGFnIDogc2VsZWN0aW9uICYgfmZsYWcpO1xuXHR9LFxuXG5cdGlzU2VsZWN0ZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdGlmICh0aGlzLl9zZWxlY3RDaGlsZHJlbikge1xuXHRcdFx0dmFyIGNoaWxkcmVuID0gdGhpcy5fY2hpbGRyZW47XG5cdFx0XHRmb3IgKHZhciBpID0gMCwgbCA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkrKylcblx0XHRcdFx0aWYgKGNoaWxkcmVuW2ldLmlzU2VsZWN0ZWQoKSlcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cdFx0cmV0dXJuICEhKHRoaXMuX3NlbGVjdGlvbiAmIDEpO1xuXHR9LFxuXG5cdHNldFNlbGVjdGVkOiBmdW5jdGlvbihzZWxlY3RlZCkge1xuXHRcdGlmICh0aGlzLl9zZWxlY3RDaGlsZHJlbikge1xuXHRcdFx0dmFyIGNoaWxkcmVuID0gdGhpcy5fY2hpbGRyZW47XG5cdFx0XHRmb3IgKHZhciBpID0gMCwgbCA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkrKylcblx0XHRcdFx0Y2hpbGRyZW5baV0uc2V0U2VsZWN0ZWQoc2VsZWN0ZWQpO1xuXHRcdH1cblx0XHR0aGlzLl9jaGFuZ2VTZWxlY3Rpb24oMSwgc2VsZWN0ZWQpO1xuXHR9LFxuXG5cdGlzRnVsbHlTZWxlY3RlZDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGNoaWxkcmVuID0gdGhpcy5fY2hpbGRyZW4sXG5cdFx0XHRzZWxlY3RlZCA9ICEhKHRoaXMuX3NlbGVjdGlvbiAmIDEpO1xuXHRcdGlmIChjaGlsZHJlbiAmJiBzZWxlY3RlZCkge1xuXHRcdFx0Zm9yICh2YXIgaSA9IDAsIGwgPSBjaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpKyspXG5cdFx0XHRcdGlmICghY2hpbGRyZW5baV0uaXNGdWxseVNlbGVjdGVkKCkpXG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXHRcdHJldHVybiBzZWxlY3RlZDtcblx0fSxcblxuXHRzZXRGdWxseVNlbGVjdGVkOiBmdW5jdGlvbihzZWxlY3RlZCkge1xuXHRcdHZhciBjaGlsZHJlbiA9IHRoaXMuX2NoaWxkcmVuO1xuXHRcdGlmIChjaGlsZHJlbikge1xuXHRcdFx0Zm9yICh2YXIgaSA9IDAsIGwgPSBjaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpKyspXG5cdFx0XHRcdGNoaWxkcmVuW2ldLnNldEZ1bGx5U2VsZWN0ZWQoc2VsZWN0ZWQpO1xuXHRcdH1cblx0XHR0aGlzLl9jaGFuZ2VTZWxlY3Rpb24oMSwgc2VsZWN0ZWQpO1xuXHR9LFxuXG5cdGlzQ2xpcE1hc2s6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLl9jbGlwTWFzaztcblx0fSxcblxuXHRzZXRDbGlwTWFzazogZnVuY3Rpb24oY2xpcE1hc2spIHtcblx0XHRpZiAodGhpcy5fY2xpcE1hc2sgIT0gKGNsaXBNYXNrID0gISFjbGlwTWFzaykpIHtcblx0XHRcdHRoaXMuX2NsaXBNYXNrID0gY2xpcE1hc2s7XG5cdFx0XHRpZiAoY2xpcE1hc2spIHtcblx0XHRcdFx0dGhpcy5zZXRGaWxsQ29sb3IobnVsbCk7XG5cdFx0XHRcdHRoaXMuc2V0U3Ryb2tlQ29sb3IobnVsbCk7XG5cdFx0XHR9XG5cdFx0XHR0aGlzLl9jaGFuZ2VkKDI1Nyk7XG5cdFx0XHRpZiAodGhpcy5fcGFyZW50KVxuXHRcdFx0XHR0aGlzLl9wYXJlbnQuX2NoYW5nZWQoMjA0OCk7XG5cdFx0fVxuXHR9LFxuXG5cdGdldERhdGE6IGZ1bmN0aW9uKCkge1xuXHRcdGlmICghdGhpcy5fZGF0YSlcblx0XHRcdHRoaXMuX2RhdGEgPSB7fTtcblx0XHRyZXR1cm4gdGhpcy5fZGF0YTtcblx0fSxcblxuXHRzZXREYXRhOiBmdW5jdGlvbihkYXRhKSB7XG5cdFx0dGhpcy5fZGF0YSA9IGRhdGE7XG5cdH0sXG5cblx0Z2V0UG9zaXRpb246IGZ1bmN0aW9uKF9kb250TGluaykge1xuXHRcdHZhciBjdG9yID0gX2RvbnRMaW5rID8gUG9pbnQgOiBMaW5rZWRQb2ludDtcblx0XHR2YXIgcG9zaXRpb24gPSB0aGlzLl9wb3NpdGlvbiB8fFxuXHRcdFx0KHRoaXMuX3Bvc2l0aW9uID0gdGhpcy5fZ2V0UG9zaXRpb25Gcm9tQm91bmRzKCkpO1xuXHRcdHJldHVybiBuZXcgY3Rvcihwb3NpdGlvbi54LCBwb3NpdGlvbi55LCB0aGlzLCAnc2V0UG9zaXRpb24nKTtcblx0fSxcblxuXHRzZXRQb3NpdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0dGhpcy50cmFuc2xhdGUoUG9pbnQucmVhZChhcmd1bWVudHMpLnN1YnRyYWN0KHRoaXMuZ2V0UG9zaXRpb24odHJ1ZSkpKTtcblx0fSxcblxuXHRfZ2V0UG9zaXRpb25Gcm9tQm91bmRzOiBmdW5jdGlvbihib3VuZHMpIHtcblx0XHRyZXR1cm4gdGhpcy5fcGl2b3Rcblx0XHRcdFx0PyB0aGlzLl9tYXRyaXguX3RyYW5zZm9ybVBvaW50KHRoaXMuX3Bpdm90KVxuXHRcdFx0XHQ6IChib3VuZHMgfHwgdGhpcy5nZXRCb3VuZHMoKSkuZ2V0Q2VudGVyKHRydWUpO1xuXHR9LFxuXG5cdGdldFBpdm90OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgcGl2b3QgPSB0aGlzLl9waXZvdDtcblx0XHRyZXR1cm4gcGl2b3Rcblx0XHRcdFx0PyBuZXcgTGlua2VkUG9pbnQocGl2b3QueCwgcGl2b3QueSwgdGhpcywgJ3NldFBpdm90Jylcblx0XHRcdFx0OiBudWxsO1xuXHR9LFxuXG5cdHNldFBpdm90OiBmdW5jdGlvbigpIHtcblx0XHR0aGlzLl9waXZvdCA9IFBvaW50LnJlYWQoYXJndW1lbnRzLCAwLCB7IGNsb25lOiB0cnVlLCByZWFkTnVsbDogdHJ1ZSB9KTtcblx0XHR0aGlzLl9wb3NpdGlvbiA9IHVuZGVmaW5lZDtcblx0fVxufSwgQmFzZS5lYWNoKHtcblx0XHRnZXRTdHJva2VCb3VuZHM6IHsgc3Ryb2tlOiB0cnVlIH0sXG5cdFx0Z2V0SGFuZGxlQm91bmRzOiB7IGhhbmRsZTogdHJ1ZSB9LFxuXHRcdGdldEludGVybmFsQm91bmRzOiB7IGludGVybmFsOiB0cnVlIH1cblx0fSxcblx0ZnVuY3Rpb24ob3B0aW9ucywga2V5KSB7XG5cdFx0dGhpc1trZXldID0gZnVuY3Rpb24obWF0cml4KSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5nZXRCb3VuZHMobWF0cml4LCBvcHRpb25zKTtcblx0XHR9O1xuXHR9LFxue1xuXHRiZWFuczogdHJ1ZSxcblxuXHRnZXRCb3VuZHM6IGZ1bmN0aW9uKG1hdHJpeCwgb3B0aW9ucykge1xuXHRcdHZhciBoYXNNYXRyaXggPSBvcHRpb25zIHx8IG1hdHJpeCBpbnN0YW5jZW9mIE1hdHJpeCxcblx0XHRcdG9wdHMgPSBCYXNlLnNldCh7fSwgaGFzTWF0cml4ID8gb3B0aW9ucyA6IG1hdHJpeCxcblx0XHRcdFx0XHR0aGlzLl9ib3VuZHNPcHRpb25zKTtcblx0XHRpZiAoIW9wdHMuc3Ryb2tlIHx8IHRoaXMuZ2V0U3Ryb2tlU2NhbGluZygpKVxuXHRcdFx0b3B0cy5jYWNoZUl0ZW0gPSB0aGlzO1xuXHRcdHZhciByZWN0ID0gdGhpcy5fZ2V0Q2FjaGVkQm91bmRzKGhhc01hdHJpeCAmJiBtYXRyaXgsIG9wdHMpLnJlY3Q7XG5cdFx0cmV0dXJuICFhcmd1bWVudHMubGVuZ3RoXG5cdFx0XHRcdD8gbmV3IExpbmtlZFJlY3RhbmdsZShyZWN0LngsIHJlY3QueSwgcmVjdC53aWR0aCwgcmVjdC5oZWlnaHQsXG5cdFx0XHRcdFx0dGhpcywgJ3NldEJvdW5kcycpXG5cdFx0XHRcdDogcmVjdDtcblx0fSxcblxuXHRzZXRCb3VuZHM6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciByZWN0ID0gUmVjdGFuZ2xlLnJlYWQoYXJndW1lbnRzKSxcblx0XHRcdGJvdW5kcyA9IHRoaXMuZ2V0Qm91bmRzKCksXG5cdFx0XHRfbWF0cml4ID0gdGhpcy5fbWF0cml4LFxuXHRcdFx0bWF0cml4ID0gbmV3IE1hdHJpeCgpLFxuXHRcdFx0Y2VudGVyID0gcmVjdC5nZXRDZW50ZXIoKTtcblx0XHRtYXRyaXgudHJhbnNsYXRlKGNlbnRlcik7XG5cdFx0aWYgKHJlY3Qud2lkdGggIT0gYm91bmRzLndpZHRoIHx8IHJlY3QuaGVpZ2h0ICE9IGJvdW5kcy5oZWlnaHQpIHtcblx0XHRcdGlmICghX21hdHJpeC5pc0ludmVydGlibGUoKSkge1xuXHRcdFx0XHRfbWF0cml4LnNldChfbWF0cml4Ll9iYWNrdXBcblx0XHRcdFx0XHRcdHx8IG5ldyBNYXRyaXgoKS50cmFuc2xhdGUoX21hdHJpeC5nZXRUcmFuc2xhdGlvbigpKSk7XG5cdFx0XHRcdGJvdW5kcyA9IHRoaXMuZ2V0Qm91bmRzKCk7XG5cdFx0XHR9XG5cdFx0XHRtYXRyaXguc2NhbGUoXG5cdFx0XHRcdFx0Ym91bmRzLndpZHRoICE9PSAwID8gcmVjdC53aWR0aCAvIGJvdW5kcy53aWR0aCA6IDAsXG5cdFx0XHRcdFx0Ym91bmRzLmhlaWdodCAhPT0gMCA/IHJlY3QuaGVpZ2h0IC8gYm91bmRzLmhlaWdodCA6IDApO1xuXHRcdH1cblx0XHRjZW50ZXIgPSBib3VuZHMuZ2V0Q2VudGVyKCk7XG5cdFx0bWF0cml4LnRyYW5zbGF0ZSgtY2VudGVyLngsIC1jZW50ZXIueSk7XG5cdFx0dGhpcy50cmFuc2Zvcm0obWF0cml4KTtcblx0fSxcblxuXHRfZ2V0Qm91bmRzOiBmdW5jdGlvbihtYXRyaXgsIG9wdGlvbnMpIHtcblx0XHR2YXIgY2hpbGRyZW4gPSB0aGlzLl9jaGlsZHJlbjtcblx0XHRpZiAoIWNoaWxkcmVuIHx8ICFjaGlsZHJlbi5sZW5ndGgpXG5cdFx0XHRyZXR1cm4gbmV3IFJlY3RhbmdsZSgpO1xuXHRcdEl0ZW0uX3VwZGF0ZUJvdW5kc0NhY2hlKHRoaXMsIG9wdGlvbnMuY2FjaGVJdGVtKTtcblx0XHRyZXR1cm4gSXRlbS5fZ2V0Qm91bmRzKGNoaWxkcmVuLCBtYXRyaXgsIG9wdGlvbnMpO1xuXHR9LFxuXG5cdF9nZXRCb3VuZHNDYWNoZUtleTogZnVuY3Rpb24ob3B0aW9ucywgaW50ZXJuYWwpIHtcblx0XHRyZXR1cm4gW1xuXHRcdFx0b3B0aW9ucy5zdHJva2UgPyAxIDogMCxcblx0XHRcdG9wdGlvbnMuaGFuZGxlID8gMSA6IDAsXG5cdFx0XHRpbnRlcm5hbCA/IDEgOiAwXG5cdFx0XS5qb2luKCcnKTtcblx0fSxcblxuXHRfZ2V0Q2FjaGVkQm91bmRzOiBmdW5jdGlvbihtYXRyaXgsIG9wdGlvbnMsIG5vSW50ZXJuYWwpIHtcblx0XHRtYXRyaXggPSBtYXRyaXggJiYgbWF0cml4Ll9vck51bGxJZklkZW50aXR5KCk7XG5cdFx0dmFyIGludGVybmFsID0gb3B0aW9ucy5pbnRlcm5hbCAmJiAhbm9JbnRlcm5hbCxcblx0XHRcdGNhY2hlSXRlbSA9IG9wdGlvbnMuY2FjaGVJdGVtLFxuXHRcdFx0X21hdHJpeCA9IGludGVybmFsID8gbnVsbCA6IHRoaXMuX21hdHJpeC5fb3JOdWxsSWZJZGVudGl0eSgpLFxuXHRcdFx0Y2FjaGVLZXkgPSBjYWNoZUl0ZW0gJiYgKCFtYXRyaXggfHwgbWF0cml4LmVxdWFscyhfbWF0cml4KSlcblx0XHRcdFx0JiYgdGhpcy5fZ2V0Qm91bmRzQ2FjaGVLZXkob3B0aW9ucywgaW50ZXJuYWwpLFxuXHRcdFx0Ym91bmRzID0gdGhpcy5fYm91bmRzO1xuXHRcdEl0ZW0uX3VwZGF0ZUJvdW5kc0NhY2hlKHRoaXMuX3BhcmVudCB8fCB0aGlzLl9zeW1ib2wsIGNhY2hlSXRlbSk7XG5cdFx0aWYgKGNhY2hlS2V5ICYmIGJvdW5kcyAmJiBjYWNoZUtleSBpbiBib3VuZHMpIHtcblx0XHRcdHZhciBjYWNoZWQgPSBib3VuZHNbY2FjaGVLZXldO1xuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0cmVjdDogY2FjaGVkLnJlY3QuY2xvbmUoKSxcblx0XHRcdFx0bm9uc2NhbGluZzogY2FjaGVkLm5vbnNjYWxpbmdcblx0XHRcdH07XG5cdFx0fVxuXHRcdHZhciByZXMgPSB0aGlzLl9nZXRCb3VuZHMobWF0cml4IHx8IF9tYXRyaXgsIG9wdGlvbnMpLFxuXHRcdFx0cmVjdCA9IHJlcy5yZWN0IHx8IHJlcyxcblx0XHRcdHN0eWxlID0gdGhpcy5fc3R5bGUsXG5cdFx0XHRub25zY2FsaW5nID0gcmVzLm5vbnNjYWxpbmcgfHwgc3R5bGUuaGFzU3Ryb2tlKClcblx0XHRcdFx0JiYgIXN0eWxlLmdldFN0cm9rZVNjYWxpbmcoKTtcblx0XHRpZiAoY2FjaGVLZXkpIHtcblx0XHRcdGlmICghYm91bmRzKSB7XG5cdFx0XHRcdHRoaXMuX2JvdW5kcyA9IGJvdW5kcyA9IHt9O1xuXHRcdFx0fVxuXHRcdFx0dmFyIGNhY2hlZCA9IGJvdW5kc1tjYWNoZUtleV0gPSB7XG5cdFx0XHRcdHJlY3Q6IHJlY3QuY2xvbmUoKSxcblx0XHRcdFx0bm9uc2NhbGluZzogbm9uc2NhbGluZyxcblx0XHRcdFx0aW50ZXJuYWw6IGludGVybmFsXG5cdFx0XHR9O1xuXHRcdH1cblx0XHRyZXR1cm4ge1xuXHRcdFx0cmVjdDogcmVjdCxcblx0XHRcdG5vbnNjYWxpbmc6IG5vbnNjYWxpbmdcblx0XHR9O1xuXHR9LFxuXG5cdF9nZXRTdHJva2VNYXRyaXg6IGZ1bmN0aW9uKG1hdHJpeCwgb3B0aW9ucykge1xuXHRcdHZhciBwYXJlbnQgPSB0aGlzLmdldFN0cm9rZVNjYWxpbmcoKSA/IG51bGxcblx0XHRcdFx0OiBvcHRpb25zICYmIG9wdGlvbnMuaW50ZXJuYWwgPyB0aGlzXG5cdFx0XHRcdFx0OiB0aGlzLl9wYXJlbnQgfHwgdGhpcy5fc3ltYm9sICYmIHRoaXMuX3N5bWJvbC5faXRlbSxcblx0XHRcdG14ID0gcGFyZW50ID8gcGFyZW50LmdldFZpZXdNYXRyaXgoKS5pbnZlcnQoKSA6IG1hdHJpeDtcblx0XHRyZXR1cm4gbXggJiYgbXguX3NoaWZ0bGVzcygpO1xuXHR9LFxuXG5cdHN0YXRpY3M6IHtcblx0XHRfdXBkYXRlQm91bmRzQ2FjaGU6IGZ1bmN0aW9uKHBhcmVudCwgaXRlbSkge1xuXHRcdFx0aWYgKHBhcmVudCAmJiBpdGVtKSB7XG5cdFx0XHRcdHZhciBpZCA9IGl0ZW0uX2lkLFxuXHRcdFx0XHRcdHJlZiA9IHBhcmVudC5fYm91bmRzQ2FjaGUgPSBwYXJlbnQuX2JvdW5kc0NhY2hlIHx8IHtcblx0XHRcdFx0XHRcdGlkczoge30sXG5cdFx0XHRcdFx0XHRsaXN0OiBbXVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdGlmICghcmVmLmlkc1tpZF0pIHtcblx0XHRcdFx0XHRyZWYubGlzdC5wdXNoKGl0ZW0pO1xuXHRcdFx0XHRcdHJlZi5pZHNbaWRdID0gaXRlbTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRfY2xlYXJCb3VuZHNDYWNoZTogZnVuY3Rpb24oaXRlbSkge1xuXHRcdFx0dmFyIGNhY2hlID0gaXRlbS5fYm91bmRzQ2FjaGU7XG5cdFx0XHRpZiAoY2FjaGUpIHtcblx0XHRcdFx0aXRlbS5fYm91bmRzID0gaXRlbS5fcG9zaXRpb24gPSBpdGVtLl9ib3VuZHNDYWNoZSA9IHVuZGVmaW5lZDtcblx0XHRcdFx0Zm9yICh2YXIgaSA9IDAsIGxpc3QgPSBjYWNoZS5saXN0LCBsID0gbGlzdC5sZW5ndGg7IGkgPCBsOyBpKyspe1xuXHRcdFx0XHRcdHZhciBvdGhlciA9IGxpc3RbaV07XG5cdFx0XHRcdFx0aWYgKG90aGVyICE9PSBpdGVtKSB7XG5cdFx0XHRcdFx0XHRvdGhlci5fYm91bmRzID0gb3RoZXIuX3Bvc2l0aW9uID0gdW5kZWZpbmVkO1xuXHRcdFx0XHRcdFx0aWYgKG90aGVyLl9ib3VuZHNDYWNoZSlcblx0XHRcdFx0XHRcdFx0SXRlbS5fY2xlYXJCb3VuZHNDYWNoZShvdGhlcik7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdF9nZXRCb3VuZHM6IGZ1bmN0aW9uKGl0ZW1zLCBtYXRyaXgsIG9wdGlvbnMpIHtcblx0XHRcdHZhciB4MSA9IEluZmluaXR5LFxuXHRcdFx0XHR4MiA9IC14MSxcblx0XHRcdFx0eTEgPSB4MSxcblx0XHRcdFx0eTIgPSB4Mixcblx0XHRcdFx0bm9uc2NhbGluZyA9IGZhbHNlO1xuXHRcdFx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cdFx0XHRmb3IgKHZhciBpID0gMCwgbCA9IGl0ZW1zLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuXHRcdFx0XHR2YXIgaXRlbSA9IGl0ZW1zW2ldO1xuXHRcdFx0XHRpZiAoaXRlbS5fdmlzaWJsZSAmJiAhaXRlbS5pc0VtcHR5KCkpIHtcblx0XHRcdFx0XHR2YXIgYm91bmRzID0gaXRlbS5fZ2V0Q2FjaGVkQm91bmRzKFxuXHRcdFx0XHRcdFx0bWF0cml4ICYmIG1hdHJpeC5hcHBlbmRlZChpdGVtLl9tYXRyaXgpLCBvcHRpb25zLCB0cnVlKSxcblx0XHRcdFx0XHRcdHJlY3QgPSBib3VuZHMucmVjdDtcblx0XHRcdFx0XHR4MSA9IE1hdGgubWluKHJlY3QueCwgeDEpO1xuXHRcdFx0XHRcdHkxID0gTWF0aC5taW4ocmVjdC55LCB5MSk7XG5cdFx0XHRcdFx0eDIgPSBNYXRoLm1heChyZWN0LnggKyByZWN0LndpZHRoLCB4Mik7XG5cdFx0XHRcdFx0eTIgPSBNYXRoLm1heChyZWN0LnkgKyByZWN0LmhlaWdodCwgeTIpO1xuXHRcdFx0XHRcdGlmIChib3VuZHMubm9uc2NhbGluZylcblx0XHRcdFx0XHRcdG5vbnNjYWxpbmcgPSB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRyZWN0OiBpc0Zpbml0ZSh4MSlcblx0XHRcdFx0XHQ/IG5ldyBSZWN0YW5nbGUoeDEsIHkxLCB4MiAtIHgxLCB5MiAtIHkxKVxuXHRcdFx0XHRcdDogbmV3IFJlY3RhbmdsZSgpLFxuXHRcdFx0XHRub25zY2FsaW5nOiBub25zY2FsaW5nXG5cdFx0XHR9O1xuXHRcdH1cblx0fVxuXG59KSwge1xuXHRiZWFuczogdHJ1ZSxcblxuXHRfZGVjb21wb3NlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5fYXBwbHlNYXRyaXhcblx0XHRcdD8gbnVsbFxuXHRcdFx0OiB0aGlzLl9kZWNvbXBvc2VkIHx8ICh0aGlzLl9kZWNvbXBvc2VkID0gdGhpcy5fbWF0cml4LmRlY29tcG9zZSgpKTtcblx0fSxcblxuXHRnZXRSb3RhdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGRlY29tcG9zZWQgPSB0aGlzLl9kZWNvbXBvc2UoKTtcblx0XHRyZXR1cm4gZGVjb21wb3NlZCA/IGRlY29tcG9zZWQucm90YXRpb24gOiAwO1xuXHR9LFxuXG5cdHNldFJvdGF0aW9uOiBmdW5jdGlvbihyb3RhdGlvbikge1xuXHRcdHZhciBjdXJyZW50ID0gdGhpcy5nZXRSb3RhdGlvbigpO1xuXHRcdGlmIChjdXJyZW50ICE9IG51bGwgJiYgcm90YXRpb24gIT0gbnVsbCkge1xuXHRcdFx0dmFyIGRlY29tcG9zZWQgPSB0aGlzLl9kZWNvbXBvc2VkO1xuXHRcdFx0dGhpcy5yb3RhdGUocm90YXRpb24gLSBjdXJyZW50KTtcblx0XHRcdGlmIChkZWNvbXBvc2VkKSB7XG5cdFx0XHRcdGRlY29tcG9zZWQucm90YXRpb24gPSByb3RhdGlvbjtcblx0XHRcdFx0dGhpcy5fZGVjb21wb3NlZCA9IGRlY29tcG9zZWQ7XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdGdldFNjYWxpbmc6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBkZWNvbXBvc2VkID0gdGhpcy5fZGVjb21wb3NlKCksXG5cdFx0XHRzID0gZGVjb21wb3NlZCAmJiBkZWNvbXBvc2VkLnNjYWxpbmc7XG5cdFx0cmV0dXJuIG5ldyBMaW5rZWRQb2ludChzID8gcy54IDogMSwgcyA/IHMueSA6IDEsIHRoaXMsICdzZXRTY2FsaW5nJyk7XG5cdH0sXG5cblx0c2V0U2NhbGluZzogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGN1cnJlbnQgPSB0aGlzLmdldFNjYWxpbmcoKSxcblx0XHRcdHNjYWxpbmcgPSBQb2ludC5yZWFkKGFyZ3VtZW50cywgMCwgeyBjbG9uZTogdHJ1ZSwgcmVhZE51bGw6IHRydWUgfSk7XG5cdFx0aWYgKGN1cnJlbnQgJiYgc2NhbGluZyAmJiAhY3VycmVudC5lcXVhbHMoc2NhbGluZykpIHtcblx0XHRcdHZhciByb3RhdGlvbiA9IHRoaXMuZ2V0Um90YXRpb24oKSxcblx0XHRcdFx0ZGVjb21wb3NlZCA9IHRoaXMuX2RlY29tcG9zZWQsXG5cdFx0XHRcdG1hdHJpeCA9IG5ldyBNYXRyaXgoKSxcblx0XHRcdFx0Y2VudGVyID0gdGhpcy5nZXRQb3NpdGlvbih0cnVlKTtcblx0XHRcdG1hdHJpeC50cmFuc2xhdGUoY2VudGVyKTtcblx0XHRcdGlmIChyb3RhdGlvbilcblx0XHRcdFx0bWF0cml4LnJvdGF0ZShyb3RhdGlvbik7XG5cdFx0XHRtYXRyaXguc2NhbGUoc2NhbGluZy54IC8gY3VycmVudC54LCBzY2FsaW5nLnkgLyBjdXJyZW50LnkpO1xuXHRcdFx0aWYgKHJvdGF0aW9uKVxuXHRcdFx0XHRtYXRyaXgucm90YXRlKC1yb3RhdGlvbik7XG5cdFx0XHRtYXRyaXgudHJhbnNsYXRlKGNlbnRlci5uZWdhdGUoKSk7XG5cdFx0XHR0aGlzLnRyYW5zZm9ybShtYXRyaXgpO1xuXHRcdFx0aWYgKGRlY29tcG9zZWQpIHtcblx0XHRcdFx0ZGVjb21wb3NlZC5zY2FsaW5nID0gc2NhbGluZztcblx0XHRcdFx0dGhpcy5fZGVjb21wb3NlZCA9IGRlY29tcG9zZWQ7XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdGdldE1hdHJpeDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuX21hdHJpeDtcblx0fSxcblxuXHRzZXRNYXRyaXg6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBtYXRyaXggPSB0aGlzLl9tYXRyaXg7XG5cdFx0bWF0cml4LmluaXRpYWxpemUuYXBwbHkobWF0cml4LCBhcmd1bWVudHMpO1xuXHR9LFxuXG5cdGdldEdsb2JhbE1hdHJpeDogZnVuY3Rpb24oX2RvbnRDbG9uZSkge1xuXHRcdHZhciBtYXRyaXggPSB0aGlzLl9nbG9iYWxNYXRyaXg7XG5cdFx0aWYgKG1hdHJpeCkge1xuXHRcdFx0dmFyIHBhcmVudCA9IHRoaXMuX3BhcmVudDtcblx0XHRcdHZhciBwYXJlbnRzID0gW107XG5cdFx0XHR3aGlsZSAocGFyZW50KSB7XG5cdFx0XHRcdGlmICghcGFyZW50Ll9nbG9iYWxNYXRyaXgpIHtcblx0XHRcdFx0XHRtYXRyaXggPSBudWxsO1xuXHRcdFx0XHRcdGZvciAodmFyIGkgPSAwLCBsID0gcGFyZW50cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcblx0XHRcdFx0XHRcdHBhcmVudHNbaV0uX2dsb2JhbE1hdHJpeCA9IG51bGw7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHBhcmVudHMucHVzaChwYXJlbnQpO1xuXHRcdFx0XHRwYXJlbnQgPSBwYXJlbnQuX3BhcmVudDtcblx0XHRcdH1cblx0XHR9XG5cdFx0aWYgKCFtYXRyaXgpIHtcblx0XHRcdG1hdHJpeCA9IHRoaXMuX2dsb2JhbE1hdHJpeCA9IHRoaXMuX21hdHJpeC5jbG9uZSgpO1xuXHRcdFx0dmFyIHBhcmVudCA9IHRoaXMuX3BhcmVudDtcblx0XHRcdGlmIChwYXJlbnQpXG5cdFx0XHRcdG1hdHJpeC5wcmVwZW5kKHBhcmVudC5nZXRHbG9iYWxNYXRyaXgodHJ1ZSkpO1xuXHRcdH1cblx0XHRyZXR1cm4gX2RvbnRDbG9uZSA/IG1hdHJpeCA6IG1hdHJpeC5jbG9uZSgpO1xuXHR9LFxuXG5cdGdldFZpZXdNYXRyaXg6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmdldEdsb2JhbE1hdHJpeCgpLnByZXBlbmQodGhpcy5nZXRWaWV3KCkuX21hdHJpeCk7XG5cdH0sXG5cblx0Z2V0QXBwbHlNYXRyaXg6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLl9hcHBseU1hdHJpeDtcblx0fSxcblxuXHRzZXRBcHBseU1hdHJpeDogZnVuY3Rpb24oYXBwbHkpIHtcblx0XHRpZiAodGhpcy5fYXBwbHlNYXRyaXggPSB0aGlzLl9jYW5BcHBseU1hdHJpeCAmJiAhIWFwcGx5KVxuXHRcdFx0dGhpcy50cmFuc2Zvcm0obnVsbCwgdHJ1ZSk7XG5cdH0sXG5cblx0Z2V0VHJhbnNmb3JtQ29udGVudDogJyNnZXRBcHBseU1hdHJpeCcsXG5cdHNldFRyYW5zZm9ybUNvbnRlbnQ6ICcjc2V0QXBwbHlNYXRyaXgnLFxufSwge1xuXHRnZXRQcm9qZWN0OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5fcHJvamVjdDtcblx0fSxcblxuXHRfc2V0UHJvamVjdDogZnVuY3Rpb24ocHJvamVjdCwgaW5zdGFsbEV2ZW50cykge1xuXHRcdGlmICh0aGlzLl9wcm9qZWN0ICE9PSBwcm9qZWN0KSB7XG5cdFx0XHRpZiAodGhpcy5fcHJvamVjdClcblx0XHRcdFx0dGhpcy5faW5zdGFsbEV2ZW50cyhmYWxzZSk7XG5cdFx0XHR0aGlzLl9wcm9qZWN0ID0gcHJvamVjdDtcblx0XHRcdHZhciBjaGlsZHJlbiA9IHRoaXMuX2NoaWxkcmVuO1xuXHRcdFx0Zm9yICh2YXIgaSA9IDAsIGwgPSBjaGlsZHJlbiAmJiBjaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpKyspXG5cdFx0XHRcdGNoaWxkcmVuW2ldLl9zZXRQcm9qZWN0KHByb2plY3QpO1xuXHRcdFx0aW5zdGFsbEV2ZW50cyA9IHRydWU7XG5cdFx0fVxuXHRcdGlmIChpbnN0YWxsRXZlbnRzKVxuXHRcdFx0dGhpcy5faW5zdGFsbEV2ZW50cyh0cnVlKTtcblx0fSxcblxuXHRnZXRWaWV3OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5fcHJvamVjdC5fdmlldztcblx0fSxcblxuXHRfaW5zdGFsbEV2ZW50czogZnVuY3Rpb24gX2luc3RhbGxFdmVudHMoaW5zdGFsbCkge1xuXHRcdF9pbnN0YWxsRXZlbnRzLmJhc2UuY2FsbCh0aGlzLCBpbnN0YWxsKTtcblx0XHR2YXIgY2hpbGRyZW4gPSB0aGlzLl9jaGlsZHJlbjtcblx0XHRmb3IgKHZhciBpID0gMCwgbCA9IGNoaWxkcmVuICYmIGNoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkrKylcblx0XHRcdGNoaWxkcmVuW2ldLl9pbnN0YWxsRXZlbnRzKGluc3RhbGwpO1xuXHR9LFxuXG5cdGdldExheWVyOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgcGFyZW50ID0gdGhpcztcblx0XHR3aGlsZSAocGFyZW50ID0gcGFyZW50Ll9wYXJlbnQpIHtcblx0XHRcdGlmIChwYXJlbnQgaW5zdGFuY2VvZiBMYXllcilcblx0XHRcdFx0cmV0dXJuIHBhcmVudDtcblx0XHR9XG5cdFx0cmV0dXJuIG51bGw7XG5cdH0sXG5cblx0Z2V0UGFyZW50OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5fcGFyZW50O1xuXHR9LFxuXG5cdHNldFBhcmVudDogZnVuY3Rpb24oaXRlbSkge1xuXHRcdHJldHVybiBpdGVtLmFkZENoaWxkKHRoaXMpO1xuXHR9LFxuXG5cdF9nZXRPd25lcjogJyNnZXRQYXJlbnQnLFxuXG5cdGdldENoaWxkcmVuOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5fY2hpbGRyZW47XG5cdH0sXG5cblx0c2V0Q2hpbGRyZW46IGZ1bmN0aW9uKGl0ZW1zKSB7XG5cdFx0dGhpcy5yZW1vdmVDaGlsZHJlbigpO1xuXHRcdHRoaXMuYWRkQ2hpbGRyZW4oaXRlbXMpO1xuXHR9LFxuXG5cdGdldEZpcnN0Q2hpbGQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLl9jaGlsZHJlbiAmJiB0aGlzLl9jaGlsZHJlblswXSB8fCBudWxsO1xuXHR9LFxuXG5cdGdldExhc3RDaGlsZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuX2NoaWxkcmVuICYmIHRoaXMuX2NoaWxkcmVuW3RoaXMuX2NoaWxkcmVuLmxlbmd0aCAtIDFdXG5cdFx0XHRcdHx8IG51bGw7XG5cdH0sXG5cblx0Z2V0TmV4dFNpYmxpbmc6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBvd25lciA9IHRoaXMuX2dldE93bmVyKCk7XG5cdFx0cmV0dXJuIG93bmVyICYmIG93bmVyLl9jaGlsZHJlblt0aGlzLl9pbmRleCArIDFdIHx8IG51bGw7XG5cdH0sXG5cblx0Z2V0UHJldmlvdXNTaWJsaW5nOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgb3duZXIgPSB0aGlzLl9nZXRPd25lcigpO1xuXHRcdHJldHVybiBvd25lciAmJiBvd25lci5fY2hpbGRyZW5bdGhpcy5faW5kZXggLSAxXSB8fCBudWxsO1xuXHR9LFxuXG5cdGdldEluZGV4OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5faW5kZXg7XG5cdH0sXG5cblx0ZXF1YWxzOiBmdW5jdGlvbihpdGVtKSB7XG5cdFx0cmV0dXJuIGl0ZW0gPT09IHRoaXMgfHwgaXRlbSAmJiB0aGlzLl9jbGFzcyA9PT0gaXRlbS5fY2xhc3Ncblx0XHRcdFx0JiYgdGhpcy5fc3R5bGUuZXF1YWxzKGl0ZW0uX3N0eWxlKVxuXHRcdFx0XHQmJiB0aGlzLl9tYXRyaXguZXF1YWxzKGl0ZW0uX21hdHJpeClcblx0XHRcdFx0JiYgdGhpcy5fbG9ja2VkID09PSBpdGVtLl9sb2NrZWRcblx0XHRcdFx0JiYgdGhpcy5fdmlzaWJsZSA9PT0gaXRlbS5fdmlzaWJsZVxuXHRcdFx0XHQmJiB0aGlzLl9ibGVuZE1vZGUgPT09IGl0ZW0uX2JsZW5kTW9kZVxuXHRcdFx0XHQmJiB0aGlzLl9vcGFjaXR5ID09PSBpdGVtLl9vcGFjaXR5XG5cdFx0XHRcdCYmIHRoaXMuX2NsaXBNYXNrID09PSBpdGVtLl9jbGlwTWFza1xuXHRcdFx0XHQmJiB0aGlzLl9ndWlkZSA9PT0gaXRlbS5fZ3VpZGVcblx0XHRcdFx0JiYgdGhpcy5fZXF1YWxzKGl0ZW0pXG5cdFx0XHRcdHx8IGZhbHNlO1xuXHR9LFxuXG5cdF9lcXVhbHM6IGZ1bmN0aW9uKGl0ZW0pIHtcblx0XHRyZXR1cm4gQmFzZS5lcXVhbHModGhpcy5fY2hpbGRyZW4sIGl0ZW0uX2NoaWxkcmVuKTtcblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24ob3B0aW9ucykge1xuXHRcdHZhciBjb3B5ID0gbmV3IHRoaXMuY29uc3RydWN0b3IoSXRlbS5OT19JTlNFUlQpLFxuXHRcdFx0Y2hpbGRyZW4gPSB0aGlzLl9jaGlsZHJlbixcblx0XHRcdGluc2VydCA9IEJhc2UucGljayhvcHRpb25zID8gb3B0aW9ucy5pbnNlcnQgOiB1bmRlZmluZWQsXG5cdFx0XHRcdFx0b3B0aW9ucyA9PT0gdW5kZWZpbmVkIHx8IG9wdGlvbnMgPT09IHRydWUpLFxuXHRcdFx0ZGVlcCA9IEJhc2UucGljayhvcHRpb25zID8gb3B0aW9ucy5kZWVwIDogdW5kZWZpbmVkLCB0cnVlKTtcblx0XHRpZiAoY2hpbGRyZW4pXG5cdFx0XHRjb3B5LmNvcHlBdHRyaWJ1dGVzKHRoaXMpO1xuXHRcdGlmICghY2hpbGRyZW4gfHwgZGVlcClcblx0XHRcdGNvcHkuY29weUNvbnRlbnQodGhpcyk7XG5cdFx0aWYgKCFjaGlsZHJlbilcblx0XHRcdGNvcHkuY29weUF0dHJpYnV0ZXModGhpcyk7XG5cdFx0aWYgKGluc2VydClcblx0XHRcdGNvcHkuaW5zZXJ0QWJvdmUodGhpcyk7XG5cdFx0dmFyIG5hbWUgPSB0aGlzLl9uYW1lLFxuXHRcdFx0cGFyZW50ID0gdGhpcy5fcGFyZW50O1xuXHRcdGlmIChuYW1lICYmIHBhcmVudCkge1xuXHRcdFx0dmFyIGNoaWxkcmVuID0gcGFyZW50Ll9jaGlsZHJlbixcblx0XHRcdFx0b3JpZyA9IG5hbWUsXG5cdFx0XHRcdGkgPSAxO1xuXHRcdFx0d2hpbGUgKGNoaWxkcmVuW25hbWVdKVxuXHRcdFx0XHRuYW1lID0gb3JpZyArICcgJyArIChpKyspO1xuXHRcdFx0aWYgKG5hbWUgIT09IG9yaWcpXG5cdFx0XHRcdGNvcHkuc2V0TmFtZShuYW1lKTtcblx0XHR9XG5cdFx0cmV0dXJuIGNvcHk7XG5cdH0sXG5cblx0Y29weUNvbnRlbnQ6IGZ1bmN0aW9uKHNvdXJjZSkge1xuXHRcdHZhciBjaGlsZHJlbiA9IHNvdXJjZS5fY2hpbGRyZW47XG5cdFx0Zm9yICh2YXIgaSA9IDAsIGwgPSBjaGlsZHJlbiAmJiBjaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpKyspIHtcblx0XHRcdHRoaXMuYWRkQ2hpbGQoY2hpbGRyZW5baV0uY2xvbmUoZmFsc2UpLCB0cnVlKTtcblx0XHR9XG5cdH0sXG5cblx0Y29weUF0dHJpYnV0ZXM6IGZ1bmN0aW9uKHNvdXJjZSwgZXhjbHVkZU1hdHJpeCkge1xuXHRcdHRoaXMuc2V0U3R5bGUoc291cmNlLl9zdHlsZSk7XG5cdFx0dmFyIGtleXMgPSBbJ19sb2NrZWQnLCAnX3Zpc2libGUnLCAnX2JsZW5kTW9kZScsICdfb3BhY2l0eScsXG5cdFx0XHRcdCdfY2xpcE1hc2snLCAnX2d1aWRlJ107XG5cdFx0Zm9yICh2YXIgaSA9IDAsIGwgPSBrZXlzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuXHRcdFx0dmFyIGtleSA9IGtleXNbaV07XG5cdFx0XHRpZiAoc291cmNlLmhhc093blByb3BlcnR5KGtleSkpXG5cdFx0XHRcdHRoaXNba2V5XSA9IHNvdXJjZVtrZXldO1xuXHRcdH1cblx0XHRpZiAoIWV4Y2x1ZGVNYXRyaXgpXG5cdFx0XHR0aGlzLl9tYXRyaXguc2V0KHNvdXJjZS5fbWF0cml4LCB0cnVlKTtcblx0XHR0aGlzLnNldEFwcGx5TWF0cml4KHNvdXJjZS5fYXBwbHlNYXRyaXgpO1xuXHRcdHRoaXMuc2V0UGl2b3Qoc291cmNlLl9waXZvdCk7XG5cdFx0dGhpcy5zZXRTZWxlY3Rpb24oc291cmNlLl9zZWxlY3Rpb24pO1xuXHRcdHZhciBkYXRhID0gc291cmNlLl9kYXRhLFxuXHRcdFx0bmFtZSA9IHNvdXJjZS5fbmFtZTtcblx0XHR0aGlzLl9kYXRhID0gZGF0YSA/IEJhc2UuY2xvbmUoZGF0YSkgOiBudWxsO1xuXHRcdGlmIChuYW1lKVxuXHRcdFx0dGhpcy5zZXROYW1lKG5hbWUpO1xuXHR9LFxuXG5cdHJhc3Rlcml6ZTogZnVuY3Rpb24ocmVzb2x1dGlvbiwgaW5zZXJ0KSB7XG5cdFx0dmFyIGJvdW5kcyA9IHRoaXMuZ2V0U3Ryb2tlQm91bmRzKCksXG5cdFx0XHRzY2FsZSA9IChyZXNvbHV0aW9uIHx8IHRoaXMuZ2V0VmlldygpLmdldFJlc29sdXRpb24oKSkgLyA3Mixcblx0XHRcdHRvcExlZnQgPSBib3VuZHMuZ2V0VG9wTGVmdCgpLmZsb29yKCksXG5cdFx0XHRib3R0b21SaWdodCA9IGJvdW5kcy5nZXRCb3R0b21SaWdodCgpLmNlaWwoKSxcblx0XHRcdHNpemUgPSBuZXcgU2l6ZShib3R0b21SaWdodC5zdWJ0cmFjdCh0b3BMZWZ0KSksXG5cdFx0XHRyYXN0ZXIgPSBuZXcgUmFzdGVyKEl0ZW0uTk9fSU5TRVJUKTtcblx0XHRpZiAoIXNpemUuaXNaZXJvKCkpIHtcblx0XHRcdHZhciBjYW52YXMgPSBDYW52YXNQcm92aWRlci5nZXRDYW52YXMoc2l6ZS5tdWx0aXBseShzY2FsZSkpLFxuXHRcdFx0XHRjdHggPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKSxcblx0XHRcdFx0bWF0cml4ID0gbmV3IE1hdHJpeCgpLnNjYWxlKHNjYWxlKS50cmFuc2xhdGUodG9wTGVmdC5uZWdhdGUoKSk7XG5cdFx0XHRjdHguc2F2ZSgpO1xuXHRcdFx0bWF0cml4LmFwcGx5VG9Db250ZXh0KGN0eCk7XG5cdFx0XHR0aGlzLmRyYXcoY3R4LCBuZXcgQmFzZSh7IG1hdHJpY2VzOiBbbWF0cml4XSB9KSk7XG5cdFx0XHRjdHgucmVzdG9yZSgpO1xuXHRcdFx0cmFzdGVyLnNldENhbnZhcyhjYW52YXMpO1xuXHRcdH1cblx0XHRyYXN0ZXIudHJhbnNmb3JtKG5ldyBNYXRyaXgoKS50cmFuc2xhdGUodG9wTGVmdC5hZGQoc2l6ZS5kaXZpZGUoMikpKVxuXHRcdFx0XHQuc2NhbGUoMSAvIHNjYWxlKSk7XG5cdFx0aWYgKGluc2VydCA9PT0gdW5kZWZpbmVkIHx8IGluc2VydClcblx0XHRcdHJhc3Rlci5pbnNlcnRBYm92ZSh0aGlzKTtcblx0XHRyZXR1cm4gcmFzdGVyO1xuXHR9LFxuXG5cdGNvbnRhaW5zOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gISF0aGlzLl9jb250YWlucyhcblx0XHRcdFx0dGhpcy5fbWF0cml4Ll9pbnZlcnNlVHJhbnNmb3JtKFBvaW50LnJlYWQoYXJndW1lbnRzKSkpO1xuXHR9LFxuXG5cdF9jb250YWluczogZnVuY3Rpb24ocG9pbnQpIHtcblx0XHR2YXIgY2hpbGRyZW4gPSB0aGlzLl9jaGlsZHJlbjtcblx0XHRpZiAoY2hpbGRyZW4pIHtcblx0XHRcdGZvciAodmFyIGkgPSBjaGlsZHJlbi5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuXHRcdFx0XHRpZiAoY2hpbGRyZW5baV0uY29udGFpbnMocG9pbnQpKVxuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0XHRyZXR1cm4gcG9pbnQuaXNJbnNpZGUodGhpcy5nZXRJbnRlcm5hbEJvdW5kcygpKTtcblx0fSxcblxuXHRpc0luc2lkZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIFJlY3RhbmdsZS5yZWFkKGFyZ3VtZW50cykuY29udGFpbnModGhpcy5nZXRCb3VuZHMoKSk7XG5cdH0sXG5cblx0X2FzUGF0aEl0ZW06IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBuZXcgUGF0aC5SZWN0YW5nbGUoe1xuXHRcdFx0cmVjdGFuZ2xlOiB0aGlzLmdldEludGVybmFsQm91bmRzKCksXG5cdFx0XHRtYXRyaXg6IHRoaXMuX21hdHJpeCxcblx0XHRcdGluc2VydDogZmFsc2UsXG5cdFx0fSk7XG5cdH0sXG5cblx0aW50ZXJzZWN0czogZnVuY3Rpb24oaXRlbSwgX21hdHJpeCkge1xuXHRcdGlmICghKGl0ZW0gaW5zdGFuY2VvZiBJdGVtKSlcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRyZXR1cm4gdGhpcy5fYXNQYXRoSXRlbSgpLmdldEludGVyc2VjdGlvbnMoaXRlbS5fYXNQYXRoSXRlbSgpLCBudWxsLFxuXHRcdFx0XHRfbWF0cml4LCB0cnVlKS5sZW5ndGggPiAwO1xuXHR9XG59LFxubmV3IGZ1bmN0aW9uKCkge1xuXHRmdW5jdGlvbiBoaXRUZXN0KCkge1xuXHRcdHJldHVybiB0aGlzLl9oaXRUZXN0KFxuXHRcdFx0XHRQb2ludC5yZWFkKGFyZ3VtZW50cyksXG5cdFx0XHRcdEhpdFJlc3VsdC5nZXRPcHRpb25zKGFyZ3VtZW50cykpO1xuXHR9XG5cblx0ZnVuY3Rpb24gaGl0VGVzdEFsbCgpIHtcblx0XHR2YXIgcG9pbnQgPSBQb2ludC5yZWFkKGFyZ3VtZW50cyksXG5cdFx0XHRvcHRpb25zID0gSGl0UmVzdWx0LmdldE9wdGlvbnMoYXJndW1lbnRzKSxcblx0XHRcdGFsbCA9IFtdO1xuXHRcdHRoaXMuX2hpdFRlc3QocG9pbnQsIEJhc2Uuc2V0KHsgYWxsOiBhbGwgfSwgb3B0aW9ucykpO1xuXHRcdHJldHVybiBhbGw7XG5cdH1cblxuXHRmdW5jdGlvbiBoaXRUZXN0Q2hpbGRyZW4ocG9pbnQsIG9wdGlvbnMsIHZpZXdNYXRyaXgsIF9leGNsdWRlKSB7XG5cdFx0dmFyIGNoaWxkcmVuID0gdGhpcy5fY2hpbGRyZW47XG5cdFx0aWYgKGNoaWxkcmVuKSB7XG5cdFx0XHRmb3IgKHZhciBpID0gY2hpbGRyZW4ubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcblx0XHRcdFx0dmFyIGNoaWxkID0gY2hpbGRyZW5baV07XG5cdFx0XHRcdHZhciByZXMgPSBjaGlsZCAhPT0gX2V4Y2x1ZGUgJiYgY2hpbGQuX2hpdFRlc3QocG9pbnQsIG9wdGlvbnMsXG5cdFx0XHRcdFx0XHR2aWV3TWF0cml4KTtcblx0XHRcdFx0aWYgKHJlcyAmJiAhb3B0aW9ucy5hbGwpXG5cdFx0XHRcdFx0cmV0dXJuIHJlcztcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHRQcm9qZWN0LmluamVjdCh7XG5cdFx0aGl0VGVzdDogaGl0VGVzdCxcblx0XHRoaXRUZXN0QWxsOiBoaXRUZXN0QWxsLFxuXHRcdF9oaXRUZXN0OiBoaXRUZXN0Q2hpbGRyZW5cblx0fSk7XG5cblx0cmV0dXJuIHtcblx0XHRoaXRUZXN0OiBoaXRUZXN0LFxuXHRcdGhpdFRlc3RBbGw6IGhpdFRlc3RBbGwsXG5cdFx0X2hpdFRlc3RDaGlsZHJlbjogaGl0VGVzdENoaWxkcmVuLFxuXHR9O1xufSwge1xuXG5cdF9oaXRUZXN0OiBmdW5jdGlvbihwb2ludCwgb3B0aW9ucywgcGFyZW50Vmlld01hdHJpeCkge1xuXHRcdGlmICh0aGlzLl9sb2NrZWQgfHwgIXRoaXMuX3Zpc2libGUgfHwgdGhpcy5fZ3VpZGUgJiYgIW9wdGlvbnMuZ3VpZGVzXG5cdFx0XHRcdHx8IHRoaXMuaXNFbXB0eSgpKSB7XG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9XG5cblx0XHR2YXIgbWF0cml4ID0gdGhpcy5fbWF0cml4LFxuXHRcdFx0dmlld01hdHJpeCA9IHBhcmVudFZpZXdNYXRyaXhcblx0XHRcdFx0XHQ/IHBhcmVudFZpZXdNYXRyaXguYXBwZW5kZWQobWF0cml4KVxuXHRcdFx0XHRcdDogdGhpcy5nZXRHbG9iYWxNYXRyaXgoKS5wcmVwZW5kKHRoaXMuZ2V0VmlldygpLl9tYXRyaXgpLFxuXHRcdFx0dG9sZXJhbmNlID0gTWF0aC5tYXgob3B0aW9ucy50b2xlcmFuY2UsIDFlLTEyKSxcblx0XHRcdHRvbGVyYW5jZVBhZGRpbmcgPSBvcHRpb25zLl90b2xlcmFuY2VQYWRkaW5nID0gbmV3IFNpemUoXG5cdFx0XHRcdFx0UGF0aC5fZ2V0U3Ryb2tlUGFkZGluZyh0b2xlcmFuY2UsXG5cdFx0XHRcdFx0XHRtYXRyaXguX3NoaWZ0bGVzcygpLmludmVydCgpKSk7XG5cdFx0cG9pbnQgPSBtYXRyaXguX2ludmVyc2VUcmFuc2Zvcm0ocG9pbnQpO1xuXHRcdGlmICghcG9pbnQgfHwgIXRoaXMuX2NoaWxkcmVuICYmXG5cdFx0XHQhdGhpcy5nZXRCb3VuZHMoeyBpbnRlcm5hbDogdHJ1ZSwgc3Ryb2tlOiB0cnVlLCBoYW5kbGU6IHRydWUgfSlcblx0XHRcdFx0LmV4cGFuZCh0b2xlcmFuY2VQYWRkaW5nLm11bHRpcGx5KDIpKS5fY29udGFpbnNQb2ludChwb2ludCkpIHtcblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH1cblxuXHRcdHZhciBjaGVja1NlbGYgPSAhKG9wdGlvbnMuZ3VpZGVzICYmICF0aGlzLl9ndWlkZVxuXHRcdFx0XHR8fCBvcHRpb25zLnNlbGVjdGVkICYmICF0aGlzLmlzU2VsZWN0ZWQoKVxuXHRcdFx0XHR8fCBvcHRpb25zLnR5cGUgJiYgb3B0aW9ucy50eXBlICE9PSBCYXNlLmh5cGhlbmF0ZSh0aGlzLl9jbGFzcylcblx0XHRcdFx0fHwgb3B0aW9ucy5jbGFzcyAmJiAhKHRoaXMgaW5zdGFuY2VvZiBvcHRpb25zLmNsYXNzKSksXG5cdFx0XHRtYXRjaCA9IG9wdGlvbnMubWF0Y2gsXG5cdFx0XHR0aGF0ID0gdGhpcyxcblx0XHRcdGJvdW5kcyxcblx0XHRcdHJlcztcblxuXHRcdGZ1bmN0aW9uIGZpbHRlcihoaXQpIHtcblx0XHRcdGlmIChoaXQgJiYgbWF0Y2ggJiYgIW1hdGNoKGhpdCkpXG5cdFx0XHRcdGhpdCA9IG51bGw7XG5cdFx0XHRpZiAoaGl0ICYmIG9wdGlvbnMuYWxsKVxuXHRcdFx0XHRvcHRpb25zLmFsbC5wdXNoKGhpdCk7XG5cdFx0XHRyZXR1cm4gaGl0O1xuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIGNoZWNrUG9pbnQodHlwZSwgcGFydCkge1xuXHRcdFx0dmFyIHB0ID0gcGFydCA/IGJvdW5kc1snZ2V0JyArIHBhcnRdKCkgOiB0aGF0LmdldFBvc2l0aW9uKCk7XG5cdFx0XHRpZiAocG9pbnQuc3VidHJhY3QocHQpLmRpdmlkZSh0b2xlcmFuY2VQYWRkaW5nKS5sZW5ndGggPD0gMSkge1xuXHRcdFx0XHRyZXR1cm4gbmV3IEhpdFJlc3VsdCh0eXBlLCB0aGF0LCB7XG5cdFx0XHRcdFx0bmFtZTogcGFydCA/IEJhc2UuaHlwaGVuYXRlKHBhcnQpIDogdHlwZSxcblx0XHRcdFx0XHRwb2ludDogcHRcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0dmFyIGNoZWNrUG9zaXRpb24gPSBvcHRpb25zLnBvc2l0aW9uLFxuXHRcdFx0Y2hlY2tDZW50ZXIgPSBvcHRpb25zLmNlbnRlcixcblx0XHRcdGNoZWNrQm91bmRzID0gb3B0aW9ucy5ib3VuZHM7XG5cdFx0aWYgKGNoZWNrU2VsZiAmJiB0aGlzLl9wYXJlbnRcblx0XHRcdFx0JiYgKGNoZWNrUG9zaXRpb24gfHwgY2hlY2tDZW50ZXIgfHwgY2hlY2tCb3VuZHMpKSB7XG5cdFx0XHRpZiAoY2hlY2tDZW50ZXIgfHwgY2hlY2tCb3VuZHMpIHtcblx0XHRcdFx0Ym91bmRzID0gdGhpcy5nZXRJbnRlcm5hbEJvdW5kcygpO1xuXHRcdFx0fVxuXHRcdFx0cmVzID0gY2hlY2tQb3NpdGlvbiAmJiBjaGVja1BvaW50KCdwb3NpdGlvbicpIHx8XG5cdFx0XHRcdFx0Y2hlY2tDZW50ZXIgJiYgY2hlY2tQb2ludCgnY2VudGVyJywgJ0NlbnRlcicpO1xuXHRcdFx0aWYgKCFyZXMgJiYgY2hlY2tCb3VuZHMpIHtcblx0XHRcdFx0dmFyIHBvaW50cyA9IFtcblx0XHRcdFx0XHQnVG9wTGVmdCcsICdUb3BSaWdodCcsICdCb3R0b21MZWZ0JywgJ0JvdHRvbVJpZ2h0Jyxcblx0XHRcdFx0XHQnTGVmdENlbnRlcicsICdUb3BDZW50ZXInLCAnUmlnaHRDZW50ZXInLCAnQm90dG9tQ2VudGVyJ1xuXHRcdFx0XHRdO1xuXHRcdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IDggJiYgIXJlczsgaSsrKSB7XG5cdFx0XHRcdFx0cmVzID0gY2hlY2tQb2ludCgnYm91bmRzJywgcG9pbnRzW2ldKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmVzID0gZmlsdGVyKHJlcyk7XG5cdFx0fVxuXG5cdFx0aWYgKCFyZXMpIHtcblx0XHRcdHJlcyA9IHRoaXMuX2hpdFRlc3RDaGlsZHJlbihwb2ludCwgb3B0aW9ucywgdmlld01hdHJpeClcblx0XHRcdFx0fHwgY2hlY2tTZWxmXG5cdFx0XHRcdFx0JiYgZmlsdGVyKHRoaXMuX2hpdFRlc3RTZWxmKHBvaW50LCBvcHRpb25zLCB2aWV3TWF0cml4LFxuXHRcdFx0XHRcdFx0dGhpcy5nZXRTdHJva2VTY2FsaW5nKCkgPyBudWxsXG5cdFx0XHRcdFx0XHRcdDogdmlld01hdHJpeC5fc2hpZnRsZXNzKCkuaW52ZXJ0KCkpKVxuXHRcdFx0XHR8fCBudWxsO1xuXHRcdH1cblx0XHRpZiAocmVzICYmIHJlcy5wb2ludCkge1xuXHRcdFx0cmVzLnBvaW50ID0gbWF0cml4LnRyYW5zZm9ybShyZXMucG9pbnQpO1xuXHRcdH1cblx0XHRyZXR1cm4gcmVzO1xuXHR9LFxuXG5cdF9oaXRUZXN0U2VsZjogZnVuY3Rpb24ocG9pbnQsIG9wdGlvbnMpIHtcblx0XHRpZiAob3B0aW9ucy5maWxsICYmIHRoaXMuaGFzRmlsbCgpICYmIHRoaXMuX2NvbnRhaW5zKHBvaW50KSlcblx0XHRcdHJldHVybiBuZXcgSGl0UmVzdWx0KCdmaWxsJywgdGhpcyk7XG5cdH0sXG5cblx0bWF0Y2hlczogZnVuY3Rpb24obmFtZSwgY29tcGFyZSkge1xuXHRcdGZ1bmN0aW9uIG1hdGNoT2JqZWN0KG9iajEsIG9iajIpIHtcblx0XHRcdGZvciAodmFyIGkgaW4gb2JqMSkge1xuXHRcdFx0XHRpZiAob2JqMS5oYXNPd25Qcm9wZXJ0eShpKSkge1xuXHRcdFx0XHRcdHZhciB2YWwxID0gb2JqMVtpXSxcblx0XHRcdFx0XHRcdHZhbDIgPSBvYmoyW2ldO1xuXHRcdFx0XHRcdGlmIChCYXNlLmlzUGxhaW5PYmplY3QodmFsMSkgJiYgQmFzZS5pc1BsYWluT2JqZWN0KHZhbDIpKSB7XG5cdFx0XHRcdFx0XHRpZiAoIW1hdGNoT2JqZWN0KHZhbDEsIHZhbDIpKVxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdFx0fSBlbHNlIGlmICghQmFzZS5lcXVhbHModmFsMSwgdmFsMikpIHtcblx0XHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblx0XHR2YXIgdHlwZSA9IHR5cGVvZiBuYW1lO1xuXHRcdGlmICh0eXBlID09PSAnb2JqZWN0Jykge1xuXHRcdFx0Zm9yICh2YXIga2V5IGluIG5hbWUpIHtcblx0XHRcdFx0aWYgKG5hbWUuaGFzT3duUHJvcGVydHkoa2V5KSAmJiAhdGhpcy5tYXRjaGVzKGtleSwgbmFtZVtrZXldKSlcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9IGVsc2UgaWYgKHR5cGUgPT09ICdmdW5jdGlvbicpIHtcblx0XHRcdHJldHVybiBuYW1lKHRoaXMpO1xuXHRcdH0gZWxzZSBpZiAobmFtZSA9PT0gJ21hdGNoJykge1xuXHRcdFx0cmV0dXJuIGNvbXBhcmUodGhpcyk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHZhciB2YWx1ZSA9IC9eKGVtcHR5fGVkaXRhYmxlKSQvLnRlc3QobmFtZSlcblx0XHRcdFx0XHQ/IHRoaXNbJ2lzJyArIEJhc2UuY2FwaXRhbGl6ZShuYW1lKV0oKVxuXHRcdFx0XHRcdDogbmFtZSA9PT0gJ3R5cGUnXG5cdFx0XHRcdFx0XHQ/IEJhc2UuaHlwaGVuYXRlKHRoaXMuX2NsYXNzKVxuXHRcdFx0XHRcdFx0OiB0aGlzW25hbWVdO1xuXHRcdFx0aWYgKG5hbWUgPT09ICdjbGFzcycpIHtcblx0XHRcdFx0aWYgKHR5cGVvZiBjb21wYXJlID09PSAnZnVuY3Rpb24nKVxuXHRcdFx0XHRcdHJldHVybiB0aGlzIGluc3RhbmNlb2YgY29tcGFyZTtcblx0XHRcdFx0dmFsdWUgPSB0aGlzLl9jbGFzcztcblx0XHRcdH1cblx0XHRcdGlmICh0eXBlb2YgY29tcGFyZSA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdFx0XHRyZXR1cm4gISFjb21wYXJlKHZhbHVlKTtcblx0XHRcdH0gZWxzZSBpZiAoY29tcGFyZSkge1xuXHRcdFx0XHRpZiAoY29tcGFyZS50ZXN0KSB7XG5cdFx0XHRcdFx0cmV0dXJuIGNvbXBhcmUudGVzdCh2YWx1ZSk7XG5cdFx0XHRcdH0gZWxzZSBpZiAoQmFzZS5pc1BsYWluT2JqZWN0KGNvbXBhcmUpKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG1hdGNoT2JqZWN0KGNvbXBhcmUsIHZhbHVlKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIEJhc2UuZXF1YWxzKHZhbHVlLCBjb21wYXJlKTtcblx0XHR9XG5cdH0sXG5cblx0Z2V0SXRlbXM6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcblx0XHRyZXR1cm4gSXRlbS5fZ2V0SXRlbXModGhpcywgb3B0aW9ucywgdGhpcy5fbWF0cml4KTtcblx0fSxcblxuXHRnZXRJdGVtOiBmdW5jdGlvbihvcHRpb25zKSB7XG5cdFx0cmV0dXJuIEl0ZW0uX2dldEl0ZW1zKHRoaXMsIG9wdGlvbnMsIHRoaXMuX21hdHJpeCwgbnVsbCwgdHJ1ZSlbMF1cblx0XHRcdFx0fHwgbnVsbDtcblx0fSxcblxuXHRzdGF0aWNzOiB7XG5cdFx0X2dldEl0ZW1zOiBmdW5jdGlvbiBfZ2V0SXRlbXMoaXRlbSwgb3B0aW9ucywgbWF0cml4LCBwYXJhbSwgZmlyc3RPbmx5KSB7XG5cdFx0XHRpZiAoIXBhcmFtKSB7XG5cdFx0XHRcdHZhciBvYmogPSB0eXBlb2Ygb3B0aW9ucyA9PT0gJ29iamVjdCcgJiYgb3B0aW9ucyxcblx0XHRcdFx0XHRvdmVybGFwcGluZyA9IG9iaiAmJiBvYmoub3ZlcmxhcHBpbmcsXG5cdFx0XHRcdFx0aW5zaWRlID0gb2JqICYmIG9iai5pbnNpZGUsXG5cdFx0XHRcdFx0Ym91bmRzID0gb3ZlcmxhcHBpbmcgfHwgaW5zaWRlLFxuXHRcdFx0XHRcdHJlY3QgPSBib3VuZHMgJiYgUmVjdGFuZ2xlLnJlYWQoW2JvdW5kc10pO1xuXHRcdFx0XHRwYXJhbSA9IHtcblx0XHRcdFx0XHRpdGVtczogW10sXG5cdFx0XHRcdFx0cmVjdXJzaXZlOiBvYmogJiYgb2JqLnJlY3Vyc2l2ZSAhPT0gZmFsc2UsXG5cdFx0XHRcdFx0aW5zaWRlOiAhIWluc2lkZSxcblx0XHRcdFx0XHRvdmVybGFwcGluZzogISFvdmVybGFwcGluZyxcblx0XHRcdFx0XHRyZWN0OiByZWN0LFxuXHRcdFx0XHRcdHBhdGg6IG92ZXJsYXBwaW5nICYmIG5ldyBQYXRoLlJlY3RhbmdsZSh7XG5cdFx0XHRcdFx0XHRyZWN0YW5nbGU6IHJlY3QsXG5cdFx0XHRcdFx0XHRpbnNlcnQ6IGZhbHNlXG5cdFx0XHRcdFx0fSlcblx0XHRcdFx0fTtcblx0XHRcdFx0aWYgKG9iaikge1xuXHRcdFx0XHRcdG9wdGlvbnMgPSBCYXNlLmZpbHRlcih7fSwgb3B0aW9ucywge1xuXHRcdFx0XHRcdFx0cmVjdXJzaXZlOiB0cnVlLCBpbnNpZGU6IHRydWUsIG92ZXJsYXBwaW5nOiB0cnVlXG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHZhciBjaGlsZHJlbiA9IGl0ZW0uX2NoaWxkcmVuLFxuXHRcdFx0XHRpdGVtcyA9IHBhcmFtLml0ZW1zLFxuXHRcdFx0XHRyZWN0ID0gcGFyYW0ucmVjdDtcblx0XHRcdG1hdHJpeCA9IHJlY3QgJiYgKG1hdHJpeCB8fCBuZXcgTWF0cml4KCkpO1xuXHRcdFx0Zm9yICh2YXIgaSA9IDAsIGwgPSBjaGlsZHJlbiAmJiBjaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpKyspIHtcblx0XHRcdFx0dmFyIGNoaWxkID0gY2hpbGRyZW5baV0sXG5cdFx0XHRcdFx0Y2hpbGRNYXRyaXggPSBtYXRyaXggJiYgbWF0cml4LmFwcGVuZGVkKGNoaWxkLl9tYXRyaXgpLFxuXHRcdFx0XHRcdGFkZCA9IHRydWU7XG5cdFx0XHRcdGlmIChyZWN0KSB7XG5cdFx0XHRcdFx0dmFyIGJvdW5kcyA9IGNoaWxkLmdldEJvdW5kcyhjaGlsZE1hdHJpeCk7XG5cdFx0XHRcdFx0aWYgKCFyZWN0LmludGVyc2VjdHMoYm91bmRzKSlcblx0XHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHRcdGlmICghKHJlY3QuY29udGFpbnMoYm91bmRzKVxuXHRcdFx0XHRcdFx0XHR8fCBwYXJhbS5vdmVybGFwcGluZyAmJiAoYm91bmRzLmNvbnRhaW5zKHJlY3QpXG5cdFx0XHRcdFx0XHRcdFx0fHwgcGFyYW0ucGF0aC5pbnRlcnNlY3RzKGNoaWxkLCBjaGlsZE1hdHJpeCkpKSlcblx0XHRcdFx0XHRcdGFkZCA9IGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChhZGQgJiYgY2hpbGQubWF0Y2hlcyhvcHRpb25zKSkge1xuXHRcdFx0XHRcdGl0ZW1zLnB1c2goY2hpbGQpO1xuXHRcdFx0XHRcdGlmIChmaXJzdE9ubHkpXG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAocGFyYW0ucmVjdXJzaXZlICE9PSBmYWxzZSkge1xuXHRcdFx0XHRcdF9nZXRJdGVtcyhjaGlsZCwgb3B0aW9ucywgY2hpbGRNYXRyaXgsIHBhcmFtLCBmaXJzdE9ubHkpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChmaXJzdE9ubHkgJiYgaXRlbXMubGVuZ3RoID4gMClcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdHJldHVybiBpdGVtcztcblx0XHR9XG5cdH1cbn0sIHtcblxuXHRpbXBvcnRKU09OOiBmdW5jdGlvbihqc29uKSB7XG5cdFx0dmFyIHJlcyA9IEJhc2UuaW1wb3J0SlNPTihqc29uLCB0aGlzKTtcblx0XHRyZXR1cm4gcmVzICE9PSB0aGlzID8gdGhpcy5hZGRDaGlsZChyZXMpIDogcmVzO1xuXHR9LFxuXG5cdGFkZENoaWxkOiBmdW5jdGlvbihpdGVtKSB7XG5cdFx0cmV0dXJuIHRoaXMuaW5zZXJ0Q2hpbGQodW5kZWZpbmVkLCBpdGVtKTtcblx0fSxcblxuXHRpbnNlcnRDaGlsZDogZnVuY3Rpb24oaW5kZXgsIGl0ZW0pIHtcblx0XHR2YXIgcmVzID0gaXRlbSA/IHRoaXMuaW5zZXJ0Q2hpbGRyZW4oaW5kZXgsIFtpdGVtXSkgOiBudWxsO1xuXHRcdHJldHVybiByZXMgJiYgcmVzWzBdO1xuXHR9LFxuXG5cdGFkZENoaWxkcmVuOiBmdW5jdGlvbihpdGVtcykge1xuXHRcdHJldHVybiB0aGlzLmluc2VydENoaWxkcmVuKHRoaXMuX2NoaWxkcmVuLmxlbmd0aCwgaXRlbXMpO1xuXHR9LFxuXG5cdGluc2VydENoaWxkcmVuOiBmdW5jdGlvbihpbmRleCwgaXRlbXMpIHtcblx0XHR2YXIgY2hpbGRyZW4gPSB0aGlzLl9jaGlsZHJlbjtcblx0XHRpZiAoY2hpbGRyZW4gJiYgaXRlbXMgJiYgaXRlbXMubGVuZ3RoID4gMCkge1xuXHRcdFx0aXRlbXMgPSBCYXNlLnNsaWNlKGl0ZW1zKTtcblx0XHRcdHZhciBpbnNlcnRlZCA9IHt9O1xuXHRcdFx0Zm9yICh2YXIgaSA9IGl0ZW1zLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG5cdFx0XHRcdHZhciBpdGVtID0gaXRlbXNbaV0sXG5cdFx0XHRcdFx0aWQgPSBpdGVtICYmIGl0ZW0uX2lkO1xuXHRcdFx0XHRpZiAoIWl0ZW0gfHwgaW5zZXJ0ZWRbaWRdKSB7XG5cdFx0XHRcdFx0aXRlbXMuc3BsaWNlKGksIDEpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGl0ZW0uX3JlbW92ZShmYWxzZSwgdHJ1ZSk7XG5cdFx0XHRcdFx0aW5zZXJ0ZWRbaWRdID0gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0QmFzZS5zcGxpY2UoY2hpbGRyZW4sIGl0ZW1zLCBpbmRleCwgMCk7XG5cdFx0XHR2YXIgcHJvamVjdCA9IHRoaXMuX3Byb2plY3QsXG5cdFx0XHRcdG5vdGlmeVNlbGYgPSBwcm9qZWN0Ll9jaGFuZ2VzO1xuXHRcdFx0Zm9yICh2YXIgaSA9IDAsIGwgPSBpdGVtcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcblx0XHRcdFx0dmFyIGl0ZW0gPSBpdGVtc1tpXSxcblx0XHRcdFx0XHRuYW1lID0gaXRlbS5fbmFtZTtcblx0XHRcdFx0aXRlbS5fcGFyZW50ID0gdGhpcztcblx0XHRcdFx0aXRlbS5fc2V0UHJvamVjdChwcm9qZWN0LCB0cnVlKTtcblx0XHRcdFx0aWYgKG5hbWUpXG5cdFx0XHRcdFx0aXRlbS5zZXROYW1lKG5hbWUpO1xuXHRcdFx0XHRpZiAobm90aWZ5U2VsZilcblx0XHRcdFx0XHRpdGVtLl9jaGFuZ2VkKDUpO1xuXHRcdFx0fVxuXHRcdFx0dGhpcy5fY2hhbmdlZCgxMSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGl0ZW1zID0gbnVsbDtcblx0XHR9XG5cdFx0cmV0dXJuIGl0ZW1zO1xuXHR9LFxuXG5cdF9pbnNlcnRJdGVtOiAnI2luc2VydENoaWxkJyxcblxuXHRfaW5zZXJ0QXQ6IGZ1bmN0aW9uKGl0ZW0sIG9mZnNldCkge1xuXHRcdHZhciBvd25lciA9IGl0ZW0gJiYgaXRlbS5fZ2V0T3duZXIoKSxcblx0XHRcdHJlcyA9IGl0ZW0gIT09IHRoaXMgJiYgb3duZXIgPyB0aGlzIDogbnVsbDtcblx0XHRpZiAocmVzKSB7XG5cdFx0XHRyZXMuX3JlbW92ZShmYWxzZSwgdHJ1ZSk7XG5cdFx0XHRvd25lci5faW5zZXJ0SXRlbShpdGVtLl9pbmRleCArIG9mZnNldCwgcmVzKTtcblx0XHR9XG5cdFx0cmV0dXJuIHJlcztcblx0fSxcblxuXHRpbnNlcnRBYm92ZTogZnVuY3Rpb24oaXRlbSkge1xuXHRcdHJldHVybiB0aGlzLl9pbnNlcnRBdChpdGVtLCAxKTtcblx0fSxcblxuXHRpbnNlcnRCZWxvdzogZnVuY3Rpb24oaXRlbSkge1xuXHRcdHJldHVybiB0aGlzLl9pbnNlcnRBdChpdGVtLCAwKTtcblx0fSxcblxuXHRzZW5kVG9CYWNrOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgb3duZXIgPSB0aGlzLl9nZXRPd25lcigpO1xuXHRcdHJldHVybiBvd25lciA/IG93bmVyLl9pbnNlcnRJdGVtKDAsIHRoaXMpIDogbnVsbDtcblx0fSxcblxuXHRicmluZ1RvRnJvbnQ6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBvd25lciA9IHRoaXMuX2dldE93bmVyKCk7XG5cdFx0cmV0dXJuIG93bmVyID8gb3duZXIuX2luc2VydEl0ZW0odW5kZWZpbmVkLCB0aGlzKSA6IG51bGw7XG5cdH0sXG5cblx0YXBwZW5kVG9wOiAnI2FkZENoaWxkJyxcblxuXHRhcHBlbmRCb3R0b206IGZ1bmN0aW9uKGl0ZW0pIHtcblx0XHRyZXR1cm4gdGhpcy5pbnNlcnRDaGlsZCgwLCBpdGVtKTtcblx0fSxcblxuXHRtb3ZlQWJvdmU6ICcjaW5zZXJ0QWJvdmUnLFxuXG5cdG1vdmVCZWxvdzogJyNpbnNlcnRCZWxvdycsXG5cblx0YWRkVG86IGZ1bmN0aW9uKG93bmVyKSB7XG5cdFx0cmV0dXJuIG93bmVyLl9pbnNlcnRJdGVtKHVuZGVmaW5lZCwgdGhpcyk7XG5cdH0sXG5cblx0Y29weVRvOiBmdW5jdGlvbihvd25lcikge1xuXHRcdHJldHVybiB0aGlzLmNsb25lKGZhbHNlKS5hZGRUbyhvd25lcik7XG5cdH0sXG5cblx0cmVkdWNlOiBmdW5jdGlvbihvcHRpb25zKSB7XG5cdFx0dmFyIGNoaWxkcmVuID0gdGhpcy5fY2hpbGRyZW47XG5cdFx0aWYgKGNoaWxkcmVuICYmIGNoaWxkcmVuLmxlbmd0aCA9PT0gMSkge1xuXHRcdFx0dmFyIGNoaWxkID0gY2hpbGRyZW5bMF0ucmVkdWNlKG9wdGlvbnMpO1xuXHRcdFx0aWYgKHRoaXMuX3BhcmVudCkge1xuXHRcdFx0XHRjaGlsZC5pbnNlcnRBYm92ZSh0aGlzKTtcblx0XHRcdFx0dGhpcy5yZW1vdmUoKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGNoaWxkLnJlbW92ZSgpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGNoaWxkO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRfcmVtb3ZlTmFtZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBvd25lciA9IHRoaXMuX2dldE93bmVyKCk7XG5cdFx0aWYgKG93bmVyKSB7XG5cdFx0XHR2YXIgY2hpbGRyZW4gPSBvd25lci5fY2hpbGRyZW4sXG5cdFx0XHRcdG5hbWVkQ2hpbGRyZW4gPSBvd25lci5fbmFtZWRDaGlsZHJlbixcblx0XHRcdFx0bmFtZSA9IHRoaXMuX25hbWUsXG5cdFx0XHRcdG5hbWVkQXJyYXkgPSBuYW1lZENoaWxkcmVuW25hbWVdLFxuXHRcdFx0XHRpbmRleCA9IG5hbWVkQXJyYXkgPyBuYW1lZEFycmF5LmluZGV4T2YodGhpcykgOiAtMTtcblx0XHRcdGlmIChpbmRleCAhPT0gLTEpIHtcblx0XHRcdFx0aWYgKGNoaWxkcmVuW25hbWVdID09IHRoaXMpXG5cdFx0XHRcdFx0ZGVsZXRlIGNoaWxkcmVuW25hbWVdO1xuXHRcdFx0XHRuYW1lZEFycmF5LnNwbGljZShpbmRleCwgMSk7XG5cdFx0XHRcdGlmIChuYW1lZEFycmF5Lmxlbmd0aCkge1xuXHRcdFx0XHRcdGNoaWxkcmVuW25hbWVdID0gbmFtZWRBcnJheVswXTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRkZWxldGUgbmFtZWRDaGlsZHJlbltuYW1lXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHRfcmVtb3ZlOiBmdW5jdGlvbihub3RpZnlTZWxmLCBub3RpZnlQYXJlbnQpIHtcblx0XHR2YXIgb3duZXIgPSB0aGlzLl9nZXRPd25lcigpLFxuXHRcdFx0cHJvamVjdCA9IHRoaXMuX3Byb2plY3QsXG5cdFx0XHRpbmRleCA9IHRoaXMuX2luZGV4O1xuXHRcdGlmICh0aGlzLl9zdHlsZSlcblx0XHRcdHRoaXMuX3N0eWxlLl9kaXNwb3NlKCk7XG5cdFx0aWYgKG93bmVyKSB7XG5cdFx0XHRpZiAodGhpcy5fbmFtZSlcblx0XHRcdFx0dGhpcy5fcmVtb3ZlTmFtZWQoKTtcblx0XHRcdGlmIChpbmRleCAhPSBudWxsKSB7XG5cdFx0XHRcdGlmIChwcm9qZWN0Ll9hY3RpdmVMYXllciA9PT0gdGhpcylcblx0XHRcdFx0XHRwcm9qZWN0Ll9hY3RpdmVMYXllciA9IHRoaXMuZ2V0TmV4dFNpYmxpbmcoKVxuXHRcdFx0XHRcdFx0XHR8fCB0aGlzLmdldFByZXZpb3VzU2libGluZygpO1xuXHRcdFx0XHRCYXNlLnNwbGljZShvd25lci5fY2hpbGRyZW4sIG51bGwsIGluZGV4LCAxKTtcblx0XHRcdH1cblx0XHRcdHRoaXMuX2luc3RhbGxFdmVudHMoZmFsc2UpO1xuXHRcdFx0aWYgKG5vdGlmeVNlbGYgJiYgcHJvamVjdC5fY2hhbmdlcylcblx0XHRcdFx0dGhpcy5fY2hhbmdlZCg1KTtcblx0XHRcdGlmIChub3RpZnlQYXJlbnQpXG5cdFx0XHRcdG93bmVyLl9jaGFuZ2VkKDExLCB0aGlzKTtcblx0XHRcdHRoaXMuX3BhcmVudCA9IG51bGw7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9LFxuXG5cdHJlbW92ZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuX3JlbW92ZSh0cnVlLCB0cnVlKTtcblx0fSxcblxuXHRyZXBsYWNlV2l0aDogZnVuY3Rpb24oaXRlbSkge1xuXHRcdHZhciBvayA9IGl0ZW0gJiYgaXRlbS5pbnNlcnRCZWxvdyh0aGlzKTtcblx0XHRpZiAob2spXG5cdFx0XHR0aGlzLnJlbW92ZSgpO1xuXHRcdHJldHVybiBvaztcblx0fSxcblxuXHRyZW1vdmVDaGlsZHJlbjogZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuXHRcdGlmICghdGhpcy5fY2hpbGRyZW4pXG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRzdGFydCA9IHN0YXJ0IHx8IDA7XG5cdFx0ZW5kID0gQmFzZS5waWNrKGVuZCwgdGhpcy5fY2hpbGRyZW4ubGVuZ3RoKTtcblx0XHR2YXIgcmVtb3ZlZCA9IEJhc2Uuc3BsaWNlKHRoaXMuX2NoaWxkcmVuLCBudWxsLCBzdGFydCwgZW5kIC0gc3RhcnQpO1xuXHRcdGZvciAodmFyIGkgPSByZW1vdmVkLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG5cdFx0XHRyZW1vdmVkW2ldLl9yZW1vdmUodHJ1ZSwgZmFsc2UpO1xuXHRcdH1cblx0XHRpZiAocmVtb3ZlZC5sZW5ndGggPiAwKVxuXHRcdFx0dGhpcy5fY2hhbmdlZCgxMSk7XG5cdFx0cmV0dXJuIHJlbW92ZWQ7XG5cdH0sXG5cblx0Y2xlYXI6ICcjcmVtb3ZlQ2hpbGRyZW4nLFxuXG5cdHJldmVyc2VDaGlsZHJlbjogZnVuY3Rpb24oKSB7XG5cdFx0aWYgKHRoaXMuX2NoaWxkcmVuKSB7XG5cdFx0XHR0aGlzLl9jaGlsZHJlbi5yZXZlcnNlKCk7XG5cdFx0XHRmb3IgKHZhciBpID0gMCwgbCA9IHRoaXMuX2NoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkrKylcblx0XHRcdFx0dGhpcy5fY2hpbGRyZW5baV0uX2luZGV4ID0gaTtcblx0XHRcdHRoaXMuX2NoYW5nZWQoMTEpO1xuXHRcdH1cblx0fSxcblxuXHRpc0VtcHR5OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgY2hpbGRyZW4gPSB0aGlzLl9jaGlsZHJlbjtcblx0XHRyZXR1cm4gIWNoaWxkcmVuIHx8ICFjaGlsZHJlbi5sZW5ndGg7XG5cdH0sXG5cblx0aXNFZGl0YWJsZTogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGl0ZW0gPSB0aGlzO1xuXHRcdHdoaWxlIChpdGVtKSB7XG5cdFx0XHRpZiAoIWl0ZW0uX3Zpc2libGUgfHwgaXRlbS5fbG9ja2VkKVxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRpdGVtID0gaXRlbS5fcGFyZW50O1xuXHRcdH1cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSxcblxuXHRoYXNGaWxsOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5nZXRTdHlsZSgpLmhhc0ZpbGwoKTtcblx0fSxcblxuXHRoYXNTdHJva2U6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmdldFN0eWxlKCkuaGFzU3Ryb2tlKCk7XG5cdH0sXG5cblx0aGFzU2hhZG93OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5nZXRTdHlsZSgpLmhhc1NoYWRvdygpO1xuXHR9LFxuXG5cdF9nZXRPcmRlcjogZnVuY3Rpb24oaXRlbSkge1xuXHRcdGZ1bmN0aW9uIGdldExpc3QoaXRlbSkge1xuXHRcdFx0dmFyIGxpc3QgPSBbXTtcblx0XHRcdGRvIHtcblx0XHRcdFx0bGlzdC51bnNoaWZ0KGl0ZW0pO1xuXHRcdFx0fSB3aGlsZSAoaXRlbSA9IGl0ZW0uX3BhcmVudCk7XG5cdFx0XHRyZXR1cm4gbGlzdDtcblx0XHR9XG5cdFx0dmFyIGxpc3QxID0gZ2V0TGlzdCh0aGlzKSxcblx0XHRcdGxpc3QyID0gZ2V0TGlzdChpdGVtKTtcblx0XHRmb3IgKHZhciBpID0gMCwgbCA9IE1hdGgubWluKGxpc3QxLmxlbmd0aCwgbGlzdDIubGVuZ3RoKTsgaSA8IGw7IGkrKykge1xuXHRcdFx0aWYgKGxpc3QxW2ldICE9IGxpc3QyW2ldKSB7XG5cdFx0XHRcdHJldHVybiBsaXN0MVtpXS5faW5kZXggPCBsaXN0MltpXS5faW5kZXggPyAxIDogLTE7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiAwO1xuXHR9LFxuXG5cdGhhc0NoaWxkcmVuOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5fY2hpbGRyZW4gJiYgdGhpcy5fY2hpbGRyZW4ubGVuZ3RoID4gMDtcblx0fSxcblxuXHRpc0luc2VydGVkOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5fcGFyZW50ID8gdGhpcy5fcGFyZW50LmlzSW5zZXJ0ZWQoKSA6IGZhbHNlO1xuXHR9LFxuXG5cdGlzQWJvdmU6IGZ1bmN0aW9uKGl0ZW0pIHtcblx0XHRyZXR1cm4gdGhpcy5fZ2V0T3JkZXIoaXRlbSkgPT09IC0xO1xuXHR9LFxuXG5cdGlzQmVsb3c6IGZ1bmN0aW9uKGl0ZW0pIHtcblx0XHRyZXR1cm4gdGhpcy5fZ2V0T3JkZXIoaXRlbSkgPT09IDE7XG5cdH0sXG5cblx0aXNQYXJlbnQ6IGZ1bmN0aW9uKGl0ZW0pIHtcblx0XHRyZXR1cm4gdGhpcy5fcGFyZW50ID09PSBpdGVtO1xuXHR9LFxuXG5cdGlzQ2hpbGQ6IGZ1bmN0aW9uKGl0ZW0pIHtcblx0XHRyZXR1cm4gaXRlbSAmJiBpdGVtLl9wYXJlbnQgPT09IHRoaXM7XG5cdH0sXG5cblx0aXNEZXNjZW5kYW50OiBmdW5jdGlvbihpdGVtKSB7XG5cdFx0dmFyIHBhcmVudCA9IHRoaXM7XG5cdFx0d2hpbGUgKHBhcmVudCA9IHBhcmVudC5fcGFyZW50KSB7XG5cdFx0XHRpZiAocGFyZW50ID09PSBpdGVtKVxuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9LFxuXG5cdGlzQW5jZXN0b3I6IGZ1bmN0aW9uKGl0ZW0pIHtcblx0XHRyZXR1cm4gaXRlbSA/IGl0ZW0uaXNEZXNjZW5kYW50KHRoaXMpIDogZmFsc2U7XG5cdH0sXG5cblx0aXNTaWJsaW5nOiBmdW5jdGlvbihpdGVtKSB7XG5cdFx0cmV0dXJuIHRoaXMuX3BhcmVudCA9PT0gaXRlbS5fcGFyZW50O1xuXHR9LFxuXG5cdGlzR3JvdXBlZFdpdGg6IGZ1bmN0aW9uKGl0ZW0pIHtcblx0XHR2YXIgcGFyZW50ID0gdGhpcy5fcGFyZW50O1xuXHRcdHdoaWxlIChwYXJlbnQpIHtcblx0XHRcdGlmIChwYXJlbnQuX3BhcmVudFxuXHRcdFx0XHQmJiAvXihHcm91cHxMYXllcnxDb21wb3VuZFBhdGgpJC8udGVzdChwYXJlbnQuX2NsYXNzKVxuXHRcdFx0XHQmJiBpdGVtLmlzRGVzY2VuZGFudChwYXJlbnQpKVxuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0cGFyZW50ID0gcGFyZW50Ll9wYXJlbnQ7XG5cdFx0fVxuXHRcdHJldHVybiBmYWxzZTtcblx0fSxcblxufSwgQmFzZS5lYWNoKFsncm90YXRlJywgJ3NjYWxlJywgJ3NoZWFyJywgJ3NrZXcnXSwgZnVuY3Rpb24oa2V5KSB7XG5cdHZhciByb3RhdGUgPSBrZXkgPT09ICdyb3RhdGUnO1xuXHR0aGlzW2tleV0gPSBmdW5jdGlvbigpIHtcblx0XHR2YXIgdmFsdWUgPSAocm90YXRlID8gQmFzZSA6IFBvaW50KS5yZWFkKGFyZ3VtZW50cyksXG5cdFx0XHRjZW50ZXIgPSBQb2ludC5yZWFkKGFyZ3VtZW50cywgMCwgeyByZWFkTnVsbDogdHJ1ZSB9KTtcblx0XHRyZXR1cm4gdGhpcy50cmFuc2Zvcm0obmV3IE1hdHJpeCgpW2tleV0odmFsdWUsXG5cdFx0XHRcdGNlbnRlciB8fCB0aGlzLmdldFBvc2l0aW9uKHRydWUpKSk7XG5cdH07XG59LCB7XG5cdHRyYW5zbGF0ZTogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG14ID0gbmV3IE1hdHJpeCgpO1xuXHRcdHJldHVybiB0aGlzLnRyYW5zZm9ybShteC50cmFuc2xhdGUuYXBwbHkobXgsIGFyZ3VtZW50cykpO1xuXHR9LFxuXG5cdHRyYW5zZm9ybTogZnVuY3Rpb24obWF0cml4LCBfYXBwbHlNYXRyaXgsIF9hcHBseVJlY3Vyc2l2ZWx5LFxuXHRcdFx0X3NldEFwcGx5TWF0cml4KSB7XG5cdFx0dmFyIF9tYXRyaXggPSB0aGlzLl9tYXRyaXgsXG5cdFx0XHR0cmFuc2Zvcm1NYXRyaXggPSBtYXRyaXggJiYgIW1hdHJpeC5pc0lkZW50aXR5KCksXG5cdFx0XHRhcHBseU1hdHJpeCA9IChfYXBwbHlNYXRyaXggfHwgdGhpcy5fYXBwbHlNYXRyaXgpXG5cdFx0XHRcdFx0JiYgKCghX21hdHJpeC5pc0lkZW50aXR5KCkgfHwgdHJhbnNmb3JtTWF0cml4KVxuXHRcdFx0XHRcdFx0fHwgX2FwcGx5TWF0cml4ICYmIF9hcHBseVJlY3Vyc2l2ZWx5ICYmIHRoaXMuX2NoaWxkcmVuKTtcblx0XHRpZiAoIXRyYW5zZm9ybU1hdHJpeCAmJiAhYXBwbHlNYXRyaXgpXG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHRpZiAodHJhbnNmb3JtTWF0cml4KSB7XG5cdFx0XHRpZiAoIW1hdHJpeC5pc0ludmVydGlibGUoKSAmJiBfbWF0cml4LmlzSW52ZXJ0aWJsZSgpKVxuXHRcdFx0XHRfbWF0cml4Ll9iYWNrdXAgPSBfbWF0cml4LmdldFZhbHVlcygpO1xuXHRcdFx0X21hdHJpeC5wcmVwZW5kKG1hdHJpeCwgdHJ1ZSk7XG5cdFx0XHR2YXIgc3R5bGUgPSB0aGlzLl9zdHlsZSxcblx0XHRcdFx0ZmlsbENvbG9yID0gc3R5bGUuZ2V0RmlsbENvbG9yKHRydWUpLFxuXHRcdFx0XHRzdHJva2VDb2xvciA9IHN0eWxlLmdldFN0cm9rZUNvbG9yKHRydWUpO1xuXHRcdFx0aWYgKGZpbGxDb2xvcilcblx0XHRcdFx0ZmlsbENvbG9yLnRyYW5zZm9ybShtYXRyaXgpO1xuXHRcdFx0aWYgKHN0cm9rZUNvbG9yKVxuXHRcdFx0XHRzdHJva2VDb2xvci50cmFuc2Zvcm0obWF0cml4KTtcblx0XHR9XG5cdFx0aWYgKGFwcGx5TWF0cml4ICYmIChhcHBseU1hdHJpeCA9IHRoaXMuX3RyYW5zZm9ybUNvbnRlbnQoX21hdHJpeCxcblx0XHRcdFx0X2FwcGx5UmVjdXJzaXZlbHksIF9zZXRBcHBseU1hdHJpeCkpKSB7XG5cdFx0XHR2YXIgcGl2b3QgPSB0aGlzLl9waXZvdDtcblx0XHRcdGlmIChwaXZvdClcblx0XHRcdFx0X21hdHJpeC5fdHJhbnNmb3JtUG9pbnQocGl2b3QsIHBpdm90LCB0cnVlKTtcblx0XHRcdF9tYXRyaXgucmVzZXQodHJ1ZSk7XG5cdFx0XHRpZiAoX3NldEFwcGx5TWF0cml4ICYmIHRoaXMuX2NhbkFwcGx5TWF0cml4KVxuXHRcdFx0XHR0aGlzLl9hcHBseU1hdHJpeCA9IHRydWU7XG5cdFx0fVxuXHRcdHZhciBib3VuZHMgPSB0aGlzLl9ib3VuZHMsXG5cdFx0XHRwb3NpdGlvbiA9IHRoaXMuX3Bvc2l0aW9uO1xuXHRcdGlmICh0cmFuc2Zvcm1NYXRyaXggfHwgYXBwbHlNYXRyaXgpIHtcblx0XHRcdHRoaXMuX2NoYW5nZWQoMjUpO1xuXHRcdH1cblx0XHR2YXIgZGVjb21wID0gdHJhbnNmb3JtTWF0cml4ICYmIGJvdW5kcyAmJiBtYXRyaXguZGVjb21wb3NlKCk7XG5cdFx0aWYgKGRlY29tcCAmJiBkZWNvbXAuc2tld2luZy5pc1plcm8oKSAmJiBkZWNvbXAucm90YXRpb24gJSA5MCA9PT0gMCkge1xuXHRcdFx0Zm9yICh2YXIga2V5IGluIGJvdW5kcykge1xuXHRcdFx0XHR2YXIgY2FjaGUgPSBib3VuZHNba2V5XTtcblx0XHRcdFx0aWYgKGNhY2hlLm5vbnNjYWxpbmcpIHtcblx0XHRcdFx0XHRkZWxldGUgYm91bmRzW2tleV07XG5cdFx0XHRcdH0gZWxzZSBpZiAoYXBwbHlNYXRyaXggfHwgIWNhY2hlLmludGVybmFsKSB7XG5cdFx0XHRcdFx0dmFyIHJlY3QgPSBjYWNoZS5yZWN0O1xuXHRcdFx0XHRcdG1hdHJpeC5fdHJhbnNmb3JtQm91bmRzKHJlY3QsIHJlY3QpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHR0aGlzLl9ib3VuZHMgPSBib3VuZHM7XG5cdFx0XHR2YXIgY2FjaGVkID0gYm91bmRzW3RoaXMuX2dldEJvdW5kc0NhY2hlS2V5KFxuXHRcdFx0XHR0aGlzLl9ib3VuZHNPcHRpb25zIHx8IHt9KV07XG5cdFx0XHRpZiAoY2FjaGVkKSB7XG5cdFx0XHRcdHRoaXMuX3Bvc2l0aW9uID0gdGhpcy5fZ2V0UG9zaXRpb25Gcm9tQm91bmRzKGNhY2hlZC5yZWN0KTtcblx0XHRcdH1cblx0XHR9IGVsc2UgaWYgKHRyYW5zZm9ybU1hdHJpeCAmJiBwb3NpdGlvbiAmJiB0aGlzLl9waXZvdCkge1xuXHRcdFx0dGhpcy5fcG9zaXRpb24gPSBtYXRyaXguX3RyYW5zZm9ybVBvaW50KHBvc2l0aW9uLCBwb3NpdGlvbik7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdF90cmFuc2Zvcm1Db250ZW50OiBmdW5jdGlvbihtYXRyaXgsIGFwcGx5UmVjdXJzaXZlbHksIHNldEFwcGx5TWF0cml4KSB7XG5cdFx0dmFyIGNoaWxkcmVuID0gdGhpcy5fY2hpbGRyZW47XG5cdFx0aWYgKGNoaWxkcmVuKSB7XG5cdFx0XHRmb3IgKHZhciBpID0gMCwgbCA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkrKylcblx0XHRcdFx0Y2hpbGRyZW5baV0udHJhbnNmb3JtKG1hdHJpeCwgdHJ1ZSwgYXBwbHlSZWN1cnNpdmVseSxcblx0XHRcdFx0XHRcdHNldEFwcGx5TWF0cml4KTtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblx0fSxcblxuXHRnbG9iYWxUb0xvY2FsOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5nZXRHbG9iYWxNYXRyaXgodHJ1ZSkuX2ludmVyc2VUcmFuc2Zvcm0oXG5cdFx0XHRcdFBvaW50LnJlYWQoYXJndW1lbnRzKSk7XG5cdH0sXG5cblx0bG9jYWxUb0dsb2JhbDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuZ2V0R2xvYmFsTWF0cml4KHRydWUpLl90cmFuc2Zvcm1Qb2ludChcblx0XHRcdFx0UG9pbnQucmVhZChhcmd1bWVudHMpKTtcblx0fSxcblxuXHRwYXJlbnRUb0xvY2FsOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5fbWF0cml4Ll9pbnZlcnNlVHJhbnNmb3JtKFBvaW50LnJlYWQoYXJndW1lbnRzKSk7XG5cdH0sXG5cblx0bG9jYWxUb1BhcmVudDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuX21hdHJpeC5fdHJhbnNmb3JtUG9pbnQoUG9pbnQucmVhZChhcmd1bWVudHMpKTtcblx0fSxcblxuXHRmaXRCb3VuZHM6IGZ1bmN0aW9uKHJlY3RhbmdsZSwgZmlsbCkge1xuXHRcdHJlY3RhbmdsZSA9IFJlY3RhbmdsZS5yZWFkKGFyZ3VtZW50cyk7XG5cdFx0dmFyIGJvdW5kcyA9IHRoaXMuZ2V0Qm91bmRzKCksXG5cdFx0XHRpdGVtUmF0aW8gPSBib3VuZHMuaGVpZ2h0IC8gYm91bmRzLndpZHRoLFxuXHRcdFx0cmVjdFJhdGlvID0gcmVjdGFuZ2xlLmhlaWdodCAvIHJlY3RhbmdsZS53aWR0aCxcblx0XHRcdHNjYWxlID0gKGZpbGwgPyBpdGVtUmF0aW8gPiByZWN0UmF0aW8gOiBpdGVtUmF0aW8gPCByZWN0UmF0aW8pXG5cdFx0XHRcdFx0PyByZWN0YW5nbGUud2lkdGggLyBib3VuZHMud2lkdGhcblx0XHRcdFx0XHQ6IHJlY3RhbmdsZS5oZWlnaHQgLyBib3VuZHMuaGVpZ2h0LFxuXHRcdFx0bmV3Qm91bmRzID0gbmV3IFJlY3RhbmdsZShuZXcgUG9pbnQoKSxcblx0XHRcdFx0XHRuZXcgU2l6ZShib3VuZHMud2lkdGggKiBzY2FsZSwgYm91bmRzLmhlaWdodCAqIHNjYWxlKSk7XG5cdFx0bmV3Qm91bmRzLnNldENlbnRlcihyZWN0YW5nbGUuZ2V0Q2VudGVyKCkpO1xuXHRcdHRoaXMuc2V0Qm91bmRzKG5ld0JvdW5kcyk7XG5cdH1cbn0pLCB7XG5cblx0X3NldFN0eWxlczogZnVuY3Rpb24oY3R4LCBwYXJhbSwgdmlld01hdHJpeCkge1xuXHRcdHZhciBzdHlsZSA9IHRoaXMuX3N0eWxlLFxuXHRcdFx0bWF0cml4ID0gdGhpcy5fbWF0cml4O1xuXHRcdGlmIChzdHlsZS5oYXNGaWxsKCkpIHtcblx0XHRcdGN0eC5maWxsU3R5bGUgPSBzdHlsZS5nZXRGaWxsQ29sb3IoKS50b0NhbnZhc1N0eWxlKGN0eCwgbWF0cml4KTtcblx0XHR9XG5cdFx0aWYgKHN0eWxlLmhhc1N0cm9rZSgpKSB7XG5cdFx0XHRjdHguc3Ryb2tlU3R5bGUgPSBzdHlsZS5nZXRTdHJva2VDb2xvcigpLnRvQ2FudmFzU3R5bGUoY3R4LCBtYXRyaXgpO1xuXHRcdFx0Y3R4LmxpbmVXaWR0aCA9IHN0eWxlLmdldFN0cm9rZVdpZHRoKCk7XG5cdFx0XHR2YXIgc3Ryb2tlSm9pbiA9IHN0eWxlLmdldFN0cm9rZUpvaW4oKSxcblx0XHRcdFx0c3Ryb2tlQ2FwID0gc3R5bGUuZ2V0U3Ryb2tlQ2FwKCksXG5cdFx0XHRcdG1pdGVyTGltaXQgPSBzdHlsZS5nZXRNaXRlckxpbWl0KCk7XG5cdFx0XHRpZiAoc3Ryb2tlSm9pbilcblx0XHRcdFx0Y3R4LmxpbmVKb2luID0gc3Ryb2tlSm9pbjtcblx0XHRcdGlmIChzdHJva2VDYXApXG5cdFx0XHRcdGN0eC5saW5lQ2FwID0gc3Ryb2tlQ2FwO1xuXHRcdFx0aWYgKG1pdGVyTGltaXQpXG5cdFx0XHRcdGN0eC5taXRlckxpbWl0ID0gbWl0ZXJMaW1pdDtcblx0XHRcdGlmIChwYXBlci5zdXBwb3J0Lm5hdGl2ZURhc2gpIHtcblx0XHRcdFx0dmFyIGRhc2hBcnJheSA9IHN0eWxlLmdldERhc2hBcnJheSgpLFxuXHRcdFx0XHRcdGRhc2hPZmZzZXQgPSBzdHlsZS5nZXREYXNoT2Zmc2V0KCk7XG5cdFx0XHRcdGlmIChkYXNoQXJyYXkgJiYgZGFzaEFycmF5Lmxlbmd0aCkge1xuXHRcdFx0XHRcdGlmICgnc2V0TGluZURhc2gnIGluIGN0eCkge1xuXHRcdFx0XHRcdFx0Y3R4LnNldExpbmVEYXNoKGRhc2hBcnJheSk7XG5cdFx0XHRcdFx0XHRjdHgubGluZURhc2hPZmZzZXQgPSBkYXNoT2Zmc2V0O1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRjdHgubW96RGFzaCA9IGRhc2hBcnJheTtcblx0XHRcdFx0XHRcdGN0eC5tb3pEYXNoT2Zmc2V0ID0gZGFzaE9mZnNldDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0aWYgKHN0eWxlLmhhc1NoYWRvdygpKSB7XG5cdFx0XHR2YXIgcGl4ZWxSYXRpbyA9IHBhcmFtLnBpeGVsUmF0aW8gfHwgMSxcblx0XHRcdFx0bXggPSB2aWV3TWF0cml4Ll9zaGlmdGxlc3MoKS5wcmVwZW5kKFxuXHRcdFx0XHRcdG5ldyBNYXRyaXgoKS5zY2FsZShwaXhlbFJhdGlvLCBwaXhlbFJhdGlvKSksXG5cdFx0XHRcdGJsdXIgPSBteC50cmFuc2Zvcm0obmV3IFBvaW50KHN0eWxlLmdldFNoYWRvd0JsdXIoKSwgMCkpLFxuXHRcdFx0XHRvZmZzZXQgPSBteC50cmFuc2Zvcm0odGhpcy5nZXRTaGFkb3dPZmZzZXQoKSk7XG5cdFx0XHRjdHguc2hhZG93Q29sb3IgPSBzdHlsZS5nZXRTaGFkb3dDb2xvcigpLnRvQ2FudmFzU3R5bGUoY3R4KTtcblx0XHRcdGN0eC5zaGFkb3dCbHVyID0gYmx1ci5nZXRMZW5ndGgoKTtcblx0XHRcdGN0eC5zaGFkb3dPZmZzZXRYID0gb2Zmc2V0Lng7XG5cdFx0XHRjdHguc2hhZG93T2Zmc2V0WSA9IG9mZnNldC55O1xuXHRcdH1cblx0fSxcblxuXHRkcmF3OiBmdW5jdGlvbihjdHgsIHBhcmFtLCBwYXJlbnRTdHJva2VNYXRyaXgpIHtcblx0XHR2YXIgdXBkYXRlVmVyc2lvbiA9IHRoaXMuX3VwZGF0ZVZlcnNpb24gPSB0aGlzLl9wcm9qZWN0Ll91cGRhdGVWZXJzaW9uO1xuXHRcdGlmICghdGhpcy5fdmlzaWJsZSB8fCB0aGlzLl9vcGFjaXR5ID09PSAwKVxuXHRcdFx0cmV0dXJuO1xuXHRcdHZhciBtYXRyaWNlcyA9IHBhcmFtLm1hdHJpY2VzLFxuXHRcdFx0dmlld01hdHJpeCA9IHBhcmFtLnZpZXdNYXRyaXgsXG5cdFx0XHRtYXRyaXggPSB0aGlzLl9tYXRyaXgsXG5cdFx0XHRnbG9iYWxNYXRyaXggPSBtYXRyaWNlc1ttYXRyaWNlcy5sZW5ndGggLSAxXS5hcHBlbmRlZChtYXRyaXgpO1xuXHRcdGlmICghZ2xvYmFsTWF0cml4LmlzSW52ZXJ0aWJsZSgpKVxuXHRcdFx0cmV0dXJuO1xuXG5cdFx0dmlld01hdHJpeCA9IHZpZXdNYXRyaXggPyB2aWV3TWF0cml4LmFwcGVuZGVkKGdsb2JhbE1hdHJpeClcblx0XHRcdFx0OiBnbG9iYWxNYXRyaXg7XG5cblx0XHRtYXRyaWNlcy5wdXNoKGdsb2JhbE1hdHJpeCk7XG5cdFx0aWYgKHBhcmFtLnVwZGF0ZU1hdHJpeCkge1xuXHRcdFx0dGhpcy5fZ2xvYmFsTWF0cml4ID0gZ2xvYmFsTWF0cml4O1xuXHRcdH1cblxuXHRcdHZhciBibGVuZE1vZGUgPSB0aGlzLl9ibGVuZE1vZGUsXG5cdFx0XHRvcGFjaXR5ID0gdGhpcy5fb3BhY2l0eSxcblx0XHRcdG5vcm1hbEJsZW5kID0gYmxlbmRNb2RlID09PSAnbm9ybWFsJyxcblx0XHRcdG5hdGl2ZUJsZW5kID0gQmxlbmRNb2RlLm5hdGl2ZU1vZGVzW2JsZW5kTW9kZV0sXG5cdFx0XHRkaXJlY3QgPSBub3JtYWxCbGVuZCAmJiBvcGFjaXR5ID09PSAxXG5cdFx0XHRcdFx0fHwgcGFyYW0uZG9udFN0YXJ0XG5cdFx0XHRcdFx0fHwgcGFyYW0uY2xpcFxuXHRcdFx0XHRcdHx8IChuYXRpdmVCbGVuZCB8fCBub3JtYWxCbGVuZCAmJiBvcGFjaXR5IDwgMSlcblx0XHRcdFx0XHRcdCYmIHRoaXMuX2NhbkNvbXBvc2l0ZSgpLFxuXHRcdFx0cGl4ZWxSYXRpbyA9IHBhcmFtLnBpeGVsUmF0aW8gfHwgMSxcblx0XHRcdG1haW5DdHgsIGl0ZW1PZmZzZXQsIHByZXZPZmZzZXQ7XG5cdFx0aWYgKCFkaXJlY3QpIHtcblx0XHRcdHZhciBib3VuZHMgPSB0aGlzLmdldFN0cm9rZUJvdW5kcyh2aWV3TWF0cml4KTtcblx0XHRcdGlmICghYm91bmRzLndpZHRoIHx8ICFib3VuZHMuaGVpZ2h0KSB7XG5cdFx0XHRcdG1hdHJpY2VzLnBvcCgpO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0XHRwcmV2T2Zmc2V0ID0gcGFyYW0ub2Zmc2V0O1xuXHRcdFx0aXRlbU9mZnNldCA9IHBhcmFtLm9mZnNldCA9IGJvdW5kcy5nZXRUb3BMZWZ0KCkuZmxvb3IoKTtcblx0XHRcdG1haW5DdHggPSBjdHg7XG5cdFx0XHRjdHggPSBDYW52YXNQcm92aWRlci5nZXRDb250ZXh0KGJvdW5kcy5nZXRTaXplKCkuY2VpbCgpLmFkZCgxKVxuXHRcdFx0XHRcdC5tdWx0aXBseShwaXhlbFJhdGlvKSk7XG5cdFx0XHRpZiAocGl4ZWxSYXRpbyAhPT0gMSlcblx0XHRcdFx0Y3R4LnNjYWxlKHBpeGVsUmF0aW8sIHBpeGVsUmF0aW8pO1xuXHRcdH1cblx0XHRjdHguc2F2ZSgpO1xuXHRcdHZhciBzdHJva2VNYXRyaXggPSBwYXJlbnRTdHJva2VNYXRyaXhcblx0XHRcdFx0PyBwYXJlbnRTdHJva2VNYXRyaXguYXBwZW5kZWQobWF0cml4KVxuXHRcdFx0XHQ6IHRoaXMuX2NhblNjYWxlU3Ryb2tlICYmICF0aGlzLmdldFN0cm9rZVNjYWxpbmcodHJ1ZSlcblx0XHRcdFx0XHQmJiB2aWV3TWF0cml4LFxuXHRcdFx0Y2xpcCA9ICFkaXJlY3QgJiYgcGFyYW0uY2xpcEl0ZW0sXG5cdFx0XHR0cmFuc2Zvcm0gPSAhc3Ryb2tlTWF0cml4IHx8IGNsaXA7XG5cdFx0aWYgKGRpcmVjdCkge1xuXHRcdFx0Y3R4Lmdsb2JhbEFscGhhID0gb3BhY2l0eTtcblx0XHRcdGlmIChuYXRpdmVCbGVuZClcblx0XHRcdFx0Y3R4Lmdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbiA9IGJsZW5kTW9kZTtcblx0XHR9IGVsc2UgaWYgKHRyYW5zZm9ybSkge1xuXHRcdFx0Y3R4LnRyYW5zbGF0ZSgtaXRlbU9mZnNldC54LCAtaXRlbU9mZnNldC55KTtcblx0XHR9XG5cdFx0aWYgKHRyYW5zZm9ybSkge1xuXHRcdFx0KGRpcmVjdCA/IG1hdHJpeCA6IHZpZXdNYXRyaXgpLmFwcGx5VG9Db250ZXh0KGN0eCk7XG5cdFx0fVxuXHRcdGlmIChjbGlwKSB7XG5cdFx0XHRwYXJhbS5jbGlwSXRlbS5kcmF3KGN0eCwgcGFyYW0uZXh0ZW5kKHsgY2xpcDogdHJ1ZSB9KSk7XG5cdFx0fVxuXHRcdGlmIChzdHJva2VNYXRyaXgpIHtcblx0XHRcdGN0eC5zZXRUcmFuc2Zvcm0ocGl4ZWxSYXRpbywgMCwgMCwgcGl4ZWxSYXRpbywgMCwgMCk7XG5cdFx0XHR2YXIgb2Zmc2V0ID0gcGFyYW0ub2Zmc2V0O1xuXHRcdFx0aWYgKG9mZnNldClcblx0XHRcdFx0Y3R4LnRyYW5zbGF0ZSgtb2Zmc2V0LngsIC1vZmZzZXQueSk7XG5cdFx0fVxuXHRcdHRoaXMuX2RyYXcoY3R4LCBwYXJhbSwgdmlld01hdHJpeCwgc3Ryb2tlTWF0cml4KTtcblx0XHRjdHgucmVzdG9yZSgpO1xuXHRcdG1hdHJpY2VzLnBvcCgpO1xuXHRcdGlmIChwYXJhbS5jbGlwICYmICFwYXJhbS5kb250RmluaXNoKVxuXHRcdFx0Y3R4LmNsaXAoKTtcblx0XHRpZiAoIWRpcmVjdCkge1xuXHRcdFx0QmxlbmRNb2RlLnByb2Nlc3MoYmxlbmRNb2RlLCBjdHgsIG1haW5DdHgsIG9wYWNpdHksXG5cdFx0XHRcdFx0aXRlbU9mZnNldC5zdWJ0cmFjdChwcmV2T2Zmc2V0KS5tdWx0aXBseShwaXhlbFJhdGlvKSk7XG5cdFx0XHRDYW52YXNQcm92aWRlci5yZWxlYXNlKGN0eCk7XG5cdFx0XHRwYXJhbS5vZmZzZXQgPSBwcmV2T2Zmc2V0O1xuXHRcdH1cblx0fSxcblxuXHRfaXNVcGRhdGVkOiBmdW5jdGlvbih1cGRhdGVWZXJzaW9uKSB7XG5cdFx0dmFyIHBhcmVudCA9IHRoaXMuX3BhcmVudDtcblx0XHRpZiAocGFyZW50IGluc3RhbmNlb2YgQ29tcG91bmRQYXRoKVxuXHRcdFx0cmV0dXJuIHBhcmVudC5faXNVcGRhdGVkKHVwZGF0ZVZlcnNpb24pO1xuXHRcdHZhciB1cGRhdGVkID0gdGhpcy5fdXBkYXRlVmVyc2lvbiA9PT0gdXBkYXRlVmVyc2lvbjtcblx0XHRpZiAoIXVwZGF0ZWQgJiYgcGFyZW50ICYmIHBhcmVudC5fdmlzaWJsZVxuXHRcdFx0XHQmJiBwYXJlbnQuX2lzVXBkYXRlZCh1cGRhdGVWZXJzaW9uKSkge1xuXHRcdFx0dGhpcy5fdXBkYXRlVmVyc2lvbiA9IHVwZGF0ZVZlcnNpb247XG5cdFx0XHR1cGRhdGVkID0gdHJ1ZTtcblx0XHR9XG5cdFx0cmV0dXJuIHVwZGF0ZWQ7XG5cdH0sXG5cblx0X2RyYXdTZWxlY3Rpb246IGZ1bmN0aW9uKGN0eCwgbWF0cml4LCBzaXplLCBzZWxlY3Rpb25JdGVtcywgdXBkYXRlVmVyc2lvbikge1xuXHRcdHZhciBzZWxlY3Rpb24gPSB0aGlzLl9zZWxlY3Rpb24sXG5cdFx0XHRpdGVtU2VsZWN0ZWQgPSBzZWxlY3Rpb24gJiAxLFxuXHRcdFx0Ym91bmRzU2VsZWN0ZWQgPSBzZWxlY3Rpb24gJiAyXG5cdFx0XHRcdFx0fHwgaXRlbVNlbGVjdGVkICYmIHRoaXMuX3NlbGVjdEJvdW5kcyxcblx0XHRcdHBvc2l0aW9uU2VsZWN0ZWQgPSBzZWxlY3Rpb24gJiA0O1xuXHRcdGlmICghdGhpcy5fZHJhd1NlbGVjdGVkKVxuXHRcdFx0aXRlbVNlbGVjdGVkID0gZmFsc2U7XG5cdFx0aWYgKChpdGVtU2VsZWN0ZWQgfHwgYm91bmRzU2VsZWN0ZWQgfHwgcG9zaXRpb25TZWxlY3RlZClcblx0XHRcdFx0JiYgdGhpcy5faXNVcGRhdGVkKHVwZGF0ZVZlcnNpb24pKSB7XG5cdFx0XHR2YXIgbGF5ZXIsXG5cdFx0XHRcdGNvbG9yID0gdGhpcy5nZXRTZWxlY3RlZENvbG9yKHRydWUpIHx8IChsYXllciA9IHRoaXMuZ2V0TGF5ZXIoKSlcblx0XHRcdFx0XHQmJiBsYXllci5nZXRTZWxlY3RlZENvbG9yKHRydWUpLFxuXHRcdFx0XHRteCA9IG1hdHJpeC5hcHBlbmRlZCh0aGlzLmdldEdsb2JhbE1hdHJpeCh0cnVlKSksXG5cdFx0XHRcdGhhbGYgPSBzaXplIC8gMjtcblx0XHRcdGN0eC5zdHJva2VTdHlsZSA9IGN0eC5maWxsU3R5bGUgPSBjb2xvclxuXHRcdFx0XHRcdD8gY29sb3IudG9DYW52YXNTdHlsZShjdHgpIDogJyMwMDlkZWMnO1xuXHRcdFx0aWYgKGl0ZW1TZWxlY3RlZClcblx0XHRcdFx0dGhpcy5fZHJhd1NlbGVjdGVkKGN0eCwgbXgsIHNlbGVjdGlvbkl0ZW1zKTtcblx0XHRcdGlmIChwb3NpdGlvblNlbGVjdGVkKSB7XG5cdFx0XHRcdHZhciBwb3MgPSB0aGlzLmdldFBvc2l0aW9uKHRydWUpLFxuXHRcdFx0XHRcdHBhcmVudCA9IHRoaXMuX3BhcmVudCxcblx0XHRcdFx0XHRwb2ludCA9IHBhcmVudCA/IHBhcmVudC5sb2NhbFRvR2xvYmFsKHBvcykgOiBwb3MsXG5cdFx0XHRcdFx0eCA9IHBvaW50LngsXG5cdFx0XHRcdFx0eSA9IHBvaW50Lnk7XG5cdFx0XHRcdGN0eC5iZWdpblBhdGgoKTtcblx0XHRcdFx0Y3R4LmFyYyh4LCB5LCBoYWxmLCAwLCBNYXRoLlBJICogMiwgdHJ1ZSk7XG5cdFx0XHRcdGN0eC5zdHJva2UoKTtcblx0XHRcdFx0dmFyIGRlbHRhcyA9IFtbMCwgLTFdLCBbMSwgMF0sIFswLCAxXSwgWy0xLCAwXV0sXG5cdFx0XHRcdFx0c3RhcnQgPSBoYWxmLFxuXHRcdFx0XHRcdGVuZCA9IHNpemUgKyAxO1xuXHRcdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IDQ7IGkrKykge1xuXHRcdFx0XHRcdHZhciBkZWx0YSA9IGRlbHRhc1tpXSxcblx0XHRcdFx0XHRcdGR4ID0gZGVsdGFbMF0sXG5cdFx0XHRcdFx0XHRkeSA9IGRlbHRhWzFdO1xuXHRcdFx0XHRcdGN0eC5tb3ZlVG8oeCArIGR4ICogc3RhcnQsIHkgKyBkeSAqIHN0YXJ0KTtcblx0XHRcdFx0XHRjdHgubGluZVRvKHggKyBkeCAqIGVuZCwgeSArIGR5ICogZW5kKTtcblx0XHRcdFx0XHRjdHguc3Ryb2tlKCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGlmIChib3VuZHNTZWxlY3RlZCkge1xuXHRcdFx0XHR2YXIgY29vcmRzID0gbXguX3RyYW5zZm9ybUNvcm5lcnModGhpcy5nZXRJbnRlcm5hbEJvdW5kcygpKTtcblx0XHRcdFx0Y3R4LmJlZ2luUGF0aCgpO1xuXHRcdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IDg7IGkrKykge1xuXHRcdFx0XHRcdGN0eFshaSA/ICdtb3ZlVG8nIDogJ2xpbmVUbyddKGNvb3Jkc1tpXSwgY29vcmRzWysraV0pO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGN0eC5jbG9zZVBhdGgoKTtcblx0XHRcdFx0Y3R4LnN0cm9rZSgpO1xuXHRcdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IDg7IGkrKykge1xuXHRcdFx0XHRcdGN0eC5maWxsUmVjdChjb29yZHNbaV0gLSBoYWxmLCBjb29yZHNbKytpXSAtIGhhbGYsXG5cdFx0XHRcdFx0XHRcdHNpemUsIHNpemUpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdF9jYW5Db21wb3NpdGU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufSwgQmFzZS5lYWNoKFsnZG93bicsICdkcmFnJywgJ3VwJywgJ21vdmUnXSwgZnVuY3Rpb24oa2V5KSB7XG5cdHRoaXNbJ3JlbW92ZU9uJyArIEJhc2UuY2FwaXRhbGl6ZShrZXkpXSA9IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBoYXNoID0ge307XG5cdFx0aGFzaFtrZXldID0gdHJ1ZTtcblx0XHRyZXR1cm4gdGhpcy5yZW1vdmVPbihoYXNoKTtcblx0fTtcbn0sIHtcblxuXHRyZW1vdmVPbjogZnVuY3Rpb24ob2JqKSB7XG5cdFx0Zm9yICh2YXIgbmFtZSBpbiBvYmopIHtcblx0XHRcdGlmIChvYmpbbmFtZV0pIHtcblx0XHRcdFx0dmFyIGtleSA9ICdtb3VzZScgKyBuYW1lLFxuXHRcdFx0XHRcdHByb2plY3QgPSB0aGlzLl9wcm9qZWN0LFxuXHRcdFx0XHRcdHNldHMgPSBwcm9qZWN0Ll9yZW1vdmVTZXRzID0gcHJvamVjdC5fcmVtb3ZlU2V0cyB8fCB7fTtcblx0XHRcdFx0c2V0c1trZXldID0gc2V0c1trZXldIHx8IHt9O1xuXHRcdFx0XHRzZXRzW2tleV1bdGhpcy5faWRdID0gdGhpcztcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cbn0pLCB7XG5cdHR3ZWVuOiBmdW5jdGlvbihmcm9tLCB0bywgb3B0aW9ucykge1xuXHRcdGlmICghb3B0aW9ucykge1xuXHRcdFx0b3B0aW9ucyA9IHRvO1xuXHRcdFx0dG8gPSBmcm9tO1xuXHRcdFx0ZnJvbSA9IG51bGw7XG5cdFx0XHRpZiAoIW9wdGlvbnMpIHtcblx0XHRcdFx0b3B0aW9ucyA9IHRvO1xuXHRcdFx0XHR0byA9IG51bGw7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHZhciBlYXNpbmcgPSBvcHRpb25zICYmIG9wdGlvbnMuZWFzaW5nLFxuXHRcdFx0c3RhcnQgPSBvcHRpb25zICYmIG9wdGlvbnMuc3RhcnQsXG5cdFx0XHRkdXJhdGlvbiA9IG9wdGlvbnMgIT0gbnVsbCAmJiAoXG5cdFx0XHRcdHR5cGVvZiBvcHRpb25zID09PSAnbnVtYmVyJyA/IG9wdGlvbnMgOiBvcHRpb25zLmR1cmF0aW9uXG5cdFx0XHQpLFxuXHRcdFx0dHdlZW4gPSBuZXcgVHdlZW4odGhpcywgZnJvbSwgdG8sIGR1cmF0aW9uLCBlYXNpbmcsIHN0YXJ0KTtcblx0XHRmdW5jdGlvbiBvbkZyYW1lKGV2ZW50KSB7XG5cdFx0XHR0d2Vlbi5faGFuZGxlRnJhbWUoZXZlbnQudGltZSAqIDEwMDApO1xuXHRcdFx0aWYgKCF0d2Vlbi5ydW5uaW5nKSB7XG5cdFx0XHRcdHRoaXMub2ZmKCdmcmFtZScsIG9uRnJhbWUpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRpZiAoZHVyYXRpb24pIHtcblx0XHRcdHRoaXMub24oJ2ZyYW1lJywgb25GcmFtZSk7XG5cdFx0fVxuXHRcdHJldHVybiB0d2Vlbjtcblx0fSxcblxuXHR0d2VlblRvOiBmdW5jdGlvbih0bywgb3B0aW9ucykge1xuXHRcdHJldHVybiB0aGlzLnR3ZWVuKG51bGwsIHRvLCBvcHRpb25zKTtcblx0fSxcblxuXHR0d2VlbkZyb206IGZ1bmN0aW9uKGZyb20sIG9wdGlvbnMpIHtcblx0XHRyZXR1cm4gdGhpcy50d2Vlbihmcm9tLCBudWxsLCBvcHRpb25zKTtcblx0fVxufSk7XG5cbnZhciBHcm91cCA9IEl0ZW0uZXh0ZW5kKHtcblx0X2NsYXNzOiAnR3JvdXAnLFxuXHRfc2VsZWN0Qm91bmRzOiBmYWxzZSxcblx0X3NlbGVjdENoaWxkcmVuOiB0cnVlLFxuXHRfc2VyaWFsaXplRmllbGRzOiB7XG5cdFx0Y2hpbGRyZW46IFtdXG5cdH0sXG5cblx0aW5pdGlhbGl6ZTogZnVuY3Rpb24gR3JvdXAoYXJnKSB7XG5cdFx0dGhpcy5fY2hpbGRyZW4gPSBbXTtcblx0XHR0aGlzLl9uYW1lZENoaWxkcmVuID0ge307XG5cdFx0aWYgKCF0aGlzLl9pbml0aWFsaXplKGFyZykpXG5cdFx0XHR0aGlzLmFkZENoaWxkcmVuKEFycmF5LmlzQXJyYXkoYXJnKSA/IGFyZyA6IGFyZ3VtZW50cyk7XG5cdH0sXG5cblx0X2NoYW5nZWQ6IGZ1bmN0aW9uIF9jaGFuZ2VkKGZsYWdzKSB7XG5cdFx0X2NoYW5nZWQuYmFzZS5jYWxsKHRoaXMsIGZsYWdzKTtcblx0XHRpZiAoZmxhZ3MgJiAyMDUwKSB7XG5cdFx0XHR0aGlzLl9jbGlwSXRlbSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdH0sXG5cblx0X2dldENsaXBJdGVtOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgY2xpcEl0ZW0gPSB0aGlzLl9jbGlwSXRlbTtcblx0XHRpZiAoY2xpcEl0ZW0gPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0Y2xpcEl0ZW0gPSBudWxsO1xuXHRcdFx0dmFyIGNoaWxkcmVuID0gdGhpcy5fY2hpbGRyZW47XG5cdFx0XHRmb3IgKHZhciBpID0gMCwgbCA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuXHRcdFx0XHRpZiAoY2hpbGRyZW5baV0uX2NsaXBNYXNrKSB7XG5cdFx0XHRcdFx0Y2xpcEl0ZW0gPSBjaGlsZHJlbltpXTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0dGhpcy5fY2xpcEl0ZW0gPSBjbGlwSXRlbTtcblx0XHR9XG5cdFx0cmV0dXJuIGNsaXBJdGVtO1xuXHR9LFxuXG5cdGlzQ2xpcHBlZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuICEhdGhpcy5fZ2V0Q2xpcEl0ZW0oKTtcblx0fSxcblxuXHRzZXRDbGlwcGVkOiBmdW5jdGlvbihjbGlwcGVkKSB7XG5cdFx0dmFyIGNoaWxkID0gdGhpcy5nZXRGaXJzdENoaWxkKCk7XG5cdFx0aWYgKGNoaWxkKVxuXHRcdFx0Y2hpbGQuc2V0Q2xpcE1hc2soY2xpcHBlZCk7XG5cdH0sXG5cblx0X2dldEJvdW5kczogZnVuY3Rpb24gX2dldEJvdW5kcyhtYXRyaXgsIG9wdGlvbnMpIHtcblx0XHR2YXIgY2xpcEl0ZW0gPSB0aGlzLl9nZXRDbGlwSXRlbSgpO1xuXHRcdHJldHVybiBjbGlwSXRlbVxuXHRcdFx0PyBjbGlwSXRlbS5fZ2V0Q2FjaGVkQm91bmRzKFxuXHRcdFx0XHRtYXRyaXggJiYgbWF0cml4LmFwcGVuZGVkKGNsaXBJdGVtLl9tYXRyaXgpLFxuXHRcdFx0XHRCYXNlLnNldCh7fSwgb3B0aW9ucywgeyBzdHJva2U6IGZhbHNlIH0pKVxuXHRcdFx0OiBfZ2V0Qm91bmRzLmJhc2UuY2FsbCh0aGlzLCBtYXRyaXgsIG9wdGlvbnMpO1xuXHR9LFxuXG5cdF9oaXRUZXN0Q2hpbGRyZW46IGZ1bmN0aW9uIF9oaXRUZXN0Q2hpbGRyZW4ocG9pbnQsIG9wdGlvbnMsIHZpZXdNYXRyaXgpIHtcblx0XHR2YXIgY2xpcEl0ZW0gPSB0aGlzLl9nZXRDbGlwSXRlbSgpO1xuXHRcdHJldHVybiAoIWNsaXBJdGVtIHx8IGNsaXBJdGVtLmNvbnRhaW5zKHBvaW50KSlcblx0XHRcdFx0JiYgX2hpdFRlc3RDaGlsZHJlbi5iYXNlLmNhbGwodGhpcywgcG9pbnQsIG9wdGlvbnMsIHZpZXdNYXRyaXgsXG5cdFx0XHRcdFx0Y2xpcEl0ZW0pO1xuXHR9LFxuXG5cdF9kcmF3OiBmdW5jdGlvbihjdHgsIHBhcmFtKSB7XG5cdFx0dmFyIGNsaXAgPSBwYXJhbS5jbGlwLFxuXHRcdFx0Y2xpcEl0ZW0gPSAhY2xpcCAmJiB0aGlzLl9nZXRDbGlwSXRlbSgpO1xuXHRcdHBhcmFtID0gcGFyYW0uZXh0ZW5kKHsgY2xpcEl0ZW06IGNsaXBJdGVtLCBjbGlwOiBmYWxzZSB9KTtcblx0XHRpZiAoY2xpcCkge1xuXHRcdFx0Y3R4LmJlZ2luUGF0aCgpO1xuXHRcdFx0cGFyYW0uZG9udFN0YXJ0ID0gcGFyYW0uZG9udEZpbmlzaCA9IHRydWU7XG5cdFx0fSBlbHNlIGlmIChjbGlwSXRlbSkge1xuXHRcdFx0Y2xpcEl0ZW0uZHJhdyhjdHgsIHBhcmFtLmV4dGVuZCh7IGNsaXA6IHRydWUgfSkpO1xuXHRcdH1cblx0XHR2YXIgY2hpbGRyZW4gPSB0aGlzLl9jaGlsZHJlbjtcblx0XHRmb3IgKHZhciBpID0gMCwgbCA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuXHRcdFx0dmFyIGl0ZW0gPSBjaGlsZHJlbltpXTtcblx0XHRcdGlmIChpdGVtICE9PSBjbGlwSXRlbSlcblx0XHRcdFx0aXRlbS5kcmF3KGN0eCwgcGFyYW0pO1xuXHRcdH1cblx0fVxufSk7XG5cbnZhciBMYXllciA9IEdyb3VwLmV4dGVuZCh7XG5cdF9jbGFzczogJ0xheWVyJyxcblxuXHRpbml0aWFsaXplOiBmdW5jdGlvbiBMYXllcigpIHtcblx0XHRHcm91cC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHR9LFxuXG5cdF9nZXRPd25lcjogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuX3BhcmVudCB8fCB0aGlzLl9pbmRleCAhPSBudWxsICYmIHRoaXMuX3Byb2plY3Q7XG5cdH0sXG5cblx0aXNJbnNlcnRlZDogZnVuY3Rpb24gaXNJbnNlcnRlZCgpIHtcblx0XHRyZXR1cm4gdGhpcy5fcGFyZW50ID8gaXNJbnNlcnRlZC5iYXNlLmNhbGwodGhpcykgOiB0aGlzLl9pbmRleCAhPSBudWxsO1xuXHR9LFxuXG5cdGFjdGl2YXRlOiBmdW5jdGlvbigpIHtcblx0XHR0aGlzLl9wcm9qZWN0Ll9hY3RpdmVMYXllciA9IHRoaXM7XG5cdH0sXG5cblx0X2hpdFRlc3RTZWxmOiBmdW5jdGlvbigpIHtcblx0fVxufSk7XG5cbnZhciBTaGFwZSA9IEl0ZW0uZXh0ZW5kKHtcblx0X2NsYXNzOiAnU2hhcGUnLFxuXHRfYXBwbHlNYXRyaXg6IGZhbHNlLFxuXHRfY2FuQXBwbHlNYXRyaXg6IGZhbHNlLFxuXHRfY2FuU2NhbGVTdHJva2U6IHRydWUsXG5cdF9zZXJpYWxpemVGaWVsZHM6IHtcblx0XHR0eXBlOiBudWxsLFxuXHRcdHNpemU6IG51bGwsXG5cdFx0cmFkaXVzOiBudWxsXG5cdH0sXG5cblx0aW5pdGlhbGl6ZTogZnVuY3Rpb24gU2hhcGUocHJvcHMsIHBvaW50KSB7XG5cdFx0dGhpcy5faW5pdGlhbGl6ZShwcm9wcywgcG9pbnQpO1xuXHR9LFxuXG5cdF9lcXVhbHM6IGZ1bmN0aW9uKGl0ZW0pIHtcblx0XHRyZXR1cm4gdGhpcy5fdHlwZSA9PT0gaXRlbS5fdHlwZVxuXHRcdFx0JiYgdGhpcy5fc2l6ZS5lcXVhbHMoaXRlbS5fc2l6ZSlcblx0XHRcdCYmIEJhc2UuZXF1YWxzKHRoaXMuX3JhZGl1cywgaXRlbS5fcmFkaXVzKTtcblx0fSxcblxuXHRjb3B5Q29udGVudDogZnVuY3Rpb24oc291cmNlKSB7XG5cdFx0dGhpcy5zZXRUeXBlKHNvdXJjZS5fdHlwZSk7XG5cdFx0dGhpcy5zZXRTaXplKHNvdXJjZS5fc2l6ZSk7XG5cdFx0dGhpcy5zZXRSYWRpdXMoc291cmNlLl9yYWRpdXMpO1xuXHR9LFxuXG5cdGdldFR5cGU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLl90eXBlO1xuXHR9LFxuXG5cdHNldFR5cGU6IGZ1bmN0aW9uKHR5cGUpIHtcblx0XHR0aGlzLl90eXBlID0gdHlwZTtcblx0fSxcblxuXHRnZXRTaGFwZTogJyNnZXRUeXBlJyxcblx0c2V0U2hhcGU6ICcjc2V0VHlwZScsXG5cblx0Z2V0U2l6ZTogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIHNpemUgPSB0aGlzLl9zaXplO1xuXHRcdHJldHVybiBuZXcgTGlua2VkU2l6ZShzaXplLndpZHRoLCBzaXplLmhlaWdodCwgdGhpcywgJ3NldFNpemUnKTtcblx0fSxcblxuXHRzZXRTaXplOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgc2l6ZSA9IFNpemUucmVhZChhcmd1bWVudHMpO1xuXHRcdGlmICghdGhpcy5fc2l6ZSkge1xuXHRcdFx0dGhpcy5fc2l6ZSA9IHNpemUuY2xvbmUoKTtcblx0XHR9IGVsc2UgaWYgKCF0aGlzLl9zaXplLmVxdWFscyhzaXplKSkge1xuXHRcdFx0dmFyIHR5cGUgPSB0aGlzLl90eXBlLFxuXHRcdFx0XHR3aWR0aCA9IHNpemUud2lkdGgsXG5cdFx0XHRcdGhlaWdodCA9IHNpemUuaGVpZ2h0O1xuXHRcdFx0aWYgKHR5cGUgPT09ICdyZWN0YW5nbGUnKSB7XG5cdFx0XHRcdHRoaXMuX3JhZGl1cy5zZXQoU2l6ZS5taW4odGhpcy5fcmFkaXVzLCBzaXplLmRpdmlkZSgyKSkpO1xuXHRcdFx0fSBlbHNlIGlmICh0eXBlID09PSAnY2lyY2xlJykge1xuXHRcdFx0XHR3aWR0aCA9IGhlaWdodCA9ICh3aWR0aCArIGhlaWdodCkgLyAyO1xuXHRcdFx0XHR0aGlzLl9yYWRpdXMgPSB3aWR0aCAvIDI7XG5cdFx0XHR9IGVsc2UgaWYgKHR5cGUgPT09ICdlbGxpcHNlJykge1xuXHRcdFx0XHR0aGlzLl9yYWRpdXMuX3NldCh3aWR0aCAvIDIsIGhlaWdodCAvIDIpO1xuXHRcdFx0fVxuXHRcdFx0dGhpcy5fc2l6ZS5fc2V0KHdpZHRoLCBoZWlnaHQpO1xuXHRcdFx0dGhpcy5fY2hhbmdlZCg5KTtcblx0XHR9XG5cdH0sXG5cblx0Z2V0UmFkaXVzOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgcmFkID0gdGhpcy5fcmFkaXVzO1xuXHRcdHJldHVybiB0aGlzLl90eXBlID09PSAnY2lyY2xlJ1xuXHRcdFx0XHQ/IHJhZFxuXHRcdFx0XHQ6IG5ldyBMaW5rZWRTaXplKHJhZC53aWR0aCwgcmFkLmhlaWdodCwgdGhpcywgJ3NldFJhZGl1cycpO1xuXHR9LFxuXG5cdHNldFJhZGl1czogZnVuY3Rpb24ocmFkaXVzKSB7XG5cdFx0dmFyIHR5cGUgPSB0aGlzLl90eXBlO1xuXHRcdGlmICh0eXBlID09PSAnY2lyY2xlJykge1xuXHRcdFx0aWYgKHJhZGl1cyA9PT0gdGhpcy5fcmFkaXVzKVxuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR2YXIgc2l6ZSA9IHJhZGl1cyAqIDI7XG5cdFx0XHR0aGlzLl9yYWRpdXMgPSByYWRpdXM7XG5cdFx0XHR0aGlzLl9zaXplLl9zZXQoc2l6ZSwgc2l6ZSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJhZGl1cyA9IFNpemUucmVhZChhcmd1bWVudHMpO1xuXHRcdFx0aWYgKCF0aGlzLl9yYWRpdXMpIHtcblx0XHRcdFx0dGhpcy5fcmFkaXVzID0gcmFkaXVzLmNsb25lKCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRpZiAodGhpcy5fcmFkaXVzLmVxdWFscyhyYWRpdXMpKVxuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0dGhpcy5fcmFkaXVzLnNldChyYWRpdXMpO1xuXHRcdFx0XHRpZiAodHlwZSA9PT0gJ3JlY3RhbmdsZScpIHtcblx0XHRcdFx0XHR2YXIgc2l6ZSA9IFNpemUubWF4KHRoaXMuX3NpemUsIHJhZGl1cy5tdWx0aXBseSgyKSk7XG5cdFx0XHRcdFx0dGhpcy5fc2l6ZS5zZXQoc2l6ZSk7XG5cdFx0XHRcdH0gZWxzZSBpZiAodHlwZSA9PT0gJ2VsbGlwc2UnKSB7XG5cdFx0XHRcdFx0dGhpcy5fc2l6ZS5fc2V0KHJhZGl1cy53aWR0aCAqIDIsIHJhZGl1cy5oZWlnaHQgKiAyKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHR0aGlzLl9jaGFuZ2VkKDkpO1xuXHR9LFxuXG5cdGlzRW1wdHk6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fSxcblxuXHR0b1BhdGg6IGZ1bmN0aW9uKGluc2VydCkge1xuXHRcdHZhciBwYXRoID0gbmV3IFBhdGhbQmFzZS5jYXBpdGFsaXplKHRoaXMuX3R5cGUpXSh7XG5cdFx0XHRjZW50ZXI6IG5ldyBQb2ludCgpLFxuXHRcdFx0c2l6ZTogdGhpcy5fc2l6ZSxcblx0XHRcdHJhZGl1czogdGhpcy5fcmFkaXVzLFxuXHRcdFx0aW5zZXJ0OiBmYWxzZVxuXHRcdH0pO1xuXHRcdHBhdGguY29weUF0dHJpYnV0ZXModGhpcyk7XG5cdFx0aWYgKHBhcGVyLnNldHRpbmdzLmFwcGx5TWF0cml4KVxuXHRcdFx0cGF0aC5zZXRBcHBseU1hdHJpeCh0cnVlKTtcblx0XHRpZiAoaW5zZXJ0ID09PSB1bmRlZmluZWQgfHwgaW5zZXJ0KVxuXHRcdFx0cGF0aC5pbnNlcnRBYm92ZSh0aGlzKTtcblx0XHRyZXR1cm4gcGF0aDtcblx0fSxcblxuXHR0b1NoYXBlOiAnI2Nsb25lJyxcblxuXHRfYXNQYXRoSXRlbTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMudG9QYXRoKGZhbHNlKTtcblx0fSxcblxuXHRfZHJhdzogZnVuY3Rpb24oY3R4LCBwYXJhbSwgdmlld01hdHJpeCwgc3Ryb2tlTWF0cml4KSB7XG5cdFx0dmFyIHN0eWxlID0gdGhpcy5fc3R5bGUsXG5cdFx0XHRoYXNGaWxsID0gc3R5bGUuaGFzRmlsbCgpLFxuXHRcdFx0aGFzU3Ryb2tlID0gc3R5bGUuaGFzU3Ryb2tlKCksXG5cdFx0XHRkb250UGFpbnQgPSBwYXJhbS5kb250RmluaXNoIHx8IHBhcmFtLmNsaXAsXG5cdFx0XHR1bnRyYW5zZm9ybWVkID0gIXN0cm9rZU1hdHJpeDtcblx0XHRpZiAoaGFzRmlsbCB8fCBoYXNTdHJva2UgfHwgZG9udFBhaW50KSB7XG5cdFx0XHR2YXIgdHlwZSA9IHRoaXMuX3R5cGUsXG5cdFx0XHRcdHJhZGl1cyA9IHRoaXMuX3JhZGl1cyxcblx0XHRcdFx0aXNDaXJjbGUgPSB0eXBlID09PSAnY2lyY2xlJztcblx0XHRcdGlmICghcGFyYW0uZG9udFN0YXJ0KVxuXHRcdFx0XHRjdHguYmVnaW5QYXRoKCk7XG5cdFx0XHRpZiAodW50cmFuc2Zvcm1lZCAmJiBpc0NpcmNsZSkge1xuXHRcdFx0XHRjdHguYXJjKDAsIDAsIHJhZGl1cywgMCwgTWF0aC5QSSAqIDIsIHRydWUpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dmFyIHJ4ID0gaXNDaXJjbGUgPyByYWRpdXMgOiByYWRpdXMud2lkdGgsXG5cdFx0XHRcdFx0cnkgPSBpc0NpcmNsZSA/IHJhZGl1cyA6IHJhZGl1cy5oZWlnaHQsXG5cdFx0XHRcdFx0c2l6ZSA9IHRoaXMuX3NpemUsXG5cdFx0XHRcdFx0d2lkdGggPSBzaXplLndpZHRoLFxuXHRcdFx0XHRcdGhlaWdodCA9IHNpemUuaGVpZ2h0O1xuXHRcdFx0XHRpZiAodW50cmFuc2Zvcm1lZCAmJiB0eXBlID09PSAncmVjdGFuZ2xlJyAmJiByeCA9PT0gMCAmJiByeSA9PT0gMCkge1xuXHRcdFx0XHRcdGN0eC5yZWN0KC13aWR0aCAvIDIsIC1oZWlnaHQgLyAyLCB3aWR0aCwgaGVpZ2h0KTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR2YXIgeCA9IHdpZHRoIC8gMixcblx0XHRcdFx0XHRcdHkgPSBoZWlnaHQgLyAyLFxuXHRcdFx0XHRcdFx0a2FwcGEgPSAxIC0gMC41NTIyODQ3NDk4MzA3OTM2LFxuXHRcdFx0XHRcdFx0Y3ggPSByeCAqIGthcHBhLFxuXHRcdFx0XHRcdFx0Y3kgPSByeSAqIGthcHBhLFxuXHRcdFx0XHRcdFx0YyA9IFtcblx0XHRcdFx0XHRcdFx0LXgsIC15ICsgcnksXG5cdFx0XHRcdFx0XHRcdC14LCAteSArIGN5LFxuXHRcdFx0XHRcdFx0XHQteCArIGN4LCAteSxcblx0XHRcdFx0XHRcdFx0LXggKyByeCwgLXksXG5cdFx0XHRcdFx0XHRcdHggLSByeCwgLXksXG5cdFx0XHRcdFx0XHRcdHggLSBjeCwgLXksXG5cdFx0XHRcdFx0XHRcdHgsIC15ICsgY3ksXG5cdFx0XHRcdFx0XHRcdHgsIC15ICsgcnksXG5cdFx0XHRcdFx0XHRcdHgsIHkgLSByeSxcblx0XHRcdFx0XHRcdFx0eCwgeSAtIGN5LFxuXHRcdFx0XHRcdFx0XHR4IC0gY3gsIHksXG5cdFx0XHRcdFx0XHRcdHggLSByeCwgeSxcblx0XHRcdFx0XHRcdFx0LXggKyByeCwgeSxcblx0XHRcdFx0XHRcdFx0LXggKyBjeCwgeSxcblx0XHRcdFx0XHRcdFx0LXgsIHkgLSBjeSxcblx0XHRcdFx0XHRcdFx0LXgsIHkgLSByeVxuXHRcdFx0XHRcdFx0XTtcblx0XHRcdFx0XHRpZiAoc3Ryb2tlTWF0cml4KVxuXHRcdFx0XHRcdFx0c3Ryb2tlTWF0cml4LnRyYW5zZm9ybShjLCBjLCAzMik7XG5cdFx0XHRcdFx0Y3R4Lm1vdmVUbyhjWzBdLCBjWzFdKTtcblx0XHRcdFx0XHRjdHguYmV6aWVyQ3VydmVUbyhjWzJdLCBjWzNdLCBjWzRdLCBjWzVdLCBjWzZdLCBjWzddKTtcblx0XHRcdFx0XHRpZiAoeCAhPT0gcngpXG5cdFx0XHRcdFx0XHRjdHgubGluZVRvKGNbOF0sIGNbOV0pO1xuXHRcdFx0XHRcdGN0eC5iZXppZXJDdXJ2ZVRvKGNbMTBdLCBjWzExXSwgY1sxMl0sIGNbMTNdLCBjWzE0XSwgY1sxNV0pO1xuXHRcdFx0XHRcdGlmICh5ICE9PSByeSlcblx0XHRcdFx0XHRcdGN0eC5saW5lVG8oY1sxNl0sIGNbMTddKTtcblx0XHRcdFx0XHRjdHguYmV6aWVyQ3VydmVUbyhjWzE4XSwgY1sxOV0sIGNbMjBdLCBjWzIxXSwgY1syMl0sIGNbMjNdKTtcblx0XHRcdFx0XHRpZiAoeCAhPT0gcngpXG5cdFx0XHRcdFx0XHRjdHgubGluZVRvKGNbMjRdLCBjWzI1XSk7XG5cdFx0XHRcdFx0Y3R4LmJlemllckN1cnZlVG8oY1syNl0sIGNbMjddLCBjWzI4XSwgY1syOV0sIGNbMzBdLCBjWzMxXSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGN0eC5jbG9zZVBhdGgoKTtcblx0XHR9XG5cdFx0aWYgKCFkb250UGFpbnQgJiYgKGhhc0ZpbGwgfHwgaGFzU3Ryb2tlKSkge1xuXHRcdFx0dGhpcy5fc2V0U3R5bGVzKGN0eCwgcGFyYW0sIHZpZXdNYXRyaXgpO1xuXHRcdFx0aWYgKGhhc0ZpbGwpIHtcblx0XHRcdFx0Y3R4LmZpbGwoc3R5bGUuZ2V0RmlsbFJ1bGUoKSk7XG5cdFx0XHRcdGN0eC5zaGFkb3dDb2xvciA9ICdyZ2JhKDAsMCwwLDApJztcblx0XHRcdH1cblx0XHRcdGlmIChoYXNTdHJva2UpXG5cdFx0XHRcdGN0eC5zdHJva2UoKTtcblx0XHR9XG5cdH0sXG5cblx0X2NhbkNvbXBvc2l0ZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuICEodGhpcy5oYXNGaWxsKCkgJiYgdGhpcy5oYXNTdHJva2UoKSk7XG5cdH0sXG5cblx0X2dldEJvdW5kczogZnVuY3Rpb24obWF0cml4LCBvcHRpb25zKSB7XG5cdFx0dmFyIHJlY3QgPSBuZXcgUmVjdGFuZ2xlKHRoaXMuX3NpemUpLnNldENlbnRlcigwLCAwKSxcblx0XHRcdHN0eWxlID0gdGhpcy5fc3R5bGUsXG5cdFx0XHRzdHJva2VXaWR0aCA9IG9wdGlvbnMuc3Ryb2tlICYmIHN0eWxlLmhhc1N0cm9rZSgpXG5cdFx0XHRcdFx0JiYgc3R5bGUuZ2V0U3Ryb2tlV2lkdGgoKTtcblx0XHRpZiAobWF0cml4KVxuXHRcdFx0cmVjdCA9IG1hdHJpeC5fdHJhbnNmb3JtQm91bmRzKHJlY3QpO1xuXHRcdHJldHVybiBzdHJva2VXaWR0aFxuXHRcdFx0XHQ/IHJlY3QuZXhwYW5kKFBhdGguX2dldFN0cm9rZVBhZGRpbmcoc3Ryb2tlV2lkdGgsXG5cdFx0XHRcdFx0dGhpcy5fZ2V0U3Ryb2tlTWF0cml4KG1hdHJpeCwgb3B0aW9ucykpKVxuXHRcdFx0XHQ6IHJlY3Q7XG5cdH1cbn0sXG5uZXcgZnVuY3Rpb24oKSB7XG5cdGZ1bmN0aW9uIGdldENvcm5lckNlbnRlcih0aGF0LCBwb2ludCwgZXhwYW5kKSB7XG5cdFx0dmFyIHJhZGl1cyA9IHRoYXQuX3JhZGl1cztcblx0XHRpZiAoIXJhZGl1cy5pc1plcm8oKSkge1xuXHRcdFx0dmFyIGhhbGZTaXplID0gdGhhdC5fc2l6ZS5kaXZpZGUoMik7XG5cdFx0XHRmb3IgKHZhciBxID0gMTsgcSA8PSA0OyBxKyspIHtcblx0XHRcdFx0dmFyIGRpciA9IG5ldyBQb2ludChxID4gMSAmJiBxIDwgNCA/IC0xIDogMSwgcSA+IDIgPyAtMSA6IDEpLFxuXHRcdFx0XHRcdGNvcm5lciA9IGRpci5tdWx0aXBseShoYWxmU2l6ZSksXG5cdFx0XHRcdFx0Y2VudGVyID0gY29ybmVyLnN1YnRyYWN0KGRpci5tdWx0aXBseShyYWRpdXMpKSxcblx0XHRcdFx0XHRyZWN0ID0gbmV3IFJlY3RhbmdsZShcblx0XHRcdFx0XHRcdFx0ZXhwYW5kID8gY29ybmVyLmFkZChkaXIubXVsdGlwbHkoZXhwYW5kKSkgOiBjb3JuZXIsXG5cdFx0XHRcdFx0XHRcdGNlbnRlcik7XG5cdFx0XHRcdGlmIChyZWN0LmNvbnRhaW5zKHBvaW50KSlcblx0XHRcdFx0XHRyZXR1cm4geyBwb2ludDogY2VudGVyLCBxdWFkcmFudDogcSB9O1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGZ1bmN0aW9uIGlzT25FbGxpcHNlU3Ryb2tlKHBvaW50LCByYWRpdXMsIHBhZGRpbmcsIHF1YWRyYW50KSB7XG5cdFx0dmFyIHZlY3RvciA9IHBvaW50LmRpdmlkZShyYWRpdXMpO1xuXHRcdHJldHVybiAoIXF1YWRyYW50IHx8IHZlY3Rvci5pc0luUXVhZHJhbnQocXVhZHJhbnQpKSAmJlxuXHRcdFx0XHR2ZWN0b3Iuc3VidHJhY3QodmVjdG9yLm5vcm1hbGl6ZSgpKS5tdWx0aXBseShyYWRpdXMpXG5cdFx0XHRcdFx0LmRpdmlkZShwYWRkaW5nKS5sZW5ndGggPD0gMTtcblx0fVxuXG5cdHJldHVybiB7XG5cdFx0X2NvbnRhaW5zOiBmdW5jdGlvbiBfY29udGFpbnMocG9pbnQpIHtcblx0XHRcdGlmICh0aGlzLl90eXBlID09PSAncmVjdGFuZ2xlJykge1xuXHRcdFx0XHR2YXIgY2VudGVyID0gZ2V0Q29ybmVyQ2VudGVyKHRoaXMsIHBvaW50KTtcblx0XHRcdFx0cmV0dXJuIGNlbnRlclxuXHRcdFx0XHRcdFx0PyBwb2ludC5zdWJ0cmFjdChjZW50ZXIucG9pbnQpLmRpdmlkZSh0aGlzLl9yYWRpdXMpXG5cdFx0XHRcdFx0XHRcdC5nZXRMZW5ndGgoKSA8PSAxXG5cdFx0XHRcdFx0XHQ6IF9jb250YWlucy5iYXNlLmNhbGwodGhpcywgcG9pbnQpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIHBvaW50LmRpdmlkZSh0aGlzLnNpemUpLmdldExlbmd0aCgpIDw9IDAuNTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0X2hpdFRlc3RTZWxmOiBmdW5jdGlvbiBfaGl0VGVzdFNlbGYocG9pbnQsIG9wdGlvbnMsIHZpZXdNYXRyaXgsXG5cdFx0XHRcdHN0cm9rZU1hdHJpeCkge1xuXHRcdFx0dmFyIGhpdCA9IGZhbHNlLFxuXHRcdFx0XHRzdHlsZSA9IHRoaXMuX3N0eWxlLFxuXHRcdFx0XHRoaXRTdHJva2UgPSBvcHRpb25zLnN0cm9rZSAmJiBzdHlsZS5oYXNTdHJva2UoKSxcblx0XHRcdFx0aGl0RmlsbCA9IG9wdGlvbnMuZmlsbCAmJiBzdHlsZS5oYXNGaWxsKCk7XG5cdFx0XHRpZiAoaGl0U3Ryb2tlIHx8IGhpdEZpbGwpIHtcblx0XHRcdFx0dmFyIHR5cGUgPSB0aGlzLl90eXBlLFxuXHRcdFx0XHRcdHJhZGl1cyA9IHRoaXMuX3JhZGl1cyxcblx0XHRcdFx0XHRzdHJva2VSYWRpdXMgPSBoaXRTdHJva2UgPyBzdHlsZS5nZXRTdHJva2VXaWR0aCgpIC8gMiA6IDAsXG5cdFx0XHRcdFx0c3Ryb2tlUGFkZGluZyA9IG9wdGlvbnMuX3RvbGVyYW5jZVBhZGRpbmcuYWRkKFxuXHRcdFx0XHRcdFx0UGF0aC5fZ2V0U3Ryb2tlUGFkZGluZyhzdHJva2VSYWRpdXMsXG5cdFx0XHRcdFx0XHRcdCFzdHlsZS5nZXRTdHJva2VTY2FsaW5nKCkgJiYgc3Ryb2tlTWF0cml4KSk7XG5cdFx0XHRcdGlmICh0eXBlID09PSAncmVjdGFuZ2xlJykge1xuXHRcdFx0XHRcdHZhciBwYWRkaW5nID0gc3Ryb2tlUGFkZGluZy5tdWx0aXBseSgyKSxcblx0XHRcdFx0XHRcdGNlbnRlciA9IGdldENvcm5lckNlbnRlcih0aGlzLCBwb2ludCwgcGFkZGluZyk7XG5cdFx0XHRcdFx0aWYgKGNlbnRlcikge1xuXHRcdFx0XHRcdFx0aGl0ID0gaXNPbkVsbGlwc2VTdHJva2UocG9pbnQuc3VidHJhY3QoY2VudGVyLnBvaW50KSxcblx0XHRcdFx0XHRcdFx0XHRyYWRpdXMsIHN0cm9rZVBhZGRpbmcsIGNlbnRlci5xdWFkcmFudCk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHZhciByZWN0ID0gbmV3IFJlY3RhbmdsZSh0aGlzLl9zaXplKS5zZXRDZW50ZXIoMCwgMCksXG5cdFx0XHRcdFx0XHRcdG91dGVyID0gcmVjdC5leHBhbmQocGFkZGluZyksXG5cdFx0XHRcdFx0XHRcdGlubmVyID0gcmVjdC5leHBhbmQocGFkZGluZy5uZWdhdGUoKSk7XG5cdFx0XHRcdFx0XHRoaXQgPSBvdXRlci5fY29udGFpbnNQb2ludChwb2ludClcblx0XHRcdFx0XHRcdFx0XHQmJiAhaW5uZXIuX2NvbnRhaW5zUG9pbnQocG9pbnQpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRoaXQgPSBpc09uRWxsaXBzZVN0cm9rZShwb2ludCwgcmFkaXVzLCBzdHJva2VQYWRkaW5nKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGhpdCA/IG5ldyBIaXRSZXN1bHQoaGl0U3Ryb2tlID8gJ3N0cm9rZScgOiAnZmlsbCcsIHRoaXMpXG5cdFx0XHRcdFx0OiBfaGl0VGVzdFNlbGYuYmFzZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHRcdH1cblx0fTtcbn0sIHtcblxuc3RhdGljczogbmV3IGZ1bmN0aW9uKCkge1xuXHRmdW5jdGlvbiBjcmVhdGVTaGFwZSh0eXBlLCBwb2ludCwgc2l6ZSwgcmFkaXVzLCBhcmdzKSB7XG5cdFx0dmFyIGl0ZW0gPSBuZXcgU2hhcGUoQmFzZS5nZXROYW1lZChhcmdzKSwgcG9pbnQpO1xuXHRcdGl0ZW0uX3R5cGUgPSB0eXBlO1xuXHRcdGl0ZW0uX3NpemUgPSBzaXplO1xuXHRcdGl0ZW0uX3JhZGl1cyA9IHJhZGl1cztcblx0XHRyZXR1cm4gaXRlbTtcblx0fVxuXG5cdHJldHVybiB7XG5cdFx0Q2lyY2xlOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBjZW50ZXIgPSBQb2ludC5yZWFkTmFtZWQoYXJndW1lbnRzLCAnY2VudGVyJyksXG5cdFx0XHRcdHJhZGl1cyA9IEJhc2UucmVhZE5hbWVkKGFyZ3VtZW50cywgJ3JhZGl1cycpO1xuXHRcdFx0cmV0dXJuIGNyZWF0ZVNoYXBlKCdjaXJjbGUnLCBjZW50ZXIsIG5ldyBTaXplKHJhZGl1cyAqIDIpLCByYWRpdXMsXG5cdFx0XHRcdFx0YXJndW1lbnRzKTtcblx0XHR9LFxuXG5cdFx0UmVjdGFuZ2xlOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciByZWN0ID0gUmVjdGFuZ2xlLnJlYWROYW1lZChhcmd1bWVudHMsICdyZWN0YW5nbGUnKSxcblx0XHRcdFx0cmFkaXVzID0gU2l6ZS5taW4oU2l6ZS5yZWFkTmFtZWQoYXJndW1lbnRzLCAncmFkaXVzJyksXG5cdFx0XHRcdFx0XHRyZWN0LmdldFNpemUodHJ1ZSkuZGl2aWRlKDIpKTtcblx0XHRcdHJldHVybiBjcmVhdGVTaGFwZSgncmVjdGFuZ2xlJywgcmVjdC5nZXRDZW50ZXIodHJ1ZSksXG5cdFx0XHRcdFx0cmVjdC5nZXRTaXplKHRydWUpLCByYWRpdXMsIGFyZ3VtZW50cyk7XG5cdFx0fSxcblxuXHRcdEVsbGlwc2U6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGVsbGlwc2UgPSBTaGFwZS5fcmVhZEVsbGlwc2UoYXJndW1lbnRzKSxcblx0XHRcdFx0cmFkaXVzID0gZWxsaXBzZS5yYWRpdXM7XG5cdFx0XHRyZXR1cm4gY3JlYXRlU2hhcGUoJ2VsbGlwc2UnLCBlbGxpcHNlLmNlbnRlciwgcmFkaXVzLm11bHRpcGx5KDIpLFxuXHRcdFx0XHRcdHJhZGl1cywgYXJndW1lbnRzKTtcblx0XHR9LFxuXG5cdFx0X3JlYWRFbGxpcHNlOiBmdW5jdGlvbihhcmdzKSB7XG5cdFx0XHR2YXIgY2VudGVyLFxuXHRcdFx0XHRyYWRpdXM7XG5cdFx0XHRpZiAoQmFzZS5oYXNOYW1lZChhcmdzLCAncmFkaXVzJykpIHtcblx0XHRcdFx0Y2VudGVyID0gUG9pbnQucmVhZE5hbWVkKGFyZ3MsICdjZW50ZXInKTtcblx0XHRcdFx0cmFkaXVzID0gU2l6ZS5yZWFkTmFtZWQoYXJncywgJ3JhZGl1cycpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dmFyIHJlY3QgPSBSZWN0YW5nbGUucmVhZE5hbWVkKGFyZ3MsICdyZWN0YW5nbGUnKTtcblx0XHRcdFx0Y2VudGVyID0gcmVjdC5nZXRDZW50ZXIodHJ1ZSk7XG5cdFx0XHRcdHJhZGl1cyA9IHJlY3QuZ2V0U2l6ZSh0cnVlKS5kaXZpZGUoMik7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4geyBjZW50ZXI6IGNlbnRlciwgcmFkaXVzOiByYWRpdXMgfTtcblx0XHR9XG5cdH07XG59fSk7XG5cbnZhciBSYXN0ZXIgPSBJdGVtLmV4dGVuZCh7XG5cdF9jbGFzczogJ1Jhc3RlcicsXG5cdF9hcHBseU1hdHJpeDogZmFsc2UsXG5cdF9jYW5BcHBseU1hdHJpeDogZmFsc2UsXG5cdF9ib3VuZHNPcHRpb25zOiB7IHN0cm9rZTogZmFsc2UsIGhhbmRsZTogZmFsc2UgfSxcblx0X3NlcmlhbGl6ZUZpZWxkczoge1xuXHRcdGNyb3NzT3JpZ2luOiBudWxsLFxuXHRcdHNvdXJjZTogbnVsbFxuXHR9LFxuXHRfcHJpb3JpdGl6ZTogWydjcm9zc09yaWdpbiddLFxuXHRfc21vb3RoaW5nOiB0cnVlLFxuXG5cdGluaXRpYWxpemU6IGZ1bmN0aW9uIFJhc3RlcihvYmplY3QsIHBvc2l0aW9uKSB7XG5cdFx0aWYgKCF0aGlzLl9pbml0aWFsaXplKG9iamVjdCxcblx0XHRcdFx0cG9zaXRpb24gIT09IHVuZGVmaW5lZCAmJiBQb2ludC5yZWFkKGFyZ3VtZW50cywgMSkpKSB7XG5cdFx0XHR2YXIgaW1hZ2UgPSB0eXBlb2Ygb2JqZWN0ID09PSAnc3RyaW5nJ1xuXHRcdFx0XHRcdD8gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQob2JqZWN0KSA6IG9iamVjdDtcblx0XHRcdGlmIChpbWFnZSkge1xuXHRcdFx0XHR0aGlzLnNldEltYWdlKGltYWdlKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRoaXMuc2V0U291cmNlKG9iamVjdCk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGlmICghdGhpcy5fc2l6ZSkge1xuXHRcdFx0dGhpcy5fc2l6ZSA9IG5ldyBTaXplKCk7XG5cdFx0XHR0aGlzLl9sb2FkZWQgPSBmYWxzZTtcblx0XHR9XG5cdH0sXG5cblx0X2VxdWFsczogZnVuY3Rpb24oaXRlbSkge1xuXHRcdHJldHVybiB0aGlzLmdldFNvdXJjZSgpID09PSBpdGVtLmdldFNvdXJjZSgpO1xuXHR9LFxuXG5cdGNvcHlDb250ZW50OiBmdW5jdGlvbihzb3VyY2UpIHtcblx0XHR2YXIgaW1hZ2UgPSBzb3VyY2UuX2ltYWdlLFxuXHRcdFx0Y2FudmFzID0gc291cmNlLl9jYW52YXM7XG5cdFx0aWYgKGltYWdlKSB7XG5cdFx0XHR0aGlzLl9zZXRJbWFnZShpbWFnZSk7XG5cdFx0fSBlbHNlIGlmIChjYW52YXMpIHtcblx0XHRcdHZhciBjb3B5Q2FudmFzID0gQ2FudmFzUHJvdmlkZXIuZ2V0Q2FudmFzKHNvdXJjZS5fc2l6ZSk7XG5cdFx0XHRjb3B5Q2FudmFzLmdldENvbnRleHQoJzJkJykuZHJhd0ltYWdlKGNhbnZhcywgMCwgMCk7XG5cdFx0XHR0aGlzLl9zZXRJbWFnZShjb3B5Q2FudmFzKTtcblx0XHR9XG5cdFx0dGhpcy5fY3Jvc3NPcmlnaW4gPSBzb3VyY2UuX2Nyb3NzT3JpZ2luO1xuXHR9LFxuXG5cdGdldFNpemU6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBzaXplID0gdGhpcy5fc2l6ZTtcblx0XHRyZXR1cm4gbmV3IExpbmtlZFNpemUoc2l6ZSA/IHNpemUud2lkdGggOiAwLCBzaXplID8gc2l6ZS5oZWlnaHQgOiAwLFxuXHRcdFx0XHR0aGlzLCAnc2V0U2l6ZScpO1xuXHR9LFxuXG5cdHNldFNpemU6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBzaXplID0gU2l6ZS5yZWFkKGFyZ3VtZW50cyk7XG5cdFx0aWYgKCFzaXplLmVxdWFscyh0aGlzLl9zaXplKSkge1xuXHRcdFx0aWYgKHNpemUud2lkdGggPiAwICYmIHNpemUuaGVpZ2h0ID4gMCkge1xuXHRcdFx0XHR2YXIgZWxlbWVudCA9IHRoaXMuZ2V0RWxlbWVudCgpO1xuXHRcdFx0XHR0aGlzLl9zZXRJbWFnZShDYW52YXNQcm92aWRlci5nZXRDYW52YXMoc2l6ZSkpO1xuXHRcdFx0XHRpZiAoZWxlbWVudClcblx0XHRcdFx0XHR0aGlzLmdldENvbnRleHQodHJ1ZSkuZHJhd0ltYWdlKGVsZW1lbnQsIDAsIDAsXG5cdFx0XHRcdFx0XHRcdHNpemUud2lkdGgsIHNpemUuaGVpZ2h0KTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGlmICh0aGlzLl9jYW52YXMpXG5cdFx0XHRcdFx0Q2FudmFzUHJvdmlkZXIucmVsZWFzZSh0aGlzLl9jYW52YXMpO1xuXHRcdFx0XHR0aGlzLl9zaXplID0gc2l6ZS5jbG9uZSgpO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHRnZXRXaWR0aDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuX3NpemUgPyB0aGlzLl9zaXplLndpZHRoIDogMDtcblx0fSxcblxuXHRzZXRXaWR0aDogZnVuY3Rpb24od2lkdGgpIHtcblx0XHR0aGlzLnNldFNpemUod2lkdGgsIHRoaXMuZ2V0SGVpZ2h0KCkpO1xuXHR9LFxuXG5cdGdldEhlaWdodDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuX3NpemUgPyB0aGlzLl9zaXplLmhlaWdodCA6IDA7XG5cdH0sXG5cblx0c2V0SGVpZ2h0OiBmdW5jdGlvbihoZWlnaHQpIHtcblx0XHR0aGlzLnNldFNpemUodGhpcy5nZXRXaWR0aCgpLCBoZWlnaHQpO1xuXHR9LFxuXG5cdGdldExvYWRlZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuX2xvYWRlZDtcblx0fSxcblxuXHRpc0VtcHR5OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgc2l6ZSA9IHRoaXMuX3NpemU7XG5cdFx0cmV0dXJuICFzaXplIHx8IHNpemUud2lkdGggPT09IDAgJiYgc2l6ZS5oZWlnaHQgPT09IDA7XG5cdH0sXG5cblx0Z2V0UmVzb2x1dGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG1hdHJpeCA9IHRoaXMuX21hdHJpeCxcblx0XHRcdG9yaWcgPSBuZXcgUG9pbnQoMCwgMCkudHJhbnNmb3JtKG1hdHJpeCksXG5cdFx0XHR1ID0gbmV3IFBvaW50KDEsIDApLnRyYW5zZm9ybShtYXRyaXgpLnN1YnRyYWN0KG9yaWcpLFxuXHRcdFx0diA9IG5ldyBQb2ludCgwLCAxKS50cmFuc2Zvcm0obWF0cml4KS5zdWJ0cmFjdChvcmlnKTtcblx0XHRyZXR1cm4gbmV3IFNpemUoXG5cdFx0XHQ3MiAvIHUuZ2V0TGVuZ3RoKCksXG5cdFx0XHQ3MiAvIHYuZ2V0TGVuZ3RoKClcblx0XHQpO1xuXHR9LFxuXG5cdGdldFBwaTogJyNnZXRSZXNvbHV0aW9uJyxcblxuXHRnZXRJbWFnZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuX2ltYWdlO1xuXHR9LFxuXG5cdHNldEltYWdlOiBmdW5jdGlvbihpbWFnZSkge1xuXHRcdHZhciB0aGF0ID0gdGhpcztcblxuXHRcdGZ1bmN0aW9uIGVtaXQoZXZlbnQpIHtcblx0XHRcdHZhciB2aWV3ID0gdGhhdC5nZXRWaWV3KCksXG5cdFx0XHRcdHR5cGUgPSBldmVudCAmJiBldmVudC50eXBlIHx8ICdsb2FkJztcblx0XHRcdGlmICh2aWV3ICYmIHRoYXQucmVzcG9uZHModHlwZSkpIHtcblx0XHRcdFx0cGFwZXIgPSB2aWV3Ll9zY29wZTtcblx0XHRcdFx0dGhhdC5lbWl0KHR5cGUsIG5ldyBFdmVudChldmVudCkpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHRoaXMuX3NldEltYWdlKGltYWdlKTtcblx0XHRpZiAodGhpcy5fbG9hZGVkKSB7XG5cdFx0XHRzZXRUaW1lb3V0KGVtaXQsIDApO1xuXHRcdH0gZWxzZSBpZiAoaW1hZ2UpIHtcblx0XHRcdERvbUV2ZW50LmFkZChpbWFnZSwge1xuXHRcdFx0XHRsb2FkOiBmdW5jdGlvbihldmVudCkge1xuXHRcdFx0XHRcdHRoYXQuX3NldEltYWdlKGltYWdlKTtcblx0XHRcdFx0XHRlbWl0KGV2ZW50KTtcblx0XHRcdFx0fSxcblx0XHRcdFx0ZXJyb3I6IGVtaXRcblx0XHRcdH0pO1xuXHRcdH1cblx0fSxcblxuXHRfc2V0SW1hZ2U6IGZ1bmN0aW9uKGltYWdlKSB7XG5cdFx0aWYgKHRoaXMuX2NhbnZhcylcblx0XHRcdENhbnZhc1Byb3ZpZGVyLnJlbGVhc2UodGhpcy5fY2FudmFzKTtcblx0XHRpZiAoaW1hZ2UgJiYgaW1hZ2UuZ2V0Q29udGV4dCkge1xuXHRcdFx0dGhpcy5faW1hZ2UgPSBudWxsO1xuXHRcdFx0dGhpcy5fY2FudmFzID0gaW1hZ2U7XG5cdFx0XHR0aGlzLl9sb2FkZWQgPSB0cnVlO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLl9pbWFnZSA9IGltYWdlO1xuXHRcdFx0dGhpcy5fY2FudmFzID0gbnVsbDtcblx0XHRcdHRoaXMuX2xvYWRlZCA9ICEhKGltYWdlICYmIGltYWdlLnNyYyAmJiBpbWFnZS5jb21wbGV0ZSk7XG5cdFx0fVxuXHRcdHRoaXMuX3NpemUgPSBuZXcgU2l6ZShcblx0XHRcdFx0aW1hZ2UgPyBpbWFnZS5uYXR1cmFsV2lkdGggfHwgaW1hZ2Uud2lkdGggOiAwLFxuXHRcdFx0XHRpbWFnZSA/IGltYWdlLm5hdHVyYWxIZWlnaHQgfHwgaW1hZ2UuaGVpZ2h0IDogMCk7XG5cdFx0dGhpcy5fY29udGV4dCA9IG51bGw7XG5cdFx0dGhpcy5fY2hhbmdlZCgxMDMzKTtcblx0fSxcblxuXHRnZXRDYW52YXM6IGZ1bmN0aW9uKCkge1xuXHRcdGlmICghdGhpcy5fY2FudmFzKSB7XG5cdFx0XHR2YXIgY3R4ID0gQ2FudmFzUHJvdmlkZXIuZ2V0Q29udGV4dCh0aGlzLl9zaXplKTtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdGlmICh0aGlzLl9pbWFnZSlcblx0XHRcdFx0XHRjdHguZHJhd0ltYWdlKHRoaXMuX2ltYWdlLCAwLCAwKTtcblx0XHRcdFx0dGhpcy5fY2FudmFzID0gY3R4LmNhbnZhcztcblx0XHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdFx0Q2FudmFzUHJvdmlkZXIucmVsZWFzZShjdHgpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5fY2FudmFzO1xuXHR9LFxuXG5cdHNldENhbnZhczogJyNzZXRJbWFnZScsXG5cblx0Z2V0Q29udGV4dDogZnVuY3Rpb24obW9kaWZ5KSB7XG5cdFx0aWYgKCF0aGlzLl9jb250ZXh0KVxuXHRcdFx0dGhpcy5fY29udGV4dCA9IHRoaXMuZ2V0Q2FudmFzKCkuZ2V0Q29udGV4dCgnMmQnKTtcblx0XHRpZiAobW9kaWZ5KSB7XG5cdFx0XHR0aGlzLl9pbWFnZSA9IG51bGw7XG5cdFx0XHR0aGlzLl9jaGFuZ2VkKDEwMjUpO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5fY29udGV4dDtcblx0fSxcblxuXHRzZXRDb250ZXh0OiBmdW5jdGlvbihjb250ZXh0KSB7XG5cdFx0dGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG5cdH0sXG5cblx0Z2V0U291cmNlOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgaW1hZ2UgPSB0aGlzLl9pbWFnZTtcblx0XHRyZXR1cm4gaW1hZ2UgJiYgaW1hZ2Uuc3JjIHx8IHRoaXMudG9EYXRhVVJMKCk7XG5cdH0sXG5cblx0c2V0U291cmNlOiBmdW5jdGlvbihzcmMpIHtcblx0XHR2YXIgaW1hZ2UgPSBuZXcgc2VsZi5JbWFnZSgpLFxuXHRcdFx0Y3Jvc3NPcmlnaW4gPSB0aGlzLl9jcm9zc09yaWdpbjtcblx0XHRpZiAoY3Jvc3NPcmlnaW4pXG5cdFx0XHRpbWFnZS5jcm9zc09yaWdpbiA9IGNyb3NzT3JpZ2luO1xuXHRcdGltYWdlLnNyYyA9IHNyYztcblx0XHR0aGlzLnNldEltYWdlKGltYWdlKTtcblx0fSxcblxuXHRnZXRDcm9zc09yaWdpbjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGltYWdlID0gdGhpcy5faW1hZ2U7XG5cdFx0cmV0dXJuIGltYWdlICYmIGltYWdlLmNyb3NzT3JpZ2luIHx8IHRoaXMuX2Nyb3NzT3JpZ2luIHx8ICcnO1xuXHR9LFxuXG5cdHNldENyb3NzT3JpZ2luOiBmdW5jdGlvbihjcm9zc09yaWdpbikge1xuXHRcdHRoaXMuX2Nyb3NzT3JpZ2luID0gY3Jvc3NPcmlnaW47XG5cdFx0dmFyIGltYWdlID0gdGhpcy5faW1hZ2U7XG5cdFx0aWYgKGltYWdlKVxuXHRcdFx0aW1hZ2UuY3Jvc3NPcmlnaW4gPSBjcm9zc09yaWdpbjtcblx0fSxcblxuXHRnZXRTbW9vdGhpbmc6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLl9zbW9vdGhpbmc7XG5cdH0sXG5cblx0c2V0U21vb3RoaW5nOiBmdW5jdGlvbihzbW9vdGhpbmcpIHtcblx0XHR0aGlzLl9zbW9vdGhpbmcgPSBzbW9vdGhpbmc7XG5cdFx0dGhpcy5fY2hhbmdlZCgyNTcpO1xuXHR9LFxuXG5cdGdldEVsZW1lbnQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLl9jYW52YXMgfHwgdGhpcy5fbG9hZGVkICYmIHRoaXMuX2ltYWdlO1xuXHR9XG59LCB7XG5cdGJlYW5zOiBmYWxzZSxcblxuXHRnZXRTdWJDYW52YXM6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciByZWN0ID0gUmVjdGFuZ2xlLnJlYWQoYXJndW1lbnRzKSxcblx0XHRcdGN0eCA9IENhbnZhc1Byb3ZpZGVyLmdldENvbnRleHQocmVjdC5nZXRTaXplKCkpO1xuXHRcdGN0eC5kcmF3SW1hZ2UodGhpcy5nZXRDYW52YXMoKSwgcmVjdC54LCByZWN0LnksXG5cdFx0XHRcdHJlY3Qud2lkdGgsIHJlY3QuaGVpZ2h0LCAwLCAwLCByZWN0LndpZHRoLCByZWN0LmhlaWdodCk7XG5cdFx0cmV0dXJuIGN0eC5jYW52YXM7XG5cdH0sXG5cblx0Z2V0U3ViUmFzdGVyOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgcmVjdCA9IFJlY3RhbmdsZS5yZWFkKGFyZ3VtZW50cyksXG5cdFx0XHRyYXN0ZXIgPSBuZXcgUmFzdGVyKEl0ZW0uTk9fSU5TRVJUKTtcblx0XHRyYXN0ZXIuX3NldEltYWdlKHRoaXMuZ2V0U3ViQ2FudmFzKHJlY3QpKTtcblx0XHRyYXN0ZXIudHJhbnNsYXRlKHJlY3QuZ2V0Q2VudGVyKCkuc3VidHJhY3QodGhpcy5nZXRTaXplKCkuZGl2aWRlKDIpKSk7XG5cdFx0cmFzdGVyLl9tYXRyaXgucHJlcGVuZCh0aGlzLl9tYXRyaXgpO1xuXHRcdHJhc3Rlci5pbnNlcnRBYm92ZSh0aGlzKTtcblx0XHRyZXR1cm4gcmFzdGVyO1xuXHR9LFxuXG5cdHRvRGF0YVVSTDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGltYWdlID0gdGhpcy5faW1hZ2UsXG5cdFx0XHRzcmMgPSBpbWFnZSAmJiBpbWFnZS5zcmM7XG5cdFx0aWYgKC9eZGF0YTovLnRlc3Qoc3JjKSlcblx0XHRcdHJldHVybiBzcmM7XG5cdFx0dmFyIGNhbnZhcyA9IHRoaXMuZ2V0Q2FudmFzKCk7XG5cdFx0cmV0dXJuIGNhbnZhcyA/IGNhbnZhcy50b0RhdGFVUkwuYXBwbHkoY2FudmFzLCBhcmd1bWVudHMpIDogbnVsbDtcblx0fSxcblxuXHRkcmF3SW1hZ2U6IGZ1bmN0aW9uKGltYWdlICkge1xuXHRcdHZhciBwb2ludCA9IFBvaW50LnJlYWQoYXJndW1lbnRzLCAxKTtcblx0XHR0aGlzLmdldENvbnRleHQodHJ1ZSkuZHJhd0ltYWdlKGltYWdlLCBwb2ludC54LCBwb2ludC55KTtcblx0fSxcblxuXHRnZXRBdmVyYWdlQ29sb3I6IGZ1bmN0aW9uKG9iamVjdCkge1xuXHRcdHZhciBib3VuZHMsIHBhdGg7XG5cdFx0aWYgKCFvYmplY3QpIHtcblx0XHRcdGJvdW5kcyA9IHRoaXMuZ2V0Qm91bmRzKCk7XG5cdFx0fSBlbHNlIGlmIChvYmplY3QgaW5zdGFuY2VvZiBQYXRoSXRlbSkge1xuXHRcdFx0cGF0aCA9IG9iamVjdDtcblx0XHRcdGJvdW5kcyA9IG9iamVjdC5nZXRCb3VuZHMoKTtcblx0XHR9IGVsc2UgaWYgKHR5cGVvZiBvYmplY3QgPT09ICdvYmplY3QnKSB7XG5cdFx0XHRpZiAoJ3dpZHRoJyBpbiBvYmplY3QpIHtcblx0XHRcdFx0Ym91bmRzID0gbmV3IFJlY3RhbmdsZShvYmplY3QpO1xuXHRcdFx0fSBlbHNlIGlmICgneCcgaW4gb2JqZWN0KSB7XG5cdFx0XHRcdGJvdW5kcyA9IG5ldyBSZWN0YW5nbGUob2JqZWN0LnggLSAwLjUsIG9iamVjdC55IC0gMC41LCAxLCAxKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0aWYgKCFib3VuZHMpXG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR2YXIgc2FtcGxlU2l6ZSA9IDMyLFxuXHRcdFx0d2lkdGggPSBNYXRoLm1pbihib3VuZHMud2lkdGgsIHNhbXBsZVNpemUpLFxuXHRcdFx0aGVpZ2h0ID0gTWF0aC5taW4oYm91bmRzLmhlaWdodCwgc2FtcGxlU2l6ZSk7XG5cdFx0dmFyIGN0eCA9IFJhc3Rlci5fc2FtcGxlQ29udGV4dDtcblx0XHRpZiAoIWN0eCkge1xuXHRcdFx0Y3R4ID0gUmFzdGVyLl9zYW1wbGVDb250ZXh0ID0gQ2FudmFzUHJvdmlkZXIuZ2V0Q29udGV4dChcblx0XHRcdFx0XHRuZXcgU2l6ZShzYW1wbGVTaXplKSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGN0eC5jbGVhclJlY3QoMCwgMCwgc2FtcGxlU2l6ZSArIDEsIHNhbXBsZVNpemUgKyAxKTtcblx0XHR9XG5cdFx0Y3R4LnNhdmUoKTtcblx0XHR2YXIgbWF0cml4ID0gbmV3IE1hdHJpeCgpXG5cdFx0XHRcdC5zY2FsZSh3aWR0aCAvIGJvdW5kcy53aWR0aCwgaGVpZ2h0IC8gYm91bmRzLmhlaWdodClcblx0XHRcdFx0LnRyYW5zbGF0ZSgtYm91bmRzLngsIC1ib3VuZHMueSk7XG5cdFx0bWF0cml4LmFwcGx5VG9Db250ZXh0KGN0eCk7XG5cdFx0aWYgKHBhdGgpXG5cdFx0XHRwYXRoLmRyYXcoY3R4LCBuZXcgQmFzZSh7IGNsaXA6IHRydWUsIG1hdHJpY2VzOiBbbWF0cml4XSB9KSk7XG5cdFx0dGhpcy5fbWF0cml4LmFwcGx5VG9Db250ZXh0KGN0eCk7XG5cdFx0dmFyIGVsZW1lbnQgPSB0aGlzLmdldEVsZW1lbnQoKSxcblx0XHRcdHNpemUgPSB0aGlzLl9zaXplO1xuXHRcdGlmIChlbGVtZW50KVxuXHRcdFx0Y3R4LmRyYXdJbWFnZShlbGVtZW50LCAtc2l6ZS53aWR0aCAvIDIsIC1zaXplLmhlaWdodCAvIDIpO1xuXHRcdGN0eC5yZXN0b3JlKCk7XG5cdFx0dmFyIHBpeGVscyA9IGN0eC5nZXRJbWFnZURhdGEoMC41LCAwLjUsIE1hdGguY2VpbCh3aWR0aCksXG5cdFx0XHRcdE1hdGguY2VpbChoZWlnaHQpKS5kYXRhLFxuXHRcdFx0Y2hhbm5lbHMgPSBbMCwgMCwgMF0sXG5cdFx0XHR0b3RhbCA9IDA7XG5cdFx0Zm9yICh2YXIgaSA9IDAsIGwgPSBwaXhlbHMubGVuZ3RoOyBpIDwgbDsgaSArPSA0KSB7XG5cdFx0XHR2YXIgYWxwaGEgPSBwaXhlbHNbaSArIDNdO1xuXHRcdFx0dG90YWwgKz0gYWxwaGE7XG5cdFx0XHRhbHBoYSAvPSAyNTU7XG5cdFx0XHRjaGFubmVsc1swXSArPSBwaXhlbHNbaV0gKiBhbHBoYTtcblx0XHRcdGNoYW5uZWxzWzFdICs9IHBpeGVsc1tpICsgMV0gKiBhbHBoYTtcblx0XHRcdGNoYW5uZWxzWzJdICs9IHBpeGVsc1tpICsgMl0gKiBhbHBoYTtcblx0XHR9XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCAzOyBpKyspXG5cdFx0XHRjaGFubmVsc1tpXSAvPSB0b3RhbDtcblx0XHRyZXR1cm4gdG90YWwgPyBDb2xvci5yZWFkKGNoYW5uZWxzKSA6IG51bGw7XG5cdH0sXG5cblx0Z2V0UGl4ZWw6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBwb2ludCA9IFBvaW50LnJlYWQoYXJndW1lbnRzKTtcblx0XHR2YXIgZGF0YSA9IHRoaXMuZ2V0Q29udGV4dCgpLmdldEltYWdlRGF0YShwb2ludC54LCBwb2ludC55LCAxLCAxKS5kYXRhO1xuXHRcdHJldHVybiBuZXcgQ29sb3IoJ3JnYicsIFtkYXRhWzBdIC8gMjU1LCBkYXRhWzFdIC8gMjU1LCBkYXRhWzJdIC8gMjU1XSxcblx0XHRcdFx0ZGF0YVszXSAvIDI1NSk7XG5cdH0sXG5cblx0c2V0UGl4ZWw6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBwb2ludCA9IFBvaW50LnJlYWQoYXJndW1lbnRzKSxcblx0XHRcdGNvbG9yID0gQ29sb3IucmVhZChhcmd1bWVudHMpLFxuXHRcdFx0Y29tcG9uZW50cyA9IGNvbG9yLl9jb252ZXJ0KCdyZ2InKSxcblx0XHRcdGFscGhhID0gY29sb3IuX2FscGhhLFxuXHRcdFx0Y3R4ID0gdGhpcy5nZXRDb250ZXh0KHRydWUpLFxuXHRcdFx0aW1hZ2VEYXRhID0gY3R4LmNyZWF0ZUltYWdlRGF0YSgxLCAxKSxcblx0XHRcdGRhdGEgPSBpbWFnZURhdGEuZGF0YTtcblx0XHRkYXRhWzBdID0gY29tcG9uZW50c1swXSAqIDI1NTtcblx0XHRkYXRhWzFdID0gY29tcG9uZW50c1sxXSAqIDI1NTtcblx0XHRkYXRhWzJdID0gY29tcG9uZW50c1syXSAqIDI1NTtcblx0XHRkYXRhWzNdID0gYWxwaGEgIT0gbnVsbCA/IGFscGhhICogMjU1IDogMjU1O1xuXHRcdGN0eC5wdXRJbWFnZURhdGEoaW1hZ2VEYXRhLCBwb2ludC54LCBwb2ludC55KTtcblx0fSxcblxuXHRjcmVhdGVJbWFnZURhdGE6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBzaXplID0gU2l6ZS5yZWFkKGFyZ3VtZW50cyk7XG5cdFx0cmV0dXJuIHRoaXMuZ2V0Q29udGV4dCgpLmNyZWF0ZUltYWdlRGF0YShzaXplLndpZHRoLCBzaXplLmhlaWdodCk7XG5cdH0sXG5cblx0Z2V0SW1hZ2VEYXRhOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgcmVjdCA9IFJlY3RhbmdsZS5yZWFkKGFyZ3VtZW50cyk7XG5cdFx0aWYgKHJlY3QuaXNFbXB0eSgpKVxuXHRcdFx0cmVjdCA9IG5ldyBSZWN0YW5nbGUodGhpcy5fc2l6ZSk7XG5cdFx0cmV0dXJuIHRoaXMuZ2V0Q29udGV4dCgpLmdldEltYWdlRGF0YShyZWN0LngsIHJlY3QueSxcblx0XHRcdFx0cmVjdC53aWR0aCwgcmVjdC5oZWlnaHQpO1xuXHR9LFxuXG5cdHNldEltYWdlRGF0YTogZnVuY3Rpb24oZGF0YSApIHtcblx0XHR2YXIgcG9pbnQgPSBQb2ludC5yZWFkKGFyZ3VtZW50cywgMSk7XG5cdFx0dGhpcy5nZXRDb250ZXh0KHRydWUpLnB1dEltYWdlRGF0YShkYXRhLCBwb2ludC54LCBwb2ludC55KTtcblx0fSxcblxuXHRfZ2V0Qm91bmRzOiBmdW5jdGlvbihtYXRyaXgsIG9wdGlvbnMpIHtcblx0XHR2YXIgcmVjdCA9IG5ldyBSZWN0YW5nbGUodGhpcy5fc2l6ZSkuc2V0Q2VudGVyKDAsIDApO1xuXHRcdHJldHVybiBtYXRyaXggPyBtYXRyaXguX3RyYW5zZm9ybUJvdW5kcyhyZWN0KSA6IHJlY3Q7XG5cdH0sXG5cblx0X2hpdFRlc3RTZWxmOiBmdW5jdGlvbihwb2ludCkge1xuXHRcdGlmICh0aGlzLl9jb250YWlucyhwb2ludCkpIHtcblx0XHRcdHZhciB0aGF0ID0gdGhpcztcblx0XHRcdHJldHVybiBuZXcgSGl0UmVzdWx0KCdwaXhlbCcsIHRoYXQsIHtcblx0XHRcdFx0b2Zmc2V0OiBwb2ludC5hZGQodGhhdC5fc2l6ZS5kaXZpZGUoMikpLnJvdW5kKCksXG5cdFx0XHRcdGNvbG9yOiB7XG5cdFx0XHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdHJldHVybiB0aGF0LmdldFBpeGVsKHRoaXMub2Zmc2V0KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdH1cblx0fSxcblxuXHRfZHJhdzogZnVuY3Rpb24oY3R4LCBwYXJhbSwgdmlld01hdHJpeCkge1xuXHRcdHZhciBlbGVtZW50ID0gdGhpcy5nZXRFbGVtZW50KCk7XG5cdFx0aWYgKGVsZW1lbnQgJiYgZWxlbWVudC53aWR0aCA+IDAgJiYgZWxlbWVudC5oZWlnaHQgPiAwKSB7XG5cdFx0XHRjdHguZ2xvYmFsQWxwaGEgPSB0aGlzLl9vcGFjaXR5O1xuXG5cdFx0XHR0aGlzLl9zZXRTdHlsZXMoY3R4LCBwYXJhbSwgdmlld01hdHJpeCk7XG5cblx0XHRcdERvbUVsZW1lbnQuc2V0UHJlZml4ZWQoXG5cdFx0XHRcdGN0eCwgJ2ltYWdlU21vb3RoaW5nRW5hYmxlZCcsIHRoaXMuX3Ntb290aGluZ1xuXHRcdFx0KTtcblxuXHRcdFx0Y3R4LmRyYXdJbWFnZShlbGVtZW50LFxuXHRcdFx0XHRcdC10aGlzLl9zaXplLndpZHRoIC8gMiwgLXRoaXMuX3NpemUuaGVpZ2h0IC8gMik7XG5cdFx0fVxuXHR9LFxuXG5cdF9jYW5Db21wb3NpdGU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG59KTtcblxudmFyIFN5bWJvbEl0ZW0gPSBJdGVtLmV4dGVuZCh7XG5cdF9jbGFzczogJ1N5bWJvbEl0ZW0nLFxuXHRfYXBwbHlNYXRyaXg6IGZhbHNlLFxuXHRfY2FuQXBwbHlNYXRyaXg6IGZhbHNlLFxuXHRfYm91bmRzT3B0aW9uczogeyBzdHJva2U6IHRydWUgfSxcblx0X3NlcmlhbGl6ZUZpZWxkczoge1xuXHRcdHN5bWJvbDogbnVsbFxuXHR9LFxuXG5cdGluaXRpYWxpemU6IGZ1bmN0aW9uIFN5bWJvbEl0ZW0oYXJnMCwgYXJnMSkge1xuXHRcdGlmICghdGhpcy5faW5pdGlhbGl6ZShhcmcwLFxuXHRcdFx0XHRhcmcxICE9PSB1bmRlZmluZWQgJiYgUG9pbnQucmVhZChhcmd1bWVudHMsIDEpKSlcblx0XHRcdHRoaXMuc2V0RGVmaW5pdGlvbihhcmcwIGluc3RhbmNlb2YgU3ltYm9sRGVmaW5pdGlvbiA/XG5cdFx0XHRcdFx0YXJnMCA6IG5ldyBTeW1ib2xEZWZpbml0aW9uKGFyZzApKTtcblx0fSxcblxuXHRfZXF1YWxzOiBmdW5jdGlvbihpdGVtKSB7XG5cdFx0cmV0dXJuIHRoaXMuX2RlZmluaXRpb24gPT09IGl0ZW0uX2RlZmluaXRpb247XG5cdH0sXG5cblx0Y29weUNvbnRlbnQ6IGZ1bmN0aW9uKHNvdXJjZSkge1xuXHRcdHRoaXMuc2V0RGVmaW5pdGlvbihzb3VyY2UuX2RlZmluaXRpb24pO1xuXHR9LFxuXG5cdGdldERlZmluaXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLl9kZWZpbml0aW9uO1xuXHR9LFxuXG5cdHNldERlZmluaXRpb246IGZ1bmN0aW9uKGRlZmluaXRpb24pIHtcblx0XHR0aGlzLl9kZWZpbml0aW9uID0gZGVmaW5pdGlvbjtcblx0XHR0aGlzLl9jaGFuZ2VkKDkpO1xuXHR9LFxuXG5cdGdldFN5bWJvbDogJyNnZXREZWZpbml0aW9uJyxcblx0c2V0U3ltYm9sOiAnI3NldERlZmluaXRpb24nLFxuXG5cdGlzRW1wdHk6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLl9kZWZpbml0aW9uLl9pdGVtLmlzRW1wdHkoKTtcblx0fSxcblxuXHRfZ2V0Qm91bmRzOiBmdW5jdGlvbihtYXRyaXgsIG9wdGlvbnMpIHtcblx0XHR2YXIgaXRlbSA9IHRoaXMuX2RlZmluaXRpb24uX2l0ZW07XG5cdFx0cmV0dXJuIGl0ZW0uX2dldENhY2hlZEJvdW5kcyhpdGVtLl9tYXRyaXgucHJlcGVuZGVkKG1hdHJpeCksIG9wdGlvbnMpO1xuXHR9LFxuXG5cdF9oaXRUZXN0U2VsZjogZnVuY3Rpb24ocG9pbnQsIG9wdGlvbnMsIHZpZXdNYXRyaXgpIHtcblx0XHR2YXIgcmVzID0gdGhpcy5fZGVmaW5pdGlvbi5faXRlbS5faGl0VGVzdChwb2ludCwgb3B0aW9ucywgdmlld01hdHJpeCk7XG5cdFx0aWYgKHJlcylcblx0XHRcdHJlcy5pdGVtID0gdGhpcztcblx0XHRyZXR1cm4gcmVzO1xuXHR9LFxuXG5cdF9kcmF3OiBmdW5jdGlvbihjdHgsIHBhcmFtKSB7XG5cdFx0dGhpcy5fZGVmaW5pdGlvbi5faXRlbS5kcmF3KGN0eCwgcGFyYW0pO1xuXHR9XG5cbn0pO1xuXG52YXIgU3ltYm9sRGVmaW5pdGlvbiA9IEJhc2UuZXh0ZW5kKHtcblx0X2NsYXNzOiAnU3ltYm9sRGVmaW5pdGlvbicsXG5cblx0aW5pdGlhbGl6ZTogZnVuY3Rpb24gU3ltYm9sRGVmaW5pdGlvbihpdGVtLCBkb250Q2VudGVyKSB7XG5cdFx0dGhpcy5faWQgPSBVSUQuZ2V0KCk7XG5cdFx0dGhpcy5wcm9qZWN0ID0gcGFwZXIucHJvamVjdDtcblx0XHRpZiAoaXRlbSlcblx0XHRcdHRoaXMuc2V0SXRlbShpdGVtLCBkb250Q2VudGVyKTtcblx0fSxcblxuXHRfc2VyaWFsaXplOiBmdW5jdGlvbihvcHRpb25zLCBkaWN0aW9uYXJ5KSB7XG5cdFx0cmV0dXJuIGRpY3Rpb25hcnkuYWRkKHRoaXMsIGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIEJhc2Uuc2VyaWFsaXplKFt0aGlzLl9jbGFzcywgdGhpcy5faXRlbV0sXG5cdFx0XHRcdFx0b3B0aW9ucywgZmFsc2UsIGRpY3Rpb25hcnkpO1xuXHRcdH0pO1xuXHR9LFxuXG5cdF9jaGFuZ2VkOiBmdW5jdGlvbihmbGFncykge1xuXHRcdGlmIChmbGFncyAmIDgpXG5cdFx0XHRJdGVtLl9jbGVhckJvdW5kc0NhY2hlKHRoaXMpO1xuXHRcdGlmIChmbGFncyAmIDEpXG5cdFx0XHR0aGlzLnByb2plY3QuX2NoYW5nZWQoZmxhZ3MpO1xuXHR9LFxuXG5cdGdldEl0ZW06IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLl9pdGVtO1xuXHR9LFxuXG5cdHNldEl0ZW06IGZ1bmN0aW9uKGl0ZW0sIF9kb250Q2VudGVyKSB7XG5cdFx0aWYgKGl0ZW0uX3N5bWJvbClcblx0XHRcdGl0ZW0gPSBpdGVtLmNsb25lKCk7XG5cdFx0aWYgKHRoaXMuX2l0ZW0pXG5cdFx0XHR0aGlzLl9pdGVtLl9zeW1ib2wgPSBudWxsO1xuXHRcdHRoaXMuX2l0ZW0gPSBpdGVtO1xuXHRcdGl0ZW0ucmVtb3ZlKCk7XG5cdFx0aXRlbS5zZXRTZWxlY3RlZChmYWxzZSk7XG5cdFx0aWYgKCFfZG9udENlbnRlcilcblx0XHRcdGl0ZW0uc2V0UG9zaXRpb24obmV3IFBvaW50KCkpO1xuXHRcdGl0ZW0uX3N5bWJvbCA9IHRoaXM7XG5cdFx0dGhpcy5fY2hhbmdlZCg5KTtcblx0fSxcblxuXHRnZXREZWZpbml0aW9uOiAnI2dldEl0ZW0nLFxuXHRzZXREZWZpbml0aW9uOiAnI3NldEl0ZW0nLFxuXG5cdHBsYWNlOiBmdW5jdGlvbihwb3NpdGlvbikge1xuXHRcdHJldHVybiBuZXcgU3ltYm9sSXRlbSh0aGlzLCBwb3NpdGlvbik7XG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBuZXcgU3ltYm9sRGVmaW5pdGlvbih0aGlzLl9pdGVtLmNsb25lKGZhbHNlKSk7XG5cdH0sXG5cblx0ZXF1YWxzOiBmdW5jdGlvbihzeW1ib2wpIHtcblx0XHRyZXR1cm4gc3ltYm9sID09PSB0aGlzXG5cdFx0XHRcdHx8IHN5bWJvbCAmJiB0aGlzLl9pdGVtLmVxdWFscyhzeW1ib2wuX2l0ZW0pXG5cdFx0XHRcdHx8IGZhbHNlO1xuXHR9XG59KTtcblxudmFyIEhpdFJlc3VsdCA9IEJhc2UuZXh0ZW5kKHtcblx0X2NsYXNzOiAnSGl0UmVzdWx0JyxcblxuXHRpbml0aWFsaXplOiBmdW5jdGlvbiBIaXRSZXN1bHQodHlwZSwgaXRlbSwgdmFsdWVzKSB7XG5cdFx0dGhpcy50eXBlID0gdHlwZTtcblx0XHR0aGlzLml0ZW0gPSBpdGVtO1xuXHRcdGlmICh2YWx1ZXMpXG5cdFx0XHR0aGlzLmluamVjdCh2YWx1ZXMpO1xuXHR9LFxuXG5cdHN0YXRpY3M6IHtcblx0XHRnZXRPcHRpb25zOiBmdW5jdGlvbihhcmdzKSB7XG5cdFx0XHR2YXIgb3B0aW9ucyA9IGFyZ3MgJiYgQmFzZS5yZWFkKGFyZ3MpO1xuXHRcdFx0cmV0dXJuIEJhc2Uuc2V0KHtcblx0XHRcdFx0dHlwZTogbnVsbCxcblx0XHRcdFx0dG9sZXJhbmNlOiBwYXBlci5zZXR0aW5ncy5oaXRUb2xlcmFuY2UsXG5cdFx0XHRcdGZpbGw6ICFvcHRpb25zLFxuXHRcdFx0XHRzdHJva2U6ICFvcHRpb25zLFxuXHRcdFx0XHRzZWdtZW50czogIW9wdGlvbnMsXG5cdFx0XHRcdGhhbmRsZXM6IGZhbHNlLFxuXHRcdFx0XHRlbmRzOiBmYWxzZSxcblx0XHRcdFx0cG9zaXRpb246IGZhbHNlLFxuXHRcdFx0XHRjZW50ZXI6IGZhbHNlLFxuXHRcdFx0XHRib3VuZHM6IGZhbHNlLFxuXHRcdFx0XHRndWlkZXM6IGZhbHNlLFxuXHRcdFx0XHRzZWxlY3RlZDogZmFsc2Vcblx0XHRcdH0sIG9wdGlvbnMpO1xuXHRcdH1cblx0fVxufSk7XG5cbnZhciBTZWdtZW50ID0gQmFzZS5leHRlbmQoe1xuXHRfY2xhc3M6ICdTZWdtZW50Jyxcblx0YmVhbnM6IHRydWUsXG5cdF9zZWxlY3Rpb246IDAsXG5cblx0aW5pdGlhbGl6ZTogZnVuY3Rpb24gU2VnbWVudChhcmcwLCBhcmcxLCBhcmcyLCBhcmczLCBhcmc0LCBhcmc1KSB7XG5cdFx0dmFyIGNvdW50ID0gYXJndW1lbnRzLmxlbmd0aCxcblx0XHRcdHBvaW50LCBoYW5kbGVJbiwgaGFuZGxlT3V0LCBzZWxlY3Rpb247XG5cdFx0aWYgKGNvdW50ID4gMCkge1xuXHRcdFx0aWYgKGFyZzAgPT0gbnVsbCB8fCB0eXBlb2YgYXJnMCA9PT0gJ29iamVjdCcpIHtcblx0XHRcdFx0aWYgKGNvdW50ID09PSAxICYmIGFyZzAgJiYgJ3BvaW50JyBpbiBhcmcwKSB7XG5cdFx0XHRcdFx0cG9pbnQgPSBhcmcwLnBvaW50O1xuXHRcdFx0XHRcdGhhbmRsZUluID0gYXJnMC5oYW5kbGVJbjtcblx0XHRcdFx0XHRoYW5kbGVPdXQgPSBhcmcwLmhhbmRsZU91dDtcblx0XHRcdFx0XHRzZWxlY3Rpb24gPSBhcmcwLnNlbGVjdGlvbjtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRwb2ludCA9IGFyZzA7XG5cdFx0XHRcdFx0aGFuZGxlSW4gPSBhcmcxO1xuXHRcdFx0XHRcdGhhbmRsZU91dCA9IGFyZzI7XG5cdFx0XHRcdFx0c2VsZWN0aW9uID0gYXJnMztcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cG9pbnQgPSBbIGFyZzAsIGFyZzEgXTtcblx0XHRcdFx0aGFuZGxlSW4gPSBhcmcyICE9PSB1bmRlZmluZWQgPyBbIGFyZzIsIGFyZzMgXSA6IG51bGw7XG5cdFx0XHRcdGhhbmRsZU91dCA9IGFyZzQgIT09IHVuZGVmaW5lZCA/IFsgYXJnNCwgYXJnNSBdIDogbnVsbDtcblx0XHRcdH1cblx0XHR9XG5cdFx0bmV3IFNlZ21lbnRQb2ludChwb2ludCwgdGhpcywgJ19wb2ludCcpO1xuXHRcdG5ldyBTZWdtZW50UG9pbnQoaGFuZGxlSW4sIHRoaXMsICdfaGFuZGxlSW4nKTtcblx0XHRuZXcgU2VnbWVudFBvaW50KGhhbmRsZU91dCwgdGhpcywgJ19oYW5kbGVPdXQnKTtcblx0XHRpZiAoc2VsZWN0aW9uKVxuXHRcdFx0dGhpcy5zZXRTZWxlY3Rpb24oc2VsZWN0aW9uKTtcblx0fSxcblxuXHRfc2VyaWFsaXplOiBmdW5jdGlvbihvcHRpb25zLCBkaWN0aW9uYXJ5KSB7XG5cdFx0dmFyIHBvaW50ID0gdGhpcy5fcG9pbnQsXG5cdFx0XHRzZWxlY3Rpb24gPSB0aGlzLl9zZWxlY3Rpb24sXG5cdFx0XHRvYmogPSBzZWxlY3Rpb24gfHwgdGhpcy5oYXNIYW5kbGVzKClcblx0XHRcdFx0XHQ/IFtwb2ludCwgdGhpcy5faGFuZGxlSW4sIHRoaXMuX2hhbmRsZU91dF1cblx0XHRcdFx0XHQ6IHBvaW50O1xuXHRcdGlmIChzZWxlY3Rpb24pXG5cdFx0XHRvYmoucHVzaChzZWxlY3Rpb24pO1xuXHRcdHJldHVybiBCYXNlLnNlcmlhbGl6ZShvYmosIG9wdGlvbnMsIHRydWUsIGRpY3Rpb25hcnkpO1xuXHR9LFxuXG5cdF9jaGFuZ2VkOiBmdW5jdGlvbihwb2ludCkge1xuXHRcdHZhciBwYXRoID0gdGhpcy5fcGF0aDtcblx0XHRpZiAoIXBhdGgpXG5cdFx0XHRyZXR1cm47XG5cdFx0dmFyIGN1cnZlcyA9IHBhdGguX2N1cnZlcyxcblx0XHRcdGluZGV4ID0gdGhpcy5faW5kZXgsXG5cdFx0XHRjdXJ2ZTtcblx0XHRpZiAoY3VydmVzKSB7XG5cdFx0XHRpZiAoKCFwb2ludCB8fCBwb2ludCA9PT0gdGhpcy5fcG9pbnQgfHwgcG9pbnQgPT09IHRoaXMuX2hhbmRsZUluKVxuXHRcdFx0XHRcdCYmIChjdXJ2ZSA9IGluZGV4ID4gMCA/IGN1cnZlc1tpbmRleCAtIDFdIDogcGF0aC5fY2xvc2VkXG5cdFx0XHRcdFx0XHQ/IGN1cnZlc1tjdXJ2ZXMubGVuZ3RoIC0gMV0gOiBudWxsKSlcblx0XHRcdFx0Y3VydmUuX2NoYW5nZWQoKTtcblx0XHRcdGlmICgoIXBvaW50IHx8IHBvaW50ID09PSB0aGlzLl9wb2ludCB8fCBwb2ludCA9PT0gdGhpcy5faGFuZGxlT3V0KVxuXHRcdFx0XHRcdCYmIChjdXJ2ZSA9IGN1cnZlc1tpbmRleF0pKVxuXHRcdFx0XHRjdXJ2ZS5fY2hhbmdlZCgpO1xuXHRcdH1cblx0XHRwYXRoLl9jaGFuZ2VkKDQxKTtcblx0fSxcblxuXHRnZXRQb2ludDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuX3BvaW50O1xuXHR9LFxuXG5cdHNldFBvaW50OiBmdW5jdGlvbigpIHtcblx0XHR0aGlzLl9wb2ludC5zZXQoUG9pbnQucmVhZChhcmd1bWVudHMpKTtcblx0fSxcblxuXHRnZXRIYW5kbGVJbjogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuX2hhbmRsZUluO1xuXHR9LFxuXG5cdHNldEhhbmRsZUluOiBmdW5jdGlvbigpIHtcblx0XHR0aGlzLl9oYW5kbGVJbi5zZXQoUG9pbnQucmVhZChhcmd1bWVudHMpKTtcblx0fSxcblxuXHRnZXRIYW5kbGVPdXQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLl9oYW5kbGVPdXQ7XG5cdH0sXG5cblx0c2V0SGFuZGxlT3V0OiBmdW5jdGlvbigpIHtcblx0XHR0aGlzLl9oYW5kbGVPdXQuc2V0KFBvaW50LnJlYWQoYXJndW1lbnRzKSk7XG5cdH0sXG5cblx0aGFzSGFuZGxlczogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuICF0aGlzLl9oYW5kbGVJbi5pc1plcm8oKSB8fCAhdGhpcy5faGFuZGxlT3V0LmlzWmVybygpO1xuXHR9LFxuXG5cdGlzU21vb3RoOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgaGFuZGxlSW4gPSB0aGlzLl9oYW5kbGVJbixcblx0XHRcdGhhbmRsZU91dCA9IHRoaXMuX2hhbmRsZU91dDtcblx0XHRyZXR1cm4gIWhhbmRsZUluLmlzWmVybygpICYmICFoYW5kbGVPdXQuaXNaZXJvKClcblx0XHRcdFx0JiYgaGFuZGxlSW4uaXNDb2xsaW5lYXIoaGFuZGxlT3V0KTtcblx0fSxcblxuXHRjbGVhckhhbmRsZXM6IGZ1bmN0aW9uKCkge1xuXHRcdHRoaXMuX2hhbmRsZUluLl9zZXQoMCwgMCk7XG5cdFx0dGhpcy5faGFuZGxlT3V0Ll9zZXQoMCwgMCk7XG5cdH0sXG5cblx0Z2V0U2VsZWN0aW9uOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5fc2VsZWN0aW9uO1xuXHR9LFxuXG5cdHNldFNlbGVjdGlvbjogZnVuY3Rpb24oc2VsZWN0aW9uKSB7XG5cdFx0dmFyIG9sZFNlbGVjdGlvbiA9IHRoaXMuX3NlbGVjdGlvbixcblx0XHRcdHBhdGggPSB0aGlzLl9wYXRoO1xuXHRcdHRoaXMuX3NlbGVjdGlvbiA9IHNlbGVjdGlvbiA9IHNlbGVjdGlvbiB8fCAwO1xuXHRcdGlmIChwYXRoICYmIHNlbGVjdGlvbiAhPT0gb2xkU2VsZWN0aW9uKSB7XG5cdFx0XHRwYXRoLl91cGRhdGVTZWxlY3Rpb24odGhpcywgb2xkU2VsZWN0aW9uLCBzZWxlY3Rpb24pO1xuXHRcdFx0cGF0aC5fY2hhbmdlZCgyNTcpO1xuXHRcdH1cblx0fSxcblxuXHRfY2hhbmdlU2VsZWN0aW9uOiBmdW5jdGlvbihmbGFnLCBzZWxlY3RlZCkge1xuXHRcdHZhciBzZWxlY3Rpb24gPSB0aGlzLl9zZWxlY3Rpb247XG5cdFx0dGhpcy5zZXRTZWxlY3Rpb24oc2VsZWN0ZWQgPyBzZWxlY3Rpb24gfCBmbGFnIDogc2VsZWN0aW9uICYgfmZsYWcpO1xuXHR9LFxuXG5cdGlzU2VsZWN0ZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiAhISh0aGlzLl9zZWxlY3Rpb24gJiA3KTtcblx0fSxcblxuXHRzZXRTZWxlY3RlZDogZnVuY3Rpb24oc2VsZWN0ZWQpIHtcblx0XHR0aGlzLl9jaGFuZ2VTZWxlY3Rpb24oNywgc2VsZWN0ZWQpO1xuXHR9LFxuXG5cdGdldEluZGV4OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5faW5kZXggIT09IHVuZGVmaW5lZCA/IHRoaXMuX2luZGV4IDogbnVsbDtcblx0fSxcblxuXHRnZXRQYXRoOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5fcGF0aCB8fCBudWxsO1xuXHR9LFxuXG5cdGdldEN1cnZlOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgcGF0aCA9IHRoaXMuX3BhdGgsXG5cdFx0XHRpbmRleCA9IHRoaXMuX2luZGV4O1xuXHRcdGlmIChwYXRoKSB7XG5cdFx0XHRpZiAoaW5kZXggPiAwICYmICFwYXRoLl9jbG9zZWRcblx0XHRcdFx0XHQmJiBpbmRleCA9PT0gcGF0aC5fc2VnbWVudHMubGVuZ3RoIC0gMSlcblx0XHRcdFx0aW5kZXgtLTtcblx0XHRcdHJldHVybiBwYXRoLmdldEN1cnZlcygpW2luZGV4XSB8fCBudWxsO1xuXHRcdH1cblx0XHRyZXR1cm4gbnVsbDtcblx0fSxcblxuXHRnZXRMb2NhdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGN1cnZlID0gdGhpcy5nZXRDdXJ2ZSgpO1xuXHRcdHJldHVybiBjdXJ2ZVxuXHRcdFx0XHQ/IG5ldyBDdXJ2ZUxvY2F0aW9uKGN1cnZlLCB0aGlzID09PSBjdXJ2ZS5fc2VnbWVudDEgPyAwIDogMSlcblx0XHRcdFx0OiBudWxsO1xuXHR9LFxuXG5cdGdldE5leHQ6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBzZWdtZW50cyA9IHRoaXMuX3BhdGggJiYgdGhpcy5fcGF0aC5fc2VnbWVudHM7XG5cdFx0cmV0dXJuIHNlZ21lbnRzICYmIChzZWdtZW50c1t0aGlzLl9pbmRleCArIDFdXG5cdFx0XHRcdHx8IHRoaXMuX3BhdGguX2Nsb3NlZCAmJiBzZWdtZW50c1swXSkgfHwgbnVsbDtcblx0fSxcblxuXHRzbW9vdGg6IGZ1bmN0aW9uKG9wdGlvbnMsIF9maXJzdCwgX2xhc3QpIHtcblx0XHR2YXIgb3B0cyA9IG9wdGlvbnMgfHwge30sXG5cdFx0XHR0eXBlID0gb3B0cy50eXBlLFxuXHRcdFx0ZmFjdG9yID0gb3B0cy5mYWN0b3IsXG5cdFx0XHRwcmV2ID0gdGhpcy5nZXRQcmV2aW91cygpLFxuXHRcdFx0bmV4dCA9IHRoaXMuZ2V0TmV4dCgpLFxuXHRcdFx0cDAgPSAocHJldiB8fCB0aGlzKS5fcG9pbnQsXG5cdFx0XHRwMSA9IHRoaXMuX3BvaW50LFxuXHRcdFx0cDIgPSAobmV4dCB8fCB0aGlzKS5fcG9pbnQsXG5cdFx0XHRkMSA9IHAwLmdldERpc3RhbmNlKHAxKSxcblx0XHRcdGQyID0gcDEuZ2V0RGlzdGFuY2UocDIpO1xuXHRcdGlmICghdHlwZSB8fCB0eXBlID09PSAnY2F0bXVsbC1yb20nKSB7XG5cdFx0XHR2YXIgYSA9IGZhY3RvciA9PT0gdW5kZWZpbmVkID8gMC41IDogZmFjdG9yLFxuXHRcdFx0XHRkMV9hID0gTWF0aC5wb3coZDEsIGEpLFxuXHRcdFx0XHRkMV8yYSA9IGQxX2EgKiBkMV9hLFxuXHRcdFx0XHRkMl9hID0gTWF0aC5wb3coZDIsIGEpLFxuXHRcdFx0XHRkMl8yYSA9IGQyX2EgKiBkMl9hO1xuXHRcdFx0aWYgKCFfZmlyc3QgJiYgcHJldikge1xuXHRcdFx0XHR2YXIgQSA9IDIgKiBkMl8yYSArIDMgKiBkMl9hICogZDFfYSArIGQxXzJhLFxuXHRcdFx0XHRcdE4gPSAzICogZDJfYSAqIChkMl9hICsgZDFfYSk7XG5cdFx0XHRcdHRoaXMuc2V0SGFuZGxlSW4oTiAhPT0gMFxuXHRcdFx0XHRcdD8gbmV3IFBvaW50KFxuXHRcdFx0XHRcdFx0KGQyXzJhICogcDAuX3ggKyBBICogcDEuX3ggLSBkMV8yYSAqIHAyLl94KSAvIE4gLSBwMS5feCxcblx0XHRcdFx0XHRcdChkMl8yYSAqIHAwLl95ICsgQSAqIHAxLl95IC0gZDFfMmEgKiBwMi5feSkgLyBOIC0gcDEuX3kpXG5cdFx0XHRcdFx0OiBuZXcgUG9pbnQoKSk7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIV9sYXN0ICYmIG5leHQpIHtcblx0XHRcdFx0dmFyIEEgPSAyICogZDFfMmEgKyAzICogZDFfYSAqIGQyX2EgKyBkMl8yYSxcblx0XHRcdFx0XHROID0gMyAqIGQxX2EgKiAoZDFfYSArIGQyX2EpO1xuXHRcdFx0XHR0aGlzLnNldEhhbmRsZU91dChOICE9PSAwXG5cdFx0XHRcdFx0PyBuZXcgUG9pbnQoXG5cdFx0XHRcdFx0XHQoZDFfMmEgKiBwMi5feCArIEEgKiBwMS5feCAtIGQyXzJhICogcDAuX3gpIC8gTiAtIHAxLl94LFxuXHRcdFx0XHRcdFx0KGQxXzJhICogcDIuX3kgKyBBICogcDEuX3kgLSBkMl8yYSAqIHAwLl95KSAvIE4gLSBwMS5feSlcblx0XHRcdFx0XHQ6IG5ldyBQb2ludCgpKTtcblx0XHRcdH1cblx0XHR9IGVsc2UgaWYgKHR5cGUgPT09ICdnZW9tZXRyaWMnKSB7XG5cdFx0XHRpZiAocHJldiAmJiBuZXh0KSB7XG5cdFx0XHRcdHZhciB2ZWN0b3IgPSBwMC5zdWJ0cmFjdChwMiksXG5cdFx0XHRcdFx0dCA9IGZhY3RvciA9PT0gdW5kZWZpbmVkID8gMC40IDogZmFjdG9yLFxuXHRcdFx0XHRcdGsgPSB0ICogZDEgLyAoZDEgKyBkMik7XG5cdFx0XHRcdGlmICghX2ZpcnN0KVxuXHRcdFx0XHRcdHRoaXMuc2V0SGFuZGxlSW4odmVjdG9yLm11bHRpcGx5KGspKTtcblx0XHRcdFx0aWYgKCFfbGFzdClcblx0XHRcdFx0XHR0aGlzLnNldEhhbmRsZU91dCh2ZWN0b3IubXVsdGlwbHkoayAtIHQpKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdTbW9vdGhpbmcgbWV0aG9kIFxcJycgKyB0eXBlICsgJ1xcJyBub3Qgc3VwcG9ydGVkLicpO1xuXHRcdH1cblx0fSxcblxuXHRnZXRQcmV2aW91czogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIHNlZ21lbnRzID0gdGhpcy5fcGF0aCAmJiB0aGlzLl9wYXRoLl9zZWdtZW50cztcblx0XHRyZXR1cm4gc2VnbWVudHMgJiYgKHNlZ21lbnRzW3RoaXMuX2luZGV4IC0gMV1cblx0XHRcdFx0fHwgdGhpcy5fcGF0aC5fY2xvc2VkICYmIHNlZ21lbnRzW3NlZ21lbnRzLmxlbmd0aCAtIDFdKSB8fCBudWxsO1xuXHR9LFxuXG5cdGlzRmlyc3Q6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiAhdGhpcy5faW5kZXg7XG5cdH0sXG5cblx0aXNMYXN0OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgcGF0aCA9IHRoaXMuX3BhdGg7XG5cdFx0cmV0dXJuIHBhdGggJiYgdGhpcy5faW5kZXggPT09IHBhdGguX3NlZ21lbnRzLmxlbmd0aCAtIDEgfHwgZmFsc2U7XG5cdH0sXG5cblx0cmV2ZXJzZTogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGhhbmRsZUluID0gdGhpcy5faGFuZGxlSW4sXG5cdFx0XHRoYW5kbGVPdXQgPSB0aGlzLl9oYW5kbGVPdXQsXG5cdFx0XHR0bXAgPSBoYW5kbGVJbi5jbG9uZSgpO1xuXHRcdGhhbmRsZUluLnNldChoYW5kbGVPdXQpO1xuXHRcdGhhbmRsZU91dC5zZXQodG1wKTtcblx0fSxcblxuXHRyZXZlcnNlZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIG5ldyBTZWdtZW50KHRoaXMuX3BvaW50LCB0aGlzLl9oYW5kbGVPdXQsIHRoaXMuX2hhbmRsZUluKTtcblx0fSxcblxuXHRyZW1vdmU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLl9wYXRoID8gISF0aGlzLl9wYXRoLnJlbW92ZVNlZ21lbnQodGhpcy5faW5kZXgpIDogZmFsc2U7XG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBuZXcgU2VnbWVudCh0aGlzLl9wb2ludCwgdGhpcy5faGFuZGxlSW4sIHRoaXMuX2hhbmRsZU91dCk7XG5cdH0sXG5cblx0ZXF1YWxzOiBmdW5jdGlvbihzZWdtZW50KSB7XG5cdFx0cmV0dXJuIHNlZ21lbnQgPT09IHRoaXMgfHwgc2VnbWVudCAmJiB0aGlzLl9jbGFzcyA9PT0gc2VnbWVudC5fY2xhc3Ncblx0XHRcdFx0JiYgdGhpcy5fcG9pbnQuZXF1YWxzKHNlZ21lbnQuX3BvaW50KVxuXHRcdFx0XHQmJiB0aGlzLl9oYW5kbGVJbi5lcXVhbHMoc2VnbWVudC5faGFuZGxlSW4pXG5cdFx0XHRcdCYmIHRoaXMuX2hhbmRsZU91dC5lcXVhbHMoc2VnbWVudC5faGFuZGxlT3V0KVxuXHRcdFx0XHR8fCBmYWxzZTtcblx0fSxcblxuXHR0b1N0cmluZzogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIHBhcnRzID0gWyAncG9pbnQ6ICcgKyB0aGlzLl9wb2ludCBdO1xuXHRcdGlmICghdGhpcy5faGFuZGxlSW4uaXNaZXJvKCkpXG5cdFx0XHRwYXJ0cy5wdXNoKCdoYW5kbGVJbjogJyArIHRoaXMuX2hhbmRsZUluKTtcblx0XHRpZiAoIXRoaXMuX2hhbmRsZU91dC5pc1plcm8oKSlcblx0XHRcdHBhcnRzLnB1c2goJ2hhbmRsZU91dDogJyArIHRoaXMuX2hhbmRsZU91dCk7XG5cdFx0cmV0dXJuICd7ICcgKyBwYXJ0cy5qb2luKCcsICcpICsgJyB9Jztcblx0fSxcblxuXHR0cmFuc2Zvcm06IGZ1bmN0aW9uKG1hdHJpeCkge1xuXHRcdHRoaXMuX3RyYW5zZm9ybUNvb3JkaW5hdGVzKG1hdHJpeCwgbmV3IEFycmF5KDYpLCB0cnVlKTtcblx0XHR0aGlzLl9jaGFuZ2VkKCk7XG5cdH0sXG5cblx0aW50ZXJwb2xhdGU6IGZ1bmN0aW9uKGZyb20sIHRvLCBmYWN0b3IpIHtcblx0XHR2YXIgdSA9IDEgLSBmYWN0b3IsXG5cdFx0XHR2ID0gZmFjdG9yLFxuXHRcdFx0cG9pbnQxID0gZnJvbS5fcG9pbnQsXG5cdFx0XHRwb2ludDIgPSB0by5fcG9pbnQsXG5cdFx0XHRoYW5kbGVJbjEgPSBmcm9tLl9oYW5kbGVJbixcblx0XHRcdGhhbmRsZUluMiA9IHRvLl9oYW5kbGVJbixcblx0XHRcdGhhbmRsZU91dDIgPSB0by5faGFuZGxlT3V0LFxuXHRcdFx0aGFuZGxlT3V0MSA9IGZyb20uX2hhbmRsZU91dDtcblx0XHR0aGlzLl9wb2ludC5fc2V0KFxuXHRcdFx0XHR1ICogcG9pbnQxLl94ICsgdiAqIHBvaW50Mi5feCxcblx0XHRcdFx0dSAqIHBvaW50MS5feSArIHYgKiBwb2ludDIuX3ksIHRydWUpO1xuXHRcdHRoaXMuX2hhbmRsZUluLl9zZXQoXG5cdFx0XHRcdHUgKiBoYW5kbGVJbjEuX3ggKyB2ICogaGFuZGxlSW4yLl94LFxuXHRcdFx0XHR1ICogaGFuZGxlSW4xLl95ICsgdiAqIGhhbmRsZUluMi5feSwgdHJ1ZSk7XG5cdFx0dGhpcy5faGFuZGxlT3V0Ll9zZXQoXG5cdFx0XHRcdHUgKiBoYW5kbGVPdXQxLl94ICsgdiAqIGhhbmRsZU91dDIuX3gsXG5cdFx0XHRcdHUgKiBoYW5kbGVPdXQxLl95ICsgdiAqIGhhbmRsZU91dDIuX3ksIHRydWUpO1xuXHRcdHRoaXMuX2NoYW5nZWQoKTtcblx0fSxcblxuXHRfdHJhbnNmb3JtQ29vcmRpbmF0ZXM6IGZ1bmN0aW9uKG1hdHJpeCwgY29vcmRzLCBjaGFuZ2UpIHtcblx0XHR2YXIgcG9pbnQgPSB0aGlzLl9wb2ludCxcblx0XHRcdGhhbmRsZUluID0gIWNoYW5nZSB8fCAhdGhpcy5faGFuZGxlSW4uaXNaZXJvKClcblx0XHRcdFx0XHQ/IHRoaXMuX2hhbmRsZUluIDogbnVsbCxcblx0XHRcdGhhbmRsZU91dCA9ICFjaGFuZ2UgfHwgIXRoaXMuX2hhbmRsZU91dC5pc1plcm8oKVxuXHRcdFx0XHRcdD8gdGhpcy5faGFuZGxlT3V0IDogbnVsbCxcblx0XHRcdHggPSBwb2ludC5feCxcblx0XHRcdHkgPSBwb2ludC5feSxcblx0XHRcdGkgPSAyO1xuXHRcdGNvb3Jkc1swXSA9IHg7XG5cdFx0Y29vcmRzWzFdID0geTtcblx0XHRpZiAoaGFuZGxlSW4pIHtcblx0XHRcdGNvb3Jkc1tpKytdID0gaGFuZGxlSW4uX3ggKyB4O1xuXHRcdFx0Y29vcmRzW2krK10gPSBoYW5kbGVJbi5feSArIHk7XG5cdFx0fVxuXHRcdGlmIChoYW5kbGVPdXQpIHtcblx0XHRcdGNvb3Jkc1tpKytdID0gaGFuZGxlT3V0Ll94ICsgeDtcblx0XHRcdGNvb3Jkc1tpKytdID0gaGFuZGxlT3V0Ll95ICsgeTtcblx0XHR9XG5cdFx0aWYgKG1hdHJpeCkge1xuXHRcdFx0bWF0cml4Ll90cmFuc2Zvcm1Db29yZGluYXRlcyhjb29yZHMsIGNvb3JkcywgaSAvIDIpO1xuXHRcdFx0eCA9IGNvb3Jkc1swXTtcblx0XHRcdHkgPSBjb29yZHNbMV07XG5cdFx0XHRpZiAoY2hhbmdlKSB7XG5cdFx0XHRcdHBvaW50Ll94ID0geDtcblx0XHRcdFx0cG9pbnQuX3kgPSB5O1xuXHRcdFx0XHRpID0gMjtcblx0XHRcdFx0aWYgKGhhbmRsZUluKSB7XG5cdFx0XHRcdFx0aGFuZGxlSW4uX3ggPSBjb29yZHNbaSsrXSAtIHg7XG5cdFx0XHRcdFx0aGFuZGxlSW4uX3kgPSBjb29yZHNbaSsrXSAtIHk7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKGhhbmRsZU91dCkge1xuXHRcdFx0XHRcdGhhbmRsZU91dC5feCA9IGNvb3Jkc1tpKytdIC0geDtcblx0XHRcdFx0XHRoYW5kbGVPdXQuX3kgPSBjb29yZHNbaSsrXSAtIHk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGlmICghaGFuZGxlSW4pIHtcblx0XHRcdFx0XHRjb29yZHNbaSsrXSA9IHg7XG5cdFx0XHRcdFx0Y29vcmRzW2krK10gPSB5O1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICghaGFuZGxlT3V0KSB7XG5cdFx0XHRcdFx0Y29vcmRzW2krK10gPSB4O1xuXHRcdFx0XHRcdGNvb3Jkc1tpKytdID0geTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gY29vcmRzO1xuXHR9XG59KTtcblxudmFyIFNlZ21lbnRQb2ludCA9IFBvaW50LmV4dGVuZCh7XG5cdGluaXRpYWxpemU6IGZ1bmN0aW9uIFNlZ21lbnRQb2ludChwb2ludCwgb3duZXIsIGtleSkge1xuXHRcdHZhciB4LCB5LFxuXHRcdFx0c2VsZWN0ZWQ7XG5cdFx0aWYgKCFwb2ludCkge1xuXHRcdFx0eCA9IHkgPSAwO1xuXHRcdH0gZWxzZSBpZiAoKHggPSBwb2ludFswXSkgIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0eSA9IHBvaW50WzFdO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR2YXIgcHQgPSBwb2ludDtcblx0XHRcdGlmICgoeCA9IHB0LngpID09PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0cHQgPSBQb2ludC5yZWFkKGFyZ3VtZW50cyk7XG5cdFx0XHRcdHggPSBwdC54O1xuXHRcdFx0fVxuXHRcdFx0eSA9IHB0Lnk7XG5cdFx0XHRzZWxlY3RlZCA9IHB0LnNlbGVjdGVkO1xuXHRcdH1cblx0XHR0aGlzLl94ID0geDtcblx0XHR0aGlzLl95ID0geTtcblx0XHR0aGlzLl9vd25lciA9IG93bmVyO1xuXHRcdG93bmVyW2tleV0gPSB0aGlzO1xuXHRcdGlmIChzZWxlY3RlZClcblx0XHRcdHRoaXMuc2V0U2VsZWN0ZWQodHJ1ZSk7XG5cdH0sXG5cblx0X3NldDogZnVuY3Rpb24oeCwgeSkge1xuXHRcdHRoaXMuX3ggPSB4O1xuXHRcdHRoaXMuX3kgPSB5O1xuXHRcdHRoaXMuX293bmVyLl9jaGFuZ2VkKHRoaXMpO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdGdldFg6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLl94O1xuXHR9LFxuXG5cdHNldFg6IGZ1bmN0aW9uKHgpIHtcblx0XHR0aGlzLl94ID0geDtcblx0XHR0aGlzLl9vd25lci5fY2hhbmdlZCh0aGlzKTtcblx0fSxcblxuXHRnZXRZOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5feTtcblx0fSxcblxuXHRzZXRZOiBmdW5jdGlvbih5KSB7XG5cdFx0dGhpcy5feSA9IHk7XG5cdFx0dGhpcy5fb3duZXIuX2NoYW5nZWQodGhpcyk7XG5cdH0sXG5cblx0aXNaZXJvOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgaXNaZXJvID0gTnVtZXJpY2FsLmlzWmVybztcblx0XHRyZXR1cm4gaXNaZXJvKHRoaXMuX3gpICYmIGlzWmVybyh0aGlzLl95KTtcblx0fSxcblxuXHRpc1NlbGVjdGVkOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gISEodGhpcy5fb3duZXIuX3NlbGVjdGlvbiAmIHRoaXMuX2dldFNlbGVjdGlvbigpKTtcblx0fSxcblxuXHRzZXRTZWxlY3RlZDogZnVuY3Rpb24oc2VsZWN0ZWQpIHtcblx0XHR0aGlzLl9vd25lci5fY2hhbmdlU2VsZWN0aW9uKHRoaXMuX2dldFNlbGVjdGlvbigpLCBzZWxlY3RlZCk7XG5cdH0sXG5cblx0X2dldFNlbGVjdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG93bmVyID0gdGhpcy5fb3duZXI7XG5cdFx0cmV0dXJuIHRoaXMgPT09IG93bmVyLl9wb2ludCA/IDFcblx0XHRcdDogdGhpcyA9PT0gb3duZXIuX2hhbmRsZUluID8gMlxuXHRcdFx0OiB0aGlzID09PSBvd25lci5faGFuZGxlT3V0ID8gNFxuXHRcdFx0OiAwO1xuXHR9XG59KTtcblxudmFyIEN1cnZlID0gQmFzZS5leHRlbmQoe1xuXHRfY2xhc3M6ICdDdXJ2ZScsXG5cdGJlYW5zOiB0cnVlLFxuXG5cdGluaXRpYWxpemU6IGZ1bmN0aW9uIEN1cnZlKGFyZzAsIGFyZzEsIGFyZzIsIGFyZzMsIGFyZzQsIGFyZzUsIGFyZzYsIGFyZzcpIHtcblx0XHR2YXIgY291bnQgPSBhcmd1bWVudHMubGVuZ3RoLFxuXHRcdFx0c2VnMSwgc2VnMixcblx0XHRcdHBvaW50MSwgcG9pbnQyLFxuXHRcdFx0aGFuZGxlMSwgaGFuZGxlMjtcblx0XHRpZiAoY291bnQgPT09IDMpIHtcblx0XHRcdHRoaXMuX3BhdGggPSBhcmcwO1xuXHRcdFx0c2VnMSA9IGFyZzE7XG5cdFx0XHRzZWcyID0gYXJnMjtcblx0XHR9IGVsc2UgaWYgKCFjb3VudCkge1xuXHRcdFx0c2VnMSA9IG5ldyBTZWdtZW50KCk7XG5cdFx0XHRzZWcyID0gbmV3IFNlZ21lbnQoKTtcblx0XHR9IGVsc2UgaWYgKGNvdW50ID09PSAxKSB7XG5cdFx0XHRpZiAoJ3NlZ21lbnQxJyBpbiBhcmcwKSB7XG5cdFx0XHRcdHNlZzEgPSBuZXcgU2VnbWVudChhcmcwLnNlZ21lbnQxKTtcblx0XHRcdFx0c2VnMiA9IG5ldyBTZWdtZW50KGFyZzAuc2VnbWVudDIpO1xuXHRcdFx0fSBlbHNlIGlmICgncG9pbnQxJyBpbiBhcmcwKSB7XG5cdFx0XHRcdHBvaW50MSA9IGFyZzAucG9pbnQxO1xuXHRcdFx0XHRoYW5kbGUxID0gYXJnMC5oYW5kbGUxO1xuXHRcdFx0XHRoYW5kbGUyID0gYXJnMC5oYW5kbGUyO1xuXHRcdFx0XHRwb2ludDIgPSBhcmcwLnBvaW50Mjtcblx0XHRcdH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShhcmcwKSkge1xuXHRcdFx0XHRwb2ludDEgPSBbYXJnMFswXSwgYXJnMFsxXV07XG5cdFx0XHRcdHBvaW50MiA9IFthcmcwWzZdLCBhcmcwWzddXTtcblx0XHRcdFx0aGFuZGxlMSA9IFthcmcwWzJdIC0gYXJnMFswXSwgYXJnMFszXSAtIGFyZzBbMV1dO1xuXHRcdFx0XHRoYW5kbGUyID0gW2FyZzBbNF0gLSBhcmcwWzZdLCBhcmcwWzVdIC0gYXJnMFs3XV07XG5cdFx0XHR9XG5cdFx0fSBlbHNlIGlmIChjb3VudCA9PT0gMikge1xuXHRcdFx0c2VnMSA9IG5ldyBTZWdtZW50KGFyZzApO1xuXHRcdFx0c2VnMiA9IG5ldyBTZWdtZW50KGFyZzEpO1xuXHRcdH0gZWxzZSBpZiAoY291bnQgPT09IDQpIHtcblx0XHRcdHBvaW50MSA9IGFyZzA7XG5cdFx0XHRoYW5kbGUxID0gYXJnMTtcblx0XHRcdGhhbmRsZTIgPSBhcmcyO1xuXHRcdFx0cG9pbnQyID0gYXJnMztcblx0XHR9IGVsc2UgaWYgKGNvdW50ID09PSA4KSB7XG5cdFx0XHRwb2ludDEgPSBbYXJnMCwgYXJnMV07XG5cdFx0XHRwb2ludDIgPSBbYXJnNiwgYXJnN107XG5cdFx0XHRoYW5kbGUxID0gW2FyZzIgLSBhcmcwLCBhcmczIC0gYXJnMV07XG5cdFx0XHRoYW5kbGUyID0gW2FyZzQgLSBhcmc2LCBhcmc1IC0gYXJnN107XG5cdFx0fVxuXHRcdHRoaXMuX3NlZ21lbnQxID0gc2VnMSB8fCBuZXcgU2VnbWVudChwb2ludDEsIG51bGwsIGhhbmRsZTEpO1xuXHRcdHRoaXMuX3NlZ21lbnQyID0gc2VnMiB8fCBuZXcgU2VnbWVudChwb2ludDIsIGhhbmRsZTIsIG51bGwpO1xuXHR9LFxuXG5cdF9zZXJpYWxpemU6IGZ1bmN0aW9uKG9wdGlvbnMsIGRpY3Rpb25hcnkpIHtcblx0XHRyZXR1cm4gQmFzZS5zZXJpYWxpemUodGhpcy5oYXNIYW5kbGVzKClcblx0XHRcdFx0PyBbdGhpcy5nZXRQb2ludDEoKSwgdGhpcy5nZXRIYW5kbGUxKCksIHRoaXMuZ2V0SGFuZGxlMigpLFxuXHRcdFx0XHRcdHRoaXMuZ2V0UG9pbnQyKCldXG5cdFx0XHRcdDogW3RoaXMuZ2V0UG9pbnQxKCksIHRoaXMuZ2V0UG9pbnQyKCldLFxuXHRcdFx0XHRvcHRpb25zLCB0cnVlLCBkaWN0aW9uYXJ5KTtcblx0fSxcblxuXHRfY2hhbmdlZDogZnVuY3Rpb24oKSB7XG5cdFx0dGhpcy5fbGVuZ3RoID0gdGhpcy5fYm91bmRzID0gdW5kZWZpbmVkO1xuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gbmV3IEN1cnZlKHRoaXMuX3NlZ21lbnQxLCB0aGlzLl9zZWdtZW50Mik7XG5cdH0sXG5cblx0dG9TdHJpbmc6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBwYXJ0cyA9IFsgJ3BvaW50MTogJyArIHRoaXMuX3NlZ21lbnQxLl9wb2ludCBdO1xuXHRcdGlmICghdGhpcy5fc2VnbWVudDEuX2hhbmRsZU91dC5pc1plcm8oKSlcblx0XHRcdHBhcnRzLnB1c2goJ2hhbmRsZTE6ICcgKyB0aGlzLl9zZWdtZW50MS5faGFuZGxlT3V0KTtcblx0XHRpZiAoIXRoaXMuX3NlZ21lbnQyLl9oYW5kbGVJbi5pc1plcm8oKSlcblx0XHRcdHBhcnRzLnB1c2goJ2hhbmRsZTI6ICcgKyB0aGlzLl9zZWdtZW50Mi5faGFuZGxlSW4pO1xuXHRcdHBhcnRzLnB1c2goJ3BvaW50MjogJyArIHRoaXMuX3NlZ21lbnQyLl9wb2ludCk7XG5cdFx0cmV0dXJuICd7ICcgKyBwYXJ0cy5qb2luKCcsICcpICsgJyB9Jztcblx0fSxcblxuXHRjbGFzc2lmeTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIEN1cnZlLmNsYXNzaWZ5KHRoaXMuZ2V0VmFsdWVzKCkpO1xuXHR9LFxuXG5cdHJlbW92ZTogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIHJlbW92ZWQgPSBmYWxzZTtcblx0XHRpZiAodGhpcy5fcGF0aCkge1xuXHRcdFx0dmFyIHNlZ21lbnQyID0gdGhpcy5fc2VnbWVudDIsXG5cdFx0XHRcdGhhbmRsZU91dCA9IHNlZ21lbnQyLl9oYW5kbGVPdXQ7XG5cdFx0XHRyZW1vdmVkID0gc2VnbWVudDIucmVtb3ZlKCk7XG5cdFx0XHRpZiAocmVtb3ZlZClcblx0XHRcdFx0dGhpcy5fc2VnbWVudDEuX2hhbmRsZU91dC5zZXQoaGFuZGxlT3V0KTtcblx0XHR9XG5cdFx0cmV0dXJuIHJlbW92ZWQ7XG5cdH0sXG5cblx0Z2V0UG9pbnQxOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5fc2VnbWVudDEuX3BvaW50O1xuXHR9LFxuXG5cdHNldFBvaW50MTogZnVuY3Rpb24oKSB7XG5cdFx0dGhpcy5fc2VnbWVudDEuX3BvaW50LnNldChQb2ludC5yZWFkKGFyZ3VtZW50cykpO1xuXHR9LFxuXG5cdGdldFBvaW50MjogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuX3NlZ21lbnQyLl9wb2ludDtcblx0fSxcblxuXHRzZXRQb2ludDI6IGZ1bmN0aW9uKCkge1xuXHRcdHRoaXMuX3NlZ21lbnQyLl9wb2ludC5zZXQoUG9pbnQucmVhZChhcmd1bWVudHMpKTtcblx0fSxcblxuXHRnZXRIYW5kbGUxOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5fc2VnbWVudDEuX2hhbmRsZU91dDtcblx0fSxcblxuXHRzZXRIYW5kbGUxOiBmdW5jdGlvbigpIHtcblx0XHR0aGlzLl9zZWdtZW50MS5faGFuZGxlT3V0LnNldChQb2ludC5yZWFkKGFyZ3VtZW50cykpO1xuXHR9LFxuXG5cdGdldEhhbmRsZTI6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLl9zZWdtZW50Mi5faGFuZGxlSW47XG5cdH0sXG5cblx0c2V0SGFuZGxlMjogZnVuY3Rpb24oKSB7XG5cdFx0dGhpcy5fc2VnbWVudDIuX2hhbmRsZUluLnNldChQb2ludC5yZWFkKGFyZ3VtZW50cykpO1xuXHR9LFxuXG5cdGdldFNlZ21lbnQxOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5fc2VnbWVudDE7XG5cdH0sXG5cblx0Z2V0U2VnbWVudDI6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLl9zZWdtZW50Mjtcblx0fSxcblxuXHRnZXRQYXRoOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5fcGF0aDtcblx0fSxcblxuXHRnZXRJbmRleDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuX3NlZ21lbnQxLl9pbmRleDtcblx0fSxcblxuXHRnZXROZXh0OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgY3VydmVzID0gdGhpcy5fcGF0aCAmJiB0aGlzLl9wYXRoLl9jdXJ2ZXM7XG5cdFx0cmV0dXJuIGN1cnZlcyAmJiAoY3VydmVzW3RoaXMuX3NlZ21lbnQxLl9pbmRleCArIDFdXG5cdFx0XHRcdHx8IHRoaXMuX3BhdGguX2Nsb3NlZCAmJiBjdXJ2ZXNbMF0pIHx8IG51bGw7XG5cdH0sXG5cblx0Z2V0UHJldmlvdXM6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBjdXJ2ZXMgPSB0aGlzLl9wYXRoICYmIHRoaXMuX3BhdGguX2N1cnZlcztcblx0XHRyZXR1cm4gY3VydmVzICYmIChjdXJ2ZXNbdGhpcy5fc2VnbWVudDEuX2luZGV4IC0gMV1cblx0XHRcdFx0fHwgdGhpcy5fcGF0aC5fY2xvc2VkICYmIGN1cnZlc1tjdXJ2ZXMubGVuZ3RoIC0gMV0pIHx8IG51bGw7XG5cdH0sXG5cblx0aXNGaXJzdDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuICF0aGlzLl9zZWdtZW50MS5faW5kZXg7XG5cdH0sXG5cblx0aXNMYXN0OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgcGF0aCA9IHRoaXMuX3BhdGg7XG5cdFx0cmV0dXJuIHBhdGggJiYgdGhpcy5fc2VnbWVudDEuX2luZGV4ID09PSBwYXRoLl9jdXJ2ZXMubGVuZ3RoIC0gMVxuXHRcdFx0XHR8fCBmYWxzZTtcblx0fSxcblxuXHRpc1NlbGVjdGVkOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5nZXRQb2ludDEoKS5pc1NlbGVjdGVkKClcblx0XHRcdFx0JiYgdGhpcy5nZXRIYW5kbGUxKCkuaXNTZWxlY3RlZCgpXG5cdFx0XHRcdCYmIHRoaXMuZ2V0SGFuZGxlMigpLmlzU2VsZWN0ZWQoKVxuXHRcdFx0XHQmJiB0aGlzLmdldFBvaW50MigpLmlzU2VsZWN0ZWQoKTtcblx0fSxcblxuXHRzZXRTZWxlY3RlZDogZnVuY3Rpb24oc2VsZWN0ZWQpIHtcblx0XHR0aGlzLmdldFBvaW50MSgpLnNldFNlbGVjdGVkKHNlbGVjdGVkKTtcblx0XHR0aGlzLmdldEhhbmRsZTEoKS5zZXRTZWxlY3RlZChzZWxlY3RlZCk7XG5cdFx0dGhpcy5nZXRIYW5kbGUyKCkuc2V0U2VsZWN0ZWQoc2VsZWN0ZWQpO1xuXHRcdHRoaXMuZ2V0UG9pbnQyKCkuc2V0U2VsZWN0ZWQoc2VsZWN0ZWQpO1xuXHR9LFxuXG5cdGdldFZhbHVlczogZnVuY3Rpb24obWF0cml4KSB7XG5cdFx0cmV0dXJuIEN1cnZlLmdldFZhbHVlcyh0aGlzLl9zZWdtZW50MSwgdGhpcy5fc2VnbWVudDIsIG1hdHJpeCk7XG5cdH0sXG5cblx0Z2V0UG9pbnRzOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgY29vcmRzID0gdGhpcy5nZXRWYWx1ZXMoKSxcblx0XHRcdHBvaW50cyA9IFtdO1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgODsgaSArPSAyKVxuXHRcdFx0cG9pbnRzLnB1c2gobmV3IFBvaW50KGNvb3Jkc1tpXSwgY29vcmRzW2kgKyAxXSkpO1xuXHRcdHJldHVybiBwb2ludHM7XG5cdH1cbn0sIHtcblx0Z2V0TGVuZ3RoOiBmdW5jdGlvbigpIHtcblx0XHRpZiAodGhpcy5fbGVuZ3RoID09IG51bGwpXG5cdFx0XHR0aGlzLl9sZW5ndGggPSBDdXJ2ZS5nZXRMZW5ndGgodGhpcy5nZXRWYWx1ZXMoKSwgMCwgMSk7XG5cdFx0cmV0dXJuIHRoaXMuX2xlbmd0aDtcblx0fSxcblxuXHRnZXRBcmVhOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gQ3VydmUuZ2V0QXJlYSh0aGlzLmdldFZhbHVlcygpKTtcblx0fSxcblxuXHRnZXRMaW5lOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gbmV3IExpbmUodGhpcy5fc2VnbWVudDEuX3BvaW50LCB0aGlzLl9zZWdtZW50Mi5fcG9pbnQpO1xuXHR9LFxuXG5cdGdldFBhcnQ6IGZ1bmN0aW9uKGZyb20sIHRvKSB7XG5cdFx0cmV0dXJuIG5ldyBDdXJ2ZShDdXJ2ZS5nZXRQYXJ0KHRoaXMuZ2V0VmFsdWVzKCksIGZyb20sIHRvKSk7XG5cdH0sXG5cblx0Z2V0UGFydExlbmd0aDogZnVuY3Rpb24oZnJvbSwgdG8pIHtcblx0XHRyZXR1cm4gQ3VydmUuZ2V0TGVuZ3RoKHRoaXMuZ2V0VmFsdWVzKCksIGZyb20sIHRvKTtcblx0fSxcblxuXHRkaXZpZGVBdDogZnVuY3Rpb24obG9jYXRpb24pIHtcblx0XHRyZXR1cm4gdGhpcy5kaXZpZGVBdFRpbWUobG9jYXRpb24gJiYgbG9jYXRpb24uY3VydmUgPT09IHRoaXNcblx0XHRcdFx0PyBsb2NhdGlvbi50aW1lIDogdGhpcy5nZXRUaW1lQXQobG9jYXRpb24pKTtcblx0fSxcblxuXHRkaXZpZGVBdFRpbWU6IGZ1bmN0aW9uKHRpbWUsIF9zZXRIYW5kbGVzKSB7XG5cdFx0dmFyIHRNaW4gPSAxZS04LFxuXHRcdFx0dE1heCA9IDEgLSB0TWluLFxuXHRcdFx0cmVzID0gbnVsbDtcblx0XHRpZiAodGltZSA+PSB0TWluICYmIHRpbWUgPD0gdE1heCkge1xuXHRcdFx0dmFyIHBhcnRzID0gQ3VydmUuc3ViZGl2aWRlKHRoaXMuZ2V0VmFsdWVzKCksIHRpbWUpLFxuXHRcdFx0XHRsZWZ0ID0gcGFydHNbMF0sXG5cdFx0XHRcdHJpZ2h0ID0gcGFydHNbMV0sXG5cdFx0XHRcdHNldEhhbmRsZXMgPSBfc2V0SGFuZGxlcyB8fCB0aGlzLmhhc0hhbmRsZXMoKSxcblx0XHRcdFx0c2VnMSA9IHRoaXMuX3NlZ21lbnQxLFxuXHRcdFx0XHRzZWcyID0gdGhpcy5fc2VnbWVudDIsXG5cdFx0XHRcdHBhdGggPSB0aGlzLl9wYXRoO1xuXHRcdFx0aWYgKHNldEhhbmRsZXMpIHtcblx0XHRcdFx0c2VnMS5faGFuZGxlT3V0Ll9zZXQobGVmdFsyXSAtIGxlZnRbMF0sIGxlZnRbM10gLSBsZWZ0WzFdKTtcblx0XHRcdFx0c2VnMi5faGFuZGxlSW4uX3NldChyaWdodFs0XSAtIHJpZ2h0WzZdLHJpZ2h0WzVdIC0gcmlnaHRbN10pO1xuXHRcdFx0fVxuXHRcdFx0dmFyIHggPSBsZWZ0WzZdLCB5ID0gbGVmdFs3XSxcblx0XHRcdFx0c2VnbWVudCA9IG5ldyBTZWdtZW50KG5ldyBQb2ludCh4LCB5KSxcblx0XHRcdFx0XHRcdHNldEhhbmRsZXMgJiYgbmV3IFBvaW50KGxlZnRbNF0gLSB4LCBsZWZ0WzVdIC0geSksXG5cdFx0XHRcdFx0XHRzZXRIYW5kbGVzICYmIG5ldyBQb2ludChyaWdodFsyXSAtIHgsIHJpZ2h0WzNdIC0geSkpO1xuXHRcdFx0aWYgKHBhdGgpIHtcblx0XHRcdFx0cGF0aC5pbnNlcnQoc2VnMS5faW5kZXggKyAxLCBzZWdtZW50KTtcblx0XHRcdFx0cmVzID0gdGhpcy5nZXROZXh0KCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0aGlzLl9zZWdtZW50MiA9IHNlZ21lbnQ7XG5cdFx0XHRcdHRoaXMuX2NoYW5nZWQoKTtcblx0XHRcdFx0cmVzID0gbmV3IEN1cnZlKHNlZ21lbnQsIHNlZzIpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gcmVzO1xuXHR9LFxuXG5cdHNwbGl0QXQ6IGZ1bmN0aW9uKGxvY2F0aW9uKSB7XG5cdFx0dmFyIHBhdGggPSB0aGlzLl9wYXRoO1xuXHRcdHJldHVybiBwYXRoID8gcGF0aC5zcGxpdEF0KGxvY2F0aW9uKSA6IG51bGw7XG5cdH0sXG5cblx0c3BsaXRBdFRpbWU6IGZ1bmN0aW9uKHRpbWUpIHtcblx0XHRyZXR1cm4gdGhpcy5zcGxpdEF0KHRoaXMuZ2V0TG9jYXRpb25BdFRpbWUodGltZSkpO1xuXHR9LFxuXG5cdGRpdmlkZTogZnVuY3Rpb24ob2Zmc2V0LCBpc1RpbWUpIHtcblx0XHRyZXR1cm4gdGhpcy5kaXZpZGVBdFRpbWUob2Zmc2V0ID09PSB1bmRlZmluZWQgPyAwLjUgOiBpc1RpbWUgPyBvZmZzZXRcblx0XHRcdFx0OiB0aGlzLmdldFRpbWVBdChvZmZzZXQpKTtcblx0fSxcblxuXHRzcGxpdDogZnVuY3Rpb24ob2Zmc2V0LCBpc1RpbWUpIHtcblx0XHRyZXR1cm4gdGhpcy5zcGxpdEF0VGltZShvZmZzZXQgPT09IHVuZGVmaW5lZCA/IDAuNSA6IGlzVGltZSA/IG9mZnNldFxuXHRcdFx0XHQ6IHRoaXMuZ2V0VGltZUF0KG9mZnNldCkpO1xuXHR9LFxuXG5cdHJldmVyc2VkOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gbmV3IEN1cnZlKHRoaXMuX3NlZ21lbnQyLnJldmVyc2VkKCksIHRoaXMuX3NlZ21lbnQxLnJldmVyc2VkKCkpO1xuXHR9LFxuXG5cdGNsZWFySGFuZGxlczogZnVuY3Rpb24oKSB7XG5cdFx0dGhpcy5fc2VnbWVudDEuX2hhbmRsZU91dC5fc2V0KDAsIDApO1xuXHRcdHRoaXMuX3NlZ21lbnQyLl9oYW5kbGVJbi5fc2V0KDAsIDApO1xuXHR9LFxuXG5zdGF0aWNzOiB7XG5cdGdldFZhbHVlczogZnVuY3Rpb24oc2VnbWVudDEsIHNlZ21lbnQyLCBtYXRyaXgsIHN0cmFpZ2h0KSB7XG5cdFx0dmFyIHAxID0gc2VnbWVudDEuX3BvaW50LFxuXHRcdFx0aDEgPSBzZWdtZW50MS5faGFuZGxlT3V0LFxuXHRcdFx0aDIgPSBzZWdtZW50Mi5faGFuZGxlSW4sXG5cdFx0XHRwMiA9IHNlZ21lbnQyLl9wb2ludCxcblx0XHRcdHgxID0gcDEueCwgeTEgPSBwMS55LFxuXHRcdFx0eDIgPSBwMi54LCB5MiA9IHAyLnksXG5cdFx0XHR2YWx1ZXMgPSBzdHJhaWdodFxuXHRcdFx0XHQ/IFsgeDEsIHkxLCB4MSwgeTEsIHgyLCB5MiwgeDIsIHkyIF1cblx0XHRcdFx0OiBbXG5cdFx0XHRcdFx0eDEsIHkxLFxuXHRcdFx0XHRcdHgxICsgaDEuX3gsIHkxICsgaDEuX3ksXG5cdFx0XHRcdFx0eDIgKyBoMi5feCwgeTIgKyBoMi5feSxcblx0XHRcdFx0XHR4MiwgeTJcblx0XHRcdFx0XTtcblx0XHRpZiAobWF0cml4KVxuXHRcdFx0bWF0cml4Ll90cmFuc2Zvcm1Db29yZGluYXRlcyh2YWx1ZXMsIHZhbHVlcywgNCk7XG5cdFx0cmV0dXJuIHZhbHVlcztcblx0fSxcblxuXHRzdWJkaXZpZGU6IGZ1bmN0aW9uKHYsIHQpIHtcblx0XHR2YXIgeDAgPSB2WzBdLCB5MCA9IHZbMV0sXG5cdFx0XHR4MSA9IHZbMl0sIHkxID0gdlszXSxcblx0XHRcdHgyID0gdls0XSwgeTIgPSB2WzVdLFxuXHRcdFx0eDMgPSB2WzZdLCB5MyA9IHZbN107XG5cdFx0aWYgKHQgPT09IHVuZGVmaW5lZClcblx0XHRcdHQgPSAwLjU7XG5cdFx0dmFyIHUgPSAxIC0gdCxcblx0XHRcdHg0ID0gdSAqIHgwICsgdCAqIHgxLCB5NCA9IHUgKiB5MCArIHQgKiB5MSxcblx0XHRcdHg1ID0gdSAqIHgxICsgdCAqIHgyLCB5NSA9IHUgKiB5MSArIHQgKiB5Mixcblx0XHRcdHg2ID0gdSAqIHgyICsgdCAqIHgzLCB5NiA9IHUgKiB5MiArIHQgKiB5Myxcblx0XHRcdHg3ID0gdSAqIHg0ICsgdCAqIHg1LCB5NyA9IHUgKiB5NCArIHQgKiB5NSxcblx0XHRcdHg4ID0gdSAqIHg1ICsgdCAqIHg2LCB5OCA9IHUgKiB5NSArIHQgKiB5Nixcblx0XHRcdHg5ID0gdSAqIHg3ICsgdCAqIHg4LCB5OSA9IHUgKiB5NyArIHQgKiB5ODtcblx0XHRyZXR1cm4gW1xuXHRcdFx0W3gwLCB5MCwgeDQsIHk0LCB4NywgeTcsIHg5LCB5OV0sXG5cdFx0XHRbeDksIHk5LCB4OCwgeTgsIHg2LCB5NiwgeDMsIHkzXVxuXHRcdF07XG5cdH0sXG5cblx0Z2V0TW9ub0N1cnZlczogZnVuY3Rpb24odiwgZGlyKSB7XG5cdFx0dmFyIGN1cnZlcyA9IFtdLFxuXHRcdFx0aW8gPSBkaXIgPyAwIDogMSxcblx0XHRcdG8wID0gdltpbyArIDBdLFxuXHRcdFx0bzEgPSB2W2lvICsgMl0sXG5cdFx0XHRvMiA9IHZbaW8gKyA0XSxcblx0XHRcdG8zID0gdltpbyArIDZdO1xuXHRcdGlmICgobzAgPj0gbzEpID09PSAobzEgPj0gbzIpICYmIChvMSA+PSBvMikgPT09IChvMiA+PSBvMylcblx0XHRcdFx0fHwgQ3VydmUuaXNTdHJhaWdodCh2KSkge1xuXHRcdFx0Y3VydmVzLnB1c2godik7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHZhciBhID0gMyAqIChvMSAtIG8yKSAtIG8wICsgbzMsXG5cdFx0XHRcdGIgPSAyICogKG8wICsgbzIpIC0gNCAqIG8xLFxuXHRcdFx0XHRjID0gbzEgLSBvMCxcblx0XHRcdFx0dE1pbiA9IDFlLTgsXG5cdFx0XHRcdHRNYXggPSAxIC0gdE1pbixcblx0XHRcdFx0cm9vdHMgPSBbXSxcblx0XHRcdFx0biA9IE51bWVyaWNhbC5zb2x2ZVF1YWRyYXRpYyhhLCBiLCBjLCByb290cywgdE1pbiwgdE1heCk7XG5cdFx0XHRpZiAoIW4pIHtcblx0XHRcdFx0Y3VydmVzLnB1c2godik7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyb290cy5zb3J0KCk7XG5cdFx0XHRcdHZhciB0ID0gcm9vdHNbMF0sXG5cdFx0XHRcdFx0cGFydHMgPSBDdXJ2ZS5zdWJkaXZpZGUodiwgdCk7XG5cdFx0XHRcdGN1cnZlcy5wdXNoKHBhcnRzWzBdKTtcblx0XHRcdFx0aWYgKG4gPiAxKSB7XG5cdFx0XHRcdFx0dCA9IChyb290c1sxXSAtIHQpIC8gKDEgLSB0KTtcblx0XHRcdFx0XHRwYXJ0cyA9IEN1cnZlLnN1YmRpdmlkZShwYXJ0c1sxXSwgdCk7XG5cdFx0XHRcdFx0Y3VydmVzLnB1c2gocGFydHNbMF0pO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGN1cnZlcy5wdXNoKHBhcnRzWzFdKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIGN1cnZlcztcblx0fSxcblxuXHRzb2x2ZUN1YmljOiBmdW5jdGlvbiAodiwgY29vcmQsIHZhbCwgcm9vdHMsIG1pbiwgbWF4KSB7XG5cdFx0dmFyIHYwID0gdltjb29yZF0sXG5cdFx0XHR2MSA9IHZbY29vcmQgKyAyXSxcblx0XHRcdHYyID0gdltjb29yZCArIDRdLFxuXHRcdFx0djMgPSB2W2Nvb3JkICsgNl0sXG5cdFx0XHRyZXMgPSAwO1xuXHRcdGlmICggICEodjAgPCB2YWwgJiYgdjMgPCB2YWwgJiYgdjEgPCB2YWwgJiYgdjIgPCB2YWwgfHxcblx0XHRcdFx0djAgPiB2YWwgJiYgdjMgPiB2YWwgJiYgdjEgPiB2YWwgJiYgdjIgPiB2YWwpKSB7XG5cdFx0XHR2YXIgYyA9IDMgKiAodjEgLSB2MCksXG5cdFx0XHRcdGIgPSAzICogKHYyIC0gdjEpIC0gYyxcblx0XHRcdFx0YSA9IHYzIC0gdjAgLSBjIC0gYjtcblx0XHRcdHJlcyA9IE51bWVyaWNhbC5zb2x2ZUN1YmljKGEsIGIsIGMsIHYwIC0gdmFsLCByb290cywgbWluLCBtYXgpO1xuXHRcdH1cblx0XHRyZXR1cm4gcmVzO1xuXHR9LFxuXG5cdGdldFRpbWVPZjogZnVuY3Rpb24odiwgcG9pbnQpIHtcblx0XHR2YXIgcDAgPSBuZXcgUG9pbnQodlswXSwgdlsxXSksXG5cdFx0XHRwMyA9IG5ldyBQb2ludCh2WzZdLCB2WzddKSxcblx0XHRcdGVwc2lsb24gPSAxZS0xMixcblx0XHRcdGdlb21FcHNpbG9uID0gMWUtNyxcblx0XHRcdHQgPSBwb2ludC5pc0Nsb3NlKHAwLCBlcHNpbG9uKSA/IDBcblx0XHRcdCAgOiBwb2ludC5pc0Nsb3NlKHAzLCBlcHNpbG9uKSA/IDFcblx0XHRcdCAgOiBudWxsO1xuXHRcdGlmICh0ID09PSBudWxsKSB7XG5cdFx0XHR2YXIgY29vcmRzID0gW3BvaW50LngsIHBvaW50LnldLFxuXHRcdFx0XHRyb290cyA9IFtdO1xuXHRcdFx0Zm9yICh2YXIgYyA9IDA7IGMgPCAyOyBjKyspIHtcblx0XHRcdFx0dmFyIGNvdW50ID0gQ3VydmUuc29sdmVDdWJpYyh2LCBjLCBjb29yZHNbY10sIHJvb3RzLCAwLCAxKTtcblx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XG5cdFx0XHRcdFx0dmFyIHUgPSByb290c1tpXTtcblx0XHRcdFx0XHRpZiAocG9pbnQuaXNDbG9zZShDdXJ2ZS5nZXRQb2ludCh2LCB1KSwgZ2VvbUVwc2lsb24pKVxuXHRcdFx0XHRcdFx0cmV0dXJuIHU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIHBvaW50LmlzQ2xvc2UocDAsIGdlb21FcHNpbG9uKSA/IDBcblx0XHRcdCA6IHBvaW50LmlzQ2xvc2UocDMsIGdlb21FcHNpbG9uKSA/IDFcblx0XHRcdCA6IG51bGw7XG5cdH0sXG5cblx0Z2V0TmVhcmVzdFRpbWU6IGZ1bmN0aW9uKHYsIHBvaW50KSB7XG5cdFx0aWYgKEN1cnZlLmlzU3RyYWlnaHQodikpIHtcblx0XHRcdHZhciB4MCA9IHZbMF0sIHkwID0gdlsxXSxcblx0XHRcdFx0eDMgPSB2WzZdLCB5MyA9IHZbN10sXG5cdFx0XHRcdHZ4ID0geDMgLSB4MCwgdnkgPSB5MyAtIHkwLFxuXHRcdFx0XHRkZXQgPSB2eCAqIHZ4ICsgdnkgKiB2eTtcblx0XHRcdGlmIChkZXQgPT09IDApXG5cdFx0XHRcdHJldHVybiAwO1xuXHRcdFx0dmFyIHUgPSAoKHBvaW50LnggLSB4MCkgKiB2eCArIChwb2ludC55IC0geTApICogdnkpIC8gZGV0O1xuXHRcdFx0cmV0dXJuIHUgPCAxZS0xMiA/IDBcblx0XHRcdFx0IDogdSA+IDAuOTk5OTk5OTk5OTk5ID8gMVxuXHRcdFx0XHQgOiBDdXJ2ZS5nZXRUaW1lT2Yodixcblx0XHRcdFx0XHRuZXcgUG9pbnQoeDAgKyB1ICogdngsIHkwICsgdSAqIHZ5KSk7XG5cdFx0fVxuXG5cdFx0dmFyIGNvdW50ID0gMTAwLFxuXHRcdFx0bWluRGlzdCA9IEluZmluaXR5LFxuXHRcdFx0bWluVCA9IDA7XG5cblx0XHRmdW5jdGlvbiByZWZpbmUodCkge1xuXHRcdFx0aWYgKHQgPj0gMCAmJiB0IDw9IDEpIHtcblx0XHRcdFx0dmFyIGRpc3QgPSBwb2ludC5nZXREaXN0YW5jZShDdXJ2ZS5nZXRQb2ludCh2LCB0KSwgdHJ1ZSk7XG5cdFx0XHRcdGlmIChkaXN0IDwgbWluRGlzdCkge1xuXHRcdFx0XHRcdG1pbkRpc3QgPSBkaXN0O1xuXHRcdFx0XHRcdG1pblQgPSB0O1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPD0gY291bnQ7IGkrKylcblx0XHRcdHJlZmluZShpIC8gY291bnQpO1xuXG5cdFx0dmFyIHN0ZXAgPSAxIC8gKGNvdW50ICogMik7XG5cdFx0d2hpbGUgKHN0ZXAgPiAxZS04KSB7XG5cdFx0XHRpZiAoIXJlZmluZShtaW5UIC0gc3RlcCkgJiYgIXJlZmluZShtaW5UICsgc3RlcCkpXG5cdFx0XHRcdHN0ZXAgLz0gMjtcblx0XHR9XG5cdFx0cmV0dXJuIG1pblQ7XG5cdH0sXG5cblx0Z2V0UGFydDogZnVuY3Rpb24odiwgZnJvbSwgdG8pIHtcblx0XHR2YXIgZmxpcCA9IGZyb20gPiB0bztcblx0XHRpZiAoZmxpcCkge1xuXHRcdFx0dmFyIHRtcCA9IGZyb207XG5cdFx0XHRmcm9tID0gdG87XG5cdFx0XHR0byA9IHRtcDtcblx0XHR9XG5cdFx0aWYgKGZyb20gPiAwKVxuXHRcdFx0diA9IEN1cnZlLnN1YmRpdmlkZSh2LCBmcm9tKVsxXTtcblx0XHRpZiAodG8gPCAxKVxuXHRcdFx0diA9IEN1cnZlLnN1YmRpdmlkZSh2LCAodG8gLSBmcm9tKSAvICgxIC0gZnJvbSkpWzBdO1xuXHRcdHJldHVybiBmbGlwXG5cdFx0XHRcdD8gW3ZbNl0sIHZbN10sIHZbNF0sIHZbNV0sIHZbMl0sIHZbM10sIHZbMF0sIHZbMV1dXG5cdFx0XHRcdDogdjtcblx0fSxcblxuXHRpc0ZsYXRFbm91Z2g6IGZ1bmN0aW9uKHYsIGZsYXRuZXNzKSB7XG5cdFx0dmFyIHgwID0gdlswXSwgeTAgPSB2WzFdLFxuXHRcdFx0eDEgPSB2WzJdLCB5MSA9IHZbM10sXG5cdFx0XHR4MiA9IHZbNF0sIHkyID0gdls1XSxcblx0XHRcdHgzID0gdls2XSwgeTMgPSB2WzddLFxuXHRcdFx0dXggPSAzICogeDEgLSAyICogeDAgLSB4Myxcblx0XHRcdHV5ID0gMyAqIHkxIC0gMiAqIHkwIC0geTMsXG5cdFx0XHR2eCA9IDMgKiB4MiAtIDIgKiB4MyAtIHgwLFxuXHRcdFx0dnkgPSAzICogeTIgLSAyICogeTMgLSB5MDtcblx0XHRyZXR1cm4gTWF0aC5tYXgodXggKiB1eCwgdnggKiB2eCkgKyBNYXRoLm1heCh1eSAqIHV5LCB2eSAqIHZ5KVxuXHRcdFx0XHQ8PSAxNiAqIGZsYXRuZXNzICogZmxhdG5lc3M7XG5cdH0sXG5cblx0Z2V0QXJlYTogZnVuY3Rpb24odikge1xuXHRcdHZhciB4MCA9IHZbMF0sIHkwID0gdlsxXSxcblx0XHRcdHgxID0gdlsyXSwgeTEgPSB2WzNdLFxuXHRcdFx0eDIgPSB2WzRdLCB5MiA9IHZbNV0sXG5cdFx0XHR4MyA9IHZbNl0sIHkzID0gdls3XTtcblx0XHRyZXR1cm4gMyAqICgoeTMgLSB5MCkgKiAoeDEgKyB4MikgLSAoeDMgLSB4MCkgKiAoeTEgKyB5Milcblx0XHRcdFx0KyB5MSAqICh4MCAtIHgyKSAtIHgxICogKHkwIC0geTIpXG5cdFx0XHRcdCsgeTMgKiAoeDIgKyB4MCAvIDMpIC0geDMgKiAoeTIgKyB5MCAvIDMpKSAvIDIwO1xuXHR9LFxuXG5cdGdldEJvdW5kczogZnVuY3Rpb24odikge1xuXHRcdHZhciBtaW4gPSB2LnNsaWNlKDAsIDIpLFxuXHRcdFx0bWF4ID0gbWluLnNsaWNlKCksXG5cdFx0XHRyb290cyA9IFswLCAwXTtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IDI7IGkrKylcblx0XHRcdEN1cnZlLl9hZGRCb3VuZHModltpXSwgdltpICsgMl0sIHZbaSArIDRdLCB2W2kgKyA2XSxcblx0XHRcdFx0XHRpLCAwLCBtaW4sIG1heCwgcm9vdHMpO1xuXHRcdHJldHVybiBuZXcgUmVjdGFuZ2xlKG1pblswXSwgbWluWzFdLCBtYXhbMF0gLSBtaW5bMF0sIG1heFsxXSAtIG1pblsxXSk7XG5cdH0sXG5cblx0X2FkZEJvdW5kczogZnVuY3Rpb24odjAsIHYxLCB2MiwgdjMsIGNvb3JkLCBwYWRkaW5nLCBtaW4sIG1heCwgcm9vdHMpIHtcblx0XHRmdW5jdGlvbiBhZGQodmFsdWUsIHBhZGRpbmcpIHtcblx0XHRcdHZhciBsZWZ0ID0gdmFsdWUgLSBwYWRkaW5nLFxuXHRcdFx0XHRyaWdodCA9IHZhbHVlICsgcGFkZGluZztcblx0XHRcdGlmIChsZWZ0IDwgbWluW2Nvb3JkXSlcblx0XHRcdFx0bWluW2Nvb3JkXSA9IGxlZnQ7XG5cdFx0XHRpZiAocmlnaHQgPiBtYXhbY29vcmRdKVxuXHRcdFx0XHRtYXhbY29vcmRdID0gcmlnaHQ7XG5cdFx0fVxuXG5cdFx0cGFkZGluZyAvPSAyO1xuXHRcdHZhciBtaW5QYWQgPSBtaW5bY29vcmRdIC0gcGFkZGluZyxcblx0XHRcdG1heFBhZCA9IG1heFtjb29yZF0gKyBwYWRkaW5nO1xuXHRcdGlmICggICAgdjAgPCBtaW5QYWQgfHwgdjEgPCBtaW5QYWQgfHwgdjIgPCBtaW5QYWQgfHwgdjMgPCBtaW5QYWQgfHxcblx0XHRcdFx0djAgPiBtYXhQYWQgfHwgdjEgPiBtYXhQYWQgfHwgdjIgPiBtYXhQYWQgfHwgdjMgPiBtYXhQYWQpIHtcblx0XHRcdGlmICh2MSA8IHYwICE9IHYxIDwgdjMgJiYgdjIgPCB2MCAhPSB2MiA8IHYzKSB7XG5cdFx0XHRcdGFkZCh2MCwgcGFkZGluZyk7XG5cdFx0XHRcdGFkZCh2MywgcGFkZGluZyk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR2YXIgYSA9IDMgKiAodjEgLSB2MikgLSB2MCArIHYzLFxuXHRcdFx0XHRcdGIgPSAyICogKHYwICsgdjIpIC0gNCAqIHYxLFxuXHRcdFx0XHRcdGMgPSB2MSAtIHYwLFxuXHRcdFx0XHRcdGNvdW50ID0gTnVtZXJpY2FsLnNvbHZlUXVhZHJhdGljKGEsIGIsIGMsIHJvb3RzKSxcblx0XHRcdFx0XHR0TWluID0gMWUtOCxcblx0XHRcdFx0XHR0TWF4ID0gMSAtIHRNaW47XG5cdFx0XHRcdGFkZCh2MywgMCk7XG5cdFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xuXHRcdFx0XHRcdHZhciB0ID0gcm9vdHNbaV0sXG5cdFx0XHRcdFx0XHR1ID0gMSAtIHQ7XG5cdFx0XHRcdFx0aWYgKHRNaW4gPD0gdCAmJiB0IDw9IHRNYXgpXG5cdFx0XHRcdFx0XHRhZGQodSAqIHUgKiB1ICogdjBcblx0XHRcdFx0XHRcdFx0KyAzICogdSAqIHUgKiB0ICogdjFcblx0XHRcdFx0XHRcdFx0KyAzICogdSAqIHQgKiB0ICogdjJcblx0XHRcdFx0XHRcdFx0KyB0ICogdCAqIHQgKiB2Myxcblx0XHRcdFx0XHRcdFx0cGFkZGluZyk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cbn19LCBCYXNlLmVhY2goXG5cdFsnZ2V0Qm91bmRzJywgJ2dldFN0cm9rZUJvdW5kcycsICdnZXRIYW5kbGVCb3VuZHMnXSxcblx0ZnVuY3Rpb24obmFtZSkge1xuXHRcdHRoaXNbbmFtZV0gPSBmdW5jdGlvbigpIHtcblx0XHRcdGlmICghdGhpcy5fYm91bmRzKVxuXHRcdFx0XHR0aGlzLl9ib3VuZHMgPSB7fTtcblx0XHRcdHZhciBib3VuZHMgPSB0aGlzLl9ib3VuZHNbbmFtZV07XG5cdFx0XHRpZiAoIWJvdW5kcykge1xuXHRcdFx0XHRib3VuZHMgPSB0aGlzLl9ib3VuZHNbbmFtZV0gPSBQYXRoW25hbWVdKFxuXHRcdFx0XHRcdFx0W3RoaXMuX3NlZ21lbnQxLCB0aGlzLl9zZWdtZW50Ml0sIGZhbHNlLCB0aGlzLl9wYXRoKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBib3VuZHMuY2xvbmUoKTtcblx0XHR9O1xuXHR9LFxue1xuXG59KSwgQmFzZS5lYWNoKHtcblx0aXNTdHJhaWdodDogZnVuY3Rpb24ocDEsIGgxLCBoMiwgcDIpIHtcblx0XHRpZiAoaDEuaXNaZXJvKCkgJiYgaDIuaXNaZXJvKCkpIHtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR2YXIgdiA9IHAyLnN1YnRyYWN0KHAxKTtcblx0XHRcdGlmICh2LmlzWmVybygpKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH0gZWxzZSBpZiAodi5pc0NvbGxpbmVhcihoMSkgJiYgdi5pc0NvbGxpbmVhcihoMikpIHtcblx0XHRcdFx0dmFyIGwgPSBuZXcgTGluZShwMSwgcDIpLFxuXHRcdFx0XHRcdGVwc2lsb24gPSAxZS03O1xuXHRcdFx0XHRpZiAobC5nZXREaXN0YW5jZShwMS5hZGQoaDEpKSA8IGVwc2lsb24gJiZcblx0XHRcdFx0XHRsLmdldERpc3RhbmNlKHAyLmFkZChoMikpIDwgZXBzaWxvbikge1xuXHRcdFx0XHRcdHZhciBkaXYgPSB2LmRvdCh2KSxcblx0XHRcdFx0XHRcdHMxID0gdi5kb3QoaDEpIC8gZGl2LFxuXHRcdFx0XHRcdFx0czIgPSB2LmRvdChoMikgLyBkaXY7XG5cdFx0XHRcdFx0cmV0dXJuIHMxID49IDAgJiYgczEgPD0gMSAmJiBzMiA8PSAwICYmIHMyID49IC0xO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBmYWxzZTtcblx0fSxcblxuXHRpc0xpbmVhcjogZnVuY3Rpb24ocDEsIGgxLCBoMiwgcDIpIHtcblx0XHR2YXIgdGhpcmQgPSBwMi5zdWJ0cmFjdChwMSkuZGl2aWRlKDMpO1xuXHRcdHJldHVybiBoMS5lcXVhbHModGhpcmQpICYmIGgyLm5lZ2F0ZSgpLmVxdWFscyh0aGlyZCk7XG5cdH1cbn0sIGZ1bmN0aW9uKHRlc3QsIG5hbWUpIHtcblx0dGhpc1tuYW1lXSA9IGZ1bmN0aW9uKGVwc2lsb24pIHtcblx0XHR2YXIgc2VnMSA9IHRoaXMuX3NlZ21lbnQxLFxuXHRcdFx0c2VnMiA9IHRoaXMuX3NlZ21lbnQyO1xuXHRcdHJldHVybiB0ZXN0KHNlZzEuX3BvaW50LCBzZWcxLl9oYW5kbGVPdXQsIHNlZzIuX2hhbmRsZUluLCBzZWcyLl9wb2ludCxcblx0XHRcdFx0ZXBzaWxvbik7XG5cdH07XG5cblx0dGhpcy5zdGF0aWNzW25hbWVdID0gZnVuY3Rpb24odiwgZXBzaWxvbikge1xuXHRcdHZhciB4MCA9IHZbMF0sIHkwID0gdlsxXSxcblx0XHRcdHgzID0gdls2XSwgeTMgPSB2WzddO1xuXHRcdHJldHVybiB0ZXN0KFxuXHRcdFx0XHRuZXcgUG9pbnQoeDAsIHkwKSxcblx0XHRcdFx0bmV3IFBvaW50KHZbMl0gLSB4MCwgdlszXSAtIHkwKSxcblx0XHRcdFx0bmV3IFBvaW50KHZbNF0gLSB4Mywgdls1XSAtIHkzKSxcblx0XHRcdFx0bmV3IFBvaW50KHgzLCB5MyksIGVwc2lsb24pO1xuXHR9O1xufSwge1xuXHRzdGF0aWNzOiB7fSxcblxuXHRoYXNIYW5kbGVzOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gIXRoaXMuX3NlZ21lbnQxLl9oYW5kbGVPdXQuaXNaZXJvKClcblx0XHRcdFx0fHwgIXRoaXMuX3NlZ21lbnQyLl9oYW5kbGVJbi5pc1plcm8oKTtcblx0fSxcblxuXHRoYXNMZW5ndGg6IGZ1bmN0aW9uKGVwc2lsb24pIHtcblx0XHRyZXR1cm4gKCF0aGlzLmdldFBvaW50MSgpLmVxdWFscyh0aGlzLmdldFBvaW50MigpKSB8fCB0aGlzLmhhc0hhbmRsZXMoKSlcblx0XHRcdFx0JiYgdGhpcy5nZXRMZW5ndGgoKSA+IChlcHNpbG9uIHx8IDApO1xuXHR9LFxuXG5cdGlzQ29sbGluZWFyOiBmdW5jdGlvbihjdXJ2ZSkge1xuXHRcdHJldHVybiBjdXJ2ZSAmJiB0aGlzLmlzU3RyYWlnaHQoKSAmJiBjdXJ2ZS5pc1N0cmFpZ2h0KClcblx0XHRcdFx0JiYgdGhpcy5nZXRMaW5lKCkuaXNDb2xsaW5lYXIoY3VydmUuZ2V0TGluZSgpKTtcblx0fSxcblxuXHRpc0hvcml6b250YWw6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmlzU3RyYWlnaHQoKSAmJiBNYXRoLmFicyh0aGlzLmdldFRhbmdlbnRBdFRpbWUoMC41KS55KVxuXHRcdFx0XHQ8IDFlLTg7XG5cdH0sXG5cblx0aXNWZXJ0aWNhbDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuaXNTdHJhaWdodCgpICYmIE1hdGguYWJzKHRoaXMuZ2V0VGFuZ2VudEF0VGltZSgwLjUpLngpXG5cdFx0XHRcdDwgMWUtODtcblx0fVxufSksIHtcblx0YmVhbnM6IGZhbHNlLFxuXG5cdGdldExvY2F0aW9uQXQ6IGZ1bmN0aW9uKG9mZnNldCwgX2lzVGltZSkge1xuXHRcdHJldHVybiB0aGlzLmdldExvY2F0aW9uQXRUaW1lKFxuXHRcdFx0XHRfaXNUaW1lID8gb2Zmc2V0IDogdGhpcy5nZXRUaW1lQXQob2Zmc2V0KSk7XG5cdH0sXG5cblx0Z2V0TG9jYXRpb25BdFRpbWU6IGZ1bmN0aW9uKHQpIHtcblx0XHRyZXR1cm4gdCAhPSBudWxsICYmIHQgPj0gMCAmJiB0IDw9IDFcblx0XHRcdFx0PyBuZXcgQ3VydmVMb2NhdGlvbih0aGlzLCB0KVxuXHRcdFx0XHQ6IG51bGw7XG5cdH0sXG5cblx0Z2V0VGltZUF0OiBmdW5jdGlvbihvZmZzZXQsIHN0YXJ0KSB7XG5cdFx0cmV0dXJuIEN1cnZlLmdldFRpbWVBdCh0aGlzLmdldFZhbHVlcygpLCBvZmZzZXQsIHN0YXJ0KTtcblx0fSxcblxuXHRnZXRQYXJhbWV0ZXJBdDogJyNnZXRUaW1lQXQnLFxuXG5cdGdldFRpbWVzV2l0aFRhbmdlbnQ6IGZ1bmN0aW9uICgpIHtcblx0XHR2YXIgdGFuZ2VudCA9IFBvaW50LnJlYWQoYXJndW1lbnRzKTtcblx0XHRyZXR1cm4gdGFuZ2VudC5pc1plcm8oKVxuXHRcdFx0XHQ/IFtdXG5cdFx0XHRcdDogQ3VydmUuZ2V0VGltZXNXaXRoVGFuZ2VudCh0aGlzLmdldFZhbHVlcygpLCB0YW5nZW50KTtcblx0fSxcblxuXHRnZXRPZmZzZXRBdFRpbWU6IGZ1bmN0aW9uKHQpIHtcblx0XHRyZXR1cm4gdGhpcy5nZXRQYXJ0TGVuZ3RoKDAsIHQpO1xuXHR9LFxuXG5cdGdldExvY2F0aW9uT2Y6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmdldExvY2F0aW9uQXRUaW1lKHRoaXMuZ2V0VGltZU9mKFBvaW50LnJlYWQoYXJndW1lbnRzKSkpO1xuXHR9LFxuXG5cdGdldE9mZnNldE9mOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgbG9jID0gdGhpcy5nZXRMb2NhdGlvbk9mLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cdFx0cmV0dXJuIGxvYyA/IGxvYy5nZXRPZmZzZXQoKSA6IG51bGw7XG5cdH0sXG5cblx0Z2V0VGltZU9mOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gQ3VydmUuZ2V0VGltZU9mKHRoaXMuZ2V0VmFsdWVzKCksIFBvaW50LnJlYWQoYXJndW1lbnRzKSk7XG5cdH0sXG5cblx0Z2V0UGFyYW1ldGVyT2Y6ICcjZ2V0VGltZU9mJyxcblxuXHRnZXROZWFyZXN0TG9jYXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBwb2ludCA9IFBvaW50LnJlYWQoYXJndW1lbnRzKSxcblx0XHRcdHZhbHVlcyA9IHRoaXMuZ2V0VmFsdWVzKCksXG5cdFx0XHR0ID0gQ3VydmUuZ2V0TmVhcmVzdFRpbWUodmFsdWVzLCBwb2ludCksXG5cdFx0XHRwdCA9IEN1cnZlLmdldFBvaW50KHZhbHVlcywgdCk7XG5cdFx0cmV0dXJuIG5ldyBDdXJ2ZUxvY2F0aW9uKHRoaXMsIHQsIHB0LCBudWxsLCBwb2ludC5nZXREaXN0YW5jZShwdCkpO1xuXHR9LFxuXG5cdGdldE5lYXJlc3RQb2ludDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGxvYyA9IHRoaXMuZ2V0TmVhcmVzdExvY2F0aW9uLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cdFx0cmV0dXJuIGxvYyA/IGxvYy5nZXRQb2ludCgpIDogbG9jO1xuXHR9XG5cbn0sXG5uZXcgZnVuY3Rpb24oKSB7XG5cdHZhciBtZXRob2RzID0gWydnZXRQb2ludCcsICdnZXRUYW5nZW50JywgJ2dldE5vcm1hbCcsICdnZXRXZWlnaHRlZFRhbmdlbnQnLFxuXHRcdCdnZXRXZWlnaHRlZE5vcm1hbCcsICdnZXRDdXJ2YXR1cmUnXTtcblx0cmV0dXJuIEJhc2UuZWFjaChtZXRob2RzLFxuXHRcdGZ1bmN0aW9uKG5hbWUpIHtcblx0XHRcdHRoaXNbbmFtZSArICdBdCddID0gZnVuY3Rpb24obG9jYXRpb24sIF9pc1RpbWUpIHtcblx0XHRcdFx0dmFyIHZhbHVlcyA9IHRoaXMuZ2V0VmFsdWVzKCk7XG5cdFx0XHRcdHJldHVybiBDdXJ2ZVtuYW1lXSh2YWx1ZXMsIF9pc1RpbWUgPyBsb2NhdGlvblxuXHRcdFx0XHRcdFx0OiBDdXJ2ZS5nZXRUaW1lQXQodmFsdWVzLCBsb2NhdGlvbikpO1xuXHRcdFx0fTtcblxuXHRcdFx0dGhpc1tuYW1lICsgJ0F0VGltZSddID0gZnVuY3Rpb24odGltZSkge1xuXHRcdFx0XHRyZXR1cm4gQ3VydmVbbmFtZV0odGhpcy5nZXRWYWx1ZXMoKSwgdGltZSk7XG5cdFx0XHR9O1xuXHRcdH0sIHtcblx0XHRcdHN0YXRpY3M6IHtcblx0XHRcdFx0X2V2YWx1YXRlTWV0aG9kczogbWV0aG9kc1xuXHRcdFx0fVxuXHRcdH1cblx0KTtcbn0sXG5uZXcgZnVuY3Rpb24oKSB7XG5cblx0ZnVuY3Rpb24gZ2V0TGVuZ3RoSW50ZWdyYW5kKHYpIHtcblx0XHR2YXIgeDAgPSB2WzBdLCB5MCA9IHZbMV0sXG5cdFx0XHR4MSA9IHZbMl0sIHkxID0gdlszXSxcblx0XHRcdHgyID0gdls0XSwgeTIgPSB2WzVdLFxuXHRcdFx0eDMgPSB2WzZdLCB5MyA9IHZbN10sXG5cblx0XHRcdGF4ID0gOSAqICh4MSAtIHgyKSArIDMgKiAoeDMgLSB4MCksXG5cdFx0XHRieCA9IDYgKiAoeDAgKyB4MikgLSAxMiAqIHgxLFxuXHRcdFx0Y3ggPSAzICogKHgxIC0geDApLFxuXG5cdFx0XHRheSA9IDkgKiAoeTEgLSB5MikgKyAzICogKHkzIC0geTApLFxuXHRcdFx0YnkgPSA2ICogKHkwICsgeTIpIC0gMTIgKiB5MSxcblx0XHRcdGN5ID0gMyAqICh5MSAtIHkwKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbih0KSB7XG5cdFx0XHR2YXIgZHggPSAoYXggKiB0ICsgYngpICogdCArIGN4LFxuXHRcdFx0XHRkeSA9IChheSAqIHQgKyBieSkgKiB0ICsgY3k7XG5cdFx0XHRyZXR1cm4gTWF0aC5zcXJ0KGR4ICogZHggKyBkeSAqIGR5KTtcblx0XHR9O1xuXHR9XG5cblx0ZnVuY3Rpb24gZ2V0SXRlcmF0aW9ucyhhLCBiKSB7XG5cdFx0cmV0dXJuIE1hdGgubWF4KDIsIE1hdGgubWluKDE2LCBNYXRoLmNlaWwoTWF0aC5hYnMoYiAtIGEpICogMzIpKSk7XG5cdH1cblxuXHRmdW5jdGlvbiBldmFsdWF0ZSh2LCB0LCB0eXBlLCBub3JtYWxpemVkKSB7XG5cdFx0aWYgKHQgPT0gbnVsbCB8fCB0IDwgMCB8fCB0ID4gMSlcblx0XHRcdHJldHVybiBudWxsO1xuXHRcdHZhciB4MCA9IHZbMF0sIHkwID0gdlsxXSxcblx0XHRcdHgxID0gdlsyXSwgeTEgPSB2WzNdLFxuXHRcdFx0eDIgPSB2WzRdLCB5MiA9IHZbNV0sXG5cdFx0XHR4MyA9IHZbNl0sIHkzID0gdls3XSxcblx0XHRcdGlzWmVybyA9IE51bWVyaWNhbC5pc1plcm87XG5cdFx0aWYgKGlzWmVybyh4MSAtIHgwKSAmJiBpc1plcm8oeTEgLSB5MCkpIHtcblx0XHRcdHgxID0geDA7XG5cdFx0XHR5MSA9IHkwO1xuXHRcdH1cblx0XHRpZiAoaXNaZXJvKHgyIC0geDMpICYmIGlzWmVybyh5MiAtIHkzKSkge1xuXHRcdFx0eDIgPSB4Mztcblx0XHRcdHkyID0geTM7XG5cdFx0fVxuXHRcdHZhciBjeCA9IDMgKiAoeDEgLSB4MCksXG5cdFx0XHRieCA9IDMgKiAoeDIgLSB4MSkgLSBjeCxcblx0XHRcdGF4ID0geDMgLSB4MCAtIGN4IC0gYngsXG5cdFx0XHRjeSA9IDMgKiAoeTEgLSB5MCksXG5cdFx0XHRieSA9IDMgKiAoeTIgLSB5MSkgLSBjeSxcblx0XHRcdGF5ID0geTMgLSB5MCAtIGN5IC0gYnksXG5cdFx0XHR4LCB5O1xuXHRcdGlmICh0eXBlID09PSAwKSB7XG5cdFx0XHR4ID0gdCA9PT0gMCA/IHgwIDogdCA9PT0gMSA/IHgzXG5cdFx0XHRcdFx0OiAoKGF4ICogdCArIGJ4KSAqIHQgKyBjeCkgKiB0ICsgeDA7XG5cdFx0XHR5ID0gdCA9PT0gMCA/IHkwIDogdCA9PT0gMSA/IHkzXG5cdFx0XHRcdFx0OiAoKGF5ICogdCArIGJ5KSAqIHQgKyBjeSkgKiB0ICsgeTA7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHZhciB0TWluID0gMWUtOCxcblx0XHRcdFx0dE1heCA9IDEgLSB0TWluO1xuXHRcdFx0aWYgKHQgPCB0TWluKSB7XG5cdFx0XHRcdHggPSBjeDtcblx0XHRcdFx0eSA9IGN5O1xuXHRcdFx0fSBlbHNlIGlmICh0ID4gdE1heCkge1xuXHRcdFx0XHR4ID0gMyAqICh4MyAtIHgyKTtcblx0XHRcdFx0eSA9IDMgKiAoeTMgLSB5Mik7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR4ID0gKDMgKiBheCAqIHQgKyAyICogYngpICogdCArIGN4O1xuXHRcdFx0XHR5ID0gKDMgKiBheSAqIHQgKyAyICogYnkpICogdCArIGN5O1xuXHRcdFx0fVxuXHRcdFx0aWYgKG5vcm1hbGl6ZWQpIHtcblx0XHRcdFx0aWYgKHggPT09IDAgJiYgeSA9PT0gMCAmJiAodCA8IHRNaW4gfHwgdCA+IHRNYXgpKSB7XG5cdFx0XHRcdFx0eCA9IHgyIC0geDE7XG5cdFx0XHRcdFx0eSA9IHkyIC0geTE7XG5cdFx0XHRcdH1cblx0XHRcdFx0dmFyIGxlbiA9IE1hdGguc3FydCh4ICogeCArIHkgKiB5KTtcblx0XHRcdFx0aWYgKGxlbikge1xuXHRcdFx0XHRcdHggLz0gbGVuO1xuXHRcdFx0XHRcdHkgLz0gbGVuO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAodHlwZSA9PT0gMykge1xuXHRcdFx0XHR2YXIgeDIgPSA2ICogYXggKiB0ICsgMiAqIGJ4LFxuXHRcdFx0XHRcdHkyID0gNiAqIGF5ICogdCArIDIgKiBieSxcblx0XHRcdFx0XHRkID0gTWF0aC5wb3coeCAqIHggKyB5ICogeSwgMyAvIDIpO1xuXHRcdFx0XHR4ID0gZCAhPT0gMCA/ICh4ICogeTIgLSB5ICogeDIpIC8gZCA6IDA7XG5cdFx0XHRcdHkgPSAwO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gdHlwZSA9PT0gMiA/IG5ldyBQb2ludCh5LCAteCkgOiBuZXcgUG9pbnQoeCwgeSk7XG5cdH1cblxuXHRyZXR1cm4geyBzdGF0aWNzOiB7XG5cblx0XHRjbGFzc2lmeTogZnVuY3Rpb24odikge1xuXG5cdFx0XHR2YXIgeDAgPSB2WzBdLCB5MCA9IHZbMV0sXG5cdFx0XHRcdHgxID0gdlsyXSwgeTEgPSB2WzNdLFxuXHRcdFx0XHR4MiA9IHZbNF0sIHkyID0gdls1XSxcblx0XHRcdFx0eDMgPSB2WzZdLCB5MyA9IHZbN10sXG5cdFx0XHRcdGExID0geDAgKiAoeTMgLSB5MikgKyB5MCAqICh4MiAtIHgzKSArIHgzICogeTIgLSB5MyAqIHgyLFxuXHRcdFx0XHRhMiA9IHgxICogKHkwIC0geTMpICsgeTEgKiAoeDMgLSB4MCkgKyB4MCAqIHkzIC0geTAgKiB4Myxcblx0XHRcdFx0YTMgPSB4MiAqICh5MSAtIHkwKSArIHkyICogKHgwIC0geDEpICsgeDEgKiB5MCAtIHkxICogeDAsXG5cdFx0XHRcdGQzID0gMyAqIGEzLFxuXHRcdFx0XHRkMiA9IGQzIC0gYTIsXG5cdFx0XHRcdGQxID0gZDIgLSBhMiArIGExLFxuXHRcdFx0XHRsID0gTWF0aC5zcXJ0KGQxICogZDEgKyBkMiAqIGQyICsgZDMgKiBkMyksXG5cdFx0XHRcdHMgPSBsICE9PSAwID8gMSAvIGwgOiAwLFxuXHRcdFx0XHRpc1plcm8gPSBOdW1lcmljYWwuaXNaZXJvLFxuXHRcdFx0XHRzZXJwZW50aW5lID0gJ3NlcnBlbnRpbmUnO1xuXHRcdFx0ZDEgKj0gcztcblx0XHRcdGQyICo9IHM7XG5cdFx0XHRkMyAqPSBzO1xuXG5cdFx0XHRmdW5jdGlvbiB0eXBlKHR5cGUsIHQxLCB0Mikge1xuXHRcdFx0XHR2YXIgaGFzUm9vdHMgPSB0MSAhPT0gdW5kZWZpbmVkLFxuXHRcdFx0XHRcdHQxT2sgPSBoYXNSb290cyAmJiB0MSA+IDAgJiYgdDEgPCAxLFxuXHRcdFx0XHRcdHQyT2sgPSBoYXNSb290cyAmJiB0MiA+IDAgJiYgdDIgPCAxO1xuXHRcdFx0XHRpZiAoaGFzUm9vdHMgJiYgKCEodDFPayB8fCB0Mk9rKVxuXHRcdFx0XHRcdFx0fHwgdHlwZSA9PT0gJ2xvb3AnICYmICEodDFPayAmJiB0Mk9rKSkpIHtcblx0XHRcdFx0XHR0eXBlID0gJ2FyY2gnO1xuXHRcdFx0XHRcdHQxT2sgPSB0Mk9rID0gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRcdHJvb3RzOiB0MU9rIHx8IHQyT2tcblx0XHRcdFx0XHRcdFx0PyB0MU9rICYmIHQyT2tcblx0XHRcdFx0XHRcdFx0XHQ/IHQxIDwgdDIgPyBbdDEsIHQyXSA6IFt0MiwgdDFdXG5cdFx0XHRcdFx0XHRcdFx0OiBbdDFPayA/IHQxIDogdDJdXG5cdFx0XHRcdFx0XHRcdDogbnVsbFxuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoaXNaZXJvKGQxKSkge1xuXHRcdFx0XHRyZXR1cm4gaXNaZXJvKGQyKVxuXHRcdFx0XHRcdFx0PyB0eXBlKGlzWmVybyhkMykgPyAnbGluZScgOiAncXVhZHJhdGljJylcblx0XHRcdFx0XHRcdDogdHlwZShzZXJwZW50aW5lLCBkMyAvICgzICogZDIpKTtcblx0XHRcdH1cblx0XHRcdHZhciBkID0gMyAqIGQyICogZDIgLSA0ICogZDEgKiBkMztcblx0XHRcdGlmIChpc1plcm8oZCkpIHtcblx0XHRcdFx0cmV0dXJuIHR5cGUoJ2N1c3AnLCBkMiAvICgyICogZDEpKTtcblx0XHRcdH1cblx0XHRcdHZhciBmMSA9IGQgPiAwID8gTWF0aC5zcXJ0KGQgLyAzKSA6IE1hdGguc3FydCgtZCksXG5cdFx0XHRcdGYyID0gMiAqIGQxO1xuXHRcdFx0cmV0dXJuIHR5cGUoZCA+IDAgPyBzZXJwZW50aW5lIDogJ2xvb3AnLFxuXHRcdFx0XHRcdChkMiArIGYxKSAvIGYyLFxuXHRcdFx0XHRcdChkMiAtIGYxKSAvIGYyKTtcblx0XHR9LFxuXG5cdFx0Z2V0TGVuZ3RoOiBmdW5jdGlvbih2LCBhLCBiLCBkcykge1xuXHRcdFx0aWYgKGEgPT09IHVuZGVmaW5lZClcblx0XHRcdFx0YSA9IDA7XG5cdFx0XHRpZiAoYiA9PT0gdW5kZWZpbmVkKVxuXHRcdFx0XHRiID0gMTtcblx0XHRcdGlmIChDdXJ2ZS5pc1N0cmFpZ2h0KHYpKSB7XG5cdFx0XHRcdHZhciBjID0gdjtcblx0XHRcdFx0aWYgKGIgPCAxKSB7XG5cdFx0XHRcdFx0YyA9IEN1cnZlLnN1YmRpdmlkZShjLCBiKVswXTtcblx0XHRcdFx0XHRhIC89IGI7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKGEgPiAwKSB7XG5cdFx0XHRcdFx0YyA9IEN1cnZlLnN1YmRpdmlkZShjLCBhKVsxXTtcblx0XHRcdFx0fVxuXHRcdFx0XHR2YXIgZHggPSBjWzZdIC0gY1swXSxcblx0XHRcdFx0XHRkeSA9IGNbN10gLSBjWzFdO1xuXHRcdFx0XHRyZXR1cm4gTWF0aC5zcXJ0KGR4ICogZHggKyBkeSAqIGR5KTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBOdW1lcmljYWwuaW50ZWdyYXRlKGRzIHx8IGdldExlbmd0aEludGVncmFuZCh2KSwgYSwgYixcblx0XHRcdFx0XHRnZXRJdGVyYXRpb25zKGEsIGIpKTtcblx0XHR9LFxuXG5cdFx0Z2V0VGltZUF0OiBmdW5jdGlvbih2LCBvZmZzZXQsIHN0YXJ0KSB7XG5cdFx0XHRpZiAoc3RhcnQgPT09IHVuZGVmaW5lZClcblx0XHRcdFx0c3RhcnQgPSBvZmZzZXQgPCAwID8gMSA6IDA7XG5cdFx0XHRpZiAob2Zmc2V0ID09PSAwKVxuXHRcdFx0XHRyZXR1cm4gc3RhcnQ7XG5cdFx0XHR2YXIgYWJzID0gTWF0aC5hYnMsXG5cdFx0XHRcdGVwc2lsb24gPSAxZS0xMixcblx0XHRcdFx0Zm9yd2FyZCA9IG9mZnNldCA+IDAsXG5cdFx0XHRcdGEgPSBmb3J3YXJkID8gc3RhcnQgOiAwLFxuXHRcdFx0XHRiID0gZm9yd2FyZCA/IDEgOiBzdGFydCxcblx0XHRcdFx0ZHMgPSBnZXRMZW5ndGhJbnRlZ3JhbmQodiksXG5cdFx0XHRcdHJhbmdlTGVuZ3RoID0gQ3VydmUuZ2V0TGVuZ3RoKHYsIGEsIGIsIGRzKSxcblx0XHRcdFx0ZGlmZiA9IGFicyhvZmZzZXQpIC0gcmFuZ2VMZW5ndGg7XG5cdFx0XHRpZiAoYWJzKGRpZmYpIDwgZXBzaWxvbikge1xuXHRcdFx0XHRyZXR1cm4gZm9yd2FyZCA/IGIgOiBhO1xuXHRcdFx0fSBlbHNlIGlmIChkaWZmID4gZXBzaWxvbikge1xuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRcdH1cblx0XHRcdHZhciBndWVzcyA9IG9mZnNldCAvIHJhbmdlTGVuZ3RoLFxuXHRcdFx0XHRsZW5ndGggPSAwO1xuXHRcdFx0ZnVuY3Rpb24gZih0KSB7XG5cdFx0XHRcdGxlbmd0aCArPSBOdW1lcmljYWwuaW50ZWdyYXRlKGRzLCBzdGFydCwgdCxcblx0XHRcdFx0XHRcdGdldEl0ZXJhdGlvbnMoc3RhcnQsIHQpKTtcblx0XHRcdFx0c3RhcnQgPSB0O1xuXHRcdFx0XHRyZXR1cm4gbGVuZ3RoIC0gb2Zmc2V0O1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIE51bWVyaWNhbC5maW5kUm9vdChmLCBkcywgc3RhcnQgKyBndWVzcywgYSwgYiwgMzIsXG5cdFx0XHRcdFx0MWUtMTIpO1xuXHRcdH0sXG5cblx0XHRnZXRQb2ludDogZnVuY3Rpb24odiwgdCkge1xuXHRcdFx0cmV0dXJuIGV2YWx1YXRlKHYsIHQsIDAsIGZhbHNlKTtcblx0XHR9LFxuXG5cdFx0Z2V0VGFuZ2VudDogZnVuY3Rpb24odiwgdCkge1xuXHRcdFx0cmV0dXJuIGV2YWx1YXRlKHYsIHQsIDEsIHRydWUpO1xuXHRcdH0sXG5cblx0XHRnZXRXZWlnaHRlZFRhbmdlbnQ6IGZ1bmN0aW9uKHYsIHQpIHtcblx0XHRcdHJldHVybiBldmFsdWF0ZSh2LCB0LCAxLCBmYWxzZSk7XG5cdFx0fSxcblxuXHRcdGdldE5vcm1hbDogZnVuY3Rpb24odiwgdCkge1xuXHRcdFx0cmV0dXJuIGV2YWx1YXRlKHYsIHQsIDIsIHRydWUpO1xuXHRcdH0sXG5cblx0XHRnZXRXZWlnaHRlZE5vcm1hbDogZnVuY3Rpb24odiwgdCkge1xuXHRcdFx0cmV0dXJuIGV2YWx1YXRlKHYsIHQsIDIsIGZhbHNlKTtcblx0XHR9LFxuXG5cdFx0Z2V0Q3VydmF0dXJlOiBmdW5jdGlvbih2LCB0KSB7XG5cdFx0XHRyZXR1cm4gZXZhbHVhdGUodiwgdCwgMywgZmFsc2UpLng7XG5cdFx0fSxcblxuXHRcdGdldFBlYWtzOiBmdW5jdGlvbih2KSB7XG5cdFx0XHR2YXIgeDAgPSB2WzBdLCB5MCA9IHZbMV0sXG5cdFx0XHRcdHgxID0gdlsyXSwgeTEgPSB2WzNdLFxuXHRcdFx0XHR4MiA9IHZbNF0sIHkyID0gdls1XSxcblx0XHRcdFx0eDMgPSB2WzZdLCB5MyA9IHZbN10sXG5cdFx0XHRcdGF4ID0gICAgIC14MCArIDMgKiB4MSAtIDMgKiB4MiArIHgzLFxuXHRcdFx0XHRieCA9ICAzICogeDAgLSA2ICogeDEgKyAzICogeDIsXG5cdFx0XHRcdGN4ID0gLTMgKiB4MCArIDMgKiB4MSxcblx0XHRcdFx0YXkgPSAgICAgLXkwICsgMyAqIHkxIC0gMyAqIHkyICsgeTMsXG5cdFx0XHRcdGJ5ID0gIDMgKiB5MCAtIDYgKiB5MSArIDMgKiB5Mixcblx0XHRcdFx0Y3kgPSAtMyAqIHkwICsgMyAqIHkxLFxuXHRcdFx0XHR0TWluID0gMWUtOCxcblx0XHRcdFx0dE1heCA9IDEgLSB0TWluLFxuXHRcdFx0XHRyb290cyA9IFtdO1xuXHRcdFx0TnVtZXJpY2FsLnNvbHZlQ3ViaWMoXG5cdFx0XHRcdFx0OSAqIChheCAqIGF4ICsgYXkgKiBheSksXG5cdFx0XHRcdFx0OSAqIChheCAqIGJ4ICsgYnkgKiBheSksXG5cdFx0XHRcdFx0MiAqIChieCAqIGJ4ICsgYnkgKiBieSkgKyAzICogKGN4ICogYXggKyBjeSAqIGF5KSxcblx0XHRcdFx0XHQoY3ggKiBieCArIGJ5ICogY3kpLFxuXHRcdFx0XHRcdHJvb3RzLCB0TWluLCB0TWF4KTtcblx0XHRcdHJldHVybiByb290cy5zb3J0KCk7XG5cdFx0fVxuXHR9fTtcbn0sXG5uZXcgZnVuY3Rpb24oKSB7XG5cblx0ZnVuY3Rpb24gYWRkTG9jYXRpb24obG9jYXRpb25zLCBpbmNsdWRlLCBjMSwgdDEsIGMyLCB0Miwgb3ZlcmxhcCkge1xuXHRcdHZhciBleGNsdWRlU3RhcnQgPSAhb3ZlcmxhcCAmJiBjMS5nZXRQcmV2aW91cygpID09PSBjMixcblx0XHRcdGV4Y2x1ZGVFbmQgPSAhb3ZlcmxhcCAmJiBjMSAhPT0gYzIgJiYgYzEuZ2V0TmV4dCgpID09PSBjMixcblx0XHRcdHRNaW4gPSAxZS04LFxuXHRcdFx0dE1heCA9IDEgLSB0TWluO1xuXHRcdGlmICh0MSAhPT0gbnVsbCAmJiB0MSA+PSAoZXhjbHVkZVN0YXJ0ID8gdE1pbiA6IDApICYmXG5cdFx0XHR0MSA8PSAoZXhjbHVkZUVuZCA/IHRNYXggOiAxKSkge1xuXHRcdFx0aWYgKHQyICE9PSBudWxsICYmIHQyID49IChleGNsdWRlRW5kID8gdE1pbiA6IDApICYmXG5cdFx0XHRcdHQyIDw9IChleGNsdWRlU3RhcnQgPyB0TWF4IDogMSkpIHtcblx0XHRcdFx0dmFyIGxvYzEgPSBuZXcgQ3VydmVMb2NhdGlvbihjMSwgdDEsIG51bGwsIG92ZXJsYXApLFxuXHRcdFx0XHRcdGxvYzIgPSBuZXcgQ3VydmVMb2NhdGlvbihjMiwgdDIsIG51bGwsIG92ZXJsYXApO1xuXHRcdFx0XHRsb2MxLl9pbnRlcnNlY3Rpb24gPSBsb2MyO1xuXHRcdFx0XHRsb2MyLl9pbnRlcnNlY3Rpb24gPSBsb2MxO1xuXHRcdFx0XHRpZiAoIWluY2x1ZGUgfHwgaW5jbHVkZShsb2MxKSkge1xuXHRcdFx0XHRcdEN1cnZlTG9jYXRpb24uaW5zZXJ0KGxvY2F0aW9ucywgbG9jMSwgdHJ1ZSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRmdW5jdGlvbiBhZGRDdXJ2ZUludGVyc2VjdGlvbnModjEsIHYyLCBjMSwgYzIsIGxvY2F0aW9ucywgaW5jbHVkZSwgZmxpcCxcblx0XHRcdHJlY3Vyc2lvbiwgY2FsbHMsIHRNaW4sIHRNYXgsIHVNaW4sIHVNYXgpIHtcblx0XHRpZiAoKytjYWxscyA+PSA0MDk2IHx8ICsrcmVjdXJzaW9uID49IDQwKVxuXHRcdFx0cmV0dXJuIGNhbGxzO1xuXHRcdHZhciBmYXRMaW5lRXBzaWxvbiA9IDFlLTksXG5cdFx0XHRxMHggPSB2MlswXSwgcTB5ID0gdjJbMV0sIHEzeCA9IHYyWzZdLCBxM3kgPSB2Mls3XSxcblx0XHRcdGdldFNpZ25lZERpc3RhbmNlID0gTGluZS5nZXRTaWduZWREaXN0YW5jZSxcblx0XHRcdGQxID0gZ2V0U2lnbmVkRGlzdGFuY2UocTB4LCBxMHksIHEzeCwgcTN5LCB2MlsyXSwgdjJbM10pLFxuXHRcdFx0ZDIgPSBnZXRTaWduZWREaXN0YW5jZShxMHgsIHEweSwgcTN4LCBxM3ksIHYyWzRdLCB2Mls1XSksXG5cdFx0XHRmYWN0b3IgPSBkMSAqIGQyID4gMCA/IDMgLyA0IDogNCAvIDksXG5cdFx0XHRkTWluID0gZmFjdG9yICogTWF0aC5taW4oMCwgZDEsIGQyKSxcblx0XHRcdGRNYXggPSBmYWN0b3IgKiBNYXRoLm1heCgwLCBkMSwgZDIpLFxuXHRcdFx0ZHAwID0gZ2V0U2lnbmVkRGlzdGFuY2UocTB4LCBxMHksIHEzeCwgcTN5LCB2MVswXSwgdjFbMV0pLFxuXHRcdFx0ZHAxID0gZ2V0U2lnbmVkRGlzdGFuY2UocTB4LCBxMHksIHEzeCwgcTN5LCB2MVsyXSwgdjFbM10pLFxuXHRcdFx0ZHAyID0gZ2V0U2lnbmVkRGlzdGFuY2UocTB4LCBxMHksIHEzeCwgcTN5LCB2MVs0XSwgdjFbNV0pLFxuXHRcdFx0ZHAzID0gZ2V0U2lnbmVkRGlzdGFuY2UocTB4LCBxMHksIHEzeCwgcTN5LCB2MVs2XSwgdjFbN10pLFxuXHRcdFx0aHVsbCA9IGdldENvbnZleEh1bGwoZHAwLCBkcDEsIGRwMiwgZHAzKSxcblx0XHRcdHRvcCA9IGh1bGxbMF0sXG5cdFx0XHRib3R0b20gPSBodWxsWzFdLFxuXHRcdFx0dE1pbkNsaXAsXG5cdFx0XHR0TWF4Q2xpcDtcblx0XHRpZiAoZDEgPT09IDAgJiYgZDIgPT09IDBcblx0XHRcdFx0JiYgZHAwID09PSAwICYmIGRwMSA9PT0gMCAmJiBkcDIgPT09IDAgJiYgZHAzID09PSAwXG5cdFx0XHR8fCAodE1pbkNsaXAgPSBjbGlwQ29udmV4SHVsbCh0b3AsIGJvdHRvbSwgZE1pbiwgZE1heCkpID09IG51bGxcblx0XHRcdHx8ICh0TWF4Q2xpcCA9IGNsaXBDb252ZXhIdWxsKHRvcC5yZXZlcnNlKCksIGJvdHRvbS5yZXZlcnNlKCksXG5cdFx0XHRcdGRNaW4sIGRNYXgpKSA9PSBudWxsKVxuXHRcdFx0cmV0dXJuIGNhbGxzO1xuXHRcdHZhciB0TWluTmV3ID0gdE1pbiArICh0TWF4IC0gdE1pbikgKiB0TWluQ2xpcCxcblx0XHRcdHRNYXhOZXcgPSB0TWluICsgKHRNYXggLSB0TWluKSAqIHRNYXhDbGlwO1xuXHRcdGlmIChNYXRoLm1heCh1TWF4IC0gdU1pbiwgdE1heE5ldyAtIHRNaW5OZXcpIDwgZmF0TGluZUVwc2lsb24pIHtcblx0XHRcdHZhciB0ID0gKHRNaW5OZXcgKyB0TWF4TmV3KSAvIDIsXG5cdFx0XHRcdHUgPSAodU1pbiArIHVNYXgpIC8gMjtcblx0XHRcdGFkZExvY2F0aW9uKGxvY2F0aW9ucywgaW5jbHVkZSxcblx0XHRcdFx0XHRmbGlwID8gYzIgOiBjMSwgZmxpcCA/IHUgOiB0LFxuXHRcdFx0XHRcdGZsaXAgPyBjMSA6IGMyLCBmbGlwID8gdCA6IHUpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR2MSA9IEN1cnZlLmdldFBhcnQodjEsIHRNaW5DbGlwLCB0TWF4Q2xpcCk7XG5cdFx0XHRpZiAodE1heENsaXAgLSB0TWluQ2xpcCA+IDAuOCkge1xuXHRcdFx0XHRpZiAodE1heE5ldyAtIHRNaW5OZXcgPiB1TWF4IC0gdU1pbikge1xuXHRcdFx0XHRcdHZhciBwYXJ0cyA9IEN1cnZlLnN1YmRpdmlkZSh2MSwgMC41KSxcblx0XHRcdFx0XHRcdHQgPSAodE1pbk5ldyArIHRNYXhOZXcpIC8gMjtcblx0XHRcdFx0XHRjYWxscyA9IGFkZEN1cnZlSW50ZXJzZWN0aW9ucyhcblx0XHRcdFx0XHRcdFx0djIsIHBhcnRzWzBdLCBjMiwgYzEsIGxvY2F0aW9ucywgaW5jbHVkZSwgIWZsaXAsXG5cdFx0XHRcdFx0XHRcdHJlY3Vyc2lvbiwgY2FsbHMsIHVNaW4sIHVNYXgsIHRNaW5OZXcsIHQpO1xuXHRcdFx0XHRcdGNhbGxzID0gYWRkQ3VydmVJbnRlcnNlY3Rpb25zKFxuXHRcdFx0XHRcdFx0XHR2MiwgcGFydHNbMV0sIGMyLCBjMSwgbG9jYXRpb25zLCBpbmNsdWRlLCAhZmxpcCxcblx0XHRcdFx0XHRcdFx0cmVjdXJzaW9uLCBjYWxscywgdU1pbiwgdU1heCwgdCwgdE1heE5ldyk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dmFyIHBhcnRzID0gQ3VydmUuc3ViZGl2aWRlKHYyLCAwLjUpLFxuXHRcdFx0XHRcdFx0dSA9ICh1TWluICsgdU1heCkgLyAyO1xuXHRcdFx0XHRcdGNhbGxzID0gYWRkQ3VydmVJbnRlcnNlY3Rpb25zKFxuXHRcdFx0XHRcdFx0XHRwYXJ0c1swXSwgdjEsIGMyLCBjMSwgbG9jYXRpb25zLCBpbmNsdWRlLCAhZmxpcCxcblx0XHRcdFx0XHRcdFx0cmVjdXJzaW9uLCBjYWxscywgdU1pbiwgdSwgdE1pbk5ldywgdE1heE5ldyk7XG5cdFx0XHRcdFx0Y2FsbHMgPSBhZGRDdXJ2ZUludGVyc2VjdGlvbnMoXG5cdFx0XHRcdFx0XHRcdHBhcnRzWzFdLCB2MSwgYzIsIGMxLCBsb2NhdGlvbnMsIGluY2x1ZGUsICFmbGlwLFxuXHRcdFx0XHRcdFx0XHRyZWN1cnNpb24sIGNhbGxzLCB1LCB1TWF4LCB0TWluTmV3LCB0TWF4TmV3KTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aWYgKHVNYXggLSB1TWluID49IGZhdExpbmVFcHNpbG9uKSB7XG5cdFx0XHRcdFx0Y2FsbHMgPSBhZGRDdXJ2ZUludGVyc2VjdGlvbnMoXG5cdFx0XHRcdFx0XHRcdHYyLCB2MSwgYzIsIGMxLCBsb2NhdGlvbnMsIGluY2x1ZGUsICFmbGlwLFxuXHRcdFx0XHRcdFx0XHRyZWN1cnNpb24sIGNhbGxzLCB1TWluLCB1TWF4LCB0TWluTmV3LCB0TWF4TmV3KTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRjYWxscyA9IGFkZEN1cnZlSW50ZXJzZWN0aW9ucyhcblx0XHRcdFx0XHRcdFx0djEsIHYyLCBjMSwgYzIsIGxvY2F0aW9ucywgaW5jbHVkZSwgZmxpcCxcblx0XHRcdFx0XHRcdFx0cmVjdXJzaW9uLCBjYWxscywgdE1pbk5ldywgdE1heE5ldywgdU1pbiwgdU1heCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIGNhbGxzO1xuXHR9XG5cblx0ZnVuY3Rpb24gZ2V0Q29udmV4SHVsbChkcTAsIGRxMSwgZHEyLCBkcTMpIHtcblx0XHR2YXIgcDAgPSBbIDAsIGRxMCBdLFxuXHRcdFx0cDEgPSBbIDEgLyAzLCBkcTEgXSxcblx0XHRcdHAyID0gWyAyIC8gMywgZHEyIF0sXG5cdFx0XHRwMyA9IFsgMSwgZHEzIF0sXG5cdFx0XHRkaXN0MSA9IGRxMSAtICgyICogZHEwICsgZHEzKSAvIDMsXG5cdFx0XHRkaXN0MiA9IGRxMiAtIChkcTAgKyAyICogZHEzKSAvIDMsXG5cdFx0XHRodWxsO1xuXHRcdGlmIChkaXN0MSAqIGRpc3QyIDwgMCkge1xuXHRcdFx0aHVsbCA9IFtbcDAsIHAxLCBwM10sIFtwMCwgcDIsIHAzXV07XG5cdFx0fSBlbHNlIHtcblx0XHRcdHZhciBkaXN0UmF0aW8gPSBkaXN0MSAvIGRpc3QyO1xuXHRcdFx0aHVsbCA9IFtcblx0XHRcdFx0ZGlzdFJhdGlvID49IDIgPyBbcDAsIHAxLCBwM11cblx0XHRcdFx0OiBkaXN0UmF0aW8gPD0gMC41ID8gW3AwLCBwMiwgcDNdXG5cdFx0XHRcdDogW3AwLCBwMSwgcDIsIHAzXSxcblx0XHRcdFx0W3AwLCBwM11cblx0XHRcdF07XG5cdFx0fVxuXHRcdHJldHVybiAoZGlzdDEgfHwgZGlzdDIpIDwgMCA/IGh1bGwucmV2ZXJzZSgpIDogaHVsbDtcblx0fVxuXG5cdGZ1bmN0aW9uIGNsaXBDb252ZXhIdWxsKGh1bGxUb3AsIGh1bGxCb3R0b20sIGRNaW4sIGRNYXgpIHtcblx0XHRpZiAoaHVsbFRvcFswXVsxXSA8IGRNaW4pIHtcblx0XHRcdHJldHVybiBjbGlwQ29udmV4SHVsbFBhcnQoaHVsbFRvcCwgdHJ1ZSwgZE1pbik7XG5cdFx0fSBlbHNlIGlmIChodWxsQm90dG9tWzBdWzFdID4gZE1heCkge1xuXHRcdFx0cmV0dXJuIGNsaXBDb252ZXhIdWxsUGFydChodWxsQm90dG9tLCBmYWxzZSwgZE1heCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJldHVybiBodWxsVG9wWzBdWzBdO1xuXHRcdH1cblx0fVxuXG5cdGZ1bmN0aW9uIGNsaXBDb252ZXhIdWxsUGFydChwYXJ0LCB0b3AsIHRocmVzaG9sZCkge1xuXHRcdHZhciBweCA9IHBhcnRbMF1bMF0sXG5cdFx0XHRweSA9IHBhcnRbMF1bMV07XG5cdFx0Zm9yICh2YXIgaSA9IDEsIGwgPSBwYXJ0Lmxlbmd0aDsgaSA8IGw7IGkrKykge1xuXHRcdFx0dmFyIHF4ID0gcGFydFtpXVswXSxcblx0XHRcdFx0cXkgPSBwYXJ0W2ldWzFdO1xuXHRcdFx0aWYgKHRvcCA/IHF5ID49IHRocmVzaG9sZCA6IHF5IDw9IHRocmVzaG9sZCkge1xuXHRcdFx0XHRyZXR1cm4gcXkgPT09IHRocmVzaG9sZCA/IHF4XG5cdFx0XHRcdFx0XHQ6IHB4ICsgKHRocmVzaG9sZCAtIHB5KSAqIChxeCAtIHB4KSAvIChxeSAtIHB5KTtcblx0XHRcdH1cblx0XHRcdHB4ID0gcXg7XG5cdFx0XHRweSA9IHF5O1xuXHRcdH1cblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdGZ1bmN0aW9uIGdldEN1cnZlTGluZUludGVyc2VjdGlvbnModiwgcHgsIHB5LCB2eCwgdnkpIHtcblx0XHR2YXIgaXNaZXJvID0gTnVtZXJpY2FsLmlzWmVybztcblx0XHRpZiAoaXNaZXJvKHZ4KSAmJiBpc1plcm8odnkpKSB7XG5cdFx0XHR2YXIgdCA9IEN1cnZlLmdldFRpbWVPZih2LCBuZXcgUG9pbnQocHgsIHB5KSk7XG5cdFx0XHRyZXR1cm4gdCA9PT0gbnVsbCA/IFtdIDogW3RdO1xuXHRcdH1cblx0XHR2YXIgYW5nbGUgPSBNYXRoLmF0YW4yKC12eSwgdngpLFxuXHRcdFx0c2luID0gTWF0aC5zaW4oYW5nbGUpLFxuXHRcdFx0Y29zID0gTWF0aC5jb3MoYW5nbGUpLFxuXHRcdFx0cnYgPSBbXSxcblx0XHRcdHJvb3RzID0gW107XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCA4OyBpICs9IDIpIHtcblx0XHRcdHZhciB4ID0gdltpXSAtIHB4LFxuXHRcdFx0XHR5ID0gdltpICsgMV0gLSBweTtcblx0XHRcdHJ2LnB1c2goXG5cdFx0XHRcdHggKiBjb3MgLSB5ICogc2luLFxuXHRcdFx0XHR4ICogc2luICsgeSAqIGNvcyk7XG5cdFx0fVxuXHRcdEN1cnZlLnNvbHZlQ3ViaWMocnYsIDEsIDAsIHJvb3RzLCAwLCAxKTtcblx0XHRyZXR1cm4gcm9vdHM7XG5cdH1cblxuXHRmdW5jdGlvbiBhZGRDdXJ2ZUxpbmVJbnRlcnNlY3Rpb25zKHYxLCB2MiwgYzEsIGMyLCBsb2NhdGlvbnMsIGluY2x1ZGUsXG5cdFx0XHRmbGlwKSB7XG5cdFx0dmFyIHgxID0gdjJbMF0sIHkxID0gdjJbMV0sXG5cdFx0XHR4MiA9IHYyWzZdLCB5MiA9IHYyWzddLFxuXHRcdFx0cm9vdHMgPSBnZXRDdXJ2ZUxpbmVJbnRlcnNlY3Rpb25zKHYxLCB4MSwgeTEsIHgyIC0geDEsIHkyIC0geTEpO1xuXHRcdGZvciAodmFyIGkgPSAwLCBsID0gcm9vdHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG5cdFx0XHR2YXIgdDEgPSByb290c1tpXSxcblx0XHRcdFx0cDEgPSBDdXJ2ZS5nZXRQb2ludCh2MSwgdDEpLFxuXHRcdFx0XHR0MiA9IEN1cnZlLmdldFRpbWVPZih2MiwgcDEpO1xuXHRcdFx0aWYgKHQyICE9PSBudWxsKSB7XG5cdFx0XHRcdGFkZExvY2F0aW9uKGxvY2F0aW9ucywgaW5jbHVkZSxcblx0XHRcdFx0XHRcdGZsaXAgPyBjMiA6IGMxLCBmbGlwID8gdDIgOiB0MSxcblx0XHRcdFx0XHRcdGZsaXAgPyBjMSA6IGMyLCBmbGlwID8gdDEgOiB0Mik7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0ZnVuY3Rpb24gYWRkTGluZUludGVyc2VjdGlvbih2MSwgdjIsIGMxLCBjMiwgbG9jYXRpb25zLCBpbmNsdWRlKSB7XG5cdFx0dmFyIHB0ID0gTGluZS5pbnRlcnNlY3QoXG5cdFx0XHRcdHYxWzBdLCB2MVsxXSwgdjFbNl0sIHYxWzddLFxuXHRcdFx0XHR2MlswXSwgdjJbMV0sIHYyWzZdLCB2Mls3XSk7XG5cdFx0aWYgKHB0KSB7XG5cdFx0XHRhZGRMb2NhdGlvbihsb2NhdGlvbnMsIGluY2x1ZGUsXG5cdFx0XHRcdFx0YzEsIEN1cnZlLmdldFRpbWVPZih2MSwgcHQpLFxuXHRcdFx0XHRcdGMyLCBDdXJ2ZS5nZXRUaW1lT2YodjIsIHB0KSk7XG5cdFx0fVxuXHR9XG5cblx0ZnVuY3Rpb24gZ2V0Q3VydmVJbnRlcnNlY3Rpb25zKHYxLCB2MiwgYzEsIGMyLCBsb2NhdGlvbnMsIGluY2x1ZGUpIHtcblx0XHR2YXIgZXBzaWxvbiA9IDFlLTEyLFxuXHRcdFx0bWluID0gTWF0aC5taW4sXG5cdFx0XHRtYXggPSBNYXRoLm1heDtcblxuXHRcdGlmIChtYXgodjFbMF0sIHYxWzJdLCB2MVs0XSwgdjFbNl0pICsgZXBzaWxvbiA+XG5cdFx0XHRtaW4odjJbMF0sIHYyWzJdLCB2Mls0XSwgdjJbNl0pICYmXG5cdFx0XHRtaW4odjFbMF0sIHYxWzJdLCB2MVs0XSwgdjFbNl0pIC0gZXBzaWxvbiA8XG5cdFx0XHRtYXgodjJbMF0sIHYyWzJdLCB2Mls0XSwgdjJbNl0pICYmXG5cdFx0XHRtYXgodjFbMV0sIHYxWzNdLCB2MVs1XSwgdjFbN10pICsgZXBzaWxvbiA+XG5cdFx0XHRtaW4odjJbMV0sIHYyWzNdLCB2Mls1XSwgdjJbN10pICYmXG5cdFx0XHRtaW4odjFbMV0sIHYxWzNdLCB2MVs1XSwgdjFbN10pIC0gZXBzaWxvbiA8XG5cdFx0XHRtYXgodjJbMV0sIHYyWzNdLCB2Mls1XSwgdjJbN10pKSB7XG5cdFx0XHR2YXIgb3ZlcmxhcHMgPSBnZXRPdmVybGFwcyh2MSwgdjIpO1xuXHRcdFx0aWYgKG92ZXJsYXBzKSB7XG5cdFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgMjsgaSsrKSB7XG5cdFx0XHRcdFx0dmFyIG92ZXJsYXAgPSBvdmVybGFwc1tpXTtcblx0XHRcdFx0XHRhZGRMb2NhdGlvbihsb2NhdGlvbnMsIGluY2x1ZGUsXG5cdFx0XHRcdFx0XHRcdGMxLCBvdmVybGFwWzBdLFxuXHRcdFx0XHRcdFx0XHRjMiwgb3ZlcmxhcFsxXSwgdHJ1ZSk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHZhciBzdHJhaWdodDEgPSBDdXJ2ZS5pc1N0cmFpZ2h0KHYxKSxcblx0XHRcdFx0XHRzdHJhaWdodDIgPSBDdXJ2ZS5pc1N0cmFpZ2h0KHYyKSxcblx0XHRcdFx0XHRzdHJhaWdodCA9IHN0cmFpZ2h0MSAmJiBzdHJhaWdodDIsXG5cdFx0XHRcdFx0ZmxpcCA9IHN0cmFpZ2h0MSAmJiAhc3RyYWlnaHQyLFxuXHRcdFx0XHRcdGJlZm9yZSA9IGxvY2F0aW9ucy5sZW5ndGg7XG5cdFx0XHRcdChzdHJhaWdodFxuXHRcdFx0XHRcdD8gYWRkTGluZUludGVyc2VjdGlvblxuXHRcdFx0XHRcdDogc3RyYWlnaHQxIHx8IHN0cmFpZ2h0MlxuXHRcdFx0XHRcdFx0PyBhZGRDdXJ2ZUxpbmVJbnRlcnNlY3Rpb25zXG5cdFx0XHRcdFx0XHQ6IGFkZEN1cnZlSW50ZXJzZWN0aW9ucykoXG5cdFx0XHRcdFx0XHRcdGZsaXAgPyB2MiA6IHYxLCBmbGlwID8gdjEgOiB2Mixcblx0XHRcdFx0XHRcdFx0ZmxpcCA/IGMyIDogYzEsIGZsaXAgPyBjMSA6IGMyLFxuXHRcdFx0XHRcdFx0XHRsb2NhdGlvbnMsIGluY2x1ZGUsIGZsaXAsXG5cdFx0XHRcdFx0XHRcdDAsIDAsIDAsIDEsIDAsIDEpO1xuXHRcdFx0XHRpZiAoIXN0cmFpZ2h0IHx8IGxvY2F0aW9ucy5sZW5ndGggPT09IGJlZm9yZSkge1xuXHRcdFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgNDsgaSsrKSB7XG5cdFx0XHRcdFx0XHR2YXIgdDEgPSBpID4+IDEsXG5cdFx0XHRcdFx0XHRcdHQyID0gaSAmIDEsXG5cdFx0XHRcdFx0XHRcdGkxID0gdDEgKiA2LFxuXHRcdFx0XHRcdFx0XHRpMiA9IHQyICogNixcblx0XHRcdFx0XHRcdFx0cDEgPSBuZXcgUG9pbnQodjFbaTFdLCB2MVtpMSArIDFdKSxcblx0XHRcdFx0XHRcdFx0cDIgPSBuZXcgUG9pbnQodjJbaTJdLCB2MltpMiArIDFdKTtcblx0XHRcdFx0XHRcdGlmIChwMS5pc0Nsb3NlKHAyLCBlcHNpbG9uKSkge1xuXHRcdFx0XHRcdFx0XHRhZGRMb2NhdGlvbihsb2NhdGlvbnMsIGluY2x1ZGUsXG5cdFx0XHRcdFx0XHRcdFx0XHRjMSwgdDEsXG5cdFx0XHRcdFx0XHRcdFx0XHRjMiwgdDIpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gbG9jYXRpb25zO1xuXHR9XG5cblx0ZnVuY3Rpb24gZ2V0TG9vcEludGVyc2VjdGlvbih2MSwgYzEsIGxvY2F0aW9ucywgaW5jbHVkZSkge1xuXHRcdHZhciBpbmZvID0gQ3VydmUuY2xhc3NpZnkodjEpO1xuXHRcdGlmIChpbmZvLnR5cGUgPT09ICdsb29wJykge1xuXHRcdFx0dmFyIHJvb3RzID0gaW5mby5yb290cztcblx0XHRcdGFkZExvY2F0aW9uKGxvY2F0aW9ucywgaW5jbHVkZSxcblx0XHRcdFx0XHRjMSwgcm9vdHNbMF0sXG5cdFx0XHRcdFx0YzEsIHJvb3RzWzFdKTtcblx0XHR9XG5cdCAgcmV0dXJuIGxvY2F0aW9ucztcblx0fVxuXG5cdGZ1bmN0aW9uIGdldEludGVyc2VjdGlvbnMoY3VydmVzMSwgY3VydmVzMiwgaW5jbHVkZSwgbWF0cml4MSwgbWF0cml4Mixcblx0XHRcdF9yZXR1cm5GaXJzdCkge1xuXHRcdHZhciBzZWxmID0gIWN1cnZlczI7XG5cdFx0aWYgKHNlbGYpXG5cdFx0XHRjdXJ2ZXMyID0gY3VydmVzMTtcblx0XHR2YXIgbGVuZ3RoMSA9IGN1cnZlczEubGVuZ3RoLFxuXHRcdFx0bGVuZ3RoMiA9IGN1cnZlczIubGVuZ3RoLFxuXHRcdFx0dmFsdWVzMiA9IFtdLFxuXHRcdFx0YXJyYXlzID0gW10sXG5cdFx0XHRsb2NhdGlvbnMsXG5cdFx0XHRjdXJyZW50O1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoMjsgaSsrKVxuXHRcdFx0dmFsdWVzMltpXSA9IGN1cnZlczJbaV0uZ2V0VmFsdWVzKG1hdHJpeDIpO1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoMTsgaSsrKSB7XG5cdFx0XHR2YXIgY3VydmUxID0gY3VydmVzMVtpXSxcblx0XHRcdFx0dmFsdWVzMSA9IHNlbGYgPyB2YWx1ZXMyW2ldIDogY3VydmUxLmdldFZhbHVlcyhtYXRyaXgxKSxcblx0XHRcdFx0cGF0aDEgPSBjdXJ2ZTEuZ2V0UGF0aCgpO1xuXHRcdFx0aWYgKHBhdGgxICE9PSBjdXJyZW50KSB7XG5cdFx0XHRcdGN1cnJlbnQgPSBwYXRoMTtcblx0XHRcdFx0bG9jYXRpb25zID0gW107XG5cdFx0XHRcdGFycmF5cy5wdXNoKGxvY2F0aW9ucyk7XG5cdFx0XHR9XG5cdFx0XHRpZiAoc2VsZikge1xuXHRcdFx0XHRnZXRMb29wSW50ZXJzZWN0aW9uKHZhbHVlczEsIGN1cnZlMSwgbG9jYXRpb25zLCBpbmNsdWRlKTtcblx0XHRcdH1cblx0XHRcdGZvciAodmFyIGogPSBzZWxmID8gaSArIDEgOiAwOyBqIDwgbGVuZ3RoMjsgaisrKSB7XG5cdFx0XHRcdGlmIChfcmV0dXJuRmlyc3QgJiYgbG9jYXRpb25zLmxlbmd0aClcblx0XHRcdFx0XHRyZXR1cm4gbG9jYXRpb25zO1xuXHRcdFx0XHRnZXRDdXJ2ZUludGVyc2VjdGlvbnModmFsdWVzMSwgdmFsdWVzMltqXSwgY3VydmUxLCBjdXJ2ZXMyW2pdLFxuXHRcdFx0XHRcdFx0bG9jYXRpb25zLCBpbmNsdWRlKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0bG9jYXRpb25zID0gW107XG5cdFx0Zm9yICh2YXIgaSA9IDAsIGwgPSBhcnJheXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG5cdFx0XHRCYXNlLnB1c2gobG9jYXRpb25zLCBhcnJheXNbaV0pO1xuXHRcdH1cblx0XHRyZXR1cm4gbG9jYXRpb25zO1xuXHR9XG5cblx0ZnVuY3Rpb24gZ2V0T3ZlcmxhcHModjEsIHYyKSB7XG5cblx0XHRmdW5jdGlvbiBnZXRTcXVhcmVkTGluZUxlbmd0aCh2KSB7XG5cdFx0XHR2YXIgeCA9IHZbNl0gLSB2WzBdLFxuXHRcdFx0XHR5ID0gdls3XSAtIHZbMV07XG5cdFx0XHRyZXR1cm4geCAqIHggKyB5ICogeTtcblx0XHR9XG5cblx0XHR2YXIgYWJzID0gTWF0aC5hYnMsXG5cdFx0XHRnZXREaXN0YW5jZSA9IExpbmUuZ2V0RGlzdGFuY2UsXG5cdFx0XHR0aW1lRXBzaWxvbiA9IDFlLTgsXG5cdFx0XHRnZW9tRXBzaWxvbiA9IDFlLTcsXG5cdFx0XHRzdHJhaWdodDEgPSBDdXJ2ZS5pc1N0cmFpZ2h0KHYxKSxcblx0XHRcdHN0cmFpZ2h0MiA9IEN1cnZlLmlzU3RyYWlnaHQodjIpLFxuXHRcdFx0c3RyYWlnaHRCb3RoID0gc3RyYWlnaHQxICYmIHN0cmFpZ2h0Mixcblx0XHRcdGZsaXAgPSBnZXRTcXVhcmVkTGluZUxlbmd0aCh2MSkgPCBnZXRTcXVhcmVkTGluZUxlbmd0aCh2MiksXG5cdFx0XHRsMSA9IGZsaXAgPyB2MiA6IHYxLFxuXHRcdFx0bDIgPSBmbGlwID8gdjEgOiB2Mixcblx0XHRcdHB4ID0gbDFbMF0sIHB5ID0gbDFbMV0sXG5cdFx0XHR2eCA9IGwxWzZdIC0gcHgsIHZ5ID0gbDFbN10gLSBweTtcblx0XHRpZiAoZ2V0RGlzdGFuY2UocHgsIHB5LCB2eCwgdnksIGwyWzBdLCBsMlsxXSwgdHJ1ZSkgPCBnZW9tRXBzaWxvbiAmJlxuXHRcdFx0Z2V0RGlzdGFuY2UocHgsIHB5LCB2eCwgdnksIGwyWzZdLCBsMls3XSwgdHJ1ZSkgPCBnZW9tRXBzaWxvbikge1xuXHRcdFx0aWYgKCFzdHJhaWdodEJvdGggJiZcblx0XHRcdFx0Z2V0RGlzdGFuY2UocHgsIHB5LCB2eCwgdnksIGwxWzJdLCBsMVszXSwgdHJ1ZSkgPCBnZW9tRXBzaWxvbiAmJlxuXHRcdFx0XHRnZXREaXN0YW5jZShweCwgcHksIHZ4LCB2eSwgbDFbNF0sIGwxWzVdLCB0cnVlKSA8IGdlb21FcHNpbG9uICYmXG5cdFx0XHRcdGdldERpc3RhbmNlKHB4LCBweSwgdngsIHZ5LCBsMlsyXSwgbDJbM10sIHRydWUpIDwgZ2VvbUVwc2lsb24gJiZcblx0XHRcdFx0Z2V0RGlzdGFuY2UocHgsIHB5LCB2eCwgdnksIGwyWzRdLCBsMls1XSwgdHJ1ZSkgPCBnZW9tRXBzaWxvbikge1xuXHRcdFx0XHRzdHJhaWdodDEgPSBzdHJhaWdodDIgPSBzdHJhaWdodEJvdGggPSB0cnVlO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSBpZiAoc3RyYWlnaHRCb3RoKSB7XG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9XG5cdFx0aWYgKHN0cmFpZ2h0MSBeIHN0cmFpZ2h0Mikge1xuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fVxuXG5cdFx0dmFyIHYgPSBbdjEsIHYyXSxcblx0XHRcdHBhaXJzID0gW107XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCA0ICYmIHBhaXJzLmxlbmd0aCA8IDI7IGkrKykge1xuXHRcdFx0dmFyIGkxID0gaSAmIDEsXG5cdFx0XHRcdGkyID0gaTEgXiAxLFxuXHRcdFx0XHR0MSA9IGkgPj4gMSxcblx0XHRcdFx0dDIgPSBDdXJ2ZS5nZXRUaW1lT2YodltpMV0sIG5ldyBQb2ludChcblx0XHRcdFx0XHR2W2kyXVt0MSA/IDYgOiAwXSxcblx0XHRcdFx0XHR2W2kyXVt0MSA/IDcgOiAxXSkpO1xuXHRcdFx0aWYgKHQyICE9IG51bGwpIHtcblx0XHRcdFx0dmFyIHBhaXIgPSBpMSA/IFt0MSwgdDJdIDogW3QyLCB0MV07XG5cdFx0XHRcdGlmICghcGFpcnMubGVuZ3RoIHx8XG5cdFx0XHRcdFx0YWJzKHBhaXJbMF0gLSBwYWlyc1swXVswXSkgPiB0aW1lRXBzaWxvbiAmJlxuXHRcdFx0XHRcdGFicyhwYWlyWzFdIC0gcGFpcnNbMF1bMV0pID4gdGltZUVwc2lsb24pIHtcblx0XHRcdFx0XHRwYWlycy5wdXNoKHBhaXIpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAoaSA+IDIgJiYgIXBhaXJzLmxlbmd0aClcblx0XHRcdFx0YnJlYWs7XG5cdFx0fVxuXHRcdGlmIChwYWlycy5sZW5ndGggIT09IDIpIHtcblx0XHRcdHBhaXJzID0gbnVsbDtcblx0XHR9IGVsc2UgaWYgKCFzdHJhaWdodEJvdGgpIHtcblx0XHRcdHZhciBvMSA9IEN1cnZlLmdldFBhcnQodjEsIHBhaXJzWzBdWzBdLCBwYWlyc1sxXVswXSksXG5cdFx0XHRcdG8yID0gQ3VydmUuZ2V0UGFydCh2MiwgcGFpcnNbMF1bMV0sIHBhaXJzWzFdWzFdKTtcblx0XHRcdGlmIChhYnMobzJbMl0gLSBvMVsyXSkgPiBnZW9tRXBzaWxvbiB8fFxuXHRcdFx0XHRhYnMobzJbM10gLSBvMVszXSkgPiBnZW9tRXBzaWxvbiB8fFxuXHRcdFx0XHRhYnMobzJbNF0gLSBvMVs0XSkgPiBnZW9tRXBzaWxvbiB8fFxuXHRcdFx0XHRhYnMobzJbNV0gLSBvMVs1XSkgPiBnZW9tRXBzaWxvbilcblx0XHRcdFx0cGFpcnMgPSBudWxsO1xuXHRcdH1cblx0XHRyZXR1cm4gcGFpcnM7XG5cdH1cblxuXHRmdW5jdGlvbiBnZXRUaW1lc1dpdGhUYW5nZW50KHYsIHRhbmdlbnQpIHtcblx0XHR2YXIgeDAgPSB2WzBdLCB5MCA9IHZbMV0sXG5cdFx0XHR4MSA9IHZbMl0sIHkxID0gdlszXSxcblx0XHRcdHgyID0gdls0XSwgeTIgPSB2WzVdLFxuXHRcdFx0eDMgPSB2WzZdLCB5MyA9IHZbN10sXG5cdFx0XHRub3JtYWxpemVkID0gdGFuZ2VudC5ub3JtYWxpemUoKSxcblx0XHRcdHR4ID0gbm9ybWFsaXplZC54LFxuXHRcdFx0dHkgPSBub3JtYWxpemVkLnksXG5cdFx0XHRheCA9IDMgKiB4MyAtIDkgKiB4MiArIDkgKiB4MSAtIDMgKiB4MCxcblx0XHRcdGF5ID0gMyAqIHkzIC0gOSAqIHkyICsgOSAqIHkxIC0gMyAqIHkwLFxuXHRcdFx0YnggPSA2ICogeDIgLSAxMiAqIHgxICsgNiAqIHgwLFxuXHRcdFx0YnkgPSA2ICogeTIgLSAxMiAqIHkxICsgNiAqIHkwLFxuXHRcdFx0Y3ggPSAzICogeDEgLSAzICogeDAsXG5cdFx0XHRjeSA9IDMgKiB5MSAtIDMgKiB5MCxcblx0XHRcdGRlbiA9IDIgKiBheCAqIHR5IC0gMiAqIGF5ICogdHgsXG5cdFx0XHR0aW1lcyA9IFtdO1xuXHRcdGlmIChNYXRoLmFicyhkZW4pIDwgTnVtZXJpY2FsLkNVUlZFVElNRV9FUFNJTE9OKSB7XG5cdFx0XHR2YXIgbnVtID0gYXggKiBjeSAtIGF5ICogY3gsXG5cdFx0XHRcdGRlbiA9IGF4ICogYnkgLSBheSAqIGJ4O1xuXHRcdFx0aWYgKGRlbiAhPSAwKSB7XG5cdFx0XHRcdHZhciB0ID0gLW51bSAvIGRlbjtcblx0XHRcdFx0aWYgKHQgPj0gMCAmJiB0IDw9IDEpIHRpbWVzLnB1c2godCk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdHZhciBkZWx0YSA9IChieCAqIGJ4IC0gNCAqIGF4ICogY3gpICogdHkgKiB0eSArXG5cdFx0XHRcdCgtMiAqIGJ4ICogYnkgKyA0ICogYXkgKiBjeCArIDQgKiBheCAqIGN5KSAqIHR4ICogdHkgK1xuXHRcdFx0XHQoYnkgKiBieSAtIDQgKiBheSAqIGN5KSAqIHR4ICogdHgsXG5cdFx0XHRcdGsgPSBieCAqIHR5IC0gYnkgKiB0eDtcblx0XHRcdGlmIChkZWx0YSA+PSAwICYmIGRlbiAhPSAwKSB7XG5cdFx0XHRcdHZhciBkID0gTWF0aC5zcXJ0KGRlbHRhKSxcblx0XHRcdFx0XHR0MCA9IC0oayArIGQpIC8gZGVuLFxuXHRcdFx0XHRcdHQxID0gKC1rICsgZCkgLyBkZW47XG5cdFx0XHRcdGlmICh0MCA+PSAwICYmIHQwIDw9IDEpIHRpbWVzLnB1c2godDApO1xuXHRcdFx0XHRpZiAodDEgPj0gMCAmJiB0MSA8PSAxKSB0aW1lcy5wdXNoKHQxKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIHRpbWVzO1xuXHR9XG5cblx0cmV0dXJuIHtcblx0XHRnZXRJbnRlcnNlY3Rpb25zOiBmdW5jdGlvbihjdXJ2ZSkge1xuXHRcdFx0dmFyIHYxID0gdGhpcy5nZXRWYWx1ZXMoKSxcblx0XHRcdFx0djIgPSBjdXJ2ZSAmJiBjdXJ2ZSAhPT0gdGhpcyAmJiBjdXJ2ZS5nZXRWYWx1ZXMoKTtcblx0XHRcdHJldHVybiB2MiA/IGdldEN1cnZlSW50ZXJzZWN0aW9ucyh2MSwgdjIsIHRoaXMsIGN1cnZlLCBbXSlcblx0XHRcdFx0XHQgIDogZ2V0TG9vcEludGVyc2VjdGlvbih2MSwgdGhpcywgW10pO1xuXHRcdH0sXG5cblx0XHRzdGF0aWNzOiB7XG5cdFx0XHRnZXRPdmVybGFwczogZ2V0T3ZlcmxhcHMsXG5cdFx0XHRnZXRJbnRlcnNlY3Rpb25zOiBnZXRJbnRlcnNlY3Rpb25zLFxuXHRcdFx0Z2V0Q3VydmVMaW5lSW50ZXJzZWN0aW9uczogZ2V0Q3VydmVMaW5lSW50ZXJzZWN0aW9ucyxcblx0XHRcdGdldFRpbWVzV2l0aFRhbmdlbnQ6IGdldFRpbWVzV2l0aFRhbmdlbnRcblx0XHR9XG5cdH07XG59KTtcblxudmFyIEN1cnZlTG9jYXRpb24gPSBCYXNlLmV4dGVuZCh7XG5cdF9jbGFzczogJ0N1cnZlTG9jYXRpb24nLFxuXG5cdGluaXRpYWxpemU6IGZ1bmN0aW9uIEN1cnZlTG9jYXRpb24oY3VydmUsIHRpbWUsIHBvaW50LCBfb3ZlcmxhcCwgX2Rpc3RhbmNlKSB7XG5cdFx0aWYgKHRpbWUgPj0gMC45OTk5OTk5OSkge1xuXHRcdFx0dmFyIG5leHQgPSBjdXJ2ZS5nZXROZXh0KCk7XG5cdFx0XHRpZiAobmV4dCkge1xuXHRcdFx0XHR0aW1lID0gMDtcblx0XHRcdFx0Y3VydmUgPSBuZXh0O1xuXHRcdFx0fVxuXHRcdH1cblx0XHR0aGlzLl9zZXRDdXJ2ZShjdXJ2ZSk7XG5cdFx0dGhpcy5fdGltZSA9IHRpbWU7XG5cdFx0dGhpcy5fcG9pbnQgPSBwb2ludCB8fCBjdXJ2ZS5nZXRQb2ludEF0VGltZSh0aW1lKTtcblx0XHR0aGlzLl9vdmVybGFwID0gX292ZXJsYXA7XG5cdFx0dGhpcy5fZGlzdGFuY2UgPSBfZGlzdGFuY2U7XG5cdFx0dGhpcy5faW50ZXJzZWN0aW9uID0gdGhpcy5fbmV4dCA9IHRoaXMuX3ByZXZpb3VzID0gbnVsbDtcblx0fSxcblxuXHRfc2V0Q3VydmU6IGZ1bmN0aW9uKGN1cnZlKSB7XG5cdFx0dmFyIHBhdGggPSBjdXJ2ZS5fcGF0aDtcblx0XHR0aGlzLl9wYXRoID0gcGF0aDtcblx0XHR0aGlzLl92ZXJzaW9uID0gcGF0aCA/IHBhdGguX3ZlcnNpb24gOiAwO1xuXHRcdHRoaXMuX2N1cnZlID0gY3VydmU7XG5cdFx0dGhpcy5fc2VnbWVudCA9IG51bGw7XG5cdFx0dGhpcy5fc2VnbWVudDEgPSBjdXJ2ZS5fc2VnbWVudDE7XG5cdFx0dGhpcy5fc2VnbWVudDIgPSBjdXJ2ZS5fc2VnbWVudDI7XG5cdH0sXG5cblx0X3NldFNlZ21lbnQ6IGZ1bmN0aW9uKHNlZ21lbnQpIHtcblx0XHR0aGlzLl9zZXRDdXJ2ZShzZWdtZW50LmdldEN1cnZlKCkpO1xuXHRcdHRoaXMuX3NlZ21lbnQgPSBzZWdtZW50O1xuXHRcdHRoaXMuX3RpbWUgPSBzZWdtZW50ID09PSB0aGlzLl9zZWdtZW50MSA/IDAgOiAxO1xuXHRcdHRoaXMuX3BvaW50ID0gc2VnbWVudC5fcG9pbnQuY2xvbmUoKTtcblx0fSxcblxuXHRnZXRTZWdtZW50OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgc2VnbWVudCA9IHRoaXMuX3NlZ21lbnQ7XG5cdFx0aWYgKCFzZWdtZW50KSB7XG5cdFx0XHR2YXIgY3VydmUgPSB0aGlzLmdldEN1cnZlKCksXG5cdFx0XHRcdHRpbWUgPSB0aGlzLmdldFRpbWUoKTtcblx0XHRcdGlmICh0aW1lID09PSAwKSB7XG5cdFx0XHRcdHNlZ21lbnQgPSBjdXJ2ZS5fc2VnbWVudDE7XG5cdFx0XHR9IGVsc2UgaWYgKHRpbWUgPT09IDEpIHtcblx0XHRcdFx0c2VnbWVudCA9IGN1cnZlLl9zZWdtZW50Mjtcblx0XHRcdH0gZWxzZSBpZiAodGltZSAhPSBudWxsKSB7XG5cdFx0XHRcdHNlZ21lbnQgPSBjdXJ2ZS5nZXRQYXJ0TGVuZ3RoKDAsIHRpbWUpXG5cdFx0XHRcdFx0PCBjdXJ2ZS5nZXRQYXJ0TGVuZ3RoKHRpbWUsIDEpXG5cdFx0XHRcdFx0XHQ/IGN1cnZlLl9zZWdtZW50MVxuXHRcdFx0XHRcdFx0OiBjdXJ2ZS5fc2VnbWVudDI7XG5cdFx0XHR9XG5cdFx0XHR0aGlzLl9zZWdtZW50ID0gc2VnbWVudDtcblx0XHR9XG5cdFx0cmV0dXJuIHNlZ21lbnQ7XG5cdH0sXG5cblx0Z2V0Q3VydmU6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBwYXRoID0gdGhpcy5fcGF0aCxcblx0XHRcdHRoYXQgPSB0aGlzO1xuXHRcdGlmIChwYXRoICYmIHBhdGguX3ZlcnNpb24gIT09IHRoaXMuX3ZlcnNpb24pIHtcblx0XHRcdHRoaXMuX3RpbWUgPSB0aGlzLl9vZmZzZXQgPSB0aGlzLl9jdXJ2ZU9mZnNldCA9IHRoaXMuX2N1cnZlID0gbnVsbDtcblx0XHR9XG5cblx0XHRmdW5jdGlvbiB0cnlTZWdtZW50KHNlZ21lbnQpIHtcblx0XHRcdHZhciBjdXJ2ZSA9IHNlZ21lbnQgJiYgc2VnbWVudC5nZXRDdXJ2ZSgpO1xuXHRcdFx0aWYgKGN1cnZlICYmICh0aGF0Ll90aW1lID0gY3VydmUuZ2V0VGltZU9mKHRoYXQuX3BvaW50KSkgIT0gbnVsbCkge1xuXHRcdFx0XHR0aGF0Ll9zZXRDdXJ2ZShjdXJ2ZSk7XG5cdFx0XHRcdHJldHVybiBjdXJ2ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5fY3VydmVcblx0XHRcdHx8IHRyeVNlZ21lbnQodGhpcy5fc2VnbWVudClcblx0XHRcdHx8IHRyeVNlZ21lbnQodGhpcy5fc2VnbWVudDEpXG5cdFx0XHR8fCB0cnlTZWdtZW50KHRoaXMuX3NlZ21lbnQyLmdldFByZXZpb3VzKCkpO1xuXHR9LFxuXG5cdGdldFBhdGg6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBjdXJ2ZSA9IHRoaXMuZ2V0Q3VydmUoKTtcblx0XHRyZXR1cm4gY3VydmUgJiYgY3VydmUuX3BhdGg7XG5cdH0sXG5cblx0Z2V0SW5kZXg6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBjdXJ2ZSA9IHRoaXMuZ2V0Q3VydmUoKTtcblx0XHRyZXR1cm4gY3VydmUgJiYgY3VydmUuZ2V0SW5kZXgoKTtcblx0fSxcblxuXHRnZXRUaW1lOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgY3VydmUgPSB0aGlzLmdldEN1cnZlKCksXG5cdFx0XHR0aW1lID0gdGhpcy5fdGltZTtcblx0XHRyZXR1cm4gY3VydmUgJiYgdGltZSA9PSBudWxsXG5cdFx0XHQ/IHRoaXMuX3RpbWUgPSBjdXJ2ZS5nZXRUaW1lT2YodGhpcy5fcG9pbnQpXG5cdFx0XHQ6IHRpbWU7XG5cdH0sXG5cblx0Z2V0UGFyYW1ldGVyOiAnI2dldFRpbWUnLFxuXG5cdGdldFBvaW50OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5fcG9pbnQ7XG5cdH0sXG5cblx0Z2V0T2Zmc2V0OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgb2Zmc2V0ID0gdGhpcy5fb2Zmc2V0O1xuXHRcdGlmIChvZmZzZXQgPT0gbnVsbCkge1xuXHRcdFx0b2Zmc2V0ID0gMDtcblx0XHRcdHZhciBwYXRoID0gdGhpcy5nZXRQYXRoKCksXG5cdFx0XHRcdGluZGV4ID0gdGhpcy5nZXRJbmRleCgpO1xuXHRcdFx0aWYgKHBhdGggJiYgaW5kZXggIT0gbnVsbCkge1xuXHRcdFx0XHR2YXIgY3VydmVzID0gcGF0aC5nZXRDdXJ2ZXMoKTtcblx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBpbmRleDsgaSsrKVxuXHRcdFx0XHRcdG9mZnNldCArPSBjdXJ2ZXNbaV0uZ2V0TGVuZ3RoKCk7XG5cdFx0XHR9XG5cdFx0XHR0aGlzLl9vZmZzZXQgPSBvZmZzZXQgKz0gdGhpcy5nZXRDdXJ2ZU9mZnNldCgpO1xuXHRcdH1cblx0XHRyZXR1cm4gb2Zmc2V0O1xuXHR9LFxuXG5cdGdldEN1cnZlT2Zmc2V0OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgb2Zmc2V0ID0gdGhpcy5fY3VydmVPZmZzZXQ7XG5cdFx0aWYgKG9mZnNldCA9PSBudWxsKSB7XG5cdFx0XHR2YXIgY3VydmUgPSB0aGlzLmdldEN1cnZlKCksXG5cdFx0XHRcdHRpbWUgPSB0aGlzLmdldFRpbWUoKTtcblx0XHRcdHRoaXMuX2N1cnZlT2Zmc2V0ID0gb2Zmc2V0ID0gdGltZSAhPSBudWxsICYmIGN1cnZlXG5cdFx0XHRcdFx0JiYgY3VydmUuZ2V0UGFydExlbmd0aCgwLCB0aW1lKTtcblx0XHR9XG5cdFx0cmV0dXJuIG9mZnNldDtcblx0fSxcblxuXHRnZXRJbnRlcnNlY3Rpb246IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLl9pbnRlcnNlY3Rpb247XG5cdH0sXG5cblx0Z2V0RGlzdGFuY2U6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLl9kaXN0YW5jZTtcblx0fSxcblxuXHRkaXZpZGU6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBjdXJ2ZSA9IHRoaXMuZ2V0Q3VydmUoKSxcblx0XHRcdHJlcyA9IGN1cnZlICYmIGN1cnZlLmRpdmlkZUF0VGltZSh0aGlzLmdldFRpbWUoKSk7XG5cdFx0aWYgKHJlcykge1xuXHRcdFx0dGhpcy5fc2V0U2VnbWVudChyZXMuX3NlZ21lbnQxKTtcblx0XHR9XG5cdFx0cmV0dXJuIHJlcztcblx0fSxcblxuXHRzcGxpdDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGN1cnZlID0gdGhpcy5nZXRDdXJ2ZSgpLFxuXHRcdFx0cGF0aCA9IGN1cnZlLl9wYXRoLFxuXHRcdFx0cmVzID0gY3VydmUgJiYgY3VydmUuc3BsaXRBdFRpbWUodGhpcy5nZXRUaW1lKCkpO1xuXHRcdGlmIChyZXMpIHtcblx0XHRcdHRoaXMuX3NldFNlZ21lbnQocGF0aC5nZXRMYXN0U2VnbWVudCgpKTtcblx0XHR9XG5cdFx0cmV0dXJuICByZXM7XG5cdH0sXG5cblx0ZXF1YWxzOiBmdW5jdGlvbihsb2MsIF9pZ25vcmVPdGhlcikge1xuXHRcdHZhciByZXMgPSB0aGlzID09PSBsb2M7XG5cdFx0aWYgKCFyZXMgJiYgbG9jIGluc3RhbmNlb2YgQ3VydmVMb2NhdGlvbikge1xuXHRcdFx0dmFyIGMxID0gdGhpcy5nZXRDdXJ2ZSgpLFxuXHRcdFx0XHRjMiA9IGxvYy5nZXRDdXJ2ZSgpLFxuXHRcdFx0XHRwMSA9IGMxLl9wYXRoLFxuXHRcdFx0XHRwMiA9IGMyLl9wYXRoO1xuXHRcdFx0aWYgKHAxID09PSBwMikge1xuXHRcdFx0XHR2YXIgYWJzID0gTWF0aC5hYnMsXG5cdFx0XHRcdFx0ZXBzaWxvbiA9IDFlLTcsXG5cdFx0XHRcdFx0ZGlmZiA9IGFicyh0aGlzLmdldE9mZnNldCgpIC0gbG9jLmdldE9mZnNldCgpKSxcblx0XHRcdFx0XHRpMSA9ICFfaWdub3JlT3RoZXIgJiYgdGhpcy5faW50ZXJzZWN0aW9uLFxuXHRcdFx0XHRcdGkyID0gIV9pZ25vcmVPdGhlciAmJiBsb2MuX2ludGVyc2VjdGlvbjtcblx0XHRcdFx0cmVzID0gKGRpZmYgPCBlcHNpbG9uXG5cdFx0XHRcdFx0XHR8fCBwMSAmJiBhYnMocDEuZ2V0TGVuZ3RoKCkgLSBkaWZmKSA8IGVwc2lsb24pXG5cdFx0XHRcdFx0JiYgKCFpMSAmJiAhaTIgfHwgaTEgJiYgaTIgJiYgaTEuZXF1YWxzKGkyLCB0cnVlKSk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiByZXM7XG5cdH0sXG5cblx0dG9TdHJpbmc6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBwYXJ0cyA9IFtdLFxuXHRcdFx0cG9pbnQgPSB0aGlzLmdldFBvaW50KCksXG5cdFx0XHRmID0gRm9ybWF0dGVyLmluc3RhbmNlO1xuXHRcdGlmIChwb2ludClcblx0XHRcdHBhcnRzLnB1c2goJ3BvaW50OiAnICsgcG9pbnQpO1xuXHRcdHZhciBpbmRleCA9IHRoaXMuZ2V0SW5kZXgoKTtcblx0XHRpZiAoaW5kZXggIT0gbnVsbClcblx0XHRcdHBhcnRzLnB1c2goJ2luZGV4OiAnICsgaW5kZXgpO1xuXHRcdHZhciB0aW1lID0gdGhpcy5nZXRUaW1lKCk7XG5cdFx0aWYgKHRpbWUgIT0gbnVsbClcblx0XHRcdHBhcnRzLnB1c2goJ3RpbWU6ICcgKyBmLm51bWJlcih0aW1lKSk7XG5cdFx0aWYgKHRoaXMuX2Rpc3RhbmNlICE9IG51bGwpXG5cdFx0XHRwYXJ0cy5wdXNoKCdkaXN0YW5jZTogJyArIGYubnVtYmVyKHRoaXMuX2Rpc3RhbmNlKSk7XG5cdFx0cmV0dXJuICd7ICcgKyBwYXJ0cy5qb2luKCcsICcpICsgJyB9Jztcblx0fSxcblxuXHRpc1RvdWNoaW5nOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgaW50ZXIgPSB0aGlzLl9pbnRlcnNlY3Rpb247XG5cdFx0aWYgKGludGVyICYmIHRoaXMuZ2V0VGFuZ2VudCgpLmlzQ29sbGluZWFyKGludGVyLmdldFRhbmdlbnQoKSkpIHtcblx0XHRcdHZhciBjdXJ2ZTEgPSB0aGlzLmdldEN1cnZlKCksXG5cdFx0XHRcdGN1cnZlMiA9IGludGVyLmdldEN1cnZlKCk7XG5cdFx0XHRyZXR1cm4gIShjdXJ2ZTEuaXNTdHJhaWdodCgpICYmIGN1cnZlMi5pc1N0cmFpZ2h0KClcblx0XHRcdFx0XHQmJiBjdXJ2ZTEuZ2V0TGluZSgpLmludGVyc2VjdChjdXJ2ZTIuZ2V0TGluZSgpKSk7XG5cdFx0fVxuXHRcdHJldHVybiBmYWxzZTtcblx0fSxcblxuXHRpc0Nyb3NzaW5nOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgaW50ZXIgPSB0aGlzLl9pbnRlcnNlY3Rpb247XG5cdFx0aWYgKCFpbnRlcilcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR2YXIgdDEgPSB0aGlzLmdldFRpbWUoKSxcblx0XHRcdHQyID0gaW50ZXIuZ2V0VGltZSgpLFxuXHRcdFx0dE1pbiA9IDFlLTgsXG5cdFx0XHR0TWF4ID0gMSAtIHRNaW4sXG5cdFx0XHR0MUluc2lkZSA9IHQxID49IHRNaW4gJiYgdDEgPD0gdE1heCxcblx0XHRcdHQySW5zaWRlID0gdDIgPj0gdE1pbiAmJiB0MiA8PSB0TWF4O1xuXHRcdGlmICh0MUluc2lkZSAmJiB0Mkluc2lkZSlcblx0XHRcdHJldHVybiAhdGhpcy5pc1RvdWNoaW5nKCk7XG5cdFx0dmFyIGMyID0gdGhpcy5nZXRDdXJ2ZSgpLFxuXHRcdFx0YzEgPSB0MSA8IHRNaW4gPyBjMi5nZXRQcmV2aW91cygpIDogYzIsXG5cdFx0XHRjNCA9IGludGVyLmdldEN1cnZlKCksXG5cdFx0XHRjMyA9IHQyIDwgdE1pbiA/IGM0LmdldFByZXZpb3VzKCkgOiBjNDtcblx0XHRpZiAodDEgPiB0TWF4KVxuXHRcdFx0YzIgPSBjMi5nZXROZXh0KCk7XG5cdFx0aWYgKHQyID4gdE1heClcblx0XHRcdGM0ID0gYzQuZ2V0TmV4dCgpO1xuXHRcdGlmICghYzEgfHwgIWMyIHx8ICFjMyB8fCAhYzQpXG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cblx0XHR2YXIgb2Zmc2V0cyA9IFtdO1xuXG5cdFx0ZnVuY3Rpb24gYWRkT2Zmc2V0cyhjdXJ2ZSwgZW5kKSB7XG5cdFx0XHR2YXIgdiA9IGN1cnZlLmdldFZhbHVlcygpLFxuXHRcdFx0XHRyb290cyA9IEN1cnZlLmNsYXNzaWZ5KHYpLnJvb3RzIHx8IEN1cnZlLmdldFBlYWtzKHYpLFxuXHRcdFx0XHRjb3VudCA9IHJvb3RzLmxlbmd0aCxcblx0XHRcdFx0dCA9IGVuZCAmJiBjb3VudCA+IDEgPyByb290c1tjb3VudCAtIDFdXG5cdFx0XHRcdFx0XHQ6IGNvdW50ID4gMCA/IHJvb3RzWzBdXG5cdFx0XHRcdFx0XHQ6IDAuNTtcblx0XHRcdG9mZnNldHMucHVzaChDdXJ2ZS5nZXRMZW5ndGgodiwgZW5kID8gdCA6IDAsIGVuZCA/IDEgOiB0KSAvIDIpO1xuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIGlzSW5SYW5nZShhbmdsZSwgbWluLCBtYXgpIHtcblx0XHRcdHJldHVybiBtaW4gPCBtYXhcblx0XHRcdFx0XHQ/IGFuZ2xlID4gbWluICYmIGFuZ2xlIDwgbWF4XG5cdFx0XHRcdFx0OiBhbmdsZSA+IG1pbiB8fCBhbmdsZSA8IG1heDtcblx0XHR9XG5cblx0XHRpZiAoIXQxSW5zaWRlKSB7XG5cdFx0XHRhZGRPZmZzZXRzKGMxLCB0cnVlKTtcblx0XHRcdGFkZE9mZnNldHMoYzIsIGZhbHNlKTtcblx0XHR9XG5cdFx0aWYgKCF0Mkluc2lkZSkge1xuXHRcdFx0YWRkT2Zmc2V0cyhjMywgdHJ1ZSk7XG5cdFx0XHRhZGRPZmZzZXRzKGM0LCBmYWxzZSk7XG5cdFx0fVxuXHRcdHZhciBwdCA9IHRoaXMuZ2V0UG9pbnQoKSxcblx0XHRcdG9mZnNldCA9IE1hdGgubWluLmFwcGx5KE1hdGgsIG9mZnNldHMpLFxuXHRcdFx0djIgPSB0MUluc2lkZSA/IGMyLmdldFRhbmdlbnRBdFRpbWUodDEpXG5cdFx0XHRcdFx0OiBjMi5nZXRQb2ludEF0KG9mZnNldCkuc3VidHJhY3QocHQpLFxuXHRcdFx0djEgPSB0MUluc2lkZSA/IHYyLm5lZ2F0ZSgpXG5cdFx0XHRcdFx0OiBjMS5nZXRQb2ludEF0KC1vZmZzZXQpLnN1YnRyYWN0KHB0KSxcblx0XHRcdHY0ID0gdDJJbnNpZGUgPyBjNC5nZXRUYW5nZW50QXRUaW1lKHQyKVxuXHRcdFx0XHRcdDogYzQuZ2V0UG9pbnRBdChvZmZzZXQpLnN1YnRyYWN0KHB0KSxcblx0XHRcdHYzID0gdDJJbnNpZGUgPyB2NC5uZWdhdGUoKVxuXHRcdFx0XHRcdDogYzMuZ2V0UG9pbnRBdCgtb2Zmc2V0KS5zdWJ0cmFjdChwdCksXG5cdFx0XHRhMSA9IHYxLmdldEFuZ2xlKCksXG5cdFx0XHRhMiA9IHYyLmdldEFuZ2xlKCksXG5cdFx0XHRhMyA9IHYzLmdldEFuZ2xlKCksXG5cdFx0XHRhNCA9IHY0LmdldEFuZ2xlKCk7XG5cdFx0cmV0dXJuICEhKHQxSW5zaWRlXG5cdFx0XHRcdD8gKGlzSW5SYW5nZShhMSwgYTMsIGE0KSBeIGlzSW5SYW5nZShhMiwgYTMsIGE0KSkgJiZcblx0XHRcdFx0ICAoaXNJblJhbmdlKGExLCBhNCwgYTMpIF4gaXNJblJhbmdlKGEyLCBhNCwgYTMpKVxuXHRcdFx0XHQ6IChpc0luUmFuZ2UoYTMsIGExLCBhMikgXiBpc0luUmFuZ2UoYTQsIGExLCBhMikpICYmXG5cdFx0XHRcdCAgKGlzSW5SYW5nZShhMywgYTIsIGExKSBeIGlzSW5SYW5nZShhNCwgYTIsIGExKSkpO1xuXHR9LFxuXG5cdGhhc092ZXJsYXA6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiAhIXRoaXMuX292ZXJsYXA7XG5cdH1cbn0sIEJhc2UuZWFjaChDdXJ2ZS5fZXZhbHVhdGVNZXRob2RzLCBmdW5jdGlvbihuYW1lKSB7XG5cdHZhciBnZXQgPSBuYW1lICsgJ0F0Jztcblx0dGhpc1tuYW1lXSA9IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBjdXJ2ZSA9IHRoaXMuZ2V0Q3VydmUoKSxcblx0XHRcdHRpbWUgPSB0aGlzLmdldFRpbWUoKTtcblx0XHRyZXR1cm4gdGltZSAhPSBudWxsICYmIGN1cnZlICYmIGN1cnZlW2dldF0odGltZSwgdHJ1ZSk7XG5cdH07XG59LCB7XG5cdHByZXNlcnZlOiB0cnVlXG59KSxcbm5ldyBmdW5jdGlvbigpIHtcblxuXHRmdW5jdGlvbiBpbnNlcnQobG9jYXRpb25zLCBsb2MsIG1lcmdlKSB7XG5cdFx0dmFyIGxlbmd0aCA9IGxvY2F0aW9ucy5sZW5ndGgsXG5cdFx0XHRsID0gMCxcblx0XHRcdHIgPSBsZW5ndGggLSAxO1xuXG5cdFx0ZnVuY3Rpb24gc2VhcmNoKGluZGV4LCBkaXIpIHtcblx0XHRcdGZvciAodmFyIGkgPSBpbmRleCArIGRpcjsgaSA+PSAtMSAmJiBpIDw9IGxlbmd0aDsgaSArPSBkaXIpIHtcblx0XHRcdFx0dmFyIGxvYzIgPSBsb2NhdGlvbnNbKChpICUgbGVuZ3RoKSArIGxlbmd0aCkgJSBsZW5ndGhdO1xuXHRcdFx0XHRpZiAoIWxvYy5nZXRQb2ludCgpLmlzQ2xvc2UobG9jMi5nZXRQb2ludCgpLFxuXHRcdFx0XHRcdFx0MWUtNykpXG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGlmIChsb2MuZXF1YWxzKGxvYzIpKVxuXHRcdFx0XHRcdHJldHVybiBsb2MyO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fVxuXG5cdFx0d2hpbGUgKGwgPD0gcikge1xuXHRcdFx0dmFyIG0gPSAobCArIHIpID4+PiAxLFxuXHRcdFx0XHRsb2MyID0gbG9jYXRpb25zW21dLFxuXHRcdFx0XHRmb3VuZDtcblx0XHRcdGlmIChtZXJnZSAmJiAoZm91bmQgPSBsb2MuZXF1YWxzKGxvYzIpID8gbG9jMlxuXHRcdFx0XHRcdDogKHNlYXJjaChtLCAtMSkgfHwgc2VhcmNoKG0sIDEpKSkpIHtcblx0XHRcdFx0aWYgKGxvYy5fb3ZlcmxhcCkge1xuXHRcdFx0XHRcdGZvdW5kLl9vdmVybGFwID0gZm91bmQuX2ludGVyc2VjdGlvbi5fb3ZlcmxhcCA9IHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIGZvdW5kO1xuXHRcdFx0fVxuXHRcdHZhciBwYXRoMSA9IGxvYy5nZXRQYXRoKCksXG5cdFx0XHRwYXRoMiA9IGxvYzIuZ2V0UGF0aCgpLFxuXHRcdFx0ZGlmZiA9IHBhdGgxICE9PSBwYXRoMlxuXHRcdFx0XHQ/IHBhdGgxLl9pZCAtIHBhdGgyLl9pZFxuXHRcdFx0XHQ6IChsb2MuZ2V0SW5kZXgoKSArIGxvYy5nZXRUaW1lKCkpXG5cdFx0XHRcdC0gKGxvYzIuZ2V0SW5kZXgoKSArIGxvYzIuZ2V0VGltZSgpKTtcblx0XHRcdGlmIChkaWZmIDwgMCkge1xuXHRcdFx0XHRyID0gbSAtIDE7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRsID0gbSArIDE7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGxvY2F0aW9ucy5zcGxpY2UobCwgMCwgbG9jKTtcblx0XHRyZXR1cm4gbG9jO1xuXHR9XG5cblx0cmV0dXJuIHsgc3RhdGljczoge1xuXHRcdGluc2VydDogaW5zZXJ0LFxuXG5cdFx0ZXhwYW5kOiBmdW5jdGlvbihsb2NhdGlvbnMpIHtcblx0XHRcdHZhciBleHBhbmRlZCA9IGxvY2F0aW9ucy5zbGljZSgpO1xuXHRcdFx0Zm9yICh2YXIgaSA9IGxvY2F0aW9ucy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuXHRcdFx0XHRpbnNlcnQoZXhwYW5kZWQsIGxvY2F0aW9uc1tpXS5faW50ZXJzZWN0aW9uLCBmYWxzZSk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZXhwYW5kZWQ7XG5cdFx0fVxuXHR9fTtcbn0pO1xuXG52YXIgUGF0aEl0ZW0gPSBJdGVtLmV4dGVuZCh7XG5cdF9jbGFzczogJ1BhdGhJdGVtJyxcblx0X3NlbGVjdEJvdW5kczogZmFsc2UsXG5cdF9jYW5TY2FsZVN0cm9rZTogdHJ1ZSxcblx0YmVhbnM6IHRydWUsXG5cblx0aW5pdGlhbGl6ZTogZnVuY3Rpb24gUGF0aEl0ZW0oKSB7XG5cdH0sXG5cblx0c3RhdGljczoge1xuXHRcdGNyZWF0ZTogZnVuY3Rpb24oYXJnKSB7XG5cdFx0XHR2YXIgZGF0YSxcblx0XHRcdFx0c2VnbWVudHMsXG5cdFx0XHRcdGNvbXBvdW5kO1xuXHRcdFx0aWYgKEJhc2UuaXNQbGFpbk9iamVjdChhcmcpKSB7XG5cdFx0XHRcdHNlZ21lbnRzID0gYXJnLnNlZ21lbnRzO1xuXHRcdFx0XHRkYXRhID0gYXJnLnBhdGhEYXRhO1xuXHRcdFx0fSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGFyZykpIHtcblx0XHRcdFx0c2VnbWVudHMgPSBhcmc7XG5cdFx0XHR9IGVsc2UgaWYgKHR5cGVvZiBhcmcgPT09ICdzdHJpbmcnKSB7XG5cdFx0XHRcdGRhdGEgPSBhcmc7XG5cdFx0XHR9XG5cdFx0XHRpZiAoc2VnbWVudHMpIHtcblx0XHRcdFx0dmFyIGZpcnN0ID0gc2VnbWVudHNbMF07XG5cdFx0XHRcdGNvbXBvdW5kID0gZmlyc3QgJiYgQXJyYXkuaXNBcnJheShmaXJzdFswXSk7XG5cdFx0XHR9IGVsc2UgaWYgKGRhdGEpIHtcblx0XHRcdFx0Y29tcG91bmQgPSAoZGF0YS5tYXRjaCgvbS9naSkgfHwgW10pLmxlbmd0aCA+IDFcblx0XHRcdFx0XHRcdHx8IC96XFxzKlxcUysvaS50ZXN0KGRhdGEpO1xuXHRcdFx0fVxuXHRcdFx0dmFyIGN0b3IgPSBjb21wb3VuZCA/IENvbXBvdW5kUGF0aCA6IFBhdGg7XG5cdFx0XHRyZXR1cm4gbmV3IGN0b3IoYXJnKTtcblx0XHR9XG5cdH0sXG5cblx0X2FzUGF0aEl0ZW06IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdGlzQ2xvY2t3aXNlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5nZXRBcmVhKCkgPj0gMDtcblx0fSxcblxuXHRzZXRDbG9ja3dpc2U6IGZ1bmN0aW9uKGNsb2Nrd2lzZSkge1xuXHRcdGlmICh0aGlzLmlzQ2xvY2t3aXNlKCkgIT0gKGNsb2Nrd2lzZSA9ICEhY2xvY2t3aXNlKSlcblx0XHRcdHRoaXMucmV2ZXJzZSgpO1xuXHR9LFxuXG5cdHNldFBhdGhEYXRhOiBmdW5jdGlvbihkYXRhKSB7XG5cblx0XHR2YXIgcGFydHMgPSBkYXRhICYmIGRhdGEubWF0Y2goL1ttbGh2Y3NxdGF6XVtebWxodmNzcXRhel0qL2lnKSxcblx0XHRcdGNvb3Jkcyxcblx0XHRcdHJlbGF0aXZlID0gZmFsc2UsXG5cdFx0XHRwcmV2aW91cyxcblx0XHRcdGNvbnRyb2wsXG5cdFx0XHRjdXJyZW50ID0gbmV3IFBvaW50KCksXG5cdFx0XHRzdGFydCA9IG5ldyBQb2ludCgpO1xuXG5cdFx0ZnVuY3Rpb24gZ2V0Q29vcmQoaW5kZXgsIGNvb3JkKSB7XG5cdFx0XHR2YXIgdmFsID0gK2Nvb3Jkc1tpbmRleF07XG5cdFx0XHRpZiAocmVsYXRpdmUpXG5cdFx0XHRcdHZhbCArPSBjdXJyZW50W2Nvb3JkXTtcblx0XHRcdHJldHVybiB2YWw7XG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gZ2V0UG9pbnQoaW5kZXgpIHtcblx0XHRcdHJldHVybiBuZXcgUG9pbnQoXG5cdFx0XHRcdGdldENvb3JkKGluZGV4LCAneCcpLFxuXHRcdFx0XHRnZXRDb29yZChpbmRleCArIDEsICd5Jylcblx0XHRcdCk7XG5cdFx0fVxuXG5cdFx0dGhpcy5jbGVhcigpO1xuXG5cdFx0Zm9yICh2YXIgaSA9IDAsIGwgPSBwYXJ0cyAmJiBwYXJ0cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcblx0XHRcdHZhciBwYXJ0ID0gcGFydHNbaV0sXG5cdFx0XHRcdGNvbW1hbmQgPSBwYXJ0WzBdLFxuXHRcdFx0XHRsb3dlciA9IGNvbW1hbmQudG9Mb3dlckNhc2UoKTtcblx0XHRcdGNvb3JkcyA9IHBhcnQubWF0Y2goL1srLV0/KD86XFxkKlxcLlxcZCt8XFxkK1xcLj8pKD86W2VFXVsrLV0/XFxkKyk/L2cpO1xuXHRcdFx0dmFyIGxlbmd0aCA9IGNvb3JkcyAmJiBjb29yZHMubGVuZ3RoO1xuXHRcdFx0cmVsYXRpdmUgPSBjb21tYW5kID09PSBsb3dlcjtcblx0XHRcdGlmIChwcmV2aW91cyA9PT0gJ3onICYmICEvW216XS8udGVzdChsb3dlcikpXG5cdFx0XHRcdHRoaXMubW92ZVRvKGN1cnJlbnQpO1xuXHRcdFx0c3dpdGNoIChsb3dlcikge1xuXHRcdFx0Y2FzZSAnbSc6XG5cdFx0XHRjYXNlICdsJzpcblx0XHRcdFx0dmFyIG1vdmUgPSBsb3dlciA9PT0gJ20nO1xuXHRcdFx0XHRmb3IgKHZhciBqID0gMDsgaiA8IGxlbmd0aDsgaiArPSAyKSB7XG5cdFx0XHRcdFx0dGhpc1ttb3ZlID8gJ21vdmVUbycgOiAnbGluZVRvJ10oY3VycmVudCA9IGdldFBvaW50KGopKTtcblx0XHRcdFx0XHRpZiAobW92ZSkge1xuXHRcdFx0XHRcdFx0c3RhcnQgPSBjdXJyZW50O1xuXHRcdFx0XHRcdFx0bW92ZSA9IGZhbHNlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRjb250cm9sID0gY3VycmVudDtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlICdoJzpcblx0XHRcdGNhc2UgJ3YnOlxuXHRcdFx0XHR2YXIgY29vcmQgPSBsb3dlciA9PT0gJ2gnID8gJ3gnIDogJ3knO1xuXHRcdFx0XHRjdXJyZW50ID0gY3VycmVudC5jbG9uZSgpO1xuXHRcdFx0XHRmb3IgKHZhciBqID0gMDsgaiA8IGxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdFx0Y3VycmVudFtjb29yZF0gPSBnZXRDb29yZChqLCBjb29yZCk7XG5cdFx0XHRcdFx0dGhpcy5saW5lVG8oY3VycmVudCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0Y29udHJvbCA9IGN1cnJlbnQ7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSAnYyc6XG5cdFx0XHRcdGZvciAodmFyIGogPSAwOyBqIDwgbGVuZ3RoOyBqICs9IDYpIHtcblx0XHRcdFx0XHR0aGlzLmN1YmljQ3VydmVUbyhcblx0XHRcdFx0XHRcdFx0Z2V0UG9pbnQoaiksXG5cdFx0XHRcdFx0XHRcdGNvbnRyb2wgPSBnZXRQb2ludChqICsgMiksXG5cdFx0XHRcdFx0XHRcdGN1cnJlbnQgPSBnZXRQb2ludChqICsgNCkpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSAncyc6XG5cdFx0XHRcdGZvciAodmFyIGogPSAwOyBqIDwgbGVuZ3RoOyBqICs9IDQpIHtcblx0XHRcdFx0XHR0aGlzLmN1YmljQ3VydmVUbyhcblx0XHRcdFx0XHRcdFx0L1tjc10vLnRlc3QocHJldmlvdXMpXG5cdFx0XHRcdFx0XHRcdFx0XHQ/IGN1cnJlbnQubXVsdGlwbHkoMikuc3VidHJhY3QoY29udHJvbClcblx0XHRcdFx0XHRcdFx0XHRcdDogY3VycmVudCxcblx0XHRcdFx0XHRcdFx0Y29udHJvbCA9IGdldFBvaW50KGopLFxuXHRcdFx0XHRcdFx0XHRjdXJyZW50ID0gZ2V0UG9pbnQoaiArIDIpKTtcblx0XHRcdFx0XHRwcmV2aW91cyA9IGxvd2VyO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSAncSc6XG5cdFx0XHRcdGZvciAodmFyIGogPSAwOyBqIDwgbGVuZ3RoOyBqICs9IDQpIHtcblx0XHRcdFx0XHR0aGlzLnF1YWRyYXRpY0N1cnZlVG8oXG5cdFx0XHRcdFx0XHRcdGNvbnRyb2wgPSBnZXRQb2ludChqKSxcblx0XHRcdFx0XHRcdFx0Y3VycmVudCA9IGdldFBvaW50KGogKyAyKSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlICd0Jzpcblx0XHRcdFx0Zm9yICh2YXIgaiA9IDA7IGogPCBsZW5ndGg7IGogKz0gMikge1xuXHRcdFx0XHRcdHRoaXMucXVhZHJhdGljQ3VydmVUbyhcblx0XHRcdFx0XHRcdFx0Y29udHJvbCA9ICgvW3F0XS8udGVzdChwcmV2aW91cylcblx0XHRcdFx0XHRcdFx0XHRcdD8gY3VycmVudC5tdWx0aXBseSgyKS5zdWJ0cmFjdChjb250cm9sKVxuXHRcdFx0XHRcdFx0XHRcdFx0OiBjdXJyZW50KSxcblx0XHRcdFx0XHRcdFx0Y3VycmVudCA9IGdldFBvaW50KGopKTtcblx0XHRcdFx0XHRwcmV2aW91cyA9IGxvd2VyO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSAnYSc6XG5cdFx0XHRcdGZvciAodmFyIGogPSAwOyBqIDwgbGVuZ3RoOyBqICs9IDcpIHtcblx0XHRcdFx0XHR0aGlzLmFyY1RvKGN1cnJlbnQgPSBnZXRQb2ludChqICsgNSksXG5cdFx0XHRcdFx0XHRcdG5ldyBTaXplKCtjb29yZHNbal0sICtjb29yZHNbaiArIDFdKSxcblx0XHRcdFx0XHRcdFx0K2Nvb3Jkc1tqICsgMl0sICtjb29yZHNbaiArIDRdLCArY29vcmRzW2ogKyAzXSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlICd6Jzpcblx0XHRcdFx0dGhpcy5jbG9zZVBhdGgoMWUtMTIpO1xuXHRcdFx0XHRjdXJyZW50ID0gc3RhcnQ7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0cHJldmlvdXMgPSBsb3dlcjtcblx0XHR9XG5cdH0sXG5cblx0X2NhbkNvbXBvc2l0ZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuICEodGhpcy5oYXNGaWxsKCkgJiYgdGhpcy5oYXNTdHJva2UoKSk7XG5cdH0sXG5cblx0X2NvbnRhaW5zOiBmdW5jdGlvbihwb2ludCkge1xuXHRcdHZhciB3aW5kaW5nID0gcG9pbnQuaXNJbnNpZGUoXG5cdFx0XHRcdHRoaXMuZ2V0Qm91bmRzKHsgaW50ZXJuYWw6IHRydWUsIGhhbmRsZTogdHJ1ZSB9KSlcblx0XHRcdFx0XHQ/IHRoaXMuX2dldFdpbmRpbmcocG9pbnQpXG5cdFx0XHRcdFx0OiB7fTtcblx0XHRyZXR1cm4gd2luZGluZy5vblBhdGggfHwgISEodGhpcy5nZXRGaWxsUnVsZSgpID09PSAnZXZlbm9kZCdcblx0XHRcdFx0PyB3aW5kaW5nLndpbmRpbmdMICYgMSB8fCB3aW5kaW5nLndpbmRpbmdSICYgMVxuXHRcdFx0XHQ6IHdpbmRpbmcud2luZGluZyk7XG5cdH0sXG5cblx0Z2V0SW50ZXJzZWN0aW9uczogZnVuY3Rpb24ocGF0aCwgaW5jbHVkZSwgX21hdHJpeCwgX3JldHVybkZpcnN0KSB7XG5cdFx0dmFyIHNlbGYgPSB0aGlzID09PSBwYXRoIHx8ICFwYXRoLFxuXHRcdFx0bWF0cml4MSA9IHRoaXMuX21hdHJpeC5fb3JOdWxsSWZJZGVudGl0eSgpLFxuXHRcdFx0bWF0cml4MiA9IHNlbGYgPyBtYXRyaXgxXG5cdFx0XHRcdDogKF9tYXRyaXggfHwgcGF0aC5fbWF0cml4KS5fb3JOdWxsSWZJZGVudGl0eSgpO1xuXHRcdHJldHVybiBzZWxmIHx8IHRoaXMuZ2V0Qm91bmRzKG1hdHJpeDEpLmludGVyc2VjdHMoXG5cdFx0XHRcdHBhdGguZ2V0Qm91bmRzKG1hdHJpeDIpLCAxZS0xMilcblx0XHRcdFx0PyBDdXJ2ZS5nZXRJbnRlcnNlY3Rpb25zKFxuXHRcdFx0XHRcdFx0dGhpcy5nZXRDdXJ2ZXMoKSwgIXNlbGYgJiYgcGF0aC5nZXRDdXJ2ZXMoKSwgaW5jbHVkZSxcblx0XHRcdFx0XHRcdG1hdHJpeDEsIG1hdHJpeDIsIF9yZXR1cm5GaXJzdClcblx0XHRcdFx0OiBbXTtcblx0fSxcblxuXHRnZXRDcm9zc2luZ3M6IGZ1bmN0aW9uKHBhdGgpIHtcblx0XHRyZXR1cm4gdGhpcy5nZXRJbnRlcnNlY3Rpb25zKHBhdGgsIGZ1bmN0aW9uKGludGVyKSB7XG5cdFx0XHRyZXR1cm4gaW50ZXIuaGFzT3ZlcmxhcCgpIHx8IGludGVyLmlzQ3Jvc3NpbmcoKTtcblx0XHR9KTtcblx0fSxcblxuXHRnZXROZWFyZXN0TG9jYXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBwb2ludCA9IFBvaW50LnJlYWQoYXJndW1lbnRzKSxcblx0XHRcdGN1cnZlcyA9IHRoaXMuZ2V0Q3VydmVzKCksXG5cdFx0XHRtaW5EaXN0ID0gSW5maW5pdHksXG5cdFx0XHRtaW5Mb2MgPSBudWxsO1xuXHRcdGZvciAodmFyIGkgPSAwLCBsID0gY3VydmVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuXHRcdFx0dmFyIGxvYyA9IGN1cnZlc1tpXS5nZXROZWFyZXN0TG9jYXRpb24ocG9pbnQpO1xuXHRcdFx0aWYgKGxvYy5fZGlzdGFuY2UgPCBtaW5EaXN0KSB7XG5cdFx0XHRcdG1pbkRpc3QgPSBsb2MuX2Rpc3RhbmNlO1xuXHRcdFx0XHRtaW5Mb2MgPSBsb2M7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBtaW5Mb2M7XG5cdH0sXG5cblx0Z2V0TmVhcmVzdFBvaW50OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgbG9jID0gdGhpcy5nZXROZWFyZXN0TG9jYXRpb24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblx0XHRyZXR1cm4gbG9jID8gbG9jLmdldFBvaW50KCkgOiBsb2M7XG5cdH0sXG5cblx0aW50ZXJwb2xhdGU6IGZ1bmN0aW9uKGZyb20sIHRvLCBmYWN0b3IpIHtcblx0XHR2YXIgaXNQYXRoID0gIXRoaXMuX2NoaWxkcmVuLFxuXHRcdFx0bmFtZSA9IGlzUGF0aCA/ICdfc2VnbWVudHMnIDogJ19jaGlsZHJlbicsXG5cdFx0XHRpdGVtc0Zyb20gPSBmcm9tW25hbWVdLFxuXHRcdFx0aXRlbXNUbyA9IHRvW25hbWVdLFxuXHRcdFx0aXRlbXMgPSB0aGlzW25hbWVdO1xuXHRcdGlmICghaXRlbXNGcm9tIHx8ICFpdGVtc1RvIHx8IGl0ZW1zRnJvbS5sZW5ndGggIT09IGl0ZW1zVG8ubGVuZ3RoKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgb3BlcmFuZHMgaW4gaW50ZXJwb2xhdGUoKSBjYWxsOiAnICtcblx0XHRcdFx0XHRmcm9tICsgJywgJyArIHRvKTtcblx0XHR9XG5cdFx0dmFyIGN1cnJlbnQgPSBpdGVtcy5sZW5ndGgsXG5cdFx0XHRsZW5ndGggPSBpdGVtc1RvLmxlbmd0aDtcblx0XHRpZiAoY3VycmVudCA8IGxlbmd0aCkge1xuXHRcdFx0dmFyIGN0b3IgPSBpc1BhdGggPyBTZWdtZW50IDogUGF0aDtcblx0XHRcdGZvciAodmFyIGkgPSBjdXJyZW50OyBpIDwgbGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0dGhpcy5hZGQobmV3IGN0b3IoKSk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIGlmIChjdXJyZW50ID4gbGVuZ3RoKSB7XG5cdFx0XHR0aGlzW2lzUGF0aCA/ICdyZW1vdmVTZWdtZW50cycgOiAncmVtb3ZlQ2hpbGRyZW4nXShsZW5ndGgsIGN1cnJlbnQpO1xuXHRcdH1cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG5cdFx0XHRpdGVtc1tpXS5pbnRlcnBvbGF0ZShpdGVtc0Zyb21baV0sIGl0ZW1zVG9baV0sIGZhY3Rvcik7XG5cdFx0fVxuXHRcdGlmIChpc1BhdGgpIHtcblx0XHRcdHRoaXMuc2V0Q2xvc2VkKGZyb20uX2Nsb3NlZCk7XG5cdFx0XHR0aGlzLl9jaGFuZ2VkKDkpO1xuXHRcdH1cblx0fSxcblxuXHRjb21wYXJlOiBmdW5jdGlvbihwYXRoKSB7XG5cdFx0dmFyIG9rID0gZmFsc2U7XG5cdFx0aWYgKHBhdGgpIHtcblx0XHRcdHZhciBwYXRoczEgPSB0aGlzLl9jaGlsZHJlbiB8fCBbdGhpc10sXG5cdFx0XHRcdHBhdGhzMiA9IHBhdGguX2NoaWxkcmVuID8gcGF0aC5fY2hpbGRyZW4uc2xpY2UoKSA6IFtwYXRoXSxcblx0XHRcdFx0bGVuZ3RoMSA9IHBhdGhzMS5sZW5ndGgsXG5cdFx0XHRcdGxlbmd0aDIgPSBwYXRoczIubGVuZ3RoLFxuXHRcdFx0XHRtYXRjaGVkID0gW10sXG5cdFx0XHRcdGNvdW50ID0gMDtcblx0XHRcdG9rID0gdHJ1ZTtcblx0XHRcdGZvciAodmFyIGkxID0gbGVuZ3RoMSAtIDE7IGkxID49IDAgJiYgb2s7IGkxLS0pIHtcblx0XHRcdFx0dmFyIHBhdGgxID0gcGF0aHMxW2kxXTtcblx0XHRcdFx0b2sgPSBmYWxzZTtcblx0XHRcdFx0Zm9yICh2YXIgaTIgPSBsZW5ndGgyIC0gMTsgaTIgPj0gMCAmJiAhb2s7IGkyLS0pIHtcblx0XHRcdFx0XHRpZiAocGF0aDEuY29tcGFyZShwYXRoczJbaTJdKSkge1xuXHRcdFx0XHRcdFx0aWYgKCFtYXRjaGVkW2kyXSkge1xuXHRcdFx0XHRcdFx0XHRtYXRjaGVkW2kyXSA9IHRydWU7XG5cdFx0XHRcdFx0XHRcdGNvdW50Kys7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRvayA9IHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRvayA9IG9rICYmIGNvdW50ID09PSBsZW5ndGgyO1xuXHRcdH1cblx0XHRyZXR1cm4gb2s7XG5cdH0sXG5cbn0pO1xuXG52YXIgUGF0aCA9IFBhdGhJdGVtLmV4dGVuZCh7XG5cdF9jbGFzczogJ1BhdGgnLFxuXHRfc2VyaWFsaXplRmllbGRzOiB7XG5cdFx0c2VnbWVudHM6IFtdLFxuXHRcdGNsb3NlZDogZmFsc2Vcblx0fSxcblxuXHRpbml0aWFsaXplOiBmdW5jdGlvbiBQYXRoKGFyZykge1xuXHRcdHRoaXMuX2Nsb3NlZCA9IGZhbHNlO1xuXHRcdHRoaXMuX3NlZ21lbnRzID0gW107XG5cdFx0dGhpcy5fdmVyc2lvbiA9IDA7XG5cdFx0dmFyIHNlZ21lbnRzID0gQXJyYXkuaXNBcnJheShhcmcpXG5cdFx0XHQ/IHR5cGVvZiBhcmdbMF0gPT09ICdvYmplY3QnXG5cdFx0XHRcdD8gYXJnXG5cdFx0XHRcdDogYXJndW1lbnRzXG5cdFx0XHQ6IGFyZyAmJiAoYXJnLnNpemUgPT09IHVuZGVmaW5lZCAmJiAoYXJnLnggIT09IHVuZGVmaW5lZFxuXHRcdFx0XHRcdHx8IGFyZy5wb2ludCAhPT0gdW5kZWZpbmVkKSlcblx0XHRcdFx0PyBhcmd1bWVudHNcblx0XHRcdFx0OiBudWxsO1xuXHRcdGlmIChzZWdtZW50cyAmJiBzZWdtZW50cy5sZW5ndGggPiAwKSB7XG5cdFx0XHR0aGlzLnNldFNlZ21lbnRzKHNlZ21lbnRzKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5fY3VydmVzID0gdW5kZWZpbmVkO1xuXHRcdFx0dGhpcy5fc2VnbWVudFNlbGVjdGlvbiA9IDA7XG5cdFx0XHRpZiAoIXNlZ21lbnRzICYmIHR5cGVvZiBhcmcgPT09ICdzdHJpbmcnKSB7XG5cdFx0XHRcdHRoaXMuc2V0UGF0aERhdGEoYXJnKTtcblx0XHRcdFx0YXJnID0gbnVsbDtcblx0XHRcdH1cblx0XHR9XG5cdFx0dGhpcy5faW5pdGlhbGl6ZSghc2VnbWVudHMgJiYgYXJnKTtcblx0fSxcblxuXHRfZXF1YWxzOiBmdW5jdGlvbihpdGVtKSB7XG5cdFx0cmV0dXJuIHRoaXMuX2Nsb3NlZCA9PT0gaXRlbS5fY2xvc2VkXG5cdFx0XHRcdCYmIEJhc2UuZXF1YWxzKHRoaXMuX3NlZ21lbnRzLCBpdGVtLl9zZWdtZW50cyk7XG5cdH0sXG5cblx0Y29weUNvbnRlbnQ6IGZ1bmN0aW9uKHNvdXJjZSkge1xuXHRcdHRoaXMuc2V0U2VnbWVudHMoc291cmNlLl9zZWdtZW50cyk7XG5cdFx0dGhpcy5fY2xvc2VkID0gc291cmNlLl9jbG9zZWQ7XG5cdH0sXG5cblx0X2NoYW5nZWQ6IGZ1bmN0aW9uIF9jaGFuZ2VkKGZsYWdzKSB7XG5cdFx0X2NoYW5nZWQuYmFzZS5jYWxsKHRoaXMsIGZsYWdzKTtcblx0XHRpZiAoZmxhZ3MgJiA4KSB7XG5cdFx0XHR0aGlzLl9sZW5ndGggPSB0aGlzLl9hcmVhID0gdW5kZWZpbmVkO1xuXHRcdFx0aWYgKGZsYWdzICYgMzIpIHtcblx0XHRcdFx0dGhpcy5fdmVyc2lvbisrO1xuXHRcdFx0fSBlbHNlIGlmICh0aGlzLl9jdXJ2ZXMpIHtcblx0XHRcdCAgIGZvciAodmFyIGkgPSAwLCBsID0gdGhpcy5fY3VydmVzLmxlbmd0aDsgaSA8IGw7IGkrKylcblx0XHRcdFx0XHR0aGlzLl9jdXJ2ZXNbaV0uX2NoYW5nZWQoKTtcblx0XHRcdH1cblx0XHR9IGVsc2UgaWYgKGZsYWdzICYgNjQpIHtcblx0XHRcdHRoaXMuX2JvdW5kcyA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdH0sXG5cblx0Z2V0U3R5bGU6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBwYXJlbnQgPSB0aGlzLl9wYXJlbnQ7XG5cdFx0cmV0dXJuIChwYXJlbnQgaW5zdGFuY2VvZiBDb21wb3VuZFBhdGggPyBwYXJlbnQgOiB0aGlzKS5fc3R5bGU7XG5cdH0sXG5cblx0Z2V0U2VnbWVudHM6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLl9zZWdtZW50cztcblx0fSxcblxuXHRzZXRTZWdtZW50czogZnVuY3Rpb24oc2VnbWVudHMpIHtcblx0XHR2YXIgZnVsbHlTZWxlY3RlZCA9IHRoaXMuaXNGdWxseVNlbGVjdGVkKCksXG5cdFx0XHRsZW5ndGggPSBzZWdtZW50cyAmJiBzZWdtZW50cy5sZW5ndGg7XG5cdFx0dGhpcy5fc2VnbWVudHMubGVuZ3RoID0gMDtcblx0XHR0aGlzLl9zZWdtZW50U2VsZWN0aW9uID0gMDtcblx0XHR0aGlzLl9jdXJ2ZXMgPSB1bmRlZmluZWQ7XG5cdFx0aWYgKGxlbmd0aCkge1xuXHRcdFx0dmFyIGxhc3QgPSBzZWdtZW50c1tsZW5ndGggLSAxXTtcblx0XHRcdGlmICh0eXBlb2YgbGFzdCA9PT0gJ2Jvb2xlYW4nKSB7XG5cdFx0XHRcdHRoaXMuc2V0Q2xvc2VkKGxhc3QpO1xuXHRcdFx0XHRsZW5ndGgtLTtcblx0XHRcdH1cblx0XHRcdHRoaXMuX2FkZChTZWdtZW50LnJlYWRMaXN0KHNlZ21lbnRzLCAwLCB7fSwgbGVuZ3RoKSk7XG5cdFx0fVxuXHRcdGlmIChmdWxseVNlbGVjdGVkKVxuXHRcdFx0dGhpcy5zZXRGdWxseVNlbGVjdGVkKHRydWUpO1xuXHR9LFxuXG5cdGdldEZpcnN0U2VnbWVudDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuX3NlZ21lbnRzWzBdO1xuXHR9LFxuXG5cdGdldExhc3RTZWdtZW50OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5fc2VnbWVudHNbdGhpcy5fc2VnbWVudHMubGVuZ3RoIC0gMV07XG5cdH0sXG5cblx0Z2V0Q3VydmVzOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgY3VydmVzID0gdGhpcy5fY3VydmVzLFxuXHRcdFx0c2VnbWVudHMgPSB0aGlzLl9zZWdtZW50cztcblx0XHRpZiAoIWN1cnZlcykge1xuXHRcdFx0dmFyIGxlbmd0aCA9IHRoaXMuX2NvdW50Q3VydmVzKCk7XG5cdFx0XHRjdXJ2ZXMgPSB0aGlzLl9jdXJ2ZXMgPSBuZXcgQXJyYXkobGVuZ3RoKTtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspXG5cdFx0XHRcdGN1cnZlc1tpXSA9IG5ldyBDdXJ2ZSh0aGlzLCBzZWdtZW50c1tpXSxcblx0XHRcdFx0XHRzZWdtZW50c1tpICsgMV0gfHwgc2VnbWVudHNbMF0pO1xuXHRcdH1cblx0XHRyZXR1cm4gY3VydmVzO1xuXHR9LFxuXG5cdGdldEZpcnN0Q3VydmU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmdldEN1cnZlcygpWzBdO1xuXHR9LFxuXG5cdGdldExhc3RDdXJ2ZTogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGN1cnZlcyA9IHRoaXMuZ2V0Q3VydmVzKCk7XG5cdFx0cmV0dXJuIGN1cnZlc1tjdXJ2ZXMubGVuZ3RoIC0gMV07XG5cdH0sXG5cblx0aXNDbG9zZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLl9jbG9zZWQ7XG5cdH0sXG5cblx0c2V0Q2xvc2VkOiBmdW5jdGlvbihjbG9zZWQpIHtcblx0XHRpZiAodGhpcy5fY2xvc2VkICE9IChjbG9zZWQgPSAhIWNsb3NlZCkpIHtcblx0XHRcdHRoaXMuX2Nsb3NlZCA9IGNsb3NlZDtcblx0XHRcdGlmICh0aGlzLl9jdXJ2ZXMpIHtcblx0XHRcdFx0dmFyIGxlbmd0aCA9IHRoaXMuX2N1cnZlcy5sZW5ndGggPSB0aGlzLl9jb3VudEN1cnZlcygpO1xuXHRcdFx0XHRpZiAoY2xvc2VkKVxuXHRcdFx0XHRcdHRoaXMuX2N1cnZlc1tsZW5ndGggLSAxXSA9IG5ldyBDdXJ2ZSh0aGlzLFxuXHRcdFx0XHRcdFx0dGhpcy5fc2VnbWVudHNbbGVuZ3RoIC0gMV0sIHRoaXMuX3NlZ21lbnRzWzBdKTtcblx0XHRcdH1cblx0XHRcdHRoaXMuX2NoYW5nZWQoNDEpO1xuXHRcdH1cblx0fVxufSwge1xuXHRiZWFuczogdHJ1ZSxcblxuXHRnZXRQYXRoRGF0YTogZnVuY3Rpb24oX21hdHJpeCwgX3ByZWNpc2lvbikge1xuXHRcdHZhciBzZWdtZW50cyA9IHRoaXMuX3NlZ21lbnRzLFxuXHRcdFx0bGVuZ3RoID0gc2VnbWVudHMubGVuZ3RoLFxuXHRcdFx0ZiA9IG5ldyBGb3JtYXR0ZXIoX3ByZWNpc2lvbiksXG5cdFx0XHRjb29yZHMgPSBuZXcgQXJyYXkoNiksXG5cdFx0XHRmaXJzdCA9IHRydWUsXG5cdFx0XHRjdXJYLCBjdXJZLFxuXHRcdFx0cHJldlgsIHByZXZZLFxuXHRcdFx0aW5YLCBpblksXG5cdFx0XHRvdXRYLCBvdXRZLFxuXHRcdFx0cGFydHMgPSBbXTtcblxuXHRcdGZ1bmN0aW9uIGFkZFNlZ21lbnQoc2VnbWVudCwgc2tpcExpbmUpIHtcblx0XHRcdHNlZ21lbnQuX3RyYW5zZm9ybUNvb3JkaW5hdGVzKF9tYXRyaXgsIGNvb3Jkcyk7XG5cdFx0XHRjdXJYID0gY29vcmRzWzBdO1xuXHRcdFx0Y3VyWSA9IGNvb3Jkc1sxXTtcblx0XHRcdGlmIChmaXJzdCkge1xuXHRcdFx0XHRwYXJ0cy5wdXNoKCdNJyArIGYucGFpcihjdXJYLCBjdXJZKSk7XG5cdFx0XHRcdGZpcnN0ID0gZmFsc2U7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRpblggPSBjb29yZHNbMl07XG5cdFx0XHRcdGluWSA9IGNvb3Jkc1szXTtcblx0XHRcdFx0aWYgKGluWCA9PT0gY3VyWCAmJiBpblkgPT09IGN1cllcblx0XHRcdFx0XHRcdCYmIG91dFggPT09IHByZXZYICYmIG91dFkgPT09IHByZXZZKSB7XG5cdFx0XHRcdFx0aWYgKCFza2lwTGluZSkge1xuXHRcdFx0XHRcdFx0dmFyIGR4ID0gY3VyWCAtIHByZXZYLFxuXHRcdFx0XHRcdFx0XHRkeSA9IGN1clkgLSBwcmV2WTtcblx0XHRcdFx0XHRcdHBhcnRzLnB1c2goXG5cdFx0XHRcdFx0XHRcdCAgZHggPT09IDAgPyAndicgKyBmLm51bWJlcihkeSlcblx0XHRcdFx0XHRcdFx0OiBkeSA9PT0gMCA/ICdoJyArIGYubnVtYmVyKGR4KVxuXHRcdFx0XHRcdFx0XHQ6ICdsJyArIGYucGFpcihkeCwgZHkpKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cGFydHMucHVzaCgnYycgKyBmLnBhaXIob3V0WCAtIHByZXZYLCBvdXRZIC0gcHJldlkpXG5cdFx0XHRcdFx0XHRcdCArICcgJyArIGYucGFpciggaW5YIC0gcHJldlgsICBpblkgLSBwcmV2WSlcblx0XHRcdFx0XHRcdFx0ICsgJyAnICsgZi5wYWlyKGN1clggLSBwcmV2WCwgY3VyWSAtIHByZXZZKSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHByZXZYID0gY3VyWDtcblx0XHRcdHByZXZZID0gY3VyWTtcblx0XHRcdG91dFggPSBjb29yZHNbNF07XG5cdFx0XHRvdXRZID0gY29vcmRzWzVdO1xuXHRcdH1cblxuXHRcdGlmICghbGVuZ3RoKVxuXHRcdFx0cmV0dXJuICcnO1xuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKylcblx0XHRcdGFkZFNlZ21lbnQoc2VnbWVudHNbaV0pO1xuXHRcdGlmICh0aGlzLl9jbG9zZWQgJiYgbGVuZ3RoID4gMCkge1xuXHRcdFx0YWRkU2VnbWVudChzZWdtZW50c1swXSwgdHJ1ZSk7XG5cdFx0XHRwYXJ0cy5wdXNoKCd6Jyk7XG5cdFx0fVxuXHRcdHJldHVybiBwYXJ0cy5qb2luKCcnKTtcblx0fSxcblxuXHRpc0VtcHR5OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gIXRoaXMuX3NlZ21lbnRzLmxlbmd0aDtcblx0fSxcblxuXHRfdHJhbnNmb3JtQ29udGVudDogZnVuY3Rpb24obWF0cml4KSB7XG5cdFx0dmFyIHNlZ21lbnRzID0gdGhpcy5fc2VnbWVudHMsXG5cdFx0XHRjb29yZHMgPSBuZXcgQXJyYXkoNik7XG5cdFx0Zm9yICh2YXIgaSA9IDAsIGwgPSBzZWdtZW50cy5sZW5ndGg7IGkgPCBsOyBpKyspXG5cdFx0XHRzZWdtZW50c1tpXS5fdHJhbnNmb3JtQ29vcmRpbmF0ZXMobWF0cml4LCBjb29yZHMsIHRydWUpO1xuXHRcdHJldHVybiB0cnVlO1xuXHR9LFxuXG5cdF9hZGQ6IGZ1bmN0aW9uKHNlZ3MsIGluZGV4KSB7XG5cdFx0dmFyIHNlZ21lbnRzID0gdGhpcy5fc2VnbWVudHMsXG5cdFx0XHRjdXJ2ZXMgPSB0aGlzLl9jdXJ2ZXMsXG5cdFx0XHRhbW91bnQgPSBzZWdzLmxlbmd0aCxcblx0XHRcdGFwcGVuZCA9IGluZGV4ID09IG51bGwsXG5cdFx0XHRpbmRleCA9IGFwcGVuZCA/IHNlZ21lbnRzLmxlbmd0aCA6IGluZGV4O1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgYW1vdW50OyBpKyspIHtcblx0XHRcdHZhciBzZWdtZW50ID0gc2Vnc1tpXTtcblx0XHRcdGlmIChzZWdtZW50Ll9wYXRoKVxuXHRcdFx0XHRzZWdtZW50ID0gc2Vnc1tpXSA9IHNlZ21lbnQuY2xvbmUoKTtcblx0XHRcdHNlZ21lbnQuX3BhdGggPSB0aGlzO1xuXHRcdFx0c2VnbWVudC5faW5kZXggPSBpbmRleCArIGk7XG5cdFx0XHRpZiAoc2VnbWVudC5fc2VsZWN0aW9uKVxuXHRcdFx0XHR0aGlzLl91cGRhdGVTZWxlY3Rpb24oc2VnbWVudCwgMCwgc2VnbWVudC5fc2VsZWN0aW9uKTtcblx0XHR9XG5cdFx0aWYgKGFwcGVuZCkge1xuXHRcdFx0QmFzZS5wdXNoKHNlZ21lbnRzLCBzZWdzKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0c2VnbWVudHMuc3BsaWNlLmFwcGx5KHNlZ21lbnRzLCBbaW5kZXgsIDBdLmNvbmNhdChzZWdzKSk7XG5cdFx0XHRmb3IgKHZhciBpID0gaW5kZXggKyBhbW91bnQsIGwgPSBzZWdtZW50cy5sZW5ndGg7IGkgPCBsOyBpKyspXG5cdFx0XHRcdHNlZ21lbnRzW2ldLl9pbmRleCA9IGk7XG5cdFx0fVxuXHRcdGlmIChjdXJ2ZXMpIHtcblx0XHRcdHZhciB0b3RhbCA9IHRoaXMuX2NvdW50Q3VydmVzKCksXG5cdFx0XHRcdHN0YXJ0ID0gaW5kZXggPiAwICYmIGluZGV4ICsgYW1vdW50IC0gMSA9PT0gdG90YWwgPyBpbmRleCAtIDFcblx0XHRcdFx0XHQ6IGluZGV4LFxuXHRcdFx0XHRpbnNlcnQgPSBzdGFydCxcblx0XHRcdFx0ZW5kID0gTWF0aC5taW4oc3RhcnQgKyBhbW91bnQsIHRvdGFsKTtcblx0XHRcdGlmIChzZWdzLl9jdXJ2ZXMpIHtcblx0XHRcdFx0Y3VydmVzLnNwbGljZS5hcHBseShjdXJ2ZXMsIFtzdGFydCwgMF0uY29uY2F0KHNlZ3MuX2N1cnZlcykpO1xuXHRcdFx0XHRpbnNlcnQgKz0gc2Vncy5fY3VydmVzLmxlbmd0aDtcblx0XHRcdH1cblx0XHRcdGZvciAodmFyIGkgPSBpbnNlcnQ7IGkgPCBlbmQ7IGkrKylcblx0XHRcdFx0Y3VydmVzLnNwbGljZShpLCAwLCBuZXcgQ3VydmUodGhpcywgbnVsbCwgbnVsbCkpO1xuXHRcdFx0dGhpcy5fYWRqdXN0Q3VydmVzKHN0YXJ0LCBlbmQpO1xuXHRcdH1cblx0XHR0aGlzLl9jaGFuZ2VkKDQxKTtcblx0XHRyZXR1cm4gc2Vncztcblx0fSxcblxuXHRfYWRqdXN0Q3VydmVzOiBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG5cdFx0dmFyIHNlZ21lbnRzID0gdGhpcy5fc2VnbWVudHMsXG5cdFx0XHRjdXJ2ZXMgPSB0aGlzLl9jdXJ2ZXMsXG5cdFx0XHRjdXJ2ZTtcblx0XHRmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkrKykge1xuXHRcdFx0Y3VydmUgPSBjdXJ2ZXNbaV07XG5cdFx0XHRjdXJ2ZS5fcGF0aCA9IHRoaXM7XG5cdFx0XHRjdXJ2ZS5fc2VnbWVudDEgPSBzZWdtZW50c1tpXTtcblx0XHRcdGN1cnZlLl9zZWdtZW50MiA9IHNlZ21lbnRzW2kgKyAxXSB8fCBzZWdtZW50c1swXTtcblx0XHRcdGN1cnZlLl9jaGFuZ2VkKCk7XG5cdFx0fVxuXHRcdGlmIChjdXJ2ZSA9IGN1cnZlc1t0aGlzLl9jbG9zZWQgJiYgIXN0YXJ0ID8gc2VnbWVudHMubGVuZ3RoIC0gMVxuXHRcdFx0XHQ6IHN0YXJ0IC0gMV0pIHtcblx0XHRcdGN1cnZlLl9zZWdtZW50MiA9IHNlZ21lbnRzW3N0YXJ0XSB8fCBzZWdtZW50c1swXTtcblx0XHRcdGN1cnZlLl9jaGFuZ2VkKCk7XG5cdFx0fVxuXHRcdGlmIChjdXJ2ZSA9IGN1cnZlc1tlbmRdKSB7XG5cdFx0XHRjdXJ2ZS5fc2VnbWVudDEgPSBzZWdtZW50c1tlbmRdO1xuXHRcdFx0Y3VydmUuX2NoYW5nZWQoKTtcblx0XHR9XG5cdH0sXG5cblx0X2NvdW50Q3VydmVzOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgbGVuZ3RoID0gdGhpcy5fc2VnbWVudHMubGVuZ3RoO1xuXHRcdHJldHVybiAhdGhpcy5fY2xvc2VkICYmIGxlbmd0aCA+IDAgPyBsZW5ndGggLSAxIDogbGVuZ3RoO1xuXHR9LFxuXG5cdGFkZDogZnVuY3Rpb24oc2VnbWVudDEgKSB7XG5cdFx0cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIHR5cGVvZiBzZWdtZW50MSAhPT0gJ251bWJlcidcblx0XHRcdD8gdGhpcy5fYWRkKFNlZ21lbnQucmVhZExpc3QoYXJndW1lbnRzKSlcblx0XHRcdDogdGhpcy5fYWRkKFsgU2VnbWVudC5yZWFkKGFyZ3VtZW50cykgXSlbMF07XG5cdH0sXG5cblx0aW5zZXJ0OiBmdW5jdGlvbihpbmRleCwgc2VnbWVudDEgKSB7XG5cdFx0cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIHR5cGVvZiBzZWdtZW50MSAhPT0gJ251bWJlcidcblx0XHRcdD8gdGhpcy5fYWRkKFNlZ21lbnQucmVhZExpc3QoYXJndW1lbnRzLCAxKSwgaW5kZXgpXG5cdFx0XHQ6IHRoaXMuX2FkZChbIFNlZ21lbnQucmVhZChhcmd1bWVudHMsIDEpIF0sIGluZGV4KVswXTtcblx0fSxcblxuXHRhZGRTZWdtZW50OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5fYWRkKFsgU2VnbWVudC5yZWFkKGFyZ3VtZW50cykgXSlbMF07XG5cdH0sXG5cblx0aW5zZXJ0U2VnbWVudDogZnVuY3Rpb24oaW5kZXggKSB7XG5cdFx0cmV0dXJuIHRoaXMuX2FkZChbIFNlZ21lbnQucmVhZChhcmd1bWVudHMsIDEpIF0sIGluZGV4KVswXTtcblx0fSxcblxuXHRhZGRTZWdtZW50czogZnVuY3Rpb24oc2VnbWVudHMpIHtcblx0XHRyZXR1cm4gdGhpcy5fYWRkKFNlZ21lbnQucmVhZExpc3Qoc2VnbWVudHMpKTtcblx0fSxcblxuXHRpbnNlcnRTZWdtZW50czogZnVuY3Rpb24oaW5kZXgsIHNlZ21lbnRzKSB7XG5cdFx0cmV0dXJuIHRoaXMuX2FkZChTZWdtZW50LnJlYWRMaXN0KHNlZ21lbnRzKSwgaW5kZXgpO1xuXHR9LFxuXG5cdHJlbW92ZVNlZ21lbnQ6IGZ1bmN0aW9uKGluZGV4KSB7XG5cdFx0cmV0dXJuIHRoaXMucmVtb3ZlU2VnbWVudHMoaW5kZXgsIGluZGV4ICsgMSlbMF0gfHwgbnVsbDtcblx0fSxcblxuXHRyZW1vdmVTZWdtZW50czogZnVuY3Rpb24oc3RhcnQsIGVuZCwgX2luY2x1ZGVDdXJ2ZXMpIHtcblx0XHRzdGFydCA9IHN0YXJ0IHx8IDA7XG5cdFx0ZW5kID0gQmFzZS5waWNrKGVuZCwgdGhpcy5fc2VnbWVudHMubGVuZ3RoKTtcblx0XHR2YXIgc2VnbWVudHMgPSB0aGlzLl9zZWdtZW50cyxcblx0XHRcdGN1cnZlcyA9IHRoaXMuX2N1cnZlcyxcblx0XHRcdGNvdW50ID0gc2VnbWVudHMubGVuZ3RoLFxuXHRcdFx0cmVtb3ZlZCA9IHNlZ21lbnRzLnNwbGljZShzdGFydCwgZW5kIC0gc3RhcnQpLFxuXHRcdFx0YW1vdW50ID0gcmVtb3ZlZC5sZW5ndGg7XG5cdFx0aWYgKCFhbW91bnQpXG5cdFx0XHRyZXR1cm4gcmVtb3ZlZDtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGFtb3VudDsgaSsrKSB7XG5cdFx0XHR2YXIgc2VnbWVudCA9IHJlbW92ZWRbaV07XG5cdFx0XHRpZiAoc2VnbWVudC5fc2VsZWN0aW9uKVxuXHRcdFx0XHR0aGlzLl91cGRhdGVTZWxlY3Rpb24oc2VnbWVudCwgc2VnbWVudC5fc2VsZWN0aW9uLCAwKTtcblx0XHRcdHNlZ21lbnQuX2luZGV4ID0gc2VnbWVudC5fcGF0aCA9IG51bGw7XG5cdFx0fVxuXHRcdGZvciAodmFyIGkgPSBzdGFydCwgbCA9IHNlZ21lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKylcblx0XHRcdHNlZ21lbnRzW2ldLl9pbmRleCA9IGk7XG5cdFx0aWYgKGN1cnZlcykge1xuXHRcdFx0dmFyIGluZGV4ID0gc3RhcnQgPiAwICYmIGVuZCA9PT0gY291bnQgKyAodGhpcy5fY2xvc2VkID8gMSA6IDApXG5cdFx0XHRcdFx0PyBzdGFydCAtIDFcblx0XHRcdFx0XHQ6IHN0YXJ0LFxuXHRcdFx0XHRjdXJ2ZXMgPSBjdXJ2ZXMuc3BsaWNlKGluZGV4LCBhbW91bnQpO1xuXHRcdFx0Zm9yICh2YXIgaSA9IGN1cnZlcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSlcblx0XHRcdFx0Y3VydmVzW2ldLl9wYXRoID0gbnVsbDtcblx0XHRcdGlmIChfaW5jbHVkZUN1cnZlcylcblx0XHRcdFx0cmVtb3ZlZC5fY3VydmVzID0gY3VydmVzLnNsaWNlKDEpO1xuXHRcdFx0dGhpcy5fYWRqdXN0Q3VydmVzKGluZGV4LCBpbmRleCk7XG5cdFx0fVxuXHRcdHRoaXMuX2NoYW5nZWQoNDEpO1xuXHRcdHJldHVybiByZW1vdmVkO1xuXHR9LFxuXG5cdGNsZWFyOiAnI3JlbW92ZVNlZ21lbnRzJyxcblxuXHRoYXNIYW5kbGVzOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgc2VnbWVudHMgPSB0aGlzLl9zZWdtZW50cztcblx0XHRmb3IgKHZhciBpID0gMCwgbCA9IHNlZ21lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuXHRcdFx0aWYgKHNlZ21lbnRzW2ldLmhhc0hhbmRsZXMoKSlcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXHRcdHJldHVybiBmYWxzZTtcblx0fSxcblxuXHRjbGVhckhhbmRsZXM6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBzZWdtZW50cyA9IHRoaXMuX3NlZ21lbnRzO1xuXHRcdGZvciAodmFyIGkgPSAwLCBsID0gc2VnbWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrKVxuXHRcdFx0c2VnbWVudHNbaV0uY2xlYXJIYW5kbGVzKCk7XG5cdH0sXG5cblx0Z2V0TGVuZ3RoOiBmdW5jdGlvbigpIHtcblx0XHRpZiAodGhpcy5fbGVuZ3RoID09IG51bGwpIHtcblx0XHRcdHZhciBjdXJ2ZXMgPSB0aGlzLmdldEN1cnZlcygpLFxuXHRcdFx0XHRsZW5ndGggPSAwO1xuXHRcdFx0Zm9yICh2YXIgaSA9IDAsIGwgPSBjdXJ2ZXMubGVuZ3RoOyBpIDwgbDsgaSsrKVxuXHRcdFx0XHRsZW5ndGggKz0gY3VydmVzW2ldLmdldExlbmd0aCgpO1xuXHRcdFx0dGhpcy5fbGVuZ3RoID0gbGVuZ3RoO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5fbGVuZ3RoO1xuXHR9LFxuXG5cdGdldEFyZWE6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBhcmVhID0gdGhpcy5fYXJlYTtcblx0XHRpZiAoYXJlYSA9PSBudWxsKSB7XG5cdFx0XHR2YXIgc2VnbWVudHMgPSB0aGlzLl9zZWdtZW50cyxcblx0XHRcdFx0Y2xvc2VkID0gdGhpcy5fY2xvc2VkO1xuXHRcdFx0YXJlYSA9IDA7XG5cdFx0XHRmb3IgKHZhciBpID0gMCwgbCA9IHNlZ21lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuXHRcdFx0XHR2YXIgbGFzdCA9IGkgKyAxID09PSBsO1xuXHRcdFx0XHRhcmVhICs9IEN1cnZlLmdldEFyZWEoQ3VydmUuZ2V0VmFsdWVzKFxuXHRcdFx0XHRcdFx0c2VnbWVudHNbaV0sIHNlZ21lbnRzW2xhc3QgPyAwIDogaSArIDFdLFxuXHRcdFx0XHRcdFx0bnVsbCwgbGFzdCAmJiAhY2xvc2VkKSk7XG5cdFx0XHR9XG5cdFx0XHR0aGlzLl9hcmVhID0gYXJlYTtcblx0XHR9XG5cdFx0cmV0dXJuIGFyZWE7XG5cdH0sXG5cblx0aXNGdWxseVNlbGVjdGVkOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgbGVuZ3RoID0gdGhpcy5fc2VnbWVudHMubGVuZ3RoO1xuXHRcdHJldHVybiB0aGlzLmlzU2VsZWN0ZWQoKSAmJiBsZW5ndGggPiAwICYmIHRoaXMuX3NlZ21lbnRTZWxlY3Rpb25cblx0XHRcdFx0PT09IGxlbmd0aCAqIDc7XG5cdH0sXG5cblx0c2V0RnVsbHlTZWxlY3RlZDogZnVuY3Rpb24oc2VsZWN0ZWQpIHtcblx0XHRpZiAoc2VsZWN0ZWQpXG5cdFx0XHR0aGlzLl9zZWxlY3RTZWdtZW50cyh0cnVlKTtcblx0XHR0aGlzLnNldFNlbGVjdGVkKHNlbGVjdGVkKTtcblx0fSxcblxuXHRzZXRTZWxlY3Rpb246IGZ1bmN0aW9uIHNldFNlbGVjdGlvbihzZWxlY3Rpb24pIHtcblx0XHRpZiAoIShzZWxlY3Rpb24gJiAxKSlcblx0XHRcdHRoaXMuX3NlbGVjdFNlZ21lbnRzKGZhbHNlKTtcblx0XHRzZXRTZWxlY3Rpb24uYmFzZS5jYWxsKHRoaXMsIHNlbGVjdGlvbik7XG5cdH0sXG5cblx0X3NlbGVjdFNlZ21lbnRzOiBmdW5jdGlvbihzZWxlY3RlZCkge1xuXHRcdHZhciBzZWdtZW50cyA9IHRoaXMuX3NlZ21lbnRzLFxuXHRcdFx0bGVuZ3RoID0gc2VnbWVudHMubGVuZ3RoLFxuXHRcdFx0c2VsZWN0aW9uID0gc2VsZWN0ZWQgPyA3IDogMDtcblx0XHR0aGlzLl9zZWdtZW50U2VsZWN0aW9uID0gc2VsZWN0aW9uICogbGVuZ3RoO1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspXG5cdFx0XHRzZWdtZW50c1tpXS5fc2VsZWN0aW9uID0gc2VsZWN0aW9uO1xuXHR9LFxuXG5cdF91cGRhdGVTZWxlY3Rpb246IGZ1bmN0aW9uKHNlZ21lbnQsIG9sZFNlbGVjdGlvbiwgbmV3U2VsZWN0aW9uKSB7XG5cdFx0c2VnbWVudC5fc2VsZWN0aW9uID0gbmV3U2VsZWN0aW9uO1xuXHRcdHZhciBzZWxlY3Rpb24gPSB0aGlzLl9zZWdtZW50U2VsZWN0aW9uICs9IG5ld1NlbGVjdGlvbiAtIG9sZFNlbGVjdGlvbjtcblx0XHRpZiAoc2VsZWN0aW9uID4gMClcblx0XHRcdHRoaXMuc2V0U2VsZWN0ZWQodHJ1ZSk7XG5cdH0sXG5cblx0ZGl2aWRlQXQ6IGZ1bmN0aW9uKGxvY2F0aW9uKSB7XG5cdFx0dmFyIGxvYyA9IHRoaXMuZ2V0TG9jYXRpb25BdChsb2NhdGlvbiksXG5cdFx0XHRjdXJ2ZTtcblx0XHRyZXR1cm4gbG9jICYmIChjdXJ2ZSA9IGxvYy5nZXRDdXJ2ZSgpLmRpdmlkZUF0KGxvYy5nZXRDdXJ2ZU9mZnNldCgpKSlcblx0XHRcdFx0PyBjdXJ2ZS5fc2VnbWVudDFcblx0XHRcdFx0OiBudWxsO1xuXHR9LFxuXG5cdHNwbGl0QXQ6IGZ1bmN0aW9uKGxvY2F0aW9uKSB7XG5cdFx0dmFyIGxvYyA9IHRoaXMuZ2V0TG9jYXRpb25BdChsb2NhdGlvbiksXG5cdFx0XHRpbmRleCA9IGxvYyAmJiBsb2MuaW5kZXgsXG5cdFx0XHR0aW1lID0gbG9jICYmIGxvYy50aW1lLFxuXHRcdFx0dE1pbiA9IDFlLTgsXG5cdFx0XHR0TWF4ID0gMSAtIHRNaW47XG5cdFx0aWYgKHRpbWUgPiB0TWF4KSB7XG5cdFx0XHRpbmRleCsrO1xuXHRcdFx0dGltZSA9IDA7XG5cdFx0fVxuXHRcdHZhciBjdXJ2ZXMgPSB0aGlzLmdldEN1cnZlcygpO1xuXHRcdGlmIChpbmRleCA+PSAwICYmIGluZGV4IDwgY3VydmVzLmxlbmd0aCkge1xuXHRcdFx0aWYgKHRpbWUgPj0gdE1pbikge1xuXHRcdFx0XHRjdXJ2ZXNbaW5kZXgrK10uZGl2aWRlQXRUaW1lKHRpbWUpO1xuXHRcdFx0fVxuXHRcdFx0dmFyIHNlZ3MgPSB0aGlzLnJlbW92ZVNlZ21lbnRzKGluZGV4LCB0aGlzLl9zZWdtZW50cy5sZW5ndGgsIHRydWUpLFxuXHRcdFx0XHRwYXRoO1xuXHRcdFx0aWYgKHRoaXMuX2Nsb3NlZCkge1xuXHRcdFx0XHR0aGlzLnNldENsb3NlZChmYWxzZSk7XG5cdFx0XHRcdHBhdGggPSB0aGlzO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cGF0aCA9IG5ldyBQYXRoKEl0ZW0uTk9fSU5TRVJUKTtcblx0XHRcdFx0cGF0aC5pbnNlcnRBYm92ZSh0aGlzKTtcblx0XHRcdFx0cGF0aC5jb3B5QXR0cmlidXRlcyh0aGlzKTtcblx0XHRcdH1cblx0XHRcdHBhdGguX2FkZChzZWdzLCAwKTtcblx0XHRcdHRoaXMuYWRkU2VnbWVudChzZWdzWzBdKTtcblx0XHRcdHJldHVybiBwYXRoO1xuXHRcdH1cblx0XHRyZXR1cm4gbnVsbDtcblx0fSxcblxuXHRzcGxpdDogZnVuY3Rpb24oaW5kZXgsIHRpbWUpIHtcblx0XHR2YXIgY3VydmUsXG5cdFx0XHRsb2NhdGlvbiA9IHRpbWUgPT09IHVuZGVmaW5lZCA/IGluZGV4XG5cdFx0XHRcdDogKGN1cnZlID0gdGhpcy5nZXRDdXJ2ZXMoKVtpbmRleF0pXG5cdFx0XHRcdFx0JiYgY3VydmUuZ2V0TG9jYXRpb25BdFRpbWUodGltZSk7XG5cdFx0cmV0dXJuIGxvY2F0aW9uICE9IG51bGwgPyB0aGlzLnNwbGl0QXQobG9jYXRpb24pIDogbnVsbDtcblx0fSxcblxuXHRqb2luOiBmdW5jdGlvbihwYXRoLCB0b2xlcmFuY2UpIHtcblx0XHR2YXIgZXBzaWxvbiA9IHRvbGVyYW5jZSB8fCAwO1xuXHRcdGlmIChwYXRoICYmIHBhdGggIT09IHRoaXMpIHtcblx0XHRcdHZhciBzZWdtZW50cyA9IHBhdGguX3NlZ21lbnRzLFxuXHRcdFx0XHRsYXN0MSA9IHRoaXMuZ2V0TGFzdFNlZ21lbnQoKSxcblx0XHRcdFx0bGFzdDIgPSBwYXRoLmdldExhc3RTZWdtZW50KCk7XG5cdFx0XHRpZiAoIWxhc3QyKVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdGlmIChsYXN0MSAmJiBsYXN0MS5fcG9pbnQuaXNDbG9zZShsYXN0Mi5fcG9pbnQsIGVwc2lsb24pKVxuXHRcdFx0XHRwYXRoLnJldmVyc2UoKTtcblx0XHRcdHZhciBmaXJzdDIgPSBwYXRoLmdldEZpcnN0U2VnbWVudCgpO1xuXHRcdFx0aWYgKGxhc3QxICYmIGxhc3QxLl9wb2ludC5pc0Nsb3NlKGZpcnN0Mi5fcG9pbnQsIGVwc2lsb24pKSB7XG5cdFx0XHRcdGxhc3QxLnNldEhhbmRsZU91dChmaXJzdDIuX2hhbmRsZU91dCk7XG5cdFx0XHRcdHRoaXMuX2FkZChzZWdtZW50cy5zbGljZSgxKSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR2YXIgZmlyc3QxID0gdGhpcy5nZXRGaXJzdFNlZ21lbnQoKTtcblx0XHRcdFx0aWYgKGZpcnN0MSAmJiBmaXJzdDEuX3BvaW50LmlzQ2xvc2UoZmlyc3QyLl9wb2ludCwgZXBzaWxvbikpXG5cdFx0XHRcdFx0cGF0aC5yZXZlcnNlKCk7XG5cdFx0XHRcdGxhc3QyID0gcGF0aC5nZXRMYXN0U2VnbWVudCgpO1xuXHRcdFx0XHRpZiAoZmlyc3QxICYmIGZpcnN0MS5fcG9pbnQuaXNDbG9zZShsYXN0Mi5fcG9pbnQsIGVwc2lsb24pKSB7XG5cdFx0XHRcdFx0Zmlyc3QxLnNldEhhbmRsZUluKGxhc3QyLl9oYW5kbGVJbik7XG5cdFx0XHRcdFx0dGhpcy5fYWRkKHNlZ21lbnRzLnNsaWNlKDAsIHNlZ21lbnRzLmxlbmd0aCAtIDEpLCAwKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR0aGlzLl9hZGQoc2VnbWVudHMuc2xpY2UoKSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGlmIChwYXRoLl9jbG9zZWQpXG5cdFx0XHRcdHRoaXMuX2FkZChbc2VnbWVudHNbMF1dKTtcblx0XHRcdHBhdGgucmVtb3ZlKCk7XG5cdFx0fVxuXHRcdHZhciBmaXJzdCA9IHRoaXMuZ2V0Rmlyc3RTZWdtZW50KCksXG5cdFx0XHRsYXN0ID0gdGhpcy5nZXRMYXN0U2VnbWVudCgpO1xuXHRcdGlmIChmaXJzdCAhPT0gbGFzdCAmJiBmaXJzdC5fcG9pbnQuaXNDbG9zZShsYXN0Ll9wb2ludCwgZXBzaWxvbikpIHtcblx0XHRcdGZpcnN0LnNldEhhbmRsZUluKGxhc3QuX2hhbmRsZUluKTtcblx0XHRcdGxhc3QucmVtb3ZlKCk7XG5cdFx0XHR0aGlzLnNldENsb3NlZCh0cnVlKTtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0cmVkdWNlOiBmdW5jdGlvbihvcHRpb25zKSB7XG5cdFx0dmFyIGN1cnZlcyA9IHRoaXMuZ2V0Q3VydmVzKCksXG5cdFx0XHRzaW1wbGlmeSA9IG9wdGlvbnMgJiYgb3B0aW9ucy5zaW1wbGlmeSxcblx0XHRcdHRvbGVyYW5jZSA9IHNpbXBsaWZ5ID8gMWUtNyA6IDA7XG5cdFx0Zm9yICh2YXIgaSA9IGN1cnZlcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuXHRcdFx0dmFyIGN1cnZlID0gY3VydmVzW2ldO1xuXHRcdFx0aWYgKCFjdXJ2ZS5oYXNIYW5kbGVzKCkgJiYgKCFjdXJ2ZS5oYXNMZW5ndGgodG9sZXJhbmNlKVxuXHRcdFx0XHRcdHx8IHNpbXBsaWZ5ICYmIGN1cnZlLmlzQ29sbGluZWFyKGN1cnZlLmdldE5leHQoKSkpKVxuXHRcdFx0XHRjdXJ2ZS5yZW1vdmUoKTtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0cmV2ZXJzZTogZnVuY3Rpb24oKSB7XG5cdFx0dGhpcy5fc2VnbWVudHMucmV2ZXJzZSgpO1xuXHRcdGZvciAodmFyIGkgPSAwLCBsID0gdGhpcy5fc2VnbWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG5cdFx0XHR2YXIgc2VnbWVudCA9IHRoaXMuX3NlZ21lbnRzW2ldO1xuXHRcdFx0dmFyIGhhbmRsZUluID0gc2VnbWVudC5faGFuZGxlSW47XG5cdFx0XHRzZWdtZW50Ll9oYW5kbGVJbiA9IHNlZ21lbnQuX2hhbmRsZU91dDtcblx0XHRcdHNlZ21lbnQuX2hhbmRsZU91dCA9IGhhbmRsZUluO1xuXHRcdFx0c2VnbWVudC5faW5kZXggPSBpO1xuXHRcdH1cblx0XHR0aGlzLl9jdXJ2ZXMgPSBudWxsO1xuXHRcdHRoaXMuX2NoYW5nZWQoOSk7XG5cdH0sXG5cblx0ZmxhdHRlbjogZnVuY3Rpb24oZmxhdG5lc3MpIHtcblx0XHR2YXIgZmxhdHRlbmVyID0gbmV3IFBhdGhGbGF0dGVuZXIodGhpcywgZmxhdG5lc3MgfHwgMC4yNSwgMjU2LCB0cnVlKSxcblx0XHRcdHBhcnRzID0gZmxhdHRlbmVyLnBhcnRzLFxuXHRcdFx0bGVuZ3RoID0gcGFydHMubGVuZ3RoLFxuXHRcdFx0c2VnbWVudHMgPSBbXTtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG5cdFx0XHRzZWdtZW50cy5wdXNoKG5ldyBTZWdtZW50KHBhcnRzW2ldLmN1cnZlLnNsaWNlKDAsIDIpKSk7XG5cdFx0fVxuXHRcdGlmICghdGhpcy5fY2xvc2VkICYmIGxlbmd0aCA+IDApIHtcblx0XHRcdHNlZ21lbnRzLnB1c2gobmV3IFNlZ21lbnQocGFydHNbbGVuZ3RoIC0gMV0uY3VydmUuc2xpY2UoNikpKTtcblx0XHR9XG5cdFx0dGhpcy5zZXRTZWdtZW50cyhzZWdtZW50cyk7XG5cdH0sXG5cblx0c2ltcGxpZnk6IGZ1bmN0aW9uKHRvbGVyYW5jZSkge1xuXHRcdHZhciBzZWdtZW50cyA9IG5ldyBQYXRoRml0dGVyKHRoaXMpLmZpdCh0b2xlcmFuY2UgfHwgMi41KTtcblx0XHRpZiAoc2VnbWVudHMpXG5cdFx0XHR0aGlzLnNldFNlZ21lbnRzKHNlZ21lbnRzKTtcblx0XHRyZXR1cm4gISFzZWdtZW50cztcblx0fSxcblxuXHRzbW9vdGg6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcblx0XHR2YXIgdGhhdCA9IHRoaXMsXG5cdFx0XHRvcHRzID0gb3B0aW9ucyB8fCB7fSxcblx0XHRcdHR5cGUgPSBvcHRzLnR5cGUgfHwgJ2FzeW1tZXRyaWMnLFxuXHRcdFx0c2VnbWVudHMgPSB0aGlzLl9zZWdtZW50cyxcblx0XHRcdGxlbmd0aCA9IHNlZ21lbnRzLmxlbmd0aCxcblx0XHRcdGNsb3NlZCA9IHRoaXMuX2Nsb3NlZDtcblxuXHRcdGZ1bmN0aW9uIGdldEluZGV4KHZhbHVlLCBfZGVmYXVsdCkge1xuXHRcdFx0dmFyIGluZGV4ID0gdmFsdWUgJiYgdmFsdWUuaW5kZXg7XG5cdFx0XHRpZiAoaW5kZXggIT0gbnVsbCkge1xuXHRcdFx0XHR2YXIgcGF0aCA9IHZhbHVlLnBhdGg7XG5cdFx0XHRcdGlmIChwYXRoICYmIHBhdGggIT09IHRoYXQpXG5cdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKHZhbHVlLl9jbGFzcyArICcgJyArIGluZGV4ICsgJyBvZiAnICsgcGF0aFxuXHRcdFx0XHRcdFx0XHQrICcgaXMgbm90IHBhcnQgb2YgJyArIHRoYXQpO1xuXHRcdFx0XHRpZiAoX2RlZmF1bHQgJiYgdmFsdWUgaW5zdGFuY2VvZiBDdXJ2ZSlcblx0XHRcdFx0XHRpbmRleCsrO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aW5kZXggPSB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInID8gdmFsdWUgOiBfZGVmYXVsdDtcblx0XHRcdH1cblx0XHRcdHJldHVybiBNYXRoLm1pbihpbmRleCA8IDAgJiYgY2xvc2VkXG5cdFx0XHRcdFx0PyBpbmRleCAlIGxlbmd0aFxuXHRcdFx0XHRcdDogaW5kZXggPCAwID8gaW5kZXggKyBsZW5ndGggOiBpbmRleCwgbGVuZ3RoIC0gMSk7XG5cdFx0fVxuXG5cdFx0dmFyIGxvb3AgPSBjbG9zZWQgJiYgb3B0cy5mcm9tID09PSB1bmRlZmluZWQgJiYgb3B0cy50byA9PT0gdW5kZWZpbmVkLFxuXHRcdFx0ZnJvbSA9IGdldEluZGV4KG9wdHMuZnJvbSwgMCksXG5cdFx0XHR0byA9IGdldEluZGV4KG9wdHMudG8sIGxlbmd0aCAtIDEpO1xuXG5cdFx0aWYgKGZyb20gPiB0bykge1xuXHRcdFx0aWYgKGNsb3NlZCkge1xuXHRcdFx0XHRmcm9tIC09IGxlbmd0aDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHZhciB0bXAgPSBmcm9tO1xuXHRcdFx0XHRmcm9tID0gdG87XG5cdFx0XHRcdHRvID0gdG1wO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRpZiAoL14oPzphc3ltbWV0cmljfGNvbnRpbnVvdXMpJC8udGVzdCh0eXBlKSkge1xuXHRcdFx0dmFyIGFzeW1tZXRyaWMgPSB0eXBlID09PSAnYXN5bW1ldHJpYycsXG5cdFx0XHRcdG1pbiA9IE1hdGgubWluLFxuXHRcdFx0XHRhbW91bnQgPSB0byAtIGZyb20gKyAxLFxuXHRcdFx0XHRuID0gYW1vdW50IC0gMSxcblx0XHRcdFx0cGFkZGluZyA9IGxvb3AgPyBtaW4oYW1vdW50LCA0KSA6IDEsXG5cdFx0XHRcdHBhZGRpbmdMZWZ0ID0gcGFkZGluZyxcblx0XHRcdFx0cGFkZGluZ1JpZ2h0ID0gcGFkZGluZyxcblx0XHRcdFx0a25vdHMgPSBbXTtcblx0XHRcdGlmICghY2xvc2VkKSB7XG5cdFx0XHRcdHBhZGRpbmdMZWZ0ID0gbWluKDEsIGZyb20pO1xuXHRcdFx0XHRwYWRkaW5nUmlnaHQgPSBtaW4oMSwgbGVuZ3RoIC0gdG8gLSAxKTtcblx0XHRcdH1cblx0XHRcdG4gKz0gcGFkZGluZ0xlZnQgKyBwYWRkaW5nUmlnaHQ7XG5cdFx0XHRpZiAobiA8PSAxKVxuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHRmb3IgKHZhciBpID0gMCwgaiA9IGZyb20gLSBwYWRkaW5nTGVmdDsgaSA8PSBuOyBpKyssIGorKykge1xuXHRcdFx0XHRrbm90c1tpXSA9IHNlZ21lbnRzWyhqIDwgMCA/IGogKyBsZW5ndGggOiBqKSAlIGxlbmd0aF0uX3BvaW50O1xuXHRcdFx0fVxuXG5cdFx0XHR2YXIgeCA9IGtub3RzWzBdLl94ICsgMiAqIGtub3RzWzFdLl94LFxuXHRcdFx0XHR5ID0ga25vdHNbMF0uX3kgKyAyICoga25vdHNbMV0uX3ksXG5cdFx0XHRcdGYgPSAyLFxuXHRcdFx0XHRuXzEgPSBuIC0gMSxcblx0XHRcdFx0cnggPSBbeF0sXG5cdFx0XHRcdHJ5ID0gW3ldLFxuXHRcdFx0XHRyZiA9IFtmXSxcblx0XHRcdFx0cHggPSBbXSxcblx0XHRcdFx0cHkgPSBbXTtcblx0XHRcdGZvciAodmFyIGkgPSAxOyBpIDwgbjsgaSsrKSB7XG5cdFx0XHRcdHZhciBpbnRlcm5hbCA9IGkgPCBuXzEsXG5cdFx0XHRcdFx0YSA9IGludGVybmFsID8gMSA6IGFzeW1tZXRyaWMgPyAxIDogMixcblx0XHRcdFx0XHRiID0gaW50ZXJuYWwgPyA0IDogYXN5bW1ldHJpYyA/IDIgOiA3LFxuXHRcdFx0XHRcdHUgPSBpbnRlcm5hbCA/IDQgOiBhc3ltbWV0cmljID8gMyA6IDgsXG5cdFx0XHRcdFx0diA9IGludGVybmFsID8gMiA6IGFzeW1tZXRyaWMgPyAwIDogMSxcblx0XHRcdFx0XHRtID0gYSAvIGY7XG5cdFx0XHRcdGYgPSByZltpXSA9IGIgLSBtO1xuXHRcdFx0XHR4ID0gcnhbaV0gPSB1ICoga25vdHNbaV0uX3ggKyB2ICoga25vdHNbaSArIDFdLl94IC0gbSAqIHg7XG5cdFx0XHRcdHkgPSByeVtpXSA9IHUgKiBrbm90c1tpXS5feSArIHYgKiBrbm90c1tpICsgMV0uX3kgLSBtICogeTtcblx0XHRcdH1cblxuXHRcdFx0cHhbbl8xXSA9IHJ4W25fMV0gLyByZltuXzFdO1xuXHRcdFx0cHlbbl8xXSA9IHJ5W25fMV0gLyByZltuXzFdO1xuXHRcdFx0Zm9yICh2YXIgaSA9IG4gLSAyOyBpID49IDA7IGktLSkge1xuXHRcdFx0XHRweFtpXSA9IChyeFtpXSAtIHB4W2kgKyAxXSkgLyByZltpXTtcblx0XHRcdFx0cHlbaV0gPSAocnlbaV0gLSBweVtpICsgMV0pIC8gcmZbaV07XG5cdFx0XHR9XG5cdFx0XHRweFtuXSA9ICgzICoga25vdHNbbl0uX3ggLSBweFtuXzFdKSAvIDI7XG5cdFx0XHRweVtuXSA9ICgzICoga25vdHNbbl0uX3kgLSBweVtuXzFdKSAvIDI7XG5cblx0XHRcdGZvciAodmFyIGkgPSBwYWRkaW5nTGVmdCwgbWF4ID0gbiAtIHBhZGRpbmdSaWdodCwgaiA9IGZyb207XG5cdFx0XHRcdFx0aSA8PSBtYXg7IGkrKywgaisrKSB7XG5cdFx0XHRcdHZhciBzZWdtZW50ID0gc2VnbWVudHNbaiA8IDAgPyBqICsgbGVuZ3RoIDogal0sXG5cdFx0XHRcdFx0cHQgPSBzZWdtZW50Ll9wb2ludCxcblx0XHRcdFx0XHRoeCA9IHB4W2ldIC0gcHQuX3gsXG5cdFx0XHRcdFx0aHkgPSBweVtpXSAtIHB0Ll95O1xuXHRcdFx0XHRpZiAobG9vcCB8fCBpIDwgbWF4KVxuXHRcdFx0XHRcdHNlZ21lbnQuc2V0SGFuZGxlT3V0KGh4LCBoeSk7XG5cdFx0XHRcdGlmIChsb29wIHx8IGkgPiBwYWRkaW5nTGVmdClcblx0XHRcdFx0XHRzZWdtZW50LnNldEhhbmRsZUluKC1oeCwgLWh5KTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0Zm9yICh2YXIgaSA9IGZyb207IGkgPD0gdG87IGkrKykge1xuXHRcdFx0XHRzZWdtZW50c1tpIDwgMCA/IGkgKyBsZW5ndGggOiBpXS5zbW9vdGgob3B0cyxcblx0XHRcdFx0XHRcdCFsb29wICYmIGkgPT09IGZyb20sICFsb29wICYmIGkgPT09IHRvKTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0dG9TaGFwZTogZnVuY3Rpb24oaW5zZXJ0KSB7XG5cdFx0aWYgKCF0aGlzLl9jbG9zZWQpXG5cdFx0XHRyZXR1cm4gbnVsbDtcblxuXHRcdHZhciBzZWdtZW50cyA9IHRoaXMuX3NlZ21lbnRzLFxuXHRcdFx0dHlwZSxcblx0XHRcdHNpemUsXG5cdFx0XHRyYWRpdXMsXG5cdFx0XHR0b3BDZW50ZXI7XG5cblx0XHRmdW5jdGlvbiBpc0NvbGxpbmVhcihpLCBqKSB7XG5cdFx0XHR2YXIgc2VnMSA9IHNlZ21lbnRzW2ldLFxuXHRcdFx0XHRzZWcyID0gc2VnMS5nZXROZXh0KCksXG5cdFx0XHRcdHNlZzMgPSBzZWdtZW50c1tqXSxcblx0XHRcdFx0c2VnNCA9IHNlZzMuZ2V0TmV4dCgpO1xuXHRcdFx0cmV0dXJuIHNlZzEuX2hhbmRsZU91dC5pc1plcm8oKSAmJiBzZWcyLl9oYW5kbGVJbi5pc1plcm8oKVxuXHRcdFx0XHRcdCYmIHNlZzMuX2hhbmRsZU91dC5pc1plcm8oKSAmJiBzZWc0Ll9oYW5kbGVJbi5pc1plcm8oKVxuXHRcdFx0XHRcdCYmIHNlZzIuX3BvaW50LnN1YnRyYWN0KHNlZzEuX3BvaW50KS5pc0NvbGxpbmVhcihcblx0XHRcdFx0XHRcdHNlZzQuX3BvaW50LnN1YnRyYWN0KHNlZzMuX3BvaW50KSk7XG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gaXNPcnRob2dvbmFsKGkpIHtcblx0XHRcdHZhciBzZWcyID0gc2VnbWVudHNbaV0sXG5cdFx0XHRcdHNlZzEgPSBzZWcyLmdldFByZXZpb3VzKCksXG5cdFx0XHRcdHNlZzMgPSBzZWcyLmdldE5leHQoKTtcblx0XHRcdHJldHVybiBzZWcxLl9oYW5kbGVPdXQuaXNaZXJvKCkgJiYgc2VnMi5faGFuZGxlSW4uaXNaZXJvKClcblx0XHRcdFx0XHQmJiBzZWcyLl9oYW5kbGVPdXQuaXNaZXJvKCkgJiYgc2VnMy5faGFuZGxlSW4uaXNaZXJvKClcblx0XHRcdFx0XHQmJiBzZWcyLl9wb2ludC5zdWJ0cmFjdChzZWcxLl9wb2ludCkuaXNPcnRob2dvbmFsKFxuXHRcdFx0XHRcdFx0c2VnMy5fcG9pbnQuc3VidHJhY3Qoc2VnMi5fcG9pbnQpKTtcblx0XHR9XG5cblx0XHRmdW5jdGlvbiBpc0FyYyhpKSB7XG5cdFx0XHR2YXIgc2VnMSA9IHNlZ21lbnRzW2ldLFxuXHRcdFx0XHRzZWcyID0gc2VnMS5nZXROZXh0KCksXG5cdFx0XHRcdGhhbmRsZTEgPSBzZWcxLl9oYW5kbGVPdXQsXG5cdFx0XHRcdGhhbmRsZTIgPSBzZWcyLl9oYW5kbGVJbixcblx0XHRcdFx0a2FwcGEgPSAwLjU1MjI4NDc0OTgzMDc5MzY7XG5cdFx0XHRpZiAoaGFuZGxlMS5pc09ydGhvZ29uYWwoaGFuZGxlMikpIHtcblx0XHRcdFx0dmFyIHB0MSA9IHNlZzEuX3BvaW50LFxuXHRcdFx0XHRcdHB0MiA9IHNlZzIuX3BvaW50LFxuXHRcdFx0XHRcdGNvcm5lciA9IG5ldyBMaW5lKHB0MSwgaGFuZGxlMSwgdHJ1ZSkuaW50ZXJzZWN0KFxuXHRcdFx0XHRcdFx0XHRuZXcgTGluZShwdDIsIGhhbmRsZTIsIHRydWUpLCB0cnVlKTtcblx0XHRcdFx0cmV0dXJuIGNvcm5lciAmJiBOdW1lcmljYWwuaXNaZXJvKGhhbmRsZTEuZ2V0TGVuZ3RoKCkgL1xuXHRcdFx0XHRcdFx0Y29ybmVyLnN1YnRyYWN0KHB0MSkuZ2V0TGVuZ3RoKCkgLSBrYXBwYSlcblx0XHRcdFx0XHQmJiBOdW1lcmljYWwuaXNaZXJvKGhhbmRsZTIuZ2V0TGVuZ3RoKCkgL1xuXHRcdFx0XHRcdFx0Y29ybmVyLnN1YnRyYWN0KHB0MikuZ2V0TGVuZ3RoKCkgLSBrYXBwYSk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gZ2V0RGlzdGFuY2UoaSwgaikge1xuXHRcdFx0cmV0dXJuIHNlZ21lbnRzW2ldLl9wb2ludC5nZXREaXN0YW5jZShzZWdtZW50c1tqXS5fcG9pbnQpO1xuXHRcdH1cblxuXHRcdGlmICghdGhpcy5oYXNIYW5kbGVzKCkgJiYgc2VnbWVudHMubGVuZ3RoID09PSA0XG5cdFx0XHRcdCYmIGlzQ29sbGluZWFyKDAsIDIpICYmIGlzQ29sbGluZWFyKDEsIDMpICYmIGlzT3J0aG9nb25hbCgxKSkge1xuXHRcdFx0dHlwZSA9IFNoYXBlLlJlY3RhbmdsZTtcblx0XHRcdHNpemUgPSBuZXcgU2l6ZShnZXREaXN0YW5jZSgwLCAzKSwgZ2V0RGlzdGFuY2UoMCwgMSkpO1xuXHRcdFx0dG9wQ2VudGVyID0gc2VnbWVudHNbMV0uX3BvaW50LmFkZChzZWdtZW50c1syXS5fcG9pbnQpLmRpdmlkZSgyKTtcblx0XHR9IGVsc2UgaWYgKHNlZ21lbnRzLmxlbmd0aCA9PT0gOCAmJiBpc0FyYygwKSAmJiBpc0FyYygyKSAmJiBpc0FyYyg0KVxuXHRcdFx0XHQmJiBpc0FyYyg2KSAmJiBpc0NvbGxpbmVhcigxLCA1KSAmJiBpc0NvbGxpbmVhcigzLCA3KSkge1xuXHRcdFx0dHlwZSA9IFNoYXBlLlJlY3RhbmdsZTtcblx0XHRcdHNpemUgPSBuZXcgU2l6ZShnZXREaXN0YW5jZSgxLCA2KSwgZ2V0RGlzdGFuY2UoMCwgMykpO1xuXHRcdFx0cmFkaXVzID0gc2l6ZS5zdWJ0cmFjdChuZXcgU2l6ZShnZXREaXN0YW5jZSgwLCA3KSxcblx0XHRcdFx0XHRnZXREaXN0YW5jZSgxLCAyKSkpLmRpdmlkZSgyKTtcblx0XHRcdHRvcENlbnRlciA9IHNlZ21lbnRzWzNdLl9wb2ludC5hZGQoc2VnbWVudHNbNF0uX3BvaW50KS5kaXZpZGUoMik7XG5cdFx0fSBlbHNlIGlmIChzZWdtZW50cy5sZW5ndGggPT09IDRcblx0XHRcdFx0JiYgaXNBcmMoMCkgJiYgaXNBcmMoMSkgJiYgaXNBcmMoMikgJiYgaXNBcmMoMykpIHtcblx0XHRcdGlmIChOdW1lcmljYWwuaXNaZXJvKGdldERpc3RhbmNlKDAsIDIpIC0gZ2V0RGlzdGFuY2UoMSwgMykpKSB7XG5cdFx0XHRcdHR5cGUgPSBTaGFwZS5DaXJjbGU7XG5cdFx0XHRcdHJhZGl1cyA9IGdldERpc3RhbmNlKDAsIDIpIC8gMjtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHR5cGUgPSBTaGFwZS5FbGxpcHNlO1xuXHRcdFx0XHRyYWRpdXMgPSBuZXcgU2l6ZShnZXREaXN0YW5jZSgyLCAwKSAvIDIsIGdldERpc3RhbmNlKDMsIDEpIC8gMik7XG5cdFx0XHR9XG5cdFx0XHR0b3BDZW50ZXIgPSBzZWdtZW50c1sxXS5fcG9pbnQ7XG5cdFx0fVxuXG5cdFx0aWYgKHR5cGUpIHtcblx0XHRcdHZhciBjZW50ZXIgPSB0aGlzLmdldFBvc2l0aW9uKHRydWUpLFxuXHRcdFx0XHRzaGFwZSA9IG5ldyB0eXBlKHtcblx0XHRcdFx0XHRjZW50ZXI6IGNlbnRlcixcblx0XHRcdFx0XHRzaXplOiBzaXplLFxuXHRcdFx0XHRcdHJhZGl1czogcmFkaXVzLFxuXHRcdFx0XHRcdGluc2VydDogZmFsc2Vcblx0XHRcdFx0fSk7XG5cdFx0XHRzaGFwZS5jb3B5QXR0cmlidXRlcyh0aGlzLCB0cnVlKTtcblx0XHRcdHNoYXBlLl9tYXRyaXgucHJlcGVuZCh0aGlzLl9tYXRyaXgpO1xuXHRcdFx0c2hhcGUucm90YXRlKHRvcENlbnRlci5zdWJ0cmFjdChjZW50ZXIpLmdldEFuZ2xlKCkgKyA5MCk7XG5cdFx0XHRpZiAoaW5zZXJ0ID09PSB1bmRlZmluZWQgfHwgaW5zZXJ0KVxuXHRcdFx0XHRzaGFwZS5pbnNlcnRBYm92ZSh0aGlzKTtcblx0XHRcdHJldHVybiBzaGFwZTtcblx0XHR9XG5cdFx0cmV0dXJuIG51bGw7XG5cdH0sXG5cblx0dG9QYXRoOiAnI2Nsb25lJyxcblxuXHRjb21wYXJlOiBmdW5jdGlvbiBjb21wYXJlKHBhdGgpIHtcblx0XHRpZiAoIXBhdGggfHwgcGF0aCBpbnN0YW5jZW9mIENvbXBvdW5kUGF0aClcblx0XHRcdHJldHVybiBjb21wYXJlLmJhc2UuY2FsbCh0aGlzLCBwYXRoKTtcblx0XHR2YXIgY3VydmVzMSA9IHRoaXMuZ2V0Q3VydmVzKCksXG5cdFx0XHRjdXJ2ZXMyID0gcGF0aC5nZXRDdXJ2ZXMoKSxcblx0XHRcdGxlbmd0aDEgPSBjdXJ2ZXMxLmxlbmd0aCxcblx0XHRcdGxlbmd0aDIgPSBjdXJ2ZXMyLmxlbmd0aDtcblx0XHRpZiAoIWxlbmd0aDEgfHwgIWxlbmd0aDIpIHtcblx0XHRcdHJldHVybiBsZW5ndGgxID09IGxlbmd0aDI7XG5cdFx0fVxuXHRcdHZhciB2MSA9IGN1cnZlczFbMF0uZ2V0VmFsdWVzKCksXG5cdFx0XHR2YWx1ZXMyID0gW10sXG5cdFx0XHRwb3MxID0gMCwgcG9zMixcblx0XHRcdGVuZDEgPSAwLCBlbmQyO1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoMjsgaSsrKSB7XG5cdFx0XHR2YXIgdjIgPSBjdXJ2ZXMyW2ldLmdldFZhbHVlcygpO1xuXHRcdFx0dmFsdWVzMi5wdXNoKHYyKTtcblx0XHRcdHZhciBvdmVybGFwcyA9IEN1cnZlLmdldE92ZXJsYXBzKHYxLCB2Mik7XG5cdFx0XHRpZiAob3ZlcmxhcHMpIHtcblx0XHRcdFx0cG9zMiA9ICFpICYmIG92ZXJsYXBzWzBdWzBdID4gMCA/IGxlbmd0aDIgLSAxIDogaTtcblx0XHRcdFx0ZW5kMiA9IG92ZXJsYXBzWzBdWzFdO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHR9XG5cdFx0dmFyIGFicyA9IE1hdGguYWJzLFxuXHRcdFx0ZXBzaWxvbiA9IDFlLTgsXG5cdFx0XHR2MiA9IHZhbHVlczJbcG9zMl0sXG5cdFx0XHRzdGFydDI7XG5cdFx0d2hpbGUgKHYxICYmIHYyKSB7XG5cdFx0XHR2YXIgb3ZlcmxhcHMgPSBDdXJ2ZS5nZXRPdmVybGFwcyh2MSwgdjIpO1xuXHRcdFx0aWYgKG92ZXJsYXBzKSB7XG5cdFx0XHRcdHZhciB0MSA9IG92ZXJsYXBzWzBdWzBdO1xuXHRcdFx0XHRpZiAoYWJzKHQxIC0gZW5kMSkgPCBlcHNpbG9uKSB7XG5cdFx0XHRcdFx0ZW5kMSA9IG92ZXJsYXBzWzFdWzBdO1xuXHRcdFx0XHRcdGlmIChlbmQxID09PSAxKSB7XG5cdFx0XHRcdFx0XHR2MSA9ICsrcG9zMSA8IGxlbmd0aDEgPyBjdXJ2ZXMxW3BvczFdLmdldFZhbHVlcygpIDogbnVsbDtcblx0XHRcdFx0XHRcdGVuZDEgPSAwO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR2YXIgdDIgPSBvdmVybGFwc1swXVsxXTtcblx0XHRcdFx0XHRpZiAoYWJzKHQyIC0gZW5kMikgPCBlcHNpbG9uKSB7XG5cdFx0XHRcdFx0XHRpZiAoIXN0YXJ0Milcblx0XHRcdFx0XHRcdFx0c3RhcnQyID0gW3BvczIsIHQyXTtcblx0XHRcdFx0XHRcdGVuZDIgPSBvdmVybGFwc1sxXVsxXTtcblx0XHRcdFx0XHRcdGlmIChlbmQyID09PSAxKSB7XG5cdFx0XHRcdFx0XHRcdGlmICgrK3BvczIgPj0gbGVuZ3RoMilcblx0XHRcdFx0XHRcdFx0XHRwb3MyID0gMDtcblx0XHRcdFx0XHRcdFx0djIgPSB2YWx1ZXMyW3BvczJdIHx8IGN1cnZlczJbcG9zMl0uZ2V0VmFsdWVzKCk7XG5cdFx0XHRcdFx0XHRcdGVuZDIgPSAwO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYgKCF2MSkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gc3RhcnQyWzBdID09PSBwb3MyICYmIHN0YXJ0MlsxXSA9PT0gZW5kMjtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0YnJlYWs7XG5cdFx0fVxuXHRcdHJldHVybiBmYWxzZTtcblx0fSxcblxuXHRfaGl0VGVzdFNlbGY6IGZ1bmN0aW9uKHBvaW50LCBvcHRpb25zLCB2aWV3TWF0cml4LCBzdHJva2VNYXRyaXgpIHtcblx0XHR2YXIgdGhhdCA9IHRoaXMsXG5cdFx0XHRzdHlsZSA9IHRoaXMuZ2V0U3R5bGUoKSxcblx0XHRcdHNlZ21lbnRzID0gdGhpcy5fc2VnbWVudHMsXG5cdFx0XHRudW1TZWdtZW50cyA9IHNlZ21lbnRzLmxlbmd0aCxcblx0XHRcdGNsb3NlZCA9IHRoaXMuX2Nsb3NlZCxcblx0XHRcdHRvbGVyYW5jZVBhZGRpbmcgPSBvcHRpb25zLl90b2xlcmFuY2VQYWRkaW5nLFxuXHRcdFx0c3Ryb2tlUGFkZGluZyA9IHRvbGVyYW5jZVBhZGRpbmcsXG5cdFx0XHRqb2luLCBjYXAsIG1pdGVyTGltaXQsXG5cdFx0XHRhcmVhLCBsb2MsIHJlcyxcblx0XHRcdGhpdFN0cm9rZSA9IG9wdGlvbnMuc3Ryb2tlICYmIHN0eWxlLmhhc1N0cm9rZSgpLFxuXHRcdFx0aGl0RmlsbCA9IG9wdGlvbnMuZmlsbCAmJiBzdHlsZS5oYXNGaWxsKCksXG5cdFx0XHRoaXRDdXJ2ZXMgPSBvcHRpb25zLmN1cnZlcyxcblx0XHRcdHN0cm9rZVJhZGl1cyA9IGhpdFN0cm9rZVxuXHRcdFx0XHRcdD8gc3R5bGUuZ2V0U3Ryb2tlV2lkdGgoKSAvIDJcblx0XHRcdFx0XHQ6IGhpdEZpbGwgJiYgb3B0aW9ucy50b2xlcmFuY2UgPiAwIHx8IGhpdEN1cnZlc1xuXHRcdFx0XHRcdFx0PyAwIDogbnVsbDtcblx0XHRpZiAoc3Ryb2tlUmFkaXVzICE9PSBudWxsKSB7XG5cdFx0XHRpZiAoc3Ryb2tlUmFkaXVzID4gMCkge1xuXHRcdFx0XHRqb2luID0gc3R5bGUuZ2V0U3Ryb2tlSm9pbigpO1xuXHRcdFx0XHRjYXAgPSBzdHlsZS5nZXRTdHJva2VDYXAoKTtcblx0XHRcdFx0bWl0ZXJMaW1pdCA9IHN0eWxlLmdldE1pdGVyTGltaXQoKTtcblx0XHRcdFx0c3Ryb2tlUGFkZGluZyA9IHN0cm9rZVBhZGRpbmcuYWRkKFxuXHRcdFx0XHRcdFBhdGguX2dldFN0cm9rZVBhZGRpbmcoc3Ryb2tlUmFkaXVzLCBzdHJva2VNYXRyaXgpKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGpvaW4gPSBjYXAgPSAncm91bmQnO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIGlzQ2xvc2VFbm91Z2gocHQsIHBhZGRpbmcpIHtcblx0XHRcdHJldHVybiBwb2ludC5zdWJ0cmFjdChwdCkuZGl2aWRlKHBhZGRpbmcpLmxlbmd0aCA8PSAxO1xuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIGNoZWNrU2VnbWVudFBvaW50KHNlZywgcHQsIG5hbWUpIHtcblx0XHRcdGlmICghb3B0aW9ucy5zZWxlY3RlZCB8fCBwdC5pc1NlbGVjdGVkKCkpIHtcblx0XHRcdFx0dmFyIGFuY2hvciA9IHNlZy5fcG9pbnQ7XG5cdFx0XHRcdGlmIChwdCAhPT0gYW5jaG9yKVxuXHRcdFx0XHRcdHB0ID0gcHQuYWRkKGFuY2hvcik7XG5cdFx0XHRcdGlmIChpc0Nsb3NlRW5vdWdoKHB0LCBzdHJva2VQYWRkaW5nKSkge1xuXHRcdFx0XHRcdHJldHVybiBuZXcgSGl0UmVzdWx0KG5hbWUsIHRoYXQsIHtcblx0XHRcdFx0XHRcdHNlZ21lbnQ6IHNlZyxcblx0XHRcdFx0XHRcdHBvaW50OiBwdFxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gY2hlY2tTZWdtZW50UG9pbnRzKHNlZywgZW5kcykge1xuXHRcdFx0cmV0dXJuIChlbmRzIHx8IG9wdGlvbnMuc2VnbWVudHMpXG5cdFx0XHRcdCYmIGNoZWNrU2VnbWVudFBvaW50KHNlZywgc2VnLl9wb2ludCwgJ3NlZ21lbnQnKVxuXHRcdFx0XHR8fCAoIWVuZHMgJiYgb3B0aW9ucy5oYW5kbGVzKSAmJiAoXG5cdFx0XHRcdFx0Y2hlY2tTZWdtZW50UG9pbnQoc2VnLCBzZWcuX2hhbmRsZUluLCAnaGFuZGxlLWluJykgfHxcblx0XHRcdFx0XHRjaGVja1NlZ21lbnRQb2ludChzZWcsIHNlZy5faGFuZGxlT3V0LCAnaGFuZGxlLW91dCcpKTtcblx0XHR9XG5cblx0XHRmdW5jdGlvbiBhZGRUb0FyZWEocG9pbnQpIHtcblx0XHRcdGFyZWEuYWRkKHBvaW50KTtcblx0XHR9XG5cblx0XHRmdW5jdGlvbiBjaGVja1NlZ21lbnRTdHJva2Uoc2VnbWVudCkge1xuXHRcdFx0dmFyIGlzSm9pbiA9IGNsb3NlZCB8fCBzZWdtZW50Ll9pbmRleCA+IDBcblx0XHRcdFx0XHQmJiBzZWdtZW50Ll9pbmRleCA8IG51bVNlZ21lbnRzIC0gMTtcblx0XHRcdGlmICgoaXNKb2luID8gam9pbiA6IGNhcCkgPT09ICdyb3VuZCcpIHtcblx0XHRcdFx0cmV0dXJuIGlzQ2xvc2VFbm91Z2goc2VnbWVudC5fcG9pbnQsIHN0cm9rZVBhZGRpbmcpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0YXJlYSA9IG5ldyBQYXRoKHsgaW50ZXJuYWw6IHRydWUsIGNsb3NlZDogdHJ1ZSB9KTtcblx0XHRcdFx0aWYgKGlzSm9pbikge1xuXHRcdFx0XHRcdGlmICghc2VnbWVudC5pc1Ntb290aCgpKSB7XG5cdFx0XHRcdFx0XHRQYXRoLl9hZGRCZXZlbEpvaW4oc2VnbWVudCwgam9pbiwgc3Ryb2tlUmFkaXVzLFxuXHRcdFx0XHRcdFx0XHQgICBtaXRlckxpbWl0LCBudWxsLCBzdHJva2VNYXRyaXgsIGFkZFRvQXJlYSwgdHJ1ZSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGVsc2UgaWYgKGNhcCA9PT0gJ3NxdWFyZScpIHtcblx0XHRcdFx0XHRQYXRoLl9hZGRTcXVhcmVDYXAoc2VnbWVudCwgY2FwLCBzdHJva2VSYWRpdXMsIG51bGwsXG5cdFx0XHRcdFx0XHRcdHN0cm9rZU1hdHJpeCwgYWRkVG9BcmVhLCB0cnVlKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIWFyZWEuaXNFbXB0eSgpKSB7XG5cdFx0XHRcdFx0dmFyIGxvYztcblx0XHRcdFx0XHRyZXR1cm4gYXJlYS5jb250YWlucyhwb2ludClcblx0XHRcdFx0XHRcdHx8IChsb2MgPSBhcmVhLmdldE5lYXJlc3RMb2NhdGlvbihwb2ludCkpXG5cdFx0XHRcdFx0XHRcdCYmIGlzQ2xvc2VFbm91Z2gobG9jLmdldFBvaW50KCksIHRvbGVyYW5jZVBhZGRpbmcpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKG9wdGlvbnMuZW5kcyAmJiAhb3B0aW9ucy5zZWdtZW50cyAmJiAhY2xvc2VkKSB7XG5cdFx0XHRpZiAocmVzID0gY2hlY2tTZWdtZW50UG9pbnRzKHNlZ21lbnRzWzBdLCB0cnVlKVxuXHRcdFx0XHRcdHx8IGNoZWNrU2VnbWVudFBvaW50cyhzZWdtZW50c1tudW1TZWdtZW50cyAtIDFdLCB0cnVlKSlcblx0XHRcdFx0cmV0dXJuIHJlcztcblx0XHR9IGVsc2UgaWYgKG9wdGlvbnMuc2VnbWVudHMgfHwgb3B0aW9ucy5oYW5kbGVzKSB7XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IG51bVNlZ21lbnRzOyBpKyspXG5cdFx0XHRcdGlmIChyZXMgPSBjaGVja1NlZ21lbnRQb2ludHMoc2VnbWVudHNbaV0pKVxuXHRcdFx0XHRcdHJldHVybiByZXM7XG5cdFx0fVxuXHRcdGlmIChzdHJva2VSYWRpdXMgIT09IG51bGwpIHtcblx0XHRcdGxvYyA9IHRoaXMuZ2V0TmVhcmVzdExvY2F0aW9uKHBvaW50KTtcblx0XHRcdGlmIChsb2MpIHtcblx0XHRcdFx0dmFyIHRpbWUgPSBsb2MuZ2V0VGltZSgpO1xuXHRcdFx0XHRpZiAodGltZSA9PT0gMCB8fCB0aW1lID09PSAxICYmIG51bVNlZ21lbnRzID4gMSkge1xuXHRcdFx0XHRcdGlmICghY2hlY2tTZWdtZW50U3Ryb2tlKGxvYy5nZXRTZWdtZW50KCkpKVxuXHRcdFx0XHRcdFx0bG9jID0gbnVsbDtcblx0XHRcdFx0fSBlbHNlIGlmICghaXNDbG9zZUVub3VnaChsb2MuZ2V0UG9pbnQoKSwgc3Ryb2tlUGFkZGluZykpIHtcblx0XHRcdFx0XHRsb2MgPSBudWxsO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAoIWxvYyAmJiBqb2luID09PSAnbWl0ZXInICYmIG51bVNlZ21lbnRzID4gMSkge1xuXHRcdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IG51bVNlZ21lbnRzOyBpKyspIHtcblx0XHRcdFx0XHR2YXIgc2VnbWVudCA9IHNlZ21lbnRzW2ldO1xuXHRcdFx0XHRcdGlmIChwb2ludC5nZXREaXN0YW5jZShzZWdtZW50Ll9wb2ludClcblx0XHRcdFx0XHRcdFx0PD0gbWl0ZXJMaW1pdCAqIHN0cm9rZVJhZGl1c1xuXHRcdFx0XHRcdFx0XHQmJiBjaGVja1NlZ21lbnRTdHJva2Uoc2VnbWVudCkpIHtcblx0XHRcdFx0XHRcdGxvYyA9IHNlZ21lbnQuZ2V0TG9jYXRpb24oKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gIWxvYyAmJiBoaXRGaWxsICYmIHRoaXMuX2NvbnRhaW5zKHBvaW50KVxuXHRcdFx0XHR8fCBsb2MgJiYgIWhpdFN0cm9rZSAmJiAhaGl0Q3VydmVzXG5cdFx0XHRcdFx0PyBuZXcgSGl0UmVzdWx0KCdmaWxsJywgdGhpcylcblx0XHRcdFx0XHQ6IGxvY1xuXHRcdFx0XHRcdFx0PyBuZXcgSGl0UmVzdWx0KGhpdFN0cm9rZSA/ICdzdHJva2UnIDogJ2N1cnZlJywgdGhpcywge1xuXHRcdFx0XHRcdFx0XHRsb2NhdGlvbjogbG9jLFxuXHRcdFx0XHRcdFx0XHRwb2ludDogbG9jLmdldFBvaW50KClcblx0XHRcdFx0XHRcdH0pXG5cdFx0XHRcdFx0XHQ6IG51bGw7XG5cdH1cblxufSwgQmFzZS5lYWNoKEN1cnZlLl9ldmFsdWF0ZU1ldGhvZHMsXG5cdGZ1bmN0aW9uKG5hbWUpIHtcblx0XHR0aGlzW25hbWUgKyAnQXQnXSA9IGZ1bmN0aW9uKG9mZnNldCkge1xuXHRcdFx0dmFyIGxvYyA9IHRoaXMuZ2V0TG9jYXRpb25BdChvZmZzZXQpO1xuXHRcdFx0cmV0dXJuIGxvYyAmJiBsb2NbbmFtZV0oKTtcblx0XHR9O1xuXHR9LFxue1xuXHRiZWFuczogZmFsc2UsXG5cblx0Z2V0TG9jYXRpb25PZjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIHBvaW50ID0gUG9pbnQucmVhZChhcmd1bWVudHMpLFxuXHRcdFx0Y3VydmVzID0gdGhpcy5nZXRDdXJ2ZXMoKTtcblx0XHRmb3IgKHZhciBpID0gMCwgbCA9IGN1cnZlcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcblx0XHRcdHZhciBsb2MgPSBjdXJ2ZXNbaV0uZ2V0TG9jYXRpb25PZihwb2ludCk7XG5cdFx0XHRpZiAobG9jKVxuXHRcdFx0XHRyZXR1cm4gbG9jO1xuXHRcdH1cblx0XHRyZXR1cm4gbnVsbDtcblx0fSxcblxuXHRnZXRPZmZzZXRPZjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGxvYyA9IHRoaXMuZ2V0TG9jYXRpb25PZi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHRcdHJldHVybiBsb2MgPyBsb2MuZ2V0T2Zmc2V0KCkgOiBudWxsO1xuXHR9LFxuXG5cdGdldExvY2F0aW9uQXQ6IGZ1bmN0aW9uKG9mZnNldCkge1xuXHRcdGlmICh0eXBlb2Ygb2Zmc2V0ID09PSAnbnVtYmVyJykge1xuXHRcdFx0dmFyIGN1cnZlcyA9IHRoaXMuZ2V0Q3VydmVzKCksXG5cdFx0XHRcdGxlbmd0aCA9IDA7XG5cdFx0XHRmb3IgKHZhciBpID0gMCwgbCA9IGN1cnZlcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcblx0XHRcdFx0dmFyIHN0YXJ0ID0gbGVuZ3RoLFxuXHRcdFx0XHRcdGN1cnZlID0gY3VydmVzW2ldO1xuXHRcdFx0XHRsZW5ndGggKz0gY3VydmUuZ2V0TGVuZ3RoKCk7XG5cdFx0XHRcdGlmIChsZW5ndGggPiBvZmZzZXQpIHtcblx0XHRcdFx0XHRyZXR1cm4gY3VydmUuZ2V0TG9jYXRpb25BdChvZmZzZXQgLSBzdGFydCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGlmIChjdXJ2ZXMubGVuZ3RoID4gMCAmJiBvZmZzZXQgPD0gdGhpcy5nZXRMZW5ndGgoKSkge1xuXHRcdFx0XHRyZXR1cm4gbmV3IEN1cnZlTG9jYXRpb24oY3VydmVzW2N1cnZlcy5sZW5ndGggLSAxXSwgMSk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIGlmIChvZmZzZXQgJiYgb2Zmc2V0LmdldFBhdGggJiYgb2Zmc2V0LmdldFBhdGgoKSA9PT0gdGhpcykge1xuXHRcdFx0cmV0dXJuIG9mZnNldDtcblx0XHR9XG5cdFx0cmV0dXJuIG51bGw7XG5cdH0sXG5cblx0Z2V0T2Zmc2V0c1dpdGhUYW5nZW50OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgdGFuZ2VudCA9IFBvaW50LnJlYWQoYXJndW1lbnRzKTtcblx0XHRpZiAodGFuZ2VudC5pc1plcm8oKSkge1xuXHRcdFx0cmV0dXJuIFtdO1xuXHRcdH1cblxuXHRcdHZhciBvZmZzZXRzID0gW107XG5cdFx0dmFyIGN1cnZlU3RhcnQgPSAwO1xuXHRcdHZhciBjdXJ2ZXMgPSB0aGlzLmdldEN1cnZlcygpO1xuXHRcdGZvciAodmFyIGkgPSAwLCBsID0gY3VydmVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuXHRcdFx0dmFyIGN1cnZlID0gY3VydmVzW2ldO1xuXHRcdFx0dmFyIGN1cnZlVGltZXMgPSBjdXJ2ZS5nZXRUaW1lc1dpdGhUYW5nZW50KHRhbmdlbnQpO1xuXHRcdFx0Zm9yICh2YXIgaiA9IDAsIG0gPSBjdXJ2ZVRpbWVzLmxlbmd0aDsgaiA8IG07IGorKykge1xuXHRcdFx0XHR2YXIgb2Zmc2V0ID0gY3VydmVTdGFydCArIGN1cnZlLmdldE9mZnNldEF0VGltZShjdXJ2ZVRpbWVzW2pdKTtcblx0XHRcdFx0aWYgKG9mZnNldHMuaW5kZXhPZihvZmZzZXQpIDwgMCkge1xuXHRcdFx0XHRcdG9mZnNldHMucHVzaChvZmZzZXQpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRjdXJ2ZVN0YXJ0ICs9IGN1cnZlLmxlbmd0aDtcblx0XHR9XG5cdFx0cmV0dXJuIG9mZnNldHM7XG5cdH1cbn0pLFxubmV3IGZ1bmN0aW9uKCkge1xuXG5cdGZ1bmN0aW9uIGRyYXdIYW5kbGVzKGN0eCwgc2VnbWVudHMsIG1hdHJpeCwgc2l6ZSkge1xuXHRcdHZhciBoYWxmID0gc2l6ZSAvIDIsXG5cdFx0XHRjb29yZHMgPSBuZXcgQXJyYXkoNiksXG5cdFx0XHRwWCwgcFk7XG5cblx0XHRmdW5jdGlvbiBkcmF3SGFuZGxlKGluZGV4KSB7XG5cdFx0XHR2YXIgaFggPSBjb29yZHNbaW5kZXhdLFxuXHRcdFx0XHRoWSA9IGNvb3Jkc1tpbmRleCArIDFdO1xuXHRcdFx0aWYgKHBYICE9IGhYIHx8IHBZICE9IGhZKSB7XG5cdFx0XHRcdGN0eC5iZWdpblBhdGgoKTtcblx0XHRcdFx0Y3R4Lm1vdmVUbyhwWCwgcFkpO1xuXHRcdFx0XHRjdHgubGluZVRvKGhYLCBoWSk7XG5cdFx0XHRcdGN0eC5zdHJva2UoKTtcblx0XHRcdFx0Y3R4LmJlZ2luUGF0aCgpO1xuXHRcdFx0XHRjdHguYXJjKGhYLCBoWSwgaGFsZiwgMCwgTWF0aC5QSSAqIDIsIHRydWUpO1xuXHRcdFx0XHRjdHguZmlsbCgpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGZvciAodmFyIGkgPSAwLCBsID0gc2VnbWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG5cdFx0XHR2YXIgc2VnbWVudCA9IHNlZ21lbnRzW2ldLFxuXHRcdFx0XHRzZWxlY3Rpb24gPSBzZWdtZW50Ll9zZWxlY3Rpb247XG5cdFx0XHRzZWdtZW50Ll90cmFuc2Zvcm1Db29yZGluYXRlcyhtYXRyaXgsIGNvb3Jkcyk7XG5cdFx0XHRwWCA9IGNvb3Jkc1swXTtcblx0XHRcdHBZID0gY29vcmRzWzFdO1xuXHRcdFx0aWYgKHNlbGVjdGlvbiAmIDIpXG5cdFx0XHRcdGRyYXdIYW5kbGUoMik7XG5cdFx0XHRpZiAoc2VsZWN0aW9uICYgNClcblx0XHRcdFx0ZHJhd0hhbmRsZSg0KTtcblx0XHRcdGN0eC5maWxsUmVjdChwWCAtIGhhbGYsIHBZIC0gaGFsZiwgc2l6ZSwgc2l6ZSk7XG5cdFx0XHRpZiAoIShzZWxlY3Rpb24gJiAxKSkge1xuXHRcdFx0XHR2YXIgZmlsbFN0eWxlID0gY3R4LmZpbGxTdHlsZTtcblx0XHRcdFx0Y3R4LmZpbGxTdHlsZSA9ICcjZmZmZmZmJztcblx0XHRcdFx0Y3R4LmZpbGxSZWN0KHBYIC0gaGFsZiArIDEsIHBZIC0gaGFsZiArIDEsIHNpemUgLSAyLCBzaXplIC0gMik7XG5cdFx0XHRcdGN0eC5maWxsU3R5bGUgPSBmaWxsU3R5bGU7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0ZnVuY3Rpb24gZHJhd1NlZ21lbnRzKGN0eCwgcGF0aCwgbWF0cml4KSB7XG5cdFx0dmFyIHNlZ21lbnRzID0gcGF0aC5fc2VnbWVudHMsXG5cdFx0XHRsZW5ndGggPSBzZWdtZW50cy5sZW5ndGgsXG5cdFx0XHRjb29yZHMgPSBuZXcgQXJyYXkoNiksXG5cdFx0XHRmaXJzdCA9IHRydWUsXG5cdFx0XHRjdXJYLCBjdXJZLFxuXHRcdFx0cHJldlgsIHByZXZZLFxuXHRcdFx0aW5YLCBpblksXG5cdFx0XHRvdXRYLCBvdXRZO1xuXG5cdFx0ZnVuY3Rpb24gZHJhd1NlZ21lbnQoc2VnbWVudCkge1xuXHRcdFx0aWYgKG1hdHJpeCkge1xuXHRcdFx0XHRzZWdtZW50Ll90cmFuc2Zvcm1Db29yZGluYXRlcyhtYXRyaXgsIGNvb3Jkcyk7XG5cdFx0XHRcdGN1clggPSBjb29yZHNbMF07XG5cdFx0XHRcdGN1clkgPSBjb29yZHNbMV07XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR2YXIgcG9pbnQgPSBzZWdtZW50Ll9wb2ludDtcblx0XHRcdFx0Y3VyWCA9IHBvaW50Ll94O1xuXHRcdFx0XHRjdXJZID0gcG9pbnQuX3k7XG5cdFx0XHR9XG5cdFx0XHRpZiAoZmlyc3QpIHtcblx0XHRcdFx0Y3R4Lm1vdmVUbyhjdXJYLCBjdXJZKTtcblx0XHRcdFx0Zmlyc3QgPSBmYWxzZTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGlmIChtYXRyaXgpIHtcblx0XHRcdFx0XHRpblggPSBjb29yZHNbMl07XG5cdFx0XHRcdFx0aW5ZID0gY29vcmRzWzNdO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHZhciBoYW5kbGUgPSBzZWdtZW50Ll9oYW5kbGVJbjtcblx0XHRcdFx0XHRpblggPSBjdXJYICsgaGFuZGxlLl94O1xuXHRcdFx0XHRcdGluWSA9IGN1clkgKyBoYW5kbGUuX3k7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKGluWCA9PT0gY3VyWCAmJiBpblkgPT09IGN1cllcblx0XHRcdFx0XHRcdCYmIG91dFggPT09IHByZXZYICYmIG91dFkgPT09IHByZXZZKSB7XG5cdFx0XHRcdFx0Y3R4LmxpbmVUbyhjdXJYLCBjdXJZKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRjdHguYmV6aWVyQ3VydmVUbyhvdXRYLCBvdXRZLCBpblgsIGluWSwgY3VyWCwgY3VyWSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHByZXZYID0gY3VyWDtcblx0XHRcdHByZXZZID0gY3VyWTtcblx0XHRcdGlmIChtYXRyaXgpIHtcblx0XHRcdFx0b3V0WCA9IGNvb3Jkc1s0XTtcblx0XHRcdFx0b3V0WSA9IGNvb3Jkc1s1XTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHZhciBoYW5kbGUgPSBzZWdtZW50Ll9oYW5kbGVPdXQ7XG5cdFx0XHRcdG91dFggPSBwcmV2WCArIGhhbmRsZS5feDtcblx0XHRcdFx0b3V0WSA9IHByZXZZICsgaGFuZGxlLl95O1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspXG5cdFx0XHRkcmF3U2VnbWVudChzZWdtZW50c1tpXSk7XG5cdFx0aWYgKHBhdGguX2Nsb3NlZCAmJiBsZW5ndGggPiAwKVxuXHRcdFx0ZHJhd1NlZ21lbnQoc2VnbWVudHNbMF0pO1xuXHR9XG5cblx0cmV0dXJuIHtcblx0XHRfZHJhdzogZnVuY3Rpb24oY3R4LCBwYXJhbSwgdmlld01hdHJpeCwgc3Ryb2tlTWF0cml4KSB7XG5cdFx0XHR2YXIgZG9udFN0YXJ0ID0gcGFyYW0uZG9udFN0YXJ0LFxuXHRcdFx0XHRkb250UGFpbnQgPSBwYXJhbS5kb250RmluaXNoIHx8IHBhcmFtLmNsaXAsXG5cdFx0XHRcdHN0eWxlID0gdGhpcy5nZXRTdHlsZSgpLFxuXHRcdFx0XHRoYXNGaWxsID0gc3R5bGUuaGFzRmlsbCgpLFxuXHRcdFx0XHRoYXNTdHJva2UgPSBzdHlsZS5oYXNTdHJva2UoKSxcblx0XHRcdFx0ZGFzaEFycmF5ID0gc3R5bGUuZ2V0RGFzaEFycmF5KCksXG5cdFx0XHRcdGRhc2hMZW5ndGggPSAhcGFwZXIuc3VwcG9ydC5uYXRpdmVEYXNoICYmIGhhc1N0cm9rZVxuXHRcdFx0XHRcdFx0JiYgZGFzaEFycmF5ICYmIGRhc2hBcnJheS5sZW5ndGg7XG5cblx0XHRcdGlmICghZG9udFN0YXJ0KVxuXHRcdFx0XHRjdHguYmVnaW5QYXRoKCk7XG5cblx0XHRcdGlmIChoYXNGaWxsIHx8IGhhc1N0cm9rZSAmJiAhZGFzaExlbmd0aCB8fCBkb250UGFpbnQpIHtcblx0XHRcdFx0ZHJhd1NlZ21lbnRzKGN0eCwgdGhpcywgc3Ryb2tlTWF0cml4KTtcblx0XHRcdFx0aWYgKHRoaXMuX2Nsb3NlZClcblx0XHRcdFx0XHRjdHguY2xvc2VQYXRoKCk7XG5cdFx0XHR9XG5cblx0XHRcdGZ1bmN0aW9uIGdldE9mZnNldChpKSB7XG5cdFx0XHRcdHJldHVybiBkYXNoQXJyYXlbKChpICUgZGFzaExlbmd0aCkgKyBkYXNoTGVuZ3RoKSAlIGRhc2hMZW5ndGhdO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIWRvbnRQYWludCAmJiAoaGFzRmlsbCB8fCBoYXNTdHJva2UpKSB7XG5cdFx0XHRcdHRoaXMuX3NldFN0eWxlcyhjdHgsIHBhcmFtLCB2aWV3TWF0cml4KTtcblx0XHRcdFx0aWYgKGhhc0ZpbGwpIHtcblx0XHRcdFx0XHRjdHguZmlsbChzdHlsZS5nZXRGaWxsUnVsZSgpKTtcblx0XHRcdFx0XHRjdHguc2hhZG93Q29sb3IgPSAncmdiYSgwLDAsMCwwKSc7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKGhhc1N0cm9rZSkge1xuXHRcdFx0XHRcdGlmIChkYXNoTGVuZ3RoKSB7XG5cdFx0XHRcdFx0XHRpZiAoIWRvbnRTdGFydClcblx0XHRcdFx0XHRcdFx0Y3R4LmJlZ2luUGF0aCgpO1xuXHRcdFx0XHRcdFx0dmFyIGZsYXR0ZW5lciA9IG5ldyBQYXRoRmxhdHRlbmVyKHRoaXMsIDAuMjUsIDMyLCBmYWxzZSxcblx0XHRcdFx0XHRcdFx0XHRzdHJva2VNYXRyaXgpLFxuXHRcdFx0XHRcdFx0XHRsZW5ndGggPSBmbGF0dGVuZXIubGVuZ3RoLFxuXHRcdFx0XHRcdFx0XHRmcm9tID0gLXN0eWxlLmdldERhc2hPZmZzZXQoKSwgdG8sXG5cdFx0XHRcdFx0XHRcdGkgPSAwO1xuXHRcdFx0XHRcdFx0ZnJvbSA9IGZyb20gJSBsZW5ndGg7XG5cdFx0XHRcdFx0XHR3aGlsZSAoZnJvbSA+IDApIHtcblx0XHRcdFx0XHRcdFx0ZnJvbSAtPSBnZXRPZmZzZXQoaS0tKSArIGdldE9mZnNldChpLS0pO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0d2hpbGUgKGZyb20gPCBsZW5ndGgpIHtcblx0XHRcdFx0XHRcdFx0dG8gPSBmcm9tICsgZ2V0T2Zmc2V0KGkrKyk7XG5cdFx0XHRcdFx0XHRcdGlmIChmcm9tID4gMCB8fCB0byA+IDApXG5cdFx0XHRcdFx0XHRcdFx0ZmxhdHRlbmVyLmRyYXdQYXJ0KGN0eCxcblx0XHRcdFx0XHRcdFx0XHRcdFx0TWF0aC5tYXgoZnJvbSwgMCksIE1hdGgubWF4KHRvLCAwKSk7XG5cdFx0XHRcdFx0XHRcdGZyb20gPSB0byArIGdldE9mZnNldChpKyspO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRjdHguc3Ryb2tlKCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0X2RyYXdTZWxlY3RlZDogZnVuY3Rpb24oY3R4LCBtYXRyaXgpIHtcblx0XHRcdGN0eC5iZWdpblBhdGgoKTtcblx0XHRcdGRyYXdTZWdtZW50cyhjdHgsIHRoaXMsIG1hdHJpeCk7XG5cdFx0XHRjdHguc3Ryb2tlKCk7XG5cdFx0XHRkcmF3SGFuZGxlcyhjdHgsIHRoaXMuX3NlZ21lbnRzLCBtYXRyaXgsIHBhcGVyLnNldHRpbmdzLmhhbmRsZVNpemUpO1xuXHRcdH1cblx0fTtcbn0sXG5uZXcgZnVuY3Rpb24oKSB7XG5cdGZ1bmN0aW9uIGdldEN1cnJlbnRTZWdtZW50KHRoYXQpIHtcblx0XHR2YXIgc2VnbWVudHMgPSB0aGF0Ll9zZWdtZW50cztcblx0XHRpZiAoIXNlZ21lbnRzLmxlbmd0aClcblx0XHRcdHRocm93IG5ldyBFcnJvcignVXNlIGEgbW92ZVRvKCkgY29tbWFuZCBmaXJzdCcpO1xuXHRcdHJldHVybiBzZWdtZW50c1tzZWdtZW50cy5sZW5ndGggLSAxXTtcblx0fVxuXG5cdHJldHVybiB7XG5cdFx0bW92ZVRvOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBzZWdtZW50cyA9IHRoaXMuX3NlZ21lbnRzO1xuXHRcdFx0aWYgKHNlZ21lbnRzLmxlbmd0aCA9PT0gMSlcblx0XHRcdFx0dGhpcy5yZW1vdmVTZWdtZW50KDApO1xuXHRcdFx0aWYgKCFzZWdtZW50cy5sZW5ndGgpXG5cdFx0XHRcdHRoaXMuX2FkZChbIG5ldyBTZWdtZW50KFBvaW50LnJlYWQoYXJndW1lbnRzKSkgXSk7XG5cdFx0fSxcblxuXHRcdG1vdmVCeTogZnVuY3Rpb24oKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ21vdmVCeSgpIGlzIHVuc3VwcG9ydGVkIG9uIFBhdGggaXRlbXMuJyk7XG5cdFx0fSxcblxuXHRcdGxpbmVUbzogZnVuY3Rpb24oKSB7XG5cdFx0XHR0aGlzLl9hZGQoWyBuZXcgU2VnbWVudChQb2ludC5yZWFkKGFyZ3VtZW50cykpIF0pO1xuXHRcdH0sXG5cblx0XHRjdWJpY0N1cnZlVG86IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGhhbmRsZTEgPSBQb2ludC5yZWFkKGFyZ3VtZW50cyksXG5cdFx0XHRcdGhhbmRsZTIgPSBQb2ludC5yZWFkKGFyZ3VtZW50cyksXG5cdFx0XHRcdHRvID0gUG9pbnQucmVhZChhcmd1bWVudHMpLFxuXHRcdFx0XHRjdXJyZW50ID0gZ2V0Q3VycmVudFNlZ21lbnQodGhpcyk7XG5cdFx0XHRjdXJyZW50LnNldEhhbmRsZU91dChoYW5kbGUxLnN1YnRyYWN0KGN1cnJlbnQuX3BvaW50KSk7XG5cdFx0XHR0aGlzLl9hZGQoWyBuZXcgU2VnbWVudCh0bywgaGFuZGxlMi5zdWJ0cmFjdCh0bykpIF0pO1xuXHRcdH0sXG5cblx0XHRxdWFkcmF0aWNDdXJ2ZVRvOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBoYW5kbGUgPSBQb2ludC5yZWFkKGFyZ3VtZW50cyksXG5cdFx0XHRcdHRvID0gUG9pbnQucmVhZChhcmd1bWVudHMpLFxuXHRcdFx0XHRjdXJyZW50ID0gZ2V0Q3VycmVudFNlZ21lbnQodGhpcykuX3BvaW50O1xuXHRcdFx0dGhpcy5jdWJpY0N1cnZlVG8oXG5cdFx0XHRcdGhhbmRsZS5hZGQoY3VycmVudC5zdWJ0cmFjdChoYW5kbGUpLm11bHRpcGx5KDEgLyAzKSksXG5cdFx0XHRcdGhhbmRsZS5hZGQodG8uc3VidHJhY3QoaGFuZGxlKS5tdWx0aXBseSgxIC8gMykpLFxuXHRcdFx0XHR0b1xuXHRcdFx0KTtcblx0XHR9LFxuXG5cdFx0Y3VydmVUbzogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgdGhyb3VnaCA9IFBvaW50LnJlYWQoYXJndW1lbnRzKSxcblx0XHRcdFx0dG8gPSBQb2ludC5yZWFkKGFyZ3VtZW50cyksXG5cdFx0XHRcdHQgPSBCYXNlLnBpY2soQmFzZS5yZWFkKGFyZ3VtZW50cyksIDAuNSksXG5cdFx0XHRcdHQxID0gMSAtIHQsXG5cdFx0XHRcdGN1cnJlbnQgPSBnZXRDdXJyZW50U2VnbWVudCh0aGlzKS5fcG9pbnQsXG5cdFx0XHRcdGhhbmRsZSA9IHRocm91Z2guc3VidHJhY3QoY3VycmVudC5tdWx0aXBseSh0MSAqIHQxKSlcblx0XHRcdFx0XHQuc3VidHJhY3QodG8ubXVsdGlwbHkodCAqIHQpKS5kaXZpZGUoMiAqIHQgKiB0MSk7XG5cdFx0XHRpZiAoaGFuZGxlLmlzTmFOKCkpXG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcihcblx0XHRcdFx0XHQnQ2Fubm90IHB1dCBhIGN1cnZlIHRocm91Z2ggcG9pbnRzIHdpdGggcGFyYW1ldGVyID0gJyArIHQpO1xuXHRcdFx0dGhpcy5xdWFkcmF0aWNDdXJ2ZVRvKGhhbmRsZSwgdG8pO1xuXHRcdH0sXG5cblx0XHRhcmNUbzogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgYWJzID0gTWF0aC5hYnMsXG5cdFx0XHRcdHNxcnQgPSBNYXRoLnNxcnQsXG5cdFx0XHRcdGN1cnJlbnQgPSBnZXRDdXJyZW50U2VnbWVudCh0aGlzKSxcblx0XHRcdFx0ZnJvbSA9IGN1cnJlbnQuX3BvaW50LFxuXHRcdFx0XHR0byA9IFBvaW50LnJlYWQoYXJndW1lbnRzKSxcblx0XHRcdFx0dGhyb3VnaCxcblx0XHRcdFx0cGVlayA9IEJhc2UucGVlayhhcmd1bWVudHMpLFxuXHRcdFx0XHRjbG9ja3dpc2UgPSBCYXNlLnBpY2socGVlaywgdHJ1ZSksXG5cdFx0XHRcdGNlbnRlciwgZXh0ZW50LCB2ZWN0b3IsIG1hdHJpeDtcblx0XHRcdGlmICh0eXBlb2YgY2xvY2t3aXNlID09PSAnYm9vbGVhbicpIHtcblx0XHRcdFx0dmFyIG1pZGRsZSA9IGZyb20uYWRkKHRvKS5kaXZpZGUoMiksXG5cdFx0XHRcdHRocm91Z2ggPSBtaWRkbGUuYWRkKG1pZGRsZS5zdWJ0cmFjdChmcm9tKS5yb3RhdGUoXG5cdFx0XHRcdFx0XHRjbG9ja3dpc2UgPyAtOTAgOiA5MCkpO1xuXHRcdFx0fSBlbHNlIGlmIChCYXNlLnJlbWFpbihhcmd1bWVudHMpIDw9IDIpIHtcblx0XHRcdFx0dGhyb3VnaCA9IHRvO1xuXHRcdFx0XHR0byA9IFBvaW50LnJlYWQoYXJndW1lbnRzKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHZhciByYWRpdXMgPSBTaXplLnJlYWQoYXJndW1lbnRzKSxcblx0XHRcdFx0XHRpc1plcm8gPSBOdW1lcmljYWwuaXNaZXJvO1xuXHRcdFx0XHRpZiAoaXNaZXJvKHJhZGl1cy53aWR0aCkgfHwgaXNaZXJvKHJhZGl1cy5oZWlnaHQpKVxuXHRcdFx0XHRcdHJldHVybiB0aGlzLmxpbmVUbyh0byk7XG5cdFx0XHRcdHZhciByb3RhdGlvbiA9IEJhc2UucmVhZChhcmd1bWVudHMpLFxuXHRcdFx0XHRcdGNsb2Nrd2lzZSA9ICEhQmFzZS5yZWFkKGFyZ3VtZW50cyksXG5cdFx0XHRcdFx0bGFyZ2UgPSAhIUJhc2UucmVhZChhcmd1bWVudHMpLFxuXHRcdFx0XHRcdG1pZGRsZSA9IGZyb20uYWRkKHRvKS5kaXZpZGUoMiksXG5cdFx0XHRcdFx0cHQgPSBmcm9tLnN1YnRyYWN0KG1pZGRsZSkucm90YXRlKC1yb3RhdGlvbiksXG5cdFx0XHRcdFx0eCA9IHB0LngsXG5cdFx0XHRcdFx0eSA9IHB0LnksXG5cdFx0XHRcdFx0cnggPSBhYnMocmFkaXVzLndpZHRoKSxcblx0XHRcdFx0XHRyeSA9IGFicyhyYWRpdXMuaGVpZ2h0KSxcblx0XHRcdFx0XHRyeFNxID0gcnggKiByeCxcblx0XHRcdFx0XHRyeVNxID0gcnkgKiByeSxcblx0XHRcdFx0XHR4U3EgPSB4ICogeCxcblx0XHRcdFx0XHR5U3EgPSB5ICogeTtcblx0XHRcdFx0dmFyIGZhY3RvciA9IHNxcnQoeFNxIC8gcnhTcSArIHlTcSAvIHJ5U3EpO1xuXHRcdFx0XHRpZiAoZmFjdG9yID4gMSkge1xuXHRcdFx0XHRcdHJ4ICo9IGZhY3Rvcjtcblx0XHRcdFx0XHRyeSAqPSBmYWN0b3I7XG5cdFx0XHRcdFx0cnhTcSA9IHJ4ICogcng7XG5cdFx0XHRcdFx0cnlTcSA9IHJ5ICogcnk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZmFjdG9yID0gKHJ4U3EgKiByeVNxIC0gcnhTcSAqIHlTcSAtIHJ5U3EgKiB4U3EpIC9cblx0XHRcdFx0XHRcdChyeFNxICogeVNxICsgcnlTcSAqIHhTcSk7XG5cdFx0XHRcdGlmIChhYnMoZmFjdG9yKSA8IDFlLTEyKVxuXHRcdFx0XHRcdGZhY3RvciA9IDA7XG5cdFx0XHRcdGlmIChmYWN0b3IgPCAwKVxuXHRcdFx0XHRcdHRocm93IG5ldyBFcnJvcihcblx0XHRcdFx0XHRcdFx0J0Nhbm5vdCBjcmVhdGUgYW4gYXJjIHdpdGggdGhlIGdpdmVuIGFyZ3VtZW50cycpO1xuXHRcdFx0XHRjZW50ZXIgPSBuZXcgUG9pbnQocnggKiB5IC8gcnksIC1yeSAqIHggLyByeClcblx0XHRcdFx0XHRcdC5tdWx0aXBseSgobGFyZ2UgPT09IGNsb2Nrd2lzZSA/IC0xIDogMSkgKiBzcXJ0KGZhY3RvcikpXG5cdFx0XHRcdFx0XHQucm90YXRlKHJvdGF0aW9uKS5hZGQobWlkZGxlKTtcblx0XHRcdFx0bWF0cml4ID0gbmV3IE1hdHJpeCgpLnRyYW5zbGF0ZShjZW50ZXIpLnJvdGF0ZShyb3RhdGlvbilcblx0XHRcdFx0XHRcdC5zY2FsZShyeCwgcnkpO1xuXHRcdFx0XHR2ZWN0b3IgPSBtYXRyaXguX2ludmVyc2VUcmFuc2Zvcm0oZnJvbSk7XG5cdFx0XHRcdGV4dGVudCA9IHZlY3Rvci5nZXREaXJlY3RlZEFuZ2xlKG1hdHJpeC5faW52ZXJzZVRyYW5zZm9ybSh0bykpO1xuXHRcdFx0XHRpZiAoIWNsb2Nrd2lzZSAmJiBleHRlbnQgPiAwKVxuXHRcdFx0XHRcdGV4dGVudCAtPSAzNjA7XG5cdFx0XHRcdGVsc2UgaWYgKGNsb2Nrd2lzZSAmJiBleHRlbnQgPCAwKVxuXHRcdFx0XHRcdGV4dGVudCArPSAzNjA7XG5cdFx0XHR9XG5cdFx0XHRpZiAodGhyb3VnaCkge1xuXHRcdFx0XHR2YXIgbDEgPSBuZXcgTGluZShmcm9tLmFkZCh0aHJvdWdoKS5kaXZpZGUoMiksXG5cdFx0XHRcdFx0XHRcdHRocm91Z2guc3VidHJhY3QoZnJvbSkucm90YXRlKDkwKSwgdHJ1ZSksXG5cdFx0XHRcdFx0bDIgPSBuZXcgTGluZSh0aHJvdWdoLmFkZCh0bykuZGl2aWRlKDIpLFxuXHRcdFx0XHRcdFx0XHR0by5zdWJ0cmFjdCh0aHJvdWdoKS5yb3RhdGUoOTApLCB0cnVlKSxcblx0XHRcdFx0XHRsaW5lID0gbmV3IExpbmUoZnJvbSwgdG8pLFxuXHRcdFx0XHRcdHRocm91Z2hTaWRlID0gbGluZS5nZXRTaWRlKHRocm91Z2gpO1xuXHRcdFx0XHRjZW50ZXIgPSBsMS5pbnRlcnNlY3QobDIsIHRydWUpO1xuXHRcdFx0XHRpZiAoIWNlbnRlcikge1xuXHRcdFx0XHRcdGlmICghdGhyb3VnaFNpZGUpXG5cdFx0XHRcdFx0XHRyZXR1cm4gdGhpcy5saW5lVG8odG8pO1xuXHRcdFx0XHRcdHRocm93IG5ldyBFcnJvcihcblx0XHRcdFx0XHRcdFx0J0Nhbm5vdCBjcmVhdGUgYW4gYXJjIHdpdGggdGhlIGdpdmVuIGFyZ3VtZW50cycpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHZlY3RvciA9IGZyb20uc3VidHJhY3QoY2VudGVyKTtcblx0XHRcdFx0ZXh0ZW50ID0gdmVjdG9yLmdldERpcmVjdGVkQW5nbGUodG8uc3VidHJhY3QoY2VudGVyKSk7XG5cdFx0XHRcdHZhciBjZW50ZXJTaWRlID0gbGluZS5nZXRTaWRlKGNlbnRlciwgdHJ1ZSk7XG5cdFx0XHRcdGlmIChjZW50ZXJTaWRlID09PSAwKSB7XG5cdFx0XHRcdFx0ZXh0ZW50ID0gdGhyb3VnaFNpZGUgKiBhYnMoZXh0ZW50KTtcblx0XHRcdFx0fSBlbHNlIGlmICh0aHJvdWdoU2lkZSA9PT0gY2VudGVyU2lkZSkge1xuXHRcdFx0XHRcdGV4dGVudCArPSBleHRlbnQgPCAwID8gMzYwIDogLTM2MDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0dmFyIGVwc2lsb24gPSAxZS03LFxuXHRcdFx0XHRleHQgPSBhYnMoZXh0ZW50KSxcblx0XHRcdFx0Y291bnQgPSBleHQgPj0gMzYwID8gNCA6IE1hdGguY2VpbCgoZXh0IC0gZXBzaWxvbikgLyA5MCksXG5cdFx0XHRcdGluYyA9IGV4dGVudCAvIGNvdW50LFxuXHRcdFx0XHRoYWxmID0gaW5jICogTWF0aC5QSSAvIDM2MCxcblx0XHRcdFx0eiA9IDQgLyAzICogTWF0aC5zaW4oaGFsZikgLyAoMSArIE1hdGguY29zKGhhbGYpKSxcblx0XHRcdFx0c2VnbWVudHMgPSBbXTtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDw9IGNvdW50OyBpKyspIHtcblx0XHRcdFx0dmFyIHB0ID0gdG8sXG5cdFx0XHRcdFx0b3V0ID0gbnVsbDtcblx0XHRcdFx0aWYgKGkgPCBjb3VudCkge1xuXHRcdFx0XHRcdG91dCA9IHZlY3Rvci5yb3RhdGUoOTApLm11bHRpcGx5KHopO1xuXHRcdFx0XHRcdGlmIChtYXRyaXgpIHtcblx0XHRcdFx0XHRcdHB0ID0gbWF0cml4Ll90cmFuc2Zvcm1Qb2ludCh2ZWN0b3IpO1xuXHRcdFx0XHRcdFx0b3V0ID0gbWF0cml4Ll90cmFuc2Zvcm1Qb2ludCh2ZWN0b3IuYWRkKG91dCkpXG5cdFx0XHRcdFx0XHRcdFx0LnN1YnRyYWN0KHB0KTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0cHQgPSBjZW50ZXIuYWRkKHZlY3Rvcik7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICghaSkge1xuXHRcdFx0XHRcdGN1cnJlbnQuc2V0SGFuZGxlT3V0KG91dCk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dmFyIF9pbiA9IHZlY3Rvci5yb3RhdGUoLTkwKS5tdWx0aXBseSh6KTtcblx0XHRcdFx0XHRpZiAobWF0cml4KSB7XG5cdFx0XHRcdFx0XHRfaW4gPSBtYXRyaXguX3RyYW5zZm9ybVBvaW50KHZlY3Rvci5hZGQoX2luKSlcblx0XHRcdFx0XHRcdFx0XHQuc3VidHJhY3QocHQpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRzZWdtZW50cy5wdXNoKG5ldyBTZWdtZW50KHB0LCBfaW4sIG91dCkpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHZlY3RvciA9IHZlY3Rvci5yb3RhdGUoaW5jKTtcblx0XHRcdH1cblx0XHRcdHRoaXMuX2FkZChzZWdtZW50cyk7XG5cdFx0fSxcblxuXHRcdGxpbmVCeTogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgdG8gPSBQb2ludC5yZWFkKGFyZ3VtZW50cyksXG5cdFx0XHRcdGN1cnJlbnQgPSBnZXRDdXJyZW50U2VnbWVudCh0aGlzKS5fcG9pbnQ7XG5cdFx0XHR0aGlzLmxpbmVUbyhjdXJyZW50LmFkZCh0bykpO1xuXHRcdH0sXG5cblx0XHRjdXJ2ZUJ5OiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciB0aHJvdWdoID0gUG9pbnQucmVhZChhcmd1bWVudHMpLFxuXHRcdFx0XHR0byA9IFBvaW50LnJlYWQoYXJndW1lbnRzKSxcblx0XHRcdFx0cGFyYW1ldGVyID0gQmFzZS5yZWFkKGFyZ3VtZW50cyksXG5cdFx0XHRcdGN1cnJlbnQgPSBnZXRDdXJyZW50U2VnbWVudCh0aGlzKS5fcG9pbnQ7XG5cdFx0XHR0aGlzLmN1cnZlVG8oY3VycmVudC5hZGQodGhyb3VnaCksIGN1cnJlbnQuYWRkKHRvKSwgcGFyYW1ldGVyKTtcblx0XHR9LFxuXG5cdFx0Y3ViaWNDdXJ2ZUJ5OiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBoYW5kbGUxID0gUG9pbnQucmVhZChhcmd1bWVudHMpLFxuXHRcdFx0XHRoYW5kbGUyID0gUG9pbnQucmVhZChhcmd1bWVudHMpLFxuXHRcdFx0XHR0byA9IFBvaW50LnJlYWQoYXJndW1lbnRzKSxcblx0XHRcdFx0Y3VycmVudCA9IGdldEN1cnJlbnRTZWdtZW50KHRoaXMpLl9wb2ludDtcblx0XHRcdHRoaXMuY3ViaWNDdXJ2ZVRvKGN1cnJlbnQuYWRkKGhhbmRsZTEpLCBjdXJyZW50LmFkZChoYW5kbGUyKSxcblx0XHRcdFx0XHRjdXJyZW50LmFkZCh0bykpO1xuXHRcdH0sXG5cblx0XHRxdWFkcmF0aWNDdXJ2ZUJ5OiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBoYW5kbGUgPSBQb2ludC5yZWFkKGFyZ3VtZW50cyksXG5cdFx0XHRcdHRvID0gUG9pbnQucmVhZChhcmd1bWVudHMpLFxuXHRcdFx0XHRjdXJyZW50ID0gZ2V0Q3VycmVudFNlZ21lbnQodGhpcykuX3BvaW50O1xuXHRcdFx0dGhpcy5xdWFkcmF0aWNDdXJ2ZVRvKGN1cnJlbnQuYWRkKGhhbmRsZSksIGN1cnJlbnQuYWRkKHRvKSk7XG5cdFx0fSxcblxuXHRcdGFyY0J5OiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBjdXJyZW50ID0gZ2V0Q3VycmVudFNlZ21lbnQodGhpcykuX3BvaW50LFxuXHRcdFx0XHRwb2ludCA9IGN1cnJlbnQuYWRkKFBvaW50LnJlYWQoYXJndW1lbnRzKSksXG5cdFx0XHRcdGNsb2Nrd2lzZSA9IEJhc2UucGljayhCYXNlLnBlZWsoYXJndW1lbnRzKSwgdHJ1ZSk7XG5cdFx0XHRpZiAodHlwZW9mIGNsb2Nrd2lzZSA9PT0gJ2Jvb2xlYW4nKSB7XG5cdFx0XHRcdHRoaXMuYXJjVG8ocG9pbnQsIGNsb2Nrd2lzZSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0aGlzLmFyY1RvKHBvaW50LCBjdXJyZW50LmFkZChQb2ludC5yZWFkKGFyZ3VtZW50cykpKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0Y2xvc2VQYXRoOiBmdW5jdGlvbih0b2xlcmFuY2UpIHtcblx0XHRcdHRoaXMuc2V0Q2xvc2VkKHRydWUpO1xuXHRcdFx0dGhpcy5qb2luKHRoaXMsIHRvbGVyYW5jZSk7XG5cdFx0fVxuXHR9O1xufSwge1xuXG5cdF9nZXRCb3VuZHM6IGZ1bmN0aW9uKG1hdHJpeCwgb3B0aW9ucykge1xuXHRcdHZhciBtZXRob2QgPSBvcHRpb25zLmhhbmRsZVxuXHRcdFx0XHQ/ICdnZXRIYW5kbGVCb3VuZHMnXG5cdFx0XHRcdDogb3B0aW9ucy5zdHJva2Vcblx0XHRcdFx0PyAnZ2V0U3Ryb2tlQm91bmRzJ1xuXHRcdFx0XHQ6ICdnZXRCb3VuZHMnO1xuXHRcdHJldHVybiBQYXRoW21ldGhvZF0odGhpcy5fc2VnbWVudHMsIHRoaXMuX2Nsb3NlZCwgdGhpcywgbWF0cml4LCBvcHRpb25zKTtcblx0fSxcblxuc3RhdGljczoge1xuXHRnZXRCb3VuZHM6IGZ1bmN0aW9uKHNlZ21lbnRzLCBjbG9zZWQsIHBhdGgsIG1hdHJpeCwgb3B0aW9ucywgc3Ryb2tlUGFkZGluZykge1xuXHRcdHZhciBmaXJzdCA9IHNlZ21lbnRzWzBdO1xuXHRcdGlmICghZmlyc3QpXG5cdFx0XHRyZXR1cm4gbmV3IFJlY3RhbmdsZSgpO1xuXHRcdHZhciBjb29yZHMgPSBuZXcgQXJyYXkoNiksXG5cdFx0XHRwcmV2Q29vcmRzID0gZmlyc3QuX3RyYW5zZm9ybUNvb3JkaW5hdGVzKG1hdHJpeCwgbmV3IEFycmF5KDYpKSxcblx0XHRcdG1pbiA9IHByZXZDb29yZHMuc2xpY2UoMCwgMiksXG5cdFx0XHRtYXggPSBtaW4uc2xpY2UoKSxcblx0XHRcdHJvb3RzID0gbmV3IEFycmF5KDIpO1xuXG5cdFx0ZnVuY3Rpb24gcHJvY2Vzc1NlZ21lbnQoc2VnbWVudCkge1xuXHRcdFx0c2VnbWVudC5fdHJhbnNmb3JtQ29vcmRpbmF0ZXMobWF0cml4LCBjb29yZHMpO1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCAyOyBpKyspIHtcblx0XHRcdFx0Q3VydmUuX2FkZEJvdW5kcyhcblx0XHRcdFx0XHRwcmV2Q29vcmRzW2ldLFxuXHRcdFx0XHRcdHByZXZDb29yZHNbaSArIDRdLFxuXHRcdFx0XHRcdGNvb3Jkc1tpICsgMl0sXG5cdFx0XHRcdFx0Y29vcmRzW2ldLFxuXHRcdFx0XHRcdGksIHN0cm9rZVBhZGRpbmcgPyBzdHJva2VQYWRkaW5nW2ldIDogMCwgbWluLCBtYXgsIHJvb3RzKTtcblx0XHRcdH1cblx0XHRcdHZhciB0bXAgPSBwcmV2Q29vcmRzO1xuXHRcdFx0cHJldkNvb3JkcyA9IGNvb3Jkcztcblx0XHRcdGNvb3JkcyA9IHRtcDtcblx0XHR9XG5cblx0XHRmb3IgKHZhciBpID0gMSwgbCA9IHNlZ21lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKylcblx0XHRcdHByb2Nlc3NTZWdtZW50KHNlZ21lbnRzW2ldKTtcblx0XHRpZiAoY2xvc2VkKVxuXHRcdFx0cHJvY2Vzc1NlZ21lbnQoZmlyc3QpO1xuXHRcdHJldHVybiBuZXcgUmVjdGFuZ2xlKG1pblswXSwgbWluWzFdLCBtYXhbMF0gLSBtaW5bMF0sIG1heFsxXSAtIG1pblsxXSk7XG5cdH0sXG5cblx0Z2V0U3Ryb2tlQm91bmRzOiBmdW5jdGlvbihzZWdtZW50cywgY2xvc2VkLCBwYXRoLCBtYXRyaXgsIG9wdGlvbnMpIHtcblx0XHR2YXIgc3R5bGUgPSBwYXRoLmdldFN0eWxlKCksXG5cdFx0XHRzdHJva2UgPSBzdHlsZS5oYXNTdHJva2UoKSxcblx0XHRcdHN0cm9rZVdpZHRoID0gc3R5bGUuZ2V0U3Ryb2tlV2lkdGgoKSxcblx0XHRcdHN0cm9rZU1hdHJpeCA9IHN0cm9rZSAmJiBwYXRoLl9nZXRTdHJva2VNYXRyaXgobWF0cml4LCBvcHRpb25zKSxcblx0XHRcdHN0cm9rZVBhZGRpbmcgPSBzdHJva2UgJiYgUGF0aC5fZ2V0U3Ryb2tlUGFkZGluZyhzdHJva2VXaWR0aCxcblx0XHRcdFx0c3Ryb2tlTWF0cml4KSxcblx0XHRcdGJvdW5kcyA9IFBhdGguZ2V0Qm91bmRzKHNlZ21lbnRzLCBjbG9zZWQsIHBhdGgsIG1hdHJpeCwgb3B0aW9ucyxcblx0XHRcdFx0c3Ryb2tlUGFkZGluZyk7XG5cdFx0aWYgKCFzdHJva2UpXG5cdFx0XHRyZXR1cm4gYm91bmRzO1xuXHRcdHZhciBzdHJva2VSYWRpdXMgPSBzdHJva2VXaWR0aCAvIDIsXG5cdFx0XHRqb2luID0gc3R5bGUuZ2V0U3Ryb2tlSm9pbigpLFxuXHRcdFx0Y2FwID0gc3R5bGUuZ2V0U3Ryb2tlQ2FwKCksXG5cdFx0XHRtaXRlckxpbWl0ID0gc3R5bGUuZ2V0TWl0ZXJMaW1pdCgpLFxuXHRcdFx0am9pbkJvdW5kcyA9IG5ldyBSZWN0YW5nbGUobmV3IFNpemUoc3Ryb2tlUGFkZGluZykpO1xuXG5cdFx0ZnVuY3Rpb24gYWRkUG9pbnQocG9pbnQpIHtcblx0XHRcdGJvdW5kcyA9IGJvdW5kcy5pbmNsdWRlKHBvaW50KTtcblx0XHR9XG5cblx0XHRmdW5jdGlvbiBhZGRSb3VuZChzZWdtZW50KSB7XG5cdFx0XHRib3VuZHMgPSBib3VuZHMudW5pdGUoXG5cdFx0XHRcdFx0am9pbkJvdW5kcy5zZXRDZW50ZXIoc2VnbWVudC5fcG9pbnQudHJhbnNmb3JtKG1hdHJpeCkpKTtcblx0XHR9XG5cblx0XHRmdW5jdGlvbiBhZGRKb2luKHNlZ21lbnQsIGpvaW4pIHtcblx0XHRcdGlmIChqb2luID09PSAncm91bmQnIHx8IHNlZ21lbnQuaXNTbW9vdGgoKSkge1xuXHRcdFx0XHRhZGRSb3VuZChzZWdtZW50KTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFBhdGguX2FkZEJldmVsSm9pbihzZWdtZW50LCBqb2luLCBzdHJva2VSYWRpdXMsIG1pdGVyTGltaXQsXG5cdFx0XHRcdFx0XHRtYXRyaXgsIHN0cm9rZU1hdHJpeCwgYWRkUG9pbnQpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIGFkZENhcChzZWdtZW50LCBjYXApIHtcblx0XHRcdGlmIChjYXAgPT09ICdyb3VuZCcpIHtcblx0XHRcdFx0YWRkUm91bmQoc2VnbWVudCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRQYXRoLl9hZGRTcXVhcmVDYXAoc2VnbWVudCwgY2FwLCBzdHJva2VSYWRpdXMsIG1hdHJpeCxcblx0XHRcdFx0XHRcdHN0cm9rZU1hdHJpeCwgYWRkUG9pbnQpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHZhciBsZW5ndGggPSBzZWdtZW50cy5sZW5ndGggLSAoY2xvc2VkID8gMCA6IDEpO1xuXHRcdGZvciAodmFyIGkgPSAxOyBpIDwgbGVuZ3RoOyBpKyspXG5cdFx0XHRhZGRKb2luKHNlZ21lbnRzW2ldLCBqb2luKTtcblx0XHRpZiAoY2xvc2VkKSB7XG5cdFx0XHRhZGRKb2luKHNlZ21lbnRzWzBdLCBqb2luKTtcblx0XHR9IGVsc2UgaWYgKGxlbmd0aCA+IDApIHtcblx0XHRcdGFkZENhcChzZWdtZW50c1swXSwgY2FwKTtcblx0XHRcdGFkZENhcChzZWdtZW50c1tzZWdtZW50cy5sZW5ndGggLSAxXSwgY2FwKTtcblx0XHR9XG5cdFx0cmV0dXJuIGJvdW5kcztcblx0fSxcblxuXHRfZ2V0U3Ryb2tlUGFkZGluZzogZnVuY3Rpb24ocmFkaXVzLCBtYXRyaXgpIHtcblx0XHRpZiAoIW1hdHJpeClcblx0XHRcdHJldHVybiBbcmFkaXVzLCByYWRpdXNdO1xuXHRcdHZhciBob3IgPSBuZXcgUG9pbnQocmFkaXVzLCAwKS50cmFuc2Zvcm0obWF0cml4KSxcblx0XHRcdHZlciA9IG5ldyBQb2ludCgwLCByYWRpdXMpLnRyYW5zZm9ybShtYXRyaXgpLFxuXHRcdFx0cGhpID0gaG9yLmdldEFuZ2xlSW5SYWRpYW5zKCksXG5cdFx0XHRhID0gaG9yLmdldExlbmd0aCgpLFxuXHRcdFx0YiA9IHZlci5nZXRMZW5ndGgoKTtcblx0XHR2YXIgc2luID0gTWF0aC5zaW4ocGhpKSxcblx0XHRcdGNvcyA9IE1hdGguY29zKHBoaSksXG5cdFx0XHR0YW4gPSBNYXRoLnRhbihwaGkpLFxuXHRcdFx0dHggPSBNYXRoLmF0YW4yKGIgKiB0YW4sIGEpLFxuXHRcdFx0dHkgPSBNYXRoLmF0YW4yKGIsIHRhbiAqIGEpO1xuXHRcdHJldHVybiBbTWF0aC5hYnMoYSAqIE1hdGguY29zKHR4KSAqIGNvcyArIGIgKiBNYXRoLnNpbih0eCkgKiBzaW4pLFxuXHRcdFx0XHRNYXRoLmFicyhiICogTWF0aC5zaW4odHkpICogY29zICsgYSAqIE1hdGguY29zKHR5KSAqIHNpbildO1xuXHR9LFxuXG5cdF9hZGRCZXZlbEpvaW46IGZ1bmN0aW9uKHNlZ21lbnQsIGpvaW4sIHJhZGl1cywgbWl0ZXJMaW1pdCwgbWF0cml4LFxuXHRcdFx0c3Ryb2tlTWF0cml4LCBhZGRQb2ludCwgaXNBcmVhKSB7XG5cdFx0dmFyIGN1cnZlMiA9IHNlZ21lbnQuZ2V0Q3VydmUoKSxcblx0XHRcdGN1cnZlMSA9IGN1cnZlMi5nZXRQcmV2aW91cygpLFxuXHRcdFx0cG9pbnQgPSBjdXJ2ZTIuZ2V0UG9pbnQxKCkudHJhbnNmb3JtKG1hdHJpeCksXG5cdFx0XHRub3JtYWwxID0gY3VydmUxLmdldE5vcm1hbEF0VGltZSgxKS5tdWx0aXBseShyYWRpdXMpXG5cdFx0XHRcdC50cmFuc2Zvcm0oc3Ryb2tlTWF0cml4KSxcblx0XHRcdG5vcm1hbDIgPSBjdXJ2ZTIuZ2V0Tm9ybWFsQXRUaW1lKDApLm11bHRpcGx5KHJhZGl1cylcblx0XHRcdFx0LnRyYW5zZm9ybShzdHJva2VNYXRyaXgpO1xuXHRcdGlmIChub3JtYWwxLmdldERpcmVjdGVkQW5nbGUobm9ybWFsMikgPCAwKSB7XG5cdFx0XHRub3JtYWwxID0gbm9ybWFsMS5uZWdhdGUoKTtcblx0XHRcdG5vcm1hbDIgPSBub3JtYWwyLm5lZ2F0ZSgpO1xuXHRcdH1cblx0XHRpZiAoaXNBcmVhKVxuXHRcdFx0YWRkUG9pbnQocG9pbnQpO1xuXHRcdGFkZFBvaW50KHBvaW50LmFkZChub3JtYWwxKSk7XG5cdFx0aWYgKGpvaW4gPT09ICdtaXRlcicpIHtcblx0XHRcdHZhciBjb3JuZXIgPSBuZXcgTGluZShwb2ludC5hZGQobm9ybWFsMSksXG5cdFx0XHRcdFx0bmV3IFBvaW50KC1ub3JtYWwxLnksIG5vcm1hbDEueCksIHRydWVcblx0XHRcdFx0KS5pbnRlcnNlY3QobmV3IExpbmUocG9pbnQuYWRkKG5vcm1hbDIpLFxuXHRcdFx0XHRcdG5ldyBQb2ludCgtbm9ybWFsMi55LCBub3JtYWwyLngpLCB0cnVlXG5cdFx0XHRcdCksIHRydWUpO1xuXHRcdFx0aWYgKGNvcm5lciAmJiBwb2ludC5nZXREaXN0YW5jZShjb3JuZXIpIDw9IG1pdGVyTGltaXQgKiByYWRpdXMpIHtcblx0XHRcdFx0YWRkUG9pbnQoY29ybmVyKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0YWRkUG9pbnQocG9pbnQuYWRkKG5vcm1hbDIpKTtcblx0fSxcblxuXHRfYWRkU3F1YXJlQ2FwOiBmdW5jdGlvbihzZWdtZW50LCBjYXAsIHJhZGl1cywgbWF0cml4LCBzdHJva2VNYXRyaXgsXG5cdFx0XHRhZGRQb2ludCwgaXNBcmVhKSB7XG5cdFx0dmFyIHBvaW50ID0gc2VnbWVudC5fcG9pbnQudHJhbnNmb3JtKG1hdHJpeCksXG5cdFx0XHRsb2MgPSBzZWdtZW50LmdldExvY2F0aW9uKCksXG5cdFx0XHRub3JtYWwgPSBsb2MuZ2V0Tm9ybWFsKClcblx0XHRcdFx0XHQubXVsdGlwbHkobG9jLmdldFRpbWUoKSA9PT0gMCA/IHJhZGl1cyA6IC1yYWRpdXMpXG5cdFx0XHRcdFx0LnRyYW5zZm9ybShzdHJva2VNYXRyaXgpO1xuXHRcdGlmIChjYXAgPT09ICdzcXVhcmUnKSB7XG5cdFx0XHRpZiAoaXNBcmVhKSB7XG5cdFx0XHRcdGFkZFBvaW50KHBvaW50LnN1YnRyYWN0KG5vcm1hbCkpO1xuXHRcdFx0XHRhZGRQb2ludChwb2ludC5hZGQobm9ybWFsKSk7XG5cdFx0XHR9XG5cdFx0XHRwb2ludCA9IHBvaW50LmFkZChub3JtYWwucm90YXRlKC05MCkpO1xuXHRcdH1cblx0XHRhZGRQb2ludChwb2ludC5hZGQobm9ybWFsKSk7XG5cdFx0YWRkUG9pbnQocG9pbnQuc3VidHJhY3Qobm9ybWFsKSk7XG5cdH0sXG5cblx0Z2V0SGFuZGxlQm91bmRzOiBmdW5jdGlvbihzZWdtZW50cywgY2xvc2VkLCBwYXRoLCBtYXRyaXgsIG9wdGlvbnMpIHtcblx0XHR2YXIgc3R5bGUgPSBwYXRoLmdldFN0eWxlKCksXG5cdFx0XHRzdHJva2UgPSBvcHRpb25zLnN0cm9rZSAmJiBzdHlsZS5oYXNTdHJva2UoKSxcblx0XHRcdHN0cm9rZVBhZGRpbmcsXG5cdFx0XHRqb2luUGFkZGluZztcblx0XHRpZiAoc3Ryb2tlKSB7XG5cdFx0XHR2YXIgc3Ryb2tlTWF0cml4ID0gcGF0aC5fZ2V0U3Ryb2tlTWF0cml4KG1hdHJpeCwgb3B0aW9ucyksXG5cdFx0XHRcdHN0cm9rZVJhZGl1cyA9IHN0eWxlLmdldFN0cm9rZVdpZHRoKCkgLyAyLFxuXHRcdFx0XHRqb2luUmFkaXVzID0gc3Ryb2tlUmFkaXVzO1xuXHRcdFx0aWYgKHN0eWxlLmdldFN0cm9rZUpvaW4oKSA9PT0gJ21pdGVyJylcblx0XHRcdFx0am9pblJhZGl1cyA9IHN0cm9rZVJhZGl1cyAqIHN0eWxlLmdldE1pdGVyTGltaXQoKTtcblx0XHRcdGlmIChzdHlsZS5nZXRTdHJva2VDYXAoKSA9PT0gJ3NxdWFyZScpXG5cdFx0XHRcdGpvaW5SYWRpdXMgPSBNYXRoLm1heChqb2luUmFkaXVzLCBzdHJva2VSYWRpdXMgKiBNYXRoLlNRUlQyKTtcblx0XHRcdHN0cm9rZVBhZGRpbmcgPSBQYXRoLl9nZXRTdHJva2VQYWRkaW5nKHN0cm9rZVJhZGl1cywgc3Ryb2tlTWF0cml4KTtcblx0XHRcdGpvaW5QYWRkaW5nID0gUGF0aC5fZ2V0U3Ryb2tlUGFkZGluZyhqb2luUmFkaXVzLCBzdHJva2VNYXRyaXgpO1xuXHRcdH1cblx0XHR2YXIgY29vcmRzID0gbmV3IEFycmF5KDYpLFxuXHRcdFx0eDEgPSBJbmZpbml0eSxcblx0XHRcdHgyID0gLXgxLFxuXHRcdFx0eTEgPSB4MSxcblx0XHRcdHkyID0geDI7XG5cdFx0Zm9yICh2YXIgaSA9IDAsIGwgPSBzZWdtZW50cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcblx0XHRcdHZhciBzZWdtZW50ID0gc2VnbWVudHNbaV07XG5cdFx0XHRzZWdtZW50Ll90cmFuc2Zvcm1Db29yZGluYXRlcyhtYXRyaXgsIGNvb3Jkcyk7XG5cdFx0XHRmb3IgKHZhciBqID0gMDsgaiA8IDY7IGogKz0gMikge1xuXHRcdFx0XHR2YXIgcGFkZGluZyA9ICFqID8gam9pblBhZGRpbmcgOiBzdHJva2VQYWRkaW5nLFxuXHRcdFx0XHRcdHBhZGRpbmdYID0gcGFkZGluZyA/IHBhZGRpbmdbMF0gOiAwLFxuXHRcdFx0XHRcdHBhZGRpbmdZID0gcGFkZGluZyA/IHBhZGRpbmdbMV0gOiAwLFxuXHRcdFx0XHRcdHggPSBjb29yZHNbal0sXG5cdFx0XHRcdFx0eSA9IGNvb3Jkc1tqICsgMV0sXG5cdFx0XHRcdFx0eG4gPSB4IC0gcGFkZGluZ1gsXG5cdFx0XHRcdFx0eHggPSB4ICsgcGFkZGluZ1gsXG5cdFx0XHRcdFx0eW4gPSB5IC0gcGFkZGluZ1ksXG5cdFx0XHRcdFx0eXggPSB5ICsgcGFkZGluZ1k7XG5cdFx0XHRcdGlmICh4biA8IHgxKSB4MSA9IHhuO1xuXHRcdFx0XHRpZiAoeHggPiB4MikgeDIgPSB4eDtcblx0XHRcdFx0aWYgKHluIDwgeTEpIHkxID0geW47XG5cdFx0XHRcdGlmICh5eCA+IHkyKSB5MiA9IHl4O1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gbmV3IFJlY3RhbmdsZSh4MSwgeTEsIHgyIC0geDEsIHkyIC0geTEpO1xuXHR9XG59fSk7XG5cblBhdGguaW5qZWN0KHsgc3RhdGljczogbmV3IGZ1bmN0aW9uKCkge1xuXG5cdHZhciBrYXBwYSA9IDAuNTUyMjg0NzQ5ODMwNzkzNixcblx0XHRlbGxpcHNlU2VnbWVudHMgPSBbXG5cdFx0XHRuZXcgU2VnbWVudChbLTEsIDBdLCBbMCwga2FwcGEgXSwgWzAsIC1rYXBwYV0pLFxuXHRcdFx0bmV3IFNlZ21lbnQoWzAsIC0xXSwgWy1rYXBwYSwgMF0sIFtrYXBwYSwgMCBdKSxcblx0XHRcdG5ldyBTZWdtZW50KFsxLCAwXSwgWzAsIC1rYXBwYV0sIFswLCBrYXBwYSBdKSxcblx0XHRcdG5ldyBTZWdtZW50KFswLCAxXSwgW2thcHBhLCAwIF0sIFsta2FwcGEsIDBdKVxuXHRcdF07XG5cblx0ZnVuY3Rpb24gY3JlYXRlUGF0aChzZWdtZW50cywgY2xvc2VkLCBhcmdzKSB7XG5cdFx0dmFyIHByb3BzID0gQmFzZS5nZXROYW1lZChhcmdzKSxcblx0XHRcdHBhdGggPSBuZXcgUGF0aChwcm9wcyAmJiBwcm9wcy5pbnNlcnQgPT0gZmFsc2UgJiYgSXRlbS5OT19JTlNFUlQpO1xuXHRcdHBhdGguX2FkZChzZWdtZW50cyk7XG5cdFx0cGF0aC5fY2xvc2VkID0gY2xvc2VkO1xuXHRcdHJldHVybiBwYXRoLnNldChwcm9wcywgeyBpbnNlcnQ6IHRydWUgfSk7XG5cdH1cblxuXHRmdW5jdGlvbiBjcmVhdGVFbGxpcHNlKGNlbnRlciwgcmFkaXVzLCBhcmdzKSB7XG5cdFx0dmFyIHNlZ21lbnRzID0gbmV3IEFycmF5KDQpO1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgNDsgaSsrKSB7XG5cdFx0XHR2YXIgc2VnbWVudCA9IGVsbGlwc2VTZWdtZW50c1tpXTtcblx0XHRcdHNlZ21lbnRzW2ldID0gbmV3IFNlZ21lbnQoXG5cdFx0XHRcdHNlZ21lbnQuX3BvaW50Lm11bHRpcGx5KHJhZGl1cykuYWRkKGNlbnRlciksXG5cdFx0XHRcdHNlZ21lbnQuX2hhbmRsZUluLm11bHRpcGx5KHJhZGl1cyksXG5cdFx0XHRcdHNlZ21lbnQuX2hhbmRsZU91dC5tdWx0aXBseShyYWRpdXMpXG5cdFx0XHQpO1xuXHRcdH1cblx0XHRyZXR1cm4gY3JlYXRlUGF0aChzZWdtZW50cywgdHJ1ZSwgYXJncyk7XG5cdH1cblxuXHRyZXR1cm4ge1xuXHRcdExpbmU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIGNyZWF0ZVBhdGgoW1xuXHRcdFx0XHRuZXcgU2VnbWVudChQb2ludC5yZWFkTmFtZWQoYXJndW1lbnRzLCAnZnJvbScpKSxcblx0XHRcdFx0bmV3IFNlZ21lbnQoUG9pbnQucmVhZE5hbWVkKGFyZ3VtZW50cywgJ3RvJykpXG5cdFx0XHRdLCBmYWxzZSwgYXJndW1lbnRzKTtcblx0XHR9LFxuXG5cdFx0Q2lyY2xlOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBjZW50ZXIgPSBQb2ludC5yZWFkTmFtZWQoYXJndW1lbnRzLCAnY2VudGVyJyksXG5cdFx0XHRcdHJhZGl1cyA9IEJhc2UucmVhZE5hbWVkKGFyZ3VtZW50cywgJ3JhZGl1cycpO1xuXHRcdFx0cmV0dXJuIGNyZWF0ZUVsbGlwc2UoY2VudGVyLCBuZXcgU2l6ZShyYWRpdXMpLCBhcmd1bWVudHMpO1xuXHRcdH0sXG5cblx0XHRSZWN0YW5nbGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHJlY3QgPSBSZWN0YW5nbGUucmVhZE5hbWVkKGFyZ3VtZW50cywgJ3JlY3RhbmdsZScpLFxuXHRcdFx0XHRyYWRpdXMgPSBTaXplLnJlYWROYW1lZChhcmd1bWVudHMsICdyYWRpdXMnLCAwLFxuXHRcdFx0XHRcdFx0eyByZWFkTnVsbDogdHJ1ZSB9KSxcblx0XHRcdFx0YmwgPSByZWN0LmdldEJvdHRvbUxlZnQodHJ1ZSksXG5cdFx0XHRcdHRsID0gcmVjdC5nZXRUb3BMZWZ0KHRydWUpLFxuXHRcdFx0XHR0ciA9IHJlY3QuZ2V0VG9wUmlnaHQodHJ1ZSksXG5cdFx0XHRcdGJyID0gcmVjdC5nZXRCb3R0b21SaWdodCh0cnVlKSxcblx0XHRcdFx0c2VnbWVudHM7XG5cdFx0XHRpZiAoIXJhZGl1cyB8fCByYWRpdXMuaXNaZXJvKCkpIHtcblx0XHRcdFx0c2VnbWVudHMgPSBbXG5cdFx0XHRcdFx0bmV3IFNlZ21lbnQoYmwpLFxuXHRcdFx0XHRcdG5ldyBTZWdtZW50KHRsKSxcblx0XHRcdFx0XHRuZXcgU2VnbWVudCh0ciksXG5cdFx0XHRcdFx0bmV3IFNlZ21lbnQoYnIpXG5cdFx0XHRcdF07XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyYWRpdXMgPSBTaXplLm1pbihyYWRpdXMsIHJlY3QuZ2V0U2l6ZSh0cnVlKS5kaXZpZGUoMikpO1xuXHRcdFx0XHR2YXIgcnggPSByYWRpdXMud2lkdGgsXG5cdFx0XHRcdFx0cnkgPSByYWRpdXMuaGVpZ2h0LFxuXHRcdFx0XHRcdGh4ID0gcnggKiBrYXBwYSxcblx0XHRcdFx0XHRoeSA9IHJ5ICoga2FwcGE7XG5cdFx0XHRcdHNlZ21lbnRzID0gW1xuXHRcdFx0XHRcdG5ldyBTZWdtZW50KGJsLmFkZChyeCwgMCksIG51bGwsIFstaHgsIDBdKSxcblx0XHRcdFx0XHRuZXcgU2VnbWVudChibC5zdWJ0cmFjdCgwLCByeSksIFswLCBoeV0pLFxuXHRcdFx0XHRcdG5ldyBTZWdtZW50KHRsLmFkZCgwLCByeSksIG51bGwsIFswLCAtaHldKSxcblx0XHRcdFx0XHRuZXcgU2VnbWVudCh0bC5hZGQocngsIDApLCBbLWh4LCAwXSwgbnVsbCksXG5cdFx0XHRcdFx0bmV3IFNlZ21lbnQodHIuc3VidHJhY3QocngsIDApLCBudWxsLCBbaHgsIDBdKSxcblx0XHRcdFx0XHRuZXcgU2VnbWVudCh0ci5hZGQoMCwgcnkpLCBbMCwgLWh5XSwgbnVsbCksXG5cdFx0XHRcdFx0bmV3IFNlZ21lbnQoYnIuc3VidHJhY3QoMCwgcnkpLCBudWxsLCBbMCwgaHldKSxcblx0XHRcdFx0XHRuZXcgU2VnbWVudChici5zdWJ0cmFjdChyeCwgMCksIFtoeCwgMF0pXG5cdFx0XHRcdF07XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gY3JlYXRlUGF0aChzZWdtZW50cywgdHJ1ZSwgYXJndW1lbnRzKTtcblx0XHR9LFxuXG5cdFx0Um91bmRSZWN0YW5nbGU6ICcjUmVjdGFuZ2xlJyxcblxuXHRcdEVsbGlwc2U6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGVsbGlwc2UgPSBTaGFwZS5fcmVhZEVsbGlwc2UoYXJndW1lbnRzKTtcblx0XHRcdHJldHVybiBjcmVhdGVFbGxpcHNlKGVsbGlwc2UuY2VudGVyLCBlbGxpcHNlLnJhZGl1cywgYXJndW1lbnRzKTtcblx0XHR9LFxuXG5cdFx0T3ZhbDogJyNFbGxpcHNlJyxcblxuXHRcdEFyYzogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgZnJvbSA9IFBvaW50LnJlYWROYW1lZChhcmd1bWVudHMsICdmcm9tJyksXG5cdFx0XHRcdHRocm91Z2ggPSBQb2ludC5yZWFkTmFtZWQoYXJndW1lbnRzLCAndGhyb3VnaCcpLFxuXHRcdFx0XHR0byA9IFBvaW50LnJlYWROYW1lZChhcmd1bWVudHMsICd0bycpLFxuXHRcdFx0XHRwcm9wcyA9IEJhc2UuZ2V0TmFtZWQoYXJndW1lbnRzKSxcblx0XHRcdFx0cGF0aCA9IG5ldyBQYXRoKHByb3BzICYmIHByb3BzLmluc2VydCA9PSBmYWxzZVxuXHRcdFx0XHRcdFx0JiYgSXRlbS5OT19JTlNFUlQpO1xuXHRcdFx0cGF0aC5tb3ZlVG8oZnJvbSk7XG5cdFx0XHRwYXRoLmFyY1RvKHRocm91Z2gsIHRvKTtcblx0XHRcdHJldHVybiBwYXRoLnNldChwcm9wcyk7XG5cdFx0fSxcblxuXHRcdFJlZ3VsYXJQb2x5Z29uOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBjZW50ZXIgPSBQb2ludC5yZWFkTmFtZWQoYXJndW1lbnRzLCAnY2VudGVyJyksXG5cdFx0XHRcdHNpZGVzID0gQmFzZS5yZWFkTmFtZWQoYXJndW1lbnRzLCAnc2lkZXMnKSxcblx0XHRcdFx0cmFkaXVzID0gQmFzZS5yZWFkTmFtZWQoYXJndW1lbnRzLCAncmFkaXVzJyksXG5cdFx0XHRcdHN0ZXAgPSAzNjAgLyBzaWRlcyxcblx0XHRcdFx0dGhyZWUgPSBzaWRlcyAlIDMgPT09IDAsXG5cdFx0XHRcdHZlY3RvciA9IG5ldyBQb2ludCgwLCB0aHJlZSA/IC1yYWRpdXMgOiByYWRpdXMpLFxuXHRcdFx0XHRvZmZzZXQgPSB0aHJlZSA/IC0xIDogMC41LFxuXHRcdFx0XHRzZWdtZW50cyA9IG5ldyBBcnJheShzaWRlcyk7XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHNpZGVzOyBpKyspXG5cdFx0XHRcdHNlZ21lbnRzW2ldID0gbmV3IFNlZ21lbnQoY2VudGVyLmFkZChcblx0XHRcdFx0XHR2ZWN0b3Iucm90YXRlKChpICsgb2Zmc2V0KSAqIHN0ZXApKSk7XG5cdFx0XHRyZXR1cm4gY3JlYXRlUGF0aChzZWdtZW50cywgdHJ1ZSwgYXJndW1lbnRzKTtcblx0XHR9LFxuXG5cdFx0U3RhcjogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgY2VudGVyID0gUG9pbnQucmVhZE5hbWVkKGFyZ3VtZW50cywgJ2NlbnRlcicpLFxuXHRcdFx0XHRwb2ludHMgPSBCYXNlLnJlYWROYW1lZChhcmd1bWVudHMsICdwb2ludHMnKSAqIDIsXG5cdFx0XHRcdHJhZGl1czEgPSBCYXNlLnJlYWROYW1lZChhcmd1bWVudHMsICdyYWRpdXMxJyksXG5cdFx0XHRcdHJhZGl1czIgPSBCYXNlLnJlYWROYW1lZChhcmd1bWVudHMsICdyYWRpdXMyJyksXG5cdFx0XHRcdHN0ZXAgPSAzNjAgLyBwb2ludHMsXG5cdFx0XHRcdHZlY3RvciA9IG5ldyBQb2ludCgwLCAtMSksXG5cdFx0XHRcdHNlZ21lbnRzID0gbmV3IEFycmF5KHBvaW50cyk7XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHBvaW50czsgaSsrKVxuXHRcdFx0XHRzZWdtZW50c1tpXSA9IG5ldyBTZWdtZW50KGNlbnRlci5hZGQodmVjdG9yLnJvdGF0ZShzdGVwICogaSlcblx0XHRcdFx0XHRcdC5tdWx0aXBseShpICUgMiA/IHJhZGl1czIgOiByYWRpdXMxKSkpO1xuXHRcdFx0cmV0dXJuIGNyZWF0ZVBhdGgoc2VnbWVudHMsIHRydWUsIGFyZ3VtZW50cyk7XG5cdFx0fVxuXHR9O1xufX0pO1xuXG52YXIgQ29tcG91bmRQYXRoID0gUGF0aEl0ZW0uZXh0ZW5kKHtcblx0X2NsYXNzOiAnQ29tcG91bmRQYXRoJyxcblx0X3NlcmlhbGl6ZUZpZWxkczoge1xuXHRcdGNoaWxkcmVuOiBbXVxuXHR9LFxuXHRiZWFuczogdHJ1ZSxcblxuXHRpbml0aWFsaXplOiBmdW5jdGlvbiBDb21wb3VuZFBhdGgoYXJnKSB7XG5cdFx0dGhpcy5fY2hpbGRyZW4gPSBbXTtcblx0XHR0aGlzLl9uYW1lZENoaWxkcmVuID0ge307XG5cdFx0aWYgKCF0aGlzLl9pbml0aWFsaXplKGFyZykpIHtcblx0XHRcdGlmICh0eXBlb2YgYXJnID09PSAnc3RyaW5nJykge1xuXHRcdFx0XHR0aGlzLnNldFBhdGhEYXRhKGFyZyk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0aGlzLmFkZENoaWxkcmVuKEFycmF5LmlzQXJyYXkoYXJnKSA/IGFyZyA6IGFyZ3VtZW50cyk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdGluc2VydENoaWxkcmVuOiBmdW5jdGlvbiBpbnNlcnRDaGlsZHJlbihpbmRleCwgaXRlbXMpIHtcblx0XHR2YXIgbGlzdCA9IGl0ZW1zLFxuXHRcdFx0Zmlyc3QgPSBsaXN0WzBdO1xuXHRcdGlmIChmaXJzdCAmJiB0eXBlb2YgZmlyc3RbMF0gPT09ICdudW1iZXInKVxuXHRcdFx0bGlzdCA9IFtsaXN0XTtcblx0XHRmb3IgKHZhciBpID0gaXRlbXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcblx0XHRcdHZhciBpdGVtID0gbGlzdFtpXTtcblx0XHRcdGlmIChsaXN0ID09PSBpdGVtcyAmJiAhKGl0ZW0gaW5zdGFuY2VvZiBQYXRoKSlcblx0XHRcdFx0bGlzdCA9IEJhc2Uuc2xpY2UobGlzdCk7XG5cdFx0XHRpZiAoQXJyYXkuaXNBcnJheShpdGVtKSkge1xuXHRcdFx0XHRsaXN0W2ldID0gbmV3IFBhdGgoeyBzZWdtZW50czogaXRlbSwgaW5zZXJ0OiBmYWxzZSB9KTtcblx0XHRcdH0gZWxzZSBpZiAoaXRlbSBpbnN0YW5jZW9mIENvbXBvdW5kUGF0aCkge1xuXHRcdFx0XHRsaXN0LnNwbGljZS5hcHBseShsaXN0LCBbaSwgMV0uY29uY2F0KGl0ZW0ucmVtb3ZlQ2hpbGRyZW4oKSkpO1xuXHRcdFx0XHRpdGVtLnJlbW92ZSgpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gaW5zZXJ0Q2hpbGRyZW4uYmFzZS5jYWxsKHRoaXMsIGluZGV4LCBsaXN0KTtcblx0fSxcblxuXHRyZWR1Y2U6IGZ1bmN0aW9uIHJlZHVjZShvcHRpb25zKSB7XG5cdFx0dmFyIGNoaWxkcmVuID0gdGhpcy5fY2hpbGRyZW47XG5cdFx0Zm9yICh2YXIgaSA9IGNoaWxkcmVuLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG5cdFx0XHR2YXIgcGF0aCA9IGNoaWxkcmVuW2ldLnJlZHVjZShvcHRpb25zKTtcblx0XHRcdGlmIChwYXRoLmlzRW1wdHkoKSlcblx0XHRcdFx0cGF0aC5yZW1vdmUoKTtcblx0XHR9XG5cdFx0aWYgKCFjaGlsZHJlbi5sZW5ndGgpIHtcblx0XHRcdHZhciBwYXRoID0gbmV3IFBhdGgoSXRlbS5OT19JTlNFUlQpO1xuXHRcdFx0cGF0aC5jb3B5QXR0cmlidXRlcyh0aGlzKTtcblx0XHRcdHBhdGguaW5zZXJ0QWJvdmUodGhpcyk7XG5cdFx0XHR0aGlzLnJlbW92ZSgpO1xuXHRcdFx0cmV0dXJuIHBhdGg7XG5cdFx0fVxuXHRcdHJldHVybiByZWR1Y2UuYmFzZS5jYWxsKHRoaXMpO1xuXHR9LFxuXG5cdGlzQ2xvc2VkOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgY2hpbGRyZW4gPSB0aGlzLl9jaGlsZHJlbjtcblx0XHRmb3IgKHZhciBpID0gMCwgbCA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuXHRcdFx0aWYgKCFjaGlsZHJlbltpXS5fY2xvc2VkKVxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHRcdHJldHVybiB0cnVlO1xuXHR9LFxuXG5cdHNldENsb3NlZDogZnVuY3Rpb24oY2xvc2VkKSB7XG5cdFx0dmFyIGNoaWxkcmVuID0gdGhpcy5fY2hpbGRyZW47XG5cdFx0Zm9yICh2YXIgaSA9IDAsIGwgPSBjaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpKyspIHtcblx0XHRcdGNoaWxkcmVuW2ldLnNldENsb3NlZChjbG9zZWQpO1xuXHRcdH1cblx0fSxcblxuXHRnZXRGaXJzdFNlZ21lbnQ6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBmaXJzdCA9IHRoaXMuZ2V0Rmlyc3RDaGlsZCgpO1xuXHRcdHJldHVybiBmaXJzdCAmJiBmaXJzdC5nZXRGaXJzdFNlZ21lbnQoKTtcblx0fSxcblxuXHRnZXRMYXN0U2VnbWVudDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGxhc3QgPSB0aGlzLmdldExhc3RDaGlsZCgpO1xuXHRcdHJldHVybiBsYXN0ICYmIGxhc3QuZ2V0TGFzdFNlZ21lbnQoKTtcblx0fSxcblxuXHRnZXRDdXJ2ZXM6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBjaGlsZHJlbiA9IHRoaXMuX2NoaWxkcmVuLFxuXHRcdFx0Y3VydmVzID0gW107XG5cdFx0Zm9yICh2YXIgaSA9IDAsIGwgPSBjaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpKyspIHtcblx0XHRcdEJhc2UucHVzaChjdXJ2ZXMsIGNoaWxkcmVuW2ldLmdldEN1cnZlcygpKTtcblx0XHR9XG5cdFx0cmV0dXJuIGN1cnZlcztcblx0fSxcblxuXHRnZXRGaXJzdEN1cnZlOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZmlyc3QgPSB0aGlzLmdldEZpcnN0Q2hpbGQoKTtcblx0XHRyZXR1cm4gZmlyc3QgJiYgZmlyc3QuZ2V0Rmlyc3RDdXJ2ZSgpO1xuXHR9LFxuXG5cdGdldExhc3RDdXJ2ZTogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGxhc3QgPSB0aGlzLmdldExhc3RDaGlsZCgpO1xuXHRcdHJldHVybiBsYXN0ICYmIGxhc3QuZ2V0TGFzdEN1cnZlKCk7XG5cdH0sXG5cblx0Z2V0QXJlYTogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGNoaWxkcmVuID0gdGhpcy5fY2hpbGRyZW4sXG5cdFx0XHRhcmVhID0gMDtcblx0XHRmb3IgKHZhciBpID0gMCwgbCA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkrKylcblx0XHRcdGFyZWEgKz0gY2hpbGRyZW5baV0uZ2V0QXJlYSgpO1xuXHRcdHJldHVybiBhcmVhO1xuXHR9LFxuXG5cdGdldExlbmd0aDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGNoaWxkcmVuID0gdGhpcy5fY2hpbGRyZW4sXG5cdFx0XHRsZW5ndGggPSAwO1xuXHRcdGZvciAodmFyIGkgPSAwLCBsID0gY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSsrKVxuXHRcdFx0bGVuZ3RoICs9IGNoaWxkcmVuW2ldLmdldExlbmd0aCgpO1xuXHRcdHJldHVybiBsZW5ndGg7XG5cdH0sXG5cblx0Z2V0UGF0aERhdGE6IGZ1bmN0aW9uKF9tYXRyaXgsIF9wcmVjaXNpb24pIHtcblx0XHR2YXIgY2hpbGRyZW4gPSB0aGlzLl9jaGlsZHJlbixcblx0XHRcdHBhdGhzID0gW107XG5cdFx0Zm9yICh2YXIgaSA9IDAsIGwgPSBjaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpKyspIHtcblx0XHRcdHZhciBjaGlsZCA9IGNoaWxkcmVuW2ldLFxuXHRcdFx0XHRteCA9IGNoaWxkLl9tYXRyaXg7XG5cdFx0XHRwYXRocy5wdXNoKGNoaWxkLmdldFBhdGhEYXRhKF9tYXRyaXggJiYgIW14LmlzSWRlbnRpdHkoKVxuXHRcdFx0XHRcdD8gX21hdHJpeC5hcHBlbmRlZChteCkgOiBfbWF0cml4LCBfcHJlY2lzaW9uKSk7XG5cdFx0fVxuXHRcdHJldHVybiBwYXRocy5qb2luKCcnKTtcblx0fSxcblxuXHRfaGl0VGVzdENoaWxkcmVuOiBmdW5jdGlvbiBfaGl0VGVzdENoaWxkcmVuKHBvaW50LCBvcHRpb25zLCB2aWV3TWF0cml4KSB7XG5cdFx0cmV0dXJuIF9oaXRUZXN0Q2hpbGRyZW4uYmFzZS5jYWxsKHRoaXMsIHBvaW50LFxuXHRcdFx0XHRvcHRpb25zLmNsYXNzID09PSBQYXRoIHx8IG9wdGlvbnMudHlwZSA9PT0gJ3BhdGgnID8gb3B0aW9uc1xuXHRcdFx0XHRcdDogQmFzZS5zZXQoe30sIG9wdGlvbnMsIHsgZmlsbDogZmFsc2UgfSksXG5cdFx0XHRcdHZpZXdNYXRyaXgpO1xuXHR9LFxuXG5cdF9kcmF3OiBmdW5jdGlvbihjdHgsIHBhcmFtLCB2aWV3TWF0cml4LCBzdHJva2VNYXRyaXgpIHtcblx0XHR2YXIgY2hpbGRyZW4gPSB0aGlzLl9jaGlsZHJlbjtcblx0XHRpZiAoIWNoaWxkcmVuLmxlbmd0aClcblx0XHRcdHJldHVybjtcblxuXHRcdHBhcmFtID0gcGFyYW0uZXh0ZW5kKHsgZG9udFN0YXJ0OiB0cnVlLCBkb250RmluaXNoOiB0cnVlIH0pO1xuXHRcdGN0eC5iZWdpblBhdGgoKTtcblx0XHRmb3IgKHZhciBpID0gMCwgbCA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkrKylcblx0XHRcdGNoaWxkcmVuW2ldLmRyYXcoY3R4LCBwYXJhbSwgc3Ryb2tlTWF0cml4KTtcblxuXHRcdGlmICghcGFyYW0uY2xpcCkge1xuXHRcdFx0dGhpcy5fc2V0U3R5bGVzKGN0eCwgcGFyYW0sIHZpZXdNYXRyaXgpO1xuXHRcdFx0dmFyIHN0eWxlID0gdGhpcy5fc3R5bGU7XG5cdFx0XHRpZiAoc3R5bGUuaGFzRmlsbCgpKSB7XG5cdFx0XHRcdGN0eC5maWxsKHN0eWxlLmdldEZpbGxSdWxlKCkpO1xuXHRcdFx0XHRjdHguc2hhZG93Q29sb3IgPSAncmdiYSgwLDAsMCwwKSc7XG5cdFx0XHR9XG5cdFx0XHRpZiAoc3R5bGUuaGFzU3Ryb2tlKCkpXG5cdFx0XHRcdGN0eC5zdHJva2UoKTtcblx0XHR9XG5cdH0sXG5cblx0X2RyYXdTZWxlY3RlZDogZnVuY3Rpb24oY3R4LCBtYXRyaXgsIHNlbGVjdGlvbkl0ZW1zKSB7XG5cdFx0dmFyIGNoaWxkcmVuID0gdGhpcy5fY2hpbGRyZW47XG5cdFx0Zm9yICh2YXIgaSA9IDAsIGwgPSBjaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpKyspIHtcblx0XHRcdHZhciBjaGlsZCA9IGNoaWxkcmVuW2ldLFxuXHRcdFx0XHRteCA9IGNoaWxkLl9tYXRyaXg7XG5cdFx0XHRpZiAoIXNlbGVjdGlvbkl0ZW1zW2NoaWxkLl9pZF0pIHtcblx0XHRcdFx0Y2hpbGQuX2RyYXdTZWxlY3RlZChjdHgsIG14LmlzSWRlbnRpdHkoKSA/IG1hdHJpeFxuXHRcdFx0XHRcdFx0OiBtYXRyaXguYXBwZW5kZWQobXgpKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cbn0sXG5uZXcgZnVuY3Rpb24oKSB7XG5cdGZ1bmN0aW9uIGdldEN1cnJlbnRQYXRoKHRoYXQsIGNoZWNrKSB7XG5cdFx0dmFyIGNoaWxkcmVuID0gdGhhdC5fY2hpbGRyZW47XG5cdFx0aWYgKGNoZWNrICYmICFjaGlsZHJlbi5sZW5ndGgpXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ1VzZSBhIG1vdmVUbygpIGNvbW1hbmQgZmlyc3QnKTtcblx0XHRyZXR1cm4gY2hpbGRyZW5bY2hpbGRyZW4ubGVuZ3RoIC0gMV07XG5cdH1cblxuXHRyZXR1cm4gQmFzZS5lYWNoKFsnbGluZVRvJywgJ2N1YmljQ3VydmVUbycsICdxdWFkcmF0aWNDdXJ2ZVRvJywgJ2N1cnZlVG8nLFxuXHRcdFx0J2FyY1RvJywgJ2xpbmVCeScsICdjdWJpY0N1cnZlQnknLCAncXVhZHJhdGljQ3VydmVCeScsICdjdXJ2ZUJ5Jyxcblx0XHRcdCdhcmNCeSddLFxuXHRcdGZ1bmN0aW9uKGtleSkge1xuXHRcdFx0dGhpc1trZXldID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBwYXRoID0gZ2V0Q3VycmVudFBhdGgodGhpcywgdHJ1ZSk7XG5cdFx0XHRcdHBhdGhba2V5XS5hcHBseShwYXRoLCBhcmd1bWVudHMpO1xuXHRcdFx0fTtcblx0XHR9LCB7XG5cdFx0XHRtb3ZlVG86IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgY3VycmVudCA9IGdldEN1cnJlbnRQYXRoKHRoaXMpLFxuXHRcdFx0XHRcdHBhdGggPSBjdXJyZW50ICYmIGN1cnJlbnQuaXNFbXB0eSgpID8gY3VycmVudFxuXHRcdFx0XHRcdFx0XHQ6IG5ldyBQYXRoKEl0ZW0uTk9fSU5TRVJUKTtcblx0XHRcdFx0aWYgKHBhdGggIT09IGN1cnJlbnQpXG5cdFx0XHRcdFx0dGhpcy5hZGRDaGlsZChwYXRoKTtcblx0XHRcdFx0cGF0aC5tb3ZlVG8uYXBwbHkocGF0aCwgYXJndW1lbnRzKTtcblx0XHRcdH0sXG5cblx0XHRcdG1vdmVCeTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBjdXJyZW50ID0gZ2V0Q3VycmVudFBhdGgodGhpcywgdHJ1ZSksXG5cdFx0XHRcdFx0bGFzdCA9IGN1cnJlbnQgJiYgY3VycmVudC5nZXRMYXN0U2VnbWVudCgpLFxuXHRcdFx0XHRcdHBvaW50ID0gUG9pbnQucmVhZChhcmd1bWVudHMpO1xuXHRcdFx0XHR0aGlzLm1vdmVUbyhsYXN0ID8gcG9pbnQuYWRkKGxhc3QuX3BvaW50KSA6IHBvaW50KTtcblx0XHRcdH0sXG5cblx0XHRcdGNsb3NlUGF0aDogZnVuY3Rpb24odG9sZXJhbmNlKSB7XG5cdFx0XHRcdGdldEN1cnJlbnRQYXRoKHRoaXMsIHRydWUpLmNsb3NlUGF0aCh0b2xlcmFuY2UpO1xuXHRcdFx0fVxuXHRcdH1cblx0KTtcbn0sIEJhc2UuZWFjaChbJ3JldmVyc2UnLCAnZmxhdHRlbicsICdzaW1wbGlmeScsICdzbW9vdGgnXSwgZnVuY3Rpb24oa2V5KSB7XG5cdHRoaXNba2V5XSA9IGZ1bmN0aW9uKHBhcmFtKSB7XG5cdFx0dmFyIGNoaWxkcmVuID0gdGhpcy5fY2hpbGRyZW4sXG5cdFx0XHRyZXM7XG5cdFx0Zm9yICh2YXIgaSA9IDAsIGwgPSBjaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpKyspIHtcblx0XHRcdHJlcyA9IGNoaWxkcmVuW2ldW2tleV0ocGFyYW0pIHx8IHJlcztcblx0XHR9XG5cdFx0cmV0dXJuIHJlcztcblx0fTtcbn0sIHt9KSk7XG5cblBhdGhJdGVtLmluamVjdChuZXcgZnVuY3Rpb24oKSB7XG5cdHZhciBtaW4gPSBNYXRoLm1pbixcblx0XHRtYXggPSBNYXRoLm1heCxcblx0XHRhYnMgPSBNYXRoLmFicyxcblx0XHRvcGVyYXRvcnMgPSB7XG5cdFx0XHR1bml0ZTogICAgIHsgJzEnOiB0cnVlLCAnMic6IHRydWUgfSxcblx0XHRcdGludGVyc2VjdDogeyAnMic6IHRydWUgfSxcblx0XHRcdHN1YnRyYWN0OiAgeyAnMSc6IHRydWUgfSxcblx0XHRcdGV4Y2x1ZGU6ICAgeyAnMSc6IHRydWUsICctMSc6IHRydWUgfVxuXHRcdH07XG5cblx0ZnVuY3Rpb24gcHJlcGFyZVBhdGgocGF0aCwgcmVzb2x2ZSkge1xuXHRcdHZhciByZXMgPSBwYXRoLmNsb25lKGZhbHNlKS5yZWR1Y2UoeyBzaW1wbGlmeTogdHJ1ZSB9KVxuXHRcdFx0XHQudHJhbnNmb3JtKG51bGwsIHRydWUsIHRydWUpO1xuXHRcdHJldHVybiByZXNvbHZlXG5cdFx0XHRcdD8gcmVzLnJlc29sdmVDcm9zc2luZ3MoKS5yZW9yaWVudChcblx0XHRcdFx0XHRyZXMuZ2V0RmlsbFJ1bGUoKSA9PT0gJ25vbnplcm8nLCB0cnVlKVxuXHRcdFx0XHQ6IHJlcztcblx0fVxuXG5cdGZ1bmN0aW9uIGNyZWF0ZVJlc3VsdChwYXRocywgc2ltcGxpZnksIHBhdGgxLCBwYXRoMiwgb3B0aW9ucykge1xuXHRcdHZhciByZXN1bHQgPSBuZXcgQ29tcG91bmRQYXRoKEl0ZW0uTk9fSU5TRVJUKTtcblx0XHRyZXN1bHQuYWRkQ2hpbGRyZW4ocGF0aHMsIHRydWUpO1xuXHRcdHJlc3VsdCA9IHJlc3VsdC5yZWR1Y2UoeyBzaW1wbGlmeTogc2ltcGxpZnkgfSk7XG5cdFx0aWYgKCEob3B0aW9ucyAmJiBvcHRpb25zLmluc2VydCA9PSBmYWxzZSkpIHtcblx0XHRcdHJlc3VsdC5pbnNlcnRBYm92ZShwYXRoMiAmJiBwYXRoMS5pc1NpYmxpbmcocGF0aDIpXG5cdFx0XHRcdFx0JiYgcGF0aDEuZ2V0SW5kZXgoKSA8IHBhdGgyLmdldEluZGV4KCkgPyBwYXRoMiA6IHBhdGgxKTtcblx0XHR9XG5cdFx0cmVzdWx0LmNvcHlBdHRyaWJ1dGVzKHBhdGgxLCB0cnVlKTtcblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9XG5cblx0ZnVuY3Rpb24gdHJhY2VCb29sZWFuKHBhdGgxLCBwYXRoMiwgb3BlcmF0aW9uLCBvcHRpb25zKSB7XG5cdFx0aWYgKG9wdGlvbnMgJiYgKG9wdGlvbnMudHJhY2UgPT0gZmFsc2UgfHwgb3B0aW9ucy5zdHJva2UpICYmXG5cdFx0XHRcdC9eKHN1YnRyYWN0fGludGVyc2VjdCkkLy50ZXN0KG9wZXJhdGlvbikpXG5cdFx0XHRyZXR1cm4gc3BsaXRCb29sZWFuKHBhdGgxLCBwYXRoMiwgb3BlcmF0aW9uKTtcblx0XHR2YXIgX3BhdGgxID0gcHJlcGFyZVBhdGgocGF0aDEsIHRydWUpLFxuXHRcdFx0X3BhdGgyID0gcGF0aDIgJiYgcGF0aDEgIT09IHBhdGgyICYmIHByZXBhcmVQYXRoKHBhdGgyLCB0cnVlKSxcblx0XHRcdG9wZXJhdG9yID0gb3BlcmF0b3JzW29wZXJhdGlvbl07XG5cdFx0b3BlcmF0b3Jbb3BlcmF0aW9uXSA9IHRydWU7XG5cdFx0aWYgKF9wYXRoMiAmJiAob3BlcmF0b3Iuc3VidHJhY3QgfHwgb3BlcmF0b3IuZXhjbHVkZSlcblx0XHRcdFx0XiAoX3BhdGgyLmlzQ2xvY2t3aXNlKCkgXiBfcGF0aDEuaXNDbG9ja3dpc2UoKSkpXG5cdFx0XHRfcGF0aDIucmV2ZXJzZSgpO1xuXHRcdHZhciBjcm9zc2luZ3MgPSBkaXZpZGVMb2NhdGlvbnMoXG5cdFx0XHRcdEN1cnZlTG9jYXRpb24uZXhwYW5kKF9wYXRoMS5nZXRDcm9zc2luZ3MoX3BhdGgyKSkpLFxuXHRcdFx0cGF0aHMxID0gX3BhdGgxLl9jaGlsZHJlbiB8fCBbX3BhdGgxXSxcblx0XHRcdHBhdGhzMiA9IF9wYXRoMiAmJiAoX3BhdGgyLl9jaGlsZHJlbiB8fCBbX3BhdGgyXSksXG5cdFx0XHRzZWdtZW50cyA9IFtdLFxuXHRcdFx0Y3VydmVzID0gW10sXG5cdFx0XHRwYXRocztcblxuXHRcdGZ1bmN0aW9uIGNvbGxlY3QocGF0aHMpIHtcblx0XHRcdGZvciAodmFyIGkgPSAwLCBsID0gcGF0aHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG5cdFx0XHRcdHZhciBwYXRoID0gcGF0aHNbaV07XG5cdFx0XHRcdEJhc2UucHVzaChzZWdtZW50cywgcGF0aC5fc2VnbWVudHMpO1xuXHRcdFx0XHRCYXNlLnB1c2goY3VydmVzLCBwYXRoLmdldEN1cnZlcygpKTtcblx0XHRcdFx0cGF0aC5fb3ZlcmxhcHNPbmx5ID0gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoY3Jvc3NpbmdzLmxlbmd0aCkge1xuXHRcdFx0Y29sbGVjdChwYXRoczEpO1xuXHRcdFx0aWYgKHBhdGhzMilcblx0XHRcdFx0Y29sbGVjdChwYXRoczIpO1xuXHRcdFx0Zm9yICh2YXIgaSA9IDAsIGwgPSBjcm9zc2luZ3MubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG5cdFx0XHRcdHByb3BhZ2F0ZVdpbmRpbmcoY3Jvc3NpbmdzW2ldLl9zZWdtZW50LCBfcGF0aDEsIF9wYXRoMiwgY3VydmVzLFxuXHRcdFx0XHRcdFx0b3BlcmF0b3IpO1xuXHRcdFx0fVxuXHRcdFx0Zm9yICh2YXIgaSA9IDAsIGwgPSBzZWdtZW50cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcblx0XHRcdFx0dmFyIHNlZ21lbnQgPSBzZWdtZW50c1tpXSxcblx0XHRcdFx0XHRpbnRlciA9IHNlZ21lbnQuX2ludGVyc2VjdGlvbjtcblx0XHRcdFx0aWYgKCFzZWdtZW50Ll93aW5kaW5nKSB7XG5cdFx0XHRcdFx0cHJvcGFnYXRlV2luZGluZyhzZWdtZW50LCBfcGF0aDEsIF9wYXRoMiwgY3VydmVzLCBvcGVyYXRvcik7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCEoaW50ZXIgJiYgaW50ZXIuX292ZXJsYXApKVxuXHRcdFx0XHRcdHNlZ21lbnQuX3BhdGguX292ZXJsYXBzT25seSA9IGZhbHNlO1xuXHRcdFx0fVxuXHRcdFx0cGF0aHMgPSB0cmFjZVBhdGhzKHNlZ21lbnRzLCBvcGVyYXRvcik7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHBhdGhzID0gcmVvcmllbnRQYXRocyhcblx0XHRcdFx0XHRwYXRoczIgPyBwYXRoczEuY29uY2F0KHBhdGhzMikgOiBwYXRoczEuc2xpY2UoKSxcblx0XHRcdFx0XHRmdW5jdGlvbih3KSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gISFvcGVyYXRvclt3XTtcblx0XHRcdFx0XHR9KTtcblx0XHR9XG5cblx0XHRyZXR1cm4gY3JlYXRlUmVzdWx0KHBhdGhzLCB0cnVlLCBwYXRoMSwgcGF0aDIsIG9wdGlvbnMpO1xuXHR9XG5cblx0ZnVuY3Rpb24gc3BsaXRCb29sZWFuKHBhdGgxLCBwYXRoMiwgb3BlcmF0aW9uKSB7XG5cdFx0dmFyIF9wYXRoMSA9IHByZXBhcmVQYXRoKHBhdGgxKSxcblx0XHRcdF9wYXRoMiA9IHByZXBhcmVQYXRoKHBhdGgyKSxcblx0XHRcdGNyb3NzaW5ncyA9IF9wYXRoMS5nZXRDcm9zc2luZ3MoX3BhdGgyKSxcblx0XHRcdHN1YnRyYWN0ID0gb3BlcmF0aW9uID09PSAnc3VidHJhY3QnLFxuXHRcdFx0ZGl2aWRlID0gb3BlcmF0aW9uID09PSAnZGl2aWRlJyxcblx0XHRcdGFkZGVkID0ge30sXG5cdFx0XHRwYXRocyA9IFtdO1xuXG5cdFx0ZnVuY3Rpb24gYWRkUGF0aChwYXRoKSB7XG5cdFx0XHRpZiAoIWFkZGVkW3BhdGguX2lkXSAmJiAoZGl2aWRlIHx8XG5cdFx0XHRcdFx0X3BhdGgyLmNvbnRhaW5zKHBhdGguZ2V0UG9pbnRBdChwYXRoLmdldExlbmd0aCgpIC8gMikpXG5cdFx0XHRcdFx0XHReIHN1YnRyYWN0KSkge1xuXHRcdFx0XHRwYXRocy51bnNoaWZ0KHBhdGgpO1xuXHRcdFx0XHRyZXR1cm4gYWRkZWRbcGF0aC5faWRdID0gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRmb3IgKHZhciBpID0gY3Jvc3NpbmdzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG5cdFx0XHR2YXIgcGF0aCA9IGNyb3NzaW5nc1tpXS5zcGxpdCgpO1xuXHRcdFx0aWYgKHBhdGgpIHtcblx0XHRcdFx0aWYgKGFkZFBhdGgocGF0aCkpXG5cdFx0XHRcdFx0cGF0aC5nZXRGaXJzdFNlZ21lbnQoKS5zZXRIYW5kbGVJbigwLCAwKTtcblx0XHRcdFx0X3BhdGgxLmdldExhc3RTZWdtZW50KCkuc2V0SGFuZGxlT3V0KDAsIDApO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRhZGRQYXRoKF9wYXRoMSk7XG5cdFx0cmV0dXJuIGNyZWF0ZVJlc3VsdChwYXRocywgZmFsc2UsIHBhdGgxLCBwYXRoMik7XG5cdH1cblxuXHRmdW5jdGlvbiBsaW5rSW50ZXJzZWN0aW9ucyhmcm9tLCB0bykge1xuXHRcdHZhciBwcmV2ID0gZnJvbTtcblx0XHR3aGlsZSAocHJldikge1xuXHRcdFx0aWYgKHByZXYgPT09IHRvKVxuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHRwcmV2ID0gcHJldi5fcHJldmlvdXM7XG5cdFx0fVxuXHRcdHdoaWxlIChmcm9tLl9uZXh0ICYmIGZyb20uX25leHQgIT09IHRvKVxuXHRcdFx0ZnJvbSA9IGZyb20uX25leHQ7XG5cdFx0aWYgKCFmcm9tLl9uZXh0KSB7XG5cdFx0XHR3aGlsZSAodG8uX3ByZXZpb3VzKVxuXHRcdFx0XHR0byA9IHRvLl9wcmV2aW91cztcblx0XHRcdGZyb20uX25leHQgPSB0bztcblx0XHRcdHRvLl9wcmV2aW91cyA9IGZyb207XG5cdFx0fVxuXHR9XG5cblx0ZnVuY3Rpb24gY2xlYXJDdXJ2ZUhhbmRsZXMoY3VydmVzKSB7XG5cdFx0Zm9yICh2YXIgaSA9IGN1cnZlcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSlcblx0XHRcdGN1cnZlc1tpXS5jbGVhckhhbmRsZXMoKTtcblx0fVxuXG5cdGZ1bmN0aW9uIHJlb3JpZW50UGF0aHMocGF0aHMsIGlzSW5zaWRlLCBjbG9ja3dpc2UpIHtcblx0XHR2YXIgbGVuZ3RoID0gcGF0aHMgJiYgcGF0aHMubGVuZ3RoO1xuXHRcdGlmIChsZW5ndGgpIHtcblx0XHRcdHZhciBsb29rdXAgPSBCYXNlLmVhY2gocGF0aHMsIGZ1bmN0aW9uIChwYXRoLCBpKSB7XG5cdFx0XHRcdFx0dGhpc1twYXRoLl9pZF0gPSB7XG5cdFx0XHRcdFx0XHRjb250YWluZXI6IG51bGwsXG5cdFx0XHRcdFx0XHR3aW5kaW5nOiBwYXRoLmlzQ2xvY2t3aXNlKCkgPyAxIDogLTEsXG5cdFx0XHRcdFx0XHRpbmRleDogaVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH0sIHt9KSxcblx0XHRcdFx0c29ydGVkID0gcGF0aHMuc2xpY2UoKS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGFicyhiLmdldEFyZWEoKSkgLSBhYnMoYS5nZXRBcmVhKCkpO1xuXHRcdFx0XHR9KSxcblx0XHRcdFx0Zmlyc3QgPSBzb3J0ZWRbMF07XG5cdFx0XHRpZiAoY2xvY2t3aXNlID09IG51bGwpXG5cdFx0XHRcdGNsb2Nrd2lzZSA9IGZpcnN0LmlzQ2xvY2t3aXNlKCk7XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdHZhciBwYXRoMSA9IHNvcnRlZFtpXSxcblx0XHRcdFx0XHRlbnRyeTEgPSBsb29rdXBbcGF0aDEuX2lkXSxcblx0XHRcdFx0XHRwb2ludCA9IHBhdGgxLmdldEludGVyaW9yUG9pbnQoKSxcblx0XHRcdFx0XHRjb250YWluZXJXaW5kaW5nID0gMDtcblx0XHRcdFx0Zm9yICh2YXIgaiA9IGkgLSAxOyBqID49IDA7IGotLSkge1xuXHRcdFx0XHRcdHZhciBwYXRoMiA9IHNvcnRlZFtqXTtcblx0XHRcdFx0XHRpZiAocGF0aDIuY29udGFpbnMocG9pbnQpKSB7XG5cdFx0XHRcdFx0XHR2YXIgZW50cnkyID0gbG9va3VwW3BhdGgyLl9pZF07XG5cdFx0XHRcdFx0XHRjb250YWluZXJXaW5kaW5nID0gZW50cnkyLndpbmRpbmc7XG5cdFx0XHRcdFx0XHRlbnRyeTEud2luZGluZyArPSBjb250YWluZXJXaW5kaW5nO1xuXHRcdFx0XHRcdFx0ZW50cnkxLmNvbnRhaW5lciA9IGVudHJ5Mi5leGNsdWRlID8gZW50cnkyLmNvbnRhaW5lclxuXHRcdFx0XHRcdFx0XHRcdDogcGF0aDI7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKGlzSW5zaWRlKGVudHJ5MS53aW5kaW5nKSA9PT0gaXNJbnNpZGUoY29udGFpbmVyV2luZGluZykpIHtcblx0XHRcdFx0XHRlbnRyeTEuZXhjbHVkZSA9IHRydWU7XG5cdFx0XHRcdFx0cGF0aHNbZW50cnkxLmluZGV4XSA9IG51bGw7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dmFyIGNvbnRhaW5lciA9IGVudHJ5MS5jb250YWluZXI7XG5cdFx0XHRcdFx0cGF0aDEuc2V0Q2xvY2t3aXNlKGNvbnRhaW5lciA/ICFjb250YWluZXIuaXNDbG9ja3dpc2UoKVxuXHRcdFx0XHRcdFx0XHQ6IGNsb2Nrd2lzZSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIHBhdGhzO1xuXHR9XG5cblx0ZnVuY3Rpb24gZGl2aWRlTG9jYXRpb25zKGxvY2F0aW9ucywgaW5jbHVkZSwgY2xlYXJMYXRlcikge1xuXHRcdHZhciByZXN1bHRzID0gaW5jbHVkZSAmJiBbXSxcblx0XHRcdHRNaW4gPSAxZS04LFxuXHRcdFx0dE1heCA9IDEgLSB0TWluLFxuXHRcdFx0Y2xlYXJIYW5kbGVzID0gZmFsc2UsXG5cdFx0XHRjbGVhckN1cnZlcyA9IGNsZWFyTGF0ZXIgfHwgW10sXG5cdFx0XHRjbGVhckxvb2t1cCA9IGNsZWFyTGF0ZXIgJiYge30sXG5cdFx0XHRyZW5vcm1hbGl6ZUxvY3MsXG5cdFx0XHRwcmV2Q3VydmUsXG5cdFx0XHRwcmV2VGltZTtcblxuXHRcdGZ1bmN0aW9uIGdldElkKGN1cnZlKSB7XG5cdFx0XHRyZXR1cm4gY3VydmUuX3BhdGguX2lkICsgJy4nICsgY3VydmUuX3NlZ21lbnQxLl9pbmRleDtcblx0XHR9XG5cblx0XHRmb3IgKHZhciBpID0gKGNsZWFyTGF0ZXIgJiYgY2xlYXJMYXRlci5sZW5ndGgpIC0gMTsgaSA+PSAwOyBpLS0pIHtcblx0XHRcdHZhciBjdXJ2ZSA9IGNsZWFyTGF0ZXJbaV07XG5cdFx0XHRpZiAoY3VydmUuX3BhdGgpXG5cdFx0XHRcdGNsZWFyTG9va3VwW2dldElkKGN1cnZlKV0gPSB0cnVlO1xuXHRcdH1cblxuXHRcdGZvciAodmFyIGkgPSBsb2NhdGlvbnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcblx0XHRcdHZhciBsb2MgPSBsb2NhdGlvbnNbaV0sXG5cdFx0XHRcdHRpbWUgPSBsb2MuX3RpbWUsXG5cdFx0XHRcdG9yaWdUaW1lID0gdGltZSxcblx0XHRcdFx0ZXhjbHVkZSA9IGluY2x1ZGUgJiYgIWluY2x1ZGUobG9jKSxcblx0XHRcdFx0Y3VydmUgPSBsb2MuX2N1cnZlLFxuXHRcdFx0XHRzZWdtZW50O1xuXHRcdFx0aWYgKGN1cnZlKSB7XG5cdFx0XHRcdGlmIChjdXJ2ZSAhPT0gcHJldkN1cnZlKSB7XG5cdFx0XHRcdFx0Y2xlYXJIYW5kbGVzID0gIWN1cnZlLmhhc0hhbmRsZXMoKVxuXHRcdFx0XHRcdFx0XHR8fCBjbGVhckxvb2t1cCAmJiBjbGVhckxvb2t1cFtnZXRJZChjdXJ2ZSldO1xuXHRcdFx0XHRcdHJlbm9ybWFsaXplTG9jcyA9IFtdO1xuXHRcdFx0XHRcdHByZXZUaW1lID0gbnVsbDtcblx0XHRcdFx0XHRwcmV2Q3VydmUgPSBjdXJ2ZTtcblx0XHRcdFx0fSBlbHNlIGlmIChwcmV2VGltZSA+PSB0TWluKSB7XG5cdFx0XHRcdFx0dGltZSAvPSBwcmV2VGltZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0aWYgKGV4Y2x1ZGUpIHtcblx0XHRcdFx0aWYgKHJlbm9ybWFsaXplTG9jcylcblx0XHRcdFx0XHRyZW5vcm1hbGl6ZUxvY3MucHVzaChsb2MpO1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH0gZWxzZSBpZiAoaW5jbHVkZSkge1xuXHRcdFx0XHRyZXN1bHRzLnVuc2hpZnQobG9jKTtcblx0XHRcdH1cblx0XHRcdHByZXZUaW1lID0gb3JpZ1RpbWU7XG5cdFx0XHRpZiAodGltZSA8IHRNaW4pIHtcblx0XHRcdFx0c2VnbWVudCA9IGN1cnZlLl9zZWdtZW50MTtcblx0XHRcdH0gZWxzZSBpZiAodGltZSA+IHRNYXgpIHtcblx0XHRcdFx0c2VnbWVudCA9IGN1cnZlLl9zZWdtZW50Mjtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHZhciBuZXdDdXJ2ZSA9IGN1cnZlLmRpdmlkZUF0VGltZSh0aW1lLCB0cnVlKTtcblx0XHRcdFx0aWYgKGNsZWFySGFuZGxlcylcblx0XHRcdFx0XHRjbGVhckN1cnZlcy5wdXNoKGN1cnZlLCBuZXdDdXJ2ZSk7XG5cdFx0XHRcdHNlZ21lbnQgPSBuZXdDdXJ2ZS5fc2VnbWVudDE7XG5cdFx0XHRcdGZvciAodmFyIGogPSByZW5vcm1hbGl6ZUxvY3MubGVuZ3RoIC0gMTsgaiA+PSAwOyBqLS0pIHtcblx0XHRcdFx0XHR2YXIgbCA9IHJlbm9ybWFsaXplTG9jc1tqXTtcblx0XHRcdFx0XHRsLl90aW1lID0gKGwuX3RpbWUgLSB0aW1lKSAvICgxIC0gdGltZSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGxvYy5fc2V0U2VnbWVudChzZWdtZW50KTtcblx0XHRcdHZhciBpbnRlciA9IHNlZ21lbnQuX2ludGVyc2VjdGlvbixcblx0XHRcdFx0ZGVzdCA9IGxvYy5faW50ZXJzZWN0aW9uO1xuXHRcdFx0aWYgKGludGVyKSB7XG5cdFx0XHRcdGxpbmtJbnRlcnNlY3Rpb25zKGludGVyLCBkZXN0KTtcblx0XHRcdFx0dmFyIG90aGVyID0gaW50ZXI7XG5cdFx0XHRcdHdoaWxlIChvdGhlcikge1xuXHRcdFx0XHRcdGxpbmtJbnRlcnNlY3Rpb25zKG90aGVyLl9pbnRlcnNlY3Rpb24sIGludGVyKTtcblx0XHRcdFx0XHRvdGhlciA9IG90aGVyLl9uZXh0O1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRzZWdtZW50Ll9pbnRlcnNlY3Rpb24gPSBkZXN0O1xuXHRcdFx0fVxuXHRcdH1cblx0XHRpZiAoIWNsZWFyTGF0ZXIpXG5cdFx0XHRjbGVhckN1cnZlSGFuZGxlcyhjbGVhckN1cnZlcyk7XG5cdFx0cmV0dXJuIHJlc3VsdHMgfHwgbG9jYXRpb25zO1xuXHR9XG5cblx0ZnVuY3Rpb24gZ2V0V2luZGluZyhwb2ludCwgY3VydmVzLCBkaXIsIGNsb3NlZCwgZG9udEZsaXApIHtcblx0XHR2YXIgaWEgPSBkaXIgPyAxIDogMCxcblx0XHRcdGlvID0gaWEgXiAxLFxuXHRcdFx0cHYgPSBbcG9pbnQueCwgcG9pbnQueV0sXG5cdFx0XHRwYSA9IHB2W2lhXSxcblx0XHRcdHBvID0gcHZbaW9dLFxuXHRcdFx0d2luZGluZ0Vwc2lsb24gPSAxZS05LFxuXHRcdFx0cXVhbGl0eUVwc2lsb24gPSAxZS02LFxuXHRcdFx0cGFMID0gcGEgLSB3aW5kaW5nRXBzaWxvbixcblx0XHRcdHBhUiA9IHBhICsgd2luZGluZ0Vwc2lsb24sXG5cdFx0XHR3aW5kaW5nTCA9IDAsXG5cdFx0XHR3aW5kaW5nUiA9IDAsXG5cdFx0XHRwYXRoV2luZGluZ0wgPSAwLFxuXHRcdFx0cGF0aFdpbmRpbmdSID0gMCxcblx0XHRcdG9uUGF0aCA9IGZhbHNlLFxuXHRcdFx0b25BbnlQYXRoID0gZmFsc2UsXG5cdFx0XHRxdWFsaXR5ID0gMSxcblx0XHRcdHJvb3RzID0gW10sXG5cdFx0XHR2UHJldixcblx0XHRcdHZDbG9zZTtcblxuXHRcdGZ1bmN0aW9uIGFkZFdpbmRpbmcodikge1xuXHRcdFx0dmFyIG8wID0gdltpbyArIDBdLFxuXHRcdFx0XHRvMyA9IHZbaW8gKyA2XTtcblx0XHRcdGlmIChwbyA8IG1pbihvMCwgbzMpIHx8IHBvID4gbWF4KG8wLCBvMykpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdFx0dmFyIGEwID0gdltpYSArIDBdLFxuXHRcdFx0XHRhMSA9IHZbaWEgKyAyXSxcblx0XHRcdFx0YTIgPSB2W2lhICsgNF0sXG5cdFx0XHRcdGEzID0gdltpYSArIDZdO1xuXHRcdFx0aWYgKG8wID09PSBvMykge1xuXHRcdFx0XHRpZiAoYTAgPCBwYVIgJiYgYTMgPiBwYUwgfHwgYTMgPCBwYVIgJiYgYTAgPiBwYUwpIHtcblx0XHRcdFx0XHRvblBhdGggPSB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHRcdHZhciB0ID0gICBwbyA9PT0gbzAgPyAwXG5cdFx0XHRcdFx0OiBwbyA9PT0gbzMgPyAxXG5cdFx0XHRcdFx0OiBwYUwgPiBtYXgoYTAsIGExLCBhMiwgYTMpIHx8IHBhUiA8IG1pbihhMCwgYTEsIGEyLCBhMylcblx0XHRcdFx0XHQ/IDFcblx0XHRcdFx0XHQ6IEN1cnZlLnNvbHZlQ3ViaWModiwgaW8sIHBvLCByb290cywgMCwgMSkgPiAwXG5cdFx0XHRcdFx0XHQ/IHJvb3RzWzBdXG5cdFx0XHRcdFx0XHQ6IDEsXG5cdFx0XHRcdGEgPSAgIHQgPT09IDAgPyBhMFxuXHRcdFx0XHRcdDogdCA9PT0gMSA/IGEzXG5cdFx0XHRcdFx0OiBDdXJ2ZS5nZXRQb2ludCh2LCB0KVtkaXIgPyAneScgOiAneCddLFxuXHRcdFx0XHR3aW5kaW5nID0gbzAgPiBvMyA/IDEgOiAtMSxcblx0XHRcdFx0d2luZGluZ1ByZXYgPSB2UHJldltpb10gPiB2UHJldltpbyArIDZdID8gMSA6IC0xLFxuXHRcdFx0XHRhM1ByZXYgPSB2UHJldltpYSArIDZdO1xuXHRcdFx0aWYgKHBvICE9PSBvMCkge1xuXHRcdFx0XHRpZiAoYSA8IHBhTCkge1xuXHRcdFx0XHRcdHBhdGhXaW5kaW5nTCArPSB3aW5kaW5nO1xuXHRcdFx0XHR9IGVsc2UgaWYgKGEgPiBwYVIpIHtcblx0XHRcdFx0XHRwYXRoV2luZGluZ1IgKz0gd2luZGluZztcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRvblBhdGggPSB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChhID4gcGEgLSBxdWFsaXR5RXBzaWxvbiAmJiBhIDwgcGEgKyBxdWFsaXR5RXBzaWxvbilcblx0XHRcdFx0XHRxdWFsaXR5IC89IDI7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRpZiAod2luZGluZyAhPT0gd2luZGluZ1ByZXYpIHtcblx0XHRcdFx0XHRpZiAoYTAgPCBwYUwpIHtcblx0XHRcdFx0XHRcdHBhdGhXaW5kaW5nTCArPSB3aW5kaW5nO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAoYTAgPiBwYVIpIHtcblx0XHRcdFx0XHRcdHBhdGhXaW5kaW5nUiArPSB3aW5kaW5nO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSBlbHNlIGlmIChhMCAhPSBhM1ByZXYpIHtcblx0XHRcdFx0XHRpZiAoYTNQcmV2IDwgcGFSICYmIGEgPiBwYVIpIHtcblx0XHRcdFx0XHRcdHBhdGhXaW5kaW5nUiArPSB3aW5kaW5nO1xuXHRcdFx0XHRcdFx0b25QYXRoID0gdHJ1ZTtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKGEzUHJldiA+IHBhTCAmJiBhIDwgcGFMKSB7XG5cdFx0XHRcdFx0XHRwYXRoV2luZGluZ0wgKz0gd2luZGluZztcblx0XHRcdFx0XHRcdG9uUGF0aCA9IHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHF1YWxpdHkgPSAwO1xuXHRcdFx0fVxuXHRcdFx0dlByZXYgPSB2O1xuXHRcdFx0cmV0dXJuICFkb250RmxpcCAmJiBhID4gcGFMICYmIGEgPCBwYVJcblx0XHRcdFx0XHQmJiBDdXJ2ZS5nZXRUYW5nZW50KHYsIHQpW2RpciA/ICd4JyA6ICd5J10gPT09IDBcblx0XHRcdFx0XHQmJiBnZXRXaW5kaW5nKHBvaW50LCBjdXJ2ZXMsICFkaXIsIGNsb3NlZCwgdHJ1ZSk7XG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gaGFuZGxlQ3VydmUodikge1xuXHRcdFx0dmFyIG8wID0gdltpbyArIDBdLFxuXHRcdFx0XHRvMSA9IHZbaW8gKyAyXSxcblx0XHRcdFx0bzIgPSB2W2lvICsgNF0sXG5cdFx0XHRcdG8zID0gdltpbyArIDZdO1xuXHRcdFx0aWYgKHBvIDw9IG1heChvMCwgbzEsIG8yLCBvMykgJiYgcG8gPj0gbWluKG8wLCBvMSwgbzIsIG8zKSkge1xuXHRcdFx0XHR2YXIgYTAgPSB2W2lhICsgMF0sXG5cdFx0XHRcdFx0YTEgPSB2W2lhICsgMl0sXG5cdFx0XHRcdFx0YTIgPSB2W2lhICsgNF0sXG5cdFx0XHRcdFx0YTMgPSB2W2lhICsgNl0sXG5cdFx0XHRcdFx0bW9ub0N1cnZlcyA9IHBhTCA+IG1heChhMCwgYTEsIGEyLCBhMykgfHxcblx0XHRcdFx0XHRcdFx0XHQgcGFSIDwgbWluKGEwLCBhMSwgYTIsIGEzKVxuXHRcdFx0XHRcdFx0XHQ/IFt2XSA6IEN1cnZlLmdldE1vbm9DdXJ2ZXModiwgZGlyKSxcblx0XHRcdFx0XHRyZXM7XG5cdFx0XHRcdGZvciAodmFyIGkgPSAwLCBsID0gbW9ub0N1cnZlcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcblx0XHRcdFx0XHRpZiAocmVzID0gYWRkV2luZGluZyhtb25vQ3VydmVzW2ldKSlcblx0XHRcdFx0XHRcdHJldHVybiByZXM7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRmb3IgKHZhciBpID0gMCwgbCA9IGN1cnZlcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcblx0XHRcdHZhciBjdXJ2ZSA9IGN1cnZlc1tpXSxcblx0XHRcdFx0cGF0aCA9IGN1cnZlLl9wYXRoLFxuXHRcdFx0XHR2ID0gY3VydmUuZ2V0VmFsdWVzKCksXG5cdFx0XHRcdHJlcztcblx0XHRcdGlmICghaSB8fCBjdXJ2ZXNbaSAtIDFdLl9wYXRoICE9PSBwYXRoKSB7XG5cdFx0XHRcdHZQcmV2ID0gbnVsbDtcblx0XHRcdFx0aWYgKCFwYXRoLl9jbG9zZWQpIHtcblx0XHRcdFx0XHR2Q2xvc2UgPSBDdXJ2ZS5nZXRWYWx1ZXMoXG5cdFx0XHRcdFx0XHRcdHBhdGguZ2V0TGFzdEN1cnZlKCkuZ2V0U2VnbWVudDIoKSxcblx0XHRcdFx0XHRcdFx0Y3VydmUuZ2V0U2VnbWVudDEoKSxcblx0XHRcdFx0XHRcdFx0bnVsbCwgIWNsb3NlZCk7XG5cdFx0XHRcdFx0aWYgKHZDbG9zZVtpb10gIT09IHZDbG9zZVtpbyArIDZdKSB7XG5cdFx0XHRcdFx0XHR2UHJldiA9IHZDbG9zZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIXZQcmV2KSB7XG5cdFx0XHRcdFx0dlByZXYgPSB2O1xuXHRcdFx0XHRcdHZhciBwcmV2ID0gcGF0aC5nZXRMYXN0Q3VydmUoKTtcblx0XHRcdFx0XHR3aGlsZSAocHJldiAmJiBwcmV2ICE9PSBjdXJ2ZSkge1xuXHRcdFx0XHRcdFx0dmFyIHYyID0gcHJldi5nZXRWYWx1ZXMoKTtcblx0XHRcdFx0XHRcdGlmICh2Mltpb10gIT09IHYyW2lvICsgNl0pIHtcblx0XHRcdFx0XHRcdFx0dlByZXYgPSB2Mjtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRwcmV2ID0gcHJldi5nZXRQcmV2aW91cygpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAocmVzID0gaGFuZGxlQ3VydmUodikpXG5cdFx0XHRcdHJldHVybiByZXM7XG5cblx0XHRcdGlmIChpICsgMSA9PT0gbCB8fCBjdXJ2ZXNbaSArIDFdLl9wYXRoICE9PSBwYXRoKSB7XG5cdFx0XHRcdGlmICh2Q2xvc2UgJiYgKHJlcyA9IGhhbmRsZUN1cnZlKHZDbG9zZSkpKVxuXHRcdFx0XHRcdHJldHVybiByZXM7XG5cdFx0XHRcdGlmIChvblBhdGggJiYgIXBhdGhXaW5kaW5nTCAmJiAhcGF0aFdpbmRpbmdSKSB7XG5cdFx0XHRcdFx0cGF0aFdpbmRpbmdMID0gcGF0aFdpbmRpbmdSID0gcGF0aC5pc0Nsb2Nrd2lzZShjbG9zZWQpIF4gZGlyXG5cdFx0XHRcdFx0XHRcdD8gMSA6IC0xO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHdpbmRpbmdMICs9IHBhdGhXaW5kaW5nTDtcblx0XHRcdFx0d2luZGluZ1IgKz0gcGF0aFdpbmRpbmdSO1xuXHRcdFx0XHRwYXRoV2luZGluZ0wgPSBwYXRoV2luZGluZ1IgPSAwO1xuXHRcdFx0XHRpZiAob25QYXRoKSB7XG5cdFx0XHRcdFx0b25BbnlQYXRoID0gdHJ1ZTtcblx0XHRcdFx0XHRvblBhdGggPSBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0XHR2Q2xvc2UgPSBudWxsO1xuXHRcdFx0fVxuXHRcdH1cblx0XHR3aW5kaW5nTCA9IGFicyh3aW5kaW5nTCk7XG5cdFx0d2luZGluZ1IgPSBhYnMod2luZGluZ1IpO1xuXHRcdHJldHVybiB7XG5cdFx0XHR3aW5kaW5nOiBtYXgod2luZGluZ0wsIHdpbmRpbmdSKSxcblx0XHRcdHdpbmRpbmdMOiB3aW5kaW5nTCxcblx0XHRcdHdpbmRpbmdSOiB3aW5kaW5nUixcblx0XHRcdHF1YWxpdHk6IHF1YWxpdHksXG5cdFx0XHRvblBhdGg6IG9uQW55UGF0aFxuXHRcdH07XG5cdH1cblxuXHRmdW5jdGlvbiBwcm9wYWdhdGVXaW5kaW5nKHNlZ21lbnQsIHBhdGgxLCBwYXRoMiwgY3VydmVzLCBvcGVyYXRvcikge1xuXHRcdHZhciBjaGFpbiA9IFtdLFxuXHRcdFx0c3RhcnQgPSBzZWdtZW50LFxuXHRcdFx0dG90YWxMZW5ndGggPSAwLFxuXHRcdFx0d2luZGluZztcblx0XHRkbyB7XG5cdFx0XHR2YXIgY3VydmUgPSBzZWdtZW50LmdldEN1cnZlKCksXG5cdFx0XHRcdGxlbmd0aCA9IGN1cnZlLmdldExlbmd0aCgpO1xuXHRcdFx0Y2hhaW4ucHVzaCh7IHNlZ21lbnQ6IHNlZ21lbnQsIGN1cnZlOiBjdXJ2ZSwgbGVuZ3RoOiBsZW5ndGggfSk7XG5cdFx0XHR0b3RhbExlbmd0aCArPSBsZW5ndGg7XG5cdFx0XHRzZWdtZW50ID0gc2VnbWVudC5nZXROZXh0KCk7XG5cdFx0fSB3aGlsZSAoc2VnbWVudCAmJiAhc2VnbWVudC5faW50ZXJzZWN0aW9uICYmIHNlZ21lbnQgIT09IHN0YXJ0KTtcblx0XHR2YXIgb2Zmc2V0cyA9IFswLjUsIDAuMjUsIDAuNzVdLFxuXHRcdFx0d2luZGluZyA9IHsgd2luZGluZzogMCwgcXVhbGl0eTogLTEgfSxcblx0XHRcdHRNaW4gPSAxZS04LFxuXHRcdFx0dE1heCA9IDEgLSB0TWluO1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgb2Zmc2V0cy5sZW5ndGggJiYgd2luZGluZy5xdWFsaXR5IDwgMC41OyBpKyspIHtcblx0XHRcdHZhciBsZW5ndGggPSB0b3RhbExlbmd0aCAqIG9mZnNldHNbaV07XG5cdFx0XHRmb3IgKHZhciBqID0gMCwgbCA9IGNoYWluLmxlbmd0aDsgaiA8IGw7IGorKykge1xuXHRcdFx0XHR2YXIgZW50cnkgPSBjaGFpbltqXSxcblx0XHRcdFx0XHRjdXJ2ZUxlbmd0aCA9IGVudHJ5Lmxlbmd0aDtcblx0XHRcdFx0aWYgKGxlbmd0aCA8PSBjdXJ2ZUxlbmd0aCkge1xuXHRcdFx0XHRcdHZhciBjdXJ2ZSA9IGVudHJ5LmN1cnZlLFxuXHRcdFx0XHRcdFx0cGF0aCA9IGN1cnZlLl9wYXRoLFxuXHRcdFx0XHRcdFx0cGFyZW50ID0gcGF0aC5fcGFyZW50LFxuXHRcdFx0XHRcdFx0b3BlcmFuZCA9IHBhcmVudCBpbnN0YW5jZW9mIENvbXBvdW5kUGF0aCA/IHBhcmVudCA6IHBhdGgsXG5cdFx0XHRcdFx0XHR0ID0gTnVtZXJpY2FsLmNsYW1wKGN1cnZlLmdldFRpbWVBdChsZW5ndGgpLCB0TWluLCB0TWF4KSxcblx0XHRcdFx0XHRcdHB0ID0gY3VydmUuZ2V0UG9pbnRBdFRpbWUodCksXG5cdFx0XHRcdFx0XHRkaXIgPSBhYnMoY3VydmUuZ2V0VGFuZ2VudEF0VGltZSh0KS55KSA8IE1hdGguU1FSVDFfMjtcblx0XHRcdFx0XHR2YXIgd2luZCA9IG51bGw7XG5cdFx0XHRcdFx0aWYgKG9wZXJhdG9yLnN1YnRyYWN0ICYmIHBhdGgyKSB7XG5cdFx0XHRcdFx0XHR2YXIgcGF0aFdpbmRpbmcgPSBvcGVyYW5kID09PSBwYXRoMVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQgID8gcGF0aDIuX2dldFdpbmRpbmcocHQsIGRpciwgdHJ1ZSlcblx0XHRcdFx0XHRcdFx0XHRcdFx0ICA6IHBhdGgxLl9nZXRXaW5kaW5nKHB0LCBkaXIsIHRydWUpO1xuXHRcdFx0XHRcdFx0aWYgKG9wZXJhbmQgPT09IHBhdGgxICYmIHBhdGhXaW5kaW5nLndpbmRpbmcgfHxcblx0XHRcdFx0XHRcdFx0b3BlcmFuZCA9PT0gcGF0aDIgJiYgIXBhdGhXaW5kaW5nLndpbmRpbmcpIHtcblx0XHRcdFx0XHRcdFx0aWYgKHBhdGhXaW5kaW5nLnF1YWxpdHkgPCAxKSB7XG5cdFx0XHRcdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0d2luZCA9IHsgd2luZGluZzogMCwgcXVhbGl0eTogMSB9O1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHdpbmQgPSB3aW5kIHx8IGdldFdpbmRpbmcocHQsIGN1cnZlcywgZGlyLCB0cnVlKTtcblx0XHRcdFx0XHRpZiAod2luZC5xdWFsaXR5ID4gd2luZGluZy5xdWFsaXR5KVxuXHRcdFx0XHRcdFx0d2luZGluZyA9IHdpbmQ7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdFx0bGVuZ3RoIC09IGN1cnZlTGVuZ3RoO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRmb3IgKHZhciBqID0gY2hhaW4ubGVuZ3RoIC0gMTsgaiA+PSAwOyBqLS0pIHtcblx0XHRcdGNoYWluW2pdLnNlZ21lbnQuX3dpbmRpbmcgPSB3aW5kaW5nO1xuXHRcdH1cblx0fVxuXG5cdGZ1bmN0aW9uIHRyYWNlUGF0aHMoc2VnbWVudHMsIG9wZXJhdG9yKSB7XG5cdFx0dmFyIHBhdGhzID0gW10sXG5cdFx0XHRzdGFydHM7XG5cblx0XHRmdW5jdGlvbiBpc1ZhbGlkKHNlZykge1xuXHRcdFx0dmFyIHdpbmRpbmc7XG5cdFx0XHRyZXR1cm4gISEoc2VnICYmICFzZWcuX3Zpc2l0ZWQgJiYgKCFvcGVyYXRvclxuXHRcdFx0XHRcdHx8IG9wZXJhdG9yWyh3aW5kaW5nID0gc2VnLl93aW5kaW5nIHx8IHt9KS53aW5kaW5nXVxuXHRcdFx0XHRcdFx0JiYgIShvcGVyYXRvci51bml0ZSAmJiB3aW5kaW5nLndpbmRpbmcgPT09IDJcblx0XHRcdFx0XHRcdFx0JiYgd2luZGluZy53aW5kaW5nTCAmJiB3aW5kaW5nLndpbmRpbmdSKSkpO1xuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIGlzU3RhcnQoc2VnKSB7XG5cdFx0XHRpZiAoc2VnKSB7XG5cdFx0XHRcdGZvciAodmFyIGkgPSAwLCBsID0gc3RhcnRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuXHRcdFx0XHRcdGlmIChzZWcgPT09IHN0YXJ0c1tpXSlcblx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gdmlzaXRQYXRoKHBhdGgpIHtcblx0XHRcdHZhciBzZWdtZW50cyA9IHBhdGguX3NlZ21lbnRzO1xuXHRcdFx0Zm9yICh2YXIgaSA9IDAsIGwgPSBzZWdtZW50cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcblx0XHRcdFx0c2VnbWVudHNbaV0uX3Zpc2l0ZWQgPSB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIGdldENyb3NzaW5nU2VnbWVudHMoc2VnbWVudCwgY29sbGVjdFN0YXJ0cykge1xuXHRcdFx0dmFyIGludGVyID0gc2VnbWVudC5faW50ZXJzZWN0aW9uLFxuXHRcdFx0XHRzdGFydCA9IGludGVyLFxuXHRcdFx0XHRjcm9zc2luZ3MgPSBbXTtcblx0XHRcdGlmIChjb2xsZWN0U3RhcnRzKVxuXHRcdFx0XHRzdGFydHMgPSBbc2VnbWVudF07XG5cblx0XHRcdGZ1bmN0aW9uIGNvbGxlY3QoaW50ZXIsIGVuZCkge1xuXHRcdFx0XHR3aGlsZSAoaW50ZXIgJiYgaW50ZXIgIT09IGVuZCkge1xuXHRcdFx0XHRcdHZhciBvdGhlciA9IGludGVyLl9zZWdtZW50LFxuXHRcdFx0XHRcdFx0cGF0aCA9IG90aGVyICYmIG90aGVyLl9wYXRoO1xuXHRcdFx0XHRcdGlmIChwYXRoKSB7XG5cdFx0XHRcdFx0XHR2YXIgbmV4dCA9IG90aGVyLmdldE5leHQoKSB8fCBwYXRoLmdldEZpcnN0U2VnbWVudCgpLFxuXHRcdFx0XHRcdFx0XHRuZXh0SW50ZXIgPSBuZXh0Ll9pbnRlcnNlY3Rpb247XG5cdFx0XHRcdFx0XHRpZiAob3RoZXIgIT09IHNlZ21lbnQgJiYgKGlzU3RhcnQob3RoZXIpXG5cdFx0XHRcdFx0XHRcdHx8IGlzU3RhcnQobmV4dClcblx0XHRcdFx0XHRcdFx0fHwgbmV4dCAmJiAoaXNWYWxpZChvdGhlcikgJiYgKGlzVmFsaWQobmV4dClcblx0XHRcdFx0XHRcdFx0XHR8fCBuZXh0SW50ZXIgJiYgaXNWYWxpZChuZXh0SW50ZXIuX3NlZ21lbnQpKSkpXG5cdFx0XHRcdFx0XHQpIHtcblx0XHRcdFx0XHRcdFx0Y3Jvc3NpbmdzLnB1c2gob3RoZXIpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYgKGNvbGxlY3RTdGFydHMpXG5cdFx0XHRcdFx0XHRcdHN0YXJ0cy5wdXNoKG90aGVyKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aW50ZXIgPSBpbnRlci5fbmV4dDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoaW50ZXIpIHtcblx0XHRcdFx0Y29sbGVjdChpbnRlcik7XG5cdFx0XHRcdHdoaWxlIChpbnRlciAmJiBpbnRlci5fcHJldilcblx0XHRcdFx0XHRpbnRlciA9IGludGVyLl9wcmV2O1xuXHRcdFx0XHRjb2xsZWN0KGludGVyLCBzdGFydCk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gY3Jvc3NpbmdzO1xuXHRcdH1cblxuXHRcdHNlZ21lbnRzLnNvcnQoZnVuY3Rpb24oc2VnMSwgc2VnMikge1xuXHRcdFx0dmFyIGludGVyMSA9IHNlZzEuX2ludGVyc2VjdGlvbixcblx0XHRcdFx0aW50ZXIyID0gc2VnMi5faW50ZXJzZWN0aW9uLFxuXHRcdFx0XHRvdmVyMSA9ICEhKGludGVyMSAmJiBpbnRlcjEuX292ZXJsYXApLFxuXHRcdFx0XHRvdmVyMiA9ICEhKGludGVyMiAmJiBpbnRlcjIuX292ZXJsYXApLFxuXHRcdFx0XHRwYXRoMSA9IHNlZzEuX3BhdGgsXG5cdFx0XHRcdHBhdGgyID0gc2VnMi5fcGF0aDtcblx0XHRcdHJldHVybiBvdmVyMSBeIG92ZXIyXG5cdFx0XHRcdFx0PyBvdmVyMSA/IDEgOiAtMVxuXHRcdFx0XHRcdDogIWludGVyMSBeICFpbnRlcjJcblx0XHRcdFx0XHRcdD8gaW50ZXIxID8gMSA6IC0xXG5cdFx0XHRcdFx0XHQ6IHBhdGgxICE9PSBwYXRoMlxuXHRcdFx0XHRcdFx0XHQ/IHBhdGgxLl9pZCAtIHBhdGgyLl9pZFxuXHRcdFx0XHRcdFx0XHQ6IHNlZzEuX2luZGV4IC0gc2VnMi5faW5kZXg7XG5cdFx0fSk7XG5cblx0XHRmb3IgKHZhciBpID0gMCwgbCA9IHNlZ21lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuXHRcdFx0dmFyIHNlZyA9IHNlZ21lbnRzW2ldLFxuXHRcdFx0XHR2YWxpZCA9IGlzVmFsaWQoc2VnKSxcblx0XHRcdFx0cGF0aCA9IG51bGwsXG5cdFx0XHRcdGZpbmlzaGVkID0gZmFsc2UsXG5cdFx0XHRcdGNsb3NlZCA9IHRydWUsXG5cdFx0XHRcdGJyYW5jaGVzID0gW10sXG5cdFx0XHRcdGJyYW5jaCxcblx0XHRcdFx0dmlzaXRlZCxcblx0XHRcdFx0aGFuZGxlSW47XG5cdFx0XHRpZiAodmFsaWQgJiYgc2VnLl9wYXRoLl9vdmVybGFwc09ubHkpIHtcblx0XHRcdFx0dmFyIHBhdGgxID0gc2VnLl9wYXRoLFxuXHRcdFx0XHRcdHBhdGgyID0gc2VnLl9pbnRlcnNlY3Rpb24uX3NlZ21lbnQuX3BhdGg7XG5cdFx0XHRcdGlmIChwYXRoMS5jb21wYXJlKHBhdGgyKSkge1xuXHRcdFx0XHRcdGlmIChwYXRoMS5nZXRBcmVhKCkpXG5cdFx0XHRcdFx0XHRwYXRocy5wdXNoKHBhdGgxLmNsb25lKGZhbHNlKSk7XG5cdFx0XHRcdFx0dmlzaXRQYXRoKHBhdGgxKTtcblx0XHRcdFx0XHR2aXNpdFBhdGgocGF0aDIpO1xuXHRcdFx0XHRcdHZhbGlkID0gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHdoaWxlICh2YWxpZCkge1xuXHRcdFx0XHR2YXIgZmlyc3QgPSAhcGF0aCxcblx0XHRcdFx0XHRjcm9zc2luZ3MgPSBnZXRDcm9zc2luZ1NlZ21lbnRzKHNlZywgZmlyc3QpLFxuXHRcdFx0XHRcdG90aGVyID0gY3Jvc3NpbmdzLnNoaWZ0KCksXG5cdFx0XHRcdFx0ZmluaXNoZWQgPSAhZmlyc3QgJiYgKGlzU3RhcnQoc2VnKSB8fCBpc1N0YXJ0KG90aGVyKSksXG5cdFx0XHRcdFx0Y3Jvc3MgPSAhZmluaXNoZWQgJiYgb3RoZXI7XG5cdFx0XHRcdGlmIChmaXJzdCkge1xuXHRcdFx0XHRcdHBhdGggPSBuZXcgUGF0aChJdGVtLk5PX0lOU0VSVCk7XG5cdFx0XHRcdFx0YnJhbmNoID0gbnVsbDtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoZmluaXNoZWQpIHtcblx0XHRcdFx0XHRpZiAoc2VnLmlzRmlyc3QoKSB8fCBzZWcuaXNMYXN0KCkpXG5cdFx0XHRcdFx0XHRjbG9zZWQgPSBzZWcuX3BhdGguX2Nsb3NlZDtcblx0XHRcdFx0XHRzZWcuX3Zpc2l0ZWQgPSB0cnVlO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChjcm9zcyAmJiBicmFuY2gpIHtcblx0XHRcdFx0XHRicmFuY2hlcy5wdXNoKGJyYW5jaCk7XG5cdFx0XHRcdFx0YnJhbmNoID0gbnVsbDtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIWJyYW5jaCkge1xuXHRcdFx0XHRcdGlmIChjcm9zcylcblx0XHRcdFx0XHRcdGNyb3NzaW5ncy5wdXNoKHNlZyk7XG5cdFx0XHRcdFx0YnJhbmNoID0ge1xuXHRcdFx0XHRcdFx0c3RhcnQ6IHBhdGguX3NlZ21lbnRzLmxlbmd0aCxcblx0XHRcdFx0XHRcdGNyb3NzaW5nczogY3Jvc3NpbmdzLFxuXHRcdFx0XHRcdFx0dmlzaXRlZDogdmlzaXRlZCA9IFtdLFxuXHRcdFx0XHRcdFx0aGFuZGxlSW46IGhhbmRsZUluXG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoY3Jvc3MpXG5cdFx0XHRcdFx0c2VnID0gb3RoZXI7XG5cdFx0XHRcdGlmICghaXNWYWxpZChzZWcpKSB7XG5cdFx0XHRcdFx0cGF0aC5yZW1vdmVTZWdtZW50cyhicmFuY2guc3RhcnQpO1xuXHRcdFx0XHRcdGZvciAodmFyIGogPSAwLCBrID0gdmlzaXRlZC5sZW5ndGg7IGogPCBrOyBqKyspIHtcblx0XHRcdFx0XHRcdHZpc2l0ZWRbal0uX3Zpc2l0ZWQgPSBmYWxzZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0dmlzaXRlZC5sZW5ndGggPSAwO1xuXHRcdFx0XHRcdGRvIHtcblx0XHRcdFx0XHRcdHNlZyA9IGJyYW5jaCAmJiBicmFuY2guY3Jvc3NpbmdzLnNoaWZ0KCk7XG5cdFx0XHRcdFx0XHRpZiAoIXNlZyB8fCAhc2VnLl9wYXRoKSB7XG5cdFx0XHRcdFx0XHRcdHNlZyA9IG51bGw7XG5cdFx0XHRcdFx0XHRcdGJyYW5jaCA9IGJyYW5jaGVzLnBvcCgpO1xuXHRcdFx0XHRcdFx0XHRpZiAoYnJhbmNoKSB7XG5cdFx0XHRcdFx0XHRcdFx0dmlzaXRlZCA9IGJyYW5jaC52aXNpdGVkO1xuXHRcdFx0XHRcdFx0XHRcdGhhbmRsZUluID0gYnJhbmNoLmhhbmRsZUluO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSB3aGlsZSAoYnJhbmNoICYmICFpc1ZhbGlkKHNlZykpO1xuXHRcdFx0XHRcdGlmICghc2VnKVxuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdFx0dmFyIG5leHQgPSBzZWcuZ2V0TmV4dCgpO1xuXHRcdFx0XHRwYXRoLmFkZChuZXcgU2VnbWVudChzZWcuX3BvaW50LCBoYW5kbGVJbixcblx0XHRcdFx0XHRcdG5leHQgJiYgc2VnLl9oYW5kbGVPdXQpKTtcblx0XHRcdFx0c2VnLl92aXNpdGVkID0gdHJ1ZTtcblx0XHRcdFx0dmlzaXRlZC5wdXNoKHNlZyk7XG5cdFx0XHRcdHNlZyA9IG5leHQgfHwgc2VnLl9wYXRoLmdldEZpcnN0U2VnbWVudCgpO1xuXHRcdFx0XHRoYW5kbGVJbiA9IG5leHQgJiYgbmV4dC5faGFuZGxlSW47XG5cdFx0XHR9XG5cdFx0XHRpZiAoZmluaXNoZWQpIHtcblx0XHRcdFx0aWYgKGNsb3NlZCkge1xuXHRcdFx0XHRcdHBhdGguZ2V0Rmlyc3RTZWdtZW50KCkuc2V0SGFuZGxlSW4oaGFuZGxlSW4pO1xuXHRcdFx0XHRcdHBhdGguc2V0Q2xvc2VkKGNsb3NlZCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKHBhdGguZ2V0QXJlYSgpICE9PSAwKSB7XG5cdFx0XHRcdFx0cGF0aHMucHVzaChwYXRoKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gcGF0aHM7XG5cdH1cblxuXHRyZXR1cm4ge1xuXHRcdF9nZXRXaW5kaW5nOiBmdW5jdGlvbihwb2ludCwgZGlyLCBjbG9zZWQpIHtcblx0XHRcdHJldHVybiBnZXRXaW5kaW5nKHBvaW50LCB0aGlzLmdldEN1cnZlcygpLCBkaXIsIGNsb3NlZCk7XG5cdFx0fSxcblxuXHRcdHVuaXRlOiBmdW5jdGlvbihwYXRoLCBvcHRpb25zKSB7XG5cdFx0XHRyZXR1cm4gdHJhY2VCb29sZWFuKHRoaXMsIHBhdGgsICd1bml0ZScsIG9wdGlvbnMpO1xuXHRcdH0sXG5cblx0XHRpbnRlcnNlY3Q6IGZ1bmN0aW9uKHBhdGgsIG9wdGlvbnMpIHtcblx0XHRcdHJldHVybiB0cmFjZUJvb2xlYW4odGhpcywgcGF0aCwgJ2ludGVyc2VjdCcsIG9wdGlvbnMpO1xuXHRcdH0sXG5cblx0XHRzdWJ0cmFjdDogZnVuY3Rpb24ocGF0aCwgb3B0aW9ucykge1xuXHRcdFx0cmV0dXJuIHRyYWNlQm9vbGVhbih0aGlzLCBwYXRoLCAnc3VidHJhY3QnLCBvcHRpb25zKTtcblx0XHR9LFxuXG5cdFx0ZXhjbHVkZTogZnVuY3Rpb24ocGF0aCwgb3B0aW9ucykge1xuXHRcdFx0cmV0dXJuIHRyYWNlQm9vbGVhbih0aGlzLCBwYXRoLCAnZXhjbHVkZScsIG9wdGlvbnMpO1xuXHRcdH0sXG5cblx0XHRkaXZpZGU6IGZ1bmN0aW9uKHBhdGgsIG9wdGlvbnMpIHtcblx0XHRcdHJldHVybiBvcHRpb25zICYmIChvcHRpb25zLnRyYWNlID09IGZhbHNlIHx8IG9wdGlvbnMuc3Ryb2tlKVxuXHRcdFx0XHRcdD8gc3BsaXRCb29sZWFuKHRoaXMsIHBhdGgsICdkaXZpZGUnKVxuXHRcdFx0XHRcdDogY3JlYXRlUmVzdWx0KFtcblx0XHRcdFx0XHRcdHRoaXMuc3VidHJhY3QocGF0aCwgb3B0aW9ucyksXG5cdFx0XHRcdFx0XHR0aGlzLmludGVyc2VjdChwYXRoLCBvcHRpb25zKVxuXHRcdFx0XHRcdF0sIHRydWUsIHRoaXMsIHBhdGgsIG9wdGlvbnMpO1xuXHRcdH0sXG5cblx0XHRyZXNvbHZlQ3Jvc3NpbmdzOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBjaGlsZHJlbiA9IHRoaXMuX2NoaWxkcmVuLFxuXHRcdFx0XHRwYXRocyA9IGNoaWxkcmVuIHx8IFt0aGlzXTtcblxuXHRcdFx0ZnVuY3Rpb24gaGFzT3ZlcmxhcChzZWcsIHBhdGgpIHtcblx0XHRcdFx0dmFyIGludGVyID0gc2VnICYmIHNlZy5faW50ZXJzZWN0aW9uO1xuXHRcdFx0XHRyZXR1cm4gaW50ZXIgJiYgaW50ZXIuX292ZXJsYXAgJiYgaW50ZXIuX3BhdGggPT09IHBhdGg7XG5cdFx0XHR9XG5cblx0XHRcdHZhciBoYXNPdmVybGFwcyA9IGZhbHNlLFxuXHRcdFx0XHRoYXNDcm9zc2luZ3MgPSBmYWxzZSxcblx0XHRcdFx0aW50ZXJzZWN0aW9ucyA9IHRoaXMuZ2V0SW50ZXJzZWN0aW9ucyhudWxsLCBmdW5jdGlvbihpbnRlcikge1xuXHRcdFx0XHRcdHJldHVybiBpbnRlci5oYXNPdmVybGFwKCkgJiYgKGhhc092ZXJsYXBzID0gdHJ1ZSkgfHxcblx0XHRcdFx0XHRcdFx0aW50ZXIuaXNDcm9zc2luZygpICYmIChoYXNDcm9zc2luZ3MgPSB0cnVlKTtcblx0XHRcdFx0fSksXG5cdFx0XHRcdGNsZWFyQ3VydmVzID0gaGFzT3ZlcmxhcHMgJiYgaGFzQ3Jvc3NpbmdzICYmIFtdO1xuXHRcdFx0aW50ZXJzZWN0aW9ucyA9IEN1cnZlTG9jYXRpb24uZXhwYW5kKGludGVyc2VjdGlvbnMpO1xuXHRcdFx0aWYgKGhhc092ZXJsYXBzKSB7XG5cdFx0XHRcdHZhciBvdmVybGFwcyA9IGRpdmlkZUxvY2F0aW9ucyhpbnRlcnNlY3Rpb25zLCBmdW5jdGlvbihpbnRlcikge1xuXHRcdFx0XHRcdHJldHVybiBpbnRlci5oYXNPdmVybGFwKCk7XG5cdFx0XHRcdH0sIGNsZWFyQ3VydmVzKTtcblx0XHRcdFx0Zm9yICh2YXIgaSA9IG92ZXJsYXBzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG5cdFx0XHRcdFx0dmFyIG92ZXJsYXAgPSBvdmVybGFwc1tpXSxcblx0XHRcdFx0XHRcdHBhdGggPSBvdmVybGFwLl9wYXRoLFxuXHRcdFx0XHRcdFx0c2VnID0gb3ZlcmxhcC5fc2VnbWVudCxcblx0XHRcdFx0XHRcdHByZXYgPSBzZWcuZ2V0UHJldmlvdXMoKSxcblx0XHRcdFx0XHRcdG5leHQgPSBzZWcuZ2V0TmV4dCgpO1xuXHRcdFx0XHRcdGlmIChoYXNPdmVybGFwKHByZXYsIHBhdGgpICYmIGhhc092ZXJsYXAobmV4dCwgcGF0aCkpIHtcblx0XHRcdFx0XHRcdHNlZy5yZW1vdmUoKTtcblx0XHRcdFx0XHRcdHByZXYuX2hhbmRsZU91dC5fc2V0KDAsIDApO1xuXHRcdFx0XHRcdFx0bmV4dC5faGFuZGxlSW4uX3NldCgwLCAwKTtcblx0XHRcdFx0XHRcdGlmIChwcmV2ICE9PSBzZWcgJiYgIXByZXYuZ2V0Q3VydmUoKS5oYXNMZW5ndGgoKSkge1xuXHRcdFx0XHRcdFx0XHRuZXh0Ll9oYW5kbGVJbi5zZXQocHJldi5faGFuZGxlSW4pO1xuXHRcdFx0XHRcdFx0XHRwcmV2LnJlbW92ZSgpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0aWYgKGhhc0Nyb3NzaW5ncykge1xuXHRcdFx0XHRkaXZpZGVMb2NhdGlvbnMoaW50ZXJzZWN0aW9ucywgaGFzT3ZlcmxhcHMgJiYgZnVuY3Rpb24oaW50ZXIpIHtcblx0XHRcdFx0XHR2YXIgY3VydmUxID0gaW50ZXIuZ2V0Q3VydmUoKSxcblx0XHRcdFx0XHRcdHNlZzEgPSBpbnRlci5nZXRTZWdtZW50KCksXG5cdFx0XHRcdFx0XHRvdGhlciA9IGludGVyLl9pbnRlcnNlY3Rpb24sXG5cdFx0XHRcdFx0XHRjdXJ2ZTIgPSBvdGhlci5fY3VydmUsXG5cdFx0XHRcdFx0XHRzZWcyID0gb3RoZXIuX3NlZ21lbnQ7XG5cdFx0XHRcdFx0aWYgKGN1cnZlMSAmJiBjdXJ2ZTIgJiYgY3VydmUxLl9wYXRoICYmIGN1cnZlMi5fcGF0aClcblx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdGlmIChzZWcxKVxuXHRcdFx0XHRcdFx0c2VnMS5faW50ZXJzZWN0aW9uID0gbnVsbDtcblx0XHRcdFx0XHRpZiAoc2VnMilcblx0XHRcdFx0XHRcdHNlZzIuX2ludGVyc2VjdGlvbiA9IG51bGw7XG5cdFx0XHRcdH0sIGNsZWFyQ3VydmVzKTtcblx0XHRcdFx0aWYgKGNsZWFyQ3VydmVzKVxuXHRcdFx0XHRcdGNsZWFyQ3VydmVIYW5kbGVzKGNsZWFyQ3VydmVzKTtcblx0XHRcdFx0cGF0aHMgPSB0cmFjZVBhdGhzKEJhc2UuZWFjaChwYXRocywgZnVuY3Rpb24ocGF0aCkge1xuXHRcdFx0XHRcdEJhc2UucHVzaCh0aGlzLCBwYXRoLl9zZWdtZW50cyk7XG5cdFx0XHRcdH0sIFtdKSk7XG5cdFx0XHR9XG5cdFx0XHR2YXIgbGVuZ3RoID0gcGF0aHMubGVuZ3RoLFxuXHRcdFx0XHRpdGVtO1xuXHRcdFx0aWYgKGxlbmd0aCA+IDEgJiYgY2hpbGRyZW4pIHtcblx0XHRcdFx0aWYgKHBhdGhzICE9PSBjaGlsZHJlbilcblx0XHRcdFx0XHR0aGlzLnNldENoaWxkcmVuKHBhdGhzKTtcblx0XHRcdFx0aXRlbSA9IHRoaXM7XG5cdFx0XHR9IGVsc2UgaWYgKGxlbmd0aCA9PT0gMSAmJiAhY2hpbGRyZW4pIHtcblx0XHRcdFx0aWYgKHBhdGhzWzBdICE9PSB0aGlzKVxuXHRcdFx0XHRcdHRoaXMuc2V0U2VnbWVudHMocGF0aHNbMF0ucmVtb3ZlU2VnbWVudHMoKSk7XG5cdFx0XHRcdGl0ZW0gPSB0aGlzO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCFpdGVtKSB7XG5cdFx0XHRcdGl0ZW0gPSBuZXcgQ29tcG91bmRQYXRoKEl0ZW0uTk9fSU5TRVJUKTtcblx0XHRcdFx0aXRlbS5hZGRDaGlsZHJlbihwYXRocyk7XG5cdFx0XHRcdGl0ZW0gPSBpdGVtLnJlZHVjZSgpO1xuXHRcdFx0XHRpdGVtLmNvcHlBdHRyaWJ1dGVzKHRoaXMpO1xuXHRcdFx0XHR0aGlzLnJlcGxhY2VXaXRoKGl0ZW0pO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGl0ZW07XG5cdFx0fSxcblxuXHRcdHJlb3JpZW50OiBmdW5jdGlvbihub25aZXJvLCBjbG9ja3dpc2UpIHtcblx0XHRcdHZhciBjaGlsZHJlbiA9IHRoaXMuX2NoaWxkcmVuO1xuXHRcdFx0aWYgKGNoaWxkcmVuICYmIGNoaWxkcmVuLmxlbmd0aCkge1xuXHRcdFx0XHR0aGlzLnNldENoaWxkcmVuKHJlb3JpZW50UGF0aHModGhpcy5yZW1vdmVDaGlsZHJlbigpLFxuXHRcdFx0XHRcdFx0ZnVuY3Rpb24odykge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gISEobm9uWmVybyA/IHcgOiB3ICYgMSk7XG5cdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0Y2xvY2t3aXNlKSk7XG5cdFx0XHR9IGVsc2UgaWYgKGNsb2Nrd2lzZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdHRoaXMuc2V0Q2xvY2t3aXNlKGNsb2Nrd2lzZSk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9LFxuXG5cdFx0Z2V0SW50ZXJpb3JQb2ludDogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgYm91bmRzID0gdGhpcy5nZXRCb3VuZHMoKSxcblx0XHRcdFx0cG9pbnQgPSBib3VuZHMuZ2V0Q2VudGVyKHRydWUpO1xuXHRcdFx0aWYgKCF0aGlzLmNvbnRhaW5zKHBvaW50KSkge1xuXHRcdFx0XHR2YXIgY3VydmVzID0gdGhpcy5nZXRDdXJ2ZXMoKSxcblx0XHRcdFx0XHR5ID0gcG9pbnQueSxcblx0XHRcdFx0XHRpbnRlcmNlcHRzID0gW10sXG5cdFx0XHRcdFx0cm9vdHMgPSBbXTtcblx0XHRcdFx0Zm9yICh2YXIgaSA9IDAsIGwgPSBjdXJ2ZXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG5cdFx0XHRcdFx0dmFyIHYgPSBjdXJ2ZXNbaV0uZ2V0VmFsdWVzKCksXG5cdFx0XHRcdFx0XHRvMCA9IHZbMV0sXG5cdFx0XHRcdFx0XHRvMSA9IHZbM10sXG5cdFx0XHRcdFx0XHRvMiA9IHZbNV0sXG5cdFx0XHRcdFx0XHRvMyA9IHZbN107XG5cdFx0XHRcdFx0aWYgKHkgPj0gbWluKG8wLCBvMSwgbzIsIG8zKSAmJiB5IDw9IG1heChvMCwgbzEsIG8yLCBvMykpIHtcblx0XHRcdFx0XHRcdHZhciBtb25vQ3VydmVzID0gQ3VydmUuZ2V0TW9ub0N1cnZlcyh2KTtcblx0XHRcdFx0XHRcdGZvciAodmFyIGogPSAwLCBtID0gbW9ub0N1cnZlcy5sZW5ndGg7IGogPCBtOyBqKyspIHtcblx0XHRcdFx0XHRcdFx0dmFyIG12ID0gbW9ub0N1cnZlc1tqXSxcblx0XHRcdFx0XHRcdFx0XHRtbzAgPSBtdlsxXSxcblx0XHRcdFx0XHRcdFx0XHRtbzMgPSBtdls3XTtcblx0XHRcdFx0XHRcdFx0aWYgKChtbzAgIT09IG1vMykgJiZcblx0XHRcdFx0XHRcdFx0XHQoeSA+PSBtbzAgJiYgeSA8PSBtbzMgfHwgeSA+PSBtbzMgJiYgeSA8PSBtbzApKXtcblx0XHRcdFx0XHRcdFx0XHR2YXIgeCA9IHkgPT09IG1vMCA/IG12WzBdXG5cdFx0XHRcdFx0XHRcdFx0XHQ6IHkgPT09IG1vMyA/IG12WzZdXG5cdFx0XHRcdFx0XHRcdFx0XHQ6IEN1cnZlLnNvbHZlQ3ViaWMobXYsIDEsIHksIHJvb3RzLCAwLCAxKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQ9PT0gMVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQ/IEN1cnZlLmdldFBvaW50KG12LCByb290c1swXSkueFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQ6IChtdlswXSArIG12WzZdKSAvIDI7XG5cdFx0XHRcdFx0XHRcdFx0aW50ZXJjZXB0cy5wdXNoKHgpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChpbnRlcmNlcHRzLmxlbmd0aCA+IDEpIHtcblx0XHRcdFx0XHRpbnRlcmNlcHRzLnNvcnQoZnVuY3Rpb24oYSwgYikgeyByZXR1cm4gYSAtIGI7IH0pO1xuXHRcdFx0XHRcdHBvaW50LnggPSAoaW50ZXJjZXB0c1swXSArIGludGVyY2VwdHNbMV0pIC8gMjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHBvaW50O1xuXHRcdH1cblx0fTtcbn0pO1xuXG52YXIgUGF0aEZsYXR0ZW5lciA9IEJhc2UuZXh0ZW5kKHtcblx0X2NsYXNzOiAnUGF0aEZsYXR0ZW5lcicsXG5cblx0aW5pdGlhbGl6ZTogZnVuY3Rpb24ocGF0aCwgZmxhdG5lc3MsIG1heFJlY3Vyc2lvbiwgaWdub3JlU3RyYWlnaHQsIG1hdHJpeCkge1xuXHRcdHZhciBjdXJ2ZXMgPSBbXSxcblx0XHRcdHBhcnRzID0gW10sXG5cdFx0XHRsZW5ndGggPSAwLFxuXHRcdFx0bWluU3BhbiA9IDEgLyAobWF4UmVjdXJzaW9uIHx8IDMyKSxcblx0XHRcdHNlZ21lbnRzID0gcGF0aC5fc2VnbWVudHMsXG5cdFx0XHRzZWdtZW50MSA9IHNlZ21lbnRzWzBdLFxuXHRcdFx0c2VnbWVudDI7XG5cblx0XHRmdW5jdGlvbiBhZGRDdXJ2ZShzZWdtZW50MSwgc2VnbWVudDIpIHtcblx0XHRcdHZhciBjdXJ2ZSA9IEN1cnZlLmdldFZhbHVlcyhzZWdtZW50MSwgc2VnbWVudDIsIG1hdHJpeCk7XG5cdFx0XHRjdXJ2ZXMucHVzaChjdXJ2ZSk7XG5cdFx0XHRjb21wdXRlUGFydHMoY3VydmUsIHNlZ21lbnQxLl9pbmRleCwgMCwgMSk7XG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gY29tcHV0ZVBhcnRzKGN1cnZlLCBpbmRleCwgdDEsIHQyKSB7XG5cdFx0XHRpZiAoKHQyIC0gdDEpID4gbWluU3BhblxuXHRcdFx0XHRcdCYmICEoaWdub3JlU3RyYWlnaHQgJiYgQ3VydmUuaXNTdHJhaWdodChjdXJ2ZSkpXG5cdFx0XHRcdFx0JiYgIUN1cnZlLmlzRmxhdEVub3VnaChjdXJ2ZSwgZmxhdG5lc3MgfHwgMC4yNSkpIHtcblx0XHRcdFx0dmFyIGhhbHZlcyA9IEN1cnZlLnN1YmRpdmlkZShjdXJ2ZSwgMC41KSxcblx0XHRcdFx0XHR0TWlkID0gKHQxICsgdDIpIC8gMjtcblx0XHRcdFx0Y29tcHV0ZVBhcnRzKGhhbHZlc1swXSwgaW5kZXgsIHQxLCB0TWlkKTtcblx0XHRcdFx0Y29tcHV0ZVBhcnRzKGhhbHZlc1sxXSwgaW5kZXgsIHRNaWQsIHQyKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHZhciBkeCA9IGN1cnZlWzZdIC0gY3VydmVbMF0sXG5cdFx0XHRcdFx0ZHkgPSBjdXJ2ZVs3XSAtIGN1cnZlWzFdLFxuXHRcdFx0XHRcdGRpc3QgPSBNYXRoLnNxcnQoZHggKiBkeCArIGR5ICogZHkpO1xuXHRcdFx0XHRpZiAoZGlzdCA+IDApIHtcblx0XHRcdFx0XHRsZW5ndGggKz0gZGlzdDtcblx0XHRcdFx0XHRwYXJ0cy5wdXNoKHtcblx0XHRcdFx0XHRcdG9mZnNldDogbGVuZ3RoLFxuXHRcdFx0XHRcdFx0Y3VydmU6IGN1cnZlLFxuXHRcdFx0XHRcdFx0aW5kZXg6IGluZGV4LFxuXHRcdFx0XHRcdFx0dGltZTogdDIsXG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRmb3IgKHZhciBpID0gMSwgbCA9IHNlZ21lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuXHRcdFx0c2VnbWVudDIgPSBzZWdtZW50c1tpXTtcblx0XHRcdGFkZEN1cnZlKHNlZ21lbnQxLCBzZWdtZW50Mik7XG5cdFx0XHRzZWdtZW50MSA9IHNlZ21lbnQyO1xuXHRcdH1cblx0XHRpZiAocGF0aC5fY2xvc2VkKVxuXHRcdFx0YWRkQ3VydmUoc2VnbWVudDIgfHwgc2VnbWVudDEsIHNlZ21lbnRzWzBdKTtcblx0XHR0aGlzLmN1cnZlcyA9IGN1cnZlcztcblx0XHR0aGlzLnBhcnRzID0gcGFydHM7XG5cdFx0dGhpcy5sZW5ndGggPSBsZW5ndGg7XG5cdFx0dGhpcy5pbmRleCA9IDA7XG5cdH0sXG5cblx0X2dldDogZnVuY3Rpb24ob2Zmc2V0KSB7XG5cdFx0dmFyIHBhcnRzID0gdGhpcy5wYXJ0cyxcblx0XHRcdGxlbmd0aCA9IHBhcnRzLmxlbmd0aCxcblx0XHRcdHN0YXJ0LFxuXHRcdFx0aSwgaiA9IHRoaXMuaW5kZXg7XG5cdFx0Zm9yICg7Oykge1xuXHRcdFx0aSA9IGo7XG5cdFx0XHRpZiAoIWogfHwgcGFydHNbLS1qXS5vZmZzZXQgPCBvZmZzZXQpXG5cdFx0XHRcdGJyZWFrO1xuXHRcdH1cblx0XHRmb3IgKDsgaSA8IGxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgcGFydCA9IHBhcnRzW2ldO1xuXHRcdFx0aWYgKHBhcnQub2Zmc2V0ID49IG9mZnNldCkge1xuXHRcdFx0XHR0aGlzLmluZGV4ID0gaTtcblx0XHRcdFx0dmFyIHByZXYgPSBwYXJ0c1tpIC0gMV0sXG5cdFx0XHRcdFx0cHJldlRpbWUgPSBwcmV2ICYmIHByZXYuaW5kZXggPT09IHBhcnQuaW5kZXggPyBwcmV2LnRpbWUgOiAwLFxuXHRcdFx0XHRcdHByZXZPZmZzZXQgPSBwcmV2ID8gcHJldi5vZmZzZXQgOiAwO1xuXHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdGluZGV4OiBwYXJ0LmluZGV4LFxuXHRcdFx0XHRcdHRpbWU6IHByZXZUaW1lICsgKHBhcnQudGltZSAtIHByZXZUaW1lKVxuXHRcdFx0XHRcdFx0KiAob2Zmc2V0IC0gcHJldk9mZnNldCkgLyAocGFydC5vZmZzZXQgLSBwcmV2T2Zmc2V0KVxuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4ge1xuXHRcdFx0aW5kZXg6IHBhcnRzW2xlbmd0aCAtIDFdLmluZGV4LFxuXHRcdFx0dGltZTogMVxuXHRcdH07XG5cdH0sXG5cblx0ZHJhd1BhcnQ6IGZ1bmN0aW9uKGN0eCwgZnJvbSwgdG8pIHtcblx0XHR2YXIgc3RhcnQgPSB0aGlzLl9nZXQoZnJvbSksXG5cdFx0XHRlbmQgPSB0aGlzLl9nZXQodG8pO1xuXHRcdGZvciAodmFyIGkgPSBzdGFydC5pbmRleCwgbCA9IGVuZC5pbmRleDsgaSA8PSBsOyBpKyspIHtcblx0XHRcdHZhciBjdXJ2ZSA9IEN1cnZlLmdldFBhcnQodGhpcy5jdXJ2ZXNbaV0sXG5cdFx0XHRcdFx0aSA9PT0gc3RhcnQuaW5kZXggPyBzdGFydC50aW1lIDogMCxcblx0XHRcdFx0XHRpID09PSBlbmQuaW5kZXggPyBlbmQudGltZSA6IDEpO1xuXHRcdFx0aWYgKGkgPT09IHN0YXJ0LmluZGV4KVxuXHRcdFx0XHRjdHgubW92ZVRvKGN1cnZlWzBdLCBjdXJ2ZVsxXSk7XG5cdFx0XHRjdHguYmV6aWVyQ3VydmVUby5hcHBseShjdHgsIGN1cnZlLnNsaWNlKDIpKTtcblx0XHR9XG5cdH1cbn0sIEJhc2UuZWFjaChDdXJ2ZS5fZXZhbHVhdGVNZXRob2RzLFxuXHRmdW5jdGlvbihuYW1lKSB7XG5cdFx0dGhpc1tuYW1lICsgJ0F0J10gPSBmdW5jdGlvbihvZmZzZXQpIHtcblx0XHRcdHZhciBwYXJhbSA9IHRoaXMuX2dldChvZmZzZXQpO1xuXHRcdFx0cmV0dXJuIEN1cnZlW25hbWVdKHRoaXMuY3VydmVzW3BhcmFtLmluZGV4XSwgcGFyYW0udGltZSk7XG5cdFx0fTtcblx0fSwge30pXG4pO1xuXG52YXIgUGF0aEZpdHRlciA9IEJhc2UuZXh0ZW5kKHtcblx0aW5pdGlhbGl6ZTogZnVuY3Rpb24ocGF0aCkge1xuXHRcdHZhciBwb2ludHMgPSB0aGlzLnBvaW50cyA9IFtdLFxuXHRcdFx0c2VnbWVudHMgPSBwYXRoLl9zZWdtZW50cyxcblx0XHRcdGNsb3NlZCA9IHBhdGguX2Nsb3NlZDtcblx0XHRmb3IgKHZhciBpID0gMCwgcHJldiwgbCA9IHNlZ21lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuXHRcdFx0dmFyIHBvaW50ID0gc2VnbWVudHNbaV0ucG9pbnQ7XG5cdFx0XHRpZiAoIXByZXYgfHwgIXByZXYuZXF1YWxzKHBvaW50KSkge1xuXHRcdFx0XHRwb2ludHMucHVzaChwcmV2ID0gcG9pbnQuY2xvbmUoKSk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGlmIChjbG9zZWQpIHtcblx0XHRcdHBvaW50cy51bnNoaWZ0KHBvaW50c1twb2ludHMubGVuZ3RoIC0gMV0pO1xuXHRcdFx0cG9pbnRzLnB1c2gocG9pbnRzWzFdKTtcblx0XHR9XG5cdFx0dGhpcy5jbG9zZWQgPSBjbG9zZWQ7XG5cdH0sXG5cblx0Zml0OiBmdW5jdGlvbihlcnJvcikge1xuXHRcdHZhciBwb2ludHMgPSB0aGlzLnBvaW50cyxcblx0XHRcdGxlbmd0aCA9IHBvaW50cy5sZW5ndGgsXG5cdFx0XHRzZWdtZW50cyA9IG51bGw7XG5cdFx0aWYgKGxlbmd0aCA+IDApIHtcblx0XHRcdHNlZ21lbnRzID0gW25ldyBTZWdtZW50KHBvaW50c1swXSldO1xuXHRcdFx0aWYgKGxlbmd0aCA+IDEpIHtcblx0XHRcdFx0dGhpcy5maXRDdWJpYyhzZWdtZW50cywgZXJyb3IsIDAsIGxlbmd0aCAtIDEsXG5cdFx0XHRcdFx0XHRwb2ludHNbMV0uc3VidHJhY3QocG9pbnRzWzBdKSxcblx0XHRcdFx0XHRcdHBvaW50c1tsZW5ndGggLSAyXS5zdWJ0cmFjdChwb2ludHNbbGVuZ3RoIC0gMV0pKTtcblx0XHRcdFx0aWYgKHRoaXMuY2xvc2VkKSB7XG5cdFx0XHRcdFx0c2VnbWVudHMuc2hpZnQoKTtcblx0XHRcdFx0XHRzZWdtZW50cy5wb3AoKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gc2VnbWVudHM7XG5cdH0sXG5cblx0Zml0Q3ViaWM6IGZ1bmN0aW9uKHNlZ21lbnRzLCBlcnJvciwgZmlyc3QsIGxhc3QsIHRhbjEsIHRhbjIpIHtcblx0XHR2YXIgcG9pbnRzID0gdGhpcy5wb2ludHM7XG5cdFx0aWYgKGxhc3QgLSBmaXJzdCA9PT0gMSkge1xuXHRcdFx0dmFyIHB0MSA9IHBvaW50c1tmaXJzdF0sXG5cdFx0XHRcdHB0MiA9IHBvaW50c1tsYXN0XSxcblx0XHRcdFx0ZGlzdCA9IHB0MS5nZXREaXN0YW5jZShwdDIpIC8gMztcblx0XHRcdHRoaXMuYWRkQ3VydmUoc2VnbWVudHMsIFtwdDEsIHB0MS5hZGQodGFuMS5ub3JtYWxpemUoZGlzdCkpLFxuXHRcdFx0XHRcdHB0Mi5hZGQodGFuMi5ub3JtYWxpemUoZGlzdCkpLCBwdDJdKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0dmFyIHVQcmltZSA9IHRoaXMuY2hvcmRMZW5ndGhQYXJhbWV0ZXJpemUoZmlyc3QsIGxhc3QpLFxuXHRcdFx0bWF4RXJyb3IgPSBNYXRoLm1heChlcnJvciwgZXJyb3IgKiBlcnJvciksXG5cdFx0XHRzcGxpdCxcblx0XHRcdHBhcmFtZXRlcnNJbk9yZGVyID0gdHJ1ZTtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8PSA0OyBpKyspIHtcblx0XHRcdHZhciBjdXJ2ZSA9IHRoaXMuZ2VuZXJhdGVCZXppZXIoZmlyc3QsIGxhc3QsIHVQcmltZSwgdGFuMSwgdGFuMik7XG5cdFx0XHR2YXIgbWF4ID0gdGhpcy5maW5kTWF4RXJyb3IoZmlyc3QsIGxhc3QsIGN1cnZlLCB1UHJpbWUpO1xuXHRcdFx0aWYgKG1heC5lcnJvciA8IGVycm9yICYmIHBhcmFtZXRlcnNJbk9yZGVyKSB7XG5cdFx0XHRcdHRoaXMuYWRkQ3VydmUoc2VnbWVudHMsIGN1cnZlKTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdFx0c3BsaXQgPSBtYXguaW5kZXg7XG5cdFx0XHRpZiAobWF4LmVycm9yID49IG1heEVycm9yKVxuXHRcdFx0XHRicmVhaztcblx0XHRcdHBhcmFtZXRlcnNJbk9yZGVyID0gdGhpcy5yZXBhcmFtZXRlcml6ZShmaXJzdCwgbGFzdCwgdVByaW1lLCBjdXJ2ZSk7XG5cdFx0XHRtYXhFcnJvciA9IG1heC5lcnJvcjtcblx0XHR9XG5cdFx0dmFyIHRhbkNlbnRlciA9IHBvaW50c1tzcGxpdCAtIDFdLnN1YnRyYWN0KHBvaW50c1tzcGxpdCArIDFdKTtcblx0XHR0aGlzLmZpdEN1YmljKHNlZ21lbnRzLCBlcnJvciwgZmlyc3QsIHNwbGl0LCB0YW4xLCB0YW5DZW50ZXIpO1xuXHRcdHRoaXMuZml0Q3ViaWMoc2VnbWVudHMsIGVycm9yLCBzcGxpdCwgbGFzdCwgdGFuQ2VudGVyLm5lZ2F0ZSgpLCB0YW4yKTtcblx0fSxcblxuXHRhZGRDdXJ2ZTogZnVuY3Rpb24oc2VnbWVudHMsIGN1cnZlKSB7XG5cdFx0dmFyIHByZXYgPSBzZWdtZW50c1tzZWdtZW50cy5sZW5ndGggLSAxXTtcblx0XHRwcmV2LnNldEhhbmRsZU91dChjdXJ2ZVsxXS5zdWJ0cmFjdChjdXJ2ZVswXSkpO1xuXHRcdHNlZ21lbnRzLnB1c2gobmV3IFNlZ21lbnQoY3VydmVbM10sIGN1cnZlWzJdLnN1YnRyYWN0KGN1cnZlWzNdKSkpO1xuXHR9LFxuXG5cdGdlbmVyYXRlQmV6aWVyOiBmdW5jdGlvbihmaXJzdCwgbGFzdCwgdVByaW1lLCB0YW4xLCB0YW4yKSB7XG5cdFx0dmFyIGVwc2lsb24gPSAxZS0xMixcblx0XHRcdGFicyA9IE1hdGguYWJzLFxuXHRcdFx0cG9pbnRzID0gdGhpcy5wb2ludHMsXG5cdFx0XHRwdDEgPSBwb2ludHNbZmlyc3RdLFxuXHRcdFx0cHQyID0gcG9pbnRzW2xhc3RdLFxuXHRcdFx0QyA9IFtbMCwgMF0sIFswLCAwXV0sXG5cdFx0XHRYID0gWzAsIDBdO1xuXG5cdFx0Zm9yICh2YXIgaSA9IDAsIGwgPSBsYXN0IC0gZmlyc3QgKyAxOyBpIDwgbDsgaSsrKSB7XG5cdFx0XHR2YXIgdSA9IHVQcmltZVtpXSxcblx0XHRcdFx0dCA9IDEgLSB1LFxuXHRcdFx0XHRiID0gMyAqIHUgKiB0LFxuXHRcdFx0XHRiMCA9IHQgKiB0ICogdCxcblx0XHRcdFx0YjEgPSBiICogdCxcblx0XHRcdFx0YjIgPSBiICogdSxcblx0XHRcdFx0YjMgPSB1ICogdSAqIHUsXG5cdFx0XHRcdGExID0gdGFuMS5ub3JtYWxpemUoYjEpLFxuXHRcdFx0XHRhMiA9IHRhbjIubm9ybWFsaXplKGIyKSxcblx0XHRcdFx0dG1wID0gcG9pbnRzW2ZpcnN0ICsgaV1cblx0XHRcdFx0XHQuc3VidHJhY3QocHQxLm11bHRpcGx5KGIwICsgYjEpKVxuXHRcdFx0XHRcdC5zdWJ0cmFjdChwdDIubXVsdGlwbHkoYjIgKyBiMykpO1xuXHRcdFx0Q1swXVswXSArPSBhMS5kb3QoYTEpO1xuXHRcdFx0Q1swXVsxXSArPSBhMS5kb3QoYTIpO1xuXHRcdFx0Q1sxXVswXSA9IENbMF1bMV07XG5cdFx0XHRDWzFdWzFdICs9IGEyLmRvdChhMik7XG5cdFx0XHRYWzBdICs9IGExLmRvdCh0bXApO1xuXHRcdFx0WFsxXSArPSBhMi5kb3QodG1wKTtcblx0XHR9XG5cblx0XHR2YXIgZGV0QzBDMSA9IENbMF1bMF0gKiBDWzFdWzFdIC0gQ1sxXVswXSAqIENbMF1bMV0sXG5cdFx0XHRhbHBoYTEsXG5cdFx0XHRhbHBoYTI7XG5cdFx0aWYgKGFicyhkZXRDMEMxKSA+IGVwc2lsb24pIHtcblx0XHRcdHZhciBkZXRDMFggPSBDWzBdWzBdICogWFsxXSAgICAtIENbMV1bMF0gKiBYWzBdLFxuXHRcdFx0XHRkZXRYQzEgPSBYWzBdICAgICogQ1sxXVsxXSAtIFhbMV0gICAgKiBDWzBdWzFdO1xuXHRcdFx0YWxwaGExID0gZGV0WEMxIC8gZGV0QzBDMTtcblx0XHRcdGFscGhhMiA9IGRldEMwWCAvIGRldEMwQzE7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHZhciBjMCA9IENbMF1bMF0gKyBDWzBdWzFdLFxuXHRcdFx0XHRjMSA9IENbMV1bMF0gKyBDWzFdWzFdO1xuXHRcdFx0YWxwaGExID0gYWxwaGEyID0gYWJzKGMwKSA+IGVwc2lsb24gPyBYWzBdIC8gYzBcblx0XHRcdFx0XHRcdFx0OiBhYnMoYzEpID4gZXBzaWxvbiA/IFhbMV0gLyBjMVxuXHRcdFx0XHRcdFx0XHQ6IDA7XG5cdFx0fVxuXG5cdFx0dmFyIHNlZ0xlbmd0aCA9IHB0Mi5nZXREaXN0YW5jZShwdDEpLFxuXHRcdFx0ZXBzID0gZXBzaWxvbiAqIHNlZ0xlbmd0aCxcblx0XHRcdGhhbmRsZTEsXG5cdFx0XHRoYW5kbGUyO1xuXHRcdGlmIChhbHBoYTEgPCBlcHMgfHwgYWxwaGEyIDwgZXBzKSB7XG5cdFx0XHRhbHBoYTEgPSBhbHBoYTIgPSBzZWdMZW5ndGggLyAzO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR2YXIgbGluZSA9IHB0Mi5zdWJ0cmFjdChwdDEpO1xuXHRcdFx0aGFuZGxlMSA9IHRhbjEubm9ybWFsaXplKGFscGhhMSk7XG5cdFx0XHRoYW5kbGUyID0gdGFuMi5ub3JtYWxpemUoYWxwaGEyKTtcblx0XHRcdGlmIChoYW5kbGUxLmRvdChsaW5lKSAtIGhhbmRsZTIuZG90KGxpbmUpID4gc2VnTGVuZ3RoICogc2VnTGVuZ3RoKSB7XG5cdFx0XHRcdGFscGhhMSA9IGFscGhhMiA9IHNlZ0xlbmd0aCAvIDM7XG5cdFx0XHRcdGhhbmRsZTEgPSBoYW5kbGUyID0gbnVsbDtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gW3B0MSxcblx0XHRcdFx0cHQxLmFkZChoYW5kbGUxIHx8IHRhbjEubm9ybWFsaXplKGFscGhhMSkpLFxuXHRcdFx0XHRwdDIuYWRkKGhhbmRsZTIgfHwgdGFuMi5ub3JtYWxpemUoYWxwaGEyKSksXG5cdFx0XHRcdHB0Ml07XG5cdH0sXG5cblx0cmVwYXJhbWV0ZXJpemU6IGZ1bmN0aW9uKGZpcnN0LCBsYXN0LCB1LCBjdXJ2ZSkge1xuXHRcdGZvciAodmFyIGkgPSBmaXJzdDsgaSA8PSBsYXN0OyBpKyspIHtcblx0XHRcdHVbaSAtIGZpcnN0XSA9IHRoaXMuZmluZFJvb3QoY3VydmUsIHRoaXMucG9pbnRzW2ldLCB1W2kgLSBmaXJzdF0pO1xuXHRcdH1cblx0XHRmb3IgKHZhciBpID0gMSwgbCA9IHUubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG5cdFx0XHRpZiAodVtpXSA8PSB1W2kgLSAxXSlcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSxcblxuXHRmaW5kUm9vdDogZnVuY3Rpb24oY3VydmUsIHBvaW50LCB1KSB7XG5cdFx0dmFyIGN1cnZlMSA9IFtdLFxuXHRcdFx0Y3VydmUyID0gW107XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPD0gMjsgaSsrKSB7XG5cdFx0XHRjdXJ2ZTFbaV0gPSBjdXJ2ZVtpICsgMV0uc3VidHJhY3QoY3VydmVbaV0pLm11bHRpcGx5KDMpO1xuXHRcdH1cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8PSAxOyBpKyspIHtcblx0XHRcdGN1cnZlMltpXSA9IGN1cnZlMVtpICsgMV0uc3VidHJhY3QoY3VydmUxW2ldKS5tdWx0aXBseSgyKTtcblx0XHR9XG5cdFx0dmFyIHB0ID0gdGhpcy5ldmFsdWF0ZSgzLCBjdXJ2ZSwgdSksXG5cdFx0XHRwdDEgPSB0aGlzLmV2YWx1YXRlKDIsIGN1cnZlMSwgdSksXG5cdFx0XHRwdDIgPSB0aGlzLmV2YWx1YXRlKDEsIGN1cnZlMiwgdSksXG5cdFx0XHRkaWZmID0gcHQuc3VidHJhY3QocG9pbnQpLFxuXHRcdFx0ZGYgPSBwdDEuZG90KHB0MSkgKyBkaWZmLmRvdChwdDIpO1xuXHRcdHJldHVybiBOdW1lcmljYWwuaXNaZXJvKGRmKSA/IHUgOiB1IC0gZGlmZi5kb3QocHQxKSAvIGRmO1xuXHR9LFxuXG5cdGV2YWx1YXRlOiBmdW5jdGlvbihkZWdyZWUsIGN1cnZlLCB0KSB7XG5cdFx0dmFyIHRtcCA9IGN1cnZlLnNsaWNlKCk7XG5cdFx0Zm9yICh2YXIgaSA9IDE7IGkgPD0gZGVncmVlOyBpKyspIHtcblx0XHRcdGZvciAodmFyIGogPSAwOyBqIDw9IGRlZ3JlZSAtIGk7IGorKykge1xuXHRcdFx0XHR0bXBbal0gPSB0bXBbal0ubXVsdGlwbHkoMSAtIHQpLmFkZCh0bXBbaiArIDFdLm11bHRpcGx5KHQpKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIHRtcFswXTtcblx0fSxcblxuXHRjaG9yZExlbmd0aFBhcmFtZXRlcml6ZTogZnVuY3Rpb24oZmlyc3QsIGxhc3QpIHtcblx0XHR2YXIgdSA9IFswXTtcblx0XHRmb3IgKHZhciBpID0gZmlyc3QgKyAxOyBpIDw9IGxhc3Q7IGkrKykge1xuXHRcdFx0dVtpIC0gZmlyc3RdID0gdVtpIC0gZmlyc3QgLSAxXVxuXHRcdFx0XHRcdCsgdGhpcy5wb2ludHNbaV0uZ2V0RGlzdGFuY2UodGhpcy5wb2ludHNbaSAtIDFdKTtcblx0XHR9XG5cdFx0Zm9yICh2YXIgaSA9IDEsIG0gPSBsYXN0IC0gZmlyc3Q7IGkgPD0gbTsgaSsrKSB7XG5cdFx0XHR1W2ldIC89IHVbbV07XG5cdFx0fVxuXHRcdHJldHVybiB1O1xuXHR9LFxuXG5cdGZpbmRNYXhFcnJvcjogZnVuY3Rpb24oZmlyc3QsIGxhc3QsIGN1cnZlLCB1KSB7XG5cdFx0dmFyIGluZGV4ID0gTWF0aC5mbG9vcigobGFzdCAtIGZpcnN0ICsgMSkgLyAyKSxcblx0XHRcdG1heERpc3QgPSAwO1xuXHRcdGZvciAodmFyIGkgPSBmaXJzdCArIDE7IGkgPCBsYXN0OyBpKyspIHtcblx0XHRcdHZhciBQID0gdGhpcy5ldmFsdWF0ZSgzLCBjdXJ2ZSwgdVtpIC0gZmlyc3RdKTtcblx0XHRcdHZhciB2ID0gUC5zdWJ0cmFjdCh0aGlzLnBvaW50c1tpXSk7XG5cdFx0XHR2YXIgZGlzdCA9IHYueCAqIHYueCArIHYueSAqIHYueTtcblx0XHRcdGlmIChkaXN0ID49IG1heERpc3QpIHtcblx0XHRcdFx0bWF4RGlzdCA9IGRpc3Q7XG5cdFx0XHRcdGluZGV4ID0gaTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIHtcblx0XHRcdGVycm9yOiBtYXhEaXN0LFxuXHRcdFx0aW5kZXg6IGluZGV4XG5cdFx0fTtcblx0fVxufSk7XG5cbnZhciBUZXh0SXRlbSA9IEl0ZW0uZXh0ZW5kKHtcblx0X2NsYXNzOiAnVGV4dEl0ZW0nLFxuXHRfYXBwbHlNYXRyaXg6IGZhbHNlLFxuXHRfY2FuQXBwbHlNYXRyaXg6IGZhbHNlLFxuXHRfc2VyaWFsaXplRmllbGRzOiB7XG5cdFx0Y29udGVudDogbnVsbFxuXHR9LFxuXHRfYm91bmRzT3B0aW9uczogeyBzdHJva2U6IGZhbHNlLCBoYW5kbGU6IGZhbHNlIH0sXG5cblx0aW5pdGlhbGl6ZTogZnVuY3Rpb24gVGV4dEl0ZW0oYXJnKSB7XG5cdFx0dGhpcy5fY29udGVudCA9ICcnO1xuXHRcdHRoaXMuX2xpbmVzID0gW107XG5cdFx0dmFyIGhhc1Byb3BzID0gYXJnICYmIEJhc2UuaXNQbGFpbk9iamVjdChhcmcpXG5cdFx0XHRcdCYmIGFyZy54ID09PSB1bmRlZmluZWQgJiYgYXJnLnkgPT09IHVuZGVmaW5lZDtcblx0XHR0aGlzLl9pbml0aWFsaXplKGhhc1Byb3BzICYmIGFyZywgIWhhc1Byb3BzICYmIFBvaW50LnJlYWQoYXJndW1lbnRzKSk7XG5cdH0sXG5cblx0X2VxdWFsczogZnVuY3Rpb24oaXRlbSkge1xuXHRcdHJldHVybiB0aGlzLl9jb250ZW50ID09PSBpdGVtLl9jb250ZW50O1xuXHR9LFxuXG5cdGNvcHlDb250ZW50OiBmdW5jdGlvbihzb3VyY2UpIHtcblx0XHR0aGlzLnNldENvbnRlbnQoc291cmNlLl9jb250ZW50KTtcblx0fSxcblxuXHRnZXRDb250ZW50OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5fY29udGVudDtcblx0fSxcblxuXHRzZXRDb250ZW50OiBmdW5jdGlvbihjb250ZW50KSB7XG5cdFx0dGhpcy5fY29udGVudCA9ICcnICsgY29udGVudDtcblx0XHR0aGlzLl9saW5lcyA9IHRoaXMuX2NvbnRlbnQuc3BsaXQoL1xcclxcbnxcXG58XFxyL21nKTtcblx0XHR0aGlzLl9jaGFuZ2VkKDUyMSk7XG5cdH0sXG5cblx0aXNFbXB0eTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuICF0aGlzLl9jb250ZW50O1xuXHR9LFxuXG5cdGdldENoYXJhY3RlclN0eWxlOiAnI2dldFN0eWxlJyxcblx0c2V0Q2hhcmFjdGVyU3R5bGU6ICcjc2V0U3R5bGUnLFxuXG5cdGdldFBhcmFncmFwaFN0eWxlOiAnI2dldFN0eWxlJyxcblx0c2V0UGFyYWdyYXBoU3R5bGU6ICcjc2V0U3R5bGUnXG59KTtcblxudmFyIFBvaW50VGV4dCA9IFRleHRJdGVtLmV4dGVuZCh7XG5cdF9jbGFzczogJ1BvaW50VGV4dCcsXG5cblx0aW5pdGlhbGl6ZTogZnVuY3Rpb24gUG9pbnRUZXh0KCkge1xuXHRcdFRleHRJdGVtLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cdH0sXG5cblx0Z2V0UG9pbnQ6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBwb2ludCA9IHRoaXMuX21hdHJpeC5nZXRUcmFuc2xhdGlvbigpO1xuXHRcdHJldHVybiBuZXcgTGlua2VkUG9pbnQocG9pbnQueCwgcG9pbnQueSwgdGhpcywgJ3NldFBvaW50Jyk7XG5cdH0sXG5cblx0c2V0UG9pbnQ6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBwb2ludCA9IFBvaW50LnJlYWQoYXJndW1lbnRzKTtcblx0XHR0aGlzLnRyYW5zbGF0ZShwb2ludC5zdWJ0cmFjdCh0aGlzLl9tYXRyaXguZ2V0VHJhbnNsYXRpb24oKSkpO1xuXHR9LFxuXG5cdF9kcmF3OiBmdW5jdGlvbihjdHgsIHBhcmFtLCB2aWV3TWF0cml4KSB7XG5cdFx0aWYgKCF0aGlzLl9jb250ZW50KVxuXHRcdFx0cmV0dXJuO1xuXHRcdHRoaXMuX3NldFN0eWxlcyhjdHgsIHBhcmFtLCB2aWV3TWF0cml4KTtcblx0XHR2YXIgbGluZXMgPSB0aGlzLl9saW5lcyxcblx0XHRcdHN0eWxlID0gdGhpcy5fc3R5bGUsXG5cdFx0XHRoYXNGaWxsID0gc3R5bGUuaGFzRmlsbCgpLFxuXHRcdFx0aGFzU3Ryb2tlID0gc3R5bGUuaGFzU3Ryb2tlKCksXG5cdFx0XHRsZWFkaW5nID0gc3R5bGUuZ2V0TGVhZGluZygpLFxuXHRcdFx0c2hhZG93Q29sb3IgPSBjdHguc2hhZG93Q29sb3I7XG5cdFx0Y3R4LmZvbnQgPSBzdHlsZS5nZXRGb250U3R5bGUoKTtcblx0XHRjdHgudGV4dEFsaWduID0gc3R5bGUuZ2V0SnVzdGlmaWNhdGlvbigpO1xuXHRcdGZvciAodmFyIGkgPSAwLCBsID0gbGluZXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG5cdFx0XHRjdHguc2hhZG93Q29sb3IgPSBzaGFkb3dDb2xvcjtcblx0XHRcdHZhciBsaW5lID0gbGluZXNbaV07XG5cdFx0XHRpZiAoaGFzRmlsbCkge1xuXHRcdFx0XHRjdHguZmlsbFRleHQobGluZSwgMCwgMCk7XG5cdFx0XHRcdGN0eC5zaGFkb3dDb2xvciA9ICdyZ2JhKDAsMCwwLDApJztcblx0XHRcdH1cblx0XHRcdGlmIChoYXNTdHJva2UpXG5cdFx0XHRcdGN0eC5zdHJva2VUZXh0KGxpbmUsIDAsIDApO1xuXHRcdFx0Y3R4LnRyYW5zbGF0ZSgwLCBsZWFkaW5nKTtcblx0XHR9XG5cdH0sXG5cblx0X2dldEJvdW5kczogZnVuY3Rpb24obWF0cml4LCBvcHRpb25zKSB7XG5cdFx0dmFyIHN0eWxlID0gdGhpcy5fc3R5bGUsXG5cdFx0XHRsaW5lcyA9IHRoaXMuX2xpbmVzLFxuXHRcdFx0bnVtTGluZXMgPSBsaW5lcy5sZW5ndGgsXG5cdFx0XHRqdXN0aWZpY2F0aW9uID0gc3R5bGUuZ2V0SnVzdGlmaWNhdGlvbigpLFxuXHRcdFx0bGVhZGluZyA9IHN0eWxlLmdldExlYWRpbmcoKSxcblx0XHRcdHdpZHRoID0gdGhpcy5nZXRWaWV3KCkuZ2V0VGV4dFdpZHRoKHN0eWxlLmdldEZvbnRTdHlsZSgpLCBsaW5lcyksXG5cdFx0XHR4ID0gMDtcblx0XHRpZiAoanVzdGlmaWNhdGlvbiAhPT0gJ2xlZnQnKVxuXHRcdFx0eCAtPSB3aWR0aCAvIChqdXN0aWZpY2F0aW9uID09PSAnY2VudGVyJyA/IDI6IDEpO1xuXHRcdHZhciByZWN0ID0gbmV3IFJlY3RhbmdsZSh4LFxuXHRcdFx0XHRcdG51bUxpbmVzID8gLSAwLjc1ICogbGVhZGluZyA6IDAsXG5cdFx0XHRcdFx0d2lkdGgsIG51bUxpbmVzICogbGVhZGluZyk7XG5cdFx0cmV0dXJuIG1hdHJpeCA/IG1hdHJpeC5fdHJhbnNmb3JtQm91bmRzKHJlY3QsIHJlY3QpIDogcmVjdDtcblx0fVxufSk7XG5cbnZhciBDb2xvciA9IEJhc2UuZXh0ZW5kKG5ldyBmdW5jdGlvbigpIHtcblx0dmFyIHR5cGVzID0ge1xuXHRcdGdyYXk6IFsnZ3JheSddLFxuXHRcdHJnYjogWydyZWQnLCAnZ3JlZW4nLCAnYmx1ZSddLFxuXHRcdGhzYjogWydodWUnLCAnc2F0dXJhdGlvbicsICdicmlnaHRuZXNzJ10sXG5cdFx0aHNsOiBbJ2h1ZScsICdzYXR1cmF0aW9uJywgJ2xpZ2h0bmVzcyddLFxuXHRcdGdyYWRpZW50OiBbJ2dyYWRpZW50JywgJ29yaWdpbicsICdkZXN0aW5hdGlvbicsICdoaWdobGlnaHQnXVxuXHR9O1xuXG5cdHZhciBjb21wb25lbnRQYXJzZXJzID0ge30sXG5cdFx0bmFtZWRDb2xvcnMgPSB7XG5cdFx0XHR0cmFuc3BhcmVudDogWzAsIDAsIDAsIDBdXG5cdFx0fSxcblx0XHRjb2xvckN0eDtcblxuXHRmdW5jdGlvbiBmcm9tQ1NTKHN0cmluZykge1xuXHRcdHZhciBtYXRjaCA9IHN0cmluZy5tYXRjaChcblx0XHRcdFx0L14jKFtcXGRhLWZdezJ9KShbXFxkYS1mXXsyfSkoW1xcZGEtZl17Mn0pKFtcXGRhLWZdezJ9KT8kL2lcblx0XHRcdCkgfHwgc3RyaW5nLm1hdGNoKFxuXHRcdFx0XHQvXiMoW1xcZGEtZl0pKFtcXGRhLWZdKShbXFxkYS1mXSkoW1xcZGEtZl0pPyQvaVxuXHRcdFx0KSxcblx0XHRcdHR5cGUgPSAncmdiJyxcblx0XHRcdGNvbXBvbmVudHM7XG5cdFx0aWYgKG1hdGNoKSB7XG5cdFx0XHR2YXIgYW1vdW50ID0gbWF0Y2hbNF0gPyA0IDogMztcblx0XHRcdGNvbXBvbmVudHMgPSBuZXcgQXJyYXkoYW1vdW50KTtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgYW1vdW50OyBpKyspIHtcblx0XHRcdFx0dmFyIHZhbHVlID0gbWF0Y2hbaSArIDFdO1xuXHRcdFx0XHRjb21wb25lbnRzW2ldID0gcGFyc2VJbnQodmFsdWUubGVuZ3RoID09IDFcblx0XHRcdFx0XHRcdD8gdmFsdWUgKyB2YWx1ZSA6IHZhbHVlLCAxNikgLyAyNTU7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIGlmIChtYXRjaCA9IHN0cmluZy5tYXRjaCgvXihyZ2J8aHNsKWE/XFwoKC4qKVxcKSQvKSkge1xuXHRcdFx0dHlwZSA9IG1hdGNoWzFdO1xuXHRcdFx0Y29tcG9uZW50cyA9IG1hdGNoWzJdLnNwbGl0KC9bLFxcc10rL2cpO1xuXHRcdFx0dmFyIGlzSFNMID0gdHlwZSA9PT0gJ2hzbCc7XG5cdFx0XHRmb3IgKHZhciBpID0gMCwgbCA9IE1hdGgubWluKGNvbXBvbmVudHMubGVuZ3RoLCA0KTsgaSA8IGw7IGkrKykge1xuXHRcdFx0XHR2YXIgY29tcG9uZW50ID0gY29tcG9uZW50c1tpXTtcblx0XHRcdFx0dmFyIHZhbHVlID0gcGFyc2VGbG9hdChjb21wb25lbnQpO1xuXHRcdFx0XHRpZiAoaXNIU0wpIHtcblx0XHRcdFx0XHRpZiAoaSA9PT0gMCkge1xuXHRcdFx0XHRcdFx0dmFyIHVuaXQgPSBjb21wb25lbnQubWF0Y2goLyhbYS16XSopJC8pWzFdO1xuXHRcdFx0XHRcdFx0dmFsdWUgKj0gKHtcblx0XHRcdFx0XHRcdFx0dHVybjogMzYwLFxuXHRcdFx0XHRcdFx0XHRyYWQ6IDE4MCAvIE1hdGguUEksXG5cdFx0XHRcdFx0XHRcdGdyYWQ6IDAuOVxuXHRcdFx0XHRcdFx0fVt1bml0XSB8fCAxKTtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKGkgPCAzKSB7XG5cdFx0XHRcdFx0XHR2YWx1ZSAvPSAxMDA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGVsc2UgaWYgKGkgPCAzKSB7XG5cdFx0XHRcdFx0dmFsdWUgLz0gMjU1O1xuXHRcdFx0XHR9XG5cdFx0XHRcdGNvbXBvbmVudHNbaV0gPSB2YWx1ZTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0dmFyIGNvbG9yID0gbmFtZWRDb2xvcnNbc3RyaW5nXTtcblx0XHRcdGlmICghY29sb3IpIHtcblx0XHRcdFx0aWYgKHdpbmRvdykge1xuXHRcdFx0XHRcdGlmICghY29sb3JDdHgpIHtcblx0XHRcdFx0XHRcdGNvbG9yQ3R4ID0gQ2FudmFzUHJvdmlkZXIuZ2V0Q29udGV4dCgxLCAxKTtcblx0XHRcdFx0XHRcdGNvbG9yQ3R4Lmdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbiA9ICdjb3B5Jztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0Y29sb3JDdHguZmlsbFN0eWxlID0gJ3JnYmEoMCwwLDAsMCknO1xuXHRcdFx0XHRcdGNvbG9yQ3R4LmZpbGxTdHlsZSA9IHN0cmluZztcblx0XHRcdFx0XHRjb2xvckN0eC5maWxsUmVjdCgwLCAwLCAxLCAxKTtcblx0XHRcdFx0XHR2YXIgZGF0YSA9IGNvbG9yQ3R4LmdldEltYWdlRGF0YSgwLCAwLCAxLCAxKS5kYXRhO1xuXHRcdFx0XHRcdGNvbG9yID0gbmFtZWRDb2xvcnNbc3RyaW5nXSA9IFtcblx0XHRcdFx0XHRcdGRhdGFbMF0gLyAyNTUsXG5cdFx0XHRcdFx0XHRkYXRhWzFdIC8gMjU1LFxuXHRcdFx0XHRcdFx0ZGF0YVsyXSAvIDI1NVxuXHRcdFx0XHRcdF07XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Y29sb3IgPSBbMCwgMCwgMF07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGNvbXBvbmVudHMgPSBjb2xvci5zbGljZSgpO1xuXHRcdH1cblx0XHRyZXR1cm4gW3R5cGUsIGNvbXBvbmVudHNdO1xuXHR9XG5cblx0dmFyIGhzYkluZGljZXMgPSBbXG5cdFx0WzAsIDMsIDFdLFxuXHRcdFsyLCAwLCAxXSxcblx0XHRbMSwgMCwgM10sXG5cdFx0WzEsIDIsIDBdLFxuXHRcdFszLCAxLCAwXSxcblx0XHRbMCwgMSwgMl1cblx0XTtcblxuXHR2YXIgY29udmVydGVycyA9IHtcblx0XHQncmdiLWhzYic6IGZ1bmN0aW9uKHIsIGcsIGIpIHtcblx0XHRcdHZhciBtYXggPSBNYXRoLm1heChyLCBnLCBiKSxcblx0XHRcdFx0bWluID0gTWF0aC5taW4ociwgZywgYiksXG5cdFx0XHRcdGRlbHRhID0gbWF4IC0gbWluLFxuXHRcdFx0XHRoID0gZGVsdGEgPT09IDAgPyAwXG5cdFx0XHRcdFx0OiAgICggbWF4ID09IHIgPyAoZyAtIGIpIC8gZGVsdGEgKyAoZyA8IGIgPyA2IDogMClcblx0XHRcdFx0XHRcdDogbWF4ID09IGcgPyAoYiAtIHIpIC8gZGVsdGEgKyAyXG5cdFx0XHRcdFx0XHQ6ICAgICAgICAgICAgKHIgLSBnKSAvIGRlbHRhICsgNCkgKiA2MDtcblx0XHRcdHJldHVybiBbaCwgbWF4ID09PSAwID8gMCA6IGRlbHRhIC8gbWF4LCBtYXhdO1xuXHRcdH0sXG5cblx0XHQnaHNiLXJnYic6IGZ1bmN0aW9uKGgsIHMsIGIpIHtcblx0XHRcdGggPSAoKChoIC8gNjApICUgNikgKyA2KSAlIDY7XG5cdFx0XHR2YXIgaSA9IE1hdGguZmxvb3IoaCksXG5cdFx0XHRcdGYgPSBoIC0gaSxcblx0XHRcdFx0aSA9IGhzYkluZGljZXNbaV0sXG5cdFx0XHRcdHYgPSBbXG5cdFx0XHRcdFx0Yixcblx0XHRcdFx0XHRiICogKDEgLSBzKSxcblx0XHRcdFx0XHRiICogKDEgLSBzICogZiksXG5cdFx0XHRcdFx0YiAqICgxIC0gcyAqICgxIC0gZikpXG5cdFx0XHRcdF07XG5cdFx0XHRyZXR1cm4gW3ZbaVswXV0sIHZbaVsxXV0sIHZbaVsyXV1dO1xuXHRcdH0sXG5cblx0XHQncmdiLWhzbCc6IGZ1bmN0aW9uKHIsIGcsIGIpIHtcblx0XHRcdHZhciBtYXggPSBNYXRoLm1heChyLCBnLCBiKSxcblx0XHRcdFx0bWluID0gTWF0aC5taW4ociwgZywgYiksXG5cdFx0XHRcdGRlbHRhID0gbWF4IC0gbWluLFxuXHRcdFx0XHRhY2hyb21hdGljID0gZGVsdGEgPT09IDAsXG5cdFx0XHRcdGggPSBhY2hyb21hdGljID8gMFxuXHRcdFx0XHRcdDogICAoIG1heCA9PSByID8gKGcgLSBiKSAvIGRlbHRhICsgKGcgPCBiID8gNiA6IDApXG5cdFx0XHRcdFx0XHQ6IG1heCA9PSBnID8gKGIgLSByKSAvIGRlbHRhICsgMlxuXHRcdFx0XHRcdFx0OiAgICAgICAgICAgIChyIC0gZykgLyBkZWx0YSArIDQpICogNjAsXG5cdFx0XHRcdGwgPSAobWF4ICsgbWluKSAvIDIsXG5cdFx0XHRcdHMgPSBhY2hyb21hdGljID8gMCA6IGwgPCAwLjVcblx0XHRcdFx0XHRcdD8gZGVsdGEgLyAobWF4ICsgbWluKVxuXHRcdFx0XHRcdFx0OiBkZWx0YSAvICgyIC0gbWF4IC0gbWluKTtcblx0XHRcdHJldHVybiBbaCwgcywgbF07XG5cdFx0fSxcblxuXHRcdCdoc2wtcmdiJzogZnVuY3Rpb24oaCwgcywgbCkge1xuXHRcdFx0aCA9ICgoKGggLyAzNjApICUgMSkgKyAxKSAlIDE7XG5cdFx0XHRpZiAocyA9PT0gMClcblx0XHRcdFx0cmV0dXJuIFtsLCBsLCBsXTtcblx0XHRcdHZhciB0M3MgPSBbIGggKyAxIC8gMywgaCwgaCAtIDEgLyAzIF0sXG5cdFx0XHRcdHQyID0gbCA8IDAuNSA/IGwgKiAoMSArIHMpIDogbCArIHMgLSBsICogcyxcblx0XHRcdFx0dDEgPSAyICogbCAtIHQyLFxuXHRcdFx0XHRjID0gW107XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IDM7IGkrKykge1xuXHRcdFx0XHR2YXIgdDMgPSB0M3NbaV07XG5cdFx0XHRcdGlmICh0MyA8IDApIHQzICs9IDE7XG5cdFx0XHRcdGlmICh0MyA+IDEpIHQzIC09IDE7XG5cdFx0XHRcdGNbaV0gPSA2ICogdDMgPCAxXG5cdFx0XHRcdFx0PyB0MSArICh0MiAtIHQxKSAqIDYgKiB0M1xuXHRcdFx0XHRcdDogMiAqIHQzIDwgMVxuXHRcdFx0XHRcdFx0PyB0MlxuXHRcdFx0XHRcdFx0OiAzICogdDMgPCAyXG5cdFx0XHRcdFx0XHRcdD8gdDEgKyAodDIgLSB0MSkgKiAoKDIgLyAzKSAtIHQzKSAqIDZcblx0XHRcdFx0XHRcdFx0OiB0MTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBjO1xuXHRcdH0sXG5cblx0XHQncmdiLWdyYXknOiBmdW5jdGlvbihyLCBnLCBiKSB7XG5cdFx0XHRyZXR1cm4gW3IgKiAwLjI5ODkgKyBnICogMC41ODcgKyBiICogMC4xMTRdO1xuXHRcdH0sXG5cblx0XHQnZ3JheS1yZ2InOiBmdW5jdGlvbihnKSB7XG5cdFx0XHRyZXR1cm4gW2csIGcsIGddO1xuXHRcdH0sXG5cblx0XHQnZ3JheS1oc2InOiBmdW5jdGlvbihnKSB7XG5cdFx0XHRyZXR1cm4gWzAsIDAsIGddO1xuXHRcdH0sXG5cblx0XHQnZ3JheS1oc2wnOiBmdW5jdGlvbihnKSB7XG5cdFx0XHRyZXR1cm4gWzAsIDAsIGddO1xuXHRcdH0sXG5cblx0XHQnZ3JhZGllbnQtcmdiJzogZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gW107XG5cdFx0fSxcblxuXHRcdCdyZ2ItZ3JhZGllbnQnOiBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBbXTtcblx0XHR9XG5cblx0fTtcblxuXHRyZXR1cm4gQmFzZS5lYWNoKHR5cGVzLCBmdW5jdGlvbihwcm9wZXJ0aWVzLCB0eXBlKSB7XG5cdFx0Y29tcG9uZW50UGFyc2Vyc1t0eXBlXSA9IFtdO1xuXHRcdEJhc2UuZWFjaChwcm9wZXJ0aWVzLCBmdW5jdGlvbihuYW1lLCBpbmRleCkge1xuXHRcdFx0dmFyIHBhcnQgPSBCYXNlLmNhcGl0YWxpemUobmFtZSksXG5cdFx0XHRcdGhhc092ZXJsYXAgPSAvXihodWV8c2F0dXJhdGlvbikkLy50ZXN0KG5hbWUpLFxuXHRcdFx0XHRwYXJzZXIgPSBjb21wb25lbnRQYXJzZXJzW3R5cGVdW2luZGV4XSA9IHR5cGUgPT09ICdncmFkaWVudCdcblx0XHRcdFx0XHQ/IG5hbWUgPT09ICdncmFkaWVudCdcblx0XHRcdFx0XHRcdD8gZnVuY3Rpb24odmFsdWUpIHtcblx0XHRcdFx0XHRcdFx0dmFyIGN1cnJlbnQgPSB0aGlzLl9jb21wb25lbnRzWzBdO1xuXHRcdFx0XHRcdFx0XHR2YWx1ZSA9IEdyYWRpZW50LnJlYWQoXG5cdFx0XHRcdFx0XHRcdFx0QXJyYXkuaXNBcnJheSh2YWx1ZSlcblx0XHRcdFx0XHRcdFx0XHRcdD8gdmFsdWVcblx0XHRcdFx0XHRcdFx0XHRcdDogYXJndW1lbnRzLCAwLCB7IHJlYWROdWxsOiB0cnVlIH1cblx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0aWYgKGN1cnJlbnQgIT09IHZhbHVlKSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKGN1cnJlbnQpXG5cdFx0XHRcdFx0XHRcdFx0XHRjdXJyZW50Ll9yZW1vdmVPd25lcih0aGlzKTtcblx0XHRcdFx0XHRcdFx0XHRpZiAodmFsdWUpXG5cdFx0XHRcdFx0XHRcdFx0XHR2YWx1ZS5fYWRkT3duZXIodGhpcyk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIFBvaW50LnJlYWQoYXJndW1lbnRzLCAwLCB7XG5cdFx0XHRcdFx0XHRcdFx0XHRyZWFkTnVsbDogbmFtZSA9PT0gJ2hpZ2hsaWdodCcsXG5cdFx0XHRcdFx0XHRcdFx0XHRjbG9uZTogdHJ1ZVxuXHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHQ6IGZ1bmN0aW9uKHZhbHVlKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdmFsdWUgPT0gbnVsbCB8fCBpc05hTih2YWx1ZSkgPyAwIDogK3ZhbHVlO1xuXHRcdFx0XHRcdH07XG5cdFx0XHR0aGlzWydnZXQnICsgcGFydF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuX3R5cGUgPT09IHR5cGVcblx0XHRcdFx0XHR8fCBoYXNPdmVybGFwICYmIC9eaHNbYmxdJC8udGVzdCh0aGlzLl90eXBlKVxuXHRcdFx0XHRcdFx0PyB0aGlzLl9jb21wb25lbnRzW2luZGV4XVxuXHRcdFx0XHRcdFx0OiB0aGlzLl9jb252ZXJ0KHR5cGUpW2luZGV4XTtcblx0XHRcdH07XG5cblx0XHRcdHRoaXNbJ3NldCcgKyBwYXJ0XSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG5cdFx0XHRcdGlmICh0aGlzLl90eXBlICE9PSB0eXBlXG5cdFx0XHRcdFx0XHQmJiAhKGhhc092ZXJsYXAgJiYgL15oc1tibF0kLy50ZXN0KHRoaXMuX3R5cGUpKSkge1xuXHRcdFx0XHRcdHRoaXMuX2NvbXBvbmVudHMgPSB0aGlzLl9jb252ZXJ0KHR5cGUpO1xuXHRcdFx0XHRcdHRoaXMuX3Byb3BlcnRpZXMgPSB0eXBlc1t0eXBlXTtcblx0XHRcdFx0XHR0aGlzLl90eXBlID0gdHlwZTtcblx0XHRcdFx0fVxuXHRcdFx0XHR0aGlzLl9jb21wb25lbnRzW2luZGV4XSA9IHBhcnNlci5jYWxsKHRoaXMsIHZhbHVlKTtcblx0XHRcdFx0dGhpcy5fY2hhbmdlZCgpO1xuXHRcdFx0fTtcblx0XHR9LCB0aGlzKTtcblx0fSwge1xuXHRcdF9jbGFzczogJ0NvbG9yJyxcblx0XHRfcmVhZEluZGV4OiB0cnVlLFxuXG5cdFx0aW5pdGlhbGl6ZTogZnVuY3Rpb24gQ29sb3IoYXJnKSB7XG5cdFx0XHR2YXIgYXJncyA9IGFyZ3VtZW50cyxcblx0XHRcdFx0cmVhZGluZyA9IHRoaXMuX19yZWFkLFxuXHRcdFx0XHRyZWFkID0gMCxcblx0XHRcdFx0dHlwZSxcblx0XHRcdFx0Y29tcG9uZW50cyxcblx0XHRcdFx0YWxwaGEsXG5cdFx0XHRcdHZhbHVlcztcblx0XHRcdGlmIChBcnJheS5pc0FycmF5KGFyZykpIHtcblx0XHRcdFx0YXJncyA9IGFyZztcblx0XHRcdFx0YXJnID0gYXJnc1swXTtcblx0XHRcdH1cblx0XHRcdHZhciBhcmdUeXBlID0gYXJnICE9IG51bGwgJiYgdHlwZW9mIGFyZztcblx0XHRcdGlmIChhcmdUeXBlID09PSAnc3RyaW5nJyAmJiBhcmcgaW4gdHlwZXMpIHtcblx0XHRcdFx0dHlwZSA9IGFyZztcblx0XHRcdFx0YXJnID0gYXJnc1sxXTtcblx0XHRcdFx0aWYgKEFycmF5LmlzQXJyYXkoYXJnKSkge1xuXHRcdFx0XHRcdGNvbXBvbmVudHMgPSBhcmc7XG5cdFx0XHRcdFx0YWxwaGEgPSBhcmdzWzJdO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGlmIChyZWFkaW5nKVxuXHRcdFx0XHRcdFx0cmVhZCA9IDE7XG5cdFx0XHRcdFx0YXJncyA9IEJhc2Uuc2xpY2UoYXJncywgMSk7XG5cdFx0XHRcdFx0YXJnVHlwZSA9IHR5cGVvZiBhcmc7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGlmICghY29tcG9uZW50cykge1xuXHRcdFx0XHR2YWx1ZXMgPSBhcmdUeXBlID09PSAnbnVtYmVyJ1xuXHRcdFx0XHRcdFx0PyBhcmdzXG5cdFx0XHRcdFx0XHQ6IGFyZ1R5cGUgPT09ICdvYmplY3QnICYmIGFyZy5sZW5ndGggIT0gbnVsbFxuXHRcdFx0XHRcdFx0XHQ/IGFyZ1xuXHRcdFx0XHRcdFx0XHQ6IG51bGw7XG5cdFx0XHRcdGlmICh2YWx1ZXMpIHtcblx0XHRcdFx0XHRpZiAoIXR5cGUpXG5cdFx0XHRcdFx0XHR0eXBlID0gdmFsdWVzLmxlbmd0aCA+PSAzXG5cdFx0XHRcdFx0XHRcdFx0PyAncmdiJ1xuXHRcdFx0XHRcdFx0XHRcdDogJ2dyYXknO1xuXHRcdFx0XHRcdHZhciBsZW5ndGggPSB0eXBlc1t0eXBlXS5sZW5ndGg7XG5cdFx0XHRcdFx0YWxwaGEgPSB2YWx1ZXNbbGVuZ3RoXTtcblx0XHRcdFx0XHRpZiAocmVhZGluZykge1xuXHRcdFx0XHRcdFx0cmVhZCArPSB2YWx1ZXMgPT09IGFyZ3VtZW50c1xuXHRcdFx0XHRcdFx0XHQ/IGxlbmd0aCArIChhbHBoYSAhPSBudWxsID8gMSA6IDApXG5cdFx0XHRcdFx0XHRcdDogMTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKHZhbHVlcy5sZW5ndGggPiBsZW5ndGgpXG5cdFx0XHRcdFx0XHR2YWx1ZXMgPSBCYXNlLnNsaWNlKHZhbHVlcywgMCwgbGVuZ3RoKTtcblx0XHRcdFx0fSBlbHNlIGlmIChhcmdUeXBlID09PSAnc3RyaW5nJykge1xuXHRcdFx0XHRcdHZhciBjb252ZXJ0ZWQgPSBmcm9tQ1NTKGFyZyk7XG5cdFx0XHRcdFx0dHlwZSA9IGNvbnZlcnRlZFswXTtcblx0XHRcdFx0XHRjb21wb25lbnRzID0gY29udmVydGVkWzFdO1xuXHRcdFx0XHRcdGlmIChjb21wb25lbnRzLmxlbmd0aCA9PT0gNCkge1xuXHRcdFx0XHRcdFx0YWxwaGEgPSBjb21wb25lbnRzWzNdO1xuXHRcdFx0XHRcdFx0Y29tcG9uZW50cy5sZW5ndGgtLTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gZWxzZSBpZiAoYXJnVHlwZSA9PT0gJ29iamVjdCcpIHtcblx0XHRcdFx0XHRpZiAoYXJnLmNvbnN0cnVjdG9yID09PSBDb2xvcikge1xuXHRcdFx0XHRcdFx0dHlwZSA9IGFyZy5fdHlwZTtcblx0XHRcdFx0XHRcdGNvbXBvbmVudHMgPSBhcmcuX2NvbXBvbmVudHMuc2xpY2UoKTtcblx0XHRcdFx0XHRcdGFscGhhID0gYXJnLl9hbHBoYTtcblx0XHRcdFx0XHRcdGlmICh0eXBlID09PSAnZ3JhZGllbnQnKSB7XG5cdFx0XHRcdFx0XHRcdGZvciAodmFyIGkgPSAxLCBsID0gY29tcG9uZW50cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcblx0XHRcdFx0XHRcdFx0XHR2YXIgcG9pbnQgPSBjb21wb25lbnRzW2ldO1xuXHRcdFx0XHRcdFx0XHRcdGlmIChwb2ludClcblx0XHRcdFx0XHRcdFx0XHRcdGNvbXBvbmVudHNbaV0gPSBwb2ludC5jbG9uZSgpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSBlbHNlIGlmIChhcmcuY29uc3RydWN0b3IgPT09IEdyYWRpZW50KSB7XG5cdFx0XHRcdFx0XHR0eXBlID0gJ2dyYWRpZW50Jztcblx0XHRcdFx0XHRcdHZhbHVlcyA9IGFyZ3M7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHR5cGUgPSAnaHVlJyBpbiBhcmdcblx0XHRcdFx0XHRcdFx0PyAnbGlnaHRuZXNzJyBpbiBhcmdcblx0XHRcdFx0XHRcdFx0XHQ/ICdoc2wnXG5cdFx0XHRcdFx0XHRcdFx0OiAnaHNiJ1xuXHRcdFx0XHRcdFx0XHQ6ICdncmFkaWVudCcgaW4gYXJnIHx8ICdzdG9wcycgaW4gYXJnXG5cdFx0XHRcdFx0XHRcdFx0XHR8fCAncmFkaWFsJyBpbiBhcmdcblx0XHRcdFx0XHRcdFx0XHQ/ICdncmFkaWVudCdcblx0XHRcdFx0XHRcdFx0XHQ6ICdncmF5JyBpbiBhcmdcblx0XHRcdFx0XHRcdFx0XHRcdD8gJ2dyYXknXG5cdFx0XHRcdFx0XHRcdFx0XHQ6ICdyZ2InO1xuXHRcdFx0XHRcdFx0dmFyIHByb3BlcnRpZXMgPSB0eXBlc1t0eXBlXSxcblx0XHRcdFx0XHRcdFx0cGFyc2VycyA9IGNvbXBvbmVudFBhcnNlcnNbdHlwZV07XG5cdFx0XHRcdFx0XHR0aGlzLl9jb21wb25lbnRzID0gY29tcG9uZW50cyA9IFtdO1xuXHRcdFx0XHRcdFx0Zm9yICh2YXIgaSA9IDAsIGwgPSBwcm9wZXJ0aWVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuXHRcdFx0XHRcdFx0XHR2YXIgdmFsdWUgPSBhcmdbcHJvcGVydGllc1tpXV07XG5cdFx0XHRcdFx0XHRcdGlmICh2YWx1ZSA9PSBudWxsICYmICFpICYmIHR5cGUgPT09ICdncmFkaWVudCdcblx0XHRcdFx0XHRcdFx0XHRcdCYmICdzdG9wcycgaW4gYXJnKSB7XG5cdFx0XHRcdFx0XHRcdFx0dmFsdWUgPSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRzdG9wczogYXJnLnN0b3BzLFxuXHRcdFx0XHRcdFx0XHRcdFx0cmFkaWFsOiBhcmcucmFkaWFsXG5cdFx0XHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR2YWx1ZSA9IHBhcnNlcnNbaV0uY2FsbCh0aGlzLCB2YWx1ZSk7XG5cdFx0XHRcdFx0XHRcdGlmICh2YWx1ZSAhPSBudWxsKVxuXHRcdFx0XHRcdFx0XHRcdGNvbXBvbmVudHNbaV0gPSB2YWx1ZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGFscGhhID0gYXJnLmFscGhhO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAocmVhZGluZyAmJiB0eXBlKVxuXHRcdFx0XHRcdHJlYWQgPSAxO1xuXHRcdFx0fVxuXHRcdFx0dGhpcy5fdHlwZSA9IHR5cGUgfHwgJ3JnYic7XG5cdFx0XHRpZiAoIWNvbXBvbmVudHMpIHtcblx0XHRcdFx0dGhpcy5fY29tcG9uZW50cyA9IGNvbXBvbmVudHMgPSBbXTtcblx0XHRcdFx0dmFyIHBhcnNlcnMgPSBjb21wb25lbnRQYXJzZXJzW3RoaXMuX3R5cGVdO1xuXHRcdFx0XHRmb3IgKHZhciBpID0gMCwgbCA9IHBhcnNlcnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG5cdFx0XHRcdFx0dmFyIHZhbHVlID0gcGFyc2Vyc1tpXS5jYWxsKHRoaXMsIHZhbHVlcyAmJiB2YWx1ZXNbaV0pO1xuXHRcdFx0XHRcdGlmICh2YWx1ZSAhPSBudWxsKVxuXHRcdFx0XHRcdFx0Y29tcG9uZW50c1tpXSA9IHZhbHVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHR0aGlzLl9jb21wb25lbnRzID0gY29tcG9uZW50cztcblx0XHRcdHRoaXMuX3Byb3BlcnRpZXMgPSB0eXBlc1t0aGlzLl90eXBlXTtcblx0XHRcdHRoaXMuX2FscGhhID0gYWxwaGE7XG5cdFx0XHRpZiAocmVhZGluZylcblx0XHRcdFx0dGhpcy5fX3JlYWQgPSByZWFkO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fSxcblxuXHRcdHNldDogJyNpbml0aWFsaXplJyxcblxuXHRcdF9zZXJpYWxpemU6IGZ1bmN0aW9uKG9wdGlvbnMsIGRpY3Rpb25hcnkpIHtcblx0XHRcdHZhciBjb21wb25lbnRzID0gdGhpcy5nZXRDb21wb25lbnRzKCk7XG5cdFx0XHRyZXR1cm4gQmFzZS5zZXJpYWxpemUoXG5cdFx0XHRcdFx0L14oZ3JheXxyZ2IpJC8udGVzdCh0aGlzLl90eXBlKVxuXHRcdFx0XHRcdFx0PyBjb21wb25lbnRzXG5cdFx0XHRcdFx0XHQ6IFt0aGlzLl90eXBlXS5jb25jYXQoY29tcG9uZW50cyksXG5cdFx0XHRcdFx0b3B0aW9ucywgdHJ1ZSwgZGljdGlvbmFyeSk7XG5cdFx0fSxcblxuXHRcdF9jaGFuZ2VkOiBmdW5jdGlvbigpIHtcblx0XHRcdHRoaXMuX2NhbnZhc1N0eWxlID0gbnVsbDtcblx0XHRcdGlmICh0aGlzLl9vd25lcilcblx0XHRcdFx0dGhpcy5fb3duZXIuX2NoYW5nZWQoMTI5KTtcblx0XHR9LFxuXG5cdFx0X2NvbnZlcnQ6IGZ1bmN0aW9uKHR5cGUpIHtcblx0XHRcdHZhciBjb252ZXJ0ZXI7XG5cdFx0XHRyZXR1cm4gdGhpcy5fdHlwZSA9PT0gdHlwZVxuXHRcdFx0XHRcdD8gdGhpcy5fY29tcG9uZW50cy5zbGljZSgpXG5cdFx0XHRcdFx0OiAoY29udmVydGVyID0gY29udmVydGVyc1t0aGlzLl90eXBlICsgJy0nICsgdHlwZV0pXG5cdFx0XHRcdFx0XHQ/IGNvbnZlcnRlci5hcHBseSh0aGlzLCB0aGlzLl9jb21wb25lbnRzKVxuXHRcdFx0XHRcdFx0OiBjb252ZXJ0ZXJzWydyZ2ItJyArIHR5cGVdLmFwcGx5KHRoaXMsXG5cdFx0XHRcdFx0XHRcdGNvbnZlcnRlcnNbdGhpcy5fdHlwZSArICctcmdiJ10uYXBwbHkodGhpcyxcblx0XHRcdFx0XHRcdFx0XHR0aGlzLl9jb21wb25lbnRzKSk7XG5cdFx0fSxcblxuXHRcdGNvbnZlcnQ6IGZ1bmN0aW9uKHR5cGUpIHtcblx0XHRcdHJldHVybiBuZXcgQ29sb3IodHlwZSwgdGhpcy5fY29udmVydCh0eXBlKSwgdGhpcy5fYWxwaGEpO1xuXHRcdH0sXG5cblx0XHRnZXRUeXBlOiBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiB0aGlzLl90eXBlO1xuXHRcdH0sXG5cblx0XHRzZXRUeXBlOiBmdW5jdGlvbih0eXBlKSB7XG5cdFx0XHR0aGlzLl9jb21wb25lbnRzID0gdGhpcy5fY29udmVydCh0eXBlKTtcblx0XHRcdHRoaXMuX3Byb3BlcnRpZXMgPSB0eXBlc1t0eXBlXTtcblx0XHRcdHRoaXMuX3R5cGUgPSB0eXBlO1xuXHRcdH0sXG5cblx0XHRnZXRDb21wb25lbnRzOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBjb21wb25lbnRzID0gdGhpcy5fY29tcG9uZW50cy5zbGljZSgpO1xuXHRcdFx0aWYgKHRoaXMuX2FscGhhICE9IG51bGwpXG5cdFx0XHRcdGNvbXBvbmVudHMucHVzaCh0aGlzLl9hbHBoYSk7XG5cdFx0XHRyZXR1cm4gY29tcG9uZW50cztcblx0XHR9LFxuXG5cdFx0Z2V0QWxwaGE6IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIHRoaXMuX2FscGhhICE9IG51bGwgPyB0aGlzLl9hbHBoYSA6IDE7XG5cdFx0fSxcblxuXHRcdHNldEFscGhhOiBmdW5jdGlvbihhbHBoYSkge1xuXHRcdFx0dGhpcy5fYWxwaGEgPSBhbHBoYSA9PSBudWxsID8gbnVsbCA6IE1hdGgubWluKE1hdGgubWF4KGFscGhhLCAwKSwgMSk7XG5cdFx0XHR0aGlzLl9jaGFuZ2VkKCk7XG5cdFx0fSxcblxuXHRcdGhhc0FscGhhOiBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiB0aGlzLl9hbHBoYSAhPSBudWxsO1xuXHRcdH0sXG5cblx0XHRlcXVhbHM6IGZ1bmN0aW9uKGNvbG9yKSB7XG5cdFx0XHR2YXIgY29sID0gQmFzZS5pc1BsYWluVmFsdWUoY29sb3IsIHRydWUpXG5cdFx0XHRcdFx0PyBDb2xvci5yZWFkKGFyZ3VtZW50cylcblx0XHRcdFx0XHQ6IGNvbG9yO1xuXHRcdFx0cmV0dXJuIGNvbCA9PT0gdGhpcyB8fCBjb2wgJiYgdGhpcy5fY2xhc3MgPT09IGNvbC5fY2xhc3Ncblx0XHRcdFx0XHQmJiB0aGlzLl90eXBlID09PSBjb2wuX3R5cGVcblx0XHRcdFx0XHQmJiB0aGlzLmdldEFscGhhKCkgPT09IGNvbC5nZXRBbHBoYSgpXG5cdFx0XHRcdFx0JiYgQmFzZS5lcXVhbHModGhpcy5fY29tcG9uZW50cywgY29sLl9jb21wb25lbnRzKVxuXHRcdFx0XHRcdHx8IGZhbHNlO1xuXHRcdH0sXG5cblx0XHR0b1N0cmluZzogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgcHJvcGVydGllcyA9IHRoaXMuX3Byb3BlcnRpZXMsXG5cdFx0XHRcdHBhcnRzID0gW10sXG5cdFx0XHRcdGlzR3JhZGllbnQgPSB0aGlzLl90eXBlID09PSAnZ3JhZGllbnQnLFxuXHRcdFx0XHRmID0gRm9ybWF0dGVyLmluc3RhbmNlO1xuXHRcdFx0Zm9yICh2YXIgaSA9IDAsIGwgPSBwcm9wZXJ0aWVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuXHRcdFx0XHR2YXIgdmFsdWUgPSB0aGlzLl9jb21wb25lbnRzW2ldO1xuXHRcdFx0XHRpZiAodmFsdWUgIT0gbnVsbClcblx0XHRcdFx0XHRwYXJ0cy5wdXNoKHByb3BlcnRpZXNbaV0gKyAnOiAnXG5cdFx0XHRcdFx0XHRcdCsgKGlzR3JhZGllbnQgPyB2YWx1ZSA6IGYubnVtYmVyKHZhbHVlKSkpO1xuXHRcdFx0fVxuXHRcdFx0aWYgKHRoaXMuX2FscGhhICE9IG51bGwpXG5cdFx0XHRcdHBhcnRzLnB1c2goJ2FscGhhOiAnICsgZi5udW1iZXIodGhpcy5fYWxwaGEpKTtcblx0XHRcdHJldHVybiAneyAnICsgcGFydHMuam9pbignLCAnKSArICcgfSc7XG5cdFx0fSxcblxuXHRcdHRvQ1NTOiBmdW5jdGlvbihoZXgpIHtcblx0XHRcdHZhciBjb21wb25lbnRzID0gdGhpcy5fY29udmVydCgncmdiJyksXG5cdFx0XHRcdGFscGhhID0gaGV4IHx8IHRoaXMuX2FscGhhID09IG51bGwgPyAxIDogdGhpcy5fYWxwaGE7XG5cdFx0XHRmdW5jdGlvbiBjb252ZXJ0KHZhbCkge1xuXHRcdFx0XHRyZXR1cm4gTWF0aC5yb3VuZCgodmFsIDwgMCA/IDAgOiB2YWwgPiAxID8gMSA6IHZhbCkgKiAyNTUpO1xuXHRcdFx0fVxuXHRcdFx0Y29tcG9uZW50cyA9IFtcblx0XHRcdFx0Y29udmVydChjb21wb25lbnRzWzBdKSxcblx0XHRcdFx0Y29udmVydChjb21wb25lbnRzWzFdKSxcblx0XHRcdFx0Y29udmVydChjb21wb25lbnRzWzJdKVxuXHRcdFx0XTtcblx0XHRcdGlmIChhbHBoYSA8IDEpXG5cdFx0XHRcdGNvbXBvbmVudHMucHVzaChhbHBoYSA8IDAgPyAwIDogYWxwaGEpO1xuXHRcdFx0cmV0dXJuIGhleFxuXHRcdFx0XHRcdD8gJyMnICsgKCgxIDw8IDI0KSArIChjb21wb25lbnRzWzBdIDw8IDE2KVxuXHRcdFx0XHRcdFx0KyAoY29tcG9uZW50c1sxXSA8PCA4KVxuXHRcdFx0XHRcdFx0KyBjb21wb25lbnRzWzJdKS50b1N0cmluZygxNikuc2xpY2UoMSlcblx0XHRcdFx0XHQ6IChjb21wb25lbnRzLmxlbmd0aCA9PSA0ID8gJ3JnYmEoJyA6ICdyZ2IoJylcblx0XHRcdFx0XHRcdCsgY29tcG9uZW50cy5qb2luKCcsJykgKyAnKSc7XG5cdFx0fSxcblxuXHRcdHRvQ2FudmFzU3R5bGU6IGZ1bmN0aW9uKGN0eCwgbWF0cml4KSB7XG5cdFx0XHRpZiAodGhpcy5fY2FudmFzU3R5bGUpXG5cdFx0XHRcdHJldHVybiB0aGlzLl9jYW52YXNTdHlsZTtcblx0XHRcdGlmICh0aGlzLl90eXBlICE9PSAnZ3JhZGllbnQnKVxuXHRcdFx0XHRyZXR1cm4gdGhpcy5fY2FudmFzU3R5bGUgPSB0aGlzLnRvQ1NTKCk7XG5cdFx0XHR2YXIgY29tcG9uZW50cyA9IHRoaXMuX2NvbXBvbmVudHMsXG5cdFx0XHRcdGdyYWRpZW50ID0gY29tcG9uZW50c1swXSxcblx0XHRcdFx0c3RvcHMgPSBncmFkaWVudC5fc3RvcHMsXG5cdFx0XHRcdG9yaWdpbiA9IGNvbXBvbmVudHNbMV0sXG5cdFx0XHRcdGRlc3RpbmF0aW9uID0gY29tcG9uZW50c1syXSxcblx0XHRcdFx0aGlnaGxpZ2h0ID0gY29tcG9uZW50c1szXSxcblx0XHRcdFx0aW52ZXJzZSA9IG1hdHJpeCAmJiBtYXRyaXguaW52ZXJ0ZWQoKSxcblx0XHRcdFx0Y2FudmFzR3JhZGllbnQ7XG5cdFx0XHRpZiAoaW52ZXJzZSkge1xuXHRcdFx0XHRvcmlnaW4gPSBpbnZlcnNlLl90cmFuc2Zvcm1Qb2ludChvcmlnaW4pO1xuXHRcdFx0XHRkZXN0aW5hdGlvbiA9IGludmVyc2UuX3RyYW5zZm9ybVBvaW50KGRlc3RpbmF0aW9uKTtcblx0XHRcdFx0aWYgKGhpZ2hsaWdodClcblx0XHRcdFx0XHRoaWdobGlnaHQgPSBpbnZlcnNlLl90cmFuc2Zvcm1Qb2ludChoaWdobGlnaHQpO1xuXHRcdFx0fVxuXHRcdFx0aWYgKGdyYWRpZW50Ll9yYWRpYWwpIHtcblx0XHRcdFx0dmFyIHJhZGl1cyA9IGRlc3RpbmF0aW9uLmdldERpc3RhbmNlKG9yaWdpbik7XG5cdFx0XHRcdGlmIChoaWdobGlnaHQpIHtcblx0XHRcdFx0XHR2YXIgdmVjdG9yID0gaGlnaGxpZ2h0LnN1YnRyYWN0KG9yaWdpbik7XG5cdFx0XHRcdFx0aWYgKHZlY3Rvci5nZXRMZW5ndGgoKSA+IHJhZGl1cylcblx0XHRcdFx0XHRcdGhpZ2hsaWdodCA9IG9yaWdpbi5hZGQodmVjdG9yLm5vcm1hbGl6ZShyYWRpdXMgLSAwLjEpKTtcblx0XHRcdFx0fVxuXHRcdFx0XHR2YXIgc3RhcnQgPSBoaWdobGlnaHQgfHwgb3JpZ2luO1xuXHRcdFx0XHRjYW52YXNHcmFkaWVudCA9IGN0eC5jcmVhdGVSYWRpYWxHcmFkaWVudChzdGFydC54LCBzdGFydC55LFxuXHRcdFx0XHRcdFx0MCwgb3JpZ2luLngsIG9yaWdpbi55LCByYWRpdXMpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y2FudmFzR3JhZGllbnQgPSBjdHguY3JlYXRlTGluZWFyR3JhZGllbnQob3JpZ2luLngsIG9yaWdpbi55LFxuXHRcdFx0XHRcdFx0ZGVzdGluYXRpb24ueCwgZGVzdGluYXRpb24ueSk7XG5cdFx0XHR9XG5cdFx0XHRmb3IgKHZhciBpID0gMCwgbCA9IHN0b3BzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuXHRcdFx0XHR2YXIgc3RvcCA9IHN0b3BzW2ldLFxuXHRcdFx0XHRcdG9mZnNldCA9IHN0b3AuX29mZnNldDtcblx0XHRcdFx0Y2FudmFzR3JhZGllbnQuYWRkQ29sb3JTdG9wKFxuXHRcdFx0XHRcdFx0b2Zmc2V0ID09IG51bGwgPyBpIC8gKGwgLSAxKSA6IG9mZnNldCxcblx0XHRcdFx0XHRcdHN0b3AuX2NvbG9yLnRvQ2FudmFzU3R5bGUoKSk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcy5fY2FudmFzU3R5bGUgPSBjYW52YXNHcmFkaWVudDtcblx0XHR9LFxuXG5cdFx0dHJhbnNmb3JtOiBmdW5jdGlvbihtYXRyaXgpIHtcblx0XHRcdGlmICh0aGlzLl90eXBlID09PSAnZ3JhZGllbnQnKSB7XG5cdFx0XHRcdHZhciBjb21wb25lbnRzID0gdGhpcy5fY29tcG9uZW50cztcblx0XHRcdFx0Zm9yICh2YXIgaSA9IDEsIGwgPSBjb21wb25lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuXHRcdFx0XHRcdHZhciBwb2ludCA9IGNvbXBvbmVudHNbaV07XG5cdFx0XHRcdFx0bWF0cml4Ll90cmFuc2Zvcm1Qb2ludChwb2ludCwgcG9pbnQsIHRydWUpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHRoaXMuX2NoYW5nZWQoKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0c3RhdGljczoge1xuXHRcdFx0X3R5cGVzOiB0eXBlcyxcblxuXHRcdFx0cmFuZG9tOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIHJhbmRvbSA9IE1hdGgucmFuZG9tO1xuXHRcdFx0XHRyZXR1cm4gbmV3IENvbG9yKHJhbmRvbSgpLCByYW5kb20oKSwgcmFuZG9tKCkpO1xuXHRcdFx0fVxuXHRcdH1cblx0fSk7XG59LFxubmV3IGZ1bmN0aW9uKCkge1xuXHR2YXIgb3BlcmF0b3JzID0ge1xuXHRcdGFkZDogZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0cmV0dXJuIGEgKyBiO1xuXHRcdH0sXG5cblx0XHRzdWJ0cmFjdDogZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0cmV0dXJuIGEgLSBiO1xuXHRcdH0sXG5cblx0XHRtdWx0aXBseTogZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0cmV0dXJuIGEgKiBiO1xuXHRcdH0sXG5cblx0XHRkaXZpZGU6IGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRcdHJldHVybiBhIC8gYjtcblx0XHR9XG5cdH07XG5cblx0cmV0dXJuIEJhc2UuZWFjaChvcGVyYXRvcnMsIGZ1bmN0aW9uKG9wZXJhdG9yLCBuYW1lKSB7XG5cdFx0dGhpc1tuYW1lXSA9IGZ1bmN0aW9uKGNvbG9yKSB7XG5cdFx0XHRjb2xvciA9IENvbG9yLnJlYWQoYXJndW1lbnRzKTtcblx0XHRcdHZhciB0eXBlID0gdGhpcy5fdHlwZSxcblx0XHRcdFx0Y29tcG9uZW50czEgPSB0aGlzLl9jb21wb25lbnRzLFxuXHRcdFx0XHRjb21wb25lbnRzMiA9IGNvbG9yLl9jb252ZXJ0KHR5cGUpO1xuXHRcdFx0Zm9yICh2YXIgaSA9IDAsIGwgPSBjb21wb25lbnRzMS5sZW5ndGg7IGkgPCBsOyBpKyspXG5cdFx0XHRcdGNvbXBvbmVudHMyW2ldID0gb3BlcmF0b3IoY29tcG9uZW50czFbaV0sIGNvbXBvbmVudHMyW2ldKTtcblx0XHRcdHJldHVybiBuZXcgQ29sb3IodHlwZSwgY29tcG9uZW50czIsXG5cdFx0XHRcdFx0dGhpcy5fYWxwaGEgIT0gbnVsbFxuXHRcdFx0XHRcdFx0XHQ/IG9wZXJhdG9yKHRoaXMuX2FscGhhLCBjb2xvci5nZXRBbHBoYSgpKVxuXHRcdFx0XHRcdFx0XHQ6IG51bGwpO1xuXHRcdH07XG5cdH0sIHtcblx0fSk7XG59KTtcblxudmFyIEdyYWRpZW50ID0gQmFzZS5leHRlbmQoe1xuXHRfY2xhc3M6ICdHcmFkaWVudCcsXG5cblx0aW5pdGlhbGl6ZTogZnVuY3Rpb24gR3JhZGllbnQoc3RvcHMsIHJhZGlhbCkge1xuXHRcdHRoaXMuX2lkID0gVUlELmdldCgpO1xuXHRcdGlmIChzdG9wcyAmJiBCYXNlLmlzUGxhaW5PYmplY3Qoc3RvcHMpKSB7XG5cdFx0XHR0aGlzLnNldChzdG9wcyk7XG5cdFx0XHRzdG9wcyA9IHJhZGlhbCA9IG51bGw7XG5cdFx0fVxuXHRcdGlmICh0aGlzLl9zdG9wcyA9PSBudWxsKSB7XG5cdFx0XHR0aGlzLnNldFN0b3BzKHN0b3BzIHx8IFsnd2hpdGUnLCAnYmxhY2snXSk7XG5cdFx0fVxuXHRcdGlmICh0aGlzLl9yYWRpYWwgPT0gbnVsbCkge1xuXHRcdFx0dGhpcy5zZXRSYWRpYWwodHlwZW9mIHJhZGlhbCA9PT0gJ3N0cmluZycgJiYgcmFkaWFsID09PSAncmFkaWFsJ1xuXHRcdFx0XHRcdHx8IHJhZGlhbCB8fCBmYWxzZSk7XG5cdFx0fVxuXHR9LFxuXG5cdF9zZXJpYWxpemU6IGZ1bmN0aW9uKG9wdGlvbnMsIGRpY3Rpb25hcnkpIHtcblx0XHRyZXR1cm4gZGljdGlvbmFyeS5hZGQodGhpcywgZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gQmFzZS5zZXJpYWxpemUoW3RoaXMuX3N0b3BzLCB0aGlzLl9yYWRpYWxdLFxuXHRcdFx0XHRcdG9wdGlvbnMsIHRydWUsIGRpY3Rpb25hcnkpO1xuXHRcdH0pO1xuXHR9LFxuXG5cdF9jaGFuZ2VkOiBmdW5jdGlvbigpIHtcblx0XHRmb3IgKHZhciBpID0gMCwgbCA9IHRoaXMuX293bmVycyAmJiB0aGlzLl9vd25lcnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG5cdFx0XHR0aGlzLl9vd25lcnNbaV0uX2NoYW5nZWQoKTtcblx0XHR9XG5cdH0sXG5cblx0X2FkZE93bmVyOiBmdW5jdGlvbihjb2xvcikge1xuXHRcdGlmICghdGhpcy5fb3duZXJzKVxuXHRcdFx0dGhpcy5fb3duZXJzID0gW107XG5cdFx0dGhpcy5fb3duZXJzLnB1c2goY29sb3IpO1xuXHR9LFxuXG5cdF9yZW1vdmVPd25lcjogZnVuY3Rpb24oY29sb3IpIHtcblx0XHR2YXIgaW5kZXggPSB0aGlzLl9vd25lcnMgPyB0aGlzLl9vd25lcnMuaW5kZXhPZihjb2xvcikgOiAtMTtcblx0XHRpZiAoaW5kZXggIT0gLTEpIHtcblx0XHRcdHRoaXMuX293bmVycy5zcGxpY2UoaW5kZXgsIDEpO1xuXHRcdFx0aWYgKCF0aGlzLl9vd25lcnMubGVuZ3RoKVxuXHRcdFx0XHR0aGlzLl9vd25lcnMgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgc3RvcHMgPSBbXTtcblx0XHRmb3IgKHZhciBpID0gMCwgbCA9IHRoaXMuX3N0b3BzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuXHRcdFx0c3RvcHNbaV0gPSB0aGlzLl9zdG9wc1tpXS5jbG9uZSgpO1xuXHRcdH1cblx0XHRyZXR1cm4gbmV3IEdyYWRpZW50KHN0b3BzLCB0aGlzLl9yYWRpYWwpO1xuXHR9LFxuXG5cdGdldFN0b3BzOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5fc3RvcHM7XG5cdH0sXG5cblx0c2V0U3RvcHM6IGZ1bmN0aW9uKHN0b3BzKSB7XG5cdFx0aWYgKHN0b3BzLmxlbmd0aCA8IDIpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcihcblx0XHRcdFx0XHQnR3JhZGllbnQgc3RvcCBsaXN0IG5lZWRzIHRvIGNvbnRhaW4gYXQgbGVhc3QgdHdvIHN0b3BzLicpO1xuXHRcdH1cblx0XHR2YXIgX3N0b3BzID0gdGhpcy5fc3RvcHM7XG5cdFx0aWYgKF9zdG9wcykge1xuXHRcdFx0Zm9yICh2YXIgaSA9IDAsIGwgPSBfc3RvcHMubGVuZ3RoOyBpIDwgbDsgaSsrKVxuXHRcdFx0XHRfc3RvcHNbaV0uX293bmVyID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRfc3RvcHMgPSB0aGlzLl9zdG9wcyA9IEdyYWRpZW50U3RvcC5yZWFkTGlzdChzdG9wcywgMCwgeyBjbG9uZTogdHJ1ZSB9KTtcblx0XHRmb3IgKHZhciBpID0gMCwgbCA9IF9zdG9wcy5sZW5ndGg7IGkgPCBsOyBpKyspXG5cdFx0XHRfc3RvcHNbaV0uX293bmVyID0gdGhpcztcblx0XHR0aGlzLl9jaGFuZ2VkKCk7XG5cdH0sXG5cblx0Z2V0UmFkaWFsOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5fcmFkaWFsO1xuXHR9LFxuXG5cdHNldFJhZGlhbDogZnVuY3Rpb24ocmFkaWFsKSB7XG5cdFx0dGhpcy5fcmFkaWFsID0gcmFkaWFsO1xuXHRcdHRoaXMuX2NoYW5nZWQoKTtcblx0fSxcblxuXHRlcXVhbHM6IGZ1bmN0aW9uKGdyYWRpZW50KSB7XG5cdFx0aWYgKGdyYWRpZW50ID09PSB0aGlzKVxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0aWYgKGdyYWRpZW50ICYmIHRoaXMuX2NsYXNzID09PSBncmFkaWVudC5fY2xhc3MpIHtcblx0XHRcdHZhciBzdG9wczEgPSB0aGlzLl9zdG9wcyxcblx0XHRcdFx0c3RvcHMyID0gZ3JhZGllbnQuX3N0b3BzLFxuXHRcdFx0XHRsZW5ndGggPSBzdG9wczEubGVuZ3RoO1xuXHRcdFx0aWYgKGxlbmd0aCA9PT0gc3RvcHMyLmxlbmd0aCkge1xuXHRcdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdFx0aWYgKCFzdG9wczFbaV0uZXF1YWxzKHN0b3BzMltpXSkpXG5cdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufSk7XG5cbnZhciBHcmFkaWVudFN0b3AgPSBCYXNlLmV4dGVuZCh7XG5cdF9jbGFzczogJ0dyYWRpZW50U3RvcCcsXG5cblx0aW5pdGlhbGl6ZTogZnVuY3Rpb24gR3JhZGllbnRTdG9wKGFyZzAsIGFyZzEpIHtcblx0XHR2YXIgY29sb3IgPSBhcmcwLFxuXHRcdFx0b2Zmc2V0ID0gYXJnMTtcblx0XHRpZiAodHlwZW9mIGFyZzAgPT09ICdvYmplY3QnICYmIGFyZzEgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0aWYgKEFycmF5LmlzQXJyYXkoYXJnMCkgJiYgdHlwZW9mIGFyZzBbMF0gIT09ICdudW1iZXInKSB7XG5cdFx0XHRcdGNvbG9yID0gYXJnMFswXTtcblx0XHRcdFx0b2Zmc2V0ID0gYXJnMFsxXTtcblx0XHRcdH0gZWxzZSBpZiAoJ2NvbG9yJyBpbiBhcmcwIHx8ICdvZmZzZXQnIGluIGFyZzBcblx0XHRcdFx0XHR8fCAncmFtcFBvaW50JyBpbiBhcmcwKSB7XG5cdFx0XHRcdGNvbG9yID0gYXJnMC5jb2xvcjtcblx0XHRcdFx0b2Zmc2V0ID0gYXJnMC5vZmZzZXQgfHwgYXJnMC5yYW1wUG9pbnQgfHwgMDtcblx0XHRcdH1cblx0XHR9XG5cdFx0dGhpcy5zZXRDb2xvcihjb2xvcik7XG5cdFx0dGhpcy5zZXRPZmZzZXQob2Zmc2V0KTtcblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIG5ldyBHcmFkaWVudFN0b3AodGhpcy5fY29sb3IuY2xvbmUoKSwgdGhpcy5fb2Zmc2V0KTtcblx0fSxcblxuXHRfc2VyaWFsaXplOiBmdW5jdGlvbihvcHRpb25zLCBkaWN0aW9uYXJ5KSB7XG5cdFx0dmFyIGNvbG9yID0gdGhpcy5fY29sb3IsXG5cdFx0XHRvZmZzZXQgPSB0aGlzLl9vZmZzZXQ7XG5cdFx0cmV0dXJuIEJhc2Uuc2VyaWFsaXplKG9mZnNldCA9PSBudWxsID8gW2NvbG9yXSA6IFtjb2xvciwgb2Zmc2V0XSxcblx0XHRcdFx0b3B0aW9ucywgdHJ1ZSwgZGljdGlvbmFyeSk7XG5cdH0sXG5cblx0X2NoYW5nZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdGlmICh0aGlzLl9vd25lcilcblx0XHRcdHRoaXMuX293bmVyLl9jaGFuZ2VkKDEyOSk7XG5cdH0sXG5cblx0Z2V0T2Zmc2V0OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5fb2Zmc2V0O1xuXHR9LFxuXG5cdHNldE9mZnNldDogZnVuY3Rpb24ob2Zmc2V0KSB7XG5cdFx0dGhpcy5fb2Zmc2V0ID0gb2Zmc2V0O1xuXHRcdHRoaXMuX2NoYW5nZWQoKTtcblx0fSxcblxuXHRnZXRSYW1wUG9pbnQ6ICcjZ2V0T2Zmc2V0Jyxcblx0c2V0UmFtcFBvaW50OiAnI3NldE9mZnNldCcsXG5cblx0Z2V0Q29sb3I6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLl9jb2xvcjtcblx0fSxcblxuXHRzZXRDb2xvcjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGNvbG9yID0gQ29sb3IucmVhZChhcmd1bWVudHMsIDAsIHsgY2xvbmU6IHRydWUgfSk7XG5cdFx0aWYgKGNvbG9yKVxuXHRcdFx0Y29sb3IuX293bmVyID0gdGhpcztcblx0XHR0aGlzLl9jb2xvciA9IGNvbG9yO1xuXHRcdHRoaXMuX2NoYW5nZWQoKTtcblx0fSxcblxuXHRlcXVhbHM6IGZ1bmN0aW9uKHN0b3ApIHtcblx0XHRyZXR1cm4gc3RvcCA9PT0gdGhpcyB8fCBzdG9wICYmIHRoaXMuX2NsYXNzID09PSBzdG9wLl9jbGFzc1xuXHRcdFx0XHQmJiB0aGlzLl9jb2xvci5lcXVhbHMoc3RvcC5fY29sb3IpXG5cdFx0XHRcdCYmIHRoaXMuX29mZnNldCA9PSBzdG9wLl9vZmZzZXRcblx0XHRcdFx0fHwgZmFsc2U7XG5cdH1cbn0pO1xuXG52YXIgU3R5bGUgPSBCYXNlLmV4dGVuZChuZXcgZnVuY3Rpb24oKSB7XG5cdHZhciBpdGVtRGVmYXVsdHMgPSB7XG5cdFx0ZmlsbENvbG9yOiBudWxsLFxuXHRcdGZpbGxSdWxlOiAnbm9uemVybycsXG5cdFx0c3Ryb2tlQ29sb3I6IG51bGwsXG5cdFx0c3Ryb2tlV2lkdGg6IDEsXG5cdFx0c3Ryb2tlQ2FwOiAnYnV0dCcsXG5cdFx0c3Ryb2tlSm9pbjogJ21pdGVyJyxcblx0XHRzdHJva2VTY2FsaW5nOiB0cnVlLFxuXHRcdG1pdGVyTGltaXQ6IDEwLFxuXHRcdGRhc2hPZmZzZXQ6IDAsXG5cdFx0ZGFzaEFycmF5OiBbXSxcblx0XHRzaGFkb3dDb2xvcjogbnVsbCxcblx0XHRzaGFkb3dCbHVyOiAwLFxuXHRcdHNoYWRvd09mZnNldDogbmV3IFBvaW50KCksXG5cdFx0c2VsZWN0ZWRDb2xvcjogbnVsbFxuXHR9LFxuXHRncm91cERlZmF1bHRzID0gQmFzZS5zZXQoe30sIGl0ZW1EZWZhdWx0cywge1xuXHRcdGZvbnRGYW1pbHk6ICdzYW5zLXNlcmlmJyxcblx0XHRmb250V2VpZ2h0OiAnbm9ybWFsJyxcblx0XHRmb250U2l6ZTogMTIsXG5cdFx0bGVhZGluZzogbnVsbCxcblx0XHRqdXN0aWZpY2F0aW9uOiAnbGVmdCdcblx0fSksXG5cdHRleHREZWZhdWx0cyA9IEJhc2Uuc2V0KHt9LCBncm91cERlZmF1bHRzLCB7XG5cdFx0ZmlsbENvbG9yOiBuZXcgQ29sb3IoKVxuXHR9KSxcblx0ZmxhZ3MgPSB7XG5cdFx0c3Ryb2tlV2lkdGg6IDE5Myxcblx0XHRzdHJva2VDYXA6IDE5Myxcblx0XHRzdHJva2VKb2luOiAxOTMsXG5cdFx0c3Ryb2tlU2NhbGluZzogMjAxLFxuXHRcdG1pdGVyTGltaXQ6IDE5Myxcblx0XHRmb250RmFtaWx5OiA5LFxuXHRcdGZvbnRXZWlnaHQ6IDksXG5cdFx0Zm9udFNpemU6IDksXG5cdFx0Zm9udDogOSxcblx0XHRsZWFkaW5nOiA5LFxuXHRcdGp1c3RpZmljYXRpb246IDlcblx0fSxcblx0aXRlbSA9IHtcblx0XHRiZWFuczogdHJ1ZVxuXHR9LFxuXHRmaWVsZHMgPSB7XG5cdFx0X2NsYXNzOiAnU3R5bGUnLFxuXHRcdGJlYW5zOiB0cnVlLFxuXG5cdFx0aW5pdGlhbGl6ZTogZnVuY3Rpb24gU3R5bGUoc3R5bGUsIF9vd25lciwgX3Byb2plY3QpIHtcblx0XHRcdHRoaXMuX3ZhbHVlcyA9IHt9O1xuXHRcdFx0dGhpcy5fb3duZXIgPSBfb3duZXI7XG5cdFx0XHR0aGlzLl9wcm9qZWN0ID0gX293bmVyICYmIF9vd25lci5fcHJvamVjdCB8fCBfcHJvamVjdFxuXHRcdFx0XHRcdHx8IHBhcGVyLnByb2plY3Q7XG5cdFx0XHR0aGlzLl9kZWZhdWx0cyA9ICFfb3duZXIgfHwgX293bmVyIGluc3RhbmNlb2YgR3JvdXAgPyBncm91cERlZmF1bHRzXG5cdFx0XHRcdFx0OiBfb3duZXIgaW5zdGFuY2VvZiBUZXh0SXRlbSA/IHRleHREZWZhdWx0c1xuXHRcdFx0XHRcdDogaXRlbURlZmF1bHRzO1xuXHRcdFx0aWYgKHN0eWxlKVxuXHRcdFx0XHR0aGlzLnNldChzdHlsZSk7XG5cdFx0fVxuXHR9O1xuXG5cdEJhc2UuZWFjaChncm91cERlZmF1bHRzLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG5cdFx0dmFyIGlzQ29sb3IgPSAvQ29sb3IkLy50ZXN0KGtleSksXG5cdFx0XHRpc1BvaW50ID0ga2V5ID09PSAnc2hhZG93T2Zmc2V0Jyxcblx0XHRcdHBhcnQgPSBCYXNlLmNhcGl0YWxpemUoa2V5KSxcblx0XHRcdGZsYWcgPSBmbGFnc1trZXldLFxuXHRcdFx0c2V0ID0gJ3NldCcgKyBwYXJ0LFxuXHRcdFx0Z2V0ID0gJ2dldCcgKyBwYXJ0O1xuXG5cdFx0ZmllbGRzW3NldF0gPSBmdW5jdGlvbih2YWx1ZSkge1xuXHRcdFx0dmFyIG93bmVyID0gdGhpcy5fb3duZXIsXG5cdFx0XHRcdGNoaWxkcmVuID0gb3duZXIgJiYgb3duZXIuX2NoaWxkcmVuLFxuXHRcdFx0XHRhcHBseVRvQ2hpbGRyZW4gPSBjaGlsZHJlbiAmJiBjaGlsZHJlbi5sZW5ndGggPiAwXG5cdFx0XHRcdFx0JiYgIShvd25lciBpbnN0YW5jZW9mIENvbXBvdW5kUGF0aCk7XG5cdFx0XHRpZiAoYXBwbHlUb0NoaWxkcmVuKSB7XG5cdFx0XHRcdGZvciAodmFyIGkgPSAwLCBsID0gY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSsrKVxuXHRcdFx0XHRcdGNoaWxkcmVuW2ldLl9zdHlsZVtzZXRdKHZhbHVlKTtcblx0XHRcdH1cblx0XHRcdGlmICgoa2V5ID09PSAnc2VsZWN0ZWRDb2xvcicgfHwgIWFwcGx5VG9DaGlsZHJlbilcblx0XHRcdFx0XHQmJiBrZXkgaW4gdGhpcy5fZGVmYXVsdHMpIHtcblx0XHRcdFx0dmFyIG9sZCA9IHRoaXMuX3ZhbHVlc1trZXldO1xuXHRcdFx0XHRpZiAob2xkICE9PSB2YWx1ZSkge1xuXHRcdFx0XHRcdGlmIChpc0NvbG9yKSB7XG5cdFx0XHRcdFx0XHRpZiAob2xkICYmIG9sZC5fb3duZXIgIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdFx0XHRvbGQuX293bmVyID0gdW5kZWZpbmVkO1xuXHRcdFx0XHRcdFx0XHRvbGQuX2NhbnZhc1N0eWxlID0gbnVsbDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGlmICh2YWx1ZSAmJiB2YWx1ZS5jb25zdHJ1Y3RvciA9PT0gQ29sb3IpIHtcblx0XHRcdFx0XHRcdFx0aWYgKHZhbHVlLl9vd25lcilcblx0XHRcdFx0XHRcdFx0XHR2YWx1ZSA9IHZhbHVlLmNsb25lKCk7XG5cdFx0XHRcdFx0XHRcdHZhbHVlLl9vd25lciA9IG93bmVyO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR0aGlzLl92YWx1ZXNba2V5XSA9IHZhbHVlO1xuXHRcdFx0XHRcdGlmIChvd25lcilcblx0XHRcdFx0XHRcdG93bmVyLl9jaGFuZ2VkKGZsYWcgfHwgMTI5KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cblx0XHRmaWVsZHNbZ2V0XSA9IGZ1bmN0aW9uKF9kb250TWVyZ2UpIHtcblx0XHRcdHZhciBvd25lciA9IHRoaXMuX293bmVyLFxuXHRcdFx0XHRjaGlsZHJlbiA9IG93bmVyICYmIG93bmVyLl9jaGlsZHJlbixcblx0XHRcdFx0dmFsdWU7XG5cdFx0XHRpZiAoa2V5IGluIHRoaXMuX2RlZmF1bHRzICYmICghY2hpbGRyZW4gfHwgIWNoaWxkcmVuLmxlbmd0aFxuXHRcdFx0XHRcdHx8IF9kb250TWVyZ2UgfHwgb3duZXIgaW5zdGFuY2VvZiBDb21wb3VuZFBhdGgpKSB7XG5cdFx0XHRcdHZhciB2YWx1ZSA9IHRoaXMuX3ZhbHVlc1trZXldO1xuXHRcdFx0XHRpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdHZhbHVlID0gdGhpcy5fZGVmYXVsdHNba2V5XTtcblx0XHRcdFx0XHRpZiAodmFsdWUgJiYgdmFsdWUuY2xvbmUpXG5cdFx0XHRcdFx0XHR2YWx1ZSA9IHZhbHVlLmNsb25lKCk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dmFyIGN0b3IgPSBpc0NvbG9yID8gQ29sb3IgOiBpc1BvaW50ID8gUG9pbnQgOiBudWxsO1xuXHRcdFx0XHRcdGlmIChjdG9yICYmICEodmFsdWUgJiYgdmFsdWUuY29uc3RydWN0b3IgPT09IGN0b3IpKSB7XG5cdFx0XHRcdFx0XHR0aGlzLl92YWx1ZXNba2V5XSA9IHZhbHVlID0gY3Rvci5yZWFkKFt2YWx1ZV0sIDAsXG5cdFx0XHRcdFx0XHRcdFx0eyByZWFkTnVsbDogdHJ1ZSwgY2xvbmU6IHRydWUgfSk7XG5cdFx0XHRcdFx0XHRpZiAodmFsdWUgJiYgaXNDb2xvcilcblx0XHRcdFx0XHRcdFx0dmFsdWUuX293bmVyID0gb3duZXI7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2UgaWYgKGNoaWxkcmVuKSB7XG5cdFx0XHRcdGZvciAodmFyIGkgPSAwLCBsID0gY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG5cdFx0XHRcdFx0dmFyIGNoaWxkVmFsdWUgPSBjaGlsZHJlbltpXS5fc3R5bGVbZ2V0XSgpO1xuXHRcdFx0XHRcdGlmICghaSkge1xuXHRcdFx0XHRcdFx0dmFsdWUgPSBjaGlsZFZhbHVlO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAoIUJhc2UuZXF1YWxzKHZhbHVlLCBjaGlsZFZhbHVlKSkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHVuZGVmaW5lZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHR9O1xuXG5cdFx0aXRlbVtnZXRdID0gZnVuY3Rpb24oX2RvbnRNZXJnZSkge1xuXHRcdFx0cmV0dXJuIHRoaXMuX3N0eWxlW2dldF0oX2RvbnRNZXJnZSk7XG5cdFx0fTtcblxuXHRcdGl0ZW1bc2V0XSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG5cdFx0XHR0aGlzLl9zdHlsZVtzZXRdKHZhbHVlKTtcblx0XHR9O1xuXHR9KTtcblxuXHRCYXNlLmVhY2goe1xuXHRcdEZvbnQ6ICdGb250RmFtaWx5Jyxcblx0XHRXaW5kaW5nUnVsZTogJ0ZpbGxSdWxlJ1xuXHR9LCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG5cdFx0dmFyIGdldCA9ICdnZXQnICsga2V5LFxuXHRcdFx0c2V0ID0gJ3NldCcgKyBrZXk7XG5cdFx0ZmllbGRzW2dldF0gPSBpdGVtW2dldF0gPSAnI2dldCcgKyB2YWx1ZTtcblx0XHRmaWVsZHNbc2V0XSA9IGl0ZW1bc2V0XSA9ICcjc2V0JyArIHZhbHVlO1xuXHR9KTtcblxuXHRJdGVtLmluamVjdChpdGVtKTtcblx0cmV0dXJuIGZpZWxkcztcbn0sIHtcblx0c2V0OiBmdW5jdGlvbihzdHlsZSkge1xuXHRcdHZhciBpc1N0eWxlID0gc3R5bGUgaW5zdGFuY2VvZiBTdHlsZSxcblx0XHRcdHZhbHVlcyA9IGlzU3R5bGUgPyBzdHlsZS5fdmFsdWVzIDogc3R5bGU7XG5cdFx0aWYgKHZhbHVlcykge1xuXHRcdFx0Zm9yICh2YXIga2V5IGluIHZhbHVlcykge1xuXHRcdFx0XHRpZiAoa2V5IGluIHRoaXMuX2RlZmF1bHRzKSB7XG5cdFx0XHRcdFx0dmFyIHZhbHVlID0gdmFsdWVzW2tleV07XG5cdFx0XHRcdFx0dGhpc1trZXldID0gdmFsdWUgJiYgaXNTdHlsZSAmJiB2YWx1ZS5jbG9uZVxuXHRcdFx0XHRcdFx0XHQ/IHZhbHVlLmNsb25lKCkgOiB2YWx1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHRlcXVhbHM6IGZ1bmN0aW9uKHN0eWxlKSB7XG5cdFx0ZnVuY3Rpb24gY29tcGFyZShzdHlsZTEsIHN0eWxlMiwgc2Vjb25kYXJ5KSB7XG5cdFx0XHR2YXIgdmFsdWVzMSA9IHN0eWxlMS5fdmFsdWVzLFxuXHRcdFx0XHR2YWx1ZXMyID0gc3R5bGUyLl92YWx1ZXMsXG5cdFx0XHRcdGRlZmF1bHRzMiA9IHN0eWxlMi5fZGVmYXVsdHM7XG5cdFx0XHRmb3IgKHZhciBrZXkgaW4gdmFsdWVzMSkge1xuXHRcdFx0XHR2YXIgdmFsdWUxID0gdmFsdWVzMVtrZXldLFxuXHRcdFx0XHRcdHZhbHVlMiA9IHZhbHVlczJba2V5XTtcblx0XHRcdFx0aWYgKCEoc2Vjb25kYXJ5ICYmIGtleSBpbiB2YWx1ZXMyKSAmJiAhQmFzZS5lcXVhbHModmFsdWUxLFxuXHRcdFx0XHRcdFx0dmFsdWUyID09PSB1bmRlZmluZWQgPyBkZWZhdWx0czJba2V5XSA6IHZhbHVlMikpXG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHN0eWxlID09PSB0aGlzIHx8IHN0eWxlICYmIHRoaXMuX2NsYXNzID09PSBzdHlsZS5fY2xhc3Ncblx0XHRcdFx0JiYgY29tcGFyZSh0aGlzLCBzdHlsZSlcblx0XHRcdFx0JiYgY29tcGFyZShzdHlsZSwgdGhpcywgdHJ1ZSlcblx0XHRcdFx0fHwgZmFsc2U7XG5cdH0sXG5cblx0X2Rpc3Bvc2U6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBjb2xvcjtcblx0XHRjb2xvciA9IHRoaXMuZ2V0RmlsbENvbG9yKCk7XG5cdFx0aWYgKGNvbG9yKSBjb2xvci5fY2FudmFzU3R5bGUgPSBudWxsO1xuXHRcdGNvbG9yID0gdGhpcy5nZXRTdHJva2VDb2xvcigpO1xuXHRcdGlmIChjb2xvcikgY29sb3IuX2NhbnZhc1N0eWxlID0gbnVsbDtcblx0XHRjb2xvciA9IHRoaXMuZ2V0U2hhZG93Q29sb3IoKTtcblx0XHRpZiAoY29sb3IpIGNvbG9yLl9jYW52YXNTdHlsZSA9IG51bGw7XG5cdH0sXG5cblx0aGFzRmlsbDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGNvbG9yID0gdGhpcy5nZXRGaWxsQ29sb3IoKTtcblx0XHRyZXR1cm4gISFjb2xvciAmJiBjb2xvci5hbHBoYSA+IDA7XG5cdH0sXG5cblx0aGFzU3Ryb2tlOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgY29sb3IgPSB0aGlzLmdldFN0cm9rZUNvbG9yKCk7XG5cdFx0cmV0dXJuICEhY29sb3IgJiYgY29sb3IuYWxwaGEgPiAwICYmIHRoaXMuZ2V0U3Ryb2tlV2lkdGgoKSA+IDA7XG5cdH0sXG5cblx0aGFzU2hhZG93OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgY29sb3IgPSB0aGlzLmdldFNoYWRvd0NvbG9yKCk7XG5cdFx0cmV0dXJuICEhY29sb3IgJiYgY29sb3IuYWxwaGEgPiAwICYmICh0aGlzLmdldFNoYWRvd0JsdXIoKSA+IDBcblx0XHRcdFx0fHwgIXRoaXMuZ2V0U2hhZG93T2Zmc2V0KCkuaXNaZXJvKCkpO1xuXHR9LFxuXG5cdGdldFZpZXc6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLl9wcm9qZWN0Ll92aWV3O1xuXHR9LFxuXG5cdGdldEZvbnRTdHlsZTogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGZvbnRTaXplID0gdGhpcy5nZXRGb250U2l6ZSgpO1xuXHRcdHJldHVybiB0aGlzLmdldEZvbnRXZWlnaHQoKVxuXHRcdFx0XHQrICcgJyArIGZvbnRTaXplICsgKC9bYS16XS9pLnRlc3QoZm9udFNpemUgKyAnJykgPyAnICcgOiAncHggJylcblx0XHRcdFx0KyB0aGlzLmdldEZvbnRGYW1pbHkoKTtcblx0fSxcblxuXHRnZXRGb250OiAnI2dldEZvbnRGYW1pbHknLFxuXHRzZXRGb250OiAnI3NldEZvbnRGYW1pbHknLFxuXG5cdGdldExlYWRpbmc6IGZ1bmN0aW9uIGdldExlYWRpbmcoKSB7XG5cdFx0dmFyIGxlYWRpbmcgPSBnZXRMZWFkaW5nLmJhc2UuY2FsbCh0aGlzKSxcblx0XHRcdGZvbnRTaXplID0gdGhpcy5nZXRGb250U2l6ZSgpO1xuXHRcdGlmICgvcHR8ZW18JXxweC8udGVzdChmb250U2l6ZSkpXG5cdFx0XHRmb250U2l6ZSA9IHRoaXMuZ2V0VmlldygpLmdldFBpeGVsU2l6ZShmb250U2l6ZSk7XG5cdFx0cmV0dXJuIGxlYWRpbmcgIT0gbnVsbCA/IGxlYWRpbmcgOiBmb250U2l6ZSAqIDEuMjtcblx0fVxuXG59KTtcblxudmFyIERvbUVsZW1lbnQgPSBuZXcgZnVuY3Rpb24oKSB7XG5cdGZ1bmN0aW9uIGhhbmRsZVByZWZpeChlbCwgbmFtZSwgc2V0LCB2YWx1ZSkge1xuXHRcdHZhciBwcmVmaXhlcyA9IFsnJywgJ3dlYmtpdCcsICdtb3onLCAnTW96JywgJ21zJywgJ28nXSxcblx0XHRcdHN1ZmZpeCA9IG5hbWVbMF0udG9VcHBlckNhc2UoKSArIG5hbWUuc3Vic3RyaW5nKDEpO1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgNjsgaSsrKSB7XG5cdFx0XHR2YXIgcHJlZml4ID0gcHJlZml4ZXNbaV0sXG5cdFx0XHRcdGtleSA9IHByZWZpeCA/IHByZWZpeCArIHN1ZmZpeCA6IG5hbWU7XG5cdFx0XHRpZiAoa2V5IGluIGVsKSB7XG5cdFx0XHRcdGlmIChzZXQpIHtcblx0XHRcdFx0XHRlbFtrZXldID0gdmFsdWU7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cmV0dXJuIGVsW2tleV07XG5cdFx0XHRcdH1cblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHtcblx0XHRnZXRTdHlsZXM6IGZ1bmN0aW9uKGVsKSB7XG5cdFx0XHR2YXIgZG9jID0gZWwgJiYgZWwubm9kZVR5cGUgIT09IDkgPyBlbC5vd25lckRvY3VtZW50IDogZWwsXG5cdFx0XHRcdHZpZXcgPSBkb2MgJiYgZG9jLmRlZmF1bHRWaWV3O1xuXHRcdFx0cmV0dXJuIHZpZXcgJiYgdmlldy5nZXRDb21wdXRlZFN0eWxlKGVsLCAnJyk7XG5cdFx0fSxcblxuXHRcdGdldEJvdW5kczogZnVuY3Rpb24oZWwsIHZpZXdwb3J0KSB7XG5cdFx0XHR2YXIgZG9jID0gZWwub3duZXJEb2N1bWVudCxcblx0XHRcdFx0Ym9keSA9IGRvYy5ib2R5LFxuXHRcdFx0XHRodG1sID0gZG9jLmRvY3VtZW50RWxlbWVudCxcblx0XHRcdFx0cmVjdDtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdHJlY3QgPSBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblx0XHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdFx0cmVjdCA9IHsgbGVmdDogMCwgdG9wOiAwLCB3aWR0aDogMCwgaGVpZ2h0OiAwIH07XG5cdFx0XHR9XG5cdFx0XHR2YXIgeCA9IHJlY3QubGVmdCAtIChodG1sLmNsaWVudExlZnQgfHwgYm9keS5jbGllbnRMZWZ0IHx8IDApLFxuXHRcdFx0XHR5ID0gcmVjdC50b3AgLSAoaHRtbC5jbGllbnRUb3AgfHwgYm9keS5jbGllbnRUb3AgfHwgMCk7XG5cdFx0XHRpZiAoIXZpZXdwb3J0KSB7XG5cdFx0XHRcdHZhciB2aWV3ID0gZG9jLmRlZmF1bHRWaWV3O1xuXHRcdFx0XHR4ICs9IHZpZXcucGFnZVhPZmZzZXQgfHwgaHRtbC5zY3JvbGxMZWZ0IHx8IGJvZHkuc2Nyb2xsTGVmdDtcblx0XHRcdFx0eSArPSB2aWV3LnBhZ2VZT2Zmc2V0IHx8IGh0bWwuc2Nyb2xsVG9wIHx8IGJvZHkuc2Nyb2xsVG9wO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG5ldyBSZWN0YW5nbGUoeCwgeSwgcmVjdC53aWR0aCwgcmVjdC5oZWlnaHQpO1xuXHRcdH0sXG5cblx0XHRnZXRWaWV3cG9ydEJvdW5kczogZnVuY3Rpb24oZWwpIHtcblx0XHRcdHZhciBkb2MgPSBlbC5vd25lckRvY3VtZW50LFxuXHRcdFx0XHR2aWV3ID0gZG9jLmRlZmF1bHRWaWV3LFxuXHRcdFx0XHRodG1sID0gZG9jLmRvY3VtZW50RWxlbWVudDtcblx0XHRcdHJldHVybiBuZXcgUmVjdGFuZ2xlKDAsIDAsXG5cdFx0XHRcdHZpZXcuaW5uZXJXaWR0aCB8fCBodG1sLmNsaWVudFdpZHRoLFxuXHRcdFx0XHR2aWV3LmlubmVySGVpZ2h0IHx8IGh0bWwuY2xpZW50SGVpZ2h0XG5cdFx0XHQpO1xuXHRcdH0sXG5cblx0XHRnZXRPZmZzZXQ6IGZ1bmN0aW9uKGVsLCB2aWV3cG9ydCkge1xuXHRcdFx0cmV0dXJuIERvbUVsZW1lbnQuZ2V0Qm91bmRzKGVsLCB2aWV3cG9ydCkuZ2V0UG9pbnQoKTtcblx0XHR9LFxuXG5cdFx0Z2V0U2l6ZTogZnVuY3Rpb24oZWwpIHtcblx0XHRcdHJldHVybiBEb21FbGVtZW50LmdldEJvdW5kcyhlbCwgdHJ1ZSkuZ2V0U2l6ZSgpO1xuXHRcdH0sXG5cblx0XHRpc0ludmlzaWJsZTogZnVuY3Rpb24oZWwpIHtcblx0XHRcdHJldHVybiBEb21FbGVtZW50LmdldFNpemUoZWwpLmVxdWFscyhuZXcgU2l6ZSgwLCAwKSk7XG5cdFx0fSxcblxuXHRcdGlzSW5WaWV3OiBmdW5jdGlvbihlbCkge1xuXHRcdFx0cmV0dXJuICFEb21FbGVtZW50LmlzSW52aXNpYmxlKGVsKVxuXHRcdFx0XHRcdCYmIERvbUVsZW1lbnQuZ2V0Vmlld3BvcnRCb3VuZHMoZWwpLmludGVyc2VjdHMoXG5cdFx0XHRcdFx0XHREb21FbGVtZW50LmdldEJvdW5kcyhlbCwgdHJ1ZSkpO1xuXHRcdH0sXG5cblx0XHRpc0luc2VydGVkOiBmdW5jdGlvbihlbCkge1xuXHRcdFx0cmV0dXJuIGRvY3VtZW50LmJvZHkuY29udGFpbnMoZWwpO1xuXHRcdH0sXG5cblx0XHRnZXRQcmVmaXhlZDogZnVuY3Rpb24oZWwsIG5hbWUpIHtcblx0XHRcdHJldHVybiBlbCAmJiBoYW5kbGVQcmVmaXgoZWwsIG5hbWUpO1xuXHRcdH0sXG5cblx0XHRzZXRQcmVmaXhlZDogZnVuY3Rpb24oZWwsIG5hbWUsIHZhbHVlKSB7XG5cdFx0XHRpZiAodHlwZW9mIG5hbWUgPT09ICdvYmplY3QnKSB7XG5cdFx0XHRcdGZvciAodmFyIGtleSBpbiBuYW1lKVxuXHRcdFx0XHRcdGhhbmRsZVByZWZpeChlbCwga2V5LCB0cnVlLCBuYW1lW2tleV0pO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aGFuZGxlUHJlZml4KGVsLCBuYW1lLCB0cnVlLCB2YWx1ZSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xufTtcblxudmFyIERvbUV2ZW50ID0ge1xuXHRhZGQ6IGZ1bmN0aW9uKGVsLCBldmVudHMpIHtcblx0XHRpZiAoZWwpIHtcblx0XHRcdGZvciAodmFyIHR5cGUgaW4gZXZlbnRzKSB7XG5cdFx0XHRcdHZhciBmdW5jID0gZXZlbnRzW3R5cGVdLFxuXHRcdFx0XHRcdHBhcnRzID0gdHlwZS5zcGxpdCgvW1xccyxdKy9nKTtcblx0XHRcdFx0Zm9yICh2YXIgaSA9IDAsIGwgPSBwYXJ0cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcblx0XHRcdFx0XHR2YXIgbmFtZSA9IHBhcnRzW2ldO1xuXHRcdFx0XHRcdHZhciBvcHRpb25zID0gKFxuXHRcdFx0XHRcdFx0ZWwgPT09IGRvY3VtZW50XG5cdFx0XHRcdFx0XHQmJiAobmFtZSA9PT0gJ3RvdWNoc3RhcnQnIHx8IG5hbWUgPT09ICd0b3VjaG1vdmUnKVxuXHRcdFx0XHRcdCkgPyB7IHBhc3NpdmU6IGZhbHNlIH0gOiBmYWxzZTtcblx0XHRcdFx0XHRlbC5hZGRFdmVudExpc3RlbmVyKG5hbWUsIGZ1bmMsIG9wdGlvbnMpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdHJlbW92ZTogZnVuY3Rpb24oZWwsIGV2ZW50cykge1xuXHRcdGlmIChlbCkge1xuXHRcdFx0Zm9yICh2YXIgdHlwZSBpbiBldmVudHMpIHtcblx0XHRcdFx0dmFyIGZ1bmMgPSBldmVudHNbdHlwZV0sXG5cdFx0XHRcdFx0cGFydHMgPSB0eXBlLnNwbGl0KC9bXFxzLF0rL2cpO1xuXHRcdFx0XHRmb3IgKHZhciBpID0gMCwgbCA9IHBhcnRzLmxlbmd0aDsgaSA8IGw7IGkrKylcblx0XHRcdFx0XHRlbC5yZW1vdmVFdmVudExpc3RlbmVyKHBhcnRzW2ldLCBmdW5jLCBmYWxzZSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdGdldFBvaW50OiBmdW5jdGlvbihldmVudCkge1xuXHRcdHZhciBwb3MgPSBldmVudC50YXJnZXRUb3VjaGVzXG5cdFx0XHRcdD8gZXZlbnQudGFyZ2V0VG91Y2hlcy5sZW5ndGhcblx0XHRcdFx0XHQ/IGV2ZW50LnRhcmdldFRvdWNoZXNbMF1cblx0XHRcdFx0XHQ6IGV2ZW50LmNoYW5nZWRUb3VjaGVzWzBdXG5cdFx0XHRcdDogZXZlbnQ7XG5cdFx0cmV0dXJuIG5ldyBQb2ludChcblx0XHRcdHBvcy5wYWdlWCB8fCBwb3MuY2xpZW50WCArIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxMZWZ0LFxuXHRcdFx0cG9zLnBhZ2VZIHx8IHBvcy5jbGllbnRZICsgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcFxuXHRcdCk7XG5cdH0sXG5cblx0Z2V0VGFyZ2V0OiBmdW5jdGlvbihldmVudCkge1xuXHRcdHJldHVybiBldmVudC50YXJnZXQgfHwgZXZlbnQuc3JjRWxlbWVudDtcblx0fSxcblxuXHRnZXRSZWxhdGVkVGFyZ2V0OiBmdW5jdGlvbihldmVudCkge1xuXHRcdHJldHVybiBldmVudC5yZWxhdGVkVGFyZ2V0IHx8IGV2ZW50LnRvRWxlbWVudDtcblx0fSxcblxuXHRnZXRPZmZzZXQ6IGZ1bmN0aW9uKGV2ZW50LCB0YXJnZXQpIHtcblx0XHRyZXR1cm4gRG9tRXZlbnQuZ2V0UG9pbnQoZXZlbnQpLnN1YnRyYWN0KERvbUVsZW1lbnQuZ2V0T2Zmc2V0KFxuXHRcdFx0XHR0YXJnZXQgfHwgRG9tRXZlbnQuZ2V0VGFyZ2V0KGV2ZW50KSkpO1xuXHR9XG59O1xuXG5Eb21FdmVudC5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPSBuZXcgZnVuY3Rpb24oKSB7XG5cdHZhciBuYXRpdmVSZXF1ZXN0ID0gRG9tRWxlbWVudC5nZXRQcmVmaXhlZCh3aW5kb3csICdyZXF1ZXN0QW5pbWF0aW9uRnJhbWUnKSxcblx0XHRyZXF1ZXN0ZWQgPSBmYWxzZSxcblx0XHRjYWxsYmFja3MgPSBbXSxcblx0XHR0aW1lcjtcblxuXHRmdW5jdGlvbiBoYW5kbGVDYWxsYmFja3MoKSB7XG5cdFx0dmFyIGZ1bmN0aW9ucyA9IGNhbGxiYWNrcztcblx0XHRjYWxsYmFja3MgPSBbXTtcblx0XHRmb3IgKHZhciBpID0gMCwgbCA9IGZ1bmN0aW9ucy5sZW5ndGg7IGkgPCBsOyBpKyspXG5cdFx0XHRmdW5jdGlvbnNbaV0oKTtcblx0XHRyZXF1ZXN0ZWQgPSBuYXRpdmVSZXF1ZXN0ICYmIGNhbGxiYWNrcy5sZW5ndGg7XG5cdFx0aWYgKHJlcXVlc3RlZClcblx0XHRcdG5hdGl2ZVJlcXVlc3QoaGFuZGxlQ2FsbGJhY2tzKTtcblx0fVxuXG5cdHJldHVybiBmdW5jdGlvbihjYWxsYmFjaykge1xuXHRcdGNhbGxiYWNrcy5wdXNoKGNhbGxiYWNrKTtcblx0XHRpZiAobmF0aXZlUmVxdWVzdCkge1xuXHRcdFx0aWYgKCFyZXF1ZXN0ZWQpIHtcblx0XHRcdFx0bmF0aXZlUmVxdWVzdChoYW5kbGVDYWxsYmFja3MpO1xuXHRcdFx0XHRyZXF1ZXN0ZWQgPSB0cnVlO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSBpZiAoIXRpbWVyKSB7XG5cdFx0XHR0aW1lciA9IHNldEludGVydmFsKGhhbmRsZUNhbGxiYWNrcywgMTAwMCAvIDYwKTtcblx0XHR9XG5cdH07XG59O1xuXG52YXIgVmlldyA9IEJhc2UuZXh0ZW5kKEVtaXR0ZXIsIHtcblx0X2NsYXNzOiAnVmlldycsXG5cblx0aW5pdGlhbGl6ZTogZnVuY3Rpb24gVmlldyhwcm9qZWN0LCBlbGVtZW50KSB7XG5cblx0XHRmdW5jdGlvbiBnZXRTaXplKG5hbWUpIHtcblx0XHRcdHJldHVybiBlbGVtZW50W25hbWVdIHx8IHBhcnNlSW50KGVsZW1lbnQuZ2V0QXR0cmlidXRlKG5hbWUpLCAxMCk7XG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gZ2V0Q2FudmFzU2l6ZSgpIHtcblx0XHRcdHZhciBzaXplID0gRG9tRWxlbWVudC5nZXRTaXplKGVsZW1lbnQpO1xuXHRcdFx0cmV0dXJuIHNpemUuaXNOYU4oKSB8fCBzaXplLmlzWmVybygpXG5cdFx0XHRcdFx0PyBuZXcgU2l6ZShnZXRTaXplKCd3aWR0aCcpLCBnZXRTaXplKCdoZWlnaHQnKSlcblx0XHRcdFx0XHQ6IHNpemU7XG5cdFx0fVxuXG5cdFx0dmFyIHNpemU7XG5cdFx0aWYgKHdpbmRvdyAmJiBlbGVtZW50KSB7XG5cdFx0XHR0aGlzLl9pZCA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdpZCcpO1xuXHRcdFx0aWYgKHRoaXMuX2lkID09IG51bGwpXG5cdFx0XHRcdGVsZW1lbnQuc2V0QXR0cmlidXRlKCdpZCcsIHRoaXMuX2lkID0gJ3ZpZXctJyArIFZpZXcuX2lkKyspO1xuXHRcdFx0RG9tRXZlbnQuYWRkKGVsZW1lbnQsIHRoaXMuX3ZpZXdFdmVudHMpO1xuXHRcdFx0dmFyIG5vbmUgPSAnbm9uZSc7XG5cdFx0XHREb21FbGVtZW50LnNldFByZWZpeGVkKGVsZW1lbnQuc3R5bGUsIHtcblx0XHRcdFx0dXNlckRyYWc6IG5vbmUsXG5cdFx0XHRcdHVzZXJTZWxlY3Q6IG5vbmUsXG5cdFx0XHRcdHRvdWNoQ2FsbG91dDogbm9uZSxcblx0XHRcdFx0Y29udGVudFpvb21pbmc6IG5vbmUsXG5cdFx0XHRcdHRhcEhpZ2hsaWdodENvbG9yOiAncmdiYSgwLDAsMCwwKSdcblx0XHRcdH0pO1xuXG5cdFx0XHRpZiAoUGFwZXJTY29wZS5oYXNBdHRyaWJ1dGUoZWxlbWVudCwgJ3Jlc2l6ZScpKSB7XG5cdFx0XHRcdHZhciB0aGF0ID0gdGhpcztcblx0XHRcdFx0RG9tRXZlbnQuYWRkKHdpbmRvdywgdGhpcy5fd2luZG93RXZlbnRzID0ge1xuXHRcdFx0XHRcdHJlc2l6ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHR0aGF0LnNldFZpZXdTaXplKGdldENhbnZhc1NpemUoKSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblx0XHRcdH1cblxuXHRcdFx0c2l6ZSA9IGdldENhbnZhc1NpemUoKTtcblxuXHRcdFx0aWYgKFBhcGVyU2NvcGUuaGFzQXR0cmlidXRlKGVsZW1lbnQsICdzdGF0cycpXG5cdFx0XHRcdFx0JiYgdHlwZW9mIFN0YXRzICE9PSAndW5kZWZpbmVkJykge1xuXHRcdFx0XHR0aGlzLl9zdGF0cyA9IG5ldyBTdGF0cygpO1xuXHRcdFx0XHR2YXIgc3RhdHMgPSB0aGlzLl9zdGF0cy5kb21FbGVtZW50LFxuXHRcdFx0XHRcdHN0eWxlID0gc3RhdHMuc3R5bGUsXG5cdFx0XHRcdFx0b2Zmc2V0ID0gRG9tRWxlbWVudC5nZXRPZmZzZXQoZWxlbWVudCk7XG5cdFx0XHRcdHN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcblx0XHRcdFx0c3R5bGUubGVmdCA9IG9mZnNldC54ICsgJ3B4Jztcblx0XHRcdFx0c3R5bGUudG9wID0gb2Zmc2V0LnkgKyAncHgnO1xuXHRcdFx0XHRkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHN0YXRzKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0c2l6ZSA9IG5ldyBTaXplKGVsZW1lbnQpO1xuXHRcdFx0ZWxlbWVudCA9IG51bGw7XG5cdFx0fVxuXHRcdHRoaXMuX3Byb2plY3QgPSBwcm9qZWN0O1xuXHRcdHRoaXMuX3Njb3BlID0gcHJvamVjdC5fc2NvcGU7XG5cdFx0dGhpcy5fZWxlbWVudCA9IGVsZW1lbnQ7XG5cdFx0aWYgKCF0aGlzLl9waXhlbFJhdGlvKVxuXHRcdFx0dGhpcy5fcGl4ZWxSYXRpbyA9IHdpbmRvdyAmJiB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyB8fCAxO1xuXHRcdHRoaXMuX3NldEVsZW1lbnRTaXplKHNpemUud2lkdGgsIHNpemUuaGVpZ2h0KTtcblx0XHR0aGlzLl92aWV3U2l6ZSA9IHNpemU7XG5cdFx0Vmlldy5fdmlld3MucHVzaCh0aGlzKTtcblx0XHRWaWV3Ll92aWV3c0J5SWRbdGhpcy5faWRdID0gdGhpcztcblx0XHQodGhpcy5fbWF0cml4ID0gbmV3IE1hdHJpeCgpKS5fb3duZXIgPSB0aGlzO1xuXHRcdGlmICghVmlldy5fZm9jdXNlZClcblx0XHRcdFZpZXcuX2ZvY3VzZWQgPSB0aGlzO1xuXHRcdHRoaXMuX2ZyYW1lSXRlbXMgPSB7fTtcblx0XHR0aGlzLl9mcmFtZUl0ZW1Db3VudCA9IDA7XG5cdFx0dGhpcy5faXRlbUV2ZW50cyA9IHsgbmF0aXZlOiB7fSwgdmlydHVhbDoge30gfTtcblx0XHR0aGlzLl9hdXRvVXBkYXRlID0gIXBhcGVyLmFnZW50Lm5vZGU7XG5cdFx0dGhpcy5fbmVlZHNVcGRhdGUgPSBmYWxzZTtcblx0fSxcblxuXHRyZW1vdmU6IGZ1bmN0aW9uKCkge1xuXHRcdGlmICghdGhpcy5fcHJvamVjdClcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRpZiAoVmlldy5fZm9jdXNlZCA9PT0gdGhpcylcblx0XHRcdFZpZXcuX2ZvY3VzZWQgPSBudWxsO1xuXHRcdFZpZXcuX3ZpZXdzLnNwbGljZShWaWV3Ll92aWV3cy5pbmRleE9mKHRoaXMpLCAxKTtcblx0XHRkZWxldGUgVmlldy5fdmlld3NCeUlkW3RoaXMuX2lkXTtcblx0XHR2YXIgcHJvamVjdCA9IHRoaXMuX3Byb2plY3Q7XG5cdFx0aWYgKHByb2plY3QuX3ZpZXcgPT09IHRoaXMpXG5cdFx0XHRwcm9qZWN0Ll92aWV3ID0gbnVsbDtcblx0XHREb21FdmVudC5yZW1vdmUodGhpcy5fZWxlbWVudCwgdGhpcy5fdmlld0V2ZW50cyk7XG5cdFx0RG9tRXZlbnQucmVtb3ZlKHdpbmRvdywgdGhpcy5fd2luZG93RXZlbnRzKTtcblx0XHR0aGlzLl9lbGVtZW50ID0gdGhpcy5fcHJvamVjdCA9IG51bGw7XG5cdFx0dGhpcy5vZmYoJ2ZyYW1lJyk7XG5cdFx0dGhpcy5fYW5pbWF0ZSA9IGZhbHNlO1xuXHRcdHRoaXMuX2ZyYW1lSXRlbXMgPSB7fTtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSxcblxuXHRfZXZlbnRzOiBCYXNlLmVhY2goXG5cdFx0SXRlbS5faXRlbUhhbmRsZXJzLmNvbmNhdChbJ29uUmVzaXplJywgJ29uS2V5RG93bicsICdvbktleVVwJ10pLFxuXHRcdGZ1bmN0aW9uKG5hbWUpIHtcblx0XHRcdHRoaXNbbmFtZV0gPSB7fTtcblx0XHR9LCB7XG5cdFx0XHRvbkZyYW1lOiB7XG5cdFx0XHRcdGluc3RhbGw6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHRoaXMucGxheSgpO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdHVuaW5zdGFsbDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0dGhpcy5wYXVzZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHQpLFxuXG5cdF9hbmltYXRlOiBmYWxzZSxcblx0X3RpbWU6IDAsXG5cdF9jb3VudDogMCxcblxuXHRnZXRBdXRvVXBkYXRlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5fYXV0b1VwZGF0ZTtcblx0fSxcblxuXHRzZXRBdXRvVXBkYXRlOiBmdW5jdGlvbihhdXRvVXBkYXRlKSB7XG5cdFx0dGhpcy5fYXV0b1VwZGF0ZSA9IGF1dG9VcGRhdGU7XG5cdFx0aWYgKGF1dG9VcGRhdGUpXG5cdFx0XHR0aGlzLnJlcXVlc3RVcGRhdGUoKTtcblx0fSxcblxuXHR1cGRhdGU6IGZ1bmN0aW9uKCkge1xuXHR9LFxuXG5cdGRyYXc6IGZ1bmN0aW9uKCkge1xuXHRcdHRoaXMudXBkYXRlKCk7XG5cdH0sXG5cblx0cmVxdWVzdFVwZGF0ZTogZnVuY3Rpb24oKSB7XG5cdFx0aWYgKCF0aGlzLl9yZXF1ZXN0ZWQpIHtcblx0XHRcdHZhciB0aGF0ID0gdGhpcztcblx0XHRcdERvbUV2ZW50LnJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbigpIHtcblx0XHRcdFx0dGhhdC5fcmVxdWVzdGVkID0gZmFsc2U7XG5cdFx0XHRcdGlmICh0aGF0Ll9hbmltYXRlKSB7XG5cdFx0XHRcdFx0dGhhdC5yZXF1ZXN0VXBkYXRlKCk7XG5cdFx0XHRcdFx0dmFyIGVsZW1lbnQgPSB0aGF0Ll9lbGVtZW50O1xuXHRcdFx0XHRcdGlmICgoIURvbUVsZW1lbnQuZ2V0UHJlZml4ZWQoZG9jdW1lbnQsICdoaWRkZW4nKVxuXHRcdFx0XHRcdFx0XHR8fCBQYXBlclNjb3BlLmdldEF0dHJpYnV0ZShlbGVtZW50LCAna2VlcGFsaXZlJylcblx0XHRcdFx0XHRcdFx0XHQ9PT0gJ3RydWUnKSAmJiBEb21FbGVtZW50LmlzSW5WaWV3KGVsZW1lbnQpKSB7XG5cdFx0XHRcdFx0XHR0aGF0Ll9oYW5kbGVGcmFtZSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAodGhhdC5fYXV0b1VwZGF0ZSlcblx0XHRcdFx0XHR0aGF0LnVwZGF0ZSgpO1xuXHRcdFx0fSk7XG5cdFx0XHR0aGlzLl9yZXF1ZXN0ZWQgPSB0cnVlO1xuXHRcdH1cblx0fSxcblxuXHRwbGF5OiBmdW5jdGlvbigpIHtcblx0XHR0aGlzLl9hbmltYXRlID0gdHJ1ZTtcblx0XHR0aGlzLnJlcXVlc3RVcGRhdGUoKTtcblx0fSxcblxuXHRwYXVzZTogZnVuY3Rpb24oKSB7XG5cdFx0dGhpcy5fYW5pbWF0ZSA9IGZhbHNlO1xuXHR9LFxuXG5cdF9oYW5kbGVGcmFtZTogZnVuY3Rpb24oKSB7XG5cdFx0cGFwZXIgPSB0aGlzLl9zY29wZTtcblx0XHR2YXIgbm93ID0gRGF0ZS5ub3coKSAvIDEwMDAsXG5cdFx0XHRkZWx0YSA9IHRoaXMuX2xhc3QgPyBub3cgLSB0aGlzLl9sYXN0IDogMDtcblx0XHR0aGlzLl9sYXN0ID0gbm93O1xuXHRcdHRoaXMuZW1pdCgnZnJhbWUnLCBuZXcgQmFzZSh7XG5cdFx0XHRkZWx0YTogZGVsdGEsXG5cdFx0XHR0aW1lOiB0aGlzLl90aW1lICs9IGRlbHRhLFxuXHRcdFx0Y291bnQ6IHRoaXMuX2NvdW50Kytcblx0XHR9KSk7XG5cdFx0aWYgKHRoaXMuX3N0YXRzKVxuXHRcdFx0dGhpcy5fc3RhdHMudXBkYXRlKCk7XG5cdH0sXG5cblx0X2FuaW1hdGVJdGVtOiBmdW5jdGlvbihpdGVtLCBhbmltYXRlKSB7XG5cdFx0dmFyIGl0ZW1zID0gdGhpcy5fZnJhbWVJdGVtcztcblx0XHRpZiAoYW5pbWF0ZSkge1xuXHRcdFx0aXRlbXNbaXRlbS5faWRdID0ge1xuXHRcdFx0XHRpdGVtOiBpdGVtLFxuXHRcdFx0XHR0aW1lOiAwLFxuXHRcdFx0XHRjb3VudDogMFxuXHRcdFx0fTtcblx0XHRcdGlmICgrK3RoaXMuX2ZyYW1lSXRlbUNvdW50ID09PSAxKVxuXHRcdFx0XHR0aGlzLm9uKCdmcmFtZScsIHRoaXMuX2hhbmRsZUZyYW1lSXRlbXMpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRkZWxldGUgaXRlbXNbaXRlbS5faWRdO1xuXHRcdFx0aWYgKC0tdGhpcy5fZnJhbWVJdGVtQ291bnQgPT09IDApIHtcblx0XHRcdFx0dGhpcy5vZmYoJ2ZyYW1lJywgdGhpcy5faGFuZGxlRnJhbWVJdGVtcyk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdF9oYW5kbGVGcmFtZUl0ZW1zOiBmdW5jdGlvbihldmVudCkge1xuXHRcdGZvciAodmFyIGkgaW4gdGhpcy5fZnJhbWVJdGVtcykge1xuXHRcdFx0dmFyIGVudHJ5ID0gdGhpcy5fZnJhbWVJdGVtc1tpXTtcblx0XHRcdGVudHJ5Lml0ZW0uZW1pdCgnZnJhbWUnLCBuZXcgQmFzZShldmVudCwge1xuXHRcdFx0XHR0aW1lOiBlbnRyeS50aW1lICs9IGV2ZW50LmRlbHRhLFxuXHRcdFx0XHRjb3VudDogZW50cnkuY291bnQrK1xuXHRcdFx0fSkpO1xuXHRcdH1cblx0fSxcblxuXHRfY2hhbmdlZDogZnVuY3Rpb24oKSB7XG5cdFx0dGhpcy5fcHJvamVjdC5fY2hhbmdlZCg0MDk3KTtcblx0XHR0aGlzLl9ib3VuZHMgPSB0aGlzLl9kZWNvbXBvc2VkID0gdW5kZWZpbmVkO1xuXHR9LFxuXG5cdGdldEVsZW1lbnQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLl9lbGVtZW50O1xuXHR9LFxuXG5cdGdldFBpeGVsUmF0aW86IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLl9waXhlbFJhdGlvO1xuXHR9LFxuXG5cdGdldFJlc29sdXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLl9waXhlbFJhdGlvICogNzI7XG5cdH0sXG5cblx0Z2V0Vmlld1NpemU6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBzaXplID0gdGhpcy5fdmlld1NpemU7XG5cdFx0cmV0dXJuIG5ldyBMaW5rZWRTaXplKHNpemUud2lkdGgsIHNpemUuaGVpZ2h0LCB0aGlzLCAnc2V0Vmlld1NpemUnKTtcblx0fSxcblxuXHRzZXRWaWV3U2l6ZTogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIHNpemUgPSBTaXplLnJlYWQoYXJndW1lbnRzKSxcblx0XHRcdGRlbHRhID0gc2l6ZS5zdWJ0cmFjdCh0aGlzLl92aWV3U2l6ZSk7XG5cdFx0aWYgKGRlbHRhLmlzWmVybygpKVxuXHRcdFx0cmV0dXJuO1xuXHRcdHRoaXMuX3NldEVsZW1lbnRTaXplKHNpemUud2lkdGgsIHNpemUuaGVpZ2h0KTtcblx0XHR0aGlzLl92aWV3U2l6ZS5zZXQoc2l6ZSk7XG5cdFx0dGhpcy5fY2hhbmdlZCgpO1xuXHRcdHRoaXMuZW1pdCgncmVzaXplJywgeyBzaXplOiBzaXplLCBkZWx0YTogZGVsdGEgfSk7XG5cdFx0aWYgKHRoaXMuX2F1dG9VcGRhdGUpIHtcblx0XHRcdHRoaXMudXBkYXRlKCk7XG5cdFx0fVxuXHR9LFxuXG5cdF9zZXRFbGVtZW50U2l6ZTogZnVuY3Rpb24od2lkdGgsIGhlaWdodCkge1xuXHRcdHZhciBlbGVtZW50ID0gdGhpcy5fZWxlbWVudDtcblx0XHRpZiAoZWxlbWVudCkge1xuXHRcdFx0aWYgKGVsZW1lbnQud2lkdGggIT09IHdpZHRoKVxuXHRcdFx0XHRlbGVtZW50LndpZHRoID0gd2lkdGg7XG5cdFx0XHRpZiAoZWxlbWVudC5oZWlnaHQgIT09IGhlaWdodClcblx0XHRcdFx0ZWxlbWVudC5oZWlnaHQgPSBoZWlnaHQ7XG5cdFx0fVxuXHR9LFxuXG5cdGdldEJvdW5kczogZnVuY3Rpb24oKSB7XG5cdFx0aWYgKCF0aGlzLl9ib3VuZHMpXG5cdFx0XHR0aGlzLl9ib3VuZHMgPSB0aGlzLl9tYXRyaXguaW52ZXJ0ZWQoKS5fdHJhbnNmb3JtQm91bmRzKFxuXHRcdFx0XHRcdG5ldyBSZWN0YW5nbGUobmV3IFBvaW50KCksIHRoaXMuX3ZpZXdTaXplKSk7XG5cdFx0cmV0dXJuIHRoaXMuX2JvdW5kcztcblx0fSxcblxuXHRnZXRTaXplOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5nZXRCb3VuZHMoKS5nZXRTaXplKCk7XG5cdH0sXG5cblx0aXNWaXNpYmxlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gRG9tRWxlbWVudC5pc0luVmlldyh0aGlzLl9lbGVtZW50KTtcblx0fSxcblxuXHRpc0luc2VydGVkOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gRG9tRWxlbWVudC5pc0luc2VydGVkKHRoaXMuX2VsZW1lbnQpO1xuXHR9LFxuXG5cdGdldFBpeGVsU2l6ZTogZnVuY3Rpb24oc2l6ZSkge1xuXHRcdHZhciBlbGVtZW50ID0gdGhpcy5fZWxlbWVudCxcblx0XHRcdHBpeGVscztcblx0XHRpZiAoZWxlbWVudCkge1xuXHRcdFx0dmFyIHBhcmVudCA9IGVsZW1lbnQucGFyZW50Tm9kZSxcblx0XHRcdFx0dGVtcCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuXHRcdFx0dGVtcC5zdHlsZS5mb250U2l6ZSA9IHNpemU7XG5cdFx0XHRwYXJlbnQuYXBwZW5kQ2hpbGQodGVtcCk7XG5cdFx0XHRwaXhlbHMgPSBwYXJzZUZsb2F0KERvbUVsZW1lbnQuZ2V0U3R5bGVzKHRlbXApLmZvbnRTaXplKTtcblx0XHRcdHBhcmVudC5yZW1vdmVDaGlsZCh0ZW1wKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cGl4ZWxzID0gcGFyc2VGbG9hdChwaXhlbHMpO1xuXHRcdH1cblx0XHRyZXR1cm4gcGl4ZWxzO1xuXHR9LFxuXG5cdGdldFRleHRXaWR0aDogZnVuY3Rpb24oZm9udCwgbGluZXMpIHtcblx0XHRyZXR1cm4gMDtcblx0fVxufSwgQmFzZS5lYWNoKFsncm90YXRlJywgJ3NjYWxlJywgJ3NoZWFyJywgJ3NrZXcnXSwgZnVuY3Rpb24oa2V5KSB7XG5cdHZhciByb3RhdGUgPSBrZXkgPT09ICdyb3RhdGUnO1xuXHR0aGlzW2tleV0gPSBmdW5jdGlvbigpIHtcblx0XHR2YXIgdmFsdWUgPSAocm90YXRlID8gQmFzZSA6IFBvaW50KS5yZWFkKGFyZ3VtZW50cyksXG5cdFx0XHRjZW50ZXIgPSBQb2ludC5yZWFkKGFyZ3VtZW50cywgMCwgeyByZWFkTnVsbDogdHJ1ZSB9KTtcblx0XHRyZXR1cm4gdGhpcy50cmFuc2Zvcm0obmV3IE1hdHJpeCgpW2tleV0odmFsdWUsXG5cdFx0XHRcdGNlbnRlciB8fCB0aGlzLmdldENlbnRlcih0cnVlKSkpO1xuXHR9O1xufSwge1xuXHRfZGVjb21wb3NlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5fZGVjb21wb3NlZCB8fCAodGhpcy5fZGVjb21wb3NlZCA9IHRoaXMuX21hdHJpeC5kZWNvbXBvc2UoKSk7XG5cdH0sXG5cblx0dHJhbnNsYXRlOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgbXggPSBuZXcgTWF0cml4KCk7XG5cdFx0cmV0dXJuIHRoaXMudHJhbnNmb3JtKG14LnRyYW5zbGF0ZS5hcHBseShteCwgYXJndW1lbnRzKSk7XG5cdH0sXG5cblx0Z2V0Q2VudGVyOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5nZXRCb3VuZHMoKS5nZXRDZW50ZXIoKTtcblx0fSxcblxuXHRzZXRDZW50ZXI6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBjZW50ZXIgPSBQb2ludC5yZWFkKGFyZ3VtZW50cyk7XG5cdFx0dGhpcy50cmFuc2xhdGUodGhpcy5nZXRDZW50ZXIoKS5zdWJ0cmFjdChjZW50ZXIpKTtcblx0fSxcblxuXHRnZXRab29tOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgc2NhbGluZyA9IHRoaXMuX2RlY29tcG9zZSgpLnNjYWxpbmc7XG5cdFx0cmV0dXJuIChzY2FsaW5nLnggKyBzY2FsaW5nLnkpIC8gMjtcblx0fSxcblxuXHRzZXRab29tOiBmdW5jdGlvbih6b29tKSB7XG5cdFx0dGhpcy50cmFuc2Zvcm0obmV3IE1hdHJpeCgpLnNjYWxlKHpvb20gLyB0aGlzLmdldFpvb20oKSxcblx0XHRcdHRoaXMuZ2V0Q2VudGVyKCkpKTtcblx0fSxcblxuXHRnZXRSb3RhdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuX2RlY29tcG9zZSgpLnJvdGF0aW9uO1xuXHR9LFxuXG5cdHNldFJvdGF0aW9uOiBmdW5jdGlvbihyb3RhdGlvbikge1xuXHRcdHZhciBjdXJyZW50ID0gdGhpcy5nZXRSb3RhdGlvbigpO1xuXHRcdGlmIChjdXJyZW50ICE9IG51bGwgJiYgcm90YXRpb24gIT0gbnVsbCkge1xuXHRcdFx0dGhpcy5yb3RhdGUocm90YXRpb24gLSBjdXJyZW50KTtcblx0XHR9XG5cdH0sXG5cblx0Z2V0U2NhbGluZzogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIHNjYWxpbmcgPSB0aGlzLl9kZWNvbXBvc2UoKS5zY2FsaW5nO1xuXHRcdHJldHVybiBuZXcgTGlua2VkUG9pbnQoc2NhbGluZy54LCBzY2FsaW5nLnksIHRoaXMsICdzZXRTY2FsaW5nJyk7XG5cdH0sXG5cblx0c2V0U2NhbGluZzogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGN1cnJlbnQgPSB0aGlzLmdldFNjYWxpbmcoKSxcblx0XHRcdHNjYWxpbmcgPSBQb2ludC5yZWFkKGFyZ3VtZW50cywgMCwgeyBjbG9uZTogdHJ1ZSwgcmVhZE51bGw6IHRydWUgfSk7XG5cdFx0aWYgKGN1cnJlbnQgJiYgc2NhbGluZykge1xuXHRcdFx0dGhpcy5zY2FsZShzY2FsaW5nLnggLyBjdXJyZW50LngsIHNjYWxpbmcueSAvIGN1cnJlbnQueSk7XG5cdFx0fVxuXHR9LFxuXG5cdGdldE1hdHJpeDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuX21hdHJpeDtcblx0fSxcblxuXHRzZXRNYXRyaXg6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBtYXRyaXggPSB0aGlzLl9tYXRyaXg7XG5cdFx0bWF0cml4LmluaXRpYWxpemUuYXBwbHkobWF0cml4LCBhcmd1bWVudHMpO1xuXHR9LFxuXG5cdHRyYW5zZm9ybTogZnVuY3Rpb24obWF0cml4KSB7XG5cdFx0dGhpcy5fbWF0cml4LmFwcGVuZChtYXRyaXgpO1xuXHR9LFxuXG5cdHNjcm9sbEJ5OiBmdW5jdGlvbigpIHtcblx0XHR0aGlzLnRyYW5zbGF0ZShQb2ludC5yZWFkKGFyZ3VtZW50cykubmVnYXRlKCkpO1xuXHR9XG59KSwge1xuXG5cdHByb2plY3RUb1ZpZXc6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLl9tYXRyaXguX3RyYW5zZm9ybVBvaW50KFBvaW50LnJlYWQoYXJndW1lbnRzKSk7XG5cdH0sXG5cblx0dmlld1RvUHJvamVjdDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuX21hdHJpeC5faW52ZXJzZVRyYW5zZm9ybShQb2ludC5yZWFkKGFyZ3VtZW50cykpO1xuXHR9LFxuXG5cdGdldEV2ZW50UG9pbnQ6IGZ1bmN0aW9uKGV2ZW50KSB7XG5cdFx0cmV0dXJuIHRoaXMudmlld1RvUHJvamVjdChEb21FdmVudC5nZXRPZmZzZXQoZXZlbnQsIHRoaXMuX2VsZW1lbnQpKTtcblx0fSxcblxufSwge1xuXHRzdGF0aWNzOiB7XG5cdFx0X3ZpZXdzOiBbXSxcblx0XHRfdmlld3NCeUlkOiB7fSxcblx0XHRfaWQ6IDAsXG5cblx0XHRjcmVhdGU6IGZ1bmN0aW9uKHByb2plY3QsIGVsZW1lbnQpIHtcblx0XHRcdGlmIChkb2N1bWVudCAmJiB0eXBlb2YgZWxlbWVudCA9PT0gJ3N0cmluZycpXG5cdFx0XHRcdGVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChlbGVtZW50KTtcblx0XHRcdHZhciBjdG9yID0gd2luZG93ID8gQ2FudmFzVmlldyA6IFZpZXc7XG5cdFx0XHRyZXR1cm4gbmV3IGN0b3IocHJvamVjdCwgZWxlbWVudCk7XG5cdFx0fVxuXHR9XG59LFxubmV3IGZ1bmN0aW9uKCkge1xuXHRpZiAoIXdpbmRvdylcblx0XHRyZXR1cm47XG5cdHZhciBwcmV2Rm9jdXMsXG5cdFx0dGVtcEZvY3VzLFxuXHRcdGRyYWdnaW5nID0gZmFsc2UsXG5cdFx0bW91c2VEb3duID0gZmFsc2U7XG5cblx0ZnVuY3Rpb24gZ2V0VmlldyhldmVudCkge1xuXHRcdHZhciB0YXJnZXQgPSBEb21FdmVudC5nZXRUYXJnZXQoZXZlbnQpO1xuXHRcdHJldHVybiB0YXJnZXQuZ2V0QXR0cmlidXRlICYmIFZpZXcuX3ZpZXdzQnlJZFtcblx0XHRcdFx0dGFyZ2V0LmdldEF0dHJpYnV0ZSgnaWQnKV07XG5cdH1cblxuXHRmdW5jdGlvbiB1cGRhdGVGb2N1cygpIHtcblx0XHR2YXIgdmlldyA9IFZpZXcuX2ZvY3VzZWQ7XG5cdFx0aWYgKCF2aWV3IHx8ICF2aWV3LmlzVmlzaWJsZSgpKSB7XG5cdFx0XHRmb3IgKHZhciBpID0gMCwgbCA9IFZpZXcuX3ZpZXdzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuXHRcdFx0XHRpZiAoKHZpZXcgPSBWaWV3Ll92aWV3c1tpXSkuaXNWaXNpYmxlKCkpIHtcblx0XHRcdFx0XHRWaWV3Ll9mb2N1c2VkID0gdGVtcEZvY3VzID0gdmlldztcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGZ1bmN0aW9uIGhhbmRsZU1vdXNlTW92ZSh2aWV3LCBldmVudCwgcG9pbnQpIHtcblx0XHR2aWV3Ll9oYW5kbGVNb3VzZUV2ZW50KCdtb3VzZW1vdmUnLCBldmVudCwgcG9pbnQpO1xuXHR9XG5cblx0dmFyIG5hdmlnYXRvciA9IHdpbmRvdy5uYXZpZ2F0b3IsXG5cdFx0bW91c2Vkb3duLCBtb3VzZW1vdmUsIG1vdXNldXA7XG5cdGlmIChuYXZpZ2F0b3IucG9pbnRlckVuYWJsZWQgfHwgbmF2aWdhdG9yLm1zUG9pbnRlckVuYWJsZWQpIHtcblx0XHRtb3VzZWRvd24gPSAncG9pbnRlcmRvd24gTVNQb2ludGVyRG93bic7XG5cdFx0bW91c2Vtb3ZlID0gJ3BvaW50ZXJtb3ZlIE1TUG9pbnRlck1vdmUnO1xuXHRcdG1vdXNldXAgPSAncG9pbnRlcnVwIHBvaW50ZXJjYW5jZWwgTVNQb2ludGVyVXAgTVNQb2ludGVyQ2FuY2VsJztcblx0fSBlbHNlIHtcblx0XHRtb3VzZWRvd24gPSAndG91Y2hzdGFydCc7XG5cdFx0bW91c2Vtb3ZlID0gJ3RvdWNobW92ZSc7XG5cdFx0bW91c2V1cCA9ICd0b3VjaGVuZCB0b3VjaGNhbmNlbCc7XG5cdFx0aWYgKCEoJ29udG91Y2hzdGFydCcgaW4gd2luZG93ICYmIG5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goXG5cdFx0XHRcdC9tb2JpbGV8dGFibGV0fGlwKGFkfGhvbmV8b2QpfGFuZHJvaWR8c2lsay9pKSkpIHtcblx0XHRcdG1vdXNlZG93biArPSAnIG1vdXNlZG93bic7XG5cdFx0XHRtb3VzZW1vdmUgKz0gJyBtb3VzZW1vdmUnO1xuXHRcdFx0bW91c2V1cCArPSAnIG1vdXNldXAnO1xuXHRcdH1cblx0fVxuXG5cdHZhciB2aWV3RXZlbnRzID0ge30sXG5cdFx0ZG9jRXZlbnRzID0ge1xuXHRcdFx0bW91c2VvdXQ6IGZ1bmN0aW9uKGV2ZW50KSB7XG5cdFx0XHRcdHZhciB2aWV3ID0gVmlldy5fZm9jdXNlZCxcblx0XHRcdFx0XHR0YXJnZXQgPSBEb21FdmVudC5nZXRSZWxhdGVkVGFyZ2V0KGV2ZW50KTtcblx0XHRcdFx0aWYgKHZpZXcgJiYgKCF0YXJnZXQgfHwgdGFyZ2V0Lm5vZGVOYW1lID09PSAnSFRNTCcpKSB7XG5cdFx0XHRcdFx0dmFyIG9mZnNldCA9IERvbUV2ZW50LmdldE9mZnNldChldmVudCwgdmlldy5fZWxlbWVudCksXG5cdFx0XHRcdFx0XHR4ID0gb2Zmc2V0LngsXG5cdFx0XHRcdFx0XHRhYnMgPSBNYXRoLmFicyxcblx0XHRcdFx0XHRcdGF4ID0gYWJzKHgpLFxuXHRcdFx0XHRcdFx0bWF4ID0gMSA8PCAyNSxcblx0XHRcdFx0XHRcdGRpZmYgPSBheCAtIG1heDtcblx0XHRcdFx0XHRvZmZzZXQueCA9IGFicyhkaWZmKSA8IGF4ID8gZGlmZiAqICh4IDwgMCA/IC0xIDogMSkgOiB4O1xuXHRcdFx0XHRcdGhhbmRsZU1vdXNlTW92ZSh2aWV3LCBldmVudCwgdmlldy52aWV3VG9Qcm9qZWN0KG9mZnNldCkpO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXG5cdFx0XHRzY3JvbGw6IHVwZGF0ZUZvY3VzXG5cdFx0fTtcblxuXHR2aWV3RXZlbnRzW21vdXNlZG93bl0gPSBmdW5jdGlvbihldmVudCkge1xuXHRcdHZhciB2aWV3ID0gVmlldy5fZm9jdXNlZCA9IGdldFZpZXcoZXZlbnQpO1xuXHRcdGlmICghZHJhZ2dpbmcpIHtcblx0XHRcdGRyYWdnaW5nID0gdHJ1ZTtcblx0XHRcdHZpZXcuX2hhbmRsZU1vdXNlRXZlbnQoJ21vdXNlZG93bicsIGV2ZW50KTtcblx0XHR9XG5cdH07XG5cblx0ZG9jRXZlbnRzW21vdXNlbW92ZV0gPSBmdW5jdGlvbihldmVudCkge1xuXHRcdHZhciB2aWV3ID0gVmlldy5fZm9jdXNlZDtcblx0XHRpZiAoIW1vdXNlRG93bikge1xuXHRcdFx0dmFyIHRhcmdldCA9IGdldFZpZXcoZXZlbnQpO1xuXHRcdFx0aWYgKHRhcmdldCkge1xuXHRcdFx0XHRpZiAodmlldyAhPT0gdGFyZ2V0KSB7XG5cdFx0XHRcdFx0aWYgKHZpZXcpXG5cdFx0XHRcdFx0XHRoYW5kbGVNb3VzZU1vdmUodmlldywgZXZlbnQpO1xuXHRcdFx0XHRcdGlmICghcHJldkZvY3VzKVxuXHRcdFx0XHRcdFx0cHJldkZvY3VzID0gdmlldztcblx0XHRcdFx0XHR2aWV3ID0gVmlldy5fZm9jdXNlZCA9IHRlbXBGb2N1cyA9IHRhcmdldDtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIGlmICh0ZW1wRm9jdXMgJiYgdGVtcEZvY3VzID09PSB2aWV3KSB7XG5cdFx0XHRcdGlmIChwcmV2Rm9jdXMgJiYgIXByZXZGb2N1cy5pc0luc2VydGVkKCkpXG5cdFx0XHRcdFx0cHJldkZvY3VzID0gbnVsbDtcblx0XHRcdFx0dmlldyA9IFZpZXcuX2ZvY3VzZWQgPSBwcmV2Rm9jdXM7XG5cdFx0XHRcdHByZXZGb2N1cyA9IG51bGw7XG5cdFx0XHRcdHVwZGF0ZUZvY3VzKCk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGlmICh2aWV3KVxuXHRcdFx0aGFuZGxlTW91c2VNb3ZlKHZpZXcsIGV2ZW50KTtcblx0fTtcblxuXHRkb2NFdmVudHNbbW91c2Vkb3duXSA9IGZ1bmN0aW9uKCkge1xuXHRcdG1vdXNlRG93biA9IHRydWU7XG5cdH07XG5cblx0ZG9jRXZlbnRzW21vdXNldXBdID0gZnVuY3Rpb24oZXZlbnQpIHtcblx0XHR2YXIgdmlldyA9IFZpZXcuX2ZvY3VzZWQ7XG5cdFx0aWYgKHZpZXcgJiYgZHJhZ2dpbmcpXG5cdFx0XHR2aWV3Ll9oYW5kbGVNb3VzZUV2ZW50KCdtb3VzZXVwJywgZXZlbnQpO1xuXHRcdG1vdXNlRG93biA9IGRyYWdnaW5nID0gZmFsc2U7XG5cdH07XG5cblx0RG9tRXZlbnQuYWRkKGRvY3VtZW50LCBkb2NFdmVudHMpO1xuXG5cdERvbUV2ZW50LmFkZCh3aW5kb3csIHtcblx0XHRsb2FkOiB1cGRhdGVGb2N1c1xuXHR9KTtcblxuXHR2YXIgY2FsbGVkID0gZmFsc2UsXG5cdFx0cHJldmVudGVkID0gZmFsc2UsXG5cdFx0ZmFsbGJhY2tzID0ge1xuXHRcdFx0ZG91YmxlY2xpY2s6ICdjbGljaycsXG5cdFx0XHRtb3VzZWRyYWc6ICdtb3VzZW1vdmUnXG5cdFx0fSxcblx0XHR3YXNJblZpZXcgPSBmYWxzZSxcblx0XHRvdmVyVmlldyxcblx0XHRkb3duUG9pbnQsXG5cdFx0bGFzdFBvaW50LFxuXHRcdGRvd25JdGVtLFxuXHRcdG92ZXJJdGVtLFxuXHRcdGRyYWdJdGVtLFxuXHRcdGNsaWNrSXRlbSxcblx0XHRjbGlja1RpbWUsXG5cdFx0ZGJsQ2xpY2s7XG5cblx0ZnVuY3Rpb24gZW1pdE1vdXNlRXZlbnQob2JqLCB0YXJnZXQsIHR5cGUsIGV2ZW50LCBwb2ludCwgcHJldlBvaW50LFxuXHRcdFx0c3RvcEl0ZW0pIHtcblx0XHR2YXIgc3RvcHBlZCA9IGZhbHNlLFxuXHRcdFx0bW91c2VFdmVudDtcblxuXHRcdGZ1bmN0aW9uIGVtaXQob2JqLCB0eXBlKSB7XG5cdFx0XHRpZiAob2JqLnJlc3BvbmRzKHR5cGUpKSB7XG5cdFx0XHRcdGlmICghbW91c2VFdmVudCkge1xuXHRcdFx0XHRcdG1vdXNlRXZlbnQgPSBuZXcgTW91c2VFdmVudCh0eXBlLCBldmVudCwgcG9pbnQsXG5cdFx0XHRcdFx0XHRcdHRhcmdldCB8fCBvYmosXG5cdFx0XHRcdFx0XHRcdHByZXZQb2ludCA/IHBvaW50LnN1YnRyYWN0KHByZXZQb2ludCkgOiBudWxsKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAob2JqLmVtaXQodHlwZSwgbW91c2VFdmVudCkpIHtcblx0XHRcdFx0XHRjYWxsZWQgPSB0cnVlO1xuXHRcdFx0XHRcdGlmIChtb3VzZUV2ZW50LnByZXZlbnRlZClcblx0XHRcdFx0XHRcdHByZXZlbnRlZCA9IHRydWU7XG5cdFx0XHRcdFx0aWYgKG1vdXNlRXZlbnQuc3RvcHBlZClcblx0XHRcdFx0XHRcdHJldHVybiBzdG9wcGVkID0gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dmFyIGZhbGxiYWNrID0gZmFsbGJhY2tzW3R5cGVdO1xuXHRcdFx0XHRpZiAoZmFsbGJhY2spXG5cdFx0XHRcdFx0cmV0dXJuIGVtaXQob2JqLCBmYWxsYmFjayk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0d2hpbGUgKG9iaiAmJiBvYmogIT09IHN0b3BJdGVtKSB7XG5cdFx0XHRpZiAoZW1pdChvYmosIHR5cGUpKVxuXHRcdFx0XHRicmVhaztcblx0XHRcdG9iaiA9IG9iai5fcGFyZW50O1xuXHRcdH1cblx0XHRyZXR1cm4gc3RvcHBlZDtcblx0fVxuXG5cdGZ1bmN0aW9uIGVtaXRNb3VzZUV2ZW50cyh2aWV3LCBoaXRJdGVtLCB0eXBlLCBldmVudCwgcG9pbnQsIHByZXZQb2ludCkge1xuXHRcdHZpZXcuX3Byb2plY3QucmVtb3ZlT24odHlwZSk7XG5cdFx0cHJldmVudGVkID0gY2FsbGVkID0gZmFsc2U7XG5cdFx0cmV0dXJuIChkcmFnSXRlbSAmJiBlbWl0TW91c2VFdmVudChkcmFnSXRlbSwgbnVsbCwgdHlwZSwgZXZlbnQsXG5cdFx0XHRcdFx0cG9pbnQsIHByZXZQb2ludClcblx0XHRcdHx8IGhpdEl0ZW0gJiYgaGl0SXRlbSAhPT0gZHJhZ0l0ZW1cblx0XHRcdFx0JiYgIWhpdEl0ZW0uaXNEZXNjZW5kYW50KGRyYWdJdGVtKVxuXHRcdFx0XHQmJiBlbWl0TW91c2VFdmVudChoaXRJdGVtLCBudWxsLCB0eXBlID09PSAnbW91c2VkcmFnJyA/XG5cdFx0XHRcdFx0J21vdXNlbW92ZScgOiB0eXBlLCBldmVudCwgcG9pbnQsIHByZXZQb2ludCwgZHJhZ0l0ZW0pXG5cdFx0XHR8fCBlbWl0TW91c2VFdmVudCh2aWV3LCBkcmFnSXRlbSB8fCBoaXRJdGVtIHx8IHZpZXcsIHR5cGUsIGV2ZW50LFxuXHRcdFx0XHRcdHBvaW50LCBwcmV2UG9pbnQpKTtcblx0fVxuXG5cdHZhciBpdGVtRXZlbnRzTWFwID0ge1xuXHRcdG1vdXNlZG93bjoge1xuXHRcdFx0bW91c2Vkb3duOiAxLFxuXHRcdFx0bW91c2VkcmFnOiAxLFxuXHRcdFx0Y2xpY2s6IDEsXG5cdFx0XHRkb3VibGVjbGljazogMVxuXHRcdH0sXG5cdFx0bW91c2V1cDoge1xuXHRcdFx0bW91c2V1cDogMSxcblx0XHRcdG1vdXNlZHJhZzogMSxcblx0XHRcdGNsaWNrOiAxLFxuXHRcdFx0ZG91YmxlY2xpY2s6IDFcblx0XHR9LFxuXHRcdG1vdXNlbW92ZToge1xuXHRcdFx0bW91c2VkcmFnOiAxLFxuXHRcdFx0bW91c2Vtb3ZlOiAxLFxuXHRcdFx0bW91c2VlbnRlcjogMSxcblx0XHRcdG1vdXNlbGVhdmU6IDFcblx0XHR9XG5cdH07XG5cblx0cmV0dXJuIHtcblx0XHRfdmlld0V2ZW50czogdmlld0V2ZW50cyxcblxuXHRcdF9oYW5kbGVNb3VzZUV2ZW50OiBmdW5jdGlvbih0eXBlLCBldmVudCwgcG9pbnQpIHtcblx0XHRcdHZhciBpdGVtRXZlbnRzID0gdGhpcy5faXRlbUV2ZW50cyxcblx0XHRcdFx0aGl0SXRlbXMgPSBpdGVtRXZlbnRzLm5hdGl2ZVt0eXBlXSxcblx0XHRcdFx0bmF0aXZlTW92ZSA9IHR5cGUgPT09ICdtb3VzZW1vdmUnLFxuXHRcdFx0XHR0b29sID0gdGhpcy5fc2NvcGUudG9vbCxcblx0XHRcdFx0dmlldyA9IHRoaXM7XG5cblx0XHRcdGZ1bmN0aW9uIHJlc3BvbmRzKHR5cGUpIHtcblx0XHRcdFx0cmV0dXJuIGl0ZW1FdmVudHMudmlydHVhbFt0eXBlXSB8fCB2aWV3LnJlc3BvbmRzKHR5cGUpXG5cdFx0XHRcdFx0XHR8fCB0b29sICYmIHRvb2wucmVzcG9uZHModHlwZSk7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChuYXRpdmVNb3ZlICYmIGRyYWdnaW5nICYmIHJlc3BvbmRzKCdtb3VzZWRyYWcnKSlcblx0XHRcdFx0dHlwZSA9ICdtb3VzZWRyYWcnO1xuXHRcdFx0aWYgKCFwb2ludClcblx0XHRcdFx0cG9pbnQgPSB0aGlzLmdldEV2ZW50UG9pbnQoZXZlbnQpO1xuXG5cdFx0XHR2YXIgaW5WaWV3ID0gdGhpcy5nZXRCb3VuZHMoKS5jb250YWlucyhwb2ludCksXG5cdFx0XHRcdGhpdCA9IGhpdEl0ZW1zICYmIGluVmlldyAmJiB2aWV3Ll9wcm9qZWN0LmhpdFRlc3QocG9pbnQsIHtcblx0XHRcdFx0XHR0b2xlcmFuY2U6IDAsXG5cdFx0XHRcdFx0ZmlsbDogdHJ1ZSxcblx0XHRcdFx0XHRzdHJva2U6IHRydWVcblx0XHRcdFx0fSksXG5cdFx0XHRcdGhpdEl0ZW0gPSBoaXQgJiYgaGl0Lml0ZW0gfHwgbnVsbCxcblx0XHRcdFx0aGFuZGxlID0gZmFsc2UsXG5cdFx0XHRcdG1vdXNlID0ge307XG5cdFx0XHRtb3VzZVt0eXBlLnN1YnN0cig1KV0gPSB0cnVlO1xuXG5cdFx0XHRpZiAoaGl0SXRlbXMgJiYgaGl0SXRlbSAhPT0gb3Zlckl0ZW0pIHtcblx0XHRcdFx0aWYgKG92ZXJJdGVtKSB7XG5cdFx0XHRcdFx0ZW1pdE1vdXNlRXZlbnQob3Zlckl0ZW0sIG51bGwsICdtb3VzZWxlYXZlJywgZXZlbnQsIHBvaW50KTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoaGl0SXRlbSkge1xuXHRcdFx0XHRcdGVtaXRNb3VzZUV2ZW50KGhpdEl0ZW0sIG51bGwsICdtb3VzZWVudGVyJywgZXZlbnQsIHBvaW50KTtcblx0XHRcdFx0fVxuXHRcdFx0XHRvdmVySXRlbSA9IGhpdEl0ZW07XG5cdFx0XHR9XG5cdFx0XHRpZiAod2FzSW5WaWV3IF4gaW5WaWV3KSB7XG5cdFx0XHRcdGVtaXRNb3VzZUV2ZW50KHRoaXMsIG51bGwsIGluVmlldyA/ICdtb3VzZWVudGVyJyA6ICdtb3VzZWxlYXZlJyxcblx0XHRcdFx0XHRcdGV2ZW50LCBwb2ludCk7XG5cdFx0XHRcdG92ZXJWaWV3ID0gaW5WaWV3ID8gdGhpcyA6IG51bGw7XG5cdFx0XHRcdGhhbmRsZSA9IHRydWU7XG5cdFx0XHR9XG5cdFx0XHRpZiAoKGluVmlldyB8fCBtb3VzZS5kcmFnKSAmJiAhcG9pbnQuZXF1YWxzKGxhc3RQb2ludCkpIHtcblx0XHRcdFx0ZW1pdE1vdXNlRXZlbnRzKHRoaXMsIGhpdEl0ZW0sIG5hdGl2ZU1vdmUgPyB0eXBlIDogJ21vdXNlbW92ZScsXG5cdFx0XHRcdFx0XHRldmVudCwgcG9pbnQsIGxhc3RQb2ludCk7XG5cdFx0XHRcdGhhbmRsZSA9IHRydWU7XG5cdFx0XHR9XG5cdFx0XHR3YXNJblZpZXcgPSBpblZpZXc7XG5cdFx0XHRpZiAobW91c2UuZG93biAmJiBpblZpZXcgfHwgbW91c2UudXAgJiYgZG93blBvaW50KSB7XG5cdFx0XHRcdGVtaXRNb3VzZUV2ZW50cyh0aGlzLCBoaXRJdGVtLCB0eXBlLCBldmVudCwgcG9pbnQsIGRvd25Qb2ludCk7XG5cdFx0XHRcdGlmIChtb3VzZS5kb3duKSB7XG5cdFx0XHRcdFx0ZGJsQ2xpY2sgPSBoaXRJdGVtID09PSBjbGlja0l0ZW1cblx0XHRcdFx0XHRcdCYmIChEYXRlLm5vdygpIC0gY2xpY2tUaW1lIDwgMzAwKTtcblx0XHRcdFx0XHRkb3duSXRlbSA9IGNsaWNrSXRlbSA9IGhpdEl0ZW07XG5cdFx0XHRcdFx0aWYgKCFwcmV2ZW50ZWQgJiYgaGl0SXRlbSkge1xuXHRcdFx0XHRcdFx0dmFyIGl0ZW0gPSBoaXRJdGVtO1xuXHRcdFx0XHRcdFx0d2hpbGUgKGl0ZW0gJiYgIWl0ZW0ucmVzcG9uZHMoJ21vdXNlZHJhZycpKVxuXHRcdFx0XHRcdFx0XHRpdGVtID0gaXRlbS5fcGFyZW50O1xuXHRcdFx0XHRcdFx0aWYgKGl0ZW0pXG5cdFx0XHRcdFx0XHRcdGRyYWdJdGVtID0gaGl0SXRlbTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZG93blBvaW50ID0gcG9pbnQ7XG5cdFx0XHRcdH0gZWxzZSBpZiAobW91c2UudXApIHtcblx0XHRcdFx0XHRpZiAoIXByZXZlbnRlZCAmJiBoaXRJdGVtID09PSBkb3duSXRlbSkge1xuXHRcdFx0XHRcdFx0Y2xpY2tUaW1lID0gRGF0ZS5ub3coKTtcblx0XHRcdFx0XHRcdGVtaXRNb3VzZUV2ZW50cyh0aGlzLCBoaXRJdGVtLCBkYmxDbGljayA/ICdkb3VibGVjbGljaydcblx0XHRcdFx0XHRcdFx0XHQ6ICdjbGljaycsIGV2ZW50LCBwb2ludCwgZG93blBvaW50KTtcblx0XHRcdFx0XHRcdGRibENsaWNrID0gZmFsc2U7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGRvd25JdGVtID0gZHJhZ0l0ZW0gPSBudWxsO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHdhc0luVmlldyA9IGZhbHNlO1xuXHRcdFx0XHRoYW5kbGUgPSB0cnVlO1xuXHRcdFx0fVxuXHRcdFx0bGFzdFBvaW50ID0gcG9pbnQ7XG5cdFx0XHRpZiAoaGFuZGxlICYmIHRvb2wpIHtcblx0XHRcdFx0Y2FsbGVkID0gdG9vbC5faGFuZGxlTW91c2VFdmVudCh0eXBlLCBldmVudCwgcG9pbnQsIG1vdXNlKVxuXHRcdFx0XHRcdHx8IGNhbGxlZDtcblx0XHRcdH1cblxuXHRcdFx0aWYgKFxuXHRcdFx0XHRldmVudC5jYW5jZWxhYmxlICE9PSBmYWxzZVxuXHRcdFx0XHQmJiAoY2FsbGVkICYmICFtb3VzZS5tb3ZlIHx8IG1vdXNlLmRvd24gJiYgcmVzcG9uZHMoJ21vdXNldXAnKSlcblx0XHRcdCkge1xuXHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRfaGFuZGxlS2V5RXZlbnQ6IGZ1bmN0aW9uKHR5cGUsIGV2ZW50LCBrZXksIGNoYXJhY3Rlcikge1xuXHRcdFx0dmFyIHNjb3BlID0gdGhpcy5fc2NvcGUsXG5cdFx0XHRcdHRvb2wgPSBzY29wZS50b29sLFxuXHRcdFx0XHRrZXlFdmVudDtcblxuXHRcdFx0ZnVuY3Rpb24gZW1pdChvYmopIHtcblx0XHRcdFx0aWYgKG9iai5yZXNwb25kcyh0eXBlKSkge1xuXHRcdFx0XHRcdHBhcGVyID0gc2NvcGU7XG5cdFx0XHRcdFx0b2JqLmVtaXQodHlwZSwga2V5RXZlbnQgPSBrZXlFdmVudFxuXHRcdFx0XHRcdFx0XHR8fCBuZXcgS2V5RXZlbnQodHlwZSwgZXZlbnQsIGtleSwgY2hhcmFjdGVyKSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aWYgKHRoaXMuaXNWaXNpYmxlKCkpIHtcblx0XHRcdFx0ZW1pdCh0aGlzKTtcblx0XHRcdFx0aWYgKHRvb2wgJiYgdG9vbC5yZXNwb25kcyh0eXBlKSlcblx0XHRcdFx0XHRlbWl0KHRvb2wpO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRfY291bnRJdGVtRXZlbnQ6IGZ1bmN0aW9uKHR5cGUsIHNpZ24pIHtcblx0XHRcdHZhciBpdGVtRXZlbnRzID0gdGhpcy5faXRlbUV2ZW50cyxcblx0XHRcdFx0bmF0aXZlID0gaXRlbUV2ZW50cy5uYXRpdmUsXG5cdFx0XHRcdHZpcnR1YWwgPSBpdGVtRXZlbnRzLnZpcnR1YWw7XG5cdFx0XHRmb3IgKHZhciBrZXkgaW4gaXRlbUV2ZW50c01hcCkge1xuXHRcdFx0XHRuYXRpdmVba2V5XSA9IChuYXRpdmVba2V5XSB8fCAwKVxuXHRcdFx0XHRcdFx0KyAoaXRlbUV2ZW50c01hcFtrZXldW3R5cGVdIHx8IDApICogc2lnbjtcblx0XHRcdH1cblx0XHRcdHZpcnR1YWxbdHlwZV0gPSAodmlydHVhbFt0eXBlXSB8fCAwKSArIHNpZ247XG5cdFx0fSxcblxuXHRcdHN0YXRpY3M6IHtcblx0XHRcdHVwZGF0ZUZvY3VzOiB1cGRhdGVGb2N1cyxcblxuXHRcdFx0X3Jlc2V0U3RhdGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkcmFnZ2luZyA9IG1vdXNlRG93biA9IGNhbGxlZCA9IHdhc0luVmlldyA9IGZhbHNlO1xuXHRcdFx0XHRwcmV2Rm9jdXMgPSB0ZW1wRm9jdXMgPSBvdmVyVmlldyA9IGRvd25Qb2ludCA9IGxhc3RQb2ludCA9XG5cdFx0XHRcdFx0ZG93bkl0ZW0gPSBvdmVySXRlbSA9IGRyYWdJdGVtID0gY2xpY2tJdGVtID0gY2xpY2tUaW1lID1cblx0XHRcdFx0XHRkYmxDbGljayA9IG51bGw7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xufSk7XG5cbnZhciBDYW52YXNWaWV3ID0gVmlldy5leHRlbmQoe1xuXHRfY2xhc3M6ICdDYW52YXNWaWV3JyxcblxuXHRpbml0aWFsaXplOiBmdW5jdGlvbiBDYW52YXNWaWV3KHByb2plY3QsIGNhbnZhcykge1xuXHRcdGlmICghKGNhbnZhcyBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MQ2FudmFzRWxlbWVudCkpIHtcblx0XHRcdHZhciBzaXplID0gU2l6ZS5yZWFkKGFyZ3VtZW50cywgMSk7XG5cdFx0XHRpZiAoc2l6ZS5pc1plcm8oKSlcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKFxuXHRcdFx0XHRcdFx0J0Nhbm5vdCBjcmVhdGUgQ2FudmFzVmlldyB3aXRoIHRoZSBwcm92aWRlZCBhcmd1bWVudDogJ1xuXHRcdFx0XHRcdFx0KyBCYXNlLnNsaWNlKGFyZ3VtZW50cywgMSkpO1xuXHRcdFx0Y2FudmFzID0gQ2FudmFzUHJvdmlkZXIuZ2V0Q2FudmFzKHNpemUpO1xuXHRcdH1cblx0XHR2YXIgY3R4ID0gdGhpcy5fY29udGV4dCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuXHRcdGN0eC5zYXZlKCk7XG5cdFx0dGhpcy5fcGl4ZWxSYXRpbyA9IDE7XG5cdFx0aWYgKCEvXm9mZnxmYWxzZSQvLnRlc3QoUGFwZXJTY29wZS5nZXRBdHRyaWJ1dGUoY2FudmFzLCAnaGlkcGknKSkpIHtcblx0XHRcdHZhciBkZXZpY2VSYXRpbyA9IHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvIHx8IDEsXG5cdFx0XHRcdGJhY2tpbmdTdG9yZVJhdGlvID0gRG9tRWxlbWVudC5nZXRQcmVmaXhlZChjdHgsXG5cdFx0XHRcdFx0XHQnYmFja2luZ1N0b3JlUGl4ZWxSYXRpbycpIHx8IDE7XG5cdFx0XHR0aGlzLl9waXhlbFJhdGlvID0gZGV2aWNlUmF0aW8gLyBiYWNraW5nU3RvcmVSYXRpbztcblx0XHR9XG5cdFx0Vmlldy5jYWxsKHRoaXMsIHByb2plY3QsIGNhbnZhcyk7XG5cdFx0dGhpcy5fbmVlZHNVcGRhdGUgPSB0cnVlO1xuXHR9LFxuXG5cdHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuXHRcdHRoaXMuX2NvbnRleHQucmVzdG9yZSgpO1xuXHRcdHJldHVybiByZW1vdmUuYmFzZS5jYWxsKHRoaXMpO1xuXHR9LFxuXG5cdF9zZXRFbGVtZW50U2l6ZTogZnVuY3Rpb24gX3NldEVsZW1lbnRTaXplKHdpZHRoLCBoZWlnaHQpIHtcblx0XHR2YXIgcGl4ZWxSYXRpbyA9IHRoaXMuX3BpeGVsUmF0aW87XG5cdFx0X3NldEVsZW1lbnRTaXplLmJhc2UuY2FsbCh0aGlzLCB3aWR0aCAqIHBpeGVsUmF0aW8sIGhlaWdodCAqIHBpeGVsUmF0aW8pO1xuXHRcdGlmIChwaXhlbFJhdGlvICE9PSAxKSB7XG5cdFx0XHR2YXIgZWxlbWVudCA9IHRoaXMuX2VsZW1lbnQsXG5cdFx0XHRcdGN0eCA9IHRoaXMuX2NvbnRleHQ7XG5cdFx0XHRpZiAoIVBhcGVyU2NvcGUuaGFzQXR0cmlidXRlKGVsZW1lbnQsICdyZXNpemUnKSkge1xuXHRcdFx0XHR2YXIgc3R5bGUgPSBlbGVtZW50LnN0eWxlO1xuXHRcdFx0XHRzdHlsZS53aWR0aCA9IHdpZHRoICsgJ3B4Jztcblx0XHRcdFx0c3R5bGUuaGVpZ2h0ID0gaGVpZ2h0ICsgJ3B4Jztcblx0XHRcdH1cblx0XHRcdGN0eC5yZXN0b3JlKCk7XG5cdFx0XHRjdHguc2F2ZSgpO1xuXHRcdFx0Y3R4LnNjYWxlKHBpeGVsUmF0aW8sIHBpeGVsUmF0aW8pO1xuXHRcdH1cblx0fSxcblxuXHRnZXRQaXhlbFNpemU6IGZ1bmN0aW9uIGdldFBpeGVsU2l6ZShzaXplKSB7XG5cdFx0dmFyIGFnZW50ID0gcGFwZXIuYWdlbnQsXG5cdFx0XHRwaXhlbHM7XG5cdFx0aWYgKGFnZW50ICYmIGFnZW50LmZpcmVmb3gpIHtcblx0XHRcdHBpeGVscyA9IGdldFBpeGVsU2l6ZS5iYXNlLmNhbGwodGhpcywgc2l6ZSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHZhciBjdHggPSB0aGlzLl9jb250ZXh0LFxuXHRcdFx0XHRwcmV2Rm9udCA9IGN0eC5mb250O1xuXHRcdFx0Y3R4LmZvbnQgPSBzaXplICsgJyBzZXJpZic7XG5cdFx0XHRwaXhlbHMgPSBwYXJzZUZsb2F0KGN0eC5mb250KTtcblx0XHRcdGN0eC5mb250ID0gcHJldkZvbnQ7XG5cdFx0fVxuXHRcdHJldHVybiBwaXhlbHM7XG5cdH0sXG5cblx0Z2V0VGV4dFdpZHRoOiBmdW5jdGlvbihmb250LCBsaW5lcykge1xuXHRcdHZhciBjdHggPSB0aGlzLl9jb250ZXh0LFxuXHRcdFx0cHJldkZvbnQgPSBjdHguZm9udCxcblx0XHRcdHdpZHRoID0gMDtcblx0XHRjdHguZm9udCA9IGZvbnQ7XG5cdFx0Zm9yICh2YXIgaSA9IDAsIGwgPSBsaW5lcy5sZW5ndGg7IGkgPCBsOyBpKyspXG5cdFx0XHR3aWR0aCA9IE1hdGgubWF4KHdpZHRoLCBjdHgubWVhc3VyZVRleHQobGluZXNbaV0pLndpZHRoKTtcblx0XHRjdHguZm9udCA9IHByZXZGb250O1xuXHRcdHJldHVybiB3aWR0aDtcblx0fSxcblxuXHR1cGRhdGU6IGZ1bmN0aW9uKCkge1xuXHRcdGlmICghdGhpcy5fbmVlZHNVcGRhdGUpXG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0dmFyIHByb2plY3QgPSB0aGlzLl9wcm9qZWN0LFxuXHRcdFx0Y3R4ID0gdGhpcy5fY29udGV4dCxcblx0XHRcdHNpemUgPSB0aGlzLl92aWV3U2l6ZTtcblx0XHRjdHguY2xlYXJSZWN0KDAsIDAsIHNpemUud2lkdGggKyAxLCBzaXplLmhlaWdodCArIDEpO1xuXHRcdGlmIChwcm9qZWN0KVxuXHRcdFx0cHJvamVjdC5kcmF3KGN0eCwgdGhpcy5fbWF0cml4LCB0aGlzLl9waXhlbFJhdGlvKTtcblx0XHR0aGlzLl9uZWVkc1VwZGF0ZSA9IGZhbHNlO1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG59KTtcblxudmFyIEV2ZW50ID0gQmFzZS5leHRlbmQoe1xuXHRfY2xhc3M6ICdFdmVudCcsXG5cblx0aW5pdGlhbGl6ZTogZnVuY3Rpb24gRXZlbnQoZXZlbnQpIHtcblx0XHR0aGlzLmV2ZW50ID0gZXZlbnQ7XG5cdFx0dGhpcy50eXBlID0gZXZlbnQgJiYgZXZlbnQudHlwZTtcblx0fSxcblxuXHRwcmV2ZW50ZWQ6IGZhbHNlLFxuXHRzdG9wcGVkOiBmYWxzZSxcblxuXHRwcmV2ZW50RGVmYXVsdDogZnVuY3Rpb24oKSB7XG5cdFx0dGhpcy5wcmV2ZW50ZWQgPSB0cnVlO1xuXHRcdHRoaXMuZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0fSxcblxuXHRzdG9wUHJvcGFnYXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdHRoaXMuc3RvcHBlZCA9IHRydWU7XG5cdFx0dGhpcy5ldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblx0fSxcblxuXHRzdG9wOiBmdW5jdGlvbigpIHtcblx0XHR0aGlzLnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdHRoaXMucHJldmVudERlZmF1bHQoKTtcblx0fSxcblxuXHRnZXRUaW1lU3RhbXA6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmV2ZW50LnRpbWVTdGFtcDtcblx0fSxcblxuXHRnZXRNb2RpZmllcnM6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBLZXkubW9kaWZpZXJzO1xuXHR9XG59KTtcblxudmFyIEtleUV2ZW50ID0gRXZlbnQuZXh0ZW5kKHtcblx0X2NsYXNzOiAnS2V5RXZlbnQnLFxuXG5cdGluaXRpYWxpemU6IGZ1bmN0aW9uIEtleUV2ZW50KHR5cGUsIGV2ZW50LCBrZXksIGNoYXJhY3Rlcikge1xuXHRcdHRoaXMudHlwZSA9IHR5cGU7XG5cdFx0dGhpcy5ldmVudCA9IGV2ZW50O1xuXHRcdHRoaXMua2V5ID0ga2V5O1xuXHRcdHRoaXMuY2hhcmFjdGVyID0gY2hhcmFjdGVyO1xuXHR9LFxuXG5cdHRvU3RyaW5nOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gXCJ7IHR5cGU6ICdcIiArIHRoaXMudHlwZVxuXHRcdFx0XHQrIFwiJywga2V5OiAnXCIgKyB0aGlzLmtleVxuXHRcdFx0XHQrIFwiJywgY2hhcmFjdGVyOiAnXCIgKyB0aGlzLmNoYXJhY3RlclxuXHRcdFx0XHQrIFwiJywgbW9kaWZpZXJzOiBcIiArIHRoaXMuZ2V0TW9kaWZpZXJzKClcblx0XHRcdFx0KyBcIiB9XCI7XG5cdH1cbn0pO1xuXG52YXIgS2V5ID0gbmV3IGZ1bmN0aW9uKCkge1xuXHR2YXIga2V5TG9va3VwID0ge1xuXHRcdFx0J1xcdCc6ICd0YWInLFxuXHRcdFx0JyAnOiAnc3BhY2UnLFxuXHRcdFx0J1xcYic6ICdiYWNrc3BhY2UnLFxuXHRcdFx0J1xceDdmJzogJ2RlbGV0ZScsXG5cdFx0XHQnU3BhY2ViYXInOiAnc3BhY2UnLFxuXHRcdFx0J0RlbCc6ICdkZWxldGUnLFxuXHRcdFx0J1dpbic6ICdtZXRhJyxcblx0XHRcdCdFc2MnOiAnZXNjYXBlJ1xuXHRcdH0sXG5cblx0XHRjaGFyTG9va3VwID0ge1xuXHRcdFx0J3RhYic6ICdcXHQnLFxuXHRcdFx0J3NwYWNlJzogJyAnLFxuXHRcdFx0J2VudGVyJzogJ1xccidcblx0XHR9LFxuXG5cdFx0a2V5TWFwID0ge30sXG5cdFx0Y2hhck1hcCA9IHt9LFxuXHRcdG1ldGFGaXhNYXAsXG5cdFx0ZG93bktleSxcblxuXHRcdG1vZGlmaWVycyA9IG5ldyBCYXNlKHtcblx0XHRcdHNoaWZ0OiBmYWxzZSxcblx0XHRcdGNvbnRyb2w6IGZhbHNlLFxuXHRcdFx0YWx0OiBmYWxzZSxcblx0XHRcdG1ldGE6IGZhbHNlLFxuXHRcdFx0Y2Fwc0xvY2s6IGZhbHNlLFxuXHRcdFx0c3BhY2U6IGZhbHNlXG5cdFx0fSkuaW5qZWN0KHtcblx0XHRcdG9wdGlvbjoge1xuXHRcdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHJldHVybiB0aGlzLmFsdDtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblxuXHRcdFx0Y29tbWFuZDoge1xuXHRcdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHZhciBhZ2VudCA9IHBhcGVyICYmIHBhcGVyLmFnZW50O1xuXHRcdFx0XHRcdHJldHVybiBhZ2VudCAmJiBhZ2VudC5tYWMgPyB0aGlzLm1ldGEgOiB0aGlzLmNvbnRyb2w7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KTtcblxuXHRmdW5jdGlvbiBnZXRLZXkoZXZlbnQpIHtcblx0XHR2YXIga2V5ID0gZXZlbnQua2V5IHx8IGV2ZW50LmtleUlkZW50aWZpZXI7XG5cdFx0a2V5ID0gL15VXFwrLy50ZXN0KGtleSlcblx0XHRcdFx0PyBTdHJpbmcuZnJvbUNoYXJDb2RlKHBhcnNlSW50KGtleS5zdWJzdHIoMiksIDE2KSlcblx0XHRcdFx0OiAvXkFycm93W0EtWl0vLnRlc3Qoa2V5KSA/IGtleS5zdWJzdHIoNSlcblx0XHRcdFx0OiBrZXkgPT09ICdVbmlkZW50aWZpZWQnICB8fCBrZXkgPT09IHVuZGVmaW5lZFxuXHRcdFx0XHRcdD8gU3RyaW5nLmZyb21DaGFyQ29kZShldmVudC5rZXlDb2RlKVxuXHRcdFx0XHRcdDoga2V5O1xuXHRcdHJldHVybiBrZXlMb29rdXBba2V5XSB8fFxuXHRcdFx0XHQoa2V5Lmxlbmd0aCA+IDEgPyBCYXNlLmh5cGhlbmF0ZShrZXkpIDoga2V5LnRvTG93ZXJDYXNlKCkpO1xuXHR9XG5cblx0ZnVuY3Rpb24gaGFuZGxlS2V5KGRvd24sIGtleSwgY2hhcmFjdGVyLCBldmVudCkge1xuXHRcdHZhciB0eXBlID0gZG93biA/ICdrZXlkb3duJyA6ICdrZXl1cCcsXG5cdFx0XHR2aWV3ID0gVmlldy5fZm9jdXNlZCxcblx0XHRcdG5hbWU7XG5cdFx0a2V5TWFwW2tleV0gPSBkb3duO1xuXHRcdGlmIChkb3duKSB7XG5cdFx0XHRjaGFyTWFwW2tleV0gPSBjaGFyYWN0ZXI7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGRlbGV0ZSBjaGFyTWFwW2tleV07XG5cdFx0fVxuXHRcdGlmIChrZXkubGVuZ3RoID4gMSAmJiAobmFtZSA9IEJhc2UuY2FtZWxpemUoa2V5KSkgaW4gbW9kaWZpZXJzKSB7XG5cdFx0XHRtb2RpZmllcnNbbmFtZV0gPSBkb3duO1xuXHRcdFx0dmFyIGFnZW50ID0gcGFwZXIgJiYgcGFwZXIuYWdlbnQ7XG5cdFx0XHRpZiAobmFtZSA9PT0gJ21ldGEnICYmIGFnZW50ICYmIGFnZW50Lm1hYykge1xuXHRcdFx0XHRpZiAoZG93bikge1xuXHRcdFx0XHRcdG1ldGFGaXhNYXAgPSB7fTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRmb3IgKHZhciBrIGluIG1ldGFGaXhNYXApIHtcblx0XHRcdFx0XHRcdGlmIChrIGluIGNoYXJNYXApXG5cdFx0XHRcdFx0XHRcdGhhbmRsZUtleShmYWxzZSwgaywgbWV0YUZpeE1hcFtrXSwgZXZlbnQpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRtZXRhRml4TWFwID0gbnVsbDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSBpZiAoZG93biAmJiBtZXRhRml4TWFwKSB7XG5cdFx0XHRtZXRhRml4TWFwW2tleV0gPSBjaGFyYWN0ZXI7XG5cdFx0fVxuXHRcdGlmICh2aWV3KSB7XG5cdFx0XHR2aWV3Ll9oYW5kbGVLZXlFdmVudChkb3duID8gJ2tleWRvd24nIDogJ2tleXVwJywgZXZlbnQsIGtleSxcblx0XHRcdFx0XHRjaGFyYWN0ZXIpO1xuXHRcdH1cblx0fVxuXG5cdERvbUV2ZW50LmFkZChkb2N1bWVudCwge1xuXHRcdGtleWRvd246IGZ1bmN0aW9uKGV2ZW50KSB7XG5cdFx0XHR2YXIga2V5ID0gZ2V0S2V5KGV2ZW50KSxcblx0XHRcdFx0YWdlbnQgPSBwYXBlciAmJiBwYXBlci5hZ2VudDtcblx0XHRcdGlmIChrZXkubGVuZ3RoID4gMSB8fCBhZ2VudCAmJiAoYWdlbnQuY2hyb21lICYmIChldmVudC5hbHRLZXlcblx0XHRcdFx0XHRcdHx8IGFnZW50Lm1hYyAmJiBldmVudC5tZXRhS2V5XG5cdFx0XHRcdFx0XHR8fCAhYWdlbnQubWFjICYmIGV2ZW50LmN0cmxLZXkpKSkge1xuXHRcdFx0XHRoYW5kbGVLZXkodHJ1ZSwga2V5LFxuXHRcdFx0XHRcdFx0Y2hhckxvb2t1cFtrZXldIHx8IChrZXkubGVuZ3RoID4gMSA/ICcnIDoga2V5KSwgZXZlbnQpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZG93bktleSA9IGtleTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0a2V5cHJlc3M6IGZ1bmN0aW9uKGV2ZW50KSB7XG5cdFx0XHRpZiAoZG93bktleSkge1xuXHRcdFx0XHR2YXIga2V5ID0gZ2V0S2V5KGV2ZW50KSxcblx0XHRcdFx0XHRjb2RlID0gZXZlbnQuY2hhckNvZGUsXG5cdFx0XHRcdFx0Y2hhcmFjdGVyID0gY29kZSA+PSAzMiA/IFN0cmluZy5mcm9tQ2hhckNvZGUoY29kZSlcblx0XHRcdFx0XHRcdDoga2V5Lmxlbmd0aCA+IDEgPyAnJyA6IGtleTtcblx0XHRcdFx0aWYgKGtleSAhPT0gZG93bktleSkge1xuXHRcdFx0XHRcdGtleSA9IGNoYXJhY3Rlci50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGhhbmRsZUtleSh0cnVlLCBrZXksIGNoYXJhY3RlciwgZXZlbnQpO1xuXHRcdFx0XHRkb3duS2V5ID0gbnVsbDtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0a2V5dXA6IGZ1bmN0aW9uKGV2ZW50KSB7XG5cdFx0XHR2YXIga2V5ID0gZ2V0S2V5KGV2ZW50KTtcblx0XHRcdGlmIChrZXkgaW4gY2hhck1hcClcblx0XHRcdFx0aGFuZGxlS2V5KGZhbHNlLCBrZXksIGNoYXJNYXBba2V5XSwgZXZlbnQpO1xuXHRcdH1cblx0fSk7XG5cblx0RG9tRXZlbnQuYWRkKHdpbmRvdywge1xuXHRcdGJsdXI6IGZ1bmN0aW9uKGV2ZW50KSB7XG5cdFx0XHRmb3IgKHZhciBrZXkgaW4gY2hhck1hcClcblx0XHRcdFx0aGFuZGxlS2V5KGZhbHNlLCBrZXksIGNoYXJNYXBba2V5XSwgZXZlbnQpO1xuXHRcdH1cblx0fSk7XG5cblx0cmV0dXJuIHtcblx0XHRtb2RpZmllcnM6IG1vZGlmaWVycyxcblxuXHRcdGlzRG93bjogZnVuY3Rpb24oa2V5KSB7XG5cdFx0XHRyZXR1cm4gISFrZXlNYXBba2V5XTtcblx0XHR9XG5cdH07XG59O1xuXG52YXIgTW91c2VFdmVudCA9IEV2ZW50LmV4dGVuZCh7XG5cdF9jbGFzczogJ01vdXNlRXZlbnQnLFxuXG5cdGluaXRpYWxpemU6IGZ1bmN0aW9uIE1vdXNlRXZlbnQodHlwZSwgZXZlbnQsIHBvaW50LCB0YXJnZXQsIGRlbHRhKSB7XG5cdFx0dGhpcy50eXBlID0gdHlwZTtcblx0XHR0aGlzLmV2ZW50ID0gZXZlbnQ7XG5cdFx0dGhpcy5wb2ludCA9IHBvaW50O1xuXHRcdHRoaXMudGFyZ2V0ID0gdGFyZ2V0O1xuXHRcdHRoaXMuZGVsdGEgPSBkZWx0YTtcblx0fSxcblxuXHR0b1N0cmluZzogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIFwieyB0eXBlOiAnXCIgKyB0aGlzLnR5cGVcblx0XHRcdFx0KyBcIicsIHBvaW50OiBcIiArIHRoaXMucG9pbnRcblx0XHRcdFx0KyAnLCB0YXJnZXQ6ICcgKyB0aGlzLnRhcmdldFxuXHRcdFx0XHQrICh0aGlzLmRlbHRhID8gJywgZGVsdGE6ICcgKyB0aGlzLmRlbHRhIDogJycpXG5cdFx0XHRcdCsgJywgbW9kaWZpZXJzOiAnICsgdGhpcy5nZXRNb2RpZmllcnMoKVxuXHRcdFx0XHQrICcgfSc7XG5cdH1cbn0pO1xuXG52YXIgVG9vbEV2ZW50ID0gRXZlbnQuZXh0ZW5kKHtcblx0X2NsYXNzOiAnVG9vbEV2ZW50Jyxcblx0X2l0ZW06IG51bGwsXG5cblx0aW5pdGlhbGl6ZTogZnVuY3Rpb24gVG9vbEV2ZW50KHRvb2wsIHR5cGUsIGV2ZW50KSB7XG5cdFx0dGhpcy50b29sID0gdG9vbDtcblx0XHR0aGlzLnR5cGUgPSB0eXBlO1xuXHRcdHRoaXMuZXZlbnQgPSBldmVudDtcblx0fSxcblxuXHRfY2hvb3NlUG9pbnQ6IGZ1bmN0aW9uKHBvaW50LCB0b29sUG9pbnQpIHtcblx0XHRyZXR1cm4gcG9pbnQgPyBwb2ludCA6IHRvb2xQb2ludCA/IHRvb2xQb2ludC5jbG9uZSgpIDogbnVsbDtcblx0fSxcblxuXHRnZXRQb2ludDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuX2Nob29zZVBvaW50KHRoaXMuX3BvaW50LCB0aGlzLnRvb2wuX3BvaW50KTtcblx0fSxcblxuXHRzZXRQb2ludDogZnVuY3Rpb24ocG9pbnQpIHtcblx0XHR0aGlzLl9wb2ludCA9IHBvaW50O1xuXHR9LFxuXG5cdGdldExhc3RQb2ludDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuX2Nob29zZVBvaW50KHRoaXMuX2xhc3RQb2ludCwgdGhpcy50b29sLl9sYXN0UG9pbnQpO1xuXHR9LFxuXG5cdHNldExhc3RQb2ludDogZnVuY3Rpb24obGFzdFBvaW50KSB7XG5cdFx0dGhpcy5fbGFzdFBvaW50ID0gbGFzdFBvaW50O1xuXHR9LFxuXG5cdGdldERvd25Qb2ludDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuX2Nob29zZVBvaW50KHRoaXMuX2Rvd25Qb2ludCwgdGhpcy50b29sLl9kb3duUG9pbnQpO1xuXHR9LFxuXG5cdHNldERvd25Qb2ludDogZnVuY3Rpb24oZG93blBvaW50KSB7XG5cdFx0dGhpcy5fZG93blBvaW50ID0gZG93blBvaW50O1xuXHR9LFxuXG5cdGdldE1pZGRsZVBvaW50OiBmdW5jdGlvbigpIHtcblx0XHRpZiAoIXRoaXMuX21pZGRsZVBvaW50ICYmIHRoaXMudG9vbC5fbGFzdFBvaW50KSB7XG5cdFx0XHRyZXR1cm4gdGhpcy50b29sLl9wb2ludC5hZGQodGhpcy50b29sLl9sYXN0UG9pbnQpLmRpdmlkZSgyKTtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuX21pZGRsZVBvaW50O1xuXHR9LFxuXG5cdHNldE1pZGRsZVBvaW50OiBmdW5jdGlvbihtaWRkbGVQb2ludCkge1xuXHRcdHRoaXMuX21pZGRsZVBvaW50ID0gbWlkZGxlUG9pbnQ7XG5cdH0sXG5cblx0Z2V0RGVsdGE6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiAhdGhpcy5fZGVsdGEgJiYgdGhpcy50b29sLl9sYXN0UG9pbnRcblx0XHRcdFx0PyB0aGlzLnRvb2wuX3BvaW50LnN1YnRyYWN0KHRoaXMudG9vbC5fbGFzdFBvaW50KVxuXHRcdFx0XHQ6IHRoaXMuX2RlbHRhO1xuXHR9LFxuXG5cdHNldERlbHRhOiBmdW5jdGlvbihkZWx0YSkge1xuXHRcdHRoaXMuX2RlbHRhID0gZGVsdGE7XG5cdH0sXG5cblx0Z2V0Q291bnQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnRvb2xbL15tb3VzZShkb3dufHVwKSQvLnRlc3QodGhpcy50eXBlKVxuXHRcdFx0XHQ/ICdfZG93bkNvdW50JyA6ICdfbW92ZUNvdW50J107XG5cdH0sXG5cblx0c2V0Q291bnQ6IGZ1bmN0aW9uKGNvdW50KSB7XG5cdFx0dGhpcy50b29sWy9ebW91c2UoZG93bnx1cCkkLy50ZXN0KHRoaXMudHlwZSkgPyAnZG93bkNvdW50JyA6ICdjb3VudCddXG5cdFx0XHQ9IGNvdW50O1xuXHR9LFxuXG5cdGdldEl0ZW06IGZ1bmN0aW9uKCkge1xuXHRcdGlmICghdGhpcy5faXRlbSkge1xuXHRcdFx0dmFyIHJlc3VsdCA9IHRoaXMudG9vbC5fc2NvcGUucHJvamVjdC5oaXRUZXN0KHRoaXMuZ2V0UG9pbnQoKSk7XG5cdFx0XHRpZiAocmVzdWx0KSB7XG5cdFx0XHRcdHZhciBpdGVtID0gcmVzdWx0Lml0ZW0sXG5cdFx0XHRcdFx0cGFyZW50ID0gaXRlbS5fcGFyZW50O1xuXHRcdFx0XHR3aGlsZSAoL14oR3JvdXB8Q29tcG91bmRQYXRoKSQvLnRlc3QocGFyZW50Ll9jbGFzcykpIHtcblx0XHRcdFx0XHRpdGVtID0gcGFyZW50O1xuXHRcdFx0XHRcdHBhcmVudCA9IHBhcmVudC5fcGFyZW50O1xuXHRcdFx0XHR9XG5cdFx0XHRcdHRoaXMuX2l0ZW0gPSBpdGVtO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5faXRlbTtcblx0fSxcblxuXHRzZXRJdGVtOiBmdW5jdGlvbihpdGVtKSB7XG5cdFx0dGhpcy5faXRlbSA9IGl0ZW07XG5cdH0sXG5cblx0dG9TdHJpbmc6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiAneyB0eXBlOiAnICsgdGhpcy50eXBlXG5cdFx0XHRcdCsgJywgcG9pbnQ6ICcgKyB0aGlzLmdldFBvaW50KClcblx0XHRcdFx0KyAnLCBjb3VudDogJyArIHRoaXMuZ2V0Q291bnQoKVxuXHRcdFx0XHQrICcsIG1vZGlmaWVyczogJyArIHRoaXMuZ2V0TW9kaWZpZXJzKClcblx0XHRcdFx0KyAnIH0nO1xuXHR9XG59KTtcblxudmFyIFRvb2wgPSBQYXBlclNjb3BlSXRlbS5leHRlbmQoe1xuXHRfY2xhc3M6ICdUb29sJyxcblx0X2xpc3Q6ICd0b29scycsXG5cdF9yZWZlcmVuY2U6ICd0b29sJyxcblx0X2V2ZW50czogWydvbk1vdXNlRG93bicsICdvbk1vdXNlVXAnLCAnb25Nb3VzZURyYWcnLCAnb25Nb3VzZU1vdmUnLFxuXHRcdFx0J29uQWN0aXZhdGUnLCAnb25EZWFjdGl2YXRlJywgJ29uRWRpdE9wdGlvbnMnLCAnb25LZXlEb3duJyxcblx0XHRcdCdvbktleVVwJ10sXG5cblx0aW5pdGlhbGl6ZTogZnVuY3Rpb24gVG9vbChwcm9wcykge1xuXHRcdFBhcGVyU2NvcGVJdGVtLmNhbGwodGhpcyk7XG5cdFx0dGhpcy5fbW92ZUNvdW50ID0gLTE7XG5cdFx0dGhpcy5fZG93bkNvdW50ID0gLTE7XG5cdFx0dGhpcy5zZXQocHJvcHMpO1xuXHR9LFxuXG5cdGdldE1pbkRpc3RhbmNlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5fbWluRGlzdGFuY2U7XG5cdH0sXG5cblx0c2V0TWluRGlzdGFuY2U6IGZ1bmN0aW9uKG1pbkRpc3RhbmNlKSB7XG5cdFx0dGhpcy5fbWluRGlzdGFuY2UgPSBtaW5EaXN0YW5jZTtcblx0XHRpZiAobWluRGlzdGFuY2UgIT0gbnVsbCAmJiB0aGlzLl9tYXhEaXN0YW5jZSAhPSBudWxsXG5cdFx0XHRcdCYmIG1pbkRpc3RhbmNlID4gdGhpcy5fbWF4RGlzdGFuY2UpIHtcblx0XHRcdHRoaXMuX21heERpc3RhbmNlID0gbWluRGlzdGFuY2U7XG5cdFx0fVxuXHR9LFxuXG5cdGdldE1heERpc3RhbmNlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5fbWF4RGlzdGFuY2U7XG5cdH0sXG5cblx0c2V0TWF4RGlzdGFuY2U6IGZ1bmN0aW9uKG1heERpc3RhbmNlKSB7XG5cdFx0dGhpcy5fbWF4RGlzdGFuY2UgPSBtYXhEaXN0YW5jZTtcblx0XHRpZiAodGhpcy5fbWluRGlzdGFuY2UgIT0gbnVsbCAmJiBtYXhEaXN0YW5jZSAhPSBudWxsXG5cdFx0XHRcdCYmIG1heERpc3RhbmNlIDwgdGhpcy5fbWluRGlzdGFuY2UpIHtcblx0XHRcdHRoaXMuX21pbkRpc3RhbmNlID0gbWF4RGlzdGFuY2U7XG5cdFx0fVxuXHR9LFxuXG5cdGdldEZpeGVkRGlzdGFuY2U6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLl9taW5EaXN0YW5jZSA9PSB0aGlzLl9tYXhEaXN0YW5jZVxuXHRcdFx0PyB0aGlzLl9taW5EaXN0YW5jZSA6IG51bGw7XG5cdH0sXG5cblx0c2V0Rml4ZWREaXN0YW5jZTogZnVuY3Rpb24oZGlzdGFuY2UpIHtcblx0XHR0aGlzLl9taW5EaXN0YW5jZSA9IHRoaXMuX21heERpc3RhbmNlID0gZGlzdGFuY2U7XG5cdH0sXG5cblx0X2hhbmRsZU1vdXNlRXZlbnQ6IGZ1bmN0aW9uKHR5cGUsIGV2ZW50LCBwb2ludCwgbW91c2UpIHtcblx0XHRwYXBlciA9IHRoaXMuX3Njb3BlO1xuXHRcdGlmIChtb3VzZS5kcmFnICYmICF0aGlzLnJlc3BvbmRzKHR5cGUpKVxuXHRcdFx0dHlwZSA9ICdtb3VzZW1vdmUnO1xuXHRcdHZhciBtb3ZlID0gbW91c2UubW92ZSB8fCBtb3VzZS5kcmFnLFxuXHRcdFx0cmVzcG9uZHMgPSB0aGlzLnJlc3BvbmRzKHR5cGUpLFxuXHRcdFx0bWluRGlzdGFuY2UgPSB0aGlzLm1pbkRpc3RhbmNlLFxuXHRcdFx0bWF4RGlzdGFuY2UgPSB0aGlzLm1heERpc3RhbmNlLFxuXHRcdFx0Y2FsbGVkID0gZmFsc2UsXG5cdFx0XHR0b29sID0gdGhpcztcblx0XHRmdW5jdGlvbiB1cGRhdGUobWluRGlzdGFuY2UsIG1heERpc3RhbmNlKSB7XG5cdFx0XHR2YXIgcHQgPSBwb2ludCxcblx0XHRcdFx0dG9vbFBvaW50ID0gbW92ZSA/IHRvb2wuX3BvaW50IDogKHRvb2wuX2Rvd25Qb2ludCB8fCBwdCk7XG5cdFx0XHRpZiAobW92ZSkge1xuXHRcdFx0XHRpZiAodG9vbC5fbW92ZUNvdW50ID49IDAgJiYgcHQuZXF1YWxzKHRvb2xQb2ludCkpIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKHRvb2xQb2ludCAmJiAobWluRGlzdGFuY2UgIT0gbnVsbCB8fCBtYXhEaXN0YW5jZSAhPSBudWxsKSkge1xuXHRcdFx0XHRcdHZhciB2ZWN0b3IgPSBwdC5zdWJ0cmFjdCh0b29sUG9pbnQpLFxuXHRcdFx0XHRcdFx0ZGlzdGFuY2UgPSB2ZWN0b3IuZ2V0TGVuZ3RoKCk7XG5cdFx0XHRcdFx0aWYgKGRpc3RhbmNlIDwgKG1pbkRpc3RhbmNlIHx8IDApKVxuXHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRcdGlmIChtYXhEaXN0YW5jZSkge1xuXHRcdFx0XHRcdFx0cHQgPSB0b29sUG9pbnQuYWRkKHZlY3Rvci5ub3JtYWxpemUoXG5cdFx0XHRcdFx0XHRcdFx0TWF0aC5taW4oZGlzdGFuY2UsIG1heERpc3RhbmNlKSkpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHR0b29sLl9tb3ZlQ291bnQrKztcblx0XHRcdH1cblx0XHRcdHRvb2wuX3BvaW50ID0gcHQ7XG5cdFx0XHR0b29sLl9sYXN0UG9pbnQgPSB0b29sUG9pbnQgfHwgcHQ7XG5cdFx0XHRpZiAobW91c2UuZG93bikge1xuXHRcdFx0XHR0b29sLl9tb3ZlQ291bnQgPSAtMTtcblx0XHRcdFx0dG9vbC5fZG93blBvaW50ID0gcHQ7XG5cdFx0XHRcdHRvb2wuX2Rvd25Db3VudCsrO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gZW1pdCgpIHtcblx0XHRcdGlmIChyZXNwb25kcykge1xuXHRcdFx0XHRjYWxsZWQgPSB0b29sLmVtaXQodHlwZSwgbmV3IFRvb2xFdmVudCh0b29sLCB0eXBlLCBldmVudCkpXG5cdFx0XHRcdFx0XHR8fCBjYWxsZWQ7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKG1vdXNlLmRvd24pIHtcblx0XHRcdHVwZGF0ZSgpO1xuXHRcdFx0ZW1pdCgpO1xuXHRcdH0gZWxzZSBpZiAobW91c2UudXApIHtcblx0XHRcdHVwZGF0ZShudWxsLCBtYXhEaXN0YW5jZSk7XG5cdFx0XHRlbWl0KCk7XG5cdFx0fSBlbHNlIGlmIChyZXNwb25kcykge1xuXHRcdFx0d2hpbGUgKHVwZGF0ZShtaW5EaXN0YW5jZSwgbWF4RGlzdGFuY2UpKVxuXHRcdFx0XHRlbWl0KCk7XG5cdFx0fVxuXHRcdHJldHVybiBjYWxsZWQ7XG5cdH1cblxufSk7XG5cbnZhciBUd2VlbiA9IEJhc2UuZXh0ZW5kKEVtaXR0ZXIsIHtcblx0X2NsYXNzOiAnVHdlZW4nLFxuXG5cdHN0YXRpY3M6IHtcblx0XHRlYXNpbmdzOiB7XG5cdFx0XHRsaW5lYXI6IGZ1bmN0aW9uKHQpIHtcblx0XHRcdFx0cmV0dXJuIHQ7XG5cdFx0XHR9LFxuXG5cdFx0XHRlYXNlSW5RdWFkOiBmdW5jdGlvbih0KSB7XG5cdFx0XHRcdHJldHVybiB0ICogdDtcblx0XHRcdH0sXG5cblx0XHRcdGVhc2VPdXRRdWFkOiBmdW5jdGlvbih0KSB7XG5cdFx0XHRcdHJldHVybiB0ICogKDIgLSB0KTtcblx0XHRcdH0sXG5cblx0XHRcdGVhc2VJbk91dFF1YWQ6IGZ1bmN0aW9uKHQpIHtcblx0XHRcdFx0cmV0dXJuIHQgPCAwLjVcblx0XHRcdFx0XHQ/IDIgKiB0ICogdFxuXHRcdFx0XHRcdDogLTEgKyAyICogKDIgLSB0KSAqIHQ7XG5cdFx0XHR9LFxuXG5cdFx0XHRlYXNlSW5DdWJpYzogZnVuY3Rpb24odCkge1xuXHRcdFx0XHRyZXR1cm4gdCAqIHQgKiB0O1xuXHRcdFx0fSxcblxuXHRcdFx0ZWFzZU91dEN1YmljOiBmdW5jdGlvbih0KSB7XG5cdFx0XHRcdHJldHVybiAtLXQgKiB0ICogdCArIDE7XG5cdFx0XHR9LFxuXG5cdFx0XHRlYXNlSW5PdXRDdWJpYzogZnVuY3Rpb24odCkge1xuXHRcdFx0XHRyZXR1cm4gdCA8IDAuNVxuXHRcdFx0XHRcdD8gNCAqIHQgKiB0ICogdFxuXHRcdFx0XHRcdDogKHQgLSAxKSAqICgyICogdCAtIDIpICogKDIgKiB0IC0gMikgKyAxO1xuXHRcdFx0fSxcblxuXHRcdFx0ZWFzZUluUXVhcnQ6IGZ1bmN0aW9uKHQpIHtcblx0XHRcdFx0cmV0dXJuIHQgKiB0ICogdCAqIHQ7XG5cdFx0XHR9LFxuXG5cdFx0XHRlYXNlT3V0UXVhcnQ6IGZ1bmN0aW9uKHQpIHtcblx0XHRcdFx0cmV0dXJuIDEgLSAoLS10KSAqIHQgKiB0ICogdDtcblx0XHRcdH0sXG5cblx0XHRcdGVhc2VJbk91dFF1YXJ0OiBmdW5jdGlvbih0KSB7XG5cdFx0XHRcdHJldHVybiB0IDwgMC41XG5cdFx0XHRcdFx0PyA4ICogdCAqIHQgKiB0ICogdFxuXHRcdFx0XHRcdDogMSAtIDggKiAoLS10KSAqIHQgKiB0ICogdDtcblx0XHRcdH0sXG5cblx0XHRcdGVhc2VJblF1aW50OiBmdW5jdGlvbih0KSB7XG5cdFx0XHRcdHJldHVybiB0ICogdCAqIHQgKiB0ICogdDtcblx0XHRcdH0sXG5cblx0XHRcdGVhc2VPdXRRdWludDogZnVuY3Rpb24odCkge1xuXHRcdFx0XHRyZXR1cm4gMSArIC0tdCAqIHQgKiB0ICogdCAqIHQ7XG5cdFx0XHR9LFxuXG5cdFx0XHRlYXNlSW5PdXRRdWludDogZnVuY3Rpb24odCkge1xuXHRcdFx0XHRyZXR1cm4gdCA8IDAuNVxuXHRcdFx0XHRcdD8gMTYgKiB0ICogdCAqIHQgKiB0ICogdFxuXHRcdFx0XHRcdDogMSArIDE2ICogKC0tdCkgKiB0ICogdCAqIHQgKiB0O1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHRpbml0aWFsaXplOiBmdW5jdGlvbiBUd2VlbihvYmplY3QsIGZyb20sIHRvLCBkdXJhdGlvbiwgZWFzaW5nLCBzdGFydCkge1xuXHRcdHRoaXMub2JqZWN0ID0gb2JqZWN0O1xuXHRcdHZhciB0eXBlID0gdHlwZW9mIGVhc2luZztcblx0XHR2YXIgaXNGdW5jdGlvbiA9IHR5cGUgPT09ICdmdW5jdGlvbic7XG5cdFx0dGhpcy50eXBlID0gaXNGdW5jdGlvblxuXHRcdFx0PyB0eXBlXG5cdFx0XHQ6IHR5cGUgPT09ICdzdHJpbmcnXG5cdFx0XHRcdD8gZWFzaW5nXG5cdFx0XHRcdDogJ2xpbmVhcic7XG5cdFx0dGhpcy5lYXNpbmcgPSBpc0Z1bmN0aW9uID8gZWFzaW5nIDogVHdlZW4uZWFzaW5nc1t0aGlzLnR5cGVdO1xuXHRcdHRoaXMuZHVyYXRpb24gPSBkdXJhdGlvbjtcblx0XHR0aGlzLnJ1bm5pbmcgPSBmYWxzZTtcblxuXHRcdHRoaXMuX3RoZW4gPSBudWxsO1xuXHRcdHRoaXMuX3N0YXJ0VGltZSA9IG51bGw7XG5cdFx0dmFyIHN0YXRlID0gZnJvbSB8fCB0bztcblx0XHR0aGlzLl9rZXlzID0gc3RhdGUgPyBPYmplY3Qua2V5cyhzdGF0ZSkgOiBbXTtcblx0XHR0aGlzLl9wYXJzZWRLZXlzID0gdGhpcy5fcGFyc2VLZXlzKHRoaXMuX2tleXMpO1xuXHRcdHRoaXMuX2Zyb20gPSBzdGF0ZSAmJiB0aGlzLl9nZXRTdGF0ZShmcm9tKTtcblx0XHR0aGlzLl90byA9IHN0YXRlICYmIHRoaXMuX2dldFN0YXRlKHRvKTtcblx0XHRpZiAoc3RhcnQgIT09IGZhbHNlKSB7XG5cdFx0XHR0aGlzLnN0YXJ0KCk7XG5cdFx0fVxuXHR9LFxuXG5cdHRoZW46IGZ1bmN0aW9uKHRoZW4pIHtcblx0XHR0aGlzLl90aGVuID0gdGhlbjtcblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRzdGFydDogZnVuY3Rpb24oKSB7XG5cdFx0dGhpcy5fc3RhcnRUaW1lID0gbnVsbDtcblx0XHR0aGlzLnJ1bm5pbmcgPSB0cnVlO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHN0b3A6IGZ1bmN0aW9uKCkge1xuXHRcdHRoaXMucnVubmluZyA9IGZhbHNlO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHVwZGF0ZTogZnVuY3Rpb24ocHJvZ3Jlc3MpIHtcblx0XHRpZiAodGhpcy5ydW5uaW5nKSB7XG5cdFx0XHRpZiAocHJvZ3Jlc3MgPiAxKSB7XG5cdFx0XHRcdHByb2dyZXNzID0gMTtcblx0XHRcdFx0dGhpcy5ydW5uaW5nID0gZmFsc2U7XG5cdFx0XHR9XG5cblx0XHRcdHZhciBmYWN0b3IgPSB0aGlzLmVhc2luZyhwcm9ncmVzcyksXG5cdFx0XHRcdGtleXMgPSB0aGlzLl9rZXlzLFxuXHRcdFx0XHRnZXRWYWx1ZSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJ1xuXHRcdFx0XHRcdFx0PyB2YWx1ZShmYWN0b3IsIHByb2dyZXNzKVxuXHRcdFx0XHRcdFx0OiB2YWx1ZTtcblx0XHRcdFx0fTtcblx0XHRcdGZvciAodmFyIGkgPSAwLCBsID0ga2V5cyAmJiBrZXlzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuXHRcdFx0XHR2YXIga2V5ID0ga2V5c1tpXSxcblx0XHRcdFx0XHRmcm9tID0gZ2V0VmFsdWUodGhpcy5fZnJvbVtrZXldKSxcblx0XHRcdFx0XHR0byA9IGdldFZhbHVlKHRoaXMuX3RvW2tleV0pLFxuXHRcdFx0XHRcdHZhbHVlID0gKGZyb20gJiYgdG8gJiYgZnJvbS5fX2FkZCAmJiB0by5fX2FkZClcblx0XHRcdFx0XHRcdD8gdG8uX19zdWJ0cmFjdChmcm9tKS5fX211bHRpcGx5KGZhY3RvcikuX19hZGQoZnJvbSlcblx0XHRcdFx0XHRcdDogKCh0byAtIGZyb20pICogZmFjdG9yKSArIGZyb207XG5cdFx0XHRcdHRoaXMuX3NldFByb3BlcnR5KHRoaXMuX3BhcnNlZEtleXNba2V5XSwgdmFsdWUpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIXRoaXMucnVubmluZyAmJiB0aGlzLl90aGVuKSB7XG5cdFx0XHRcdHRoaXMuX3RoZW4odGhpcy5vYmplY3QpO1xuXHRcdFx0fVxuXHRcdFx0aWYgKHRoaXMucmVzcG9uZHMoJ3VwZGF0ZScpKSB7XG5cdFx0XHRcdHRoaXMuZW1pdCgndXBkYXRlJywgbmV3IEJhc2Uoe1xuXHRcdFx0XHRcdHByb2dyZXNzOiBwcm9ncmVzcyxcblx0XHRcdFx0XHRmYWN0b3I6IGZhY3RvclxuXHRcdFx0XHR9KSk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdF9ldmVudHM6IHtcblx0XHRvblVwZGF0ZToge31cblx0fSxcblxuXHRfaGFuZGxlRnJhbWU6IGZ1bmN0aW9uKHRpbWUpIHtcblx0XHR2YXIgc3RhcnRUaW1lID0gdGhpcy5fc3RhcnRUaW1lLFxuXHRcdFx0cHJvZ3Jlc3MgPSBzdGFydFRpbWVcblx0XHRcdFx0PyAodGltZSAtIHN0YXJ0VGltZSkgLyB0aGlzLmR1cmF0aW9uXG5cdFx0XHRcdDogMDtcblx0XHRpZiAoIXN0YXJ0VGltZSkge1xuXHRcdFx0dGhpcy5fc3RhcnRUaW1lID0gdGltZTtcblx0XHR9XG5cdFx0dGhpcy51cGRhdGUocHJvZ3Jlc3MpO1xuXHR9LFxuXG5cdF9nZXRTdGF0ZTogZnVuY3Rpb24oc3RhdGUpIHtcblx0XHR2YXIga2V5cyA9IHRoaXMuX2tleXMsXG5cdFx0XHRyZXN1bHQgPSB7fTtcblx0XHRmb3IgKHZhciBpID0gMCwgbCA9IGtleXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG5cdFx0XHR2YXIga2V5ID0ga2V5c1tpXSxcblx0XHRcdFx0cGF0aCA9IHRoaXMuX3BhcnNlZEtleXNba2V5XSxcblx0XHRcdFx0Y3VycmVudCA9IHRoaXMuX2dldFByb3BlcnR5KHBhdGgpLFxuXHRcdFx0XHR2YWx1ZTtcblx0XHRcdGlmIChzdGF0ZSkge1xuXHRcdFx0XHR2YXIgcmVzb2x2ZWQgPSB0aGlzLl9yZXNvbHZlVmFsdWUoY3VycmVudCwgc3RhdGVba2V5XSk7XG5cdFx0XHRcdHRoaXMuX3NldFByb3BlcnR5KHBhdGgsIHJlc29sdmVkKTtcblx0XHRcdFx0dmFsdWUgPSB0aGlzLl9nZXRQcm9wZXJ0eShwYXRoKTtcblx0XHRcdFx0dmFsdWUgPSB2YWx1ZSAmJiB2YWx1ZS5jbG9uZSA/IHZhbHVlLmNsb25lKCkgOiB2YWx1ZTtcblx0XHRcdFx0dGhpcy5fc2V0UHJvcGVydHkocGF0aCwgY3VycmVudCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR2YWx1ZSA9IGN1cnJlbnQgJiYgY3VycmVudC5jbG9uZSA/IGN1cnJlbnQuY2xvbmUoKSA6IGN1cnJlbnQ7XG5cdFx0XHR9XG5cdFx0XHRyZXN1bHRba2V5XSA9IHZhbHVlO1xuXHRcdH1cblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9LFxuXG5cdF9yZXNvbHZlVmFsdWU6IGZ1bmN0aW9uKGN1cnJlbnQsIHZhbHVlKSB7XG5cdFx0aWYgKHZhbHVlKSB7XG5cdFx0XHRpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkgJiYgdmFsdWUubGVuZ3RoID09PSAyKSB7XG5cdFx0XHRcdHZhciBvcGVyYXRvciA9IHZhbHVlWzBdO1xuXHRcdFx0XHRyZXR1cm4gKFxuXHRcdFx0XHRcdG9wZXJhdG9yICYmXG5cdFx0XHRcdFx0b3BlcmF0b3IubWF0Y2ggJiZcblx0XHRcdFx0XHRvcGVyYXRvci5tYXRjaCgvXlsrXFwtKi9dPS8pXG5cdFx0XHRcdClcblx0XHRcdFx0XHQ/IHRoaXMuX2NhbGN1bGF0ZShjdXJyZW50LCBvcGVyYXRvclswXSwgdmFsdWVbMV0pXG5cdFx0XHRcdFx0OiB2YWx1ZTtcblx0XHRcdH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuXHRcdFx0XHR2YXIgbWF0Y2ggPSB2YWx1ZS5tYXRjaCgvXlsrXFwtKi9dPSguKikvKTtcblx0XHRcdFx0aWYgKG1hdGNoKSB7XG5cdFx0XHRcdFx0dmFyIHBhcnNlZCA9IEpTT04ucGFyc2UobWF0Y2hbMV0ucmVwbGFjZShcblx0XHRcdFx0XHRcdC8oWydcIl0pPyhbYS16QS1aMC05X10rKShbJ1wiXSk/Oi9nLFxuXHRcdFx0XHRcdFx0J1wiJDJcIjogJ1xuXHRcdFx0XHRcdCkpO1xuXHRcdFx0XHRcdHJldHVybiB0aGlzLl9jYWxjdWxhdGUoY3VycmVudCwgdmFsdWVbMF0sIHBhcnNlZCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIHZhbHVlO1xuXHR9LFxuXG5cdF9jYWxjdWxhdGU6IGZ1bmN0aW9uKGxlZnQsIG9wZXJhdG9yLCByaWdodCkge1xuXHRcdHJldHVybiBwYXBlci5QYXBlclNjcmlwdC5jYWxjdWxhdGVCaW5hcnkobGVmdCwgb3BlcmF0b3IsIHJpZ2h0KTtcblx0fSxcblxuXHRfcGFyc2VLZXlzOiBmdW5jdGlvbihrZXlzKSB7XG5cdFx0dmFyIHBhcnNlZCA9IHt9O1xuXHRcdGZvciAodmFyIGkgPSAwLCBsID0ga2V5cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcblx0XHRcdHZhciBrZXkgPSBrZXlzW2ldLFxuXHRcdFx0XHRwYXRoID0ga2V5XG5cdFx0XHRcdFx0LnJlcGxhY2UoL1xcLihbXi5dKikvZywgJy8kMScpXG5cdFx0XHRcdFx0LnJlcGxhY2UoL1xcW1snXCJdPyhbXidcIlxcXV0qKVsnXCJdP1xcXS9nLCAnLyQxJyk7XG5cdFx0XHRwYXJzZWRba2V5XSA9IHBhdGguc3BsaXQoJy8nKTtcblx0XHR9XG5cdFx0cmV0dXJuIHBhcnNlZDtcblx0fSxcblxuXHRfZ2V0UHJvcGVydHk6IGZ1bmN0aW9uKHBhdGgsIG9mZnNldCkge1xuXHRcdHZhciBvYmogPSB0aGlzLm9iamVjdDtcblx0XHRmb3IgKHZhciBpID0gMCwgbCA9IHBhdGgubGVuZ3RoIC0gKG9mZnNldCB8fCAwKTsgaSA8IGwgJiYgb2JqOyBpKyspIHtcblx0XHRcdG9iaiA9IG9ialtwYXRoW2ldXTtcblx0XHR9XG5cdFx0cmV0dXJuIG9iajtcblx0fSxcblxuXHRfc2V0UHJvcGVydHk6IGZ1bmN0aW9uKHBhdGgsIHZhbHVlKSB7XG5cdFx0dmFyIGRlc3QgPSB0aGlzLl9nZXRQcm9wZXJ0eShwYXRoLCAxKTtcblx0XHRpZiAoZGVzdCkge1xuXHRcdFx0ZGVzdFtwYXRoW3BhdGgubGVuZ3RoIC0gMV1dID0gdmFsdWU7XG5cdFx0fVxuXHR9XG59KTtcblxudmFyIEh0dHAgPSB7XG5cdHJlcXVlc3Q6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcblx0XHR2YXIgeGhyID0gbmV3IHNlbGYuWE1MSHR0cFJlcXVlc3QoKTtcblx0XHR4aHIub3Blbigob3B0aW9ucy5tZXRob2QgfHwgJ2dldCcpLnRvVXBwZXJDYXNlKCksIG9wdGlvbnMudXJsLFxuXHRcdFx0XHRCYXNlLnBpY2sob3B0aW9ucy5hc3luYywgdHJ1ZSkpO1xuXHRcdGlmIChvcHRpb25zLm1pbWVUeXBlKVxuXHRcdFx0eGhyLm92ZXJyaWRlTWltZVR5cGUob3B0aW9ucy5taW1lVHlwZSk7XG5cdFx0eGhyLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHN0YXR1cyA9IHhoci5zdGF0dXM7XG5cdFx0XHRpZiAoc3RhdHVzID09PSAwIHx8IHN0YXR1cyA9PT0gMjAwKSB7XG5cdFx0XHRcdGlmIChvcHRpb25zLm9uTG9hZCkge1xuXHRcdFx0XHRcdG9wdGlvbnMub25Mb2FkLmNhbGwoeGhyLCB4aHIucmVzcG9uc2VUZXh0KTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0eGhyLm9uZXJyb3IoKTtcblx0XHRcdH1cblx0XHR9O1xuXHRcdHhoci5vbmVycm9yID0gZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgc3RhdHVzID0geGhyLnN0YXR1cyxcblx0XHRcdFx0bWVzc2FnZSA9ICdDb3VsZCBub3QgbG9hZCBcIicgKyBvcHRpb25zLnVybCArICdcIiAoU3RhdHVzOiAnXG5cdFx0XHRcdFx0XHQrIHN0YXR1cyArICcpJztcblx0XHRcdGlmIChvcHRpb25zLm9uRXJyb3IpIHtcblx0XHRcdFx0b3B0aW9ucy5vbkVycm9yKG1lc3NhZ2UsIHN0YXR1cyk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG5cdFx0XHR9XG5cdFx0fTtcblx0XHRyZXR1cm4geGhyLnNlbmQobnVsbCk7XG5cdH1cbn07XG5cbnZhciBDYW52YXNQcm92aWRlciA9IHtcblx0Y2FudmFzZXM6IFtdLFxuXG5cdGdldENhbnZhczogZnVuY3Rpb24od2lkdGgsIGhlaWdodCkge1xuXHRcdGlmICghd2luZG93KVxuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0dmFyIGNhbnZhcyxcblx0XHRcdGNsZWFyID0gdHJ1ZTtcblx0XHRpZiAodHlwZW9mIHdpZHRoID09PSAnb2JqZWN0Jykge1xuXHRcdFx0aGVpZ2h0ID0gd2lkdGguaGVpZ2h0O1xuXHRcdFx0d2lkdGggPSB3aWR0aC53aWR0aDtcblx0XHR9XG5cdFx0aWYgKHRoaXMuY2FudmFzZXMubGVuZ3RoKSB7XG5cdFx0XHRjYW52YXMgPSB0aGlzLmNhbnZhc2VzLnBvcCgpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcblx0XHRcdGNsZWFyID0gZmFsc2U7XG5cdFx0fVxuXHRcdHZhciBjdHggPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcblx0XHRpZiAoIWN0eCkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdDYW52YXMgJyArIGNhbnZhcyArXG5cdFx0XHRcdFx0JyBpcyB1bmFibGUgdG8gcHJvdmlkZSBhIDJEIGNvbnRleHQuJyk7XG5cdFx0fVxuXHRcdGlmIChjYW52YXMud2lkdGggPT09IHdpZHRoICYmIGNhbnZhcy5oZWlnaHQgPT09IGhlaWdodCkge1xuXHRcdFx0aWYgKGNsZWFyKVxuXHRcdFx0XHRjdHguY2xlYXJSZWN0KDAsIDAsIHdpZHRoICsgMSwgaGVpZ2h0ICsgMSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGNhbnZhcy53aWR0aCA9IHdpZHRoO1xuXHRcdFx0Y2FudmFzLmhlaWdodCA9IGhlaWdodDtcblx0XHR9XG5cdFx0Y3R4LnNhdmUoKTtcblx0XHRyZXR1cm4gY2FudmFzO1xuXHR9LFxuXG5cdGdldENvbnRleHQ6IGZ1bmN0aW9uKHdpZHRoLCBoZWlnaHQpIHtcblx0XHR2YXIgY2FudmFzID0gdGhpcy5nZXRDYW52YXMod2lkdGgsIGhlaWdodCk7XG5cdFx0cmV0dXJuIGNhbnZhcyA/IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpIDogbnVsbDtcblx0fSxcblxuXHRyZWxlYXNlOiBmdW5jdGlvbihvYmopIHtcblx0XHR2YXIgY2FudmFzID0gb2JqICYmIG9iai5jYW52YXMgPyBvYmouY2FudmFzIDogb2JqO1xuXHRcdGlmIChjYW52YXMgJiYgY2FudmFzLmdldENvbnRleHQpIHtcblx0XHRcdGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpLnJlc3RvcmUoKTtcblx0XHRcdHRoaXMuY2FudmFzZXMucHVzaChjYW52YXMpO1xuXHRcdH1cblx0fVxufTtcblxudmFyIEJsZW5kTW9kZSA9IG5ldyBmdW5jdGlvbigpIHtcblx0dmFyIG1pbiA9IE1hdGgubWluLFxuXHRcdG1heCA9IE1hdGgubWF4LFxuXHRcdGFicyA9IE1hdGguYWJzLFxuXHRcdHNyLCBzZywgc2IsIHNhLFxuXHRcdGJyLCBiZywgYmIsIGJhLFxuXHRcdGRyLCBkZywgZGI7XG5cblx0ZnVuY3Rpb24gZ2V0THVtKHIsIGcsIGIpIHtcblx0XHRyZXR1cm4gMC4yOTg5ICogciArIDAuNTg3ICogZyArIDAuMTE0ICogYjtcblx0fVxuXG5cdGZ1bmN0aW9uIHNldEx1bShyLCBnLCBiLCBsKSB7XG5cdFx0dmFyIGQgPSBsIC0gZ2V0THVtKHIsIGcsIGIpO1xuXHRcdGRyID0gciArIGQ7XG5cdFx0ZGcgPSBnICsgZDtcblx0XHRkYiA9IGIgKyBkO1xuXHRcdHZhciBsID0gZ2V0THVtKGRyLCBkZywgZGIpLFxuXHRcdFx0bW4gPSBtaW4oZHIsIGRnLCBkYiksXG5cdFx0XHRteCA9IG1heChkciwgZGcsIGRiKTtcblx0XHRpZiAobW4gPCAwKSB7XG5cdFx0XHR2YXIgbG1uID0gbCAtIG1uO1xuXHRcdFx0ZHIgPSBsICsgKGRyIC0gbCkgKiBsIC8gbG1uO1xuXHRcdFx0ZGcgPSBsICsgKGRnIC0gbCkgKiBsIC8gbG1uO1xuXHRcdFx0ZGIgPSBsICsgKGRiIC0gbCkgKiBsIC8gbG1uO1xuXHRcdH1cblx0XHRpZiAobXggPiAyNTUpIHtcblx0XHRcdHZhciBsbiA9IDI1NSAtIGwsXG5cdFx0XHRcdG14bCA9IG14IC0gbDtcblx0XHRcdGRyID0gbCArIChkciAtIGwpICogbG4gLyBteGw7XG5cdFx0XHRkZyA9IGwgKyAoZGcgLSBsKSAqIGxuIC8gbXhsO1xuXHRcdFx0ZGIgPSBsICsgKGRiIC0gbCkgKiBsbiAvIG14bDtcblx0XHR9XG5cdH1cblxuXHRmdW5jdGlvbiBnZXRTYXQociwgZywgYikge1xuXHRcdHJldHVybiBtYXgociwgZywgYikgLSBtaW4ociwgZywgYik7XG5cdH1cblxuXHRmdW5jdGlvbiBzZXRTYXQociwgZywgYiwgcykge1xuXHRcdHZhciBjb2wgPSBbciwgZywgYl0sXG5cdFx0XHRteCA9IG1heChyLCBnLCBiKSxcblx0XHRcdG1uID0gbWluKHIsIGcsIGIpLFxuXHRcdFx0bWQ7XG5cdFx0bW4gPSBtbiA9PT0gciA/IDAgOiBtbiA9PT0gZyA/IDEgOiAyO1xuXHRcdG14ID0gbXggPT09IHIgPyAwIDogbXggPT09IGcgPyAxIDogMjtcblx0XHRtZCA9IG1pbihtbiwgbXgpID09PSAwID8gbWF4KG1uLCBteCkgPT09IDEgPyAyIDogMSA6IDA7XG5cdFx0aWYgKGNvbFtteF0gPiBjb2xbbW5dKSB7XG5cdFx0XHRjb2xbbWRdID0gKGNvbFttZF0gLSBjb2xbbW5dKSAqIHMgLyAoY29sW214XSAtIGNvbFttbl0pO1xuXHRcdFx0Y29sW214XSA9IHM7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGNvbFttZF0gPSBjb2xbbXhdID0gMDtcblx0XHR9XG5cdFx0Y29sW21uXSA9IDA7XG5cdFx0ZHIgPSBjb2xbMF07XG5cdFx0ZGcgPSBjb2xbMV07XG5cdFx0ZGIgPSBjb2xbMl07XG5cdH1cblxuXHR2YXIgbW9kZXMgPSB7XG5cdFx0bXVsdGlwbHk6IGZ1bmN0aW9uKCkge1xuXHRcdFx0ZHIgPSBiciAqIHNyIC8gMjU1O1xuXHRcdFx0ZGcgPSBiZyAqIHNnIC8gMjU1O1xuXHRcdFx0ZGIgPSBiYiAqIHNiIC8gMjU1O1xuXHRcdH0sXG5cblx0XHRzY3JlZW46IGZ1bmN0aW9uKCkge1xuXHRcdFx0ZHIgPSBiciArIHNyIC0gKGJyICogc3IgLyAyNTUpO1xuXHRcdFx0ZGcgPSBiZyArIHNnIC0gKGJnICogc2cgLyAyNTUpO1xuXHRcdFx0ZGIgPSBiYiArIHNiIC0gKGJiICogc2IgLyAyNTUpO1xuXHRcdH0sXG5cblx0XHRvdmVybGF5OiBmdW5jdGlvbigpIHtcblx0XHRcdGRyID0gYnIgPCAxMjggPyAyICogYnIgKiBzciAvIDI1NSA6IDI1NSAtIDIgKiAoMjU1IC0gYnIpICogKDI1NSAtIHNyKSAvIDI1NTtcblx0XHRcdGRnID0gYmcgPCAxMjggPyAyICogYmcgKiBzZyAvIDI1NSA6IDI1NSAtIDIgKiAoMjU1IC0gYmcpICogKDI1NSAtIHNnKSAvIDI1NTtcblx0XHRcdGRiID0gYmIgPCAxMjggPyAyICogYmIgKiBzYiAvIDI1NSA6IDI1NSAtIDIgKiAoMjU1IC0gYmIpICogKDI1NSAtIHNiKSAvIDI1NTtcblx0XHR9LFxuXG5cdFx0J3NvZnQtbGlnaHQnOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciB0ID0gc3IgKiBiciAvIDI1NTtcblx0XHRcdGRyID0gdCArIGJyICogKDI1NSAtICgyNTUgLSBicikgKiAoMjU1IC0gc3IpIC8gMjU1IC0gdCkgLyAyNTU7XG5cdFx0XHR0ID0gc2cgKiBiZyAvIDI1NTtcblx0XHRcdGRnID0gdCArIGJnICogKDI1NSAtICgyNTUgLSBiZykgKiAoMjU1IC0gc2cpIC8gMjU1IC0gdCkgLyAyNTU7XG5cdFx0XHR0ID0gc2IgKiBiYiAvIDI1NTtcblx0XHRcdGRiID0gdCArIGJiICogKDI1NSAtICgyNTUgLSBiYikgKiAoMjU1IC0gc2IpIC8gMjU1IC0gdCkgLyAyNTU7XG5cdFx0fSxcblxuXHRcdCdoYXJkLWxpZ2h0JzogZnVuY3Rpb24oKSB7XG5cdFx0XHRkciA9IHNyIDwgMTI4ID8gMiAqIHNyICogYnIgLyAyNTUgOiAyNTUgLSAyICogKDI1NSAtIHNyKSAqICgyNTUgLSBicikgLyAyNTU7XG5cdFx0XHRkZyA9IHNnIDwgMTI4ID8gMiAqIHNnICogYmcgLyAyNTUgOiAyNTUgLSAyICogKDI1NSAtIHNnKSAqICgyNTUgLSBiZykgLyAyNTU7XG5cdFx0XHRkYiA9IHNiIDwgMTI4ID8gMiAqIHNiICogYmIgLyAyNTUgOiAyNTUgLSAyICogKDI1NSAtIHNiKSAqICgyNTUgLSBiYikgLyAyNTU7XG5cdFx0fSxcblxuXHRcdCdjb2xvci1kb2RnZSc6IGZ1bmN0aW9uKCkge1xuXHRcdFx0ZHIgPSBiciA9PT0gMCA/IDAgOiBzciA9PT0gMjU1ID8gMjU1IDogbWluKDI1NSwgMjU1ICogYnIgLyAoMjU1IC0gc3IpKTtcblx0XHRcdGRnID0gYmcgPT09IDAgPyAwIDogc2cgPT09IDI1NSA/IDI1NSA6IG1pbigyNTUsIDI1NSAqIGJnIC8gKDI1NSAtIHNnKSk7XG5cdFx0XHRkYiA9IGJiID09PSAwID8gMCA6IHNiID09PSAyNTUgPyAyNTUgOiBtaW4oMjU1LCAyNTUgKiBiYiAvICgyNTUgLSBzYikpO1xuXHRcdH0sXG5cblx0XHQnY29sb3ItYnVybic6IGZ1bmN0aW9uKCkge1xuXHRcdFx0ZHIgPSBiciA9PT0gMjU1ID8gMjU1IDogc3IgPT09IDAgPyAwIDogbWF4KDAsIDI1NSAtICgyNTUgLSBicikgKiAyNTUgLyBzcik7XG5cdFx0XHRkZyA9IGJnID09PSAyNTUgPyAyNTUgOiBzZyA9PT0gMCA/IDAgOiBtYXgoMCwgMjU1IC0gKDI1NSAtIGJnKSAqIDI1NSAvIHNnKTtcblx0XHRcdGRiID0gYmIgPT09IDI1NSA/IDI1NSA6IHNiID09PSAwID8gMCA6IG1heCgwLCAyNTUgLSAoMjU1IC0gYmIpICogMjU1IC8gc2IpO1xuXHRcdH0sXG5cblx0XHRkYXJrZW46IGZ1bmN0aW9uKCkge1xuXHRcdFx0ZHIgPSBiciA8IHNyID8gYnIgOiBzcjtcblx0XHRcdGRnID0gYmcgPCBzZyA/IGJnIDogc2c7XG5cdFx0XHRkYiA9IGJiIDwgc2IgPyBiYiA6IHNiO1xuXHRcdH0sXG5cblx0XHRsaWdodGVuOiBmdW5jdGlvbigpIHtcblx0XHRcdGRyID0gYnIgPiBzciA/IGJyIDogc3I7XG5cdFx0XHRkZyA9IGJnID4gc2cgPyBiZyA6IHNnO1xuXHRcdFx0ZGIgPSBiYiA+IHNiID8gYmIgOiBzYjtcblx0XHR9LFxuXG5cdFx0ZGlmZmVyZW5jZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRkciA9IGJyIC0gc3I7XG5cdFx0XHRpZiAoZHIgPCAwKVxuXHRcdFx0XHRkciA9IC1kcjtcblx0XHRcdGRnID0gYmcgLSBzZztcblx0XHRcdGlmIChkZyA8IDApXG5cdFx0XHRcdGRnID0gLWRnO1xuXHRcdFx0ZGIgPSBiYiAtIHNiO1xuXHRcdFx0aWYgKGRiIDwgMClcblx0XHRcdFx0ZGIgPSAtZGI7XG5cdFx0fSxcblxuXHRcdGV4Y2x1c2lvbjogZnVuY3Rpb24oKSB7XG5cdFx0XHRkciA9IGJyICsgc3IgKiAoMjU1IC0gYnIgLSBicikgLyAyNTU7XG5cdFx0XHRkZyA9IGJnICsgc2cgKiAoMjU1IC0gYmcgLSBiZykgLyAyNTU7XG5cdFx0XHRkYiA9IGJiICsgc2IgKiAoMjU1IC0gYmIgLSBiYikgLyAyNTU7XG5cdFx0fSxcblxuXHRcdGh1ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRzZXRTYXQoc3IsIHNnLCBzYiwgZ2V0U2F0KGJyLCBiZywgYmIpKTtcblx0XHRcdHNldEx1bShkciwgZGcsIGRiLCBnZXRMdW0oYnIsIGJnLCBiYikpO1xuXHRcdH0sXG5cblx0XHRzYXR1cmF0aW9uOiBmdW5jdGlvbigpIHtcblx0XHRcdHNldFNhdChiciwgYmcsIGJiLCBnZXRTYXQoc3IsIHNnLCBzYikpO1xuXHRcdFx0c2V0THVtKGRyLCBkZywgZGIsIGdldEx1bShiciwgYmcsIGJiKSk7XG5cdFx0fSxcblxuXHRcdGx1bWlub3NpdHk6IGZ1bmN0aW9uKCkge1xuXHRcdFx0c2V0THVtKGJyLCBiZywgYmIsIGdldEx1bShzciwgc2csIHNiKSk7XG5cdFx0fSxcblxuXHRcdGNvbG9yOiBmdW5jdGlvbigpIHtcblx0XHRcdHNldEx1bShzciwgc2csIHNiLCBnZXRMdW0oYnIsIGJnLCBiYikpO1xuXHRcdH0sXG5cblx0XHRhZGQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0ZHIgPSBtaW4oYnIgKyBzciwgMjU1KTtcblx0XHRcdGRnID0gbWluKGJnICsgc2csIDI1NSk7XG5cdFx0XHRkYiA9IG1pbihiYiArIHNiLCAyNTUpO1xuXHRcdH0sXG5cblx0XHRzdWJ0cmFjdDogZnVuY3Rpb24oKSB7XG5cdFx0XHRkciA9IG1heChiciAtIHNyLCAwKTtcblx0XHRcdGRnID0gbWF4KGJnIC0gc2csIDApO1xuXHRcdFx0ZGIgPSBtYXgoYmIgLSBzYiwgMCk7XG5cdFx0fSxcblxuXHRcdGF2ZXJhZ2U6IGZ1bmN0aW9uKCkge1xuXHRcdFx0ZHIgPSAoYnIgKyBzcikgLyAyO1xuXHRcdFx0ZGcgPSAoYmcgKyBzZykgLyAyO1xuXHRcdFx0ZGIgPSAoYmIgKyBzYikgLyAyO1xuXHRcdH0sXG5cblx0XHRuZWdhdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0XHRkciA9IDI1NSAtIGFicygyNTUgLSBzciAtIGJyKTtcblx0XHRcdGRnID0gMjU1IC0gYWJzKDI1NSAtIHNnIC0gYmcpO1xuXHRcdFx0ZGIgPSAyNTUgLSBhYnMoMjU1IC0gc2IgLSBiYik7XG5cdFx0fVxuXHR9O1xuXG5cdHZhciBuYXRpdmVNb2RlcyA9IHRoaXMubmF0aXZlTW9kZXMgPSBCYXNlLmVhY2goW1xuXHRcdCdzb3VyY2Utb3ZlcicsICdzb3VyY2UtaW4nLCAnc291cmNlLW91dCcsICdzb3VyY2UtYXRvcCcsXG5cdFx0J2Rlc3RpbmF0aW9uLW92ZXInLCAnZGVzdGluYXRpb24taW4nLCAnZGVzdGluYXRpb24tb3V0Jyxcblx0XHQnZGVzdGluYXRpb24tYXRvcCcsICdsaWdodGVyJywgJ2RhcmtlcicsICdjb3B5JywgJ3hvcidcblx0XSwgZnVuY3Rpb24obW9kZSkge1xuXHRcdHRoaXNbbW9kZV0gPSB0cnVlO1xuXHR9LCB7fSk7XG5cblx0dmFyIGN0eCA9IENhbnZhc1Byb3ZpZGVyLmdldENvbnRleHQoMSwgMSk7XG5cdGlmIChjdHgpIHtcblx0XHRCYXNlLmVhY2gobW9kZXMsIGZ1bmN0aW9uKGZ1bmMsIG1vZGUpIHtcblx0XHRcdHZhciBkYXJrZW4gPSBtb2RlID09PSAnZGFya2VuJyxcblx0XHRcdFx0b2sgPSBmYWxzZTtcblx0XHRcdGN0eC5zYXZlKCk7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHRjdHguZmlsbFN0eWxlID0gZGFya2VuID8gJyMzMDAnIDogJyNhMDAnO1xuXHRcdFx0XHRjdHguZmlsbFJlY3QoMCwgMCwgMSwgMSk7XG5cdFx0XHRcdGN0eC5nbG9iYWxDb21wb3NpdGVPcGVyYXRpb24gPSBtb2RlO1xuXHRcdFx0XHRpZiAoY3R4Lmdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbiA9PT0gbW9kZSkge1xuXHRcdFx0XHRcdGN0eC5maWxsU3R5bGUgPSBkYXJrZW4gPyAnI2EwMCcgOiAnIzMwMCc7XG5cdFx0XHRcdFx0Y3R4LmZpbGxSZWN0KDAsIDAsIDEsIDEpO1xuXHRcdFx0XHRcdG9rID0gY3R4LmdldEltYWdlRGF0YSgwLCAwLCAxLCAxKS5kYXRhWzBdICE9PSBkYXJrZW5cblx0XHRcdFx0XHRcdFx0PyAxNzAgOiA1MTtcblx0XHRcdFx0fVxuXHRcdFx0fSBjYXRjaCAoZSkge31cblx0XHRcdGN0eC5yZXN0b3JlKCk7XG5cdFx0XHRuYXRpdmVNb2Rlc1ttb2RlXSA9IG9rO1xuXHRcdH0pO1xuXHRcdENhbnZhc1Byb3ZpZGVyLnJlbGVhc2UoY3R4KTtcblx0fVxuXG5cdHRoaXMucHJvY2VzcyA9IGZ1bmN0aW9uKG1vZGUsIHNyY0NvbnRleHQsIGRzdENvbnRleHQsIGFscGhhLCBvZmZzZXQpIHtcblx0XHR2YXIgc3JjQ2FudmFzID0gc3JjQ29udGV4dC5jYW52YXMsXG5cdFx0XHRub3JtYWwgPSBtb2RlID09PSAnbm9ybWFsJztcblx0XHRpZiAobm9ybWFsIHx8IG5hdGl2ZU1vZGVzW21vZGVdKSB7XG5cdFx0XHRkc3RDb250ZXh0LnNhdmUoKTtcblx0XHRcdGRzdENvbnRleHQuc2V0VHJhbnNmb3JtKDEsIDAsIDAsIDEsIDAsIDApO1xuXHRcdFx0ZHN0Q29udGV4dC5nbG9iYWxBbHBoYSA9IGFscGhhO1xuXHRcdFx0aWYgKCFub3JtYWwpXG5cdFx0XHRcdGRzdENvbnRleHQuZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uID0gbW9kZTtcblx0XHRcdGRzdENvbnRleHQuZHJhd0ltYWdlKHNyY0NhbnZhcywgb2Zmc2V0LngsIG9mZnNldC55KTtcblx0XHRcdGRzdENvbnRleHQucmVzdG9yZSgpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR2YXIgcHJvY2VzcyA9IG1vZGVzW21vZGVdO1xuXHRcdFx0aWYgKCFwcm9jZXNzKVxuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR2YXIgZHN0RGF0YSA9IGRzdENvbnRleHQuZ2V0SW1hZ2VEYXRhKG9mZnNldC54LCBvZmZzZXQueSxcblx0XHRcdFx0XHRzcmNDYW52YXMud2lkdGgsIHNyY0NhbnZhcy5oZWlnaHQpLFxuXHRcdFx0XHRkc3QgPSBkc3REYXRhLmRhdGEsXG5cdFx0XHRcdHNyYyA9IHNyY0NvbnRleHQuZ2V0SW1hZ2VEYXRhKDAsIDAsXG5cdFx0XHRcdFx0c3JjQ2FudmFzLndpZHRoLCBzcmNDYW52YXMuaGVpZ2h0KS5kYXRhO1xuXHRcdFx0Zm9yICh2YXIgaSA9IDAsIGwgPSBkc3QubGVuZ3RoOyBpIDwgbDsgaSArPSA0KSB7XG5cdFx0XHRcdHNyID0gc3JjW2ldO1xuXHRcdFx0XHRiciA9IGRzdFtpXTtcblx0XHRcdFx0c2cgPSBzcmNbaSArIDFdO1xuXHRcdFx0XHRiZyA9IGRzdFtpICsgMV07XG5cdFx0XHRcdHNiID0gc3JjW2kgKyAyXTtcblx0XHRcdFx0YmIgPSBkc3RbaSArIDJdO1xuXHRcdFx0XHRzYSA9IHNyY1tpICsgM107XG5cdFx0XHRcdGJhID0gZHN0W2kgKyAzXTtcblx0XHRcdFx0cHJvY2VzcygpO1xuXHRcdFx0XHR2YXIgYTEgPSBzYSAqIGFscGhhIC8gMjU1LFxuXHRcdFx0XHRcdGEyID0gMSAtIGExO1xuXHRcdFx0XHRkc3RbaV0gPSBhMSAqIGRyICsgYTIgKiBicjtcblx0XHRcdFx0ZHN0W2kgKyAxXSA9IGExICogZGcgKyBhMiAqIGJnO1xuXHRcdFx0XHRkc3RbaSArIDJdID0gYTEgKiBkYiArIGEyICogYmI7XG5cdFx0XHRcdGRzdFtpICsgM10gPSBzYSAqIGFscGhhICsgYTIgKiBiYTtcblx0XHRcdH1cblx0XHRcdGRzdENvbnRleHQucHV0SW1hZ2VEYXRhKGRzdERhdGEsIG9mZnNldC54LCBvZmZzZXQueSk7XG5cdFx0fVxuXHR9O1xufTtcblxudmFyIFN2Z0VsZW1lbnQgPSBuZXcgZnVuY3Rpb24oKSB7XG5cdHZhciBzdmcgPSAnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLFxuXHRcdHhtbG5zID0gJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAveG1sbnMnLFxuXHRcdHhsaW5rID0gJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsnLFxuXHRcdGF0dHJpYnV0ZU5hbWVzcGFjZSA9IHtcblx0XHRcdGhyZWY6IHhsaW5rLFxuXHRcdFx0eGxpbms6IHhtbG5zLFxuXHRcdFx0eG1sbnM6IHhtbG5zICsgJy8nLFxuXHRcdFx0J3htbG5zOnhsaW5rJzogeG1sbnMgKyAnLydcblx0XHR9O1xuXG5cdGZ1bmN0aW9uIGNyZWF0ZSh0YWcsIGF0dHJpYnV0ZXMsIGZvcm1hdHRlcikge1xuXHRcdHJldHVybiBzZXQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKHN2ZywgdGFnKSwgYXR0cmlidXRlcywgZm9ybWF0dGVyKTtcblx0fVxuXG5cdGZ1bmN0aW9uIGdldChub2RlLCBuYW1lKSB7XG5cdFx0dmFyIG5hbWVzcGFjZSA9IGF0dHJpYnV0ZU5hbWVzcGFjZVtuYW1lXSxcblx0XHRcdHZhbHVlID0gbmFtZXNwYWNlXG5cdFx0XHRcdD8gbm9kZS5nZXRBdHRyaWJ1dGVOUyhuYW1lc3BhY2UsIG5hbWUpXG5cdFx0XHRcdDogbm9kZS5nZXRBdHRyaWJ1dGUobmFtZSk7XG5cdFx0cmV0dXJuIHZhbHVlID09PSAnbnVsbCcgPyBudWxsIDogdmFsdWU7XG5cdH1cblxuXHRmdW5jdGlvbiBzZXQobm9kZSwgYXR0cmlidXRlcywgZm9ybWF0dGVyKSB7XG5cdFx0Zm9yICh2YXIgbmFtZSBpbiBhdHRyaWJ1dGVzKSB7XG5cdFx0XHR2YXIgdmFsdWUgPSBhdHRyaWJ1dGVzW25hbWVdLFxuXHRcdFx0XHRuYW1lc3BhY2UgPSBhdHRyaWJ1dGVOYW1lc3BhY2VbbmFtZV07XG5cdFx0XHRpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyAmJiBmb3JtYXR0ZXIpXG5cdFx0XHRcdHZhbHVlID0gZm9ybWF0dGVyLm51bWJlcih2YWx1ZSk7XG5cdFx0XHRpZiAobmFtZXNwYWNlKSB7XG5cdFx0XHRcdG5vZGUuc2V0QXR0cmlidXRlTlMobmFtZXNwYWNlLCBuYW1lLCB2YWx1ZSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRub2RlLnNldEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBub2RlO1xuXHR9XG5cblx0cmV0dXJuIHtcblx0XHRzdmc6IHN2Zyxcblx0XHR4bWxuczogeG1sbnMsXG5cdFx0eGxpbms6IHhsaW5rLFxuXG5cdFx0Y3JlYXRlOiBjcmVhdGUsXG5cdFx0Z2V0OiBnZXQsXG5cdFx0c2V0OiBzZXRcblx0fTtcbn07XG5cbnZhciBTdmdTdHlsZXMgPSBCYXNlLmVhY2goe1xuXHRmaWxsQ29sb3I6IFsnZmlsbCcsICdjb2xvciddLFxuXHRmaWxsUnVsZTogWydmaWxsLXJ1bGUnLCAnc3RyaW5nJ10sXG5cdHN0cm9rZUNvbG9yOiBbJ3N0cm9rZScsICdjb2xvciddLFxuXHRzdHJva2VXaWR0aDogWydzdHJva2Utd2lkdGgnLCAnbnVtYmVyJ10sXG5cdHN0cm9rZUNhcDogWydzdHJva2UtbGluZWNhcCcsICdzdHJpbmcnXSxcblx0c3Ryb2tlSm9pbjogWydzdHJva2UtbGluZWpvaW4nLCAnc3RyaW5nJ10sXG5cdHN0cm9rZVNjYWxpbmc6IFsndmVjdG9yLWVmZmVjdCcsICdsb29rdXAnLCB7XG5cdFx0dHJ1ZTogJ25vbmUnLFxuXHRcdGZhbHNlOiAnbm9uLXNjYWxpbmctc3Ryb2tlJ1xuXHR9LCBmdW5jdGlvbihpdGVtLCB2YWx1ZSkge1xuXHRcdHJldHVybiAhdmFsdWVcblx0XHRcdFx0JiYgKGl0ZW0gaW5zdGFuY2VvZiBQYXRoSXRlbVxuXHRcdFx0XHRcdHx8IGl0ZW0gaW5zdGFuY2VvZiBTaGFwZVxuXHRcdFx0XHRcdHx8IGl0ZW0gaW5zdGFuY2VvZiBUZXh0SXRlbSk7XG5cdH1dLFxuXHRtaXRlckxpbWl0OiBbJ3N0cm9rZS1taXRlcmxpbWl0JywgJ251bWJlciddLFxuXHRkYXNoQXJyYXk6IFsnc3Ryb2tlLWRhc2hhcnJheScsICdhcnJheSddLFxuXHRkYXNoT2Zmc2V0OiBbJ3N0cm9rZS1kYXNob2Zmc2V0JywgJ251bWJlciddLFxuXHRmb250RmFtaWx5OiBbJ2ZvbnQtZmFtaWx5JywgJ3N0cmluZyddLFxuXHRmb250V2VpZ2h0OiBbJ2ZvbnQtd2VpZ2h0JywgJ3N0cmluZyddLFxuXHRmb250U2l6ZTogWydmb250LXNpemUnLCAnbnVtYmVyJ10sXG5cdGp1c3RpZmljYXRpb246IFsndGV4dC1hbmNob3InLCAnbG9va3VwJywge1xuXHRcdGxlZnQ6ICdzdGFydCcsXG5cdFx0Y2VudGVyOiAnbWlkZGxlJyxcblx0XHRyaWdodDogJ2VuZCdcblx0fV0sXG5cdG9wYWNpdHk6IFsnb3BhY2l0eScsICdudW1iZXInXSxcblx0YmxlbmRNb2RlOiBbJ21peC1ibGVuZC1tb2RlJywgJ3N0eWxlJ11cbn0sIGZ1bmN0aW9uKGVudHJ5LCBrZXkpIHtcblx0dmFyIHBhcnQgPSBCYXNlLmNhcGl0YWxpemUoa2V5KSxcblx0XHRsb29rdXAgPSBlbnRyeVsyXTtcblx0dGhpc1trZXldID0ge1xuXHRcdHR5cGU6IGVudHJ5WzFdLFxuXHRcdHByb3BlcnR5OiBrZXksXG5cdFx0YXR0cmlidXRlOiBlbnRyeVswXSxcblx0XHR0b1NWRzogbG9va3VwLFxuXHRcdGZyb21TVkc6IGxvb2t1cCAmJiBCYXNlLmVhY2gobG9va3VwLCBmdW5jdGlvbih2YWx1ZSwgbmFtZSkge1xuXHRcdFx0dGhpc1t2YWx1ZV0gPSBuYW1lO1xuXHRcdH0sIHt9KSxcblx0XHRleHBvcnRGaWx0ZXI6IGVudHJ5WzNdLFxuXHRcdGdldDogJ2dldCcgKyBwYXJ0LFxuXHRcdHNldDogJ3NldCcgKyBwYXJ0XG5cdH07XG59LCB7fSk7XG5cbm5ldyBmdW5jdGlvbigpIHtcblx0dmFyIGZvcm1hdHRlcjtcblxuXHRmdW5jdGlvbiBnZXRUcmFuc2Zvcm0obWF0cml4LCBjb29yZGluYXRlcywgY2VudGVyKSB7XG5cdFx0dmFyIGF0dHJzID0gbmV3IEJhc2UoKSxcblx0XHRcdHRyYW5zID0gbWF0cml4LmdldFRyYW5zbGF0aW9uKCk7XG5cdFx0aWYgKGNvb3JkaW5hdGVzKSB7XG5cdFx0XHRtYXRyaXggPSBtYXRyaXguX3NoaWZ0bGVzcygpO1xuXHRcdFx0dmFyIHBvaW50ID0gbWF0cml4Ll9pbnZlcnNlVHJhbnNmb3JtKHRyYW5zKTtcblx0XHRcdGF0dHJzW2NlbnRlciA/ICdjeCcgOiAneCddID0gcG9pbnQueDtcblx0XHRcdGF0dHJzW2NlbnRlciA/ICdjeScgOiAneSddID0gcG9pbnQueTtcblx0XHRcdHRyYW5zID0gbnVsbDtcblx0XHR9XG5cdFx0aWYgKCFtYXRyaXguaXNJZGVudGl0eSgpKSB7XG5cdFx0XHR2YXIgZGVjb21wb3NlZCA9IG1hdHJpeC5kZWNvbXBvc2UoKTtcblx0XHRcdGlmIChkZWNvbXBvc2VkKSB7XG5cdFx0XHRcdHZhciBwYXJ0cyA9IFtdLFxuXHRcdFx0XHRcdGFuZ2xlID0gZGVjb21wb3NlZC5yb3RhdGlvbixcblx0XHRcdFx0XHRzY2FsZSA9IGRlY29tcG9zZWQuc2NhbGluZyxcblx0XHRcdFx0XHRza2V3ID0gZGVjb21wb3NlZC5za2V3aW5nO1xuXHRcdFx0XHRpZiAodHJhbnMgJiYgIXRyYW5zLmlzWmVybygpKVxuXHRcdFx0XHRcdHBhcnRzLnB1c2goJ3RyYW5zbGF0ZSgnICsgZm9ybWF0dGVyLnBvaW50KHRyYW5zKSArICcpJyk7XG5cdFx0XHRcdGlmIChhbmdsZSlcblx0XHRcdFx0XHRwYXJ0cy5wdXNoKCdyb3RhdGUoJyArIGZvcm1hdHRlci5udW1iZXIoYW5nbGUpICsgJyknKTtcblx0XHRcdFx0aWYgKCFOdW1lcmljYWwuaXNaZXJvKHNjYWxlLnggLSAxKVxuXHRcdFx0XHRcdFx0fHwgIU51bWVyaWNhbC5pc1plcm8oc2NhbGUueSAtIDEpKVxuXHRcdFx0XHRcdHBhcnRzLnB1c2goJ3NjYWxlKCcgKyBmb3JtYXR0ZXIucG9pbnQoc2NhbGUpICsnKScpO1xuXHRcdFx0XHRpZiAoc2tldy54KVxuXHRcdFx0XHRcdHBhcnRzLnB1c2goJ3NrZXdYKCcgKyBmb3JtYXR0ZXIubnVtYmVyKHNrZXcueCkgKyAnKScpO1xuXHRcdFx0XHRpZiAoc2tldy55KVxuXHRcdFx0XHRcdHBhcnRzLnB1c2goJ3NrZXdZKCcgKyBmb3JtYXR0ZXIubnVtYmVyKHNrZXcueSkgKyAnKScpO1xuXHRcdFx0XHRhdHRycy50cmFuc2Zvcm0gPSBwYXJ0cy5qb2luKCcgJyk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRhdHRycy50cmFuc2Zvcm0gPSAnbWF0cml4KCcgKyBtYXRyaXguZ2V0VmFsdWVzKCkuam9pbignLCcpICsgJyknO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gYXR0cnM7XG5cdH1cblxuXHRmdW5jdGlvbiBleHBvcnRHcm91cChpdGVtLCBvcHRpb25zKSB7XG5cdFx0dmFyIGF0dHJzID0gZ2V0VHJhbnNmb3JtKGl0ZW0uX21hdHJpeCksXG5cdFx0XHRjaGlsZHJlbiA9IGl0ZW0uX2NoaWxkcmVuO1xuXHRcdHZhciBub2RlID0gU3ZnRWxlbWVudC5jcmVhdGUoJ2cnLCBhdHRycywgZm9ybWF0dGVyKTtcblx0XHRmb3IgKHZhciBpID0gMCwgbCA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuXHRcdFx0dmFyIGNoaWxkID0gY2hpbGRyZW5baV07XG5cdFx0XHR2YXIgY2hpbGROb2RlID0gZXhwb3J0U1ZHKGNoaWxkLCBvcHRpb25zKTtcblx0XHRcdGlmIChjaGlsZE5vZGUpIHtcblx0XHRcdFx0aWYgKGNoaWxkLmlzQ2xpcE1hc2soKSkge1xuXHRcdFx0XHRcdHZhciBjbGlwID0gU3ZnRWxlbWVudC5jcmVhdGUoJ2NsaXBQYXRoJyk7XG5cdFx0XHRcdFx0Y2xpcC5hcHBlbmRDaGlsZChjaGlsZE5vZGUpO1xuXHRcdFx0XHRcdHNldERlZmluaXRpb24oY2hpbGQsIGNsaXAsICdjbGlwJyk7XG5cdFx0XHRcdFx0U3ZnRWxlbWVudC5zZXQobm9kZSwge1xuXHRcdFx0XHRcdFx0J2NsaXAtcGF0aCc6ICd1cmwoIycgKyBjbGlwLmlkICsgJyknXG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0bm9kZS5hcHBlbmRDaGlsZChjaGlsZE5vZGUpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBub2RlO1xuXHR9XG5cblx0ZnVuY3Rpb24gZXhwb3J0UmFzdGVyKGl0ZW0sIG9wdGlvbnMpIHtcblx0XHR2YXIgYXR0cnMgPSBnZXRUcmFuc2Zvcm0oaXRlbS5fbWF0cml4LCB0cnVlKSxcblx0XHRcdHNpemUgPSBpdGVtLmdldFNpemUoKSxcblx0XHRcdGltYWdlID0gaXRlbS5nZXRJbWFnZSgpO1xuXHRcdGF0dHJzLnggLT0gc2l6ZS53aWR0aCAvIDI7XG5cdFx0YXR0cnMueSAtPSBzaXplLmhlaWdodCAvIDI7XG5cdFx0YXR0cnMud2lkdGggPSBzaXplLndpZHRoO1xuXHRcdGF0dHJzLmhlaWdodCA9IHNpemUuaGVpZ2h0O1xuXHRcdGF0dHJzLmhyZWYgPSBvcHRpb25zLmVtYmVkSW1hZ2VzID09IGZhbHNlICYmIGltYWdlICYmIGltYWdlLnNyY1xuXHRcdFx0XHR8fCBpdGVtLnRvRGF0YVVSTCgpO1xuXHRcdHJldHVybiBTdmdFbGVtZW50LmNyZWF0ZSgnaW1hZ2UnLCBhdHRycywgZm9ybWF0dGVyKTtcblx0fVxuXG5cdGZ1bmN0aW9uIGV4cG9ydFBhdGgoaXRlbSwgb3B0aW9ucykge1xuXHRcdHZhciBtYXRjaFNoYXBlcyA9IG9wdGlvbnMubWF0Y2hTaGFwZXM7XG5cdFx0aWYgKG1hdGNoU2hhcGVzKSB7XG5cdFx0XHR2YXIgc2hhcGUgPSBpdGVtLnRvU2hhcGUoZmFsc2UpO1xuXHRcdFx0aWYgKHNoYXBlKVxuXHRcdFx0XHRyZXR1cm4gZXhwb3J0U2hhcGUoc2hhcGUsIG9wdGlvbnMpO1xuXHRcdH1cblx0XHR2YXIgc2VnbWVudHMgPSBpdGVtLl9zZWdtZW50cyxcblx0XHRcdGxlbmd0aCA9IHNlZ21lbnRzLmxlbmd0aCxcblx0XHRcdHR5cGUsXG5cdFx0XHRhdHRycyA9IGdldFRyYW5zZm9ybShpdGVtLl9tYXRyaXgpO1xuXHRcdGlmIChtYXRjaFNoYXBlcyAmJiBsZW5ndGggPj0gMiAmJiAhaXRlbS5oYXNIYW5kbGVzKCkpIHtcblx0XHRcdGlmIChsZW5ndGggPiAyKSB7XG5cdFx0XHRcdHR5cGUgPSBpdGVtLl9jbG9zZWQgPyAncG9seWdvbicgOiAncG9seWxpbmUnO1xuXHRcdFx0XHR2YXIgcGFydHMgPSBbXTtcblx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuXHRcdFx0XHRcdHBhcnRzLnB1c2goZm9ybWF0dGVyLnBvaW50KHNlZ21lbnRzW2ldLl9wb2ludCkpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGF0dHJzLnBvaW50cyA9IHBhcnRzLmpvaW4oJyAnKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHR5cGUgPSAnbGluZSc7XG5cdFx0XHRcdHZhciBzdGFydCA9IHNlZ21lbnRzWzBdLl9wb2ludCxcblx0XHRcdFx0XHRlbmQgPSBzZWdtZW50c1sxXS5fcG9pbnQ7XG5cdFx0XHRcdGF0dHJzLnNldCh7XG5cdFx0XHRcdFx0eDE6IHN0YXJ0LngsXG5cdFx0XHRcdFx0eTE6IHN0YXJ0LnksXG5cdFx0XHRcdFx0eDI6IGVuZC54LFxuXHRcdFx0XHRcdHkyOiBlbmQueVxuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0dHlwZSA9ICdwYXRoJztcblx0XHRcdGF0dHJzLmQgPSBpdGVtLmdldFBhdGhEYXRhKG51bGwsIG9wdGlvbnMucHJlY2lzaW9uKTtcblx0XHR9XG5cdFx0cmV0dXJuIFN2Z0VsZW1lbnQuY3JlYXRlKHR5cGUsIGF0dHJzLCBmb3JtYXR0ZXIpO1xuXHR9XG5cblx0ZnVuY3Rpb24gZXhwb3J0U2hhcGUoaXRlbSkge1xuXHRcdHZhciB0eXBlID0gaXRlbS5fdHlwZSxcblx0XHRcdHJhZGl1cyA9IGl0ZW0uX3JhZGl1cyxcblx0XHRcdGF0dHJzID0gZ2V0VHJhbnNmb3JtKGl0ZW0uX21hdHJpeCwgdHJ1ZSwgdHlwZSAhPT0gJ3JlY3RhbmdsZScpO1xuXHRcdGlmICh0eXBlID09PSAncmVjdGFuZ2xlJykge1xuXHRcdFx0dHlwZSA9ICdyZWN0Jztcblx0XHRcdHZhciBzaXplID0gaXRlbS5fc2l6ZSxcblx0XHRcdFx0d2lkdGggPSBzaXplLndpZHRoLFxuXHRcdFx0XHRoZWlnaHQgPSBzaXplLmhlaWdodDtcblx0XHRcdGF0dHJzLnggLT0gd2lkdGggLyAyO1xuXHRcdFx0YXR0cnMueSAtPSBoZWlnaHQgLyAyO1xuXHRcdFx0YXR0cnMud2lkdGggPSB3aWR0aDtcblx0XHRcdGF0dHJzLmhlaWdodCA9IGhlaWdodDtcblx0XHRcdGlmIChyYWRpdXMuaXNaZXJvKCkpXG5cdFx0XHRcdHJhZGl1cyA9IG51bGw7XG5cdFx0fVxuXHRcdGlmIChyYWRpdXMpIHtcblx0XHRcdGlmICh0eXBlID09PSAnY2lyY2xlJykge1xuXHRcdFx0XHRhdHRycy5yID0gcmFkaXVzO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0YXR0cnMucnggPSByYWRpdXMud2lkdGg7XG5cdFx0XHRcdGF0dHJzLnJ5ID0gcmFkaXVzLmhlaWdodDtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIFN2Z0VsZW1lbnQuY3JlYXRlKHR5cGUsIGF0dHJzLCBmb3JtYXR0ZXIpO1xuXHR9XG5cblx0ZnVuY3Rpb24gZXhwb3J0Q29tcG91bmRQYXRoKGl0ZW0sIG9wdGlvbnMpIHtcblx0XHR2YXIgYXR0cnMgPSBnZXRUcmFuc2Zvcm0oaXRlbS5fbWF0cml4KTtcblx0XHR2YXIgZGF0YSA9IGl0ZW0uZ2V0UGF0aERhdGEobnVsbCwgb3B0aW9ucy5wcmVjaXNpb24pO1xuXHRcdGlmIChkYXRhKVxuXHRcdFx0YXR0cnMuZCA9IGRhdGE7XG5cdFx0cmV0dXJuIFN2Z0VsZW1lbnQuY3JlYXRlKCdwYXRoJywgYXR0cnMsIGZvcm1hdHRlcik7XG5cdH1cblxuXHRmdW5jdGlvbiBleHBvcnRTeW1ib2xJdGVtKGl0ZW0sIG9wdGlvbnMpIHtcblx0XHR2YXIgYXR0cnMgPSBnZXRUcmFuc2Zvcm0oaXRlbS5fbWF0cml4LCB0cnVlKSxcblx0XHRcdGRlZmluaXRpb24gPSBpdGVtLl9kZWZpbml0aW9uLFxuXHRcdFx0bm9kZSA9IGdldERlZmluaXRpb24oZGVmaW5pdGlvbiwgJ3N5bWJvbCcpLFxuXHRcdFx0ZGVmaW5pdGlvbkl0ZW0gPSBkZWZpbml0aW9uLl9pdGVtLFxuXHRcdFx0Ym91bmRzID0gZGVmaW5pdGlvbkl0ZW0uZ2V0Qm91bmRzKCk7XG5cdFx0aWYgKCFub2RlKSB7XG5cdFx0XHRub2RlID0gU3ZnRWxlbWVudC5jcmVhdGUoJ3N5bWJvbCcsIHtcblx0XHRcdFx0dmlld0JveDogZm9ybWF0dGVyLnJlY3RhbmdsZShib3VuZHMpXG5cdFx0XHR9KTtcblx0XHRcdG5vZGUuYXBwZW5kQ2hpbGQoZXhwb3J0U1ZHKGRlZmluaXRpb25JdGVtLCBvcHRpb25zKSk7XG5cdFx0XHRzZXREZWZpbml0aW9uKGRlZmluaXRpb24sIG5vZGUsICdzeW1ib2wnKTtcblx0XHR9XG5cdFx0YXR0cnMuaHJlZiA9ICcjJyArIG5vZGUuaWQ7XG5cdFx0YXR0cnMueCArPSBib3VuZHMueDtcblx0XHRhdHRycy55ICs9IGJvdW5kcy55O1xuXHRcdGF0dHJzLndpZHRoID0gYm91bmRzLndpZHRoO1xuXHRcdGF0dHJzLmhlaWdodCA9IGJvdW5kcy5oZWlnaHQ7XG5cdFx0YXR0cnMub3ZlcmZsb3cgPSAndmlzaWJsZSc7XG5cdFx0cmV0dXJuIFN2Z0VsZW1lbnQuY3JlYXRlKCd1c2UnLCBhdHRycywgZm9ybWF0dGVyKTtcblx0fVxuXG5cdGZ1bmN0aW9uIGV4cG9ydEdyYWRpZW50KGNvbG9yKSB7XG5cdFx0dmFyIGdyYWRpZW50Tm9kZSA9IGdldERlZmluaXRpb24oY29sb3IsICdjb2xvcicpO1xuXHRcdGlmICghZ3JhZGllbnROb2RlKSB7XG5cdFx0XHR2YXIgZ3JhZGllbnQgPSBjb2xvci5nZXRHcmFkaWVudCgpLFxuXHRcdFx0XHRyYWRpYWwgPSBncmFkaWVudC5fcmFkaWFsLFxuXHRcdFx0XHRvcmlnaW4gPSBjb2xvci5nZXRPcmlnaW4oKSxcblx0XHRcdFx0ZGVzdGluYXRpb24gPSBjb2xvci5nZXREZXN0aW5hdGlvbigpLFxuXHRcdFx0XHRhdHRycztcblx0XHRcdGlmIChyYWRpYWwpIHtcblx0XHRcdFx0YXR0cnMgPSB7XG5cdFx0XHRcdFx0Y3g6IG9yaWdpbi54LFxuXHRcdFx0XHRcdGN5OiBvcmlnaW4ueSxcblx0XHRcdFx0XHRyOiBvcmlnaW4uZ2V0RGlzdGFuY2UoZGVzdGluYXRpb24pXG5cdFx0XHRcdH07XG5cdFx0XHRcdHZhciBoaWdobGlnaHQgPSBjb2xvci5nZXRIaWdobGlnaHQoKTtcblx0XHRcdFx0aWYgKGhpZ2hsaWdodCkge1xuXHRcdFx0XHRcdGF0dHJzLmZ4ID0gaGlnaGxpZ2h0Lng7XG5cdFx0XHRcdFx0YXR0cnMuZnkgPSBoaWdobGlnaHQueTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0YXR0cnMgPSB7XG5cdFx0XHRcdFx0eDE6IG9yaWdpbi54LFxuXHRcdFx0XHRcdHkxOiBvcmlnaW4ueSxcblx0XHRcdFx0XHR4MjogZGVzdGluYXRpb24ueCxcblx0XHRcdFx0XHR5MjogZGVzdGluYXRpb24ueVxuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXHRcdFx0YXR0cnMuZ3JhZGllbnRVbml0cyA9ICd1c2VyU3BhY2VPblVzZSc7XG5cdFx0XHRncmFkaWVudE5vZGUgPSBTdmdFbGVtZW50LmNyZWF0ZSgocmFkaWFsID8gJ3JhZGlhbCcgOiAnbGluZWFyJylcblx0XHRcdFx0XHQrICdHcmFkaWVudCcsIGF0dHJzLCBmb3JtYXR0ZXIpO1xuXHRcdFx0dmFyIHN0b3BzID0gZ3JhZGllbnQuX3N0b3BzO1xuXHRcdFx0Zm9yICh2YXIgaSA9IDAsIGwgPSBzdG9wcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcblx0XHRcdFx0dmFyIHN0b3AgPSBzdG9wc1tpXSxcblx0XHRcdFx0XHRzdG9wQ29sb3IgPSBzdG9wLl9jb2xvcixcblx0XHRcdFx0XHRhbHBoYSA9IHN0b3BDb2xvci5nZXRBbHBoYSgpLFxuXHRcdFx0XHRcdG9mZnNldCA9IHN0b3AuX29mZnNldDtcblx0XHRcdFx0YXR0cnMgPSB7XG5cdFx0XHRcdFx0b2Zmc2V0OiBvZmZzZXQgPT0gbnVsbCA/IGkgLyAobCAtIDEpIDogb2Zmc2V0XG5cdFx0XHRcdH07XG5cdFx0XHRcdGlmIChzdG9wQ29sb3IpXG5cdFx0XHRcdFx0YXR0cnNbJ3N0b3AtY29sb3InXSA9IHN0b3BDb2xvci50b0NTUyh0cnVlKTtcblx0XHRcdFx0aWYgKGFscGhhIDwgMSlcblx0XHRcdFx0XHRhdHRyc1snc3RvcC1vcGFjaXR5J10gPSBhbHBoYTtcblx0XHRcdFx0Z3JhZGllbnROb2RlLmFwcGVuZENoaWxkKFxuXHRcdFx0XHRcdFx0U3ZnRWxlbWVudC5jcmVhdGUoJ3N0b3AnLCBhdHRycywgZm9ybWF0dGVyKSk7XG5cdFx0XHR9XG5cdFx0XHRzZXREZWZpbml0aW9uKGNvbG9yLCBncmFkaWVudE5vZGUsICdjb2xvcicpO1xuXHRcdH1cblx0XHRyZXR1cm4gJ3VybCgjJyArIGdyYWRpZW50Tm9kZS5pZCArICcpJztcblx0fVxuXG5cdGZ1bmN0aW9uIGV4cG9ydFRleHQoaXRlbSkge1xuXHRcdHZhciBub2RlID0gU3ZnRWxlbWVudC5jcmVhdGUoJ3RleHQnLCBnZXRUcmFuc2Zvcm0oaXRlbS5fbWF0cml4LCB0cnVlKSxcblx0XHRcdFx0Zm9ybWF0dGVyKTtcblx0XHRub2RlLnRleHRDb250ZW50ID0gaXRlbS5fY29udGVudDtcblx0XHRyZXR1cm4gbm9kZTtcblx0fVxuXG5cdHZhciBleHBvcnRlcnMgPSB7XG5cdFx0R3JvdXA6IGV4cG9ydEdyb3VwLFxuXHRcdExheWVyOiBleHBvcnRHcm91cCxcblx0XHRSYXN0ZXI6IGV4cG9ydFJhc3Rlcixcblx0XHRQYXRoOiBleHBvcnRQYXRoLFxuXHRcdFNoYXBlOiBleHBvcnRTaGFwZSxcblx0XHRDb21wb3VuZFBhdGg6IGV4cG9ydENvbXBvdW5kUGF0aCxcblx0XHRTeW1ib2xJdGVtOiBleHBvcnRTeW1ib2xJdGVtLFxuXHRcdFBvaW50VGV4dDogZXhwb3J0VGV4dFxuXHR9O1xuXG5cdGZ1bmN0aW9uIGFwcGx5U3R5bGUoaXRlbSwgbm9kZSwgaXNSb290KSB7XG5cdFx0dmFyIGF0dHJzID0ge30sXG5cdFx0XHRwYXJlbnQgPSAhaXNSb290ICYmIGl0ZW0uZ2V0UGFyZW50KCksXG5cdFx0XHRzdHlsZSA9IFtdO1xuXG5cdFx0aWYgKGl0ZW0uX25hbWUgIT0gbnVsbClcblx0XHRcdGF0dHJzLmlkID0gaXRlbS5fbmFtZTtcblxuXHRcdEJhc2UuZWFjaChTdmdTdHlsZXMsIGZ1bmN0aW9uKGVudHJ5KSB7XG5cdFx0XHR2YXIgZ2V0ID0gZW50cnkuZ2V0LFxuXHRcdFx0XHR0eXBlID0gZW50cnkudHlwZSxcblx0XHRcdFx0dmFsdWUgPSBpdGVtW2dldF0oKTtcblx0XHRcdGlmIChlbnRyeS5leHBvcnRGaWx0ZXJcblx0XHRcdFx0XHQ/IGVudHJ5LmV4cG9ydEZpbHRlcihpdGVtLCB2YWx1ZSlcblx0XHRcdFx0XHQ6ICFwYXJlbnQgfHwgIUJhc2UuZXF1YWxzKHBhcmVudFtnZXRdKCksIHZhbHVlKSkge1xuXHRcdFx0XHRpZiAodHlwZSA9PT0gJ2NvbG9yJyAmJiB2YWx1ZSAhPSBudWxsKSB7XG5cdFx0XHRcdFx0dmFyIGFscGhhID0gdmFsdWUuZ2V0QWxwaGEoKTtcblx0XHRcdFx0XHRpZiAoYWxwaGEgPCAxKVxuXHRcdFx0XHRcdFx0YXR0cnNbZW50cnkuYXR0cmlidXRlICsgJy1vcGFjaXR5J10gPSBhbHBoYTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAodHlwZSA9PT0gJ3N0eWxlJykge1xuXHRcdFx0XHRcdHN0eWxlLnB1c2goZW50cnkuYXR0cmlidXRlICsgJzogJyArIHZhbHVlKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRhdHRyc1tlbnRyeS5hdHRyaWJ1dGVdID0gdmFsdWUgPT0gbnVsbCA/ICdub25lJ1xuXHRcdFx0XHRcdFx0XHQ6IHR5cGUgPT09ICdjb2xvcicgPyB2YWx1ZS5ncmFkaWVudFxuXHRcdFx0XHRcdFx0XHRcdD8gZXhwb3J0R3JhZGllbnQodmFsdWUsIGl0ZW0pXG5cdFx0XHRcdFx0XHRcdFx0OiB2YWx1ZS50b0NTUyh0cnVlKVxuXHRcdFx0XHRcdFx0XHQ6IHR5cGUgPT09ICdhcnJheScgPyB2YWx1ZS5qb2luKCcsJylcblx0XHRcdFx0XHRcdFx0OiB0eXBlID09PSAnbG9va3VwJyA/IGVudHJ5LnRvU1ZHW3ZhbHVlXVxuXHRcdFx0XHRcdFx0XHQ6IHZhbHVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHRpZiAoc3R5bGUubGVuZ3RoKVxuXHRcdFx0YXR0cnMuc3R5bGUgPSBzdHlsZS5qb2luKCc7Jyk7XG5cblx0XHRpZiAoYXR0cnMub3BhY2l0eSA9PT0gMSlcblx0XHRcdGRlbGV0ZSBhdHRycy5vcGFjaXR5O1xuXG5cdFx0aWYgKCFpdGVtLl92aXNpYmxlKVxuXHRcdFx0YXR0cnMudmlzaWJpbGl0eSA9ICdoaWRkZW4nO1xuXG5cdFx0cmV0dXJuIFN2Z0VsZW1lbnQuc2V0KG5vZGUsIGF0dHJzLCBmb3JtYXR0ZXIpO1xuXHR9XG5cblx0dmFyIGRlZmluaXRpb25zO1xuXHRmdW5jdGlvbiBnZXREZWZpbml0aW9uKGl0ZW0sIHR5cGUpIHtcblx0XHRpZiAoIWRlZmluaXRpb25zKVxuXHRcdFx0ZGVmaW5pdGlvbnMgPSB7IGlkczoge30sIHN2Z3M6IHt9IH07XG5cdFx0cmV0dXJuIGl0ZW0gJiYgZGVmaW5pdGlvbnMuc3Znc1t0eXBlICsgJy0nXG5cdFx0XHRcdCsgKGl0ZW0uX2lkIHx8IGl0ZW0uX19pZCB8fCAoaXRlbS5fX2lkID0gVUlELmdldCgnc3ZnJykpKV07XG5cdH1cblxuXHRmdW5jdGlvbiBzZXREZWZpbml0aW9uKGl0ZW0sIG5vZGUsIHR5cGUpIHtcblx0XHRpZiAoIWRlZmluaXRpb25zKVxuXHRcdFx0Z2V0RGVmaW5pdGlvbigpO1xuXHRcdHZhciB0eXBlSWQgPSBkZWZpbml0aW9ucy5pZHNbdHlwZV0gPSAoZGVmaW5pdGlvbnMuaWRzW3R5cGVdIHx8IDApICsgMTtcblx0XHRub2RlLmlkID0gdHlwZSArICctJyArIHR5cGVJZDtcblx0XHRkZWZpbml0aW9ucy5zdmdzW3R5cGUgKyAnLScgKyAoaXRlbS5faWQgfHwgaXRlbS5fX2lkKV0gPSBub2RlO1xuXHR9XG5cblx0ZnVuY3Rpb24gZXhwb3J0RGVmaW5pdGlvbnMobm9kZSwgb3B0aW9ucykge1xuXHRcdHZhciBzdmcgPSBub2RlLFxuXHRcdFx0ZGVmcyA9IG51bGw7XG5cdFx0aWYgKGRlZmluaXRpb25zKSB7XG5cdFx0XHRzdmcgPSBub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdzdmcnICYmIG5vZGU7XG5cdFx0XHRmb3IgKHZhciBpIGluIGRlZmluaXRpb25zLnN2Z3MpIHtcblx0XHRcdFx0aWYgKCFkZWZzKSB7XG5cdFx0XHRcdFx0aWYgKCFzdmcpIHtcblx0XHRcdFx0XHRcdHN2ZyA9IFN2Z0VsZW1lbnQuY3JlYXRlKCdzdmcnKTtcblx0XHRcdFx0XHRcdHN2Zy5hcHBlbmRDaGlsZChub2RlKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZGVmcyA9IHN2Zy5pbnNlcnRCZWZvcmUoU3ZnRWxlbWVudC5jcmVhdGUoJ2RlZnMnKSxcblx0XHRcdFx0XHRcdFx0c3ZnLmZpcnN0Q2hpbGQpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGRlZnMuYXBwZW5kQ2hpbGQoZGVmaW5pdGlvbnMuc3Znc1tpXSk7XG5cdFx0XHR9XG5cdFx0XHRkZWZpbml0aW9ucyA9IG51bGw7XG5cdFx0fVxuXHRcdHJldHVybiBvcHRpb25zLmFzU3RyaW5nXG5cdFx0XHRcdD8gbmV3IHNlbGYuWE1MU2VyaWFsaXplcigpLnNlcmlhbGl6ZVRvU3RyaW5nKHN2Zylcblx0XHRcdFx0OiBzdmc7XG5cdH1cblxuXHRmdW5jdGlvbiBleHBvcnRTVkcoaXRlbSwgb3B0aW9ucywgaXNSb290KSB7XG5cdFx0dmFyIGV4cG9ydGVyID0gZXhwb3J0ZXJzW2l0ZW0uX2NsYXNzXSxcblx0XHRcdG5vZGUgPSBleHBvcnRlciAmJiBleHBvcnRlcihpdGVtLCBvcHRpb25zKTtcblx0XHRpZiAobm9kZSkge1xuXHRcdFx0dmFyIG9uRXhwb3J0ID0gb3B0aW9ucy5vbkV4cG9ydDtcblx0XHRcdGlmIChvbkV4cG9ydClcblx0XHRcdFx0bm9kZSA9IG9uRXhwb3J0KGl0ZW0sIG5vZGUsIG9wdGlvbnMpIHx8IG5vZGU7XG5cdFx0XHR2YXIgZGF0YSA9IEpTT04uc3RyaW5naWZ5KGl0ZW0uX2RhdGEpO1xuXHRcdFx0aWYgKGRhdGEgJiYgZGF0YSAhPT0gJ3t9JyAmJiBkYXRhICE9PSAnbnVsbCcpXG5cdFx0XHRcdG5vZGUuc2V0QXR0cmlidXRlKCdkYXRhLXBhcGVyLWRhdGEnLCBkYXRhKTtcblx0XHR9XG5cdFx0cmV0dXJuIG5vZGUgJiYgYXBwbHlTdHlsZShpdGVtLCBub2RlLCBpc1Jvb3QpO1xuXHR9XG5cblx0ZnVuY3Rpb24gc2V0T3B0aW9ucyhvcHRpb25zKSB7XG5cdFx0aWYgKCFvcHRpb25zKVxuXHRcdFx0b3B0aW9ucyA9IHt9O1xuXHRcdGZvcm1hdHRlciA9IG5ldyBGb3JtYXR0ZXIob3B0aW9ucy5wcmVjaXNpb24pO1xuXHRcdHJldHVybiBvcHRpb25zO1xuXHR9XG5cblx0SXRlbS5pbmplY3Qoe1xuXHRcdGV4cG9ydFNWRzogZnVuY3Rpb24ob3B0aW9ucykge1xuXHRcdFx0b3B0aW9ucyA9IHNldE9wdGlvbnMob3B0aW9ucyk7XG5cdFx0XHRyZXR1cm4gZXhwb3J0RGVmaW5pdGlvbnMoZXhwb3J0U1ZHKHRoaXMsIG9wdGlvbnMsIHRydWUpLCBvcHRpb25zKTtcblx0XHR9XG5cdH0pO1xuXG5cdFByb2plY3QuaW5qZWN0KHtcblx0XHRleHBvcnRTVkc6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcblx0XHRcdG9wdGlvbnMgPSBzZXRPcHRpb25zKG9wdGlvbnMpO1xuXHRcdFx0dmFyIGNoaWxkcmVuID0gdGhpcy5fY2hpbGRyZW4sXG5cdFx0XHRcdHZpZXcgPSB0aGlzLmdldFZpZXcoKSxcblx0XHRcdFx0Ym91bmRzID0gQmFzZS5waWNrKG9wdGlvbnMuYm91bmRzLCAndmlldycpLFxuXHRcdFx0XHRteCA9IG9wdGlvbnMubWF0cml4IHx8IGJvdW5kcyA9PT0gJ3ZpZXcnICYmIHZpZXcuX21hdHJpeCxcblx0XHRcdFx0bWF0cml4ID0gbXggJiYgTWF0cml4LnJlYWQoW214XSksXG5cdFx0XHRcdHJlY3QgPSBib3VuZHMgPT09ICd2aWV3J1xuXHRcdFx0XHRcdD8gbmV3IFJlY3RhbmdsZShbMCwgMF0sIHZpZXcuZ2V0Vmlld1NpemUoKSlcblx0XHRcdFx0XHQ6IGJvdW5kcyA9PT0gJ2NvbnRlbnQnXG5cdFx0XHRcdFx0XHQ/IEl0ZW0uX2dldEJvdW5kcyhjaGlsZHJlbiwgbWF0cml4LCB7IHN0cm9rZTogdHJ1ZSB9KVxuXHRcdFx0XHRcdFx0XHQucmVjdFxuXHRcdFx0XHRcdFx0OiBSZWN0YW5nbGUucmVhZChbYm91bmRzXSwgMCwgeyByZWFkTnVsbDogdHJ1ZSB9KSxcblx0XHRcdFx0YXR0cnMgPSB7XG5cdFx0XHRcdFx0dmVyc2lvbjogJzEuMScsXG5cdFx0XHRcdFx0eG1sbnM6IFN2Z0VsZW1lbnQuc3ZnLFxuXHRcdFx0XHRcdCd4bWxuczp4bGluayc6IFN2Z0VsZW1lbnQueGxpbmssXG5cdFx0XHRcdH07XG5cdFx0XHRpZiAocmVjdCkge1xuXHRcdFx0XHRhdHRycy53aWR0aCA9IHJlY3Qud2lkdGg7XG5cdFx0XHRcdGF0dHJzLmhlaWdodCA9IHJlY3QuaGVpZ2h0O1xuXHRcdFx0XHRpZiAocmVjdC54IHx8IHJlY3QueSlcblx0XHRcdFx0XHRhdHRycy52aWV3Qm94ID0gZm9ybWF0dGVyLnJlY3RhbmdsZShyZWN0KTtcblx0XHRcdH1cblx0XHRcdHZhciBub2RlID0gU3ZnRWxlbWVudC5jcmVhdGUoJ3N2ZycsIGF0dHJzLCBmb3JtYXR0ZXIpLFxuXHRcdFx0XHRwYXJlbnQgPSBub2RlO1xuXHRcdFx0aWYgKG1hdHJpeCAmJiAhbWF0cml4LmlzSWRlbnRpdHkoKSkge1xuXHRcdFx0XHRwYXJlbnQgPSBub2RlLmFwcGVuZENoaWxkKFN2Z0VsZW1lbnQuY3JlYXRlKCdnJyxcblx0XHRcdFx0XHRcdGdldFRyYW5zZm9ybShtYXRyaXgpLCBmb3JtYXR0ZXIpKTtcblx0XHRcdH1cblx0XHRcdGZvciAodmFyIGkgPSAwLCBsID0gY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG5cdFx0XHRcdHBhcmVudC5hcHBlbmRDaGlsZChleHBvcnRTVkcoY2hpbGRyZW5baV0sIG9wdGlvbnMsIHRydWUpKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBleHBvcnREZWZpbml0aW9ucyhub2RlLCBvcHRpb25zKTtcblx0XHR9XG5cdH0pO1xufTtcblxubmV3IGZ1bmN0aW9uKCkge1xuXG5cdHZhciBkZWZpbml0aW9ucyA9IHt9LFxuXHRcdHJvb3RTaXplO1xuXG5cdGZ1bmN0aW9uIGdldFZhbHVlKG5vZGUsIG5hbWUsIGlzU3RyaW5nLCBhbGxvd051bGwsIGFsbG93UGVyY2VudCkge1xuXHRcdHZhciB2YWx1ZSA9IFN2Z0VsZW1lbnQuZ2V0KG5vZGUsIG5hbWUpLFxuXHRcdFx0cmVzID0gdmFsdWUgPT0gbnVsbFxuXHRcdFx0XHQ/IGFsbG93TnVsbFxuXHRcdFx0XHRcdD8gbnVsbFxuXHRcdFx0XHRcdDogaXNTdHJpbmcgPyAnJyA6IDBcblx0XHRcdFx0OiBpc1N0cmluZ1xuXHRcdFx0XHRcdD8gdmFsdWVcblx0XHRcdFx0XHQ6IHBhcnNlRmxvYXQodmFsdWUpO1xuXHRcdHJldHVybiAvJVxccyokLy50ZXN0KHZhbHVlKVxuXHRcdFx0PyAocmVzIC8gMTAwKSAqIChhbGxvd1BlcmNlbnQgPyAxXG5cdFx0XHRcdDogcm9vdFNpemVbL3h8XndpZHRoLy50ZXN0KG5hbWUpID8gJ3dpZHRoJyA6ICdoZWlnaHQnXSlcblx0XHRcdDogcmVzO1xuXHR9XG5cblx0ZnVuY3Rpb24gZ2V0UG9pbnQobm9kZSwgeCwgeSwgYWxsb3dOdWxsLCBhbGxvd1BlcmNlbnQpIHtcblx0XHR4ID0gZ2V0VmFsdWUobm9kZSwgeCB8fCAneCcsIGZhbHNlLCBhbGxvd051bGwsIGFsbG93UGVyY2VudCk7XG5cdFx0eSA9IGdldFZhbHVlKG5vZGUsIHkgfHwgJ3knLCBmYWxzZSwgYWxsb3dOdWxsLCBhbGxvd1BlcmNlbnQpO1xuXHRcdHJldHVybiBhbGxvd051bGwgJiYgKHggPT0gbnVsbCB8fCB5ID09IG51bGwpID8gbnVsbFxuXHRcdFx0XHQ6IG5ldyBQb2ludCh4LCB5KTtcblx0fVxuXG5cdGZ1bmN0aW9uIGdldFNpemUobm9kZSwgdywgaCwgYWxsb3dOdWxsLCBhbGxvd1BlcmNlbnQpIHtcblx0XHR3ID0gZ2V0VmFsdWUobm9kZSwgdyB8fCAnd2lkdGgnLCBmYWxzZSwgYWxsb3dOdWxsLCBhbGxvd1BlcmNlbnQpO1xuXHRcdGggPSBnZXRWYWx1ZShub2RlLCBoIHx8ICdoZWlnaHQnLCBmYWxzZSwgYWxsb3dOdWxsLCBhbGxvd1BlcmNlbnQpO1xuXHRcdHJldHVybiBhbGxvd051bGwgJiYgKHcgPT0gbnVsbCB8fCBoID09IG51bGwpID8gbnVsbFxuXHRcdFx0XHQ6IG5ldyBTaXplKHcsIGgpO1xuXHR9XG5cblx0ZnVuY3Rpb24gY29udmVydFZhbHVlKHZhbHVlLCB0eXBlLCBsb29rdXApIHtcblx0XHRyZXR1cm4gdmFsdWUgPT09ICdub25lJyA/IG51bGxcblx0XHRcdFx0OiB0eXBlID09PSAnbnVtYmVyJyA/IHBhcnNlRmxvYXQodmFsdWUpXG5cdFx0XHRcdDogdHlwZSA9PT0gJ2FycmF5JyA/XG5cdFx0XHRcdFx0dmFsdWUgPyB2YWx1ZS5zcGxpdCgvW1xccyxdKy9nKS5tYXAocGFyc2VGbG9hdCkgOiBbXVxuXHRcdFx0XHQ6IHR5cGUgPT09ICdjb2xvcicgPyBnZXREZWZpbml0aW9uKHZhbHVlKSB8fCB2YWx1ZVxuXHRcdFx0XHQ6IHR5cGUgPT09ICdsb29rdXAnID8gbG9va3VwW3ZhbHVlXVxuXHRcdFx0XHQ6IHZhbHVlO1xuXHR9XG5cblx0ZnVuY3Rpb24gaW1wb3J0R3JvdXAobm9kZSwgdHlwZSwgb3B0aW9ucywgaXNSb290KSB7XG5cdFx0dmFyIG5vZGVzID0gbm9kZS5jaGlsZE5vZGVzLFxuXHRcdFx0aXNDbGlwID0gdHlwZSA9PT0gJ2NsaXBwYXRoJyxcblx0XHRcdGlzRGVmcyA9IHR5cGUgPT09ICdkZWZzJyxcblx0XHRcdGl0ZW0gPSBuZXcgR3JvdXAoKSxcblx0XHRcdHByb2plY3QgPSBpdGVtLl9wcm9qZWN0LFxuXHRcdFx0Y3VycmVudFN0eWxlID0gcHJvamVjdC5fY3VycmVudFN0eWxlLFxuXHRcdFx0Y2hpbGRyZW4gPSBbXTtcblx0XHRpZiAoIWlzQ2xpcCAmJiAhaXNEZWZzKSB7XG5cdFx0XHRpdGVtID0gYXBwbHlBdHRyaWJ1dGVzKGl0ZW0sIG5vZGUsIGlzUm9vdCk7XG5cdFx0XHRwcm9qZWN0Ll9jdXJyZW50U3R5bGUgPSBpdGVtLl9zdHlsZS5jbG9uZSgpO1xuXHRcdH1cblx0XHRpZiAoaXNSb290KSB7XG5cdFx0XHR2YXIgZGVmcyA9IG5vZGUucXVlcnlTZWxlY3RvckFsbCgnZGVmcycpO1xuXHRcdFx0Zm9yICh2YXIgaSA9IDAsIGwgPSBkZWZzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuXHRcdFx0XHRpbXBvcnROb2RlKGRlZnNbaV0sIG9wdGlvbnMsIGZhbHNlKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0Zm9yICh2YXIgaSA9IDAsIGwgPSBub2Rlcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcblx0XHRcdHZhciBjaGlsZE5vZGUgPSBub2Rlc1tpXSxcblx0XHRcdFx0Y2hpbGQ7XG5cdFx0XHRpZiAoY2hpbGROb2RlLm5vZGVUeXBlID09PSAxXG5cdFx0XHRcdFx0JiYgIS9eZGVmcyQvaS50ZXN0KGNoaWxkTm9kZS5ub2RlTmFtZSlcblx0XHRcdFx0XHQmJiAoY2hpbGQgPSBpbXBvcnROb2RlKGNoaWxkTm9kZSwgb3B0aW9ucywgZmFsc2UpKVxuXHRcdFx0XHRcdCYmICEoY2hpbGQgaW5zdGFuY2VvZiBTeW1ib2xEZWZpbml0aW9uKSlcblx0XHRcdFx0Y2hpbGRyZW4ucHVzaChjaGlsZCk7XG5cdFx0fVxuXHRcdGl0ZW0uYWRkQ2hpbGRyZW4oY2hpbGRyZW4pO1xuXHRcdGlmIChpc0NsaXApXG5cdFx0XHRpdGVtID0gYXBwbHlBdHRyaWJ1dGVzKGl0ZW0ucmVkdWNlKCksIG5vZGUsIGlzUm9vdCk7XG5cdFx0cHJvamVjdC5fY3VycmVudFN0eWxlID0gY3VycmVudFN0eWxlO1xuXHRcdGlmIChpc0NsaXAgfHwgaXNEZWZzKSB7XG5cdFx0XHRpdGVtLnJlbW92ZSgpO1xuXHRcdFx0aXRlbSA9IG51bGw7XG5cdFx0fVxuXHRcdHJldHVybiBpdGVtO1xuXHR9XG5cblx0ZnVuY3Rpb24gaW1wb3J0UG9seShub2RlLCB0eXBlKSB7XG5cdFx0dmFyIGNvb3JkcyA9IG5vZGUuZ2V0QXR0cmlidXRlKCdwb2ludHMnKS5tYXRjaChcblx0XHRcdFx0XHQvWystXT8oPzpcXGQqXFwuXFxkK3xcXGQrXFwuPykoPzpbZUVdWystXT9cXGQrKT8vZyksXG5cdFx0XHRwb2ludHMgPSBbXTtcblx0XHRmb3IgKHZhciBpID0gMCwgbCA9IGNvb3Jkcy5sZW5ndGg7IGkgPCBsOyBpICs9IDIpXG5cdFx0XHRwb2ludHMucHVzaChuZXcgUG9pbnQoXG5cdFx0XHRcdFx0cGFyc2VGbG9hdChjb29yZHNbaV0pLFxuXHRcdFx0XHRcdHBhcnNlRmxvYXQoY29vcmRzW2kgKyAxXSkpKTtcblx0XHR2YXIgcGF0aCA9IG5ldyBQYXRoKHBvaW50cyk7XG5cdFx0aWYgKHR5cGUgPT09ICdwb2x5Z29uJylcblx0XHRcdHBhdGguY2xvc2VQYXRoKCk7XG5cdFx0cmV0dXJuIHBhdGg7XG5cdH1cblxuXHRmdW5jdGlvbiBpbXBvcnRQYXRoKG5vZGUpIHtcblx0XHRyZXR1cm4gUGF0aEl0ZW0uY3JlYXRlKG5vZGUuZ2V0QXR0cmlidXRlKCdkJykpO1xuXHR9XG5cblx0ZnVuY3Rpb24gaW1wb3J0R3JhZGllbnQobm9kZSwgdHlwZSkge1xuXHRcdHZhciBpZCA9IChnZXRWYWx1ZShub2RlLCAnaHJlZicsIHRydWUpIHx8ICcnKS5zdWJzdHJpbmcoMSksXG5cdFx0XHRyYWRpYWwgPSB0eXBlID09PSAncmFkaWFsZ3JhZGllbnQnLFxuXHRcdFx0Z3JhZGllbnQ7XG5cdFx0aWYgKGlkKSB7XG5cdFx0XHRncmFkaWVudCA9IGRlZmluaXRpb25zW2lkXS5nZXRHcmFkaWVudCgpO1xuXHRcdFx0aWYgKGdyYWRpZW50Ll9yYWRpYWwgXiByYWRpYWwpIHtcblx0XHRcdFx0Z3JhZGllbnQgPSBncmFkaWVudC5jbG9uZSgpO1xuXHRcdFx0XHRncmFkaWVudC5fcmFkaWFsID0gcmFkaWFsO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHR2YXIgbm9kZXMgPSBub2RlLmNoaWxkTm9kZXMsXG5cdFx0XHRcdHN0b3BzID0gW107XG5cdFx0XHRmb3IgKHZhciBpID0gMCwgbCA9IG5vZGVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuXHRcdFx0XHR2YXIgY2hpbGQgPSBub2Rlc1tpXTtcblx0XHRcdFx0aWYgKGNoaWxkLm5vZGVUeXBlID09PSAxKVxuXHRcdFx0XHRcdHN0b3BzLnB1c2goYXBwbHlBdHRyaWJ1dGVzKG5ldyBHcmFkaWVudFN0b3AoKSwgY2hpbGQpKTtcblx0XHRcdH1cblx0XHRcdGdyYWRpZW50ID0gbmV3IEdyYWRpZW50KHN0b3BzLCByYWRpYWwpO1xuXHRcdH1cblx0XHR2YXIgb3JpZ2luLCBkZXN0aW5hdGlvbiwgaGlnaGxpZ2h0LFxuXHRcdFx0c2NhbGVUb0JvdW5kcyA9IGdldFZhbHVlKG5vZGUsICdncmFkaWVudFVuaXRzJywgdHJ1ZSkgIT09XG5cdFx0XHRcdCd1c2VyU3BhY2VPblVzZSc7XG5cdFx0aWYgKHJhZGlhbCkge1xuXHRcdFx0b3JpZ2luID0gZ2V0UG9pbnQobm9kZSwgJ2N4JywgJ2N5JywgZmFsc2UsIHNjYWxlVG9Cb3VuZHMpO1xuXHRcdFx0ZGVzdGluYXRpb24gPSBvcmlnaW4uYWRkKFxuXHRcdFx0XHRcdGdldFZhbHVlKG5vZGUsICdyJywgZmFsc2UsIGZhbHNlLCBzY2FsZVRvQm91bmRzKSwgMCk7XG5cdFx0XHRoaWdobGlnaHQgPSBnZXRQb2ludChub2RlLCAnZngnLCAnZnknLCB0cnVlLCBzY2FsZVRvQm91bmRzKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0b3JpZ2luID0gZ2V0UG9pbnQobm9kZSwgJ3gxJywgJ3kxJywgZmFsc2UsIHNjYWxlVG9Cb3VuZHMpO1xuXHRcdFx0ZGVzdGluYXRpb24gPSBnZXRQb2ludChub2RlLCAneDInLCAneTInLCBmYWxzZSwgc2NhbGVUb0JvdW5kcyk7XG5cdFx0fVxuXHRcdHZhciBjb2xvciA9IGFwcGx5QXR0cmlidXRlcyhcblx0XHRcdFx0bmV3IENvbG9yKGdyYWRpZW50LCBvcmlnaW4sIGRlc3RpbmF0aW9uLCBoaWdobGlnaHQpLCBub2RlKTtcblx0XHRjb2xvci5fc2NhbGVUb0JvdW5kcyA9IHNjYWxlVG9Cb3VuZHM7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHR2YXIgaW1wb3J0ZXJzID0ge1xuXHRcdCcjZG9jdW1lbnQnOiBmdW5jdGlvbiAobm9kZSwgdHlwZSwgb3B0aW9ucywgaXNSb290KSB7XG5cdFx0XHR2YXIgbm9kZXMgPSBub2RlLmNoaWxkTm9kZXM7XG5cdFx0XHRmb3IgKHZhciBpID0gMCwgbCA9IG5vZGVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuXHRcdFx0XHR2YXIgY2hpbGQgPSBub2Rlc1tpXTtcblx0XHRcdFx0aWYgKGNoaWxkLm5vZGVUeXBlID09PSAxKVxuXHRcdFx0XHRcdHJldHVybiBpbXBvcnROb2RlKGNoaWxkLCBvcHRpb25zLCBpc1Jvb3QpO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0ZzogaW1wb3J0R3JvdXAsXG5cdFx0c3ZnOiBpbXBvcnRHcm91cCxcblx0XHRjbGlwcGF0aDogaW1wb3J0R3JvdXAsXG5cdFx0cG9seWdvbjogaW1wb3J0UG9seSxcblx0XHRwb2x5bGluZTogaW1wb3J0UG9seSxcblx0XHRwYXRoOiBpbXBvcnRQYXRoLFxuXHRcdGxpbmVhcmdyYWRpZW50OiBpbXBvcnRHcmFkaWVudCxcblx0XHRyYWRpYWxncmFkaWVudDogaW1wb3J0R3JhZGllbnQsXG5cblx0XHRpbWFnZTogZnVuY3Rpb24gKG5vZGUpIHtcblx0XHRcdHZhciByYXN0ZXIgPSBuZXcgUmFzdGVyKGdldFZhbHVlKG5vZGUsICdocmVmJywgdHJ1ZSkpO1xuXHRcdFx0cmFzdGVyLm9uKCdsb2FkJywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBzaXplID0gZ2V0U2l6ZShub2RlKTtcblx0XHRcdFx0dGhpcy5zZXRTaXplKHNpemUpO1xuXHRcdFx0XHR2YXIgY2VudGVyID0gZ2V0UG9pbnQobm9kZSkuYWRkKHNpemUuZGl2aWRlKDIpKTtcblx0XHRcdFx0dGhpcy5fbWF0cml4LmFwcGVuZChuZXcgTWF0cml4KCkudHJhbnNsYXRlKGNlbnRlcikpO1xuXHRcdFx0fSk7XG5cdFx0XHRyZXR1cm4gcmFzdGVyO1xuXHRcdH0sXG5cblx0XHRzeW1ib2w6IGZ1bmN0aW9uKG5vZGUsIHR5cGUsIG9wdGlvbnMsIGlzUm9vdCkge1xuXHRcdFx0cmV0dXJuIG5ldyBTeW1ib2xEZWZpbml0aW9uKFxuXHRcdFx0XHRcdGltcG9ydEdyb3VwKG5vZGUsIHR5cGUsIG9wdGlvbnMsIGlzUm9vdCksIHRydWUpO1xuXHRcdH0sXG5cblx0XHRkZWZzOiBpbXBvcnRHcm91cCxcblxuXHRcdHVzZTogZnVuY3Rpb24obm9kZSkge1xuXHRcdFx0dmFyIGlkID0gKGdldFZhbHVlKG5vZGUsICdocmVmJywgdHJ1ZSkgfHwgJycpLnN1YnN0cmluZygxKSxcblx0XHRcdFx0ZGVmaW5pdGlvbiA9IGRlZmluaXRpb25zW2lkXSxcblx0XHRcdFx0cG9pbnQgPSBnZXRQb2ludChub2RlKTtcblx0XHRcdHJldHVybiBkZWZpbml0aW9uXG5cdFx0XHRcdFx0PyBkZWZpbml0aW9uIGluc3RhbmNlb2YgU3ltYm9sRGVmaW5pdGlvblxuXHRcdFx0XHRcdFx0PyBkZWZpbml0aW9uLnBsYWNlKHBvaW50KVxuXHRcdFx0XHRcdFx0OiBkZWZpbml0aW9uLmNsb25lKCkudHJhbnNsYXRlKHBvaW50KVxuXHRcdFx0XHRcdDogbnVsbDtcblx0XHR9LFxuXG5cdFx0Y2lyY2xlOiBmdW5jdGlvbihub2RlKSB7XG5cdFx0XHRyZXR1cm4gbmV3IFNoYXBlLkNpcmNsZShcblx0XHRcdFx0XHRnZXRQb2ludChub2RlLCAnY3gnLCAnY3knKSxcblx0XHRcdFx0XHRnZXRWYWx1ZShub2RlLCAncicpKTtcblx0XHR9LFxuXG5cdFx0ZWxsaXBzZTogZnVuY3Rpb24obm9kZSkge1xuXHRcdFx0cmV0dXJuIG5ldyBTaGFwZS5FbGxpcHNlKHtcblx0XHRcdFx0Y2VudGVyOiBnZXRQb2ludChub2RlLCAnY3gnLCAnY3knKSxcblx0XHRcdFx0cmFkaXVzOiBnZXRTaXplKG5vZGUsICdyeCcsICdyeScpXG5cdFx0XHR9KTtcblx0XHR9LFxuXG5cdFx0cmVjdDogZnVuY3Rpb24obm9kZSkge1xuXHRcdFx0cmV0dXJuIG5ldyBTaGFwZS5SZWN0YW5nbGUobmV3IFJlY3RhbmdsZShcblx0XHRcdFx0XHRcdGdldFBvaW50KG5vZGUpLFxuXHRcdFx0XHRcdFx0Z2V0U2l6ZShub2RlKVxuXHRcdFx0XHRcdCksIGdldFNpemUobm9kZSwgJ3J4JywgJ3J5JykpO1xuXHRcdFx0fSxcblxuXHRcdGxpbmU6IGZ1bmN0aW9uKG5vZGUpIHtcblx0XHRcdHJldHVybiBuZXcgUGF0aC5MaW5lKFxuXHRcdFx0XHRcdGdldFBvaW50KG5vZGUsICd4MScsICd5MScpLFxuXHRcdFx0XHRcdGdldFBvaW50KG5vZGUsICd4MicsICd5MicpKTtcblx0XHR9LFxuXG5cdFx0dGV4dDogZnVuY3Rpb24obm9kZSkge1xuXHRcdFx0dmFyIHRleHQgPSBuZXcgUG9pbnRUZXh0KGdldFBvaW50KG5vZGUpLmFkZChcblx0XHRcdFx0XHRnZXRQb2ludChub2RlLCAnZHgnLCAnZHknKSkpO1xuXHRcdFx0dGV4dC5zZXRDb250ZW50KG5vZGUudGV4dENvbnRlbnQudHJpbSgpIHx8ICcnKTtcblx0XHRcdHJldHVybiB0ZXh0O1xuXHRcdH1cblx0fTtcblxuXHRmdW5jdGlvbiBhcHBseVRyYW5zZm9ybShpdGVtLCB2YWx1ZSwgbmFtZSwgbm9kZSkge1xuXHRcdGlmIChpdGVtLnRyYW5zZm9ybSkge1xuXHRcdFx0dmFyIHRyYW5zZm9ybXMgPSAobm9kZS5nZXRBdHRyaWJ1dGUobmFtZSkgfHwgJycpLnNwbGl0KC9cXClcXHMqL2cpLFxuXHRcdFx0XHRtYXRyaXggPSBuZXcgTWF0cml4KCk7XG5cdFx0XHRmb3IgKHZhciBpID0gMCwgbCA9IHRyYW5zZm9ybXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG5cdFx0XHRcdHZhciB0cmFuc2Zvcm0gPSB0cmFuc2Zvcm1zW2ldO1xuXHRcdFx0XHRpZiAoIXRyYW5zZm9ybSlcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0dmFyIHBhcnRzID0gdHJhbnNmb3JtLnNwbGl0KC9cXChcXHMqLyksXG5cdFx0XHRcdFx0Y29tbWFuZCA9IHBhcnRzWzBdLFxuXHRcdFx0XHRcdHYgPSBwYXJ0c1sxXS5zcGxpdCgvW1xccyxdKy9nKTtcblx0XHRcdFx0Zm9yICh2YXIgaiA9IDAsIG0gPSB2Lmxlbmd0aDsgaiA8IG07IGorKylcblx0XHRcdFx0XHR2W2pdID0gcGFyc2VGbG9hdCh2W2pdKTtcblx0XHRcdFx0c3dpdGNoIChjb21tYW5kKSB7XG5cdFx0XHRcdGNhc2UgJ21hdHJpeCc6XG5cdFx0XHRcdFx0bWF0cml4LmFwcGVuZChcblx0XHRcdFx0XHRcdFx0bmV3IE1hdHJpeCh2WzBdLCB2WzFdLCB2WzJdLCB2WzNdLCB2WzRdLCB2WzVdKSk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgJ3JvdGF0ZSc6XG5cdFx0XHRcdFx0bWF0cml4LnJvdGF0ZSh2WzBdLCB2WzFdIHx8IDAsIHZbMl0gfHwgMCk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgJ3RyYW5zbGF0ZSc6XG5cdFx0XHRcdFx0bWF0cml4LnRyYW5zbGF0ZSh2WzBdLCB2WzFdIHx8IDApO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlICdzY2FsZSc6XG5cdFx0XHRcdFx0bWF0cml4LnNjYWxlKHYpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlICdza2V3WCc6XG5cdFx0XHRcdFx0bWF0cml4LnNrZXcodlswXSwgMCk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgJ3NrZXdZJzpcblx0XHRcdFx0XHRtYXRyaXguc2tldygwLCB2WzBdKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0aXRlbS50cmFuc2Zvcm0obWF0cml4KTtcblx0XHR9XG5cdH1cblxuXHRmdW5jdGlvbiBhcHBseU9wYWNpdHkoaXRlbSwgdmFsdWUsIG5hbWUpIHtcblx0XHR2YXIga2V5ID0gbmFtZSA9PT0gJ2ZpbGwtb3BhY2l0eScgPyAnZ2V0RmlsbENvbG9yJyA6ICdnZXRTdHJva2VDb2xvcicsXG5cdFx0XHRjb2xvciA9IGl0ZW1ba2V5XSAmJiBpdGVtW2tleV0oKTtcblx0XHRpZiAoY29sb3IpXG5cdFx0XHRjb2xvci5zZXRBbHBoYShwYXJzZUZsb2F0KHZhbHVlKSk7XG5cdH1cblxuXHR2YXIgYXR0cmlidXRlcyA9IEJhc2Uuc2V0KEJhc2UuZWFjaChTdmdTdHlsZXMsIGZ1bmN0aW9uKGVudHJ5KSB7XG5cdFx0dGhpc1tlbnRyeS5hdHRyaWJ1dGVdID0gZnVuY3Rpb24oaXRlbSwgdmFsdWUpIHtcblx0XHRcdGlmIChpdGVtW2VudHJ5LnNldF0pIHtcblx0XHRcdFx0aXRlbVtlbnRyeS5zZXRdKGNvbnZlcnRWYWx1ZSh2YWx1ZSwgZW50cnkudHlwZSwgZW50cnkuZnJvbVNWRykpO1xuXHRcdFx0XHRpZiAoZW50cnkudHlwZSA9PT0gJ2NvbG9yJykge1xuXHRcdFx0XHRcdHZhciBjb2xvciA9IGl0ZW1bZW50cnkuZ2V0XSgpO1xuXHRcdFx0XHRcdGlmIChjb2xvcikge1xuXHRcdFx0XHRcdFx0aWYgKGNvbG9yLl9zY2FsZVRvQm91bmRzKSB7XG5cdFx0XHRcdFx0XHRcdHZhciBib3VuZHMgPSBpdGVtLmdldEJvdW5kcygpO1xuXHRcdFx0XHRcdFx0XHRjb2xvci50cmFuc2Zvcm0obmV3IE1hdHJpeCgpXG5cdFx0XHRcdFx0XHRcdFx0LnRyYW5zbGF0ZShib3VuZHMuZ2V0UG9pbnQoKSlcblx0XHRcdFx0XHRcdFx0XHQuc2NhbGUoYm91bmRzLmdldFNpemUoKSkpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH0sIHt9KSwge1xuXHRcdGlkOiBmdW5jdGlvbihpdGVtLCB2YWx1ZSkge1xuXHRcdFx0ZGVmaW5pdGlvbnNbdmFsdWVdID0gaXRlbTtcblx0XHRcdGlmIChpdGVtLnNldE5hbWUpXG5cdFx0XHRcdGl0ZW0uc2V0TmFtZSh2YWx1ZSk7XG5cdFx0fSxcblxuXHRcdCdjbGlwLXBhdGgnOiBmdW5jdGlvbihpdGVtLCB2YWx1ZSkge1xuXHRcdFx0dmFyIGNsaXAgPSBnZXREZWZpbml0aW9uKHZhbHVlKTtcblx0XHRcdGlmIChjbGlwKSB7XG5cdFx0XHRcdGNsaXAgPSBjbGlwLmNsb25lKCk7XG5cdFx0XHRcdGNsaXAuc2V0Q2xpcE1hc2sodHJ1ZSk7XG5cdFx0XHRcdGlmIChpdGVtIGluc3RhbmNlb2YgR3JvdXApIHtcblx0XHRcdFx0XHRpdGVtLmluc2VydENoaWxkKDAsIGNsaXApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHJldHVybiBuZXcgR3JvdXAoY2xpcCwgaXRlbSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0Z3JhZGllbnRUcmFuc2Zvcm06IGFwcGx5VHJhbnNmb3JtLFxuXHRcdHRyYW5zZm9ybTogYXBwbHlUcmFuc2Zvcm0sXG5cblx0XHQnZmlsbC1vcGFjaXR5JzogYXBwbHlPcGFjaXR5LFxuXHRcdCdzdHJva2Utb3BhY2l0eSc6IGFwcGx5T3BhY2l0eSxcblxuXHRcdHZpc2liaWxpdHk6IGZ1bmN0aW9uKGl0ZW0sIHZhbHVlKSB7XG5cdFx0XHRpZiAoaXRlbS5zZXRWaXNpYmxlKVxuXHRcdFx0XHRpdGVtLnNldFZpc2libGUodmFsdWUgPT09ICd2aXNpYmxlJyk7XG5cdFx0fSxcblxuXHRcdGRpc3BsYXk6IGZ1bmN0aW9uKGl0ZW0sIHZhbHVlKSB7XG5cdFx0XHRpZiAoaXRlbS5zZXRWaXNpYmxlKVxuXHRcdFx0XHRpdGVtLnNldFZpc2libGUodmFsdWUgIT09IG51bGwpO1xuXHRcdH0sXG5cblx0XHQnc3RvcC1jb2xvcic6IGZ1bmN0aW9uKGl0ZW0sIHZhbHVlKSB7XG5cdFx0XHRpZiAoaXRlbS5zZXRDb2xvcilcblx0XHRcdFx0aXRlbS5zZXRDb2xvcih2YWx1ZSk7XG5cdFx0fSxcblxuXHRcdCdzdG9wLW9wYWNpdHknOiBmdW5jdGlvbihpdGVtLCB2YWx1ZSkge1xuXHRcdFx0aWYgKGl0ZW0uX2NvbG9yKVxuXHRcdFx0XHRpdGVtLl9jb2xvci5zZXRBbHBoYShwYXJzZUZsb2F0KHZhbHVlKSk7XG5cdFx0fSxcblxuXHRcdG9mZnNldDogZnVuY3Rpb24oaXRlbSwgdmFsdWUpIHtcblx0XHRcdGlmIChpdGVtLnNldE9mZnNldCkge1xuXHRcdFx0XHR2YXIgcGVyY2VudCA9IHZhbHVlLm1hdGNoKC8oLiopJSQvKTtcblx0XHRcdFx0aXRlbS5zZXRPZmZzZXQocGVyY2VudCA/IHBlcmNlbnRbMV0gLyAxMDAgOiBwYXJzZUZsb2F0KHZhbHVlKSk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdHZpZXdCb3g6IGZ1bmN0aW9uKGl0ZW0sIHZhbHVlLCBuYW1lLCBub2RlLCBzdHlsZXMpIHtcblx0XHRcdHZhciByZWN0ID0gbmV3IFJlY3RhbmdsZShjb252ZXJ0VmFsdWUodmFsdWUsICdhcnJheScpKSxcblx0XHRcdFx0c2l6ZSA9IGdldFNpemUobm9kZSwgbnVsbCwgbnVsbCwgdHJ1ZSksXG5cdFx0XHRcdGdyb3VwLFxuXHRcdFx0XHRtYXRyaXg7XG5cdFx0XHRpZiAoaXRlbSBpbnN0YW5jZW9mIEdyb3VwKSB7XG5cdFx0XHRcdHZhciBzY2FsZSA9IHNpemUgPyBzaXplLmRpdmlkZShyZWN0LmdldFNpemUoKSkgOiAxLFxuXHRcdFx0XHRtYXRyaXggPSBuZXcgTWF0cml4KCkuc2NhbGUoc2NhbGUpXG5cdFx0XHRcdFx0XHQudHJhbnNsYXRlKHJlY3QuZ2V0UG9pbnQoKS5uZWdhdGUoKSk7XG5cdFx0XHRcdGdyb3VwID0gaXRlbTtcblx0XHRcdH0gZWxzZSBpZiAoaXRlbSBpbnN0YW5jZW9mIFN5bWJvbERlZmluaXRpb24pIHtcblx0XHRcdFx0aWYgKHNpemUpXG5cdFx0XHRcdFx0cmVjdC5zZXRTaXplKHNpemUpO1xuXHRcdFx0XHRncm91cCA9IGl0ZW0uX2l0ZW07XG5cdFx0XHR9XG5cdFx0XHRpZiAoZ3JvdXApICB7XG5cdFx0XHRcdGlmIChnZXRBdHRyaWJ1dGUobm9kZSwgJ292ZXJmbG93Jywgc3R5bGVzKSAhPT0gJ3Zpc2libGUnKSB7XG5cdFx0XHRcdFx0dmFyIGNsaXAgPSBuZXcgU2hhcGUuUmVjdGFuZ2xlKHJlY3QpO1xuXHRcdFx0XHRcdGNsaXAuc2V0Q2xpcE1hc2sodHJ1ZSk7XG5cdFx0XHRcdFx0Z3JvdXAuYWRkQ2hpbGQoY2xpcCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKG1hdHJpeClcblx0XHRcdFx0XHRncm91cC50cmFuc2Zvcm0obWF0cml4KTtcblx0XHRcdH1cblx0XHR9XG5cdH0pO1xuXG5cdGZ1bmN0aW9uIGdldEF0dHJpYnV0ZShub2RlLCBuYW1lLCBzdHlsZXMpIHtcblx0XHR2YXIgYXR0ciA9IG5vZGUuYXR0cmlidXRlc1tuYW1lXSxcblx0XHRcdHZhbHVlID0gYXR0ciAmJiBhdHRyLnZhbHVlO1xuXHRcdGlmICghdmFsdWUgJiYgbm9kZS5zdHlsZSkge1xuXHRcdFx0dmFyIHN0eWxlID0gQmFzZS5jYW1lbGl6ZShuYW1lKTtcblx0XHRcdHZhbHVlID0gbm9kZS5zdHlsZVtzdHlsZV07XG5cdFx0XHRpZiAoIXZhbHVlICYmIHN0eWxlcy5ub2RlW3N0eWxlXSAhPT0gc3R5bGVzLnBhcmVudFtzdHlsZV0pXG5cdFx0XHRcdHZhbHVlID0gc3R5bGVzLm5vZGVbc3R5bGVdO1xuXHRcdH1cblx0XHRyZXR1cm4gIXZhbHVlID8gdW5kZWZpbmVkXG5cdFx0XHRcdDogdmFsdWUgPT09ICdub25lJyA/IG51bGxcblx0XHRcdFx0OiB2YWx1ZTtcblx0fVxuXG5cdGZ1bmN0aW9uIGFwcGx5QXR0cmlidXRlcyhpdGVtLCBub2RlLCBpc1Jvb3QpIHtcblx0XHR2YXIgcGFyZW50ID0gbm9kZS5wYXJlbnROb2RlLFxuXHRcdFx0c3R5bGVzID0ge1xuXHRcdFx0XHRub2RlOiBEb21FbGVtZW50LmdldFN0eWxlcyhub2RlKSB8fCB7fSxcblx0XHRcdFx0cGFyZW50OiAhaXNSb290ICYmICEvXmRlZnMkL2kudGVzdChwYXJlbnQudGFnTmFtZSlcblx0XHRcdFx0XHRcdCYmIERvbUVsZW1lbnQuZ2V0U3R5bGVzKHBhcmVudCkgfHwge31cblx0XHRcdH07XG5cdFx0QmFzZS5lYWNoKGF0dHJpYnV0ZXMsIGZ1bmN0aW9uKGFwcGx5LCBuYW1lKSB7XG5cdFx0XHR2YXIgdmFsdWUgPSBnZXRBdHRyaWJ1dGUobm9kZSwgbmFtZSwgc3R5bGVzKTtcblx0XHRcdGl0ZW0gPSB2YWx1ZSAhPT0gdW5kZWZpbmVkXG5cdFx0XHRcdFx0JiYgYXBwbHkoaXRlbSwgdmFsdWUsIG5hbWUsIG5vZGUsIHN0eWxlcykgfHwgaXRlbTtcblx0XHR9KTtcblx0XHRyZXR1cm4gaXRlbTtcblx0fVxuXG5cdGZ1bmN0aW9uIGdldERlZmluaXRpb24odmFsdWUpIHtcblx0XHR2YXIgbWF0Y2ggPSB2YWx1ZSAmJiB2YWx1ZS5tYXRjaCgvXFwoKD86W1wiJyNdKikoW15cIicpXSspLyksXG5cdFx0XHRuYW1lID0gbWF0Y2ggJiYgbWF0Y2hbMV0sXG5cdFx0XHRyZXMgPSBuYW1lICYmIGRlZmluaXRpb25zW3dpbmRvd1xuXHRcdFx0XHRcdD8gbmFtZS5yZXBsYWNlKHdpbmRvdy5sb2NhdGlvbi5ocmVmLnNwbGl0KCcjJylbMF0gKyAnIycsICcnKVxuXHRcdFx0XHRcdDogbmFtZV07XG5cdFx0aWYgKHJlcyAmJiByZXMuX3NjYWxlVG9Cb3VuZHMpIHtcblx0XHRcdHJlcyA9IHJlcy5jbG9uZSgpO1xuXHRcdFx0cmVzLl9zY2FsZVRvQm91bmRzID0gdHJ1ZTtcblx0XHR9XG5cdFx0cmV0dXJuIHJlcztcblx0fVxuXG5cdGZ1bmN0aW9uIGltcG9ydE5vZGUobm9kZSwgb3B0aW9ucywgaXNSb290KSB7XG5cdFx0dmFyIHR5cGUgPSBub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCksXG5cdFx0XHRpc0VsZW1lbnQgPSB0eXBlICE9PSAnI2RvY3VtZW50Jyxcblx0XHRcdGJvZHkgPSBkb2N1bWVudC5ib2R5LFxuXHRcdFx0Y29udGFpbmVyLFxuXHRcdFx0cGFyZW50LFxuXHRcdFx0bmV4dDtcblx0XHRpZiAoaXNSb290ICYmIGlzRWxlbWVudCkge1xuXHRcdFx0cm9vdFNpemUgPSBwYXBlci5nZXRWaWV3KCkuZ2V0U2l6ZSgpO1xuXHRcdFx0cm9vdFNpemUgPSBnZXRTaXplKG5vZGUsIG51bGwsIG51bGwsIHRydWUpIHx8IHJvb3RTaXplO1xuXHRcdFx0Y29udGFpbmVyID0gU3ZnRWxlbWVudC5jcmVhdGUoJ3N2ZycsIHtcblx0XHRcdFx0c3R5bGU6ICdzdHJva2Utd2lkdGg6IDFweDsgc3Ryb2tlLW1pdGVybGltaXQ6IDEwJ1xuXHRcdFx0fSk7XG5cdFx0XHRwYXJlbnQgPSBub2RlLnBhcmVudE5vZGU7XG5cdFx0XHRuZXh0ID0gbm9kZS5uZXh0U2libGluZztcblx0XHRcdGNvbnRhaW5lci5hcHBlbmRDaGlsZChub2RlKTtcblx0XHRcdGJvZHkuYXBwZW5kQ2hpbGQoY29udGFpbmVyKTtcblx0XHR9XG5cdFx0dmFyIHNldHRpbmdzID0gcGFwZXIuc2V0dGluZ3MsXG5cdFx0XHRhcHBseU1hdHJpeCA9IHNldHRpbmdzLmFwcGx5TWF0cml4LFxuXHRcdFx0aW5zZXJ0SXRlbXMgPSBzZXR0aW5ncy5pbnNlcnRJdGVtcztcblx0XHRzZXR0aW5ncy5hcHBseU1hdHJpeCA9IGZhbHNlO1xuXHRcdHNldHRpbmdzLmluc2VydEl0ZW1zID0gZmFsc2U7XG5cdFx0dmFyIGltcG9ydGVyID0gaW1wb3J0ZXJzW3R5cGVdLFxuXHRcdFx0aXRlbSA9IGltcG9ydGVyICYmIGltcG9ydGVyKG5vZGUsIHR5cGUsIG9wdGlvbnMsIGlzUm9vdCkgfHwgbnVsbDtcblx0XHRzZXR0aW5ncy5pbnNlcnRJdGVtcyA9IGluc2VydEl0ZW1zO1xuXHRcdHNldHRpbmdzLmFwcGx5TWF0cml4ID0gYXBwbHlNYXRyaXg7XG5cdFx0aWYgKGl0ZW0pIHtcblx0XHRcdGlmIChpc0VsZW1lbnQgJiYgIShpdGVtIGluc3RhbmNlb2YgR3JvdXApKVxuXHRcdFx0XHRpdGVtID0gYXBwbHlBdHRyaWJ1dGVzKGl0ZW0sIG5vZGUsIGlzUm9vdCk7XG5cdFx0XHR2YXIgb25JbXBvcnQgPSBvcHRpb25zLm9uSW1wb3J0LFxuXHRcdFx0XHRkYXRhID0gaXNFbGVtZW50ICYmIG5vZGUuZ2V0QXR0cmlidXRlKCdkYXRhLXBhcGVyLWRhdGEnKTtcblx0XHRcdGlmIChvbkltcG9ydClcblx0XHRcdFx0aXRlbSA9IG9uSW1wb3J0KG5vZGUsIGl0ZW0sIG9wdGlvbnMpIHx8IGl0ZW07XG5cdFx0XHRpZiAob3B0aW9ucy5leHBhbmRTaGFwZXMgJiYgaXRlbSBpbnN0YW5jZW9mIFNoYXBlKSB7XG5cdFx0XHRcdGl0ZW0ucmVtb3ZlKCk7XG5cdFx0XHRcdGl0ZW0gPSBpdGVtLnRvUGF0aCgpO1xuXHRcdFx0fVxuXHRcdFx0aWYgKGRhdGEpXG5cdFx0XHRcdGl0ZW0uX2RhdGEgPSBKU09OLnBhcnNlKGRhdGEpO1xuXHRcdH1cblx0XHRpZiAoY29udGFpbmVyKSB7XG5cdFx0XHRib2R5LnJlbW92ZUNoaWxkKGNvbnRhaW5lcik7XG5cdFx0XHRpZiAocGFyZW50KSB7XG5cdFx0XHRcdGlmIChuZXh0KSB7XG5cdFx0XHRcdFx0cGFyZW50Lmluc2VydEJlZm9yZShub2RlLCBuZXh0KTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRwYXJlbnQuYXBwZW5kQ2hpbGQobm9kZSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0aWYgKGlzUm9vdCkge1xuXHRcdFx0ZGVmaW5pdGlvbnMgPSB7fTtcblx0XHRcdGlmIChpdGVtICYmIEJhc2UucGljayhvcHRpb25zLmFwcGx5TWF0cml4LCBhcHBseU1hdHJpeCkpXG5cdFx0XHRcdGl0ZW0ubWF0cml4LmFwcGx5KHRydWUsIHRydWUpO1xuXHRcdH1cblx0XHRyZXR1cm4gaXRlbTtcblx0fVxuXG5cdGZ1bmN0aW9uIGltcG9ydFNWRyhzb3VyY2UsIG9wdGlvbnMsIG93bmVyKSB7XG5cdFx0aWYgKCFzb3VyY2UpXG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRvcHRpb25zID0gdHlwZW9mIG9wdGlvbnMgPT09ICdmdW5jdGlvbicgPyB7IG9uTG9hZDogb3B0aW9ucyB9XG5cdFx0XHRcdDogb3B0aW9ucyB8fCB7fTtcblx0XHR2YXIgc2NvcGUgPSBwYXBlcixcblx0XHRcdGl0ZW0gPSBudWxsO1xuXG5cdFx0ZnVuY3Rpb24gb25Mb2FkKHN2Zykge1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0dmFyIG5vZGUgPSB0eXBlb2Ygc3ZnID09PSAnb2JqZWN0JyA/IHN2ZyA6IG5ldyBzZWxmLkRPTVBhcnNlcigpXG5cdFx0XHRcdFx0XHQucGFyc2VGcm9tU3RyaW5nKHN2ZywgJ2ltYWdlL3N2Zyt4bWwnKTtcblx0XHRcdFx0aWYgKCFub2RlLm5vZGVOYW1lKSB7XG5cdFx0XHRcdFx0bm9kZSA9IG51bGw7XG5cdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCdVbnN1cHBvcnRlZCBTVkcgc291cmNlOiAnICsgc291cmNlKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRwYXBlciA9IHNjb3BlO1xuXHRcdFx0XHRpdGVtID0gaW1wb3J0Tm9kZShub2RlLCBvcHRpb25zLCB0cnVlKTtcblx0XHRcdFx0aWYgKCFvcHRpb25zIHx8IG9wdGlvbnMuaW5zZXJ0ICE9PSBmYWxzZSkge1xuXHRcdFx0XHRcdG93bmVyLl9pbnNlcnRJdGVtKHVuZGVmaW5lZCwgaXRlbSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0dmFyIG9uTG9hZCA9IG9wdGlvbnMub25Mb2FkO1xuXHRcdFx0XHRpZiAob25Mb2FkKVxuXHRcdFx0XHRcdG9uTG9hZChpdGVtLCBzdmcpO1xuXHRcdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0XHRvbkVycm9yKGUpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIG9uRXJyb3IobWVzc2FnZSwgc3RhdHVzKSB7XG5cdFx0XHR2YXIgb25FcnJvciA9IG9wdGlvbnMub25FcnJvcjtcblx0XHRcdGlmIChvbkVycm9yKSB7XG5cdFx0XHRcdG9uRXJyb3IobWVzc2FnZSwgc3RhdHVzKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAodHlwZW9mIHNvdXJjZSA9PT0gJ3N0cmluZycgJiYgIS9eLio8Ly50ZXN0KHNvdXJjZSkpIHtcblx0XHRcdHZhciBub2RlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoc291cmNlKTtcblx0XHRcdGlmIChub2RlKSB7XG5cdFx0XHRcdG9uTG9hZChub2RlKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdEh0dHAucmVxdWVzdCh7XG5cdFx0XHRcdFx0dXJsOiBzb3VyY2UsXG5cdFx0XHRcdFx0YXN5bmM6IHRydWUsXG5cdFx0XHRcdFx0b25Mb2FkOiBvbkxvYWQsXG5cdFx0XHRcdFx0b25FcnJvcjogb25FcnJvclxuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHR9IGVsc2UgaWYgKHR5cGVvZiBGaWxlICE9PSAndW5kZWZpbmVkJyAmJiBzb3VyY2UgaW5zdGFuY2VvZiBGaWxlKSB7XG5cdFx0XHR2YXIgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcblx0XHRcdHJlYWRlci5vbmxvYWQgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0b25Mb2FkKHJlYWRlci5yZXN1bHQpO1xuXHRcdFx0fTtcblx0XHRcdHJlYWRlci5vbmVycm9yID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdG9uRXJyb3IocmVhZGVyLmVycm9yKTtcblx0XHRcdH07XG5cdFx0XHRyZXR1cm4gcmVhZGVyLnJlYWRBc1RleHQoc291cmNlKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0b25Mb2FkKHNvdXJjZSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGl0ZW07XG5cdH1cblxuXHRJdGVtLmluamVjdCh7XG5cdFx0aW1wb3J0U1ZHOiBmdW5jdGlvbihub2RlLCBvcHRpb25zKSB7XG5cdFx0XHRyZXR1cm4gaW1wb3J0U1ZHKG5vZGUsIG9wdGlvbnMsIHRoaXMpO1xuXHRcdH1cblx0fSk7XG5cblx0UHJvamVjdC5pbmplY3Qoe1xuXHRcdGltcG9ydFNWRzogZnVuY3Rpb24obm9kZSwgb3B0aW9ucykge1xuXHRcdFx0dGhpcy5hY3RpdmF0ZSgpO1xuXHRcdFx0cmV0dXJuIGltcG9ydFNWRyhub2RlLCBvcHRpb25zLCB0aGlzKTtcblx0XHR9XG5cdH0pO1xufTtcblxuQmFzZS5leHBvcnRzLlBhcGVyU2NyaXB0ID0gZnVuY3Rpb24oKSB7XG5cdHZhciBnbG9iYWwgPSB0aGlzLFxuXHRcdGFjb3JuID0gZ2xvYmFsLmFjb3JuO1xuXHRpZiAoIWFjb3JuICYmIHR5cGVvZiByZXF1aXJlICE9PSAndW5kZWZpbmVkJykge1xuXHRcdHRyeSB7IGFjb3JuID0gcmVxdWlyZSgnYWNvcm4nKTsgfSBjYXRjaChlKSB7fVxuXHR9XG5cdGlmICghYWNvcm4pIHtcblx0XHR2YXIgZXhwb3J0cywgbW9kdWxlO1xuXHRcdGFjb3JuID0gZXhwb3J0cyA9IG1vZHVsZSA9IHt9O1xuXG4oZnVuY3Rpb24ocm9vdCwgbW9kKSB7XG4gIGlmICh0eXBlb2YgZXhwb3J0cyA9PSBcIm9iamVjdFwiICYmIHR5cGVvZiBtb2R1bGUgPT0gXCJvYmplY3RcIikgcmV0dXJuIG1vZChleHBvcnRzKTtcbiAgaWYgKHR5cGVvZiBkZWZpbmUgPT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHJldHVybiBkZWZpbmUoW1wiZXhwb3J0c1wiXSwgbW9kKTtcbiAgbW9kKHJvb3QuYWNvcm4gfHwgKHJvb3QuYWNvcm4gPSB7fSkpO1xufSkodGhpcywgZnVuY3Rpb24oZXhwb3J0cykge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICBleHBvcnRzLnZlcnNpb24gPSBcIjAuNS4wXCI7XG5cbiAgdmFyIG9wdGlvbnMsIGlucHV0LCBpbnB1dExlbiwgc291cmNlRmlsZTtcblxuICBleHBvcnRzLnBhcnNlID0gZnVuY3Rpb24oaW5wdCwgb3B0cykge1xuXHRpbnB1dCA9IFN0cmluZyhpbnB0KTsgaW5wdXRMZW4gPSBpbnB1dC5sZW5ndGg7XG5cdHNldE9wdGlvbnMob3B0cyk7XG5cdGluaXRUb2tlblN0YXRlKCk7XG5cdHJldHVybiBwYXJzZVRvcExldmVsKG9wdGlvbnMucHJvZ3JhbSk7XG4gIH07XG5cbiAgdmFyIGRlZmF1bHRPcHRpb25zID0gZXhwb3J0cy5kZWZhdWx0T3B0aW9ucyA9IHtcblx0ZWNtYVZlcnNpb246IDUsXG5cdHN0cmljdFNlbWljb2xvbnM6IGZhbHNlLFxuXHRhbGxvd1RyYWlsaW5nQ29tbWFzOiB0cnVlLFxuXHRmb3JiaWRSZXNlcnZlZDogZmFsc2UsXG5cdGFsbG93UmV0dXJuT3V0c2lkZUZ1bmN0aW9uOiBmYWxzZSxcblx0bG9jYXRpb25zOiBmYWxzZSxcblx0b25Db21tZW50OiBudWxsLFxuXHRyYW5nZXM6IGZhbHNlLFxuXHRwcm9ncmFtOiBudWxsLFxuXHRzb3VyY2VGaWxlOiBudWxsLFxuXHRkaXJlY3RTb3VyY2VGaWxlOiBudWxsXG4gIH07XG5cbiAgZnVuY3Rpb24gc2V0T3B0aW9ucyhvcHRzKSB7XG5cdG9wdGlvbnMgPSBvcHRzIHx8IHt9O1xuXHRmb3IgKHZhciBvcHQgaW4gZGVmYXVsdE9wdGlvbnMpIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9wdGlvbnMsIG9wdCkpXG5cdCAgb3B0aW9uc1tvcHRdID0gZGVmYXVsdE9wdGlvbnNbb3B0XTtcblx0c291cmNlRmlsZSA9IG9wdGlvbnMuc291cmNlRmlsZSB8fCBudWxsO1xuICB9XG5cbiAgdmFyIGdldExpbmVJbmZvID0gZXhwb3J0cy5nZXRMaW5lSW5mbyA9IGZ1bmN0aW9uKGlucHV0LCBvZmZzZXQpIHtcblx0Zm9yICh2YXIgbGluZSA9IDEsIGN1ciA9IDA7Oykge1xuXHQgIGxpbmVCcmVhay5sYXN0SW5kZXggPSBjdXI7XG5cdCAgdmFyIG1hdGNoID0gbGluZUJyZWFrLmV4ZWMoaW5wdXQpO1xuXHQgIGlmIChtYXRjaCAmJiBtYXRjaC5pbmRleCA8IG9mZnNldCkge1xuXHRcdCsrbGluZTtcblx0XHRjdXIgPSBtYXRjaC5pbmRleCArIG1hdGNoWzBdLmxlbmd0aDtcblx0ICB9IGVsc2UgYnJlYWs7XG5cdH1cblx0cmV0dXJuIHtsaW5lOiBsaW5lLCBjb2x1bW46IG9mZnNldCAtIGN1cn07XG4gIH07XG5cbiAgZXhwb3J0cy50b2tlbml6ZSA9IGZ1bmN0aW9uKGlucHQsIG9wdHMpIHtcblx0aW5wdXQgPSBTdHJpbmcoaW5wdCk7IGlucHV0TGVuID0gaW5wdXQubGVuZ3RoO1xuXHRzZXRPcHRpb25zKG9wdHMpO1xuXHRpbml0VG9rZW5TdGF0ZSgpO1xuXG5cdHZhciB0ID0ge307XG5cdGZ1bmN0aW9uIGdldFRva2VuKGZvcmNlUmVnZXhwKSB7XG5cdCAgbGFzdEVuZCA9IHRva0VuZDtcblx0ICByZWFkVG9rZW4oZm9yY2VSZWdleHApO1xuXHQgIHQuc3RhcnQgPSB0b2tTdGFydDsgdC5lbmQgPSB0b2tFbmQ7XG5cdCAgdC5zdGFydExvYyA9IHRva1N0YXJ0TG9jOyB0LmVuZExvYyA9IHRva0VuZExvYztcblx0ICB0LnR5cGUgPSB0b2tUeXBlOyB0LnZhbHVlID0gdG9rVmFsO1xuXHQgIHJldHVybiB0O1xuXHR9XG5cdGdldFRva2VuLmp1bXBUbyA9IGZ1bmN0aW9uKHBvcywgcmVBbGxvd2VkKSB7XG5cdCAgdG9rUG9zID0gcG9zO1xuXHQgIGlmIChvcHRpb25zLmxvY2F0aW9ucykge1xuXHRcdHRva0N1ckxpbmUgPSAxO1xuXHRcdHRva0xpbmVTdGFydCA9IGxpbmVCcmVhay5sYXN0SW5kZXggPSAwO1xuXHRcdHZhciBtYXRjaDtcblx0XHR3aGlsZSAoKG1hdGNoID0gbGluZUJyZWFrLmV4ZWMoaW5wdXQpKSAmJiBtYXRjaC5pbmRleCA8IHBvcykge1xuXHRcdCAgKyt0b2tDdXJMaW5lO1xuXHRcdCAgdG9rTGluZVN0YXJ0ID0gbWF0Y2guaW5kZXggKyBtYXRjaFswXS5sZW5ndGg7XG5cdFx0fVxuXHQgIH1cblx0ICB0b2tSZWdleHBBbGxvd2VkID0gcmVBbGxvd2VkO1xuXHQgIHNraXBTcGFjZSgpO1xuXHR9O1xuXHRyZXR1cm4gZ2V0VG9rZW47XG4gIH07XG5cbiAgdmFyIHRva1BvcztcblxuICB2YXIgdG9rU3RhcnQsIHRva0VuZDtcblxuICB2YXIgdG9rU3RhcnRMb2MsIHRva0VuZExvYztcblxuICB2YXIgdG9rVHlwZSwgdG9rVmFsO1xuXG4gIHZhciB0b2tSZWdleHBBbGxvd2VkO1xuXG4gIHZhciB0b2tDdXJMaW5lLCB0b2tMaW5lU3RhcnQ7XG5cbiAgdmFyIGxhc3RTdGFydCwgbGFzdEVuZCwgbGFzdEVuZExvYztcblxuICB2YXIgaW5GdW5jdGlvbiwgbGFiZWxzLCBzdHJpY3Q7XG5cbiAgZnVuY3Rpb24gcmFpc2UocG9zLCBtZXNzYWdlKSB7XG5cdHZhciBsb2MgPSBnZXRMaW5lSW5mbyhpbnB1dCwgcG9zKTtcblx0bWVzc2FnZSArPSBcIiAoXCIgKyBsb2MubGluZSArIFwiOlwiICsgbG9jLmNvbHVtbiArIFwiKVwiO1xuXHR2YXIgZXJyID0gbmV3IFN5bnRheEVycm9yKG1lc3NhZ2UpO1xuXHRlcnIucG9zID0gcG9zOyBlcnIubG9jID0gbG9jOyBlcnIucmFpc2VkQXQgPSB0b2tQb3M7XG5cdHRocm93IGVycjtcbiAgfVxuXG4gIHZhciBlbXB0eSA9IFtdO1xuXG4gIHZhciBfbnVtID0ge3R5cGU6IFwibnVtXCJ9LCBfcmVnZXhwID0ge3R5cGU6IFwicmVnZXhwXCJ9LCBfc3RyaW5nID0ge3R5cGU6IFwic3RyaW5nXCJ9O1xuICB2YXIgX25hbWUgPSB7dHlwZTogXCJuYW1lXCJ9LCBfZW9mID0ge3R5cGU6IFwiZW9mXCJ9O1xuXG4gIHZhciBfYnJlYWsgPSB7a2V5d29yZDogXCJicmVha1wifSwgX2Nhc2UgPSB7a2V5d29yZDogXCJjYXNlXCIsIGJlZm9yZUV4cHI6IHRydWV9LCBfY2F0Y2ggPSB7a2V5d29yZDogXCJjYXRjaFwifTtcbiAgdmFyIF9jb250aW51ZSA9IHtrZXl3b3JkOiBcImNvbnRpbnVlXCJ9LCBfZGVidWdnZXIgPSB7a2V5d29yZDogXCJkZWJ1Z2dlclwifSwgX2RlZmF1bHQgPSB7a2V5d29yZDogXCJkZWZhdWx0XCJ9O1xuICB2YXIgX2RvID0ge2tleXdvcmQ6IFwiZG9cIiwgaXNMb29wOiB0cnVlfSwgX2Vsc2UgPSB7a2V5d29yZDogXCJlbHNlXCIsIGJlZm9yZUV4cHI6IHRydWV9O1xuICB2YXIgX2ZpbmFsbHkgPSB7a2V5d29yZDogXCJmaW5hbGx5XCJ9LCBfZm9yID0ge2tleXdvcmQ6IFwiZm9yXCIsIGlzTG9vcDogdHJ1ZX0sIF9mdW5jdGlvbiA9IHtrZXl3b3JkOiBcImZ1bmN0aW9uXCJ9O1xuICB2YXIgX2lmID0ge2tleXdvcmQ6IFwiaWZcIn0sIF9yZXR1cm4gPSB7a2V5d29yZDogXCJyZXR1cm5cIiwgYmVmb3JlRXhwcjogdHJ1ZX0sIF9zd2l0Y2ggPSB7a2V5d29yZDogXCJzd2l0Y2hcIn07XG4gIHZhciBfdGhyb3cgPSB7a2V5d29yZDogXCJ0aHJvd1wiLCBiZWZvcmVFeHByOiB0cnVlfSwgX3RyeSA9IHtrZXl3b3JkOiBcInRyeVwifSwgX3ZhciA9IHtrZXl3b3JkOiBcInZhclwifTtcbiAgdmFyIF93aGlsZSA9IHtrZXl3b3JkOiBcIndoaWxlXCIsIGlzTG9vcDogdHJ1ZX0sIF93aXRoID0ge2tleXdvcmQ6IFwid2l0aFwifSwgX25ldyA9IHtrZXl3b3JkOiBcIm5ld1wiLCBiZWZvcmVFeHByOiB0cnVlfTtcbiAgdmFyIF90aGlzID0ge2tleXdvcmQ6IFwidGhpc1wifTtcblxuICB2YXIgX251bGwgPSB7a2V5d29yZDogXCJudWxsXCIsIGF0b21WYWx1ZTogbnVsbH0sIF90cnVlID0ge2tleXdvcmQ6IFwidHJ1ZVwiLCBhdG9tVmFsdWU6IHRydWV9O1xuICB2YXIgX2ZhbHNlID0ge2tleXdvcmQ6IFwiZmFsc2VcIiwgYXRvbVZhbHVlOiBmYWxzZX07XG5cbiAgdmFyIF9pbiA9IHtrZXl3b3JkOiBcImluXCIsIGJpbm9wOiA3LCBiZWZvcmVFeHByOiB0cnVlfTtcblxuICB2YXIga2V5d29yZFR5cGVzID0ge1wiYnJlYWtcIjogX2JyZWFrLCBcImNhc2VcIjogX2Nhc2UsIFwiY2F0Y2hcIjogX2NhdGNoLFxuXHRcdFx0XHRcdCAgXCJjb250aW51ZVwiOiBfY29udGludWUsIFwiZGVidWdnZXJcIjogX2RlYnVnZ2VyLCBcImRlZmF1bHRcIjogX2RlZmF1bHQsXG5cdFx0XHRcdFx0ICBcImRvXCI6IF9kbywgXCJlbHNlXCI6IF9lbHNlLCBcImZpbmFsbHlcIjogX2ZpbmFsbHksIFwiZm9yXCI6IF9mb3IsXG5cdFx0XHRcdFx0ICBcImZ1bmN0aW9uXCI6IF9mdW5jdGlvbiwgXCJpZlwiOiBfaWYsIFwicmV0dXJuXCI6IF9yZXR1cm4sIFwic3dpdGNoXCI6IF9zd2l0Y2gsXG5cdFx0XHRcdFx0ICBcInRocm93XCI6IF90aHJvdywgXCJ0cnlcIjogX3RyeSwgXCJ2YXJcIjogX3ZhciwgXCJ3aGlsZVwiOiBfd2hpbGUsIFwid2l0aFwiOiBfd2l0aCxcblx0XHRcdFx0XHQgIFwibnVsbFwiOiBfbnVsbCwgXCJ0cnVlXCI6IF90cnVlLCBcImZhbHNlXCI6IF9mYWxzZSwgXCJuZXdcIjogX25ldywgXCJpblwiOiBfaW4sXG5cdFx0XHRcdFx0ICBcImluc3RhbmNlb2ZcIjoge2tleXdvcmQ6IFwiaW5zdGFuY2VvZlwiLCBiaW5vcDogNywgYmVmb3JlRXhwcjogdHJ1ZX0sIFwidGhpc1wiOiBfdGhpcyxcblx0XHRcdFx0XHQgIFwidHlwZW9mXCI6IHtrZXl3b3JkOiBcInR5cGVvZlwiLCBwcmVmaXg6IHRydWUsIGJlZm9yZUV4cHI6IHRydWV9LFxuXHRcdFx0XHRcdCAgXCJ2b2lkXCI6IHtrZXl3b3JkOiBcInZvaWRcIiwgcHJlZml4OiB0cnVlLCBiZWZvcmVFeHByOiB0cnVlfSxcblx0XHRcdFx0XHQgIFwiZGVsZXRlXCI6IHtrZXl3b3JkOiBcImRlbGV0ZVwiLCBwcmVmaXg6IHRydWUsIGJlZm9yZUV4cHI6IHRydWV9fTtcblxuICB2YXIgX2JyYWNrZXRMID0ge3R5cGU6IFwiW1wiLCBiZWZvcmVFeHByOiB0cnVlfSwgX2JyYWNrZXRSID0ge3R5cGU6IFwiXVwifSwgX2JyYWNlTCA9IHt0eXBlOiBcIntcIiwgYmVmb3JlRXhwcjogdHJ1ZX07XG4gIHZhciBfYnJhY2VSID0ge3R5cGU6IFwifVwifSwgX3BhcmVuTCA9IHt0eXBlOiBcIihcIiwgYmVmb3JlRXhwcjogdHJ1ZX0sIF9wYXJlblIgPSB7dHlwZTogXCIpXCJ9O1xuICB2YXIgX2NvbW1hID0ge3R5cGU6IFwiLFwiLCBiZWZvcmVFeHByOiB0cnVlfSwgX3NlbWkgPSB7dHlwZTogXCI7XCIsIGJlZm9yZUV4cHI6IHRydWV9O1xuICB2YXIgX2NvbG9uID0ge3R5cGU6IFwiOlwiLCBiZWZvcmVFeHByOiB0cnVlfSwgX2RvdCA9IHt0eXBlOiBcIi5cIn0sIF9xdWVzdGlvbiA9IHt0eXBlOiBcIj9cIiwgYmVmb3JlRXhwcjogdHJ1ZX07XG5cbiAgdmFyIF9zbGFzaCA9IHtiaW5vcDogMTAsIGJlZm9yZUV4cHI6IHRydWV9LCBfZXEgPSB7aXNBc3NpZ246IHRydWUsIGJlZm9yZUV4cHI6IHRydWV9O1xuICB2YXIgX2Fzc2lnbiA9IHtpc0Fzc2lnbjogdHJ1ZSwgYmVmb3JlRXhwcjogdHJ1ZX07XG4gIHZhciBfaW5jRGVjID0ge3Bvc3RmaXg6IHRydWUsIHByZWZpeDogdHJ1ZSwgaXNVcGRhdGU6IHRydWV9LCBfcHJlZml4ID0ge3ByZWZpeDogdHJ1ZSwgYmVmb3JlRXhwcjogdHJ1ZX07XG4gIHZhciBfbG9naWNhbE9SID0ge2Jpbm9wOiAxLCBiZWZvcmVFeHByOiB0cnVlfTtcbiAgdmFyIF9sb2dpY2FsQU5EID0ge2Jpbm9wOiAyLCBiZWZvcmVFeHByOiB0cnVlfTtcbiAgdmFyIF9iaXR3aXNlT1IgPSB7Ymlub3A6IDMsIGJlZm9yZUV4cHI6IHRydWV9O1xuICB2YXIgX2JpdHdpc2VYT1IgPSB7Ymlub3A6IDQsIGJlZm9yZUV4cHI6IHRydWV9O1xuICB2YXIgX2JpdHdpc2VBTkQgPSB7Ymlub3A6IDUsIGJlZm9yZUV4cHI6IHRydWV9O1xuICB2YXIgX2VxdWFsaXR5ID0ge2Jpbm9wOiA2LCBiZWZvcmVFeHByOiB0cnVlfTtcbiAgdmFyIF9yZWxhdGlvbmFsID0ge2Jpbm9wOiA3LCBiZWZvcmVFeHByOiB0cnVlfTtcbiAgdmFyIF9iaXRTaGlmdCA9IHtiaW5vcDogOCwgYmVmb3JlRXhwcjogdHJ1ZX07XG4gIHZhciBfcGx1c01pbiA9IHtiaW5vcDogOSwgcHJlZml4OiB0cnVlLCBiZWZvcmVFeHByOiB0cnVlfTtcbiAgdmFyIF9tdWx0aXBseU1vZHVsbyA9IHtiaW5vcDogMTAsIGJlZm9yZUV4cHI6IHRydWV9O1xuXG4gIGV4cG9ydHMudG9rVHlwZXMgPSB7YnJhY2tldEw6IF9icmFja2V0TCwgYnJhY2tldFI6IF9icmFja2V0UiwgYnJhY2VMOiBfYnJhY2VMLCBicmFjZVI6IF9icmFjZVIsXG5cdFx0XHRcdFx0ICBwYXJlbkw6IF9wYXJlbkwsIHBhcmVuUjogX3BhcmVuUiwgY29tbWE6IF9jb21tYSwgc2VtaTogX3NlbWksIGNvbG9uOiBfY29sb24sXG5cdFx0XHRcdFx0ICBkb3Q6IF9kb3QsIHF1ZXN0aW9uOiBfcXVlc3Rpb24sIHNsYXNoOiBfc2xhc2gsIGVxOiBfZXEsIG5hbWU6IF9uYW1lLCBlb2Y6IF9lb2YsXG5cdFx0XHRcdFx0ICBudW06IF9udW0sIHJlZ2V4cDogX3JlZ2V4cCwgc3RyaW5nOiBfc3RyaW5nfTtcbiAgZm9yICh2YXIga3cgaW4ga2V5d29yZFR5cGVzKSBleHBvcnRzLnRva1R5cGVzW1wiX1wiICsga3ddID0ga2V5d29yZFR5cGVzW2t3XTtcblxuICBmdW5jdGlvbiBtYWtlUHJlZGljYXRlKHdvcmRzKSB7XG5cdHdvcmRzID0gd29yZHMuc3BsaXQoXCIgXCIpO1xuXHR2YXIgZiA9IFwiXCIsIGNhdHMgPSBbXTtcblx0b3V0OiBmb3IgKHZhciBpID0gMDsgaSA8IHdvcmRzLmxlbmd0aDsgKytpKSB7XG5cdCAgZm9yICh2YXIgaiA9IDA7IGogPCBjYXRzLmxlbmd0aDsgKytqKVxuXHRcdGlmIChjYXRzW2pdWzBdLmxlbmd0aCA9PSB3b3Jkc1tpXS5sZW5ndGgpIHtcblx0XHQgIGNhdHNbal0ucHVzaCh3b3Jkc1tpXSk7XG5cdFx0ICBjb250aW51ZSBvdXQ7XG5cdFx0fVxuXHQgIGNhdHMucHVzaChbd29yZHNbaV1dKTtcblx0fVxuXHRmdW5jdGlvbiBjb21wYXJlVG8oYXJyKSB7XG5cdCAgaWYgKGFyci5sZW5ndGggPT0gMSkgcmV0dXJuIGYgKz0gXCJyZXR1cm4gc3RyID09PSBcIiArIEpTT04uc3RyaW5naWZ5KGFyclswXSkgKyBcIjtcIjtcblx0ICBmICs9IFwic3dpdGNoKHN0cil7XCI7XG5cdCAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyArK2kpIGYgKz0gXCJjYXNlIFwiICsgSlNPTi5zdHJpbmdpZnkoYXJyW2ldKSArIFwiOlwiO1xuXHQgIGYgKz0gXCJyZXR1cm4gdHJ1ZX1yZXR1cm4gZmFsc2U7XCI7XG5cdH1cblxuXHRpZiAoY2F0cy5sZW5ndGggPiAzKSB7XG5cdCAgY2F0cy5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtyZXR1cm4gYi5sZW5ndGggLSBhLmxlbmd0aDt9KTtcblx0ICBmICs9IFwic3dpdGNoKHN0ci5sZW5ndGgpe1wiO1xuXHQgIGZvciAodmFyIGkgPSAwOyBpIDwgY2F0cy5sZW5ndGg7ICsraSkge1xuXHRcdHZhciBjYXQgPSBjYXRzW2ldO1xuXHRcdGYgKz0gXCJjYXNlIFwiICsgY2F0WzBdLmxlbmd0aCArIFwiOlwiO1xuXHRcdGNvbXBhcmVUbyhjYXQpO1xuXHQgIH1cblx0ICBmICs9IFwifVwiO1xuXG5cdH0gZWxzZSB7XG5cdCAgY29tcGFyZVRvKHdvcmRzKTtcblx0fVxuXHRyZXR1cm4gbmV3IEZ1bmN0aW9uKFwic3RyXCIsIGYpO1xuICB9XG5cbiAgdmFyIGlzUmVzZXJ2ZWRXb3JkMyA9IG1ha2VQcmVkaWNhdGUoXCJhYnN0cmFjdCBib29sZWFuIGJ5dGUgY2hhciBjbGFzcyBkb3VibGUgZW51bSBleHBvcnQgZXh0ZW5kcyBmaW5hbCBmbG9hdCBnb3RvIGltcGxlbWVudHMgaW1wb3J0IGludCBpbnRlcmZhY2UgbG9uZyBuYXRpdmUgcGFja2FnZSBwcml2YXRlIHByb3RlY3RlZCBwdWJsaWMgc2hvcnQgc3RhdGljIHN1cGVyIHN5bmNocm9uaXplZCB0aHJvd3MgdHJhbnNpZW50IHZvbGF0aWxlXCIpO1xuXG4gIHZhciBpc1Jlc2VydmVkV29yZDUgPSBtYWtlUHJlZGljYXRlKFwiY2xhc3MgZW51bSBleHRlbmRzIHN1cGVyIGNvbnN0IGV4cG9ydCBpbXBvcnRcIik7XG5cbiAgdmFyIGlzU3RyaWN0UmVzZXJ2ZWRXb3JkID0gbWFrZVByZWRpY2F0ZShcImltcGxlbWVudHMgaW50ZXJmYWNlIGxldCBwYWNrYWdlIHByaXZhdGUgcHJvdGVjdGVkIHB1YmxpYyBzdGF0aWMgeWllbGRcIik7XG5cbiAgdmFyIGlzU3RyaWN0QmFkSWRXb3JkID0gbWFrZVByZWRpY2F0ZShcImV2YWwgYXJndW1lbnRzXCIpO1xuXG4gIHZhciBpc0tleXdvcmQgPSBtYWtlUHJlZGljYXRlKFwiYnJlYWsgY2FzZSBjYXRjaCBjb250aW51ZSBkZWJ1Z2dlciBkZWZhdWx0IGRvIGVsc2UgZmluYWxseSBmb3IgZnVuY3Rpb24gaWYgcmV0dXJuIHN3aXRjaCB0aHJvdyB0cnkgdmFyIHdoaWxlIHdpdGggbnVsbCB0cnVlIGZhbHNlIGluc3RhbmNlb2YgdHlwZW9mIHZvaWQgZGVsZXRlIG5ldyBpbiB0aGlzXCIpO1xuXG4gIHZhciBub25BU0NJSXdoaXRlc3BhY2UgPSAvW1xcdTE2ODBcXHUxODBlXFx1MjAwMC1cXHUyMDBhXFx1MjAyZlxcdTIwNWZcXHUzMDAwXFx1ZmVmZl0vO1xuICB2YXIgbm9uQVNDSUlpZGVudGlmaWVyU3RhcnRDaGFycyA9IFwiXFx4YWFcXHhiNVxceGJhXFx4YzAtXFx4ZDZcXHhkOC1cXHhmNlxceGY4LVxcdTAyYzFcXHUwMmM2LVxcdTAyZDFcXHUwMmUwLVxcdTAyZTRcXHUwMmVjXFx1MDJlZVxcdTAzNzAtXFx1MDM3NFxcdTAzNzZcXHUwMzc3XFx1MDM3YS1cXHUwMzdkXFx1MDM4NlxcdTAzODgtXFx1MDM4YVxcdTAzOGNcXHUwMzhlLVxcdTAzYTFcXHUwM2EzLVxcdTAzZjVcXHUwM2Y3LVxcdTA0ODFcXHUwNDhhLVxcdTA1MjdcXHUwNTMxLVxcdTA1NTZcXHUwNTU5XFx1MDU2MS1cXHUwNTg3XFx1MDVkMC1cXHUwNWVhXFx1MDVmMC1cXHUwNWYyXFx1MDYyMC1cXHUwNjRhXFx1MDY2ZVxcdTA2NmZcXHUwNjcxLVxcdTA2ZDNcXHUwNmQ1XFx1MDZlNVxcdTA2ZTZcXHUwNmVlXFx1MDZlZlxcdTA2ZmEtXFx1MDZmY1xcdTA2ZmZcXHUwNzEwXFx1MDcxMi1cXHUwNzJmXFx1MDc0ZC1cXHUwN2E1XFx1MDdiMVxcdTA3Y2EtXFx1MDdlYVxcdTA3ZjRcXHUwN2Y1XFx1MDdmYVxcdTA4MDAtXFx1MDgxNVxcdTA4MWFcXHUwODI0XFx1MDgyOFxcdTA4NDAtXFx1MDg1OFxcdTA4YTBcXHUwOGEyLVxcdTA4YWNcXHUwOTA0LVxcdTA5MzlcXHUwOTNkXFx1MDk1MFxcdTA5NTgtXFx1MDk2MVxcdTA5NzEtXFx1MDk3N1xcdTA5NzktXFx1MDk3ZlxcdTA5ODUtXFx1MDk4Y1xcdTA5OGZcXHUwOTkwXFx1MDk5My1cXHUwOWE4XFx1MDlhYS1cXHUwOWIwXFx1MDliMlxcdTA5YjYtXFx1MDliOVxcdTA5YmRcXHUwOWNlXFx1MDlkY1xcdTA5ZGRcXHUwOWRmLVxcdTA5ZTFcXHUwOWYwXFx1MDlmMVxcdTBhMDUtXFx1MGEwYVxcdTBhMGZcXHUwYTEwXFx1MGExMy1cXHUwYTI4XFx1MGEyYS1cXHUwYTMwXFx1MGEzMlxcdTBhMzNcXHUwYTM1XFx1MGEzNlxcdTBhMzhcXHUwYTM5XFx1MGE1OS1cXHUwYTVjXFx1MGE1ZVxcdTBhNzItXFx1MGE3NFxcdTBhODUtXFx1MGE4ZFxcdTBhOGYtXFx1MGE5MVxcdTBhOTMtXFx1MGFhOFxcdTBhYWEtXFx1MGFiMFxcdTBhYjJcXHUwYWIzXFx1MGFiNS1cXHUwYWI5XFx1MGFiZFxcdTBhZDBcXHUwYWUwXFx1MGFlMVxcdTBiMDUtXFx1MGIwY1xcdTBiMGZcXHUwYjEwXFx1MGIxMy1cXHUwYjI4XFx1MGIyYS1cXHUwYjMwXFx1MGIzMlxcdTBiMzNcXHUwYjM1LVxcdTBiMzlcXHUwYjNkXFx1MGI1Y1xcdTBiNWRcXHUwYjVmLVxcdTBiNjFcXHUwYjcxXFx1MGI4M1xcdTBiODUtXFx1MGI4YVxcdTBiOGUtXFx1MGI5MFxcdTBiOTItXFx1MGI5NVxcdTBiOTlcXHUwYjlhXFx1MGI5Y1xcdTBiOWVcXHUwYjlmXFx1MGJhM1xcdTBiYTRcXHUwYmE4LVxcdTBiYWFcXHUwYmFlLVxcdTBiYjlcXHUwYmQwXFx1MGMwNS1cXHUwYzBjXFx1MGMwZS1cXHUwYzEwXFx1MGMxMi1cXHUwYzI4XFx1MGMyYS1cXHUwYzMzXFx1MGMzNS1cXHUwYzM5XFx1MGMzZFxcdTBjNThcXHUwYzU5XFx1MGM2MFxcdTBjNjFcXHUwYzg1LVxcdTBjOGNcXHUwYzhlLVxcdTBjOTBcXHUwYzkyLVxcdTBjYThcXHUwY2FhLVxcdTBjYjNcXHUwY2I1LVxcdTBjYjlcXHUwY2JkXFx1MGNkZVxcdTBjZTBcXHUwY2UxXFx1MGNmMVxcdTBjZjJcXHUwZDA1LVxcdTBkMGNcXHUwZDBlLVxcdTBkMTBcXHUwZDEyLVxcdTBkM2FcXHUwZDNkXFx1MGQ0ZVxcdTBkNjBcXHUwZDYxXFx1MGQ3YS1cXHUwZDdmXFx1MGQ4NS1cXHUwZDk2XFx1MGQ5YS1cXHUwZGIxXFx1MGRiMy1cXHUwZGJiXFx1MGRiZFxcdTBkYzAtXFx1MGRjNlxcdTBlMDEtXFx1MGUzMFxcdTBlMzJcXHUwZTMzXFx1MGU0MC1cXHUwZTQ2XFx1MGU4MVxcdTBlODJcXHUwZTg0XFx1MGU4N1xcdTBlODhcXHUwZThhXFx1MGU4ZFxcdTBlOTQtXFx1MGU5N1xcdTBlOTktXFx1MGU5ZlxcdTBlYTEtXFx1MGVhM1xcdTBlYTVcXHUwZWE3XFx1MGVhYVxcdTBlYWJcXHUwZWFkLVxcdTBlYjBcXHUwZWIyXFx1MGViM1xcdTBlYmRcXHUwZWMwLVxcdTBlYzRcXHUwZWM2XFx1MGVkYy1cXHUwZWRmXFx1MGYwMFxcdTBmNDAtXFx1MGY0N1xcdTBmNDktXFx1MGY2Y1xcdTBmODgtXFx1MGY4Y1xcdTEwMDAtXFx1MTAyYVxcdTEwM2ZcXHUxMDUwLVxcdTEwNTVcXHUxMDVhLVxcdTEwNWRcXHUxMDYxXFx1MTA2NVxcdTEwNjZcXHUxMDZlLVxcdTEwNzBcXHUxMDc1LVxcdTEwODFcXHUxMDhlXFx1MTBhMC1cXHUxMGM1XFx1MTBjN1xcdTEwY2RcXHUxMGQwLVxcdTEwZmFcXHUxMGZjLVxcdTEyNDhcXHUxMjRhLVxcdTEyNGRcXHUxMjUwLVxcdTEyNTZcXHUxMjU4XFx1MTI1YS1cXHUxMjVkXFx1MTI2MC1cXHUxMjg4XFx1MTI4YS1cXHUxMjhkXFx1MTI5MC1cXHUxMmIwXFx1MTJiMi1cXHUxMmI1XFx1MTJiOC1cXHUxMmJlXFx1MTJjMFxcdTEyYzItXFx1MTJjNVxcdTEyYzgtXFx1MTJkNlxcdTEyZDgtXFx1MTMxMFxcdTEzMTItXFx1MTMxNVxcdTEzMTgtXFx1MTM1YVxcdTEzODAtXFx1MTM4ZlxcdTEzYTAtXFx1MTNmNFxcdTE0MDEtXFx1MTY2Y1xcdTE2NmYtXFx1MTY3ZlxcdTE2ODEtXFx1MTY5YVxcdTE2YTAtXFx1MTZlYVxcdTE2ZWUtXFx1MTZmMFxcdTE3MDAtXFx1MTcwY1xcdTE3MGUtXFx1MTcxMVxcdTE3MjAtXFx1MTczMVxcdTE3NDAtXFx1MTc1MVxcdTE3NjAtXFx1MTc2Y1xcdTE3NmUtXFx1MTc3MFxcdTE3ODAtXFx1MTdiM1xcdTE3ZDdcXHUxN2RjXFx1MTgyMC1cXHUxODc3XFx1MTg4MC1cXHUxOGE4XFx1MThhYVxcdTE4YjAtXFx1MThmNVxcdTE5MDAtXFx1MTkxY1xcdTE5NTAtXFx1MTk2ZFxcdTE5NzAtXFx1MTk3NFxcdTE5ODAtXFx1MTlhYlxcdTE5YzEtXFx1MTljN1xcdTFhMDAtXFx1MWExNlxcdTFhMjAtXFx1MWE1NFxcdTFhYTdcXHUxYjA1LVxcdTFiMzNcXHUxYjQ1LVxcdTFiNGJcXHUxYjgzLVxcdTFiYTBcXHUxYmFlXFx1MWJhZlxcdTFiYmEtXFx1MWJlNVxcdTFjMDAtXFx1MWMyM1xcdTFjNGQtXFx1MWM0ZlxcdTFjNWEtXFx1MWM3ZFxcdTFjZTktXFx1MWNlY1xcdTFjZWUtXFx1MWNmMVxcdTFjZjVcXHUxY2Y2XFx1MWQwMC1cXHUxZGJmXFx1MWUwMC1cXHUxZjE1XFx1MWYxOC1cXHUxZjFkXFx1MWYyMC1cXHUxZjQ1XFx1MWY0OC1cXHUxZjRkXFx1MWY1MC1cXHUxZjU3XFx1MWY1OVxcdTFmNWJcXHUxZjVkXFx1MWY1Zi1cXHUxZjdkXFx1MWY4MC1cXHUxZmI0XFx1MWZiNi1cXHUxZmJjXFx1MWZiZVxcdTFmYzItXFx1MWZjNFxcdTFmYzYtXFx1MWZjY1xcdTFmZDAtXFx1MWZkM1xcdTFmZDYtXFx1MWZkYlxcdTFmZTAtXFx1MWZlY1xcdTFmZjItXFx1MWZmNFxcdTFmZjYtXFx1MWZmY1xcdTIwNzFcXHUyMDdmXFx1MjA5MC1cXHUyMDljXFx1MjEwMlxcdTIxMDdcXHUyMTBhLVxcdTIxMTNcXHUyMTE1XFx1MjExOS1cXHUyMTFkXFx1MjEyNFxcdTIxMjZcXHUyMTI4XFx1MjEyYS1cXHUyMTJkXFx1MjEyZi1cXHUyMTM5XFx1MjEzYy1cXHUyMTNmXFx1MjE0NS1cXHUyMTQ5XFx1MjE0ZVxcdTIxNjAtXFx1MjE4OFxcdTJjMDAtXFx1MmMyZVxcdTJjMzAtXFx1MmM1ZVxcdTJjNjAtXFx1MmNlNFxcdTJjZWItXFx1MmNlZVxcdTJjZjJcXHUyY2YzXFx1MmQwMC1cXHUyZDI1XFx1MmQyN1xcdTJkMmRcXHUyZDMwLVxcdTJkNjdcXHUyZDZmXFx1MmQ4MC1cXHUyZDk2XFx1MmRhMC1cXHUyZGE2XFx1MmRhOC1cXHUyZGFlXFx1MmRiMC1cXHUyZGI2XFx1MmRiOC1cXHUyZGJlXFx1MmRjMC1cXHUyZGM2XFx1MmRjOC1cXHUyZGNlXFx1MmRkMC1cXHUyZGQ2XFx1MmRkOC1cXHUyZGRlXFx1MmUyZlxcdTMwMDUtXFx1MzAwN1xcdTMwMjEtXFx1MzAyOVxcdTMwMzEtXFx1MzAzNVxcdTMwMzgtXFx1MzAzY1xcdTMwNDEtXFx1MzA5NlxcdTMwOWQtXFx1MzA5ZlxcdTMwYTEtXFx1MzBmYVxcdTMwZmMtXFx1MzBmZlxcdTMxMDUtXFx1MzEyZFxcdTMxMzEtXFx1MzE4ZVxcdTMxYTAtXFx1MzFiYVxcdTMxZjAtXFx1MzFmZlxcdTM0MDAtXFx1NGRiNVxcdTRlMDAtXFx1OWZjY1xcdWEwMDAtXFx1YTQ4Y1xcdWE0ZDAtXFx1YTRmZFxcdWE1MDAtXFx1YTYwY1xcdWE2MTAtXFx1YTYxZlxcdWE2MmFcXHVhNjJiXFx1YTY0MC1cXHVhNjZlXFx1YTY3Zi1cXHVhNjk3XFx1YTZhMC1cXHVhNmVmXFx1YTcxNy1cXHVhNzFmXFx1YTcyMi1cXHVhNzg4XFx1YTc4Yi1cXHVhNzhlXFx1YTc5MC1cXHVhNzkzXFx1YTdhMC1cXHVhN2FhXFx1YTdmOC1cXHVhODAxXFx1YTgwMy1cXHVhODA1XFx1YTgwNy1cXHVhODBhXFx1YTgwYy1cXHVhODIyXFx1YTg0MC1cXHVhODczXFx1YTg4Mi1cXHVhOGIzXFx1YThmMi1cXHVhOGY3XFx1YThmYlxcdWE5MGEtXFx1YTkyNVxcdWE5MzAtXFx1YTk0NlxcdWE5NjAtXFx1YTk3Y1xcdWE5ODQtXFx1YTliMlxcdWE5Y2ZcXHVhYTAwLVxcdWFhMjhcXHVhYTQwLVxcdWFhNDJcXHVhYTQ0LVxcdWFhNGJcXHVhYTYwLVxcdWFhNzZcXHVhYTdhXFx1YWE4MC1cXHVhYWFmXFx1YWFiMVxcdWFhYjVcXHVhYWI2XFx1YWFiOS1cXHVhYWJkXFx1YWFjMFxcdWFhYzJcXHVhYWRiLVxcdWFhZGRcXHVhYWUwLVxcdWFhZWFcXHVhYWYyLVxcdWFhZjRcXHVhYjAxLVxcdWFiMDZcXHVhYjA5LVxcdWFiMGVcXHVhYjExLVxcdWFiMTZcXHVhYjIwLVxcdWFiMjZcXHVhYjI4LVxcdWFiMmVcXHVhYmMwLVxcdWFiZTJcXHVhYzAwLVxcdWQ3YTNcXHVkN2IwLVxcdWQ3YzZcXHVkN2NiLVxcdWQ3ZmJcXHVmOTAwLVxcdWZhNmRcXHVmYTcwLVxcdWZhZDlcXHVmYjAwLVxcdWZiMDZcXHVmYjEzLVxcdWZiMTdcXHVmYjFkXFx1ZmIxZi1cXHVmYjI4XFx1ZmIyYS1cXHVmYjM2XFx1ZmIzOC1cXHVmYjNjXFx1ZmIzZVxcdWZiNDBcXHVmYjQxXFx1ZmI0M1xcdWZiNDRcXHVmYjQ2LVxcdWZiYjFcXHVmYmQzLVxcdWZkM2RcXHVmZDUwLVxcdWZkOGZcXHVmZDkyLVxcdWZkYzdcXHVmZGYwLVxcdWZkZmJcXHVmZTcwLVxcdWZlNzRcXHVmZTc2LVxcdWZlZmNcXHVmZjIxLVxcdWZmM2FcXHVmZjQxLVxcdWZmNWFcXHVmZjY2LVxcdWZmYmVcXHVmZmMyLVxcdWZmYzdcXHVmZmNhLVxcdWZmY2ZcXHVmZmQyLVxcdWZmZDdcXHVmZmRhLVxcdWZmZGNcIjtcbiAgdmFyIG5vbkFTQ0lJaWRlbnRpZmllckNoYXJzID0gXCJcXHUwMzAwLVxcdTAzNmZcXHUwNDgzLVxcdTA0ODdcXHUwNTkxLVxcdTA1YmRcXHUwNWJmXFx1MDVjMVxcdTA1YzJcXHUwNWM0XFx1MDVjNVxcdTA1YzdcXHUwNjEwLVxcdTA2MWFcXHUwNjIwLVxcdTA2NDlcXHUwNjcyLVxcdTA2ZDNcXHUwNmU3LVxcdTA2ZThcXHUwNmZiLVxcdTA2ZmNcXHUwNzMwLVxcdTA3NGFcXHUwODAwLVxcdTA4MTRcXHUwODFiLVxcdTA4MjNcXHUwODI1LVxcdTA4MjdcXHUwODI5LVxcdTA4MmRcXHUwODQwLVxcdTA4NTdcXHUwOGU0LVxcdTA4ZmVcXHUwOTAwLVxcdTA5MDNcXHUwOTNhLVxcdTA5M2NcXHUwOTNlLVxcdTA5NGZcXHUwOTUxLVxcdTA5NTdcXHUwOTYyLVxcdTA5NjNcXHUwOTY2LVxcdTA5NmZcXHUwOTgxLVxcdTA5ODNcXHUwOWJjXFx1MDliZS1cXHUwOWM0XFx1MDljN1xcdTA5YzhcXHUwOWQ3XFx1MDlkZi1cXHUwOWUwXFx1MGEwMS1cXHUwYTAzXFx1MGEzY1xcdTBhM2UtXFx1MGE0MlxcdTBhNDdcXHUwYTQ4XFx1MGE0Yi1cXHUwYTRkXFx1MGE1MVxcdTBhNjYtXFx1MGE3MVxcdTBhNzVcXHUwYTgxLVxcdTBhODNcXHUwYWJjXFx1MGFiZS1cXHUwYWM1XFx1MGFjNy1cXHUwYWM5XFx1MGFjYi1cXHUwYWNkXFx1MGFlMi1cXHUwYWUzXFx1MGFlNi1cXHUwYWVmXFx1MGIwMS1cXHUwYjAzXFx1MGIzY1xcdTBiM2UtXFx1MGI0NFxcdTBiNDdcXHUwYjQ4XFx1MGI0Yi1cXHUwYjRkXFx1MGI1NlxcdTBiNTdcXHUwYjVmLVxcdTBiNjBcXHUwYjY2LVxcdTBiNmZcXHUwYjgyXFx1MGJiZS1cXHUwYmMyXFx1MGJjNi1cXHUwYmM4XFx1MGJjYS1cXHUwYmNkXFx1MGJkN1xcdTBiZTYtXFx1MGJlZlxcdTBjMDEtXFx1MGMwM1xcdTBjNDYtXFx1MGM0OFxcdTBjNGEtXFx1MGM0ZFxcdTBjNTVcXHUwYzU2XFx1MGM2Mi1cXHUwYzYzXFx1MGM2Ni1cXHUwYzZmXFx1MGM4MlxcdTBjODNcXHUwY2JjXFx1MGNiZS1cXHUwY2M0XFx1MGNjNi1cXHUwY2M4XFx1MGNjYS1cXHUwY2NkXFx1MGNkNVxcdTBjZDZcXHUwY2UyLVxcdTBjZTNcXHUwY2U2LVxcdTBjZWZcXHUwZDAyXFx1MGQwM1xcdTBkNDYtXFx1MGQ0OFxcdTBkNTdcXHUwZDYyLVxcdTBkNjNcXHUwZDY2LVxcdTBkNmZcXHUwZDgyXFx1MGQ4M1xcdTBkY2FcXHUwZGNmLVxcdTBkZDRcXHUwZGQ2XFx1MGRkOC1cXHUwZGRmXFx1MGRmMlxcdTBkZjNcXHUwZTM0LVxcdTBlM2FcXHUwZTQwLVxcdTBlNDVcXHUwZTUwLVxcdTBlNTlcXHUwZWI0LVxcdTBlYjlcXHUwZWM4LVxcdTBlY2RcXHUwZWQwLVxcdTBlZDlcXHUwZjE4XFx1MGYxOVxcdTBmMjAtXFx1MGYyOVxcdTBmMzVcXHUwZjM3XFx1MGYzOVxcdTBmNDEtXFx1MGY0N1xcdTBmNzEtXFx1MGY4NFxcdTBmODYtXFx1MGY4N1xcdTBmOGQtXFx1MGY5N1xcdTBmOTktXFx1MGZiY1xcdTBmYzZcXHUxMDAwLVxcdTEwMjlcXHUxMDQwLVxcdTEwNDlcXHUxMDY3LVxcdTEwNmRcXHUxMDcxLVxcdTEwNzRcXHUxMDgyLVxcdTEwOGRcXHUxMDhmLVxcdTEwOWRcXHUxMzVkLVxcdTEzNWZcXHUxNzBlLVxcdTE3MTBcXHUxNzIwLVxcdTE3MzBcXHUxNzQwLVxcdTE3NTBcXHUxNzcyXFx1MTc3M1xcdTE3ODAtXFx1MTdiMlxcdTE3ZGRcXHUxN2UwLVxcdTE3ZTlcXHUxODBiLVxcdTE4MGRcXHUxODEwLVxcdTE4MTlcXHUxOTIwLVxcdTE5MmJcXHUxOTMwLVxcdTE5M2JcXHUxOTUxLVxcdTE5NmRcXHUxOWIwLVxcdTE5YzBcXHUxOWM4LVxcdTE5YzlcXHUxOWQwLVxcdTE5ZDlcXHUxYTAwLVxcdTFhMTVcXHUxYTIwLVxcdTFhNTNcXHUxYTYwLVxcdTFhN2NcXHUxYTdmLVxcdTFhODlcXHUxYTkwLVxcdTFhOTlcXHUxYjQ2LVxcdTFiNGJcXHUxYjUwLVxcdTFiNTlcXHUxYjZiLVxcdTFiNzNcXHUxYmIwLVxcdTFiYjlcXHUxYmU2LVxcdTFiZjNcXHUxYzAwLVxcdTFjMjJcXHUxYzQwLVxcdTFjNDlcXHUxYzViLVxcdTFjN2RcXHUxY2QwLVxcdTFjZDJcXHUxZDAwLVxcdTFkYmVcXHUxZTAxLVxcdTFmMTVcXHUyMDBjXFx1MjAwZFxcdTIwM2ZcXHUyMDQwXFx1MjA1NFxcdTIwZDAtXFx1MjBkY1xcdTIwZTFcXHUyMGU1LVxcdTIwZjBcXHUyZDgxLVxcdTJkOTZcXHUyZGUwLVxcdTJkZmZcXHUzMDIxLVxcdTMwMjhcXHUzMDk5XFx1MzA5YVxcdWE2NDAtXFx1YTY2ZFxcdWE2NzQtXFx1YTY3ZFxcdWE2OWZcXHVhNmYwLVxcdWE2ZjFcXHVhN2Y4LVxcdWE4MDBcXHVhODA2XFx1YTgwYlxcdWE4MjMtXFx1YTgyN1xcdWE4ODAtXFx1YTg4MVxcdWE4YjQtXFx1YThjNFxcdWE4ZDAtXFx1YThkOVxcdWE4ZjMtXFx1YThmN1xcdWE5MDAtXFx1YTkwOVxcdWE5MjYtXFx1YTkyZFxcdWE5MzAtXFx1YTk0NVxcdWE5ODAtXFx1YTk4M1xcdWE5YjMtXFx1YTljMFxcdWFhMDAtXFx1YWEyN1xcdWFhNDAtXFx1YWE0MVxcdWFhNGMtXFx1YWE0ZFxcdWFhNTAtXFx1YWE1OVxcdWFhN2JcXHVhYWUwLVxcdWFhZTlcXHVhYWYyLVxcdWFhZjNcXHVhYmMwLVxcdWFiZTFcXHVhYmVjXFx1YWJlZFxcdWFiZjAtXFx1YWJmOVxcdWZiMjAtXFx1ZmIyOFxcdWZlMDAtXFx1ZmUwZlxcdWZlMjAtXFx1ZmUyNlxcdWZlMzNcXHVmZTM0XFx1ZmU0ZC1cXHVmZTRmXFx1ZmYxMC1cXHVmZjE5XFx1ZmYzZlwiO1xuICB2YXIgbm9uQVNDSUlpZGVudGlmaWVyU3RhcnQgPSBuZXcgUmVnRXhwKFwiW1wiICsgbm9uQVNDSUlpZGVudGlmaWVyU3RhcnRDaGFycyArIFwiXVwiKTtcbiAgdmFyIG5vbkFTQ0lJaWRlbnRpZmllciA9IG5ldyBSZWdFeHAoXCJbXCIgKyBub25BU0NJSWlkZW50aWZpZXJTdGFydENoYXJzICsgbm9uQVNDSUlpZGVudGlmaWVyQ2hhcnMgKyBcIl1cIik7XG5cbiAgdmFyIG5ld2xpbmUgPSAvW1xcblxcclxcdTIwMjhcXHUyMDI5XS87XG5cbiAgdmFyIGxpbmVCcmVhayA9IC9cXHJcXG58W1xcblxcclxcdTIwMjhcXHUyMDI5XS9nO1xuXG4gIHZhciBpc0lkZW50aWZpZXJTdGFydCA9IGV4cG9ydHMuaXNJZGVudGlmaWVyU3RhcnQgPSBmdW5jdGlvbihjb2RlKSB7XG5cdGlmIChjb2RlIDwgNjUpIHJldHVybiBjb2RlID09PSAzNjtcblx0aWYgKGNvZGUgPCA5MSkgcmV0dXJuIHRydWU7XG5cdGlmIChjb2RlIDwgOTcpIHJldHVybiBjb2RlID09PSA5NTtcblx0aWYgKGNvZGUgPCAxMjMpcmV0dXJuIHRydWU7XG5cdHJldHVybiBjb2RlID49IDB4YWEgJiYgbm9uQVNDSUlpZGVudGlmaWVyU3RhcnQudGVzdChTdHJpbmcuZnJvbUNoYXJDb2RlKGNvZGUpKTtcbiAgfTtcblxuICB2YXIgaXNJZGVudGlmaWVyQ2hhciA9IGV4cG9ydHMuaXNJZGVudGlmaWVyQ2hhciA9IGZ1bmN0aW9uKGNvZGUpIHtcblx0aWYgKGNvZGUgPCA0OCkgcmV0dXJuIGNvZGUgPT09IDM2O1xuXHRpZiAoY29kZSA8IDU4KSByZXR1cm4gdHJ1ZTtcblx0aWYgKGNvZGUgPCA2NSkgcmV0dXJuIGZhbHNlO1xuXHRpZiAoY29kZSA8IDkxKSByZXR1cm4gdHJ1ZTtcblx0aWYgKGNvZGUgPCA5NykgcmV0dXJuIGNvZGUgPT09IDk1O1xuXHRpZiAoY29kZSA8IDEyMylyZXR1cm4gdHJ1ZTtcblx0cmV0dXJuIGNvZGUgPj0gMHhhYSAmJiBub25BU0NJSWlkZW50aWZpZXIudGVzdChTdHJpbmcuZnJvbUNoYXJDb2RlKGNvZGUpKTtcbiAgfTtcblxuICBmdW5jdGlvbiBsaW5lX2xvY190KCkge1xuXHR0aGlzLmxpbmUgPSB0b2tDdXJMaW5lO1xuXHR0aGlzLmNvbHVtbiA9IHRva1BvcyAtIHRva0xpbmVTdGFydDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXRUb2tlblN0YXRlKCkge1xuXHR0b2tDdXJMaW5lID0gMTtcblx0dG9rUG9zID0gdG9rTGluZVN0YXJ0ID0gMDtcblx0dG9rUmVnZXhwQWxsb3dlZCA9IHRydWU7XG5cdHNraXBTcGFjZSgpO1xuICB9XG5cbiAgZnVuY3Rpb24gZmluaXNoVG9rZW4odHlwZSwgdmFsKSB7XG5cdHRva0VuZCA9IHRva1Bvcztcblx0aWYgKG9wdGlvbnMubG9jYXRpb25zKSB0b2tFbmRMb2MgPSBuZXcgbGluZV9sb2NfdDtcblx0dG9rVHlwZSA9IHR5cGU7XG5cdHNraXBTcGFjZSgpO1xuXHR0b2tWYWwgPSB2YWw7XG5cdHRva1JlZ2V4cEFsbG93ZWQgPSB0eXBlLmJlZm9yZUV4cHI7XG4gIH1cblxuICBmdW5jdGlvbiBza2lwQmxvY2tDb21tZW50KCkge1xuXHR2YXIgc3RhcnRMb2MgPSBvcHRpb25zLm9uQ29tbWVudCAmJiBvcHRpb25zLmxvY2F0aW9ucyAmJiBuZXcgbGluZV9sb2NfdDtcblx0dmFyIHN0YXJ0ID0gdG9rUG9zLCBlbmQgPSBpbnB1dC5pbmRleE9mKFwiKi9cIiwgdG9rUG9zICs9IDIpO1xuXHRpZiAoZW5kID09PSAtMSkgcmFpc2UodG9rUG9zIC0gMiwgXCJVbnRlcm1pbmF0ZWQgY29tbWVudFwiKTtcblx0dG9rUG9zID0gZW5kICsgMjtcblx0aWYgKG9wdGlvbnMubG9jYXRpb25zKSB7XG5cdCAgbGluZUJyZWFrLmxhc3RJbmRleCA9IHN0YXJ0O1xuXHQgIHZhciBtYXRjaDtcblx0ICB3aGlsZSAoKG1hdGNoID0gbGluZUJyZWFrLmV4ZWMoaW5wdXQpKSAmJiBtYXRjaC5pbmRleCA8IHRva1Bvcykge1xuXHRcdCsrdG9rQ3VyTGluZTtcblx0XHR0b2tMaW5lU3RhcnQgPSBtYXRjaC5pbmRleCArIG1hdGNoWzBdLmxlbmd0aDtcblx0ICB9XG5cdH1cblx0aWYgKG9wdGlvbnMub25Db21tZW50KVxuXHQgIG9wdGlvbnMub25Db21tZW50KHRydWUsIGlucHV0LnNsaWNlKHN0YXJ0ICsgMiwgZW5kKSwgc3RhcnQsIHRva1Bvcyxcblx0XHRcdFx0XHRcdHN0YXJ0TG9jLCBvcHRpb25zLmxvY2F0aW9ucyAmJiBuZXcgbGluZV9sb2NfdCk7XG4gIH1cblxuICBmdW5jdGlvbiBza2lwTGluZUNvbW1lbnQoKSB7XG5cdHZhciBzdGFydCA9IHRva1Bvcztcblx0dmFyIHN0YXJ0TG9jID0gb3B0aW9ucy5vbkNvbW1lbnQgJiYgb3B0aW9ucy5sb2NhdGlvbnMgJiYgbmV3IGxpbmVfbG9jX3Q7XG5cdHZhciBjaCA9IGlucHV0LmNoYXJDb2RlQXQodG9rUG9zKz0yKTtcblx0d2hpbGUgKHRva1BvcyA8IGlucHV0TGVuICYmIGNoICE9PSAxMCAmJiBjaCAhPT0gMTMgJiYgY2ggIT09IDgyMzIgJiYgY2ggIT09IDgyMzMpIHtcblx0ICArK3Rva1Bvcztcblx0ICBjaCA9IGlucHV0LmNoYXJDb2RlQXQodG9rUG9zKTtcblx0fVxuXHRpZiAob3B0aW9ucy5vbkNvbW1lbnQpXG5cdCAgb3B0aW9ucy5vbkNvbW1lbnQoZmFsc2UsIGlucHV0LnNsaWNlKHN0YXJ0ICsgMiwgdG9rUG9zKSwgc3RhcnQsIHRva1Bvcyxcblx0XHRcdFx0XHRcdHN0YXJ0TG9jLCBvcHRpb25zLmxvY2F0aW9ucyAmJiBuZXcgbGluZV9sb2NfdCk7XG4gIH1cblxuICBmdW5jdGlvbiBza2lwU3BhY2UoKSB7XG5cdHdoaWxlICh0b2tQb3MgPCBpbnB1dExlbikge1xuXHQgIHZhciBjaCA9IGlucHV0LmNoYXJDb2RlQXQodG9rUG9zKTtcblx0ICBpZiAoY2ggPT09IDMyKSB7XG5cdFx0Kyt0b2tQb3M7XG5cdCAgfSBlbHNlIGlmIChjaCA9PT0gMTMpIHtcblx0XHQrK3Rva1Bvcztcblx0XHR2YXIgbmV4dCA9IGlucHV0LmNoYXJDb2RlQXQodG9rUG9zKTtcblx0XHRpZiAobmV4dCA9PT0gMTApIHtcblx0XHQgICsrdG9rUG9zO1xuXHRcdH1cblx0XHRpZiAob3B0aW9ucy5sb2NhdGlvbnMpIHtcblx0XHQgICsrdG9rQ3VyTGluZTtcblx0XHQgIHRva0xpbmVTdGFydCA9IHRva1Bvcztcblx0XHR9XG5cdCAgfSBlbHNlIGlmIChjaCA9PT0gMTAgfHwgY2ggPT09IDgyMzIgfHwgY2ggPT09IDgyMzMpIHtcblx0XHQrK3Rva1Bvcztcblx0XHRpZiAob3B0aW9ucy5sb2NhdGlvbnMpIHtcblx0XHQgICsrdG9rQ3VyTGluZTtcblx0XHQgIHRva0xpbmVTdGFydCA9IHRva1Bvcztcblx0XHR9XG5cdCAgfSBlbHNlIGlmIChjaCA+IDggJiYgY2ggPCAxNCkge1xuXHRcdCsrdG9rUG9zO1xuXHQgIH0gZWxzZSBpZiAoY2ggPT09IDQ3KSB7XG5cdFx0dmFyIG5leHQgPSBpbnB1dC5jaGFyQ29kZUF0KHRva1BvcyArIDEpO1xuXHRcdGlmIChuZXh0ID09PSA0Mikge1xuXHRcdCAgc2tpcEJsb2NrQ29tbWVudCgpO1xuXHRcdH0gZWxzZSBpZiAobmV4dCA9PT0gNDcpIHtcblx0XHQgIHNraXBMaW5lQ29tbWVudCgpO1xuXHRcdH0gZWxzZSBicmVhaztcblx0ICB9IGVsc2UgaWYgKGNoID09PSAxNjApIHtcblx0XHQrK3Rva1Bvcztcblx0ICB9IGVsc2UgaWYgKGNoID49IDU3NjAgJiYgbm9uQVNDSUl3aGl0ZXNwYWNlLnRlc3QoU3RyaW5nLmZyb21DaGFyQ29kZShjaCkpKSB7XG5cdFx0Kyt0b2tQb3M7XG5cdCAgfSBlbHNlIHtcblx0XHRicmVhaztcblx0ICB9XG5cdH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlYWRUb2tlbl9kb3QoKSB7XG5cdHZhciBuZXh0ID0gaW5wdXQuY2hhckNvZGVBdCh0b2tQb3MgKyAxKTtcblx0aWYgKG5leHQgPj0gNDggJiYgbmV4dCA8PSA1NykgcmV0dXJuIHJlYWROdW1iZXIodHJ1ZSk7XG5cdCsrdG9rUG9zO1xuXHRyZXR1cm4gZmluaXNoVG9rZW4oX2RvdCk7XG4gIH1cblxuICBmdW5jdGlvbiByZWFkVG9rZW5fc2xhc2goKSB7XG5cdHZhciBuZXh0ID0gaW5wdXQuY2hhckNvZGVBdCh0b2tQb3MgKyAxKTtcblx0aWYgKHRva1JlZ2V4cEFsbG93ZWQpIHsrK3Rva1BvczsgcmV0dXJuIHJlYWRSZWdleHAoKTt9XG5cdGlmIChuZXh0ID09PSA2MSkgcmV0dXJuIGZpbmlzaE9wKF9hc3NpZ24sIDIpO1xuXHRyZXR1cm4gZmluaXNoT3AoX3NsYXNoLCAxKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlYWRUb2tlbl9tdWx0X21vZHVsbygpIHtcblx0dmFyIG5leHQgPSBpbnB1dC5jaGFyQ29kZUF0KHRva1BvcyArIDEpO1xuXHRpZiAobmV4dCA9PT0gNjEpIHJldHVybiBmaW5pc2hPcChfYXNzaWduLCAyKTtcblx0cmV0dXJuIGZpbmlzaE9wKF9tdWx0aXBseU1vZHVsbywgMSk7XG4gIH1cblxuICBmdW5jdGlvbiByZWFkVG9rZW5fcGlwZV9hbXAoY29kZSkge1xuXHR2YXIgbmV4dCA9IGlucHV0LmNoYXJDb2RlQXQodG9rUG9zICsgMSk7XG5cdGlmIChuZXh0ID09PSBjb2RlKSByZXR1cm4gZmluaXNoT3AoY29kZSA9PT0gMTI0ID8gX2xvZ2ljYWxPUiA6IF9sb2dpY2FsQU5ELCAyKTtcblx0aWYgKG5leHQgPT09IDYxKSByZXR1cm4gZmluaXNoT3AoX2Fzc2lnbiwgMik7XG5cdHJldHVybiBmaW5pc2hPcChjb2RlID09PSAxMjQgPyBfYml0d2lzZU9SIDogX2JpdHdpc2VBTkQsIDEpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVhZFRva2VuX2NhcmV0KCkge1xuXHR2YXIgbmV4dCA9IGlucHV0LmNoYXJDb2RlQXQodG9rUG9zICsgMSk7XG5cdGlmIChuZXh0ID09PSA2MSkgcmV0dXJuIGZpbmlzaE9wKF9hc3NpZ24sIDIpO1xuXHRyZXR1cm4gZmluaXNoT3AoX2JpdHdpc2VYT1IsIDEpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVhZFRva2VuX3BsdXNfbWluKGNvZGUpIHtcblx0dmFyIG5leHQgPSBpbnB1dC5jaGFyQ29kZUF0KHRva1BvcyArIDEpO1xuXHRpZiAobmV4dCA9PT0gY29kZSkge1xuXHQgIGlmIChuZXh0ID09IDQ1ICYmIGlucHV0LmNoYXJDb2RlQXQodG9rUG9zICsgMikgPT0gNjIgJiZcblx0XHQgIG5ld2xpbmUudGVzdChpbnB1dC5zbGljZShsYXN0RW5kLCB0b2tQb3MpKSkge1xuXHRcdHRva1BvcyArPSAzO1xuXHRcdHNraXBMaW5lQ29tbWVudCgpO1xuXHRcdHNraXBTcGFjZSgpO1xuXHRcdHJldHVybiByZWFkVG9rZW4oKTtcblx0ICB9XG5cdCAgcmV0dXJuIGZpbmlzaE9wKF9pbmNEZWMsIDIpO1xuXHR9XG5cdGlmIChuZXh0ID09PSA2MSkgcmV0dXJuIGZpbmlzaE9wKF9hc3NpZ24sIDIpO1xuXHRyZXR1cm4gZmluaXNoT3AoX3BsdXNNaW4sIDEpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVhZFRva2VuX2x0X2d0KGNvZGUpIHtcblx0dmFyIG5leHQgPSBpbnB1dC5jaGFyQ29kZUF0KHRva1BvcyArIDEpO1xuXHR2YXIgc2l6ZSA9IDE7XG5cdGlmIChuZXh0ID09PSBjb2RlKSB7XG5cdCAgc2l6ZSA9IGNvZGUgPT09IDYyICYmIGlucHV0LmNoYXJDb2RlQXQodG9rUG9zICsgMikgPT09IDYyID8gMyA6IDI7XG5cdCAgaWYgKGlucHV0LmNoYXJDb2RlQXQodG9rUG9zICsgc2l6ZSkgPT09IDYxKSByZXR1cm4gZmluaXNoT3AoX2Fzc2lnbiwgc2l6ZSArIDEpO1xuXHQgIHJldHVybiBmaW5pc2hPcChfYml0U2hpZnQsIHNpemUpO1xuXHR9XG5cdGlmIChuZXh0ID09IDMzICYmIGNvZGUgPT0gNjAgJiYgaW5wdXQuY2hhckNvZGVBdCh0b2tQb3MgKyAyKSA9PSA0NSAmJlxuXHRcdGlucHV0LmNoYXJDb2RlQXQodG9rUG9zICsgMykgPT0gNDUpIHtcblx0ICB0b2tQb3MgKz0gNDtcblx0ICBza2lwTGluZUNvbW1lbnQoKTtcblx0ICBza2lwU3BhY2UoKTtcblx0ICByZXR1cm4gcmVhZFRva2VuKCk7XG5cdH1cblx0aWYgKG5leHQgPT09IDYxKVxuXHQgIHNpemUgPSBpbnB1dC5jaGFyQ29kZUF0KHRva1BvcyArIDIpID09PSA2MSA/IDMgOiAyO1xuXHRyZXR1cm4gZmluaXNoT3AoX3JlbGF0aW9uYWwsIHNpemUpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVhZFRva2VuX2VxX2V4Y2woY29kZSkge1xuXHR2YXIgbmV4dCA9IGlucHV0LmNoYXJDb2RlQXQodG9rUG9zICsgMSk7XG5cdGlmIChuZXh0ID09PSA2MSkgcmV0dXJuIGZpbmlzaE9wKF9lcXVhbGl0eSwgaW5wdXQuY2hhckNvZGVBdCh0b2tQb3MgKyAyKSA9PT0gNjEgPyAzIDogMik7XG5cdHJldHVybiBmaW5pc2hPcChjb2RlID09PSA2MSA/IF9lcSA6IF9wcmVmaXgsIDEpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0VG9rZW5Gcm9tQ29kZShjb2RlKSB7XG5cdHN3aXRjaChjb2RlKSB7XG5cdGNhc2UgNDY6XG5cdCAgcmV0dXJuIHJlYWRUb2tlbl9kb3QoKTtcblxuXHRjYXNlIDQwOiArK3Rva1BvczsgcmV0dXJuIGZpbmlzaFRva2VuKF9wYXJlbkwpO1xuXHRjYXNlIDQxOiArK3Rva1BvczsgcmV0dXJuIGZpbmlzaFRva2VuKF9wYXJlblIpO1xuXHRjYXNlIDU5OiArK3Rva1BvczsgcmV0dXJuIGZpbmlzaFRva2VuKF9zZW1pKTtcblx0Y2FzZSA0NDogKyt0b2tQb3M7IHJldHVybiBmaW5pc2hUb2tlbihfY29tbWEpO1xuXHRjYXNlIDkxOiArK3Rva1BvczsgcmV0dXJuIGZpbmlzaFRva2VuKF9icmFja2V0TCk7XG5cdGNhc2UgOTM6ICsrdG9rUG9zOyByZXR1cm4gZmluaXNoVG9rZW4oX2JyYWNrZXRSKTtcblx0Y2FzZSAxMjM6ICsrdG9rUG9zOyByZXR1cm4gZmluaXNoVG9rZW4oX2JyYWNlTCk7XG5cdGNhc2UgMTI1OiArK3Rva1BvczsgcmV0dXJuIGZpbmlzaFRva2VuKF9icmFjZVIpO1xuXHRjYXNlIDU4OiArK3Rva1BvczsgcmV0dXJuIGZpbmlzaFRva2VuKF9jb2xvbik7XG5cdGNhc2UgNjM6ICsrdG9rUG9zOyByZXR1cm4gZmluaXNoVG9rZW4oX3F1ZXN0aW9uKTtcblxuXHRjYXNlIDQ4OlxuXHQgIHZhciBuZXh0ID0gaW5wdXQuY2hhckNvZGVBdCh0b2tQb3MgKyAxKTtcblx0ICBpZiAobmV4dCA9PT0gMTIwIHx8IG5leHQgPT09IDg4KSByZXR1cm4gcmVhZEhleE51bWJlcigpO1xuXHRjYXNlIDQ5OiBjYXNlIDUwOiBjYXNlIDUxOiBjYXNlIDUyOiBjYXNlIDUzOiBjYXNlIDU0OiBjYXNlIDU1OiBjYXNlIDU2OiBjYXNlIDU3OlxuXHQgIHJldHVybiByZWFkTnVtYmVyKGZhbHNlKTtcblxuXHRjYXNlIDM0OiBjYXNlIDM5OlxuXHQgIHJldHVybiByZWFkU3RyaW5nKGNvZGUpO1xuXG5cdGNhc2UgNDc6XG5cdCAgcmV0dXJuIHJlYWRUb2tlbl9zbGFzaChjb2RlKTtcblxuXHRjYXNlIDM3OiBjYXNlIDQyOlxuXHQgIHJldHVybiByZWFkVG9rZW5fbXVsdF9tb2R1bG8oKTtcblxuXHRjYXNlIDEyNDogY2FzZSAzODpcblx0ICByZXR1cm4gcmVhZFRva2VuX3BpcGVfYW1wKGNvZGUpO1xuXG5cdGNhc2UgOTQ6XG5cdCAgcmV0dXJuIHJlYWRUb2tlbl9jYXJldCgpO1xuXG5cdGNhc2UgNDM6IGNhc2UgNDU6XG5cdCAgcmV0dXJuIHJlYWRUb2tlbl9wbHVzX21pbihjb2RlKTtcblxuXHRjYXNlIDYwOiBjYXNlIDYyOlxuXHQgIHJldHVybiByZWFkVG9rZW5fbHRfZ3QoY29kZSk7XG5cblx0Y2FzZSA2MTogY2FzZSAzMzpcblx0ICByZXR1cm4gcmVhZFRva2VuX2VxX2V4Y2woY29kZSk7XG5cblx0Y2FzZSAxMjY6XG5cdCAgcmV0dXJuIGZpbmlzaE9wKF9wcmVmaXgsIDEpO1xuXHR9XG5cblx0cmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVhZFRva2VuKGZvcmNlUmVnZXhwKSB7XG5cdGlmICghZm9yY2VSZWdleHApIHRva1N0YXJ0ID0gdG9rUG9zO1xuXHRlbHNlIHRva1BvcyA9IHRva1N0YXJ0ICsgMTtcblx0aWYgKG9wdGlvbnMubG9jYXRpb25zKSB0b2tTdGFydExvYyA9IG5ldyBsaW5lX2xvY190O1xuXHRpZiAoZm9yY2VSZWdleHApIHJldHVybiByZWFkUmVnZXhwKCk7XG5cdGlmICh0b2tQb3MgPj0gaW5wdXRMZW4pIHJldHVybiBmaW5pc2hUb2tlbihfZW9mKTtcblxuXHR2YXIgY29kZSA9IGlucHV0LmNoYXJDb2RlQXQodG9rUG9zKTtcblx0aWYgKGlzSWRlbnRpZmllclN0YXJ0KGNvZGUpIHx8IGNvZGUgPT09IDkyICkgcmV0dXJuIHJlYWRXb3JkKCk7XG5cblx0dmFyIHRvayA9IGdldFRva2VuRnJvbUNvZGUoY29kZSk7XG5cblx0aWYgKHRvayA9PT0gZmFsc2UpIHtcblx0ICB2YXIgY2ggPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGNvZGUpO1xuXHQgIGlmIChjaCA9PT0gXCJcXFxcXCIgfHwgbm9uQVNDSUlpZGVudGlmaWVyU3RhcnQudGVzdChjaCkpIHJldHVybiByZWFkV29yZCgpO1xuXHQgIHJhaXNlKHRva1BvcywgXCJVbmV4cGVjdGVkIGNoYXJhY3RlciAnXCIgKyBjaCArIFwiJ1wiKTtcblx0fVxuXHRyZXR1cm4gdG9rO1xuICB9XG5cbiAgZnVuY3Rpb24gZmluaXNoT3AodHlwZSwgc2l6ZSkge1xuXHR2YXIgc3RyID0gaW5wdXQuc2xpY2UodG9rUG9zLCB0b2tQb3MgKyBzaXplKTtcblx0dG9rUG9zICs9IHNpemU7XG5cdGZpbmlzaFRva2VuKHR5cGUsIHN0cik7XG4gIH1cblxuICBmdW5jdGlvbiByZWFkUmVnZXhwKCkge1xuXHR2YXIgY29udGVudCA9IFwiXCIsIGVzY2FwZWQsIGluQ2xhc3MsIHN0YXJ0ID0gdG9rUG9zO1xuXHRmb3IgKDs7KSB7XG5cdCAgaWYgKHRva1BvcyA+PSBpbnB1dExlbikgcmFpc2Uoc3RhcnQsIFwiVW50ZXJtaW5hdGVkIHJlZ3VsYXIgZXhwcmVzc2lvblwiKTtcblx0ICB2YXIgY2ggPSBpbnB1dC5jaGFyQXQodG9rUG9zKTtcblx0ICBpZiAobmV3bGluZS50ZXN0KGNoKSkgcmFpc2Uoc3RhcnQsIFwiVW50ZXJtaW5hdGVkIHJlZ3VsYXIgZXhwcmVzc2lvblwiKTtcblx0ICBpZiAoIWVzY2FwZWQpIHtcblx0XHRpZiAoY2ggPT09IFwiW1wiKSBpbkNsYXNzID0gdHJ1ZTtcblx0XHRlbHNlIGlmIChjaCA9PT0gXCJdXCIgJiYgaW5DbGFzcykgaW5DbGFzcyA9IGZhbHNlO1xuXHRcdGVsc2UgaWYgKGNoID09PSBcIi9cIiAmJiAhaW5DbGFzcykgYnJlYWs7XG5cdFx0ZXNjYXBlZCA9IGNoID09PSBcIlxcXFxcIjtcblx0ICB9IGVsc2UgZXNjYXBlZCA9IGZhbHNlO1xuXHQgICsrdG9rUG9zO1xuXHR9XG5cdHZhciBjb250ZW50ID0gaW5wdXQuc2xpY2Uoc3RhcnQsIHRva1Bvcyk7XG5cdCsrdG9rUG9zO1xuXHR2YXIgbW9kcyA9IHJlYWRXb3JkMSgpO1xuXHRpZiAobW9kcyAmJiAhL15bZ21zaXldKiQvLnRlc3QobW9kcykpIHJhaXNlKHN0YXJ0LCBcIkludmFsaWQgcmVnZXhwIGZsYWdcIik7XG5cdHRyeSB7XG5cdCAgdmFyIHZhbHVlID0gbmV3IFJlZ0V4cChjb250ZW50LCBtb2RzKTtcblx0fSBjYXRjaCAoZSkge1xuXHQgIGlmIChlIGluc3RhbmNlb2YgU3ludGF4RXJyb3IpIHJhaXNlKHN0YXJ0LCBlLm1lc3NhZ2UpO1xuXHQgIHJhaXNlKGUpO1xuXHR9XG5cdHJldHVybiBmaW5pc2hUb2tlbihfcmVnZXhwLCB2YWx1ZSk7XG4gIH1cblxuICBmdW5jdGlvbiByZWFkSW50KHJhZGl4LCBsZW4pIHtcblx0dmFyIHN0YXJ0ID0gdG9rUG9zLCB0b3RhbCA9IDA7XG5cdGZvciAodmFyIGkgPSAwLCBlID0gbGVuID09IG51bGwgPyBJbmZpbml0eSA6IGxlbjsgaSA8IGU7ICsraSkge1xuXHQgIHZhciBjb2RlID0gaW5wdXQuY2hhckNvZGVBdCh0b2tQb3MpLCB2YWw7XG5cdCAgaWYgKGNvZGUgPj0gOTcpIHZhbCA9IGNvZGUgLSA5NyArIDEwO1xuXHQgIGVsc2UgaWYgKGNvZGUgPj0gNjUpIHZhbCA9IGNvZGUgLSA2NSArIDEwO1xuXHQgIGVsc2UgaWYgKGNvZGUgPj0gNDggJiYgY29kZSA8PSA1NykgdmFsID0gY29kZSAtIDQ4O1xuXHQgIGVsc2UgdmFsID0gSW5maW5pdHk7XG5cdCAgaWYgKHZhbCA+PSByYWRpeCkgYnJlYWs7XG5cdCAgKyt0b2tQb3M7XG5cdCAgdG90YWwgPSB0b3RhbCAqIHJhZGl4ICsgdmFsO1xuXHR9XG5cdGlmICh0b2tQb3MgPT09IHN0YXJ0IHx8IGxlbiAhPSBudWxsICYmIHRva1BvcyAtIHN0YXJ0ICE9PSBsZW4pIHJldHVybiBudWxsO1xuXG5cdHJldHVybiB0b3RhbDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlYWRIZXhOdW1iZXIoKSB7XG5cdHRva1BvcyArPSAyO1xuXHR2YXIgdmFsID0gcmVhZEludCgxNik7XG5cdGlmICh2YWwgPT0gbnVsbCkgcmFpc2UodG9rU3RhcnQgKyAyLCBcIkV4cGVjdGVkIGhleGFkZWNpbWFsIG51bWJlclwiKTtcblx0aWYgKGlzSWRlbnRpZmllclN0YXJ0KGlucHV0LmNoYXJDb2RlQXQodG9rUG9zKSkpIHJhaXNlKHRva1BvcywgXCJJZGVudGlmaWVyIGRpcmVjdGx5IGFmdGVyIG51bWJlclwiKTtcblx0cmV0dXJuIGZpbmlzaFRva2VuKF9udW0sIHZhbCk7XG4gIH1cblxuICBmdW5jdGlvbiByZWFkTnVtYmVyKHN0YXJ0c1dpdGhEb3QpIHtcblx0dmFyIHN0YXJ0ID0gdG9rUG9zLCBpc0Zsb2F0ID0gZmFsc2UsIG9jdGFsID0gaW5wdXQuY2hhckNvZGVBdCh0b2tQb3MpID09PSA0ODtcblx0aWYgKCFzdGFydHNXaXRoRG90ICYmIHJlYWRJbnQoMTApID09PSBudWxsKSByYWlzZShzdGFydCwgXCJJbnZhbGlkIG51bWJlclwiKTtcblx0aWYgKGlucHV0LmNoYXJDb2RlQXQodG9rUG9zKSA9PT0gNDYpIHtcblx0ICArK3Rva1Bvcztcblx0ICByZWFkSW50KDEwKTtcblx0ICBpc0Zsb2F0ID0gdHJ1ZTtcblx0fVxuXHR2YXIgbmV4dCA9IGlucHV0LmNoYXJDb2RlQXQodG9rUG9zKTtcblx0aWYgKG5leHQgPT09IDY5IHx8IG5leHQgPT09IDEwMSkge1xuXHQgIG5leHQgPSBpbnB1dC5jaGFyQ29kZUF0KCsrdG9rUG9zKTtcblx0ICBpZiAobmV4dCA9PT0gNDMgfHwgbmV4dCA9PT0gNDUpICsrdG9rUG9zO1xuXHQgIGlmIChyZWFkSW50KDEwKSA9PT0gbnVsbCkgcmFpc2Uoc3RhcnQsIFwiSW52YWxpZCBudW1iZXJcIik7XG5cdCAgaXNGbG9hdCA9IHRydWU7XG5cdH1cblx0aWYgKGlzSWRlbnRpZmllclN0YXJ0KGlucHV0LmNoYXJDb2RlQXQodG9rUG9zKSkpIHJhaXNlKHRva1BvcywgXCJJZGVudGlmaWVyIGRpcmVjdGx5IGFmdGVyIG51bWJlclwiKTtcblxuXHR2YXIgc3RyID0gaW5wdXQuc2xpY2Uoc3RhcnQsIHRva1BvcyksIHZhbDtcblx0aWYgKGlzRmxvYXQpIHZhbCA9IHBhcnNlRmxvYXQoc3RyKTtcblx0ZWxzZSBpZiAoIW9jdGFsIHx8IHN0ci5sZW5ndGggPT09IDEpIHZhbCA9IHBhcnNlSW50KHN0ciwgMTApO1xuXHRlbHNlIGlmICgvWzg5XS8udGVzdChzdHIpIHx8IHN0cmljdCkgcmFpc2Uoc3RhcnQsIFwiSW52YWxpZCBudW1iZXJcIik7XG5cdGVsc2UgdmFsID0gcGFyc2VJbnQoc3RyLCA4KTtcblx0cmV0dXJuIGZpbmlzaFRva2VuKF9udW0sIHZhbCk7XG4gIH1cblxuICBmdW5jdGlvbiByZWFkU3RyaW5nKHF1b3RlKSB7XG5cdHRva1BvcysrO1xuXHR2YXIgb3V0ID0gXCJcIjtcblx0Zm9yICg7Oykge1xuXHQgIGlmICh0b2tQb3MgPj0gaW5wdXRMZW4pIHJhaXNlKHRva1N0YXJ0LCBcIlVudGVybWluYXRlZCBzdHJpbmcgY29uc3RhbnRcIik7XG5cdCAgdmFyIGNoID0gaW5wdXQuY2hhckNvZGVBdCh0b2tQb3MpO1xuXHQgIGlmIChjaCA9PT0gcXVvdGUpIHtcblx0XHQrK3Rva1Bvcztcblx0XHRyZXR1cm4gZmluaXNoVG9rZW4oX3N0cmluZywgb3V0KTtcblx0ICB9XG5cdCAgaWYgKGNoID09PSA5Mikge1xuXHRcdGNoID0gaW5wdXQuY2hhckNvZGVBdCgrK3Rva1Bvcyk7XG5cdFx0dmFyIG9jdGFsID0gL15bMC03XSsvLmV4ZWMoaW5wdXQuc2xpY2UodG9rUG9zLCB0b2tQb3MgKyAzKSk7XG5cdFx0aWYgKG9jdGFsKSBvY3RhbCA9IG9jdGFsWzBdO1xuXHRcdHdoaWxlIChvY3RhbCAmJiBwYXJzZUludChvY3RhbCwgOCkgPiAyNTUpIG9jdGFsID0gb2N0YWwuc2xpY2UoMCwgLTEpO1xuXHRcdGlmIChvY3RhbCA9PT0gXCIwXCIpIG9jdGFsID0gbnVsbDtcblx0XHQrK3Rva1Bvcztcblx0XHRpZiAob2N0YWwpIHtcblx0XHQgIGlmIChzdHJpY3QpIHJhaXNlKHRva1BvcyAtIDIsIFwiT2N0YWwgbGl0ZXJhbCBpbiBzdHJpY3QgbW9kZVwiKTtcblx0XHQgIG91dCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKHBhcnNlSW50KG9jdGFsLCA4KSk7XG5cdFx0ICB0b2tQb3MgKz0gb2N0YWwubGVuZ3RoIC0gMTtcblx0XHR9IGVsc2Uge1xuXHRcdCAgc3dpdGNoIChjaCkge1xuXHRcdCAgY2FzZSAxMTA6IG91dCArPSBcIlxcblwiOyBicmVhaztcblx0XHQgIGNhc2UgMTE0OiBvdXQgKz0gXCJcXHJcIjsgYnJlYWs7XG5cdFx0ICBjYXNlIDEyMDogb3V0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUocmVhZEhleENoYXIoMikpOyBicmVhaztcblx0XHQgIGNhc2UgMTE3OiBvdXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShyZWFkSGV4Q2hhcig0KSk7IGJyZWFrO1xuXHRcdCAgY2FzZSA4NTogb3V0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUocmVhZEhleENoYXIoOCkpOyBicmVhaztcblx0XHQgIGNhc2UgMTE2OiBvdXQgKz0gXCJcXHRcIjsgYnJlYWs7XG5cdFx0ICBjYXNlIDk4OiBvdXQgKz0gXCJcXGJcIjsgYnJlYWs7XG5cdFx0ICBjYXNlIDExODogb3V0ICs9IFwiXFx1MDAwYlwiOyBicmVhaztcblx0XHQgIGNhc2UgMTAyOiBvdXQgKz0gXCJcXGZcIjsgYnJlYWs7XG5cdFx0ICBjYXNlIDQ4OiBvdXQgKz0gXCJcXDBcIjsgYnJlYWs7XG5cdFx0ICBjYXNlIDEzOiBpZiAoaW5wdXQuY2hhckNvZGVBdCh0b2tQb3MpID09PSAxMCkgKyt0b2tQb3M7XG5cdFx0ICBjYXNlIDEwOlxuXHRcdFx0aWYgKG9wdGlvbnMubG9jYXRpb25zKSB7IHRva0xpbmVTdGFydCA9IHRva1BvczsgKyt0b2tDdXJMaW5lOyB9XG5cdFx0XHRicmVhaztcblx0XHQgIGRlZmF1bHQ6IG91dCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGNoKTsgYnJlYWs7XG5cdFx0ICB9XG5cdFx0fVxuXHQgIH0gZWxzZSB7XG5cdFx0aWYgKGNoID09PSAxMyB8fCBjaCA9PT0gMTAgfHwgY2ggPT09IDgyMzIgfHwgY2ggPT09IDgyMzMpIHJhaXNlKHRva1N0YXJ0LCBcIlVudGVybWluYXRlZCBzdHJpbmcgY29uc3RhbnRcIik7XG5cdFx0b3V0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoY2gpO1xuXHRcdCsrdG9rUG9zO1xuXHQgIH1cblx0fVxuICB9XG5cbiAgZnVuY3Rpb24gcmVhZEhleENoYXIobGVuKSB7XG5cdHZhciBuID0gcmVhZEludCgxNiwgbGVuKTtcblx0aWYgKG4gPT09IG51bGwpIHJhaXNlKHRva1N0YXJ0LCBcIkJhZCBjaGFyYWN0ZXIgZXNjYXBlIHNlcXVlbmNlXCIpO1xuXHRyZXR1cm4gbjtcbiAgfVxuXG4gIHZhciBjb250YWluc0VzYztcblxuICBmdW5jdGlvbiByZWFkV29yZDEoKSB7XG5cdGNvbnRhaW5zRXNjID0gZmFsc2U7XG5cdHZhciB3b3JkLCBmaXJzdCA9IHRydWUsIHN0YXJ0ID0gdG9rUG9zO1xuXHRmb3IgKDs7KSB7XG5cdCAgdmFyIGNoID0gaW5wdXQuY2hhckNvZGVBdCh0b2tQb3MpO1xuXHQgIGlmIChpc0lkZW50aWZpZXJDaGFyKGNoKSkge1xuXHRcdGlmIChjb250YWluc0VzYykgd29yZCArPSBpbnB1dC5jaGFyQXQodG9rUG9zKTtcblx0XHQrK3Rva1Bvcztcblx0ICB9IGVsc2UgaWYgKGNoID09PSA5Mikge1xuXHRcdGlmICghY29udGFpbnNFc2MpIHdvcmQgPSBpbnB1dC5zbGljZShzdGFydCwgdG9rUG9zKTtcblx0XHRjb250YWluc0VzYyA9IHRydWU7XG5cdFx0aWYgKGlucHV0LmNoYXJDb2RlQXQoKyt0b2tQb3MpICE9IDExNylcblx0XHQgIHJhaXNlKHRva1BvcywgXCJFeHBlY3RpbmcgVW5pY29kZSBlc2NhcGUgc2VxdWVuY2UgXFxcXHVYWFhYXCIpO1xuXHRcdCsrdG9rUG9zO1xuXHRcdHZhciBlc2MgPSByZWFkSGV4Q2hhcig0KTtcblx0XHR2YXIgZXNjU3RyID0gU3RyaW5nLmZyb21DaGFyQ29kZShlc2MpO1xuXHRcdGlmICghZXNjU3RyKSByYWlzZSh0b2tQb3MgLSAxLCBcIkludmFsaWQgVW5pY29kZSBlc2NhcGVcIik7XG5cdFx0aWYgKCEoZmlyc3QgPyBpc0lkZW50aWZpZXJTdGFydChlc2MpIDogaXNJZGVudGlmaWVyQ2hhcihlc2MpKSlcblx0XHQgIHJhaXNlKHRva1BvcyAtIDQsIFwiSW52YWxpZCBVbmljb2RlIGVzY2FwZVwiKTtcblx0XHR3b3JkICs9IGVzY1N0cjtcblx0ICB9IGVsc2Uge1xuXHRcdGJyZWFrO1xuXHQgIH1cblx0ICBmaXJzdCA9IGZhbHNlO1xuXHR9XG5cdHJldHVybiBjb250YWluc0VzYyA/IHdvcmQgOiBpbnB1dC5zbGljZShzdGFydCwgdG9rUG9zKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlYWRXb3JkKCkge1xuXHR2YXIgd29yZCA9IHJlYWRXb3JkMSgpO1xuXHR2YXIgdHlwZSA9IF9uYW1lO1xuXHRpZiAoIWNvbnRhaW5zRXNjICYmIGlzS2V5d29yZCh3b3JkKSlcblx0ICB0eXBlID0ga2V5d29yZFR5cGVzW3dvcmRdO1xuXHRyZXR1cm4gZmluaXNoVG9rZW4odHlwZSwgd29yZCk7XG4gIH1cblxuICBmdW5jdGlvbiBuZXh0KCkge1xuXHRsYXN0U3RhcnQgPSB0b2tTdGFydDtcblx0bGFzdEVuZCA9IHRva0VuZDtcblx0bGFzdEVuZExvYyA9IHRva0VuZExvYztcblx0cmVhZFRva2VuKCk7XG4gIH1cblxuICBmdW5jdGlvbiBzZXRTdHJpY3Qoc3RyY3QpIHtcblx0c3RyaWN0ID0gc3RyY3Q7XG5cdHRva1BvcyA9IHRva1N0YXJ0O1xuXHRpZiAob3B0aW9ucy5sb2NhdGlvbnMpIHtcblx0ICB3aGlsZSAodG9rUG9zIDwgdG9rTGluZVN0YXJ0KSB7XG5cdFx0dG9rTGluZVN0YXJ0ID0gaW5wdXQubGFzdEluZGV4T2YoXCJcXG5cIiwgdG9rTGluZVN0YXJ0IC0gMikgKyAxO1xuXHRcdC0tdG9rQ3VyTGluZTtcblx0ICB9XG5cdH1cblx0c2tpcFNwYWNlKCk7XG5cdHJlYWRUb2tlbigpO1xuICB9XG5cbiAgZnVuY3Rpb24gbm9kZV90KCkge1xuXHR0aGlzLnR5cGUgPSBudWxsO1xuXHR0aGlzLnN0YXJ0ID0gdG9rU3RhcnQ7XG5cdHRoaXMuZW5kID0gbnVsbDtcbiAgfVxuXG4gIGZ1bmN0aW9uIG5vZGVfbG9jX3QoKSB7XG5cdHRoaXMuc3RhcnQgPSB0b2tTdGFydExvYztcblx0dGhpcy5lbmQgPSBudWxsO1xuXHRpZiAoc291cmNlRmlsZSAhPT0gbnVsbCkgdGhpcy5zb3VyY2UgPSBzb3VyY2VGaWxlO1xuICB9XG5cbiAgZnVuY3Rpb24gc3RhcnROb2RlKCkge1xuXHR2YXIgbm9kZSA9IG5ldyBub2RlX3QoKTtcblx0aWYgKG9wdGlvbnMubG9jYXRpb25zKVxuXHQgIG5vZGUubG9jID0gbmV3IG5vZGVfbG9jX3QoKTtcblx0aWYgKG9wdGlvbnMuZGlyZWN0U291cmNlRmlsZSlcblx0ICBub2RlLnNvdXJjZUZpbGUgPSBvcHRpb25zLmRpcmVjdFNvdXJjZUZpbGU7XG5cdGlmIChvcHRpb25zLnJhbmdlcylcblx0ICBub2RlLnJhbmdlID0gW3Rva1N0YXJ0LCAwXTtcblx0cmV0dXJuIG5vZGU7XG4gIH1cblxuICBmdW5jdGlvbiBzdGFydE5vZGVGcm9tKG90aGVyKSB7XG5cdHZhciBub2RlID0gbmV3IG5vZGVfdCgpO1xuXHRub2RlLnN0YXJ0ID0gb3RoZXIuc3RhcnQ7XG5cdGlmIChvcHRpb25zLmxvY2F0aW9ucykge1xuXHQgIG5vZGUubG9jID0gbmV3IG5vZGVfbG9jX3QoKTtcblx0ICBub2RlLmxvYy5zdGFydCA9IG90aGVyLmxvYy5zdGFydDtcblx0fVxuXHRpZiAob3B0aW9ucy5yYW5nZXMpXG5cdCAgbm9kZS5yYW5nZSA9IFtvdGhlci5yYW5nZVswXSwgMF07XG5cblx0cmV0dXJuIG5vZGU7XG4gIH1cblxuICBmdW5jdGlvbiBmaW5pc2hOb2RlKG5vZGUsIHR5cGUpIHtcblx0bm9kZS50eXBlID0gdHlwZTtcblx0bm9kZS5lbmQgPSBsYXN0RW5kO1xuXHRpZiAob3B0aW9ucy5sb2NhdGlvbnMpXG5cdCAgbm9kZS5sb2MuZW5kID0gbGFzdEVuZExvYztcblx0aWYgKG9wdGlvbnMucmFuZ2VzKVxuXHQgIG5vZGUucmFuZ2VbMV0gPSBsYXN0RW5kO1xuXHRyZXR1cm4gbm9kZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzVXNlU3RyaWN0KHN0bXQpIHtcblx0cmV0dXJuIG9wdGlvbnMuZWNtYVZlcnNpb24gPj0gNSAmJiBzdG10LnR5cGUgPT09IFwiRXhwcmVzc2lvblN0YXRlbWVudFwiICYmXG5cdCAgc3RtdC5leHByZXNzaW9uLnR5cGUgPT09IFwiTGl0ZXJhbFwiICYmIHN0bXQuZXhwcmVzc2lvbi52YWx1ZSA9PT0gXCJ1c2Ugc3RyaWN0XCI7XG4gIH1cblxuICBmdW5jdGlvbiBlYXQodHlwZSkge1xuXHRpZiAodG9rVHlwZSA9PT0gdHlwZSkge1xuXHQgIG5leHQoKTtcblx0ICByZXR1cm4gdHJ1ZTtcblx0fVxuICB9XG5cbiAgZnVuY3Rpb24gY2FuSW5zZXJ0U2VtaWNvbG9uKCkge1xuXHRyZXR1cm4gIW9wdGlvbnMuc3RyaWN0U2VtaWNvbG9ucyAmJlxuXHQgICh0b2tUeXBlID09PSBfZW9mIHx8IHRva1R5cGUgPT09IF9icmFjZVIgfHwgbmV3bGluZS50ZXN0KGlucHV0LnNsaWNlKGxhc3RFbmQsIHRva1N0YXJ0KSkpO1xuICB9XG5cbiAgZnVuY3Rpb24gc2VtaWNvbG9uKCkge1xuXHRpZiAoIWVhdChfc2VtaSkgJiYgIWNhbkluc2VydFNlbWljb2xvbigpKSB1bmV4cGVjdGVkKCk7XG4gIH1cblxuICBmdW5jdGlvbiBleHBlY3QodHlwZSkge1xuXHRpZiAodG9rVHlwZSA9PT0gdHlwZSkgbmV4dCgpO1xuXHRlbHNlIHVuZXhwZWN0ZWQoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHVuZXhwZWN0ZWQoKSB7XG5cdHJhaXNlKHRva1N0YXJ0LCBcIlVuZXhwZWN0ZWQgdG9rZW5cIik7XG4gIH1cblxuICBmdW5jdGlvbiBjaGVja0xWYWwoZXhwcikge1xuXHRpZiAoZXhwci50eXBlICE9PSBcIklkZW50aWZpZXJcIiAmJiBleHByLnR5cGUgIT09IFwiTWVtYmVyRXhwcmVzc2lvblwiKVxuXHQgIHJhaXNlKGV4cHIuc3RhcnQsIFwiQXNzaWduaW5nIHRvIHJ2YWx1ZVwiKTtcblx0aWYgKHN0cmljdCAmJiBleHByLnR5cGUgPT09IFwiSWRlbnRpZmllclwiICYmIGlzU3RyaWN0QmFkSWRXb3JkKGV4cHIubmFtZSkpXG5cdCAgcmFpc2UoZXhwci5zdGFydCwgXCJBc3NpZ25pbmcgdG8gXCIgKyBleHByLm5hbWUgKyBcIiBpbiBzdHJpY3QgbW9kZVwiKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlVG9wTGV2ZWwocHJvZ3JhbSkge1xuXHRsYXN0U3RhcnQgPSBsYXN0RW5kID0gdG9rUG9zO1xuXHRpZiAob3B0aW9ucy5sb2NhdGlvbnMpIGxhc3RFbmRMb2MgPSBuZXcgbGluZV9sb2NfdDtcblx0aW5GdW5jdGlvbiA9IHN0cmljdCA9IG51bGw7XG5cdGxhYmVscyA9IFtdO1xuXHRyZWFkVG9rZW4oKTtcblxuXHR2YXIgbm9kZSA9IHByb2dyYW0gfHwgc3RhcnROb2RlKCksIGZpcnN0ID0gdHJ1ZTtcblx0aWYgKCFwcm9ncmFtKSBub2RlLmJvZHkgPSBbXTtcblx0d2hpbGUgKHRva1R5cGUgIT09IF9lb2YpIHtcblx0ICB2YXIgc3RtdCA9IHBhcnNlU3RhdGVtZW50KCk7XG5cdCAgbm9kZS5ib2R5LnB1c2goc3RtdCk7XG5cdCAgaWYgKGZpcnN0ICYmIGlzVXNlU3RyaWN0KHN0bXQpKSBzZXRTdHJpY3QodHJ1ZSk7XG5cdCAgZmlyc3QgPSBmYWxzZTtcblx0fVxuXHRyZXR1cm4gZmluaXNoTm9kZShub2RlLCBcIlByb2dyYW1cIik7XG4gIH1cblxuICB2YXIgbG9vcExhYmVsID0ge2tpbmQ6IFwibG9vcFwifSwgc3dpdGNoTGFiZWwgPSB7a2luZDogXCJzd2l0Y2hcIn07XG5cbiAgZnVuY3Rpb24gcGFyc2VTdGF0ZW1lbnQoKSB7XG5cdGlmICh0b2tUeXBlID09PSBfc2xhc2ggfHwgdG9rVHlwZSA9PT0gX2Fzc2lnbiAmJiB0b2tWYWwgPT0gXCIvPVwiKVxuXHQgIHJlYWRUb2tlbih0cnVlKTtcblxuXHR2YXIgc3RhcnR0eXBlID0gdG9rVHlwZSwgbm9kZSA9IHN0YXJ0Tm9kZSgpO1xuXG5cdHN3aXRjaCAoc3RhcnR0eXBlKSB7XG5cdGNhc2UgX2JyZWFrOiBjYXNlIF9jb250aW51ZTpcblx0ICBuZXh0KCk7XG5cdCAgdmFyIGlzQnJlYWsgPSBzdGFydHR5cGUgPT09IF9icmVhaztcblx0ICBpZiAoZWF0KF9zZW1pKSB8fCBjYW5JbnNlcnRTZW1pY29sb24oKSkgbm9kZS5sYWJlbCA9IG51bGw7XG5cdCAgZWxzZSBpZiAodG9rVHlwZSAhPT0gX25hbWUpIHVuZXhwZWN0ZWQoKTtcblx0ICBlbHNlIHtcblx0XHRub2RlLmxhYmVsID0gcGFyc2VJZGVudCgpO1xuXHRcdHNlbWljb2xvbigpO1xuXHQgIH1cblxuXHQgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFiZWxzLmxlbmd0aDsgKytpKSB7XG5cdFx0dmFyIGxhYiA9IGxhYmVsc1tpXTtcblx0XHRpZiAobm9kZS5sYWJlbCA9PSBudWxsIHx8IGxhYi5uYW1lID09PSBub2RlLmxhYmVsLm5hbWUpIHtcblx0XHQgIGlmIChsYWIua2luZCAhPSBudWxsICYmIChpc0JyZWFrIHx8IGxhYi5raW5kID09PSBcImxvb3BcIikpIGJyZWFrO1xuXHRcdCAgaWYgKG5vZGUubGFiZWwgJiYgaXNCcmVhaykgYnJlYWs7XG5cdFx0fVxuXHQgIH1cblx0ICBpZiAoaSA9PT0gbGFiZWxzLmxlbmd0aCkgcmFpc2Uobm9kZS5zdGFydCwgXCJVbnN5bnRhY3RpYyBcIiArIHN0YXJ0dHlwZS5rZXl3b3JkKTtcblx0ICByZXR1cm4gZmluaXNoTm9kZShub2RlLCBpc0JyZWFrID8gXCJCcmVha1N0YXRlbWVudFwiIDogXCJDb250aW51ZVN0YXRlbWVudFwiKTtcblxuXHRjYXNlIF9kZWJ1Z2dlcjpcblx0ICBuZXh0KCk7XG5cdCAgc2VtaWNvbG9uKCk7XG5cdCAgcmV0dXJuIGZpbmlzaE5vZGUobm9kZSwgXCJEZWJ1Z2dlclN0YXRlbWVudFwiKTtcblxuXHRjYXNlIF9kbzpcblx0ICBuZXh0KCk7XG5cdCAgbGFiZWxzLnB1c2gobG9vcExhYmVsKTtcblx0ICBub2RlLmJvZHkgPSBwYXJzZVN0YXRlbWVudCgpO1xuXHQgIGxhYmVscy5wb3AoKTtcblx0ICBleHBlY3QoX3doaWxlKTtcblx0ICBub2RlLnRlc3QgPSBwYXJzZVBhcmVuRXhwcmVzc2lvbigpO1xuXHQgIHNlbWljb2xvbigpO1xuXHQgIHJldHVybiBmaW5pc2hOb2RlKG5vZGUsIFwiRG9XaGlsZVN0YXRlbWVudFwiKTtcblxuXHRjYXNlIF9mb3I6XG5cdCAgbmV4dCgpO1xuXHQgIGxhYmVscy5wdXNoKGxvb3BMYWJlbCk7XG5cdCAgZXhwZWN0KF9wYXJlbkwpO1xuXHQgIGlmICh0b2tUeXBlID09PSBfc2VtaSkgcmV0dXJuIHBhcnNlRm9yKG5vZGUsIG51bGwpO1xuXHQgIGlmICh0b2tUeXBlID09PSBfdmFyKSB7XG5cdFx0dmFyIGluaXQgPSBzdGFydE5vZGUoKTtcblx0XHRuZXh0KCk7XG5cdFx0cGFyc2VWYXIoaW5pdCwgdHJ1ZSk7XG5cdFx0ZmluaXNoTm9kZShpbml0LCBcIlZhcmlhYmxlRGVjbGFyYXRpb25cIik7XG5cdFx0aWYgKGluaXQuZGVjbGFyYXRpb25zLmxlbmd0aCA9PT0gMSAmJiBlYXQoX2luKSlcblx0XHQgIHJldHVybiBwYXJzZUZvckluKG5vZGUsIGluaXQpO1xuXHRcdHJldHVybiBwYXJzZUZvcihub2RlLCBpbml0KTtcblx0ICB9XG5cdCAgdmFyIGluaXQgPSBwYXJzZUV4cHJlc3Npb24oZmFsc2UsIHRydWUpO1xuXHQgIGlmIChlYXQoX2luKSkge2NoZWNrTFZhbChpbml0KTsgcmV0dXJuIHBhcnNlRm9ySW4obm9kZSwgaW5pdCk7fVxuXHQgIHJldHVybiBwYXJzZUZvcihub2RlLCBpbml0KTtcblxuXHRjYXNlIF9mdW5jdGlvbjpcblx0ICBuZXh0KCk7XG5cdCAgcmV0dXJuIHBhcnNlRnVuY3Rpb24obm9kZSwgdHJ1ZSk7XG5cblx0Y2FzZSBfaWY6XG5cdCAgbmV4dCgpO1xuXHQgIG5vZGUudGVzdCA9IHBhcnNlUGFyZW5FeHByZXNzaW9uKCk7XG5cdCAgbm9kZS5jb25zZXF1ZW50ID0gcGFyc2VTdGF0ZW1lbnQoKTtcblx0ICBub2RlLmFsdGVybmF0ZSA9IGVhdChfZWxzZSkgPyBwYXJzZVN0YXRlbWVudCgpIDogbnVsbDtcblx0ICByZXR1cm4gZmluaXNoTm9kZShub2RlLCBcIklmU3RhdGVtZW50XCIpO1xuXG5cdGNhc2UgX3JldHVybjpcblx0ICBpZiAoIWluRnVuY3Rpb24gJiYgIW9wdGlvbnMuYWxsb3dSZXR1cm5PdXRzaWRlRnVuY3Rpb24pXG5cdFx0cmFpc2UodG9rU3RhcnQsIFwiJ3JldHVybicgb3V0c2lkZSBvZiBmdW5jdGlvblwiKTtcblx0ICBuZXh0KCk7XG5cblx0ICBpZiAoZWF0KF9zZW1pKSB8fCBjYW5JbnNlcnRTZW1pY29sb24oKSkgbm9kZS5hcmd1bWVudCA9IG51bGw7XG5cdCAgZWxzZSB7IG5vZGUuYXJndW1lbnQgPSBwYXJzZUV4cHJlc3Npb24oKTsgc2VtaWNvbG9uKCk7IH1cblx0ICByZXR1cm4gZmluaXNoTm9kZShub2RlLCBcIlJldHVyblN0YXRlbWVudFwiKTtcblxuXHRjYXNlIF9zd2l0Y2g6XG5cdCAgbmV4dCgpO1xuXHQgIG5vZGUuZGlzY3JpbWluYW50ID0gcGFyc2VQYXJlbkV4cHJlc3Npb24oKTtcblx0ICBub2RlLmNhc2VzID0gW107XG5cdCAgZXhwZWN0KF9icmFjZUwpO1xuXHQgIGxhYmVscy5wdXNoKHN3aXRjaExhYmVsKTtcblxuXHQgIGZvciAodmFyIGN1ciwgc2F3RGVmYXVsdDsgdG9rVHlwZSAhPSBfYnJhY2VSOykge1xuXHRcdGlmICh0b2tUeXBlID09PSBfY2FzZSB8fCB0b2tUeXBlID09PSBfZGVmYXVsdCkge1xuXHRcdCAgdmFyIGlzQ2FzZSA9IHRva1R5cGUgPT09IF9jYXNlO1xuXHRcdCAgaWYgKGN1cikgZmluaXNoTm9kZShjdXIsIFwiU3dpdGNoQ2FzZVwiKTtcblx0XHQgIG5vZGUuY2FzZXMucHVzaChjdXIgPSBzdGFydE5vZGUoKSk7XG5cdFx0ICBjdXIuY29uc2VxdWVudCA9IFtdO1xuXHRcdCAgbmV4dCgpO1xuXHRcdCAgaWYgKGlzQ2FzZSkgY3VyLnRlc3QgPSBwYXJzZUV4cHJlc3Npb24oKTtcblx0XHQgIGVsc2Uge1xuXHRcdFx0aWYgKHNhd0RlZmF1bHQpIHJhaXNlKGxhc3RTdGFydCwgXCJNdWx0aXBsZSBkZWZhdWx0IGNsYXVzZXNcIik7IHNhd0RlZmF1bHQgPSB0cnVlO1xuXHRcdFx0Y3VyLnRlc3QgPSBudWxsO1xuXHRcdCAgfVxuXHRcdCAgZXhwZWN0KF9jb2xvbik7XG5cdFx0fSBlbHNlIHtcblx0XHQgIGlmICghY3VyKSB1bmV4cGVjdGVkKCk7XG5cdFx0ICBjdXIuY29uc2VxdWVudC5wdXNoKHBhcnNlU3RhdGVtZW50KCkpO1xuXHRcdH1cblx0ICB9XG5cdCAgaWYgKGN1cikgZmluaXNoTm9kZShjdXIsIFwiU3dpdGNoQ2FzZVwiKTtcblx0ICBuZXh0KCk7XG5cdCAgbGFiZWxzLnBvcCgpO1xuXHQgIHJldHVybiBmaW5pc2hOb2RlKG5vZGUsIFwiU3dpdGNoU3RhdGVtZW50XCIpO1xuXG5cdGNhc2UgX3Rocm93OlxuXHQgIG5leHQoKTtcblx0ICBpZiAobmV3bGluZS50ZXN0KGlucHV0LnNsaWNlKGxhc3RFbmQsIHRva1N0YXJ0KSkpXG5cdFx0cmFpc2UobGFzdEVuZCwgXCJJbGxlZ2FsIG5ld2xpbmUgYWZ0ZXIgdGhyb3dcIik7XG5cdCAgbm9kZS5hcmd1bWVudCA9IHBhcnNlRXhwcmVzc2lvbigpO1xuXHQgIHNlbWljb2xvbigpO1xuXHQgIHJldHVybiBmaW5pc2hOb2RlKG5vZGUsIFwiVGhyb3dTdGF0ZW1lbnRcIik7XG5cblx0Y2FzZSBfdHJ5OlxuXHQgIG5leHQoKTtcblx0ICBub2RlLmJsb2NrID0gcGFyc2VCbG9jaygpO1xuXHQgIG5vZGUuaGFuZGxlciA9IG51bGw7XG5cdCAgaWYgKHRva1R5cGUgPT09IF9jYXRjaCkge1xuXHRcdHZhciBjbGF1c2UgPSBzdGFydE5vZGUoKTtcblx0XHRuZXh0KCk7XG5cdFx0ZXhwZWN0KF9wYXJlbkwpO1xuXHRcdGNsYXVzZS5wYXJhbSA9IHBhcnNlSWRlbnQoKTtcblx0XHRpZiAoc3RyaWN0ICYmIGlzU3RyaWN0QmFkSWRXb3JkKGNsYXVzZS5wYXJhbS5uYW1lKSlcblx0XHQgIHJhaXNlKGNsYXVzZS5wYXJhbS5zdGFydCwgXCJCaW5kaW5nIFwiICsgY2xhdXNlLnBhcmFtLm5hbWUgKyBcIiBpbiBzdHJpY3QgbW9kZVwiKTtcblx0XHRleHBlY3QoX3BhcmVuUik7XG5cdFx0Y2xhdXNlLmd1YXJkID0gbnVsbDtcblx0XHRjbGF1c2UuYm9keSA9IHBhcnNlQmxvY2soKTtcblx0XHRub2RlLmhhbmRsZXIgPSBmaW5pc2hOb2RlKGNsYXVzZSwgXCJDYXRjaENsYXVzZVwiKTtcblx0ICB9XG5cdCAgbm9kZS5ndWFyZGVkSGFuZGxlcnMgPSBlbXB0eTtcblx0ICBub2RlLmZpbmFsaXplciA9IGVhdChfZmluYWxseSkgPyBwYXJzZUJsb2NrKCkgOiBudWxsO1xuXHQgIGlmICghbm9kZS5oYW5kbGVyICYmICFub2RlLmZpbmFsaXplcilcblx0XHRyYWlzZShub2RlLnN0YXJ0LCBcIk1pc3NpbmcgY2F0Y2ggb3IgZmluYWxseSBjbGF1c2VcIik7XG5cdCAgcmV0dXJuIGZpbmlzaE5vZGUobm9kZSwgXCJUcnlTdGF0ZW1lbnRcIik7XG5cblx0Y2FzZSBfdmFyOlxuXHQgIG5leHQoKTtcblx0ICBwYXJzZVZhcihub2RlKTtcblx0ICBzZW1pY29sb24oKTtcblx0ICByZXR1cm4gZmluaXNoTm9kZShub2RlLCBcIlZhcmlhYmxlRGVjbGFyYXRpb25cIik7XG5cblx0Y2FzZSBfd2hpbGU6XG5cdCAgbmV4dCgpO1xuXHQgIG5vZGUudGVzdCA9IHBhcnNlUGFyZW5FeHByZXNzaW9uKCk7XG5cdCAgbGFiZWxzLnB1c2gobG9vcExhYmVsKTtcblx0ICBub2RlLmJvZHkgPSBwYXJzZVN0YXRlbWVudCgpO1xuXHQgIGxhYmVscy5wb3AoKTtcblx0ICByZXR1cm4gZmluaXNoTm9kZShub2RlLCBcIldoaWxlU3RhdGVtZW50XCIpO1xuXG5cdGNhc2UgX3dpdGg6XG5cdCAgaWYgKHN0cmljdCkgcmFpc2UodG9rU3RhcnQsIFwiJ3dpdGgnIGluIHN0cmljdCBtb2RlXCIpO1xuXHQgIG5leHQoKTtcblx0ICBub2RlLm9iamVjdCA9IHBhcnNlUGFyZW5FeHByZXNzaW9uKCk7XG5cdCAgbm9kZS5ib2R5ID0gcGFyc2VTdGF0ZW1lbnQoKTtcblx0ICByZXR1cm4gZmluaXNoTm9kZShub2RlLCBcIldpdGhTdGF0ZW1lbnRcIik7XG5cblx0Y2FzZSBfYnJhY2VMOlxuXHQgIHJldHVybiBwYXJzZUJsb2NrKCk7XG5cblx0Y2FzZSBfc2VtaTpcblx0ICBuZXh0KCk7XG5cdCAgcmV0dXJuIGZpbmlzaE5vZGUobm9kZSwgXCJFbXB0eVN0YXRlbWVudFwiKTtcblxuXHRkZWZhdWx0OlxuXHQgIHZhciBtYXliZU5hbWUgPSB0b2tWYWwsIGV4cHIgPSBwYXJzZUV4cHJlc3Npb24oKTtcblx0ICBpZiAoc3RhcnR0eXBlID09PSBfbmFtZSAmJiBleHByLnR5cGUgPT09IFwiSWRlbnRpZmllclwiICYmIGVhdChfY29sb24pKSB7XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBsYWJlbHMubGVuZ3RoOyArK2kpXG5cdFx0ICBpZiAobGFiZWxzW2ldLm5hbWUgPT09IG1heWJlTmFtZSkgcmFpc2UoZXhwci5zdGFydCwgXCJMYWJlbCAnXCIgKyBtYXliZU5hbWUgKyBcIicgaXMgYWxyZWFkeSBkZWNsYXJlZFwiKTtcblx0XHR2YXIga2luZCA9IHRva1R5cGUuaXNMb29wID8gXCJsb29wXCIgOiB0b2tUeXBlID09PSBfc3dpdGNoID8gXCJzd2l0Y2hcIiA6IG51bGw7XG5cdFx0bGFiZWxzLnB1c2goe25hbWU6IG1heWJlTmFtZSwga2luZDoga2luZH0pO1xuXHRcdG5vZGUuYm9keSA9IHBhcnNlU3RhdGVtZW50KCk7XG5cdFx0bGFiZWxzLnBvcCgpO1xuXHRcdG5vZGUubGFiZWwgPSBleHByO1xuXHRcdHJldHVybiBmaW5pc2hOb2RlKG5vZGUsIFwiTGFiZWxlZFN0YXRlbWVudFwiKTtcblx0ICB9IGVsc2Uge1xuXHRcdG5vZGUuZXhwcmVzc2lvbiA9IGV4cHI7XG5cdFx0c2VtaWNvbG9uKCk7XG5cdFx0cmV0dXJuIGZpbmlzaE5vZGUobm9kZSwgXCJFeHByZXNzaW9uU3RhdGVtZW50XCIpO1xuXHQgIH1cblx0fVxuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VQYXJlbkV4cHJlc3Npb24oKSB7XG5cdGV4cGVjdChfcGFyZW5MKTtcblx0dmFyIHZhbCA9IHBhcnNlRXhwcmVzc2lvbigpO1xuXHRleHBlY3QoX3BhcmVuUik7XG5cdHJldHVybiB2YWw7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZUJsb2NrKGFsbG93U3RyaWN0KSB7XG5cdHZhciBub2RlID0gc3RhcnROb2RlKCksIGZpcnN0ID0gdHJ1ZSwgc3RyaWN0ID0gZmFsc2UsIG9sZFN0cmljdDtcblx0bm9kZS5ib2R5ID0gW107XG5cdGV4cGVjdChfYnJhY2VMKTtcblx0d2hpbGUgKCFlYXQoX2JyYWNlUikpIHtcblx0ICB2YXIgc3RtdCA9IHBhcnNlU3RhdGVtZW50KCk7XG5cdCAgbm9kZS5ib2R5LnB1c2goc3RtdCk7XG5cdCAgaWYgKGZpcnN0ICYmIGFsbG93U3RyaWN0ICYmIGlzVXNlU3RyaWN0KHN0bXQpKSB7XG5cdFx0b2xkU3RyaWN0ID0gc3RyaWN0O1xuXHRcdHNldFN0cmljdChzdHJpY3QgPSB0cnVlKTtcblx0ICB9XG5cdCAgZmlyc3QgPSBmYWxzZTtcblx0fVxuXHRpZiAoc3RyaWN0ICYmICFvbGRTdHJpY3QpIHNldFN0cmljdChmYWxzZSk7XG5cdHJldHVybiBmaW5pc2hOb2RlKG5vZGUsIFwiQmxvY2tTdGF0ZW1lbnRcIik7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZUZvcihub2RlLCBpbml0KSB7XG5cdG5vZGUuaW5pdCA9IGluaXQ7XG5cdGV4cGVjdChfc2VtaSk7XG5cdG5vZGUudGVzdCA9IHRva1R5cGUgPT09IF9zZW1pID8gbnVsbCA6IHBhcnNlRXhwcmVzc2lvbigpO1xuXHRleHBlY3QoX3NlbWkpO1xuXHRub2RlLnVwZGF0ZSA9IHRva1R5cGUgPT09IF9wYXJlblIgPyBudWxsIDogcGFyc2VFeHByZXNzaW9uKCk7XG5cdGV4cGVjdChfcGFyZW5SKTtcblx0bm9kZS5ib2R5ID0gcGFyc2VTdGF0ZW1lbnQoKTtcblx0bGFiZWxzLnBvcCgpO1xuXHRyZXR1cm4gZmluaXNoTm9kZShub2RlLCBcIkZvclN0YXRlbWVudFwiKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlRm9ySW4obm9kZSwgaW5pdCkge1xuXHRub2RlLmxlZnQgPSBpbml0O1xuXHRub2RlLnJpZ2h0ID0gcGFyc2VFeHByZXNzaW9uKCk7XG5cdGV4cGVjdChfcGFyZW5SKTtcblx0bm9kZS5ib2R5ID0gcGFyc2VTdGF0ZW1lbnQoKTtcblx0bGFiZWxzLnBvcCgpO1xuXHRyZXR1cm4gZmluaXNoTm9kZShub2RlLCBcIkZvckluU3RhdGVtZW50XCIpO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VWYXIobm9kZSwgbm9Jbikge1xuXHRub2RlLmRlY2xhcmF0aW9ucyA9IFtdO1xuXHRub2RlLmtpbmQgPSBcInZhclwiO1xuXHRmb3IgKDs7KSB7XG5cdCAgdmFyIGRlY2wgPSBzdGFydE5vZGUoKTtcblx0ICBkZWNsLmlkID0gcGFyc2VJZGVudCgpO1xuXHQgIGlmIChzdHJpY3QgJiYgaXNTdHJpY3RCYWRJZFdvcmQoZGVjbC5pZC5uYW1lKSlcblx0XHRyYWlzZShkZWNsLmlkLnN0YXJ0LCBcIkJpbmRpbmcgXCIgKyBkZWNsLmlkLm5hbWUgKyBcIiBpbiBzdHJpY3QgbW9kZVwiKTtcblx0ICBkZWNsLmluaXQgPSBlYXQoX2VxKSA/IHBhcnNlRXhwcmVzc2lvbih0cnVlLCBub0luKSA6IG51bGw7XG5cdCAgbm9kZS5kZWNsYXJhdGlvbnMucHVzaChmaW5pc2hOb2RlKGRlY2wsIFwiVmFyaWFibGVEZWNsYXJhdG9yXCIpKTtcblx0ICBpZiAoIWVhdChfY29tbWEpKSBicmVhaztcblx0fVxuXHRyZXR1cm4gbm9kZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlRXhwcmVzc2lvbihub0NvbW1hLCBub0luKSB7XG5cdHZhciBleHByID0gcGFyc2VNYXliZUFzc2lnbihub0luKTtcblx0aWYgKCFub0NvbW1hICYmIHRva1R5cGUgPT09IF9jb21tYSkge1xuXHQgIHZhciBub2RlID0gc3RhcnROb2RlRnJvbShleHByKTtcblx0ICBub2RlLmV4cHJlc3Npb25zID0gW2V4cHJdO1xuXHQgIHdoaWxlIChlYXQoX2NvbW1hKSkgbm9kZS5leHByZXNzaW9ucy5wdXNoKHBhcnNlTWF5YmVBc3NpZ24obm9JbikpO1xuXHQgIHJldHVybiBmaW5pc2hOb2RlKG5vZGUsIFwiU2VxdWVuY2VFeHByZXNzaW9uXCIpO1xuXHR9XG5cdHJldHVybiBleHByO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VNYXliZUFzc2lnbihub0luKSB7XG5cdHZhciBsZWZ0ID0gcGFyc2VNYXliZUNvbmRpdGlvbmFsKG5vSW4pO1xuXHRpZiAodG9rVHlwZS5pc0Fzc2lnbikge1xuXHQgIHZhciBub2RlID0gc3RhcnROb2RlRnJvbShsZWZ0KTtcblx0ICBub2RlLm9wZXJhdG9yID0gdG9rVmFsO1xuXHQgIG5vZGUubGVmdCA9IGxlZnQ7XG5cdCAgbmV4dCgpO1xuXHQgIG5vZGUucmlnaHQgPSBwYXJzZU1heWJlQXNzaWduKG5vSW4pO1xuXHQgIGNoZWNrTFZhbChsZWZ0KTtcblx0ICByZXR1cm4gZmluaXNoTm9kZShub2RlLCBcIkFzc2lnbm1lbnRFeHByZXNzaW9uXCIpO1xuXHR9XG5cdHJldHVybiBsZWZ0O1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VNYXliZUNvbmRpdGlvbmFsKG5vSW4pIHtcblx0dmFyIGV4cHIgPSBwYXJzZUV4cHJPcHMobm9Jbik7XG5cdGlmIChlYXQoX3F1ZXN0aW9uKSkge1xuXHQgIHZhciBub2RlID0gc3RhcnROb2RlRnJvbShleHByKTtcblx0ICBub2RlLnRlc3QgPSBleHByO1xuXHQgIG5vZGUuY29uc2VxdWVudCA9IHBhcnNlRXhwcmVzc2lvbih0cnVlKTtcblx0ICBleHBlY3QoX2NvbG9uKTtcblx0ICBub2RlLmFsdGVybmF0ZSA9IHBhcnNlRXhwcmVzc2lvbih0cnVlLCBub0luKTtcblx0ICByZXR1cm4gZmluaXNoTm9kZShub2RlLCBcIkNvbmRpdGlvbmFsRXhwcmVzc2lvblwiKTtcblx0fVxuXHRyZXR1cm4gZXhwcjtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlRXhwck9wcyhub0luKSB7XG5cdHJldHVybiBwYXJzZUV4cHJPcChwYXJzZU1heWJlVW5hcnkoKSwgLTEsIG5vSW4pO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VFeHByT3AobGVmdCwgbWluUHJlYywgbm9Jbikge1xuXHR2YXIgcHJlYyA9IHRva1R5cGUuYmlub3A7XG5cdGlmIChwcmVjICE9IG51bGwgJiYgKCFub0luIHx8IHRva1R5cGUgIT09IF9pbikpIHtcblx0ICBpZiAocHJlYyA+IG1pblByZWMpIHtcblx0XHR2YXIgbm9kZSA9IHN0YXJ0Tm9kZUZyb20obGVmdCk7XG5cdFx0bm9kZS5sZWZ0ID0gbGVmdDtcblx0XHRub2RlLm9wZXJhdG9yID0gdG9rVmFsO1xuXHRcdHZhciBvcCA9IHRva1R5cGU7XG5cdFx0bmV4dCgpO1xuXHRcdG5vZGUucmlnaHQgPSBwYXJzZUV4cHJPcChwYXJzZU1heWJlVW5hcnkoKSwgcHJlYywgbm9Jbik7XG5cdFx0dmFyIGV4cHJOb2RlID0gZmluaXNoTm9kZShub2RlLCAob3AgPT09IF9sb2dpY2FsT1IgfHwgb3AgPT09IF9sb2dpY2FsQU5EKSA/IFwiTG9naWNhbEV4cHJlc3Npb25cIiA6IFwiQmluYXJ5RXhwcmVzc2lvblwiKTtcblx0XHRyZXR1cm4gcGFyc2VFeHByT3AoZXhwck5vZGUsIG1pblByZWMsIG5vSW4pO1xuXHQgIH1cblx0fVxuXHRyZXR1cm4gbGVmdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlTWF5YmVVbmFyeSgpIHtcblx0aWYgKHRva1R5cGUucHJlZml4KSB7XG5cdCAgdmFyIG5vZGUgPSBzdGFydE5vZGUoKSwgdXBkYXRlID0gdG9rVHlwZS5pc1VwZGF0ZTtcblx0ICBub2RlLm9wZXJhdG9yID0gdG9rVmFsO1xuXHQgIG5vZGUucHJlZml4ID0gdHJ1ZTtcblx0ICB0b2tSZWdleHBBbGxvd2VkID0gdHJ1ZTtcblx0ICBuZXh0KCk7XG5cdCAgbm9kZS5hcmd1bWVudCA9IHBhcnNlTWF5YmVVbmFyeSgpO1xuXHQgIGlmICh1cGRhdGUpIGNoZWNrTFZhbChub2RlLmFyZ3VtZW50KTtcblx0ICBlbHNlIGlmIChzdHJpY3QgJiYgbm9kZS5vcGVyYXRvciA9PT0gXCJkZWxldGVcIiAmJlxuXHRcdFx0ICAgbm9kZS5hcmd1bWVudC50eXBlID09PSBcIklkZW50aWZpZXJcIilcblx0XHRyYWlzZShub2RlLnN0YXJ0LCBcIkRlbGV0aW5nIGxvY2FsIHZhcmlhYmxlIGluIHN0cmljdCBtb2RlXCIpO1xuXHQgIHJldHVybiBmaW5pc2hOb2RlKG5vZGUsIHVwZGF0ZSA/IFwiVXBkYXRlRXhwcmVzc2lvblwiIDogXCJVbmFyeUV4cHJlc3Npb25cIik7XG5cdH1cblx0dmFyIGV4cHIgPSBwYXJzZUV4cHJTdWJzY3JpcHRzKCk7XG5cdHdoaWxlICh0b2tUeXBlLnBvc3RmaXggJiYgIWNhbkluc2VydFNlbWljb2xvbigpKSB7XG5cdCAgdmFyIG5vZGUgPSBzdGFydE5vZGVGcm9tKGV4cHIpO1xuXHQgIG5vZGUub3BlcmF0b3IgPSB0b2tWYWw7XG5cdCAgbm9kZS5wcmVmaXggPSBmYWxzZTtcblx0ICBub2RlLmFyZ3VtZW50ID0gZXhwcjtcblx0ICBjaGVja0xWYWwoZXhwcik7XG5cdCAgbmV4dCgpO1xuXHQgIGV4cHIgPSBmaW5pc2hOb2RlKG5vZGUsIFwiVXBkYXRlRXhwcmVzc2lvblwiKTtcblx0fVxuXHRyZXR1cm4gZXhwcjtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlRXhwclN1YnNjcmlwdHMoKSB7XG5cdHJldHVybiBwYXJzZVN1YnNjcmlwdHMocGFyc2VFeHByQXRvbSgpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlU3Vic2NyaXB0cyhiYXNlLCBub0NhbGxzKSB7XG5cdGlmIChlYXQoX2RvdCkpIHtcblx0ICB2YXIgbm9kZSA9IHN0YXJ0Tm9kZUZyb20oYmFzZSk7XG5cdCAgbm9kZS5vYmplY3QgPSBiYXNlO1xuXHQgIG5vZGUucHJvcGVydHkgPSBwYXJzZUlkZW50KHRydWUpO1xuXHQgIG5vZGUuY29tcHV0ZWQgPSBmYWxzZTtcblx0ICByZXR1cm4gcGFyc2VTdWJzY3JpcHRzKGZpbmlzaE5vZGUobm9kZSwgXCJNZW1iZXJFeHByZXNzaW9uXCIpLCBub0NhbGxzKTtcblx0fSBlbHNlIGlmIChlYXQoX2JyYWNrZXRMKSkge1xuXHQgIHZhciBub2RlID0gc3RhcnROb2RlRnJvbShiYXNlKTtcblx0ICBub2RlLm9iamVjdCA9IGJhc2U7XG5cdCAgbm9kZS5wcm9wZXJ0eSA9IHBhcnNlRXhwcmVzc2lvbigpO1xuXHQgIG5vZGUuY29tcHV0ZWQgPSB0cnVlO1xuXHQgIGV4cGVjdChfYnJhY2tldFIpO1xuXHQgIHJldHVybiBwYXJzZVN1YnNjcmlwdHMoZmluaXNoTm9kZShub2RlLCBcIk1lbWJlckV4cHJlc3Npb25cIiksIG5vQ2FsbHMpO1xuXHR9IGVsc2UgaWYgKCFub0NhbGxzICYmIGVhdChfcGFyZW5MKSkge1xuXHQgIHZhciBub2RlID0gc3RhcnROb2RlRnJvbShiYXNlKTtcblx0ICBub2RlLmNhbGxlZSA9IGJhc2U7XG5cdCAgbm9kZS5hcmd1bWVudHMgPSBwYXJzZUV4cHJMaXN0KF9wYXJlblIsIGZhbHNlKTtcblx0ICByZXR1cm4gcGFyc2VTdWJzY3JpcHRzKGZpbmlzaE5vZGUobm9kZSwgXCJDYWxsRXhwcmVzc2lvblwiKSwgbm9DYWxscyk7XG5cdH0gZWxzZSByZXR1cm4gYmFzZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlRXhwckF0b20oKSB7XG5cdHN3aXRjaCAodG9rVHlwZSkge1xuXHRjYXNlIF90aGlzOlxuXHQgIHZhciBub2RlID0gc3RhcnROb2RlKCk7XG5cdCAgbmV4dCgpO1xuXHQgIHJldHVybiBmaW5pc2hOb2RlKG5vZGUsIFwiVGhpc0V4cHJlc3Npb25cIik7XG5cdGNhc2UgX25hbWU6XG5cdCAgcmV0dXJuIHBhcnNlSWRlbnQoKTtcblx0Y2FzZSBfbnVtOiBjYXNlIF9zdHJpbmc6IGNhc2UgX3JlZ2V4cDpcblx0ICB2YXIgbm9kZSA9IHN0YXJ0Tm9kZSgpO1xuXHQgIG5vZGUudmFsdWUgPSB0b2tWYWw7XG5cdCAgbm9kZS5yYXcgPSBpbnB1dC5zbGljZSh0b2tTdGFydCwgdG9rRW5kKTtcblx0ICBuZXh0KCk7XG5cdCAgcmV0dXJuIGZpbmlzaE5vZGUobm9kZSwgXCJMaXRlcmFsXCIpO1xuXG5cdGNhc2UgX251bGw6IGNhc2UgX3RydWU6IGNhc2UgX2ZhbHNlOlxuXHQgIHZhciBub2RlID0gc3RhcnROb2RlKCk7XG5cdCAgbm9kZS52YWx1ZSA9IHRva1R5cGUuYXRvbVZhbHVlO1xuXHQgIG5vZGUucmF3ID0gdG9rVHlwZS5rZXl3b3JkO1xuXHQgIG5leHQoKTtcblx0ICByZXR1cm4gZmluaXNoTm9kZShub2RlLCBcIkxpdGVyYWxcIik7XG5cblx0Y2FzZSBfcGFyZW5MOlxuXHQgIHZhciB0b2tTdGFydExvYzEgPSB0b2tTdGFydExvYywgdG9rU3RhcnQxID0gdG9rU3RhcnQ7XG5cdCAgbmV4dCgpO1xuXHQgIHZhciB2YWwgPSBwYXJzZUV4cHJlc3Npb24oKTtcblx0ICB2YWwuc3RhcnQgPSB0b2tTdGFydDE7XG5cdCAgdmFsLmVuZCA9IHRva0VuZDtcblx0ICBpZiAob3B0aW9ucy5sb2NhdGlvbnMpIHtcblx0XHR2YWwubG9jLnN0YXJ0ID0gdG9rU3RhcnRMb2MxO1xuXHRcdHZhbC5sb2MuZW5kID0gdG9rRW5kTG9jO1xuXHQgIH1cblx0ICBpZiAob3B0aW9ucy5yYW5nZXMpXG5cdFx0dmFsLnJhbmdlID0gW3Rva1N0YXJ0MSwgdG9rRW5kXTtcblx0ICBleHBlY3QoX3BhcmVuUik7XG5cdCAgcmV0dXJuIHZhbDtcblxuXHRjYXNlIF9icmFja2V0TDpcblx0ICB2YXIgbm9kZSA9IHN0YXJ0Tm9kZSgpO1xuXHQgIG5leHQoKTtcblx0ICBub2RlLmVsZW1lbnRzID0gcGFyc2VFeHByTGlzdChfYnJhY2tldFIsIHRydWUsIHRydWUpO1xuXHQgIHJldHVybiBmaW5pc2hOb2RlKG5vZGUsIFwiQXJyYXlFeHByZXNzaW9uXCIpO1xuXG5cdGNhc2UgX2JyYWNlTDpcblx0ICByZXR1cm4gcGFyc2VPYmooKTtcblxuXHRjYXNlIF9mdW5jdGlvbjpcblx0ICB2YXIgbm9kZSA9IHN0YXJ0Tm9kZSgpO1xuXHQgIG5leHQoKTtcblx0ICByZXR1cm4gcGFyc2VGdW5jdGlvbihub2RlLCBmYWxzZSk7XG5cblx0Y2FzZSBfbmV3OlxuXHQgIHJldHVybiBwYXJzZU5ldygpO1xuXG5cdGRlZmF1bHQ6XG5cdCAgdW5leHBlY3RlZCgpO1xuXHR9XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZU5ldygpIHtcblx0dmFyIG5vZGUgPSBzdGFydE5vZGUoKTtcblx0bmV4dCgpO1xuXHRub2RlLmNhbGxlZSA9IHBhcnNlU3Vic2NyaXB0cyhwYXJzZUV4cHJBdG9tKCksIHRydWUpO1xuXHRpZiAoZWF0KF9wYXJlbkwpKSBub2RlLmFyZ3VtZW50cyA9IHBhcnNlRXhwckxpc3QoX3BhcmVuUiwgZmFsc2UpO1xuXHRlbHNlIG5vZGUuYXJndW1lbnRzID0gZW1wdHk7XG5cdHJldHVybiBmaW5pc2hOb2RlKG5vZGUsIFwiTmV3RXhwcmVzc2lvblwiKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlT2JqKCkge1xuXHR2YXIgbm9kZSA9IHN0YXJ0Tm9kZSgpLCBmaXJzdCA9IHRydWUsIHNhd0dldFNldCA9IGZhbHNlO1xuXHRub2RlLnByb3BlcnRpZXMgPSBbXTtcblx0bmV4dCgpO1xuXHR3aGlsZSAoIWVhdChfYnJhY2VSKSkge1xuXHQgIGlmICghZmlyc3QpIHtcblx0XHRleHBlY3QoX2NvbW1hKTtcblx0XHRpZiAob3B0aW9ucy5hbGxvd1RyYWlsaW5nQ29tbWFzICYmIGVhdChfYnJhY2VSKSkgYnJlYWs7XG5cdCAgfSBlbHNlIGZpcnN0ID0gZmFsc2U7XG5cblx0ICB2YXIgcHJvcCA9IHtrZXk6IHBhcnNlUHJvcGVydHlOYW1lKCl9LCBpc0dldFNldCA9IGZhbHNlLCBraW5kO1xuXHQgIGlmIChlYXQoX2NvbG9uKSkge1xuXHRcdHByb3AudmFsdWUgPSBwYXJzZUV4cHJlc3Npb24odHJ1ZSk7XG5cdFx0a2luZCA9IHByb3Aua2luZCA9IFwiaW5pdFwiO1xuXHQgIH0gZWxzZSBpZiAob3B0aW9ucy5lY21hVmVyc2lvbiA+PSA1ICYmIHByb3Aua2V5LnR5cGUgPT09IFwiSWRlbnRpZmllclwiICYmXG5cdFx0XHRcdCAocHJvcC5rZXkubmFtZSA9PT0gXCJnZXRcIiB8fCBwcm9wLmtleS5uYW1lID09PSBcInNldFwiKSkge1xuXHRcdGlzR2V0U2V0ID0gc2F3R2V0U2V0ID0gdHJ1ZTtcblx0XHRraW5kID0gcHJvcC5raW5kID0gcHJvcC5rZXkubmFtZTtcblx0XHRwcm9wLmtleSA9IHBhcnNlUHJvcGVydHlOYW1lKCk7XG5cdFx0aWYgKHRva1R5cGUgIT09IF9wYXJlbkwpIHVuZXhwZWN0ZWQoKTtcblx0XHRwcm9wLnZhbHVlID0gcGFyc2VGdW5jdGlvbihzdGFydE5vZGUoKSwgZmFsc2UpO1xuXHQgIH0gZWxzZSB1bmV4cGVjdGVkKCk7XG5cblx0ICBpZiAocHJvcC5rZXkudHlwZSA9PT0gXCJJZGVudGlmaWVyXCIgJiYgKHN0cmljdCB8fCBzYXdHZXRTZXQpKSB7XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBub2RlLnByb3BlcnRpZXMubGVuZ3RoOyArK2kpIHtcblx0XHQgIHZhciBvdGhlciA9IG5vZGUucHJvcGVydGllc1tpXTtcblx0XHQgIGlmIChvdGhlci5rZXkubmFtZSA9PT0gcHJvcC5rZXkubmFtZSkge1xuXHRcdFx0dmFyIGNvbmZsaWN0ID0ga2luZCA9PSBvdGhlci5raW5kIHx8IGlzR2V0U2V0ICYmIG90aGVyLmtpbmQgPT09IFwiaW5pdFwiIHx8XG5cdFx0XHQgIGtpbmQgPT09IFwiaW5pdFwiICYmIChvdGhlci5raW5kID09PSBcImdldFwiIHx8IG90aGVyLmtpbmQgPT09IFwic2V0XCIpO1xuXHRcdFx0aWYgKGNvbmZsaWN0ICYmICFzdHJpY3QgJiYga2luZCA9PT0gXCJpbml0XCIgJiYgb3RoZXIua2luZCA9PT0gXCJpbml0XCIpIGNvbmZsaWN0ID0gZmFsc2U7XG5cdFx0XHRpZiAoY29uZmxpY3QpIHJhaXNlKHByb3Aua2V5LnN0YXJ0LCBcIlJlZGVmaW5pdGlvbiBvZiBwcm9wZXJ0eVwiKTtcblx0XHQgIH1cblx0XHR9XG5cdCAgfVxuXHQgIG5vZGUucHJvcGVydGllcy5wdXNoKHByb3ApO1xuXHR9XG5cdHJldHVybiBmaW5pc2hOb2RlKG5vZGUsIFwiT2JqZWN0RXhwcmVzc2lvblwiKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlUHJvcGVydHlOYW1lKCkge1xuXHRpZiAodG9rVHlwZSA9PT0gX251bSB8fCB0b2tUeXBlID09PSBfc3RyaW5nKSByZXR1cm4gcGFyc2VFeHByQXRvbSgpO1xuXHRyZXR1cm4gcGFyc2VJZGVudCh0cnVlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlRnVuY3Rpb24obm9kZSwgaXNTdGF0ZW1lbnQpIHtcblx0aWYgKHRva1R5cGUgPT09IF9uYW1lKSBub2RlLmlkID0gcGFyc2VJZGVudCgpO1xuXHRlbHNlIGlmIChpc1N0YXRlbWVudCkgdW5leHBlY3RlZCgpO1xuXHRlbHNlIG5vZGUuaWQgPSBudWxsO1xuXHRub2RlLnBhcmFtcyA9IFtdO1xuXHR2YXIgZmlyc3QgPSB0cnVlO1xuXHRleHBlY3QoX3BhcmVuTCk7XG5cdHdoaWxlICghZWF0KF9wYXJlblIpKSB7XG5cdCAgaWYgKCFmaXJzdCkgZXhwZWN0KF9jb21tYSk7IGVsc2UgZmlyc3QgPSBmYWxzZTtcblx0ICBub2RlLnBhcmFtcy5wdXNoKHBhcnNlSWRlbnQoKSk7XG5cdH1cblxuXHR2YXIgb2xkSW5GdW5jID0gaW5GdW5jdGlvbiwgb2xkTGFiZWxzID0gbGFiZWxzO1xuXHRpbkZ1bmN0aW9uID0gdHJ1ZTsgbGFiZWxzID0gW107XG5cdG5vZGUuYm9keSA9IHBhcnNlQmxvY2sodHJ1ZSk7XG5cdGluRnVuY3Rpb24gPSBvbGRJbkZ1bmM7IGxhYmVscyA9IG9sZExhYmVscztcblxuXHRpZiAoc3RyaWN0IHx8IG5vZGUuYm9keS5ib2R5Lmxlbmd0aCAmJiBpc1VzZVN0cmljdChub2RlLmJvZHkuYm9keVswXSkpIHtcblx0ICBmb3IgKHZhciBpID0gbm9kZS5pZCA/IC0xIDogMDsgaSA8IG5vZGUucGFyYW1zLmxlbmd0aDsgKytpKSB7XG5cdFx0dmFyIGlkID0gaSA8IDAgPyBub2RlLmlkIDogbm9kZS5wYXJhbXNbaV07XG5cdFx0aWYgKGlzU3RyaWN0UmVzZXJ2ZWRXb3JkKGlkLm5hbWUpIHx8IGlzU3RyaWN0QmFkSWRXb3JkKGlkLm5hbWUpKVxuXHRcdCAgcmFpc2UoaWQuc3RhcnQsIFwiRGVmaW5pbmcgJ1wiICsgaWQubmFtZSArIFwiJyBpbiBzdHJpY3QgbW9kZVwiKTtcblx0XHRpZiAoaSA+PSAwKSBmb3IgKHZhciBqID0gMDsgaiA8IGk7ICsraikgaWYgKGlkLm5hbWUgPT09IG5vZGUucGFyYW1zW2pdLm5hbWUpXG5cdFx0ICByYWlzZShpZC5zdGFydCwgXCJBcmd1bWVudCBuYW1lIGNsYXNoIGluIHN0cmljdCBtb2RlXCIpO1xuXHQgIH1cblx0fVxuXG5cdHJldHVybiBmaW5pc2hOb2RlKG5vZGUsIGlzU3RhdGVtZW50ID8gXCJGdW5jdGlvbkRlY2xhcmF0aW9uXCIgOiBcIkZ1bmN0aW9uRXhwcmVzc2lvblwiKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlRXhwckxpc3QoY2xvc2UsIGFsbG93VHJhaWxpbmdDb21tYSwgYWxsb3dFbXB0eSkge1xuXHR2YXIgZWx0cyA9IFtdLCBmaXJzdCA9IHRydWU7XG5cdHdoaWxlICghZWF0KGNsb3NlKSkge1xuXHQgIGlmICghZmlyc3QpIHtcblx0XHRleHBlY3QoX2NvbW1hKTtcblx0XHRpZiAoYWxsb3dUcmFpbGluZ0NvbW1hICYmIG9wdGlvbnMuYWxsb3dUcmFpbGluZ0NvbW1hcyAmJiBlYXQoY2xvc2UpKSBicmVhaztcblx0ICB9IGVsc2UgZmlyc3QgPSBmYWxzZTtcblxuXHQgIGlmIChhbGxvd0VtcHR5ICYmIHRva1R5cGUgPT09IF9jb21tYSkgZWx0cy5wdXNoKG51bGwpO1xuXHQgIGVsc2UgZWx0cy5wdXNoKHBhcnNlRXhwcmVzc2lvbih0cnVlKSk7XG5cdH1cblx0cmV0dXJuIGVsdHM7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZUlkZW50KGxpYmVyYWwpIHtcblx0dmFyIG5vZGUgPSBzdGFydE5vZGUoKTtcblx0aWYgKGxpYmVyYWwgJiYgb3B0aW9ucy5mb3JiaWRSZXNlcnZlZCA9PSBcImV2ZXJ5d2hlcmVcIikgbGliZXJhbCA9IGZhbHNlO1xuXHRpZiAodG9rVHlwZSA9PT0gX25hbWUpIHtcblx0ICBpZiAoIWxpYmVyYWwgJiZcblx0XHQgIChvcHRpb25zLmZvcmJpZFJlc2VydmVkICYmXG5cdFx0ICAgKG9wdGlvbnMuZWNtYVZlcnNpb24gPT09IDMgPyBpc1Jlc2VydmVkV29yZDMgOiBpc1Jlc2VydmVkV29yZDUpKHRva1ZhbCkgfHxcblx0XHQgICBzdHJpY3QgJiYgaXNTdHJpY3RSZXNlcnZlZFdvcmQodG9rVmFsKSkgJiZcblx0XHQgIGlucHV0LnNsaWNlKHRva1N0YXJ0LCB0b2tFbmQpLmluZGV4T2YoXCJcXFxcXCIpID09IC0xKVxuXHRcdHJhaXNlKHRva1N0YXJ0LCBcIlRoZSBrZXl3b3JkICdcIiArIHRva1ZhbCArIFwiJyBpcyByZXNlcnZlZFwiKTtcblx0ICBub2RlLm5hbWUgPSB0b2tWYWw7XG5cdH0gZWxzZSBpZiAobGliZXJhbCAmJiB0b2tUeXBlLmtleXdvcmQpIHtcblx0ICBub2RlLm5hbWUgPSB0b2tUeXBlLmtleXdvcmQ7XG5cdH0gZWxzZSB7XG5cdCAgdW5leHBlY3RlZCgpO1xuXHR9XG5cdHRva1JlZ2V4cEFsbG93ZWQgPSBmYWxzZTtcblx0bmV4dCgpO1xuXHRyZXR1cm4gZmluaXNoTm9kZShub2RlLCBcIklkZW50aWZpZXJcIik7XG4gIH1cblxufSk7XG5cblx0XHRpZiAoIWFjb3JuLnZlcnNpb24pXG5cdFx0XHRhY29ybiA9IG51bGw7XG5cdH1cblxuXHRmdW5jdGlvbiBwYXJzZShjb2RlLCBvcHRpb25zKSB7XG5cdFx0cmV0dXJuIChnbG9iYWwuYWNvcm4gfHwgYWNvcm4pLnBhcnNlKGNvZGUsIG9wdGlvbnMpO1xuXHR9XG5cblx0dmFyIGJpbmFyeU9wZXJhdG9ycyA9IHtcblx0XHQnKyc6ICdfX2FkZCcsXG5cdFx0Jy0nOiAnX19zdWJ0cmFjdCcsXG5cdFx0JyonOiAnX19tdWx0aXBseScsXG5cdFx0Jy8nOiAnX19kaXZpZGUnLFxuXHRcdCclJzogJ19fbW9kdWxvJyxcblx0XHQnPT0nOiAnX19lcXVhbHMnLFxuXHRcdCchPSc6ICdfX2VxdWFscydcblx0fTtcblxuXHR2YXIgdW5hcnlPcGVyYXRvcnMgPSB7XG5cdFx0Jy0nOiAnX19uZWdhdGUnLFxuXHRcdCcrJzogJ19fc2VsZidcblx0fTtcblxuXHR2YXIgZmllbGRzID0gQmFzZS5lYWNoKFxuXHRcdFsnYWRkJywgJ3N1YnRyYWN0JywgJ211bHRpcGx5JywgJ2RpdmlkZScsICdtb2R1bG8nLCAnZXF1YWxzJywgJ25lZ2F0ZSddLFxuXHRcdGZ1bmN0aW9uKG5hbWUpIHtcblx0XHRcdHRoaXNbJ19fJyArIG5hbWVdID0gJyMnICsgbmFtZTtcblx0XHR9LFxuXHRcdHtcblx0XHRcdF9fc2VsZjogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fVxuXHRcdH1cblx0KTtcblx0UG9pbnQuaW5qZWN0KGZpZWxkcyk7XG5cdFNpemUuaW5qZWN0KGZpZWxkcyk7XG5cdENvbG9yLmluamVjdChmaWVsZHMpO1xuXG5cdGZ1bmN0aW9uIF9fJF9fKGxlZnQsIG9wZXJhdG9yLCByaWdodCkge1xuXHRcdHZhciBoYW5kbGVyID0gYmluYXJ5T3BlcmF0b3JzW29wZXJhdG9yXTtcblx0XHRpZiAobGVmdCAmJiBsZWZ0W2hhbmRsZXJdKSB7XG5cdFx0XHR2YXIgcmVzID0gbGVmdFtoYW5kbGVyXShyaWdodCk7XG5cdFx0XHRyZXR1cm4gb3BlcmF0b3IgPT09ICchPScgPyAhcmVzIDogcmVzO1xuXHRcdH1cblx0XHRzd2l0Y2ggKG9wZXJhdG9yKSB7XG5cdFx0Y2FzZSAnKyc6IHJldHVybiBsZWZ0ICsgcmlnaHQ7XG5cdFx0Y2FzZSAnLSc6IHJldHVybiBsZWZ0IC0gcmlnaHQ7XG5cdFx0Y2FzZSAnKic6IHJldHVybiBsZWZ0ICogcmlnaHQ7XG5cdFx0Y2FzZSAnLyc6IHJldHVybiBsZWZ0IC8gcmlnaHQ7XG5cdFx0Y2FzZSAnJSc6IHJldHVybiBsZWZ0ICUgcmlnaHQ7XG5cdFx0Y2FzZSAnPT0nOiByZXR1cm4gbGVmdCA9PSByaWdodDtcblx0XHRjYXNlICchPSc6IHJldHVybiBsZWZ0ICE9IHJpZ2h0O1xuXHRcdH1cblx0fVxuXG5cdGZ1bmN0aW9uICRfXyhvcGVyYXRvciwgdmFsdWUpIHtcblx0XHR2YXIgaGFuZGxlciA9IHVuYXJ5T3BlcmF0b3JzW29wZXJhdG9yXTtcblx0XHRpZiAodmFsdWUgJiYgdmFsdWVbaGFuZGxlcl0pXG5cdFx0XHRyZXR1cm4gdmFsdWVbaGFuZGxlcl0oKTtcblx0XHRzd2l0Y2ggKG9wZXJhdG9yKSB7XG5cdFx0Y2FzZSAnKyc6IHJldHVybiArdmFsdWU7XG5cdFx0Y2FzZSAnLSc6IHJldHVybiAtdmFsdWU7XG5cdFx0fVxuXHR9XG5cblx0ZnVuY3Rpb24gY29tcGlsZShjb2RlLCBvcHRpb25zKSB7XG5cdFx0aWYgKCFjb2RlKVxuXHRcdFx0cmV0dXJuICcnO1xuXHRcdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG5cdFx0dmFyIGluc2VydGlvbnMgPSBbXTtcblxuXHRcdGZ1bmN0aW9uIGdldE9mZnNldChvZmZzZXQpIHtcblx0XHRcdGZvciAodmFyIGkgPSAwLCBsID0gaW5zZXJ0aW9ucy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcblx0XHRcdFx0dmFyIGluc2VydGlvbiA9IGluc2VydGlvbnNbaV07XG5cdFx0XHRcdGlmIChpbnNlcnRpb25bMF0gPj0gb2Zmc2V0KVxuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRvZmZzZXQgKz0gaW5zZXJ0aW9uWzFdO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG9mZnNldDtcblx0XHR9XG5cblx0XHRmdW5jdGlvbiBnZXRDb2RlKG5vZGUpIHtcblx0XHRcdHJldHVybiBjb2RlLnN1YnN0cmluZyhnZXRPZmZzZXQobm9kZS5yYW5nZVswXSksXG5cdFx0XHRcdFx0Z2V0T2Zmc2V0KG5vZGUucmFuZ2VbMV0pKTtcblx0XHR9XG5cblx0XHRmdW5jdGlvbiBnZXRCZXR3ZWVuKGxlZnQsIHJpZ2h0KSB7XG5cdFx0XHRyZXR1cm4gY29kZS5zdWJzdHJpbmcoZ2V0T2Zmc2V0KGxlZnQucmFuZ2VbMV0pLFxuXHRcdFx0XHRcdGdldE9mZnNldChyaWdodC5yYW5nZVswXSkpO1xuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIHJlcGxhY2VDb2RlKG5vZGUsIHN0cikge1xuXHRcdFx0dmFyIHN0YXJ0ID0gZ2V0T2Zmc2V0KG5vZGUucmFuZ2VbMF0pLFxuXHRcdFx0XHRlbmQgPSBnZXRPZmZzZXQobm9kZS5yYW5nZVsxXSksXG5cdFx0XHRcdGluc2VydCA9IDA7XG5cdFx0XHRmb3IgKHZhciBpID0gaW5zZXJ0aW9ucy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuXHRcdFx0XHRpZiAoc3RhcnQgPiBpbnNlcnRpb25zW2ldWzBdKSB7XG5cdFx0XHRcdFx0aW5zZXJ0ID0gaSArIDE7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGluc2VydGlvbnMuc3BsaWNlKGluc2VydCwgMCwgW3N0YXJ0LCBzdHIubGVuZ3RoIC0gZW5kICsgc3RhcnRdKTtcblx0XHRcdGNvZGUgPSBjb2RlLnN1YnN0cmluZygwLCBzdGFydCkgKyBzdHIgKyBjb2RlLnN1YnN0cmluZyhlbmQpO1xuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIHdhbGtBU1Qobm9kZSwgcGFyZW50KSB7XG5cdFx0XHRpZiAoIW5vZGUpXG5cdFx0XHRcdHJldHVybjtcblx0XHRcdGZvciAodmFyIGtleSBpbiBub2RlKSB7XG5cdFx0XHRcdGlmIChrZXkgPT09ICdyYW5nZScgfHwga2V5ID09PSAnbG9jJylcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0dmFyIHZhbHVlID0gbm9kZVtrZXldO1xuXHRcdFx0XHRpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcblx0XHRcdFx0XHRmb3IgKHZhciBpID0gMCwgbCA9IHZhbHVlLmxlbmd0aDsgaSA8IGw7IGkrKylcblx0XHRcdFx0XHRcdHdhbGtBU1QodmFsdWVbaV0sIG5vZGUpO1xuXHRcdFx0XHR9IGVsc2UgaWYgKHZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpIHtcblx0XHRcdFx0XHR3YWxrQVNUKHZhbHVlLCBub2RlKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0c3dpdGNoIChub2RlLnR5cGUpIHtcblx0XHRcdGNhc2UgJ1VuYXJ5RXhwcmVzc2lvbic6XG5cdFx0XHRcdGlmIChub2RlLm9wZXJhdG9yIGluIHVuYXJ5T3BlcmF0b3JzXG5cdFx0XHRcdFx0XHQmJiBub2RlLmFyZ3VtZW50LnR5cGUgIT09ICdMaXRlcmFsJykge1xuXHRcdFx0XHRcdHZhciBhcmcgPSBnZXRDb2RlKG5vZGUuYXJndW1lbnQpO1xuXHRcdFx0XHRcdHJlcGxhY2VDb2RlKG5vZGUsICckX18oXCInICsgbm9kZS5vcGVyYXRvciArICdcIiwgJ1xuXHRcdFx0XHRcdFx0XHQrIGFyZyArICcpJyk7XG5cdFx0XHRcdH1cblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlICdCaW5hcnlFeHByZXNzaW9uJzpcblx0XHRcdFx0aWYgKG5vZGUub3BlcmF0b3IgaW4gYmluYXJ5T3BlcmF0b3JzXG5cdFx0XHRcdFx0XHQmJiBub2RlLmxlZnQudHlwZSAhPT0gJ0xpdGVyYWwnKSB7XG5cdFx0XHRcdFx0dmFyIGxlZnQgPSBnZXRDb2RlKG5vZGUubGVmdCksXG5cdFx0XHRcdFx0XHRyaWdodCA9IGdldENvZGUobm9kZS5yaWdodCksXG5cdFx0XHRcdFx0XHRiZXR3ZWVuID0gZ2V0QmV0d2Vlbihub2RlLmxlZnQsIG5vZGUucmlnaHQpLFxuXHRcdFx0XHRcdFx0b3BlcmF0b3IgPSBub2RlLm9wZXJhdG9yO1xuXHRcdFx0XHRcdHJlcGxhY2VDb2RlKG5vZGUsICdfXyRfXygnICsgbGVmdCArICcsJ1xuXHRcdFx0XHRcdFx0XHQrIGJldHdlZW4ucmVwbGFjZShuZXcgUmVnRXhwKCdcXFxcJyArIG9wZXJhdG9yKSxcblx0XHRcdFx0XHRcdFx0XHQnXCInICsgb3BlcmF0b3IgKyAnXCInKVxuXHRcdFx0XHRcdFx0XHQrICcsICcgKyByaWdodCArICcpJyk7XG5cdFx0XHRcdH1cblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlICdVcGRhdGVFeHByZXNzaW9uJzpcblx0XHRcdGNhc2UgJ0Fzc2lnbm1lbnRFeHByZXNzaW9uJzpcblx0XHRcdFx0dmFyIHBhcmVudFR5cGUgPSBwYXJlbnQgJiYgcGFyZW50LnR5cGU7XG5cdFx0XHRcdGlmICghKFxuXHRcdFx0XHRcdFx0cGFyZW50VHlwZSA9PT0gJ0ZvclN0YXRlbWVudCdcblx0XHRcdFx0XHRcdHx8IHBhcmVudFR5cGUgPT09ICdCaW5hcnlFeHByZXNzaW9uJ1xuXHRcdFx0XHRcdFx0XHQmJiAvXls9ITw+XS8udGVzdChwYXJlbnQub3BlcmF0b3IpXG5cdFx0XHRcdFx0XHR8fCBwYXJlbnRUeXBlID09PSAnTWVtYmVyRXhwcmVzc2lvbicgJiYgcGFyZW50LmNvbXB1dGVkXG5cdFx0XHRcdCkpIHtcblx0XHRcdFx0XHRpZiAobm9kZS50eXBlID09PSAnVXBkYXRlRXhwcmVzc2lvbicpIHtcblx0XHRcdFx0XHRcdHZhciBhcmcgPSBnZXRDb2RlKG5vZGUuYXJndW1lbnQpLFxuXHRcdFx0XHRcdFx0XHRleHAgPSAnX18kX18oJyArIGFyZyArICcsIFwiJyArIG5vZGUub3BlcmF0b3JbMF1cblx0XHRcdFx0XHRcdFx0XHRcdCsgJ1wiLCAxKScsXG5cdFx0XHRcdFx0XHRcdHN0ciA9IGFyZyArICcgPSAnICsgZXhwO1xuXHRcdFx0XHRcdFx0aWYgKCFub2RlLnByZWZpeFxuXHRcdFx0XHRcdFx0XHRcdCYmIChwYXJlbnRUeXBlID09PSAnQXNzaWdubWVudEV4cHJlc3Npb24nXG5cdFx0XHRcdFx0XHRcdFx0XHR8fCBwYXJlbnRUeXBlID09PSAnVmFyaWFibGVEZWNsYXJhdG9yJykpIHtcblx0XHRcdFx0XHRcdFx0aWYgKGdldENvZGUocGFyZW50LmxlZnQgfHwgcGFyZW50LmlkKSA9PT0gYXJnKVxuXHRcdFx0XHRcdFx0XHRcdHN0ciA9IGV4cDtcblx0XHRcdFx0XHRcdFx0c3RyID0gYXJnICsgJzsgJyArIHN0cjtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdHJlcGxhY2VDb2RlKG5vZGUsIHN0cik7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGlmICgvXi49JC8udGVzdChub2RlLm9wZXJhdG9yKVxuXHRcdFx0XHRcdFx0XHRcdCYmIG5vZGUubGVmdC50eXBlICE9PSAnTGl0ZXJhbCcpIHtcblx0XHRcdFx0XHRcdFx0dmFyIGxlZnQgPSBnZXRDb2RlKG5vZGUubGVmdCksXG5cdFx0XHRcdFx0XHRcdFx0cmlnaHQgPSBnZXRDb2RlKG5vZGUucmlnaHQpLFxuXHRcdFx0XHRcdFx0XHRcdGV4cCA9IGxlZnQgKyAnID0gX18kX18oJyArIGxlZnQgKyAnLCBcIidcblx0XHRcdFx0XHRcdFx0XHRcdCsgbm9kZS5vcGVyYXRvclswXSArICdcIiwgJyArIHJpZ2h0ICsgJyknO1xuXHRcdFx0XHRcdFx0XHRyZXBsYWNlQ29kZShub2RlLCAvXlxcKC4qXFwpJC8udGVzdChnZXRDb2RlKG5vZGUpKVxuXHRcdFx0XHRcdFx0XHRcdFx0PyAnKCcgKyBleHAgKyAnKScgOiBleHApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgJ0V4cG9ydERlZmF1bHREZWNsYXJhdGlvbic6XG5cdFx0XHRcdHJlcGxhY2VDb2RlKHtcblx0XHRcdFx0XHRyYW5nZTogW25vZGUuc3RhcnQsIG5vZGUuZGVjbGFyYXRpb24uc3RhcnRdXG5cdFx0XHRcdH0sICdtb2R1bGUuZXhwb3J0cyA9ICcpO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgJ0V4cG9ydE5hbWVkRGVjbGFyYXRpb24nOlxuXHRcdFx0XHR2YXIgZGVjbGFyYXRpb24gPSBub2RlLmRlY2xhcmF0aW9uO1xuXHRcdFx0XHR2YXIgc3BlY2lmaWVycyA9IG5vZGUuc3BlY2lmaWVycztcblx0XHRcdFx0aWYgKGRlY2xhcmF0aW9uKSB7XG5cdFx0XHRcdFx0dmFyIGRlY2xhcmF0aW9ucyA9IGRlY2xhcmF0aW9uLmRlY2xhcmF0aW9ucztcblx0XHRcdFx0XHRpZiAoZGVjbGFyYXRpb25zKSB7XG5cdFx0XHRcdFx0XHRkZWNsYXJhdGlvbnMuZm9yRWFjaChmdW5jdGlvbihkZWMpIHtcblx0XHRcdFx0XHRcdFx0cmVwbGFjZUNvZGUoZGVjLCAnbW9kdWxlLmV4cG9ydHMuJyArIGdldENvZGUoZGVjKSk7XG5cdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdHJlcGxhY2VDb2RlKHtcblx0XHRcdFx0XHRcdFx0cmFuZ2U6IFtcblx0XHRcdFx0XHRcdFx0XHRub2RlLnN0YXJ0LFxuXHRcdFx0XHRcdFx0XHRcdGRlY2xhcmF0aW9uLnN0YXJ0ICsgZGVjbGFyYXRpb24ua2luZC5sZW5ndGhcblx0XHRcdFx0XHRcdFx0XVxuXHRcdFx0XHRcdFx0fSwgJycpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSBlbHNlIGlmIChzcGVjaWZpZXJzKSB7XG5cdFx0XHRcdFx0dmFyIGV4cG9ydHMgPSBzcGVjaWZpZXJzLm1hcChmdW5jdGlvbihzcGVjaWZpZXIpIHtcblx0XHRcdFx0XHRcdHZhciBuYW1lID0gZ2V0Q29kZShzcGVjaWZpZXIpO1xuXHRcdFx0XHRcdFx0cmV0dXJuICdtb2R1bGUuZXhwb3J0cy4nICsgbmFtZSArICcgPSAnICsgbmFtZSArICc7ICc7XG5cdFx0XHRcdFx0fSkuam9pbignJyk7XG5cdFx0XHRcdFx0aWYgKGV4cG9ydHMpIHtcblx0XHRcdFx0XHRcdHJlcGxhY2VDb2RlKG5vZGUsIGV4cG9ydHMpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHR9XG5cblx0XHRmdW5jdGlvbiBlbmNvZGVWTFEodmFsdWUpIHtcblx0XHRcdHZhciByZXMgPSAnJyxcblx0XHRcdFx0YmFzZTY0ID0gJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky8nO1xuXHRcdFx0dmFsdWUgPSAoTWF0aC5hYnModmFsdWUpIDw8IDEpICsgKHZhbHVlIDwgMCA/IDEgOiAwKTtcblx0XHRcdHdoaWxlICh2YWx1ZSB8fCAhcmVzKSB7XG5cdFx0XHRcdHZhciBuZXh0ID0gdmFsdWUgJiAoMzIgLSAxKTtcblx0XHRcdFx0dmFsdWUgPj49IDU7XG5cdFx0XHRcdGlmICh2YWx1ZSlcblx0XHRcdFx0XHRuZXh0IHw9IDMyO1xuXHRcdFx0XHRyZXMgKz0gYmFzZTY0W25leHRdO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlcztcblx0XHR9XG5cblx0XHR2YXIgdXJsID0gb3B0aW9ucy51cmwgfHwgJycsXG5cdFx0XHRhZ2VudCA9IHBhcGVyLmFnZW50LFxuXHRcdFx0dmVyc2lvbiA9IGFnZW50LnZlcnNpb25OdW1iZXIsXG5cdFx0XHRvZmZzZXRDb2RlID0gZmFsc2UsXG5cdFx0XHRzb3VyY2VNYXBzID0gb3B0aW9ucy5zb3VyY2VNYXBzLFxuXHRcdFx0c291cmNlID0gb3B0aW9ucy5zb3VyY2UgfHwgY29kZSxcblx0XHRcdGxpbmVCcmVha3MgPSAvXFxyXFxufFxcbnxcXHIvbWcsXG5cdFx0XHRvZmZzZXQgPSBvcHRpb25zLm9mZnNldCB8fCAwLFxuXHRcdFx0bWFwO1xuXHRcdGlmIChzb3VyY2VNYXBzICYmIChhZ2VudC5jaHJvbWUgJiYgdmVyc2lvbiA+PSAzMFxuXHRcdFx0XHR8fCBhZ2VudC53ZWJraXQgJiYgdmVyc2lvbiA+PSA1MzcuNzZcblx0XHRcdFx0fHwgYWdlbnQuZmlyZWZveCAmJiB2ZXJzaW9uID49IDIzXG5cdFx0XHRcdHx8IGFnZW50Lm5vZGUpKSB7XG5cdFx0XHRpZiAoYWdlbnQubm9kZSkge1xuXHRcdFx0XHRvZmZzZXQgLT0gMjtcblx0XHRcdH0gZWxzZSBpZiAod2luZG93ICYmIHVybCAmJiAhd2luZG93LmxvY2F0aW9uLmhyZWYuaW5kZXhPZih1cmwpKSB7XG5cdFx0XHRcdHZhciBodG1sID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2h0bWwnKVswXS5pbm5lckhUTUw7XG5cdFx0XHRcdG9mZnNldCA9IGh0bWwuc3Vic3RyKDAsIGh0bWwuaW5kZXhPZihjb2RlKSArIDEpLm1hdGNoKFxuXHRcdFx0XHRcdFx0bGluZUJyZWFrcykubGVuZ3RoICsgMTtcblx0XHRcdH1cblx0XHRcdG9mZnNldENvZGUgPSBvZmZzZXQgPiAwICYmICEoXG5cdFx0XHRcdFx0YWdlbnQuY2hyb21lICYmIHZlcnNpb24gPj0gMzYgfHxcblx0XHRcdFx0XHRhZ2VudC5zYWZhcmkgJiYgdmVyc2lvbiA+PSA2MDAgfHxcblx0XHRcdFx0XHRhZ2VudC5maXJlZm94ICYmIHZlcnNpb24gPj0gNDAgfHxcblx0XHRcdFx0XHRhZ2VudC5ub2RlKTtcblx0XHRcdHZhciBtYXBwaW5ncyA9IFsnQUEnICsgZW5jb2RlVkxRKG9mZnNldENvZGUgPyAwIDogb2Zmc2V0KSArICdBJ107XG5cdFx0XHRtYXBwaW5ncy5sZW5ndGggPSAoY29kZS5tYXRjaChsaW5lQnJlYWtzKSB8fCBbXSkubGVuZ3RoICsgMVxuXHRcdFx0XHRcdCsgKG9mZnNldENvZGUgPyBvZmZzZXQgOiAwKTtcblx0XHRcdG1hcCA9IHtcblx0XHRcdFx0dmVyc2lvbjogMyxcblx0XHRcdFx0ZmlsZTogdXJsLFxuXHRcdFx0XHRuYW1lczpbXSxcblx0XHRcdFx0bWFwcGluZ3M6IG1hcHBpbmdzLmpvaW4oJztBQUNBJyksXG5cdFx0XHRcdHNvdXJjZVJvb3Q6ICcnLFxuXHRcdFx0XHRzb3VyY2VzOiBbdXJsXSxcblx0XHRcdFx0c291cmNlc0NvbnRlbnQ6IFtzb3VyY2VdXG5cdFx0XHR9O1xuXHRcdH1cblx0XHR3YWxrQVNUKHBhcnNlKGNvZGUsIHtcblx0XHRcdHJhbmdlczogdHJ1ZSxcblx0XHRcdHByZXNlcnZlUGFyZW5zOiB0cnVlLFxuXHRcdFx0c291cmNlVHlwZTogJ21vZHVsZSdcblx0XHR9KSk7XG5cdFx0aWYgKG1hcCkge1xuXHRcdFx0aWYgKG9mZnNldENvZGUpIHtcblx0XHRcdFx0Y29kZSA9IG5ldyBBcnJheShvZmZzZXQgKyAxKS5qb2luKCdcXG4nKSArIGNvZGU7XG5cdFx0XHR9XG5cdFx0XHRpZiAoL14oaW5saW5lfGJvdGgpJC8udGVzdChzb3VyY2VNYXBzKSkge1xuXHRcdFx0XHRjb2RlICs9IFwiXFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIlxuXHRcdFx0XHRcdFx0KyBzZWxmLmJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KFxuXHRcdFx0XHRcdFx0XHRKU09OLnN0cmluZ2lmeShtYXApKSkpO1xuXHRcdFx0fVxuXHRcdFx0Y29kZSArPSBcIlxcbi8vIyBzb3VyY2VVUkw9XCIgKyAodXJsIHx8ICdwYXBlcnNjcmlwdCcpO1xuXHRcdH1cblx0XHRyZXR1cm4ge1xuXHRcdFx0dXJsOiB1cmwsXG5cdFx0XHRzb3VyY2U6IHNvdXJjZSxcblx0XHRcdGNvZGU6IGNvZGUsXG5cdFx0XHRtYXA6IG1hcFxuXHRcdH07XG5cdH1cblxuXHRmdW5jdGlvbiBleGVjdXRlKGNvZGUsIHNjb3BlLCBvcHRpb25zKSB7XG5cdFx0cGFwZXIgPSBzY29wZTtcblx0XHR2YXIgdmlldyA9IHNjb3BlLmdldFZpZXcoKSxcblx0XHRcdHRvb2wgPSAvXFxidG9vbFxcLlxcdyt8XFxzK29uKD86S2V5fE1vdXNlKSg/OlVwfERvd258TW92ZXxEcmFnKVxcYi9cblx0XHRcdFx0XHQudGVzdChjb2RlKSAmJiAhL1xcYm5ld1xccytUb29sXFxiLy50ZXN0KGNvZGUpXG5cdFx0XHRcdFx0XHQ/IG5ldyBUb29sKCkgOiBudWxsLFxuXHRcdFx0dG9vbEhhbmRsZXJzID0gdG9vbCA/IHRvb2wuX2V2ZW50cyA6IFtdLFxuXHRcdFx0aGFuZGxlcnMgPSBbJ29uRnJhbWUnLCAnb25SZXNpemUnXS5jb25jYXQodG9vbEhhbmRsZXJzKSxcblx0XHRcdHBhcmFtcyA9IFtdLFxuXHRcdFx0YXJncyA9IFtdLFxuXHRcdFx0ZnVuYyxcblx0XHRcdGNvbXBpbGVkID0gdHlwZW9mIGNvZGUgPT09ICdvYmplY3QnID8gY29kZSA6IGNvbXBpbGUoY29kZSwgb3B0aW9ucyk7XG5cdFx0Y29kZSA9IGNvbXBpbGVkLmNvZGU7XG5cdFx0ZnVuY3Rpb24gZXhwb3NlKHNjb3BlLCBoaWRkZW4pIHtcblx0XHRcdGZvciAodmFyIGtleSBpbiBzY29wZSkge1xuXHRcdFx0XHRpZiAoKGhpZGRlbiB8fCAhL15fLy50ZXN0KGtleSkpICYmIG5ldyBSZWdFeHAoJyhbXFxcXGJcXFxcc1xcXFxXXXxeKSdcblx0XHRcdFx0XHRcdCsga2V5LnJlcGxhY2UoL1xcJC9nLCAnXFxcXCQnKSArICdcXFxcYicpLnRlc3QoY29kZSkpIHtcblx0XHRcdFx0XHRwYXJhbXMucHVzaChrZXkpO1xuXHRcdFx0XHRcdGFyZ3MucHVzaChzY29wZVtrZXldKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRleHBvc2UoeyBfXyRfXzogX18kX18sICRfXzogJF9fLCBwYXBlcjogc2NvcGUsIHZpZXc6IHZpZXcsIHRvb2w6IHRvb2wgfSxcblx0XHRcdFx0dHJ1ZSk7XG5cdFx0ZXhwb3NlKHNjb3BlKTtcblx0XHRjb2RlID0gJ3ZhciBtb2R1bGUgPSB7IGV4cG9ydHM6IHt9IH07ICcgKyBjb2RlO1xuXHRcdHZhciBleHBvcnRzID0gQmFzZS5lYWNoKGhhbmRsZXJzLCBmdW5jdGlvbihrZXkpIHtcblx0XHRcdGlmIChuZXcgUmVnRXhwKCdcXFxccysnICsga2V5ICsgJ1xcXFxiJykudGVzdChjb2RlKSkge1xuXHRcdFx0XHRwYXJhbXMucHVzaChrZXkpO1xuXHRcdFx0XHR0aGlzLnB1c2goJ21vZHVsZS5leHBvcnRzLicgKyBrZXkgKyAnID0gJyArIGtleSArICc7Jyk7XG5cdFx0XHR9XG5cdFx0fSwgW10pLmpvaW4oJ1xcbicpO1xuXHRcdGlmIChleHBvcnRzKSB7XG5cdFx0XHRjb2RlICs9ICdcXG4nICsgZXhwb3J0cztcblx0XHR9XG5cdFx0Y29kZSArPSAnXFxucmV0dXJuIG1vZHVsZS5leHBvcnRzOyc7XG5cdFx0dmFyIGFnZW50ID0gcGFwZXIuYWdlbnQ7XG5cdFx0aWYgKGRvY3VtZW50ICYmIChhZ2VudC5jaHJvbWVcblx0XHRcdFx0fHwgYWdlbnQuZmlyZWZveCAmJiBhZ2VudC52ZXJzaW9uTnVtYmVyIDwgNDApKSB7XG5cdFx0XHR2YXIgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0JyksXG5cdFx0XHRcdGhlYWQgPSBkb2N1bWVudC5oZWFkIHx8IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdoZWFkJylbMF07XG5cdFx0XHRpZiAoYWdlbnQuZmlyZWZveClcblx0XHRcdFx0Y29kZSA9ICdcXG4nICsgY29kZTtcblx0XHRcdHNjcmlwdC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShcblx0XHRcdFx0J2RvY3VtZW50Ll9fcGFwZXJzY3JpcHRfXyA9IGZ1bmN0aW9uKCcgKyBwYXJhbXMgKyAnKSB7JyArXG5cdFx0XHRcdFx0Y29kZSArXG5cdFx0XHRcdCdcXG59J1xuXHRcdFx0KSk7XG5cdFx0XHRoZWFkLmFwcGVuZENoaWxkKHNjcmlwdCk7XG5cdFx0XHRmdW5jID0gZG9jdW1lbnQuX19wYXBlcnNjcmlwdF9fO1xuXHRcdFx0ZGVsZXRlIGRvY3VtZW50Ll9fcGFwZXJzY3JpcHRfXztcblx0XHRcdGhlYWQucmVtb3ZlQ2hpbGQoc2NyaXB0KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZnVuYyA9IEZ1bmN0aW9uKHBhcmFtcywgY29kZSk7XG5cdFx0fVxuXHRcdHZhciBleHBvcnRzID0gZnVuYyAmJiBmdW5jLmFwcGx5KHNjb3BlLCBhcmdzKTtcblx0XHR2YXIgb2JqID0gZXhwb3J0cyB8fCB7fTtcblx0XHRCYXNlLmVhY2godG9vbEhhbmRsZXJzLCBmdW5jdGlvbihrZXkpIHtcblx0XHRcdHZhciB2YWx1ZSA9IG9ialtrZXldO1xuXHRcdFx0aWYgKHZhbHVlKVxuXHRcdFx0XHR0b29sW2tleV0gPSB2YWx1ZTtcblx0XHR9KTtcblx0XHRpZiAodmlldykge1xuXHRcdFx0aWYgKG9iai5vblJlc2l6ZSlcblx0XHRcdFx0dmlldy5zZXRPblJlc2l6ZShvYmoub25SZXNpemUpO1xuXHRcdFx0dmlldy5lbWl0KCdyZXNpemUnLCB7XG5cdFx0XHRcdHNpemU6IHZpZXcuc2l6ZSxcblx0XHRcdFx0ZGVsdGE6IG5ldyBQb2ludCgpXG5cdFx0XHR9KTtcblx0XHRcdGlmIChvYmoub25GcmFtZSlcblx0XHRcdFx0dmlldy5zZXRPbkZyYW1lKG9iai5vbkZyYW1lKTtcblx0XHRcdHZpZXcucmVxdWVzdFVwZGF0ZSgpO1xuXHRcdH1cblx0XHRyZXR1cm4gZXhwb3J0cztcblx0fVxuXG5cdGZ1bmN0aW9uIGxvYWRTY3JpcHQoc2NyaXB0KSB7XG5cdFx0aWYgKC9edGV4dFxcLyg/OngtfClwYXBlcnNjcmlwdCQvLnRlc3Qoc2NyaXB0LnR5cGUpXG5cdFx0XHRcdCYmIFBhcGVyU2NvcGUuZ2V0QXR0cmlidXRlKHNjcmlwdCwgJ2lnbm9yZScpICE9PSAndHJ1ZScpIHtcblx0XHRcdHZhciBjYW52YXNJZCA9IFBhcGVyU2NvcGUuZ2V0QXR0cmlidXRlKHNjcmlwdCwgJ2NhbnZhcycpLFxuXHRcdFx0XHRjYW52YXMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChjYW52YXNJZCksXG5cdFx0XHRcdHNyYyA9IHNjcmlwdC5zcmMgfHwgc2NyaXB0LmdldEF0dHJpYnV0ZSgnZGF0YS1zcmMnKSxcblx0XHRcdFx0YXN5bmMgPSBQYXBlclNjb3BlLmhhc0F0dHJpYnV0ZShzY3JpcHQsICdhc3luYycpLFxuXHRcdFx0XHRzY29wZUF0dHJpYnV0ZSA9ICdkYXRhLXBhcGVyLXNjb3BlJztcblx0XHRcdGlmICghY2FudmFzKVxuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ1VuYWJsZSB0byBmaW5kIGNhbnZhcyB3aXRoIGlkIFwiJ1xuXHRcdFx0XHRcdFx0KyBjYW52YXNJZCArICdcIicpO1xuXHRcdFx0dmFyIHNjb3BlID0gUGFwZXJTY29wZS5nZXQoY2FudmFzLmdldEF0dHJpYnV0ZShzY29wZUF0dHJpYnV0ZSkpXG5cdFx0XHRcdFx0XHR8fCBuZXcgUGFwZXJTY29wZSgpLnNldHVwKGNhbnZhcyk7XG5cdFx0XHRjYW52YXMuc2V0QXR0cmlidXRlKHNjb3BlQXR0cmlidXRlLCBzY29wZS5faWQpO1xuXHRcdFx0aWYgKHNyYykge1xuXHRcdFx0XHRIdHRwLnJlcXVlc3Qoe1xuXHRcdFx0XHRcdHVybDogc3JjLFxuXHRcdFx0XHRcdGFzeW5jOiBhc3luYyxcblx0XHRcdFx0XHRtaW1lVHlwZTogJ3RleHQvcGxhaW4nLFxuXHRcdFx0XHRcdG9uTG9hZDogZnVuY3Rpb24oY29kZSkge1xuXHRcdFx0XHRcdFx0ZXhlY3V0ZShjb2RlLCBzY29wZSwgc3JjKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZXhlY3V0ZShzY3JpcHQuaW5uZXJIVE1MLCBzY29wZSwgc2NyaXB0LmJhc2VVUkkpO1xuXHRcdFx0fVxuXHRcdFx0c2NyaXB0LnNldEF0dHJpYnV0ZSgnZGF0YS1wYXBlci1pZ25vcmUnLCAndHJ1ZScpO1xuXHRcdFx0cmV0dXJuIHNjb3BlO1xuXHRcdH1cblx0fVxuXG5cdGZ1bmN0aW9uIGxvYWRBbGwoKSB7XG5cdFx0QmFzZS5lYWNoKGRvY3VtZW50ICYmIGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzY3JpcHQnKSxcblx0XHRcdFx0bG9hZFNjcmlwdCk7XG5cdH1cblxuXHRmdW5jdGlvbiBsb2FkKHNjcmlwdCkge1xuXHRcdHJldHVybiBzY3JpcHQgPyBsb2FkU2NyaXB0KHNjcmlwdCkgOiBsb2FkQWxsKCk7XG5cdH1cblxuXHRpZiAod2luZG93KSB7XG5cdFx0aWYgKGRvY3VtZW50LnJlYWR5U3RhdGUgPT09ICdjb21wbGV0ZScpIHtcblx0XHRcdHNldFRpbWVvdXQobG9hZEFsbCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdERvbUV2ZW50LmFkZCh3aW5kb3csIHsgbG9hZDogbG9hZEFsbCB9KTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4ge1xuXHRcdGNvbXBpbGU6IGNvbXBpbGUsXG5cdFx0ZXhlY3V0ZTogZXhlY3V0ZSxcblx0XHRsb2FkOiBsb2FkLFxuXHRcdHBhcnNlOiBwYXJzZSxcblx0XHRjYWxjdWxhdGVCaW5hcnk6IF9fJF9fLFxuXHRcdGNhbGN1bGF0ZVVuYXJ5OiAkX19cblx0fTtcblxufS5jYWxsKHRoaXMpO1xuXG52YXIgcGFwZXIgPSBuZXcgKFBhcGVyU2NvcGUuaW5qZWN0KEJhc2UuZXhwb3J0cywge1xuXHRCYXNlOiBCYXNlLFxuXHROdW1lcmljYWw6IE51bWVyaWNhbCxcblx0S2V5OiBLZXksXG5cdERvbUV2ZW50OiBEb21FdmVudCxcblx0RG9tRWxlbWVudDogRG9tRWxlbWVudCxcblx0ZG9jdW1lbnQ6IGRvY3VtZW50LFxuXHR3aW5kb3c6IHdpbmRvdyxcblx0U3ltYm9sOiBTeW1ib2xEZWZpbml0aW9uLFxuXHRQbGFjZWRTeW1ib2w6IFN5bWJvbEl0ZW1cbn0pKSgpO1xuXG5pZiAocGFwZXIuYWdlbnQubm9kZSkge1xuXHRyZXF1aXJlKCcuL25vZGUvZXh0ZW5kLmpzJykocGFwZXIpO1xufVxuXG5pZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG5cdGRlZmluZSgncGFwZXInLCBwYXBlcik7XG59IGVsc2UgaWYgKHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnICYmIG1vZHVsZSkge1xuXHRtb2R1bGUuZXhwb3J0cyA9IHBhcGVyO1xufVxuXG5yZXR1cm4gcGFwZXI7XG59LmNhbGwodGhpcywgdHlwZW9mIHNlbGYgPT09ICdvYmplY3QnID8gc2VsZiA6IG51bGwpO1xuIiwiLyohXG4gKiBqUXVlcnkgSmF2YVNjcmlwdCBMaWJyYXJ5IHYzLjMuMVxuICogaHR0cHM6Ly9qcXVlcnkuY29tL1xuICpcbiAqIEluY2x1ZGVzIFNpenpsZS5qc1xuICogaHR0cHM6Ly9zaXp6bGVqcy5jb20vXG4gKlxuICogQ29weXJpZ2h0IEpTIEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXG4gKiBodHRwczovL2pxdWVyeS5vcmcvbGljZW5zZVxuICpcbiAqIERhdGU6IDIwMTgtMDEtMjBUMTc6MjRaXG4gKi9cbiggZnVuY3Rpb24oIGdsb2JhbCwgZmFjdG9yeSApIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblxuXHRpZiAoIHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG1vZHVsZS5leHBvcnRzID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0Ly8gRm9yIENvbW1vbkpTIGFuZCBDb21tb25KUy1saWtlIGVudmlyb25tZW50cyB3aGVyZSBhIHByb3BlciBgd2luZG93YFxuXHRcdC8vIGlzIHByZXNlbnQsIGV4ZWN1dGUgdGhlIGZhY3RvcnkgYW5kIGdldCBqUXVlcnkuXG5cdFx0Ly8gRm9yIGVudmlyb25tZW50cyB0aGF0IGRvIG5vdCBoYXZlIGEgYHdpbmRvd2Agd2l0aCBhIGBkb2N1bWVudGBcblx0XHQvLyAoc3VjaCBhcyBOb2RlLmpzKSwgZXhwb3NlIGEgZmFjdG9yeSBhcyBtb2R1bGUuZXhwb3J0cy5cblx0XHQvLyBUaGlzIGFjY2VudHVhdGVzIHRoZSBuZWVkIGZvciB0aGUgY3JlYXRpb24gb2YgYSByZWFsIGB3aW5kb3dgLlxuXHRcdC8vIGUuZy4gdmFyIGpRdWVyeSA9IHJlcXVpcmUoXCJqcXVlcnlcIikod2luZG93KTtcblx0XHQvLyBTZWUgdGlja2V0ICMxNDU0OSBmb3IgbW9yZSBpbmZvLlxuXHRcdG1vZHVsZS5leHBvcnRzID0gZ2xvYmFsLmRvY3VtZW50ID9cblx0XHRcdGZhY3RvcnkoIGdsb2JhbCwgdHJ1ZSApIDpcblx0XHRcdGZ1bmN0aW9uKCB3ICkge1xuXHRcdFx0XHRpZiAoICF3LmRvY3VtZW50ICkge1xuXHRcdFx0XHRcdHRocm93IG5ldyBFcnJvciggXCJqUXVlcnkgcmVxdWlyZXMgYSB3aW5kb3cgd2l0aCBhIGRvY3VtZW50XCIgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gZmFjdG9yeSggdyApO1xuXHRcdFx0fTtcblx0fSBlbHNlIHtcblx0XHRmYWN0b3J5KCBnbG9iYWwgKTtcblx0fVxuXG4vLyBQYXNzIHRoaXMgaWYgd2luZG93IGlzIG5vdCBkZWZpbmVkIHlldFxufSApKCB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDogdGhpcywgZnVuY3Rpb24oIHdpbmRvdywgbm9HbG9iYWwgKSB7XG5cbi8vIEVkZ2UgPD0gMTIgLSAxMyssIEZpcmVmb3ggPD0xOCAtIDQ1KywgSUUgMTAgLSAxMSwgU2FmYXJpIDUuMSAtIDkrLCBpT1MgNiAtIDkuMVxuLy8gdGhyb3cgZXhjZXB0aW9ucyB3aGVuIG5vbi1zdHJpY3QgY29kZSAoZS5nLiwgQVNQLk5FVCA0LjUpIGFjY2Vzc2VzIHN0cmljdCBtb2RlXG4vLyBhcmd1bWVudHMuY2FsbGVlLmNhbGxlciAodHJhYy0xMzMzNSkuIEJ1dCBhcyBvZiBqUXVlcnkgMy4wICgyMDE2KSwgc3RyaWN0IG1vZGUgc2hvdWxkIGJlIGNvbW1vblxuLy8gZW5vdWdoIHRoYXQgYWxsIHN1Y2ggYXR0ZW1wdHMgYXJlIGd1YXJkZWQgaW4gYSB0cnkgYmxvY2suXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIGFyciA9IFtdO1xuXG52YXIgZG9jdW1lbnQgPSB3aW5kb3cuZG9jdW1lbnQ7XG5cbnZhciBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcblxudmFyIHNsaWNlID0gYXJyLnNsaWNlO1xuXG52YXIgY29uY2F0ID0gYXJyLmNvbmNhdDtcblxudmFyIHB1c2ggPSBhcnIucHVzaDtcblxudmFyIGluZGV4T2YgPSBhcnIuaW5kZXhPZjtcblxudmFyIGNsYXNzMnR5cGUgPSB7fTtcblxudmFyIHRvU3RyaW5nID0gY2xhc3MydHlwZS50b1N0cmluZztcblxudmFyIGhhc093biA9IGNsYXNzMnR5cGUuaGFzT3duUHJvcGVydHk7XG5cbnZhciBmblRvU3RyaW5nID0gaGFzT3duLnRvU3RyaW5nO1xuXG52YXIgT2JqZWN0RnVuY3Rpb25TdHJpbmcgPSBmblRvU3RyaW5nLmNhbGwoIE9iamVjdCApO1xuXG52YXIgc3VwcG9ydCA9IHt9O1xuXG52YXIgaXNGdW5jdGlvbiA9IGZ1bmN0aW9uIGlzRnVuY3Rpb24oIG9iaiApIHtcblxuICAgICAgLy8gU3VwcG9ydDogQ2hyb21lIDw9NTcsIEZpcmVmb3ggPD01MlxuICAgICAgLy8gSW4gc29tZSBicm93c2VycywgdHlwZW9mIHJldHVybnMgXCJmdW5jdGlvblwiIGZvciBIVE1MIDxvYmplY3Q+IGVsZW1lbnRzXG4gICAgICAvLyAoaS5lLiwgYHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcIm9iamVjdFwiICkgPT09IFwiZnVuY3Rpb25cImApLlxuICAgICAgLy8gV2UgZG9uJ3Qgd2FudCB0byBjbGFzc2lmeSAqYW55KiBET00gbm9kZSBhcyBhIGZ1bmN0aW9uLlxuICAgICAgcmV0dXJuIHR5cGVvZiBvYmogPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2Ygb2JqLm5vZGVUeXBlICE9PSBcIm51bWJlclwiO1xuICB9O1xuXG5cbnZhciBpc1dpbmRvdyA9IGZ1bmN0aW9uIGlzV2luZG93KCBvYmogKSB7XG5cdFx0cmV0dXJuIG9iaiAhPSBudWxsICYmIG9iaiA9PT0gb2JqLndpbmRvdztcblx0fTtcblxuXG5cblxuXHR2YXIgcHJlc2VydmVkU2NyaXB0QXR0cmlidXRlcyA9IHtcblx0XHR0eXBlOiB0cnVlLFxuXHRcdHNyYzogdHJ1ZSxcblx0XHRub01vZHVsZTogdHJ1ZVxuXHR9O1xuXG5cdGZ1bmN0aW9uIERPTUV2YWwoIGNvZGUsIGRvYywgbm9kZSApIHtcblx0XHRkb2MgPSBkb2MgfHwgZG9jdW1lbnQ7XG5cblx0XHR2YXIgaSxcblx0XHRcdHNjcmlwdCA9IGRvYy5jcmVhdGVFbGVtZW50KCBcInNjcmlwdFwiICk7XG5cblx0XHRzY3JpcHQudGV4dCA9IGNvZGU7XG5cdFx0aWYgKCBub2RlICkge1xuXHRcdFx0Zm9yICggaSBpbiBwcmVzZXJ2ZWRTY3JpcHRBdHRyaWJ1dGVzICkge1xuXHRcdFx0XHRpZiAoIG5vZGVbIGkgXSApIHtcblx0XHRcdFx0XHRzY3JpcHRbIGkgXSA9IG5vZGVbIGkgXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRkb2MuaGVhZC5hcHBlbmRDaGlsZCggc2NyaXB0ICkucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggc2NyaXB0ICk7XG5cdH1cblxuXG5mdW5jdGlvbiB0b1R5cGUoIG9iaiApIHtcblx0aWYgKCBvYmogPT0gbnVsbCApIHtcblx0XHRyZXR1cm4gb2JqICsgXCJcIjtcblx0fVxuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD0yLjMgb25seSAoZnVuY3Rpb25pc2ggUmVnRXhwKVxuXHRyZXR1cm4gdHlwZW9mIG9iaiA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2Ygb2JqID09PSBcImZ1bmN0aW9uXCIgP1xuXHRcdGNsYXNzMnR5cGVbIHRvU3RyaW5nLmNhbGwoIG9iaiApIF0gfHwgXCJvYmplY3RcIiA6XG5cdFx0dHlwZW9mIG9iajtcbn1cbi8qIGdsb2JhbCBTeW1ib2wgKi9cbi8vIERlZmluaW5nIHRoaXMgZ2xvYmFsIGluIC5lc2xpbnRyYy5qc29uIHdvdWxkIGNyZWF0ZSBhIGRhbmdlciBvZiB1c2luZyB0aGUgZ2xvYmFsXG4vLyB1bmd1YXJkZWQgaW4gYW5vdGhlciBwbGFjZSwgaXQgc2VlbXMgc2FmZXIgdG8gZGVmaW5lIGdsb2JhbCBvbmx5IGZvciB0aGlzIG1vZHVsZVxuXG5cblxudmFyXG5cdHZlcnNpb24gPSBcIjMuMy4xXCIsXG5cblx0Ly8gRGVmaW5lIGEgbG9jYWwgY29weSBvZiBqUXVlcnlcblx0alF1ZXJ5ID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0ICkge1xuXG5cdFx0Ly8gVGhlIGpRdWVyeSBvYmplY3QgaXMgYWN0dWFsbHkganVzdCB0aGUgaW5pdCBjb25zdHJ1Y3RvciAnZW5oYW5jZWQnXG5cdFx0Ly8gTmVlZCBpbml0IGlmIGpRdWVyeSBpcyBjYWxsZWQgKGp1c3QgYWxsb3cgZXJyb3IgdG8gYmUgdGhyb3duIGlmIG5vdCBpbmNsdWRlZClcblx0XHRyZXR1cm4gbmV3IGpRdWVyeS5mbi5pbml0KCBzZWxlY3RvciwgY29udGV4dCApO1xuXHR9LFxuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seVxuXHQvLyBNYWtlIHN1cmUgd2UgdHJpbSBCT00gYW5kIE5CU1Bcblx0cnRyaW0gPSAvXltcXHNcXHVGRUZGXFx4QTBdK3xbXFxzXFx1RkVGRlxceEEwXSskL2c7XG5cbmpRdWVyeS5mbiA9IGpRdWVyeS5wcm90b3R5cGUgPSB7XG5cblx0Ly8gVGhlIGN1cnJlbnQgdmVyc2lvbiBvZiBqUXVlcnkgYmVpbmcgdXNlZFxuXHRqcXVlcnk6IHZlcnNpb24sXG5cblx0Y29uc3RydWN0b3I6IGpRdWVyeSxcblxuXHQvLyBUaGUgZGVmYXVsdCBsZW5ndGggb2YgYSBqUXVlcnkgb2JqZWN0IGlzIDBcblx0bGVuZ3RoOiAwLFxuXG5cdHRvQXJyYXk6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzbGljZS5jYWxsKCB0aGlzICk7XG5cdH0sXG5cblx0Ly8gR2V0IHRoZSBOdGggZWxlbWVudCBpbiB0aGUgbWF0Y2hlZCBlbGVtZW50IHNldCBPUlxuXHQvLyBHZXQgdGhlIHdob2xlIG1hdGNoZWQgZWxlbWVudCBzZXQgYXMgYSBjbGVhbiBhcnJheVxuXHRnZXQ6IGZ1bmN0aW9uKCBudW0gKSB7XG5cblx0XHQvLyBSZXR1cm4gYWxsIHRoZSBlbGVtZW50cyBpbiBhIGNsZWFuIGFycmF5XG5cdFx0aWYgKCBudW0gPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiBzbGljZS5jYWxsKCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0Ly8gUmV0dXJuIGp1c3QgdGhlIG9uZSBlbGVtZW50IGZyb20gdGhlIHNldFxuXHRcdHJldHVybiBudW0gPCAwID8gdGhpc1sgbnVtICsgdGhpcy5sZW5ndGggXSA6IHRoaXNbIG51bSBdO1xuXHR9LFxuXG5cdC8vIFRha2UgYW4gYXJyYXkgb2YgZWxlbWVudHMgYW5kIHB1c2ggaXQgb250byB0aGUgc3RhY2tcblx0Ly8gKHJldHVybmluZyB0aGUgbmV3IG1hdGNoZWQgZWxlbWVudCBzZXQpXG5cdHB1c2hTdGFjazogZnVuY3Rpb24oIGVsZW1zICkge1xuXG5cdFx0Ly8gQnVpbGQgYSBuZXcgalF1ZXJ5IG1hdGNoZWQgZWxlbWVudCBzZXRcblx0XHR2YXIgcmV0ID0galF1ZXJ5Lm1lcmdlKCB0aGlzLmNvbnN0cnVjdG9yKCksIGVsZW1zICk7XG5cblx0XHQvLyBBZGQgdGhlIG9sZCBvYmplY3Qgb250byB0aGUgc3RhY2sgKGFzIGEgcmVmZXJlbmNlKVxuXHRcdHJldC5wcmV2T2JqZWN0ID0gdGhpcztcblxuXHRcdC8vIFJldHVybiB0aGUgbmV3bHktZm9ybWVkIGVsZW1lbnQgc2V0XG5cdFx0cmV0dXJuIHJldDtcblx0fSxcblxuXHQvLyBFeGVjdXRlIGEgY2FsbGJhY2sgZm9yIGV2ZXJ5IGVsZW1lbnQgaW4gdGhlIG1hdGNoZWQgc2V0LlxuXHRlYWNoOiBmdW5jdGlvbiggY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5lYWNoKCB0aGlzLCBjYWxsYmFjayApO1xuXHR9LFxuXG5cdG1hcDogZnVuY3Rpb24oIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggalF1ZXJ5Lm1hcCggdGhpcywgZnVuY3Rpb24oIGVsZW0sIGkgKSB7XG5cdFx0XHRyZXR1cm4gY2FsbGJhY2suY2FsbCggZWxlbSwgaSwgZWxlbSApO1xuXHRcdH0gKSApO1xuXHR9LFxuXG5cdHNsaWNlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHNsaWNlLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKSApO1xuXHR9LFxuXG5cdGZpcnN0OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5lcSggMCApO1xuXHR9LFxuXG5cdGxhc3Q6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmVxKCAtMSApO1xuXHR9LFxuXG5cdGVxOiBmdW5jdGlvbiggaSApIHtcblx0XHR2YXIgbGVuID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRqID0gK2kgKyAoIGkgPCAwID8gbGVuIDogMCApO1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggaiA+PSAwICYmIGogPCBsZW4gPyBbIHRoaXNbIGogXSBdIDogW10gKTtcblx0fSxcblxuXHRlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnByZXZPYmplY3QgfHwgdGhpcy5jb25zdHJ1Y3RvcigpO1xuXHR9LFxuXG5cdC8vIEZvciBpbnRlcm5hbCB1c2Ugb25seS5cblx0Ly8gQmVoYXZlcyBsaWtlIGFuIEFycmF5J3MgbWV0aG9kLCBub3QgbGlrZSBhIGpRdWVyeSBtZXRob2QuXG5cdHB1c2g6IHB1c2gsXG5cdHNvcnQ6IGFyci5zb3J0LFxuXHRzcGxpY2U6IGFyci5zcGxpY2Vcbn07XG5cbmpRdWVyeS5leHRlbmQgPSBqUXVlcnkuZm4uZXh0ZW5kID0gZnVuY3Rpb24oKSB7XG5cdHZhciBvcHRpb25zLCBuYW1lLCBzcmMsIGNvcHksIGNvcHlJc0FycmF5LCBjbG9uZSxcblx0XHR0YXJnZXQgPSBhcmd1bWVudHNbIDAgXSB8fCB7fSxcblx0XHRpID0gMSxcblx0XHRsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoLFxuXHRcdGRlZXAgPSBmYWxzZTtcblxuXHQvLyBIYW5kbGUgYSBkZWVwIGNvcHkgc2l0dWF0aW9uXG5cdGlmICggdHlwZW9mIHRhcmdldCA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0ZGVlcCA9IHRhcmdldDtcblxuXHRcdC8vIFNraXAgdGhlIGJvb2xlYW4gYW5kIHRoZSB0YXJnZXRcblx0XHR0YXJnZXQgPSBhcmd1bWVudHNbIGkgXSB8fCB7fTtcblx0XHRpKys7XG5cdH1cblxuXHQvLyBIYW5kbGUgY2FzZSB3aGVuIHRhcmdldCBpcyBhIHN0cmluZyBvciBzb21ldGhpbmcgKHBvc3NpYmxlIGluIGRlZXAgY29weSlcblx0aWYgKCB0eXBlb2YgdGFyZ2V0ICE9PSBcIm9iamVjdFwiICYmICFpc0Z1bmN0aW9uKCB0YXJnZXQgKSApIHtcblx0XHR0YXJnZXQgPSB7fTtcblx0fVxuXG5cdC8vIEV4dGVuZCBqUXVlcnkgaXRzZWxmIGlmIG9ubHkgb25lIGFyZ3VtZW50IGlzIHBhc3NlZFxuXHRpZiAoIGkgPT09IGxlbmd0aCApIHtcblx0XHR0YXJnZXQgPSB0aGlzO1xuXHRcdGktLTtcblx0fVxuXG5cdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXG5cdFx0Ly8gT25seSBkZWFsIHdpdGggbm9uLW51bGwvdW5kZWZpbmVkIHZhbHVlc1xuXHRcdGlmICggKCBvcHRpb25zID0gYXJndW1lbnRzWyBpIF0gKSAhPSBudWxsICkge1xuXG5cdFx0XHQvLyBFeHRlbmQgdGhlIGJhc2Ugb2JqZWN0XG5cdFx0XHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0XHRcdHNyYyA9IHRhcmdldFsgbmFtZSBdO1xuXHRcdFx0XHRjb3B5ID0gb3B0aW9uc1sgbmFtZSBdO1xuXG5cdFx0XHRcdC8vIFByZXZlbnQgbmV2ZXItZW5kaW5nIGxvb3Bcblx0XHRcdFx0aWYgKCB0YXJnZXQgPT09IGNvcHkgKSB7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZWN1cnNlIGlmIHdlJ3JlIG1lcmdpbmcgcGxhaW4gb2JqZWN0cyBvciBhcnJheXNcblx0XHRcdFx0aWYgKCBkZWVwICYmIGNvcHkgJiYgKCBqUXVlcnkuaXNQbGFpbk9iamVjdCggY29weSApIHx8XG5cdFx0XHRcdFx0KCBjb3B5SXNBcnJheSA9IEFycmF5LmlzQXJyYXkoIGNvcHkgKSApICkgKSB7XG5cblx0XHRcdFx0XHRpZiAoIGNvcHlJc0FycmF5ICkge1xuXHRcdFx0XHRcdFx0Y29weUlzQXJyYXkgPSBmYWxzZTtcblx0XHRcdFx0XHRcdGNsb25lID0gc3JjICYmIEFycmF5LmlzQXJyYXkoIHNyYyApID8gc3JjIDogW107XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0Y2xvbmUgPSBzcmMgJiYgalF1ZXJ5LmlzUGxhaW5PYmplY3QoIHNyYyApID8gc3JjIDoge307XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gTmV2ZXIgbW92ZSBvcmlnaW5hbCBvYmplY3RzLCBjbG9uZSB0aGVtXG5cdFx0XHRcdFx0dGFyZ2V0WyBuYW1lIF0gPSBqUXVlcnkuZXh0ZW5kKCBkZWVwLCBjbG9uZSwgY29weSApO1xuXG5cdFx0XHRcdC8vIERvbid0IGJyaW5nIGluIHVuZGVmaW5lZCB2YWx1ZXNcblx0XHRcdFx0fSBlbHNlIGlmICggY29weSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHRhcmdldFsgbmFtZSBdID0gY29weTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgbW9kaWZpZWQgb2JqZWN0XG5cdHJldHVybiB0YXJnZXQ7XG59O1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gVW5pcXVlIGZvciBlYWNoIGNvcHkgb2YgalF1ZXJ5IG9uIHRoZSBwYWdlXG5cdGV4cGFuZG86IFwialF1ZXJ5XCIgKyAoIHZlcnNpb24gKyBNYXRoLnJhbmRvbSgpICkucmVwbGFjZSggL1xcRC9nLCBcIlwiICksXG5cblx0Ly8gQXNzdW1lIGpRdWVyeSBpcyByZWFkeSB3aXRob3V0IHRoZSByZWFkeSBtb2R1bGVcblx0aXNSZWFkeTogdHJ1ZSxcblxuXHRlcnJvcjogZnVuY3Rpb24oIG1zZyApIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoIG1zZyApO1xuXHR9LFxuXG5cdG5vb3A6IGZ1bmN0aW9uKCkge30sXG5cblx0aXNQbGFpbk9iamVjdDogZnVuY3Rpb24oIG9iaiApIHtcblx0XHR2YXIgcHJvdG8sIEN0b3I7XG5cblx0XHQvLyBEZXRlY3Qgb2J2aW91cyBuZWdhdGl2ZXNcblx0XHQvLyBVc2UgdG9TdHJpbmcgaW5zdGVhZCBvZiBqUXVlcnkudHlwZSB0byBjYXRjaCBob3N0IG9iamVjdHNcblx0XHRpZiAoICFvYmogfHwgdG9TdHJpbmcuY2FsbCggb2JqICkgIT09IFwiW29iamVjdCBPYmplY3RdXCIgKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cHJvdG8gPSBnZXRQcm90byggb2JqICk7XG5cblx0XHQvLyBPYmplY3RzIHdpdGggbm8gcHJvdG90eXBlIChlLmcuLCBgT2JqZWN0LmNyZWF0ZSggbnVsbCApYCkgYXJlIHBsYWluXG5cdFx0aWYgKCAhcHJvdG8gKSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cblx0XHQvLyBPYmplY3RzIHdpdGggcHJvdG90eXBlIGFyZSBwbGFpbiBpZmYgdGhleSB3ZXJlIGNvbnN0cnVjdGVkIGJ5IGEgZ2xvYmFsIE9iamVjdCBmdW5jdGlvblxuXHRcdEN0b3IgPSBoYXNPd24uY2FsbCggcHJvdG8sIFwiY29uc3RydWN0b3JcIiApICYmIHByb3RvLmNvbnN0cnVjdG9yO1xuXHRcdHJldHVybiB0eXBlb2YgQ3RvciA9PT0gXCJmdW5jdGlvblwiICYmIGZuVG9TdHJpbmcuY2FsbCggQ3RvciApID09PSBPYmplY3RGdW5jdGlvblN0cmluZztcblx0fSxcblxuXHRpc0VtcHR5T2JqZWN0OiBmdW5jdGlvbiggb2JqICkge1xuXG5cdFx0LyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cblx0XHQvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2VzbGludC9lc2xpbnQvaXNzdWVzLzYxMjVcblx0XHR2YXIgbmFtZTtcblxuXHRcdGZvciAoIG5hbWUgaW4gb2JqICkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSxcblxuXHQvLyBFdmFsdWF0ZXMgYSBzY3JpcHQgaW4gYSBnbG9iYWwgY29udGV4dFxuXHRnbG9iYWxFdmFsOiBmdW5jdGlvbiggY29kZSApIHtcblx0XHRET01FdmFsKCBjb2RlICk7XG5cdH0sXG5cblx0ZWFjaDogZnVuY3Rpb24oIG9iaiwgY2FsbGJhY2sgKSB7XG5cdFx0dmFyIGxlbmd0aCwgaSA9IDA7XG5cblx0XHRpZiAoIGlzQXJyYXlMaWtlKCBvYmogKSApIHtcblx0XHRcdGxlbmd0aCA9IG9iai5sZW5ndGg7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjay5jYWxsKCBvYmpbIGkgXSwgaSwgb2JqWyBpIF0gKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0Zm9yICggaSBpbiBvYmogKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2suY2FsbCggb2JqWyBpIF0sIGksIG9ialsgaSBdICkgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG9iajtcblx0fSxcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHlcblx0dHJpbTogZnVuY3Rpb24oIHRleHQgKSB7XG5cdFx0cmV0dXJuIHRleHQgPT0gbnVsbCA/XG5cdFx0XHRcIlwiIDpcblx0XHRcdCggdGV4dCArIFwiXCIgKS5yZXBsYWNlKCBydHJpbSwgXCJcIiApO1xuXHR9LFxuXG5cdC8vIHJlc3VsdHMgaXMgZm9yIGludGVybmFsIHVzYWdlIG9ubHlcblx0bWFrZUFycmF5OiBmdW5jdGlvbiggYXJyLCByZXN1bHRzICkge1xuXHRcdHZhciByZXQgPSByZXN1bHRzIHx8IFtdO1xuXG5cdFx0aWYgKCBhcnIgIT0gbnVsbCApIHtcblx0XHRcdGlmICggaXNBcnJheUxpa2UoIE9iamVjdCggYXJyICkgKSApIHtcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCByZXQsXG5cdFx0XHRcdFx0dHlwZW9mIGFyciA9PT0gXCJzdHJpbmdcIiA/XG5cdFx0XHRcdFx0WyBhcnIgXSA6IGFyclxuXHRcdFx0XHQpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cHVzaC5jYWxsKCByZXQsIGFyciApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiByZXQ7XG5cdH0sXG5cblx0aW5BcnJheTogZnVuY3Rpb24oIGVsZW0sIGFyciwgaSApIHtcblx0XHRyZXR1cm4gYXJyID09IG51bGwgPyAtMSA6IGluZGV4T2YuY2FsbCggYXJyLCBlbGVtLCBpICk7XG5cdH0sXG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0bWVyZ2U6IGZ1bmN0aW9uKCBmaXJzdCwgc2Vjb25kICkge1xuXHRcdHZhciBsZW4gPSArc2Vjb25kLmxlbmd0aCxcblx0XHRcdGogPSAwLFxuXHRcdFx0aSA9IGZpcnN0Lmxlbmd0aDtcblxuXHRcdGZvciAoIDsgaiA8IGxlbjsgaisrICkge1xuXHRcdFx0Zmlyc3RbIGkrKyBdID0gc2Vjb25kWyBqIF07XG5cdFx0fVxuXG5cdFx0Zmlyc3QubGVuZ3RoID0gaTtcblxuXHRcdHJldHVybiBmaXJzdDtcblx0fSxcblxuXHRncmVwOiBmdW5jdGlvbiggZWxlbXMsIGNhbGxiYWNrLCBpbnZlcnQgKSB7XG5cdFx0dmFyIGNhbGxiYWNrSW52ZXJzZSxcblx0XHRcdG1hdGNoZXMgPSBbXSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0bGVuZ3RoID0gZWxlbXMubGVuZ3RoLFxuXHRcdFx0Y2FsbGJhY2tFeHBlY3QgPSAhaW52ZXJ0O1xuXG5cdFx0Ly8gR28gdGhyb3VnaCB0aGUgYXJyYXksIG9ubHkgc2F2aW5nIHRoZSBpdGVtc1xuXHRcdC8vIHRoYXQgcGFzcyB0aGUgdmFsaWRhdG9yIGZ1bmN0aW9uXG5cdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRjYWxsYmFja0ludmVyc2UgPSAhY2FsbGJhY2soIGVsZW1zWyBpIF0sIGkgKTtcblx0XHRcdGlmICggY2FsbGJhY2tJbnZlcnNlICE9PSBjYWxsYmFja0V4cGVjdCApIHtcblx0XHRcdFx0bWF0Y2hlcy5wdXNoKCBlbGVtc1sgaSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG1hdGNoZXM7XG5cdH0sXG5cblx0Ly8gYXJnIGlzIGZvciBpbnRlcm5hbCB1c2FnZSBvbmx5XG5cdG1hcDogZnVuY3Rpb24oIGVsZW1zLCBjYWxsYmFjaywgYXJnICkge1xuXHRcdHZhciBsZW5ndGgsIHZhbHVlLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRyZXQgPSBbXTtcblxuXHRcdC8vIEdvIHRocm91Z2ggdGhlIGFycmF5LCB0cmFuc2xhdGluZyBlYWNoIG9mIHRoZSBpdGVtcyB0byB0aGVpciBuZXcgdmFsdWVzXG5cdFx0aWYgKCBpc0FycmF5TGlrZSggZWxlbXMgKSApIHtcblx0XHRcdGxlbmd0aCA9IGVsZW1zLmxlbmd0aDtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0XHR2YWx1ZSA9IGNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpLCBhcmcgKTtcblxuXHRcdFx0XHRpZiAoIHZhbHVlICE9IG51bGwgKSB7XG5cdFx0XHRcdFx0cmV0LnB1c2goIHZhbHVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEdvIHRocm91Z2ggZXZlcnkga2V5IG9uIHRoZSBvYmplY3QsXG5cdFx0fSBlbHNlIHtcblx0XHRcdGZvciAoIGkgaW4gZWxlbXMgKSB7XG5cdFx0XHRcdHZhbHVlID0gY2FsbGJhY2soIGVsZW1zWyBpIF0sIGksIGFyZyApO1xuXG5cdFx0XHRcdGlmICggdmFsdWUgIT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXQucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEZsYXR0ZW4gYW55IG5lc3RlZCBhcnJheXNcblx0XHRyZXR1cm4gY29uY2F0LmFwcGx5KCBbXSwgcmV0ICk7XG5cdH0sXG5cblx0Ly8gQSBnbG9iYWwgR1VJRCBjb3VudGVyIGZvciBvYmplY3RzXG5cdGd1aWQ6IDEsXG5cblx0Ly8galF1ZXJ5LnN1cHBvcnQgaXMgbm90IHVzZWQgaW4gQ29yZSBidXQgb3RoZXIgcHJvamVjdHMgYXR0YWNoIHRoZWlyXG5cdC8vIHByb3BlcnRpZXMgdG8gaXQgc28gaXQgbmVlZHMgdG8gZXhpc3QuXG5cdHN1cHBvcnQ6IHN1cHBvcnRcbn0gKTtcblxuaWYgKCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgKSB7XG5cdGpRdWVyeS5mblsgU3ltYm9sLml0ZXJhdG9yIF0gPSBhcnJbIFN5bWJvbC5pdGVyYXRvciBdO1xufVxuXG4vLyBQb3B1bGF0ZSB0aGUgY2xhc3MydHlwZSBtYXBcbmpRdWVyeS5lYWNoKCBcIkJvb2xlYW4gTnVtYmVyIFN0cmluZyBGdW5jdGlvbiBBcnJheSBEYXRlIFJlZ0V4cCBPYmplY3QgRXJyb3IgU3ltYm9sXCIuc3BsaXQoIFwiIFwiICksXG5mdW5jdGlvbiggaSwgbmFtZSApIHtcblx0Y2xhc3MydHlwZVsgXCJbb2JqZWN0IFwiICsgbmFtZSArIFwiXVwiIF0gPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG59ICk7XG5cbmZ1bmN0aW9uIGlzQXJyYXlMaWtlKCBvYmogKSB7XG5cblx0Ly8gU3VwcG9ydDogcmVhbCBpT1MgOC4yIG9ubHkgKG5vdCByZXByb2R1Y2libGUgaW4gc2ltdWxhdG9yKVxuXHQvLyBgaW5gIGNoZWNrIHVzZWQgdG8gcHJldmVudCBKSVQgZXJyb3IgKGdoLTIxNDUpXG5cdC8vIGhhc093biBpc24ndCB1c2VkIGhlcmUgZHVlIHRvIGZhbHNlIG5lZ2F0aXZlc1xuXHQvLyByZWdhcmRpbmcgTm9kZWxpc3QgbGVuZ3RoIGluIElFXG5cdHZhciBsZW5ndGggPSAhIW9iaiAmJiBcImxlbmd0aFwiIGluIG9iaiAmJiBvYmoubGVuZ3RoLFxuXHRcdHR5cGUgPSB0b1R5cGUoIG9iaiApO1xuXG5cdGlmICggaXNGdW5jdGlvbiggb2JqICkgfHwgaXNXaW5kb3coIG9iaiApICkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdHJldHVybiB0eXBlID09PSBcImFycmF5XCIgfHwgbGVuZ3RoID09PSAwIHx8XG5cdFx0dHlwZW9mIGxlbmd0aCA9PT0gXCJudW1iZXJcIiAmJiBsZW5ndGggPiAwICYmICggbGVuZ3RoIC0gMSApIGluIG9iajtcbn1cbnZhciBTaXp6bGUgPVxuLyohXG4gKiBTaXp6bGUgQ1NTIFNlbGVjdG9yIEVuZ2luZSB2Mi4zLjNcbiAqIGh0dHBzOi8vc2l6emxlanMuY29tL1xuICpcbiAqIENvcHlyaWdodCBqUXVlcnkgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcbiAqIGh0dHA6Ly9qcXVlcnkub3JnL2xpY2Vuc2VcbiAqXG4gKiBEYXRlOiAyMDE2LTA4LTA4XG4gKi9cbihmdW5jdGlvbiggd2luZG93ICkge1xuXG52YXIgaSxcblx0c3VwcG9ydCxcblx0RXhwcixcblx0Z2V0VGV4dCxcblx0aXNYTUwsXG5cdHRva2VuaXplLFxuXHRjb21waWxlLFxuXHRzZWxlY3QsXG5cdG91dGVybW9zdENvbnRleHQsXG5cdHNvcnRJbnB1dCxcblx0aGFzRHVwbGljYXRlLFxuXG5cdC8vIExvY2FsIGRvY3VtZW50IHZhcnNcblx0c2V0RG9jdW1lbnQsXG5cdGRvY3VtZW50LFxuXHRkb2NFbGVtLFxuXHRkb2N1bWVudElzSFRNTCxcblx0cmJ1Z2d5UVNBLFxuXHRyYnVnZ3lNYXRjaGVzLFxuXHRtYXRjaGVzLFxuXHRjb250YWlucyxcblxuXHQvLyBJbnN0YW5jZS1zcGVjaWZpYyBkYXRhXG5cdGV4cGFuZG8gPSBcInNpenpsZVwiICsgMSAqIG5ldyBEYXRlKCksXG5cdHByZWZlcnJlZERvYyA9IHdpbmRvdy5kb2N1bWVudCxcblx0ZGlycnVucyA9IDAsXG5cdGRvbmUgPSAwLFxuXHRjbGFzc0NhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0dG9rZW5DYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdGNvbXBpbGVyQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHRzb3J0T3JkZXIgPSBmdW5jdGlvbiggYSwgYiApIHtcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdH1cblx0XHRyZXR1cm4gMDtcblx0fSxcblxuXHQvLyBJbnN0YW5jZSBtZXRob2RzXG5cdGhhc093biA9ICh7fSkuaGFzT3duUHJvcGVydHksXG5cdGFyciA9IFtdLFxuXHRwb3AgPSBhcnIucG9wLFxuXHRwdXNoX25hdGl2ZSA9IGFyci5wdXNoLFxuXHRwdXNoID0gYXJyLnB1c2gsXG5cdHNsaWNlID0gYXJyLnNsaWNlLFxuXHQvLyBVc2UgYSBzdHJpcHBlZC1kb3duIGluZGV4T2YgYXMgaXQncyBmYXN0ZXIgdGhhbiBuYXRpdmVcblx0Ly8gaHR0cHM6Ly9qc3BlcmYuY29tL3Rob3ItaW5kZXhvZi12cy1mb3IvNVxuXHRpbmRleE9mID0gZnVuY3Rpb24oIGxpc3QsIGVsZW0gKSB7XG5cdFx0dmFyIGkgPSAwLFxuXHRcdFx0bGVuID0gbGlzdC5sZW5ndGg7XG5cdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRpZiAoIGxpc3RbaV0gPT09IGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gLTE7XG5cdH0sXG5cblx0Ym9vbGVhbnMgPSBcImNoZWNrZWR8c2VsZWN0ZWR8YXN5bmN8YXV0b2ZvY3VzfGF1dG9wbGF5fGNvbnRyb2xzfGRlZmVyfGRpc2FibGVkfGhpZGRlbnxpc21hcHxsb29wfG11bHRpcGxlfG9wZW58cmVhZG9ubHl8cmVxdWlyZWR8c2NvcGVkXCIsXG5cblx0Ly8gUmVndWxhciBleHByZXNzaW9uc1xuXG5cdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL2NzczMtc2VsZWN0b3JzLyN3aGl0ZXNwYWNlXG5cdHdoaXRlc3BhY2UgPSBcIltcXFxceDIwXFxcXHRcXFxcclxcXFxuXFxcXGZdXCIsXG5cblx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvQ1NTMjEvc3luZGF0YS5odG1sI3ZhbHVlLWRlZi1pZGVudGlmaWVyXG5cdGlkZW50aWZpZXIgPSBcIig/OlxcXFxcXFxcLnxbXFxcXHctXXxbXlxcMC1cXFxceGEwXSkrXCIsXG5cblx0Ly8gQXR0cmlidXRlIHNlbGVjdG9yczogaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNhdHRyaWJ1dGUtc2VsZWN0b3JzXG5cdGF0dHJpYnV0ZXMgPSBcIlxcXFxbXCIgKyB3aGl0ZXNwYWNlICsgXCIqKFwiICsgaWRlbnRpZmllciArIFwiKSg/OlwiICsgd2hpdGVzcGFjZSArXG5cdFx0Ly8gT3BlcmF0b3IgKGNhcHR1cmUgMilcblx0XHRcIiooWypeJHwhfl0/PSlcIiArIHdoaXRlc3BhY2UgK1xuXHRcdC8vIFwiQXR0cmlidXRlIHZhbHVlcyBtdXN0IGJlIENTUyBpZGVudGlmaWVycyBbY2FwdHVyZSA1XSBvciBzdHJpbmdzIFtjYXB0dXJlIDMgb3IgY2FwdHVyZSA0XVwiXG5cdFx0XCIqKD86JygoPzpcXFxcXFxcXC58W15cXFxcXFxcXCddKSopJ3xcXFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcXFxcIl0pKilcXFwifChcIiArIGlkZW50aWZpZXIgKyBcIikpfClcIiArIHdoaXRlc3BhY2UgK1xuXHRcdFwiKlxcXFxdXCIsXG5cblx0cHNldWRvcyA9IFwiOihcIiArIGlkZW50aWZpZXIgKyBcIikoPzpcXFxcKChcIiArXG5cdFx0Ly8gVG8gcmVkdWNlIHRoZSBudW1iZXIgb2Ygc2VsZWN0b3JzIG5lZWRpbmcgdG9rZW5pemUgaW4gdGhlIHByZUZpbHRlciwgcHJlZmVyIGFyZ3VtZW50czpcblx0XHQvLyAxLiBxdW90ZWQgKGNhcHR1cmUgMzsgY2FwdHVyZSA0IG9yIGNhcHR1cmUgNSlcblx0XHRcIignKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcJ10pKiknfFxcXCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFxcXFwiXSkqKVxcXCIpfFwiICtcblx0XHQvLyAyLiBzaW1wbGUgKGNhcHR1cmUgNilcblx0XHRcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXCgpW1xcXFxdXXxcIiArIGF0dHJpYnV0ZXMgKyBcIikqKXxcIiArXG5cdFx0Ly8gMy4gYW55dGhpbmcgZWxzZSAoY2FwdHVyZSAyKVxuXHRcdFwiLipcIiArXG5cdFx0XCIpXFxcXCl8KVwiLFxuXG5cdC8vIExlYWRpbmcgYW5kIG5vbi1lc2NhcGVkIHRyYWlsaW5nIHdoaXRlc3BhY2UsIGNhcHR1cmluZyBzb21lIG5vbi13aGl0ZXNwYWNlIGNoYXJhY3RlcnMgcHJlY2VkaW5nIHRoZSBsYXR0ZXJcblx0cndoaXRlc3BhY2UgPSBuZXcgUmVnRXhwKCB3aGl0ZXNwYWNlICsgXCIrXCIsIFwiZ1wiICksXG5cdHJ0cmltID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIrfCgoPzpefFteXFxcXFxcXFxdKSg/OlxcXFxcXFxcLikqKVwiICsgd2hpdGVzcGFjZSArIFwiKyRcIiwgXCJnXCIgKSxcblxuXHRyY29tbWEgPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIiosXCIgKyB3aGl0ZXNwYWNlICsgXCIqXCIgKSxcblx0cmNvbWJpbmF0b3JzID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqKFs+K35dfFwiICsgd2hpdGVzcGFjZSArIFwiKVwiICsgd2hpdGVzcGFjZSArIFwiKlwiICksXG5cblx0cmF0dHJpYnV0ZVF1b3RlcyA9IG5ldyBSZWdFeHAoIFwiPVwiICsgd2hpdGVzcGFjZSArIFwiKihbXlxcXFxdJ1xcXCJdKj8pXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXF1cIiwgXCJnXCIgKSxcblxuXHRycHNldWRvID0gbmV3IFJlZ0V4cCggcHNldWRvcyApLFxuXHRyaWRlbnRpZmllciA9IG5ldyBSZWdFeHAoIFwiXlwiICsgaWRlbnRpZmllciArIFwiJFwiICksXG5cblx0bWF0Y2hFeHByID0ge1xuXHRcdFwiSURcIjogbmV3IFJlZ0V4cCggXCJeIyhcIiArIGlkZW50aWZpZXIgKyBcIilcIiApLFxuXHRcdFwiQ0xBU1NcIjogbmV3IFJlZ0V4cCggXCJeXFxcXC4oXCIgKyBpZGVudGlmaWVyICsgXCIpXCIgKSxcblx0XHRcIlRBR1wiOiBuZXcgUmVnRXhwKCBcIl4oXCIgKyBpZGVudGlmaWVyICsgXCJ8WypdKVwiICksXG5cdFx0XCJBVFRSXCI6IG5ldyBSZWdFeHAoIFwiXlwiICsgYXR0cmlidXRlcyApLFxuXHRcdFwiUFNFVURPXCI6IG5ldyBSZWdFeHAoIFwiXlwiICsgcHNldWRvcyApLFxuXHRcdFwiQ0hJTERcIjogbmV3IFJlZ0V4cCggXCJeOihvbmx5fGZpcnN0fGxhc3R8bnRofG50aC1sYXN0KS0oY2hpbGR8b2YtdHlwZSkoPzpcXFxcKFwiICsgd2hpdGVzcGFjZSArXG5cdFx0XHRcIiooZXZlbnxvZGR8KChbKy1dfCkoXFxcXGQqKW58KVwiICsgd2hpdGVzcGFjZSArIFwiKig/OihbKy1dfClcIiArIHdoaXRlc3BhY2UgK1xuXHRcdFx0XCIqKFxcXFxkKyl8KSlcIiArIHdoaXRlc3BhY2UgKyBcIipcXFxcKXwpXCIsIFwiaVwiICksXG5cdFx0XCJib29sXCI6IG5ldyBSZWdFeHAoIFwiXig/OlwiICsgYm9vbGVhbnMgKyBcIikkXCIsIFwiaVwiICksXG5cdFx0Ly8gRm9yIHVzZSBpbiBsaWJyYXJpZXMgaW1wbGVtZW50aW5nIC5pcygpXG5cdFx0Ly8gV2UgdXNlIHRoaXMgZm9yIFBPUyBtYXRjaGluZyBpbiBgc2VsZWN0YFxuXHRcdFwibmVlZHNDb250ZXh0XCI6IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKls+K35dfDooZXZlbnxvZGR8ZXF8Z3R8bHR8bnRofGZpcnN0fGxhc3QpKD86XFxcXChcIiArXG5cdFx0XHR3aGl0ZXNwYWNlICsgXCIqKCg/Oi1cXFxcZCk/XFxcXGQqKVwiICsgd2hpdGVzcGFjZSArIFwiKlxcXFwpfCkoPz1bXi1dfCQpXCIsIFwiaVwiIClcblx0fSxcblxuXHRyaW5wdXRzID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8YnV0dG9uKSQvaSxcblx0cmhlYWRlciA9IC9eaFxcZCQvaSxcblxuXHRybmF0aXZlID0gL15bXntdK1xce1xccypcXFtuYXRpdmUgXFx3LyxcblxuXHQvLyBFYXNpbHktcGFyc2VhYmxlL3JldHJpZXZhYmxlIElEIG9yIFRBRyBvciBDTEFTUyBzZWxlY3RvcnNcblx0cnF1aWNrRXhwciA9IC9eKD86IyhbXFx3LV0rKXwoXFx3Kyl8XFwuKFtcXHctXSspKSQvLFxuXG5cdHJzaWJsaW5nID0gL1srfl0vLFxuXG5cdC8vIENTUyBlc2NhcGVzXG5cdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL0NTUzIxL3N5bmRhdGEuaHRtbCNlc2NhcGVkLWNoYXJhY3RlcnNcblx0cnVuZXNjYXBlID0gbmV3IFJlZ0V4cCggXCJcXFxcXFxcXChbXFxcXGRhLWZdezEsNn1cIiArIHdoaXRlc3BhY2UgKyBcIj98KFwiICsgd2hpdGVzcGFjZSArIFwiKXwuKVwiLCBcImlnXCIgKSxcblx0ZnVuZXNjYXBlID0gZnVuY3Rpb24oIF8sIGVzY2FwZWQsIGVzY2FwZWRXaGl0ZXNwYWNlICkge1xuXHRcdHZhciBoaWdoID0gXCIweFwiICsgZXNjYXBlZCAtIDB4MTAwMDA7XG5cdFx0Ly8gTmFOIG1lYW5zIG5vbi1jb2RlcG9pbnRcblx0XHQvLyBTdXBwb3J0OiBGaXJlZm94PDI0XG5cdFx0Ly8gV29ya2Fyb3VuZCBlcnJvbmVvdXMgbnVtZXJpYyBpbnRlcnByZXRhdGlvbiBvZiArXCIweFwiXG5cdFx0cmV0dXJuIGhpZ2ggIT09IGhpZ2ggfHwgZXNjYXBlZFdoaXRlc3BhY2UgP1xuXHRcdFx0ZXNjYXBlZCA6XG5cdFx0XHRoaWdoIDwgMCA/XG5cdFx0XHRcdC8vIEJNUCBjb2RlcG9pbnRcblx0XHRcdFx0U3RyaW5nLmZyb21DaGFyQ29kZSggaGlnaCArIDB4MTAwMDAgKSA6XG5cdFx0XHRcdC8vIFN1cHBsZW1lbnRhbCBQbGFuZSBjb2RlcG9pbnQgKHN1cnJvZ2F0ZSBwYWlyKVxuXHRcdFx0XHRTdHJpbmcuZnJvbUNoYXJDb2RlKCBoaWdoID4+IDEwIHwgMHhEODAwLCBoaWdoICYgMHgzRkYgfCAweERDMDAgKTtcblx0fSxcblxuXHQvLyBDU1Mgc3RyaW5nL2lkZW50aWZpZXIgc2VyaWFsaXphdGlvblxuXHQvLyBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3Nzb20vI2NvbW1vbi1zZXJpYWxpemluZy1pZGlvbXNcblx0cmNzc2VzY2FwZSA9IC8oW1xcMC1cXHgxZlxceDdmXXxeLT9cXGQpfF4tJHxbXlxcMC1cXHgxZlxceDdmLVxcdUZGRkZcXHctXS9nLFxuXHRmY3NzZXNjYXBlID0gZnVuY3Rpb24oIGNoLCBhc0NvZGVQb2ludCApIHtcblx0XHRpZiAoIGFzQ29kZVBvaW50ICkge1xuXG5cdFx0XHQvLyBVKzAwMDAgTlVMTCBiZWNvbWVzIFUrRkZGRCBSRVBMQUNFTUVOVCBDSEFSQUNURVJcblx0XHRcdGlmICggY2ggPT09IFwiXFwwXCIgKSB7XG5cdFx0XHRcdHJldHVybiBcIlxcdUZGRkRcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29udHJvbCBjaGFyYWN0ZXJzIGFuZCAoZGVwZW5kZW50IHVwb24gcG9zaXRpb24pIG51bWJlcnMgZ2V0IGVzY2FwZWQgYXMgY29kZSBwb2ludHNcblx0XHRcdHJldHVybiBjaC5zbGljZSggMCwgLTEgKSArIFwiXFxcXFwiICsgY2guY2hhckNvZGVBdCggY2gubGVuZ3RoIC0gMSApLnRvU3RyaW5nKCAxNiApICsgXCIgXCI7XG5cdFx0fVxuXG5cdFx0Ly8gT3RoZXIgcG90ZW50aWFsbHktc3BlY2lhbCBBU0NJSSBjaGFyYWN0ZXJzIGdldCBiYWNrc2xhc2gtZXNjYXBlZFxuXHRcdHJldHVybiBcIlxcXFxcIiArIGNoO1xuXHR9LFxuXG5cdC8vIFVzZWQgZm9yIGlmcmFtZXNcblx0Ly8gU2VlIHNldERvY3VtZW50KClcblx0Ly8gUmVtb3ZpbmcgdGhlIGZ1bmN0aW9uIHdyYXBwZXIgY2F1c2VzIGEgXCJQZXJtaXNzaW9uIERlbmllZFwiXG5cdC8vIGVycm9yIGluIElFXG5cdHVubG9hZEhhbmRsZXIgPSBmdW5jdGlvbigpIHtcblx0XHRzZXREb2N1bWVudCgpO1xuXHR9LFxuXG5cdGRpc2FibGVkQW5jZXN0b3IgPSBhZGRDb21iaW5hdG9yKFxuXHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IHRydWUgJiYgKFwiZm9ybVwiIGluIGVsZW0gfHwgXCJsYWJlbFwiIGluIGVsZW0pO1xuXHRcdH0sXG5cdFx0eyBkaXI6IFwicGFyZW50Tm9kZVwiLCBuZXh0OiBcImxlZ2VuZFwiIH1cblx0KTtcblxuLy8gT3B0aW1pemUgZm9yIHB1c2guYXBwbHkoIF8sIE5vZGVMaXN0IClcbnRyeSB7XG5cdHB1c2guYXBwbHkoXG5cdFx0KGFyciA9IHNsaWNlLmNhbGwoIHByZWZlcnJlZERvYy5jaGlsZE5vZGVzICkpLFxuXHRcdHByZWZlcnJlZERvYy5jaGlsZE5vZGVzXG5cdCk7XG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQ8NC4wXG5cdC8vIERldGVjdCBzaWxlbnRseSBmYWlsaW5nIHB1c2guYXBwbHlcblx0YXJyWyBwcmVmZXJyZWREb2MuY2hpbGROb2Rlcy5sZW5ndGggXS5ub2RlVHlwZTtcbn0gY2F0Y2ggKCBlICkge1xuXHRwdXNoID0geyBhcHBseTogYXJyLmxlbmd0aCA/XG5cblx0XHQvLyBMZXZlcmFnZSBzbGljZSBpZiBwb3NzaWJsZVxuXHRcdGZ1bmN0aW9uKCB0YXJnZXQsIGVscyApIHtcblx0XHRcdHB1c2hfbmF0aXZlLmFwcGx5KCB0YXJnZXQsIHNsaWNlLmNhbGwoZWxzKSApO1xuXHRcdH0gOlxuXG5cdFx0Ly8gU3VwcG9ydDogSUU8OVxuXHRcdC8vIE90aGVyd2lzZSBhcHBlbmQgZGlyZWN0bHlcblx0XHRmdW5jdGlvbiggdGFyZ2V0LCBlbHMgKSB7XG5cdFx0XHR2YXIgaiA9IHRhcmdldC5sZW5ndGgsXG5cdFx0XHRcdGkgPSAwO1xuXHRcdFx0Ly8gQ2FuJ3QgdHJ1c3QgTm9kZUxpc3QubGVuZ3RoXG5cdFx0XHR3aGlsZSAoICh0YXJnZXRbaisrXSA9IGVsc1tpKytdKSApIHt9XG5cdFx0XHR0YXJnZXQubGVuZ3RoID0gaiAtIDE7XG5cdFx0fVxuXHR9O1xufVxuXG5mdW5jdGlvbiBTaXp6bGUoIHNlbGVjdG9yLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICkge1xuXHR2YXIgbSwgaSwgZWxlbSwgbmlkLCBtYXRjaCwgZ3JvdXBzLCBuZXdTZWxlY3Rvcixcblx0XHRuZXdDb250ZXh0ID0gY29udGV4dCAmJiBjb250ZXh0Lm93bmVyRG9jdW1lbnQsXG5cblx0XHQvLyBub2RlVHlwZSBkZWZhdWx0cyB0byA5LCBzaW5jZSBjb250ZXh0IGRlZmF1bHRzIHRvIGRvY3VtZW50XG5cdFx0bm9kZVR5cGUgPSBjb250ZXh0ID8gY29udGV4dC5ub2RlVHlwZSA6IDk7XG5cblx0cmVzdWx0cyA9IHJlc3VsdHMgfHwgW107XG5cblx0Ly8gUmV0dXJuIGVhcmx5IGZyb20gY2FsbHMgd2l0aCBpbnZhbGlkIHNlbGVjdG9yIG9yIGNvbnRleHRcblx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgfHwgIXNlbGVjdG9yIHx8XG5cdFx0bm9kZVR5cGUgIT09IDEgJiYgbm9kZVR5cGUgIT09IDkgJiYgbm9kZVR5cGUgIT09IDExICkge1xuXG5cdFx0cmV0dXJuIHJlc3VsdHM7XG5cdH1cblxuXHQvLyBUcnkgdG8gc2hvcnRjdXQgZmluZCBvcGVyYXRpb25zIChhcyBvcHBvc2VkIHRvIGZpbHRlcnMpIGluIEhUTUwgZG9jdW1lbnRzXG5cdGlmICggIXNlZWQgKSB7XG5cblx0XHRpZiAoICggY29udGV4dCA/IGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0IDogcHJlZmVycmVkRG9jICkgIT09IGRvY3VtZW50ICkge1xuXHRcdFx0c2V0RG9jdW1lbnQoIGNvbnRleHQgKTtcblx0XHR9XG5cdFx0Y29udGV4dCA9IGNvbnRleHQgfHwgZG9jdW1lbnQ7XG5cblx0XHRpZiAoIGRvY3VtZW50SXNIVE1MICkge1xuXG5cdFx0XHQvLyBJZiB0aGUgc2VsZWN0b3IgaXMgc3VmZmljaWVudGx5IHNpbXBsZSwgdHJ5IHVzaW5nIGEgXCJnZXQqQnkqXCIgRE9NIG1ldGhvZFxuXHRcdFx0Ly8gKGV4Y2VwdGluZyBEb2N1bWVudEZyYWdtZW50IGNvbnRleHQsIHdoZXJlIHRoZSBtZXRob2RzIGRvbid0IGV4aXN0KVxuXHRcdFx0aWYgKCBub2RlVHlwZSAhPT0gMTEgJiYgKG1hdGNoID0gcnF1aWNrRXhwci5leGVjKCBzZWxlY3RvciApKSApIHtcblxuXHRcdFx0XHQvLyBJRCBzZWxlY3RvclxuXHRcdFx0XHRpZiAoIChtID0gbWF0Y2hbMV0pICkge1xuXG5cdFx0XHRcdFx0Ly8gRG9jdW1lbnQgY29udGV4dFxuXHRcdFx0XHRcdGlmICggbm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIChlbGVtID0gY29udGV4dC5nZXRFbGVtZW50QnlJZCggbSApKSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSwgT3BlcmEsIFdlYmtpdFxuXHRcdFx0XHRcdFx0XHQvLyBUT0RPOiBpZGVudGlmeSB2ZXJzaW9uc1xuXHRcdFx0XHRcdFx0XHQvLyBnZXRFbGVtZW50QnlJZCBjYW4gbWF0Y2ggZWxlbWVudHMgYnkgbmFtZSBpbnN0ZWFkIG9mIElEXG5cdFx0XHRcdFx0XHRcdGlmICggZWxlbS5pZCA9PT0gbSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBFbGVtZW50IGNvbnRleHRcblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSwgT3BlcmEsIFdlYmtpdFxuXHRcdFx0XHRcdFx0Ly8gVE9ETzogaWRlbnRpZnkgdmVyc2lvbnNcblx0XHRcdFx0XHRcdC8vIGdldEVsZW1lbnRCeUlkIGNhbiBtYXRjaCBlbGVtZW50cyBieSBuYW1lIGluc3RlYWQgb2YgSURcblx0XHRcdFx0XHRcdGlmICggbmV3Q29udGV4dCAmJiAoZWxlbSA9IG5ld0NvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIG0gKSkgJiZcblx0XHRcdFx0XHRcdFx0Y29udGFpbnMoIGNvbnRleHQsIGVsZW0gKSAmJlxuXHRcdFx0XHRcdFx0XHRlbGVtLmlkID09PSBtICkge1xuXG5cdFx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gVHlwZSBzZWxlY3RvclxuXHRcdFx0XHR9IGVsc2UgaWYgKCBtYXRjaFsyXSApIHtcblx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCBzZWxlY3RvciApICk7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cblx0XHRcdFx0Ly8gQ2xhc3Mgc2VsZWN0b3Jcblx0XHRcdFx0fSBlbHNlIGlmICggKG0gPSBtYXRjaFszXSkgJiYgc3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICYmXG5cdFx0XHRcdFx0Y29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICkge1xuXG5cdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCBtICkgKTtcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBUYWtlIGFkdmFudGFnZSBvZiBxdWVyeVNlbGVjdG9yQWxsXG5cdFx0XHRpZiAoIHN1cHBvcnQucXNhICYmXG5cdFx0XHRcdCFjb21waWxlckNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF0gJiZcblx0XHRcdFx0KCFyYnVnZ3lRU0EgfHwgIXJidWdneVFTQS50ZXN0KCBzZWxlY3RvciApKSApIHtcblxuXHRcdFx0XHRpZiAoIG5vZGVUeXBlICE9PSAxICkge1xuXHRcdFx0XHRcdG5ld0NvbnRleHQgPSBjb250ZXh0O1xuXHRcdFx0XHRcdG5ld1NlbGVjdG9yID0gc2VsZWN0b3I7XG5cblx0XHRcdFx0Ly8gcVNBIGxvb2tzIG91dHNpZGUgRWxlbWVudCBjb250ZXh0LCB3aGljaCBpcyBub3Qgd2hhdCB3ZSB3YW50XG5cdFx0XHRcdC8vIFRoYW5rcyB0byBBbmRyZXcgRHVwb250IGZvciB0aGlzIHdvcmthcm91bmQgdGVjaG5pcXVlXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OFxuXHRcdFx0XHQvLyBFeGNsdWRlIG9iamVjdCBlbGVtZW50c1xuXHRcdFx0XHR9IGVsc2UgaWYgKCBjb250ZXh0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgIT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHRcdFx0XHQvLyBDYXB0dXJlIHRoZSBjb250ZXh0IElELCBzZXR0aW5nIGl0IGZpcnN0IGlmIG5lY2Vzc2FyeVxuXHRcdFx0XHRcdGlmICggKG5pZCA9IGNvbnRleHQuZ2V0QXR0cmlidXRlKCBcImlkXCIgKSkgKSB7XG5cdFx0XHRcdFx0XHRuaWQgPSBuaWQucmVwbGFjZSggcmNzc2VzY2FwZSwgZmNzc2VzY2FwZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRjb250ZXh0LnNldEF0dHJpYnV0ZSggXCJpZFwiLCAobmlkID0gZXhwYW5kbykgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBQcmVmaXggZXZlcnkgc2VsZWN0b3IgaW4gdGhlIGxpc3Rcblx0XHRcdFx0XHRncm91cHMgPSB0b2tlbml6ZSggc2VsZWN0b3IgKTtcblx0XHRcdFx0XHRpID0gZ3JvdXBzLmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGdyb3Vwc1tpXSA9IFwiI1wiICsgbmlkICsgXCIgXCIgKyB0b1NlbGVjdG9yKCBncm91cHNbaV0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0bmV3U2VsZWN0b3IgPSBncm91cHMuam9pbiggXCIsXCIgKTtcblxuXHRcdFx0XHRcdC8vIEV4cGFuZCBjb250ZXh0IGZvciBzaWJsaW5nIHNlbGVjdG9yc1xuXHRcdFx0XHRcdG5ld0NvbnRleHQgPSByc2libGluZy50ZXN0KCBzZWxlY3RvciApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fFxuXHRcdFx0XHRcdFx0Y29udGV4dDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggbmV3U2VsZWN0b3IgKSB7XG5cdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsXG5cdFx0XHRcdFx0XHRcdG5ld0NvbnRleHQucXVlcnlTZWxlY3RvckFsbCggbmV3U2VsZWN0b3IgKVxuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdH0gY2F0Y2ggKCBxc2FFcnJvciApIHtcblx0XHRcdFx0XHR9IGZpbmFsbHkge1xuXHRcdFx0XHRcdFx0aWYgKCBuaWQgPT09IGV4cGFuZG8gKSB7XG5cdFx0XHRcdFx0XHRcdGNvbnRleHQucmVtb3ZlQXR0cmlidXRlKCBcImlkXCIgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBBbGwgb3RoZXJzXG5cdHJldHVybiBzZWxlY3QoIHNlbGVjdG9yLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApO1xufVxuXG4vKipcbiAqIENyZWF0ZSBrZXktdmFsdWUgY2FjaGVzIG9mIGxpbWl0ZWQgc2l6ZVxuICogQHJldHVybnMge2Z1bmN0aW9uKHN0cmluZywgb2JqZWN0KX0gUmV0dXJucyB0aGUgT2JqZWN0IGRhdGEgYWZ0ZXIgc3RvcmluZyBpdCBvbiBpdHNlbGYgd2l0aFxuICpcdHByb3BlcnR5IG5hbWUgdGhlIChzcGFjZS1zdWZmaXhlZCkgc3RyaW5nIGFuZCAoaWYgdGhlIGNhY2hlIGlzIGxhcmdlciB0aGFuIEV4cHIuY2FjaGVMZW5ndGgpXG4gKlx0ZGVsZXRpbmcgdGhlIG9sZGVzdCBlbnRyeVxuICovXG5mdW5jdGlvbiBjcmVhdGVDYWNoZSgpIHtcblx0dmFyIGtleXMgPSBbXTtcblxuXHRmdW5jdGlvbiBjYWNoZSgga2V5LCB2YWx1ZSApIHtcblx0XHQvLyBVc2UgKGtleSArIFwiIFwiKSB0byBhdm9pZCBjb2xsaXNpb24gd2l0aCBuYXRpdmUgcHJvdG90eXBlIHByb3BlcnRpZXMgKHNlZSBJc3N1ZSAjMTU3KVxuXHRcdGlmICgga2V5cy5wdXNoKCBrZXkgKyBcIiBcIiApID4gRXhwci5jYWNoZUxlbmd0aCApIHtcblx0XHRcdC8vIE9ubHkga2VlcCB0aGUgbW9zdCByZWNlbnQgZW50cmllc1xuXHRcdFx0ZGVsZXRlIGNhY2hlWyBrZXlzLnNoaWZ0KCkgXTtcblx0XHR9XG5cdFx0cmV0dXJuIChjYWNoZVsga2V5ICsgXCIgXCIgXSA9IHZhbHVlKTtcblx0fVxuXHRyZXR1cm4gY2FjaGU7XG59XG5cbi8qKlxuICogTWFyayBhIGZ1bmN0aW9uIGZvciBzcGVjaWFsIHVzZSBieSBTaXp6bGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBtYXJrXG4gKi9cbmZ1bmN0aW9uIG1hcmtGdW5jdGlvbiggZm4gKSB7XG5cdGZuWyBleHBhbmRvIF0gPSB0cnVlO1xuXHRyZXR1cm4gZm47XG59XG5cbi8qKlxuICogU3VwcG9ydCB0ZXN0aW5nIHVzaW5nIGFuIGVsZW1lbnRcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFBhc3NlZCB0aGUgY3JlYXRlZCBlbGVtZW50IGFuZCByZXR1cm5zIGEgYm9vbGVhbiByZXN1bHRcbiAqL1xuZnVuY3Rpb24gYXNzZXJ0KCBmbiApIHtcblx0dmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImZpZWxkc2V0XCIpO1xuXG5cdHRyeSB7XG5cdFx0cmV0dXJuICEhZm4oIGVsICk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH0gZmluYWxseSB7XG5cdFx0Ly8gUmVtb3ZlIGZyb20gaXRzIHBhcmVudCBieSBkZWZhdWx0XG5cdFx0aWYgKCBlbC5wYXJlbnROb2RlICkge1xuXHRcdFx0ZWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggZWwgKTtcblx0XHR9XG5cdFx0Ly8gcmVsZWFzZSBtZW1vcnkgaW4gSUVcblx0XHRlbCA9IG51bGw7XG5cdH1cbn1cblxuLyoqXG4gKiBBZGRzIHRoZSBzYW1lIGhhbmRsZXIgZm9yIGFsbCBvZiB0aGUgc3BlY2lmaWVkIGF0dHJzXG4gKiBAcGFyYW0ge1N0cmluZ30gYXR0cnMgUGlwZS1zZXBhcmF0ZWQgbGlzdCBvZiBhdHRyaWJ1dGVzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBoYW5kbGVyIFRoZSBtZXRob2QgdGhhdCB3aWxsIGJlIGFwcGxpZWRcbiAqL1xuZnVuY3Rpb24gYWRkSGFuZGxlKCBhdHRycywgaGFuZGxlciApIHtcblx0dmFyIGFyciA9IGF0dHJzLnNwbGl0KFwifFwiKSxcblx0XHRpID0gYXJyLmxlbmd0aDtcblxuXHR3aGlsZSAoIGktLSApIHtcblx0XHRFeHByLmF0dHJIYW5kbGVbIGFycltpXSBdID0gaGFuZGxlcjtcblx0fVxufVxuXG4vKipcbiAqIENoZWNrcyBkb2N1bWVudCBvcmRlciBvZiB0d28gc2libGluZ3NcbiAqIEBwYXJhbSB7RWxlbWVudH0gYVxuICogQHBhcmFtIHtFbGVtZW50fSBiXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBSZXR1cm5zIGxlc3MgdGhhbiAwIGlmIGEgcHJlY2VkZXMgYiwgZ3JlYXRlciB0aGFuIDAgaWYgYSBmb2xsb3dzIGJcbiAqL1xuZnVuY3Rpb24gc2libGluZ0NoZWNrKCBhLCBiICkge1xuXHR2YXIgY3VyID0gYiAmJiBhLFxuXHRcdGRpZmYgPSBjdXIgJiYgYS5ub2RlVHlwZSA9PT0gMSAmJiBiLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRhLnNvdXJjZUluZGV4IC0gYi5zb3VyY2VJbmRleDtcblxuXHQvLyBVc2UgSUUgc291cmNlSW5kZXggaWYgYXZhaWxhYmxlIG9uIGJvdGggbm9kZXNcblx0aWYgKCBkaWZmICkge1xuXHRcdHJldHVybiBkaWZmO1xuXHR9XG5cblx0Ly8gQ2hlY2sgaWYgYiBmb2xsb3dzIGFcblx0aWYgKCBjdXIgKSB7XG5cdFx0d2hpbGUgKCAoY3VyID0gY3VyLm5leHRTaWJsaW5nKSApIHtcblx0XHRcdGlmICggY3VyID09PSBiICkge1xuXHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGEgPyAxIDogLTE7XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBpbnB1dCB0eXBlc1xuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAqL1xuZnVuY3Rpb24gY3JlYXRlSW5wdXRQc2V1ZG8oIHR5cGUgKSB7XG5cdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRyZXR1cm4gbmFtZSA9PT0gXCJpbnB1dFwiICYmIGVsZW0udHlwZSA9PT0gdHlwZTtcblx0fTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIGJ1dHRvbnNcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUJ1dHRvblBzZXVkbyggdHlwZSApIHtcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdHJldHVybiAobmFtZSA9PT0gXCJpbnB1dFwiIHx8IG5hbWUgPT09IFwiYnV0dG9uXCIpICYmIGVsZW0udHlwZSA9PT0gdHlwZTtcblx0fTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIDplbmFibGVkLzpkaXNhYmxlZFxuICogQHBhcmFtIHtCb29sZWFufSBkaXNhYmxlZCB0cnVlIGZvciA6ZGlzYWJsZWQ7IGZhbHNlIGZvciA6ZW5hYmxlZFxuICovXG5mdW5jdGlvbiBjcmVhdGVEaXNhYmxlZFBzZXVkbyggZGlzYWJsZWQgKSB7XG5cblx0Ly8gS25vd24gOmRpc2FibGVkIGZhbHNlIHBvc2l0aXZlczogZmllbGRzZXRbZGlzYWJsZWRdID4gbGVnZW5kOm50aC1vZi10eXBlKG4rMikgOmNhbi1kaXNhYmxlXG5cdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdC8vIE9ubHkgY2VydGFpbiBlbGVtZW50cyBjYW4gbWF0Y2ggOmVuYWJsZWQgb3IgOmRpc2FibGVkXG5cdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc2NyaXB0aW5nLmh0bWwjc2VsZWN0b3ItZW5hYmxlZFxuXHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3NjcmlwdGluZy5odG1sI3NlbGVjdG9yLWRpc2FibGVkXG5cdFx0aWYgKCBcImZvcm1cIiBpbiBlbGVtICkge1xuXG5cdFx0XHQvLyBDaGVjayBmb3IgaW5oZXJpdGVkIGRpc2FibGVkbmVzcyBvbiByZWxldmFudCBub24tZGlzYWJsZWQgZWxlbWVudHM6XG5cdFx0XHQvLyAqIGxpc3RlZCBmb3JtLWFzc29jaWF0ZWQgZWxlbWVudHMgaW4gYSBkaXNhYmxlZCBmaWVsZHNldFxuXHRcdFx0Ly8gICBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3Jtcy5odG1sI2NhdGVnb3J5LWxpc3RlZFxuXHRcdFx0Ly8gICBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3Jtcy5odG1sI2NvbmNlcHQtZmUtZGlzYWJsZWRcblx0XHRcdC8vICogb3B0aW9uIGVsZW1lbnRzIGluIGEgZGlzYWJsZWQgb3B0Z3JvdXBcblx0XHRcdC8vICAgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybXMuaHRtbCNjb25jZXB0LW9wdGlvbi1kaXNhYmxlZFxuXHRcdFx0Ly8gQWxsIHN1Y2ggZWxlbWVudHMgaGF2ZSBhIFwiZm9ybVwiIHByb3BlcnR5LlxuXHRcdFx0aWYgKCBlbGVtLnBhcmVudE5vZGUgJiYgZWxlbS5kaXNhYmxlZCA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0Ly8gT3B0aW9uIGVsZW1lbnRzIGRlZmVyIHRvIGEgcGFyZW50IG9wdGdyb3VwIGlmIHByZXNlbnRcblx0XHRcdFx0aWYgKCBcImxhYmVsXCIgaW4gZWxlbSApIHtcblx0XHRcdFx0XHRpZiAoIFwibGFiZWxcIiBpbiBlbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5wYXJlbnROb2RlLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDYgLSAxMVxuXHRcdFx0XHQvLyBVc2UgdGhlIGlzRGlzYWJsZWQgc2hvcnRjdXQgcHJvcGVydHkgdG8gY2hlY2sgZm9yIGRpc2FibGVkIGZpZWxkc2V0IGFuY2VzdG9yc1xuXHRcdFx0XHRyZXR1cm4gZWxlbS5pc0Rpc2FibGVkID09PSBkaXNhYmxlZCB8fFxuXG5cdFx0XHRcdFx0Ly8gV2hlcmUgdGhlcmUgaXMgbm8gaXNEaXNhYmxlZCwgY2hlY2sgbWFudWFsbHlcblx0XHRcdFx0XHQvKiBqc2hpbnQgLVcwMTggKi9cblx0XHRcdFx0XHRlbGVtLmlzRGlzYWJsZWQgIT09ICFkaXNhYmxlZCAmJlxuXHRcdFx0XHRcdFx0ZGlzYWJsZWRBbmNlc3RvciggZWxlbSApID09PSBkaXNhYmxlZDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXG5cdFx0Ly8gVHJ5IHRvIHdpbm5vdyBvdXQgZWxlbWVudHMgdGhhdCBjYW4ndCBiZSBkaXNhYmxlZCBiZWZvcmUgdHJ1c3RpbmcgdGhlIGRpc2FibGVkIHByb3BlcnR5LlxuXHRcdC8vIFNvbWUgdmljdGltcyBnZXQgY2F1Z2h0IGluIG91ciBuZXQgKGxhYmVsLCBsZWdlbmQsIG1lbnUsIHRyYWNrKSwgYnV0IGl0IHNob3VsZG4ndFxuXHRcdC8vIGV2ZW4gZXhpc3Qgb24gdGhlbSwgbGV0IGFsb25lIGhhdmUgYSBib29sZWFuIHZhbHVlLlxuXHRcdH0gZWxzZSBpZiAoIFwibGFiZWxcIiBpbiBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXHRcdH1cblxuXHRcdC8vIFJlbWFpbmluZyBlbGVtZW50cyBhcmUgbmVpdGhlciA6ZW5hYmxlZCBub3IgOmRpc2FibGVkXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgcG9zaXRpb25hbHNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZuICkge1xuXHRyZXR1cm4gbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBhcmd1bWVudCApIHtcblx0XHRhcmd1bWVudCA9ICthcmd1bWVudDtcblx0XHRyZXR1cm4gbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzICkge1xuXHRcdFx0dmFyIGosXG5cdFx0XHRcdG1hdGNoSW5kZXhlcyA9IGZuKCBbXSwgc2VlZC5sZW5ndGgsIGFyZ3VtZW50ICksXG5cdFx0XHRcdGkgPSBtYXRjaEluZGV4ZXMubGVuZ3RoO1xuXG5cdFx0XHQvLyBNYXRjaCBlbGVtZW50cyBmb3VuZCBhdCB0aGUgc3BlY2lmaWVkIGluZGV4ZXNcblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRpZiAoIHNlZWRbIChqID0gbWF0Y2hJbmRleGVzW2ldKSBdICkge1xuXHRcdFx0XHRcdHNlZWRbal0gPSAhKG1hdGNoZXNbal0gPSBzZWVkW2pdKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0pO1xuXHR9KTtcbn1cblxuLyoqXG4gKiBDaGVja3MgYSBub2RlIGZvciB2YWxpZGl0eSBhcyBhIFNpenpsZSBjb250ZXh0XG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0PX0gY29udGV4dFxuICogQHJldHVybnMge0VsZW1lbnR8T2JqZWN0fEJvb2xlYW59IFRoZSBpbnB1dCBub2RlIGlmIGFjY2VwdGFibGUsIG90aGVyd2lzZSBhIGZhbHN5IHZhbHVlXG4gKi9cbmZ1bmN0aW9uIHRlc3RDb250ZXh0KCBjb250ZXh0ICkge1xuXHRyZXR1cm4gY29udGV4dCAmJiB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBjb250ZXh0O1xufVxuXG4vLyBFeHBvc2Ugc3VwcG9ydCB2YXJzIGZvciBjb252ZW5pZW5jZVxuc3VwcG9ydCA9IFNpenpsZS5zdXBwb3J0ID0ge307XG5cbi8qKlxuICogRGV0ZWN0cyBYTUwgbm9kZXNcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3R9IGVsZW0gQW4gZWxlbWVudCBvciBhIGRvY3VtZW50XG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gVHJ1ZSBpZmYgZWxlbSBpcyBhIG5vbi1IVE1MIFhNTCBub2RlXG4gKi9cbmlzWE1MID0gU2l6emxlLmlzWE1MID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdC8vIGRvY3VtZW50RWxlbWVudCBpcyB2ZXJpZmllZCBmb3IgY2FzZXMgd2hlcmUgaXQgZG9lc24ndCB5ZXQgZXhpc3Rcblx0Ly8gKHN1Y2ggYXMgbG9hZGluZyBpZnJhbWVzIGluIElFIC0gIzQ4MzMpXG5cdHZhciBkb2N1bWVudEVsZW1lbnQgPSBlbGVtICYmIChlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSkuZG9jdW1lbnRFbGVtZW50O1xuXHRyZXR1cm4gZG9jdW1lbnRFbGVtZW50ID8gZG9jdW1lbnRFbGVtZW50Lm5vZGVOYW1lICE9PSBcIkhUTUxcIiA6IGZhbHNlO1xufTtcblxuLyoqXG4gKiBTZXRzIGRvY3VtZW50LXJlbGF0ZWQgdmFyaWFibGVzIG9uY2UgYmFzZWQgb24gdGhlIGN1cnJlbnQgZG9jdW1lbnRcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3R9IFtkb2NdIEFuIGVsZW1lbnQgb3IgZG9jdW1lbnQgb2JqZWN0IHRvIHVzZSB0byBzZXQgdGhlIGRvY3VtZW50XG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjdXJyZW50IGRvY3VtZW50XG4gKi9cbnNldERvY3VtZW50ID0gU2l6emxlLnNldERvY3VtZW50ID0gZnVuY3Rpb24oIG5vZGUgKSB7XG5cdHZhciBoYXNDb21wYXJlLCBzdWJXaW5kb3csXG5cdFx0ZG9jID0gbm9kZSA/IG5vZGUub3duZXJEb2N1bWVudCB8fCBub2RlIDogcHJlZmVycmVkRG9jO1xuXG5cdC8vIFJldHVybiBlYXJseSBpZiBkb2MgaXMgaW52YWxpZCBvciBhbHJlYWR5IHNlbGVjdGVkXG5cdGlmICggZG9jID09PSBkb2N1bWVudCB8fCBkb2Mubm9kZVR5cGUgIT09IDkgfHwgIWRvYy5kb2N1bWVudEVsZW1lbnQgKSB7XG5cdFx0cmV0dXJuIGRvY3VtZW50O1xuXHR9XG5cblx0Ly8gVXBkYXRlIGdsb2JhbCB2YXJpYWJsZXNcblx0ZG9jdW1lbnQgPSBkb2M7XG5cdGRvY0VsZW0gPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cdGRvY3VtZW50SXNIVE1MID0gIWlzWE1MKCBkb2N1bWVudCApO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDktMTEsIEVkZ2Vcblx0Ly8gQWNjZXNzaW5nIGlmcmFtZSBkb2N1bWVudHMgYWZ0ZXIgdW5sb2FkIHRocm93cyBcInBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3JzIChqUXVlcnkgIzEzOTM2KVxuXHRpZiAoIHByZWZlcnJlZERvYyAhPT0gZG9jdW1lbnQgJiZcblx0XHQoc3ViV2luZG93ID0gZG9jdW1lbnQuZGVmYXVsdFZpZXcpICYmIHN1YldpbmRvdy50b3AgIT09IHN1YldpbmRvdyApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDExLCBFZGdlXG5cdFx0aWYgKCBzdWJXaW5kb3cuYWRkRXZlbnRMaXN0ZW5lciApIHtcblx0XHRcdHN1YldpbmRvdy5hZGRFdmVudExpc3RlbmVyKCBcInVubG9hZFwiLCB1bmxvYWRIYW5kbGVyLCBmYWxzZSApO1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOSAtIDEwIG9ubHlcblx0XHR9IGVsc2UgaWYgKCBzdWJXaW5kb3cuYXR0YWNoRXZlbnQgKSB7XG5cdFx0XHRzdWJXaW5kb3cuYXR0YWNoRXZlbnQoIFwib251bmxvYWRcIiwgdW5sb2FkSGFuZGxlciApO1xuXHRcdH1cblx0fVxuXG5cdC8qIEF0dHJpYnV0ZXNcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIFN1cHBvcnQ6IElFPDhcblx0Ly8gVmVyaWZ5IHRoYXQgZ2V0QXR0cmlidXRlIHJlYWxseSByZXR1cm5zIGF0dHJpYnV0ZXMgYW5kIG5vdCBwcm9wZXJ0aWVzXG5cdC8vIChleGNlcHRpbmcgSUU4IGJvb2xlYW5zKVxuXHRzdXBwb3J0LmF0dHJpYnV0ZXMgPSBhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRcdGVsLmNsYXNzTmFtZSA9IFwiaVwiO1xuXHRcdHJldHVybiAhZWwuZ2V0QXR0cmlidXRlKFwiY2xhc3NOYW1lXCIpO1xuXHR9KTtcblxuXHQvKiBnZXRFbGVtZW50KHMpQnkqXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBDaGVjayBpZiBnZXRFbGVtZW50c0J5VGFnTmFtZShcIipcIikgcmV0dXJucyBvbmx5IGVsZW1lbnRzXG5cdHN1cHBvcnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgPSBhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRcdGVsLmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVDb21tZW50KFwiXCIpICk7XG5cdFx0cmV0dXJuICFlbC5nZXRFbGVtZW50c0J5VGFnTmFtZShcIipcIikubGVuZ3RoO1xuXHR9KTtcblxuXHQvLyBTdXBwb3J0OiBJRTw5XG5cdHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSA9IHJuYXRpdmUudGVzdCggZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSApO1xuXG5cdC8vIFN1cHBvcnQ6IElFPDEwXG5cdC8vIENoZWNrIGlmIGdldEVsZW1lbnRCeUlkIHJldHVybnMgZWxlbWVudHMgYnkgbmFtZVxuXHQvLyBUaGUgYnJva2VuIGdldEVsZW1lbnRCeUlkIG1ldGhvZHMgZG9uJ3QgcGljayB1cCBwcm9ncmFtbWF0aWNhbGx5LXNldCBuYW1lcyxcblx0Ly8gc28gdXNlIGEgcm91bmRhYm91dCBnZXRFbGVtZW50c0J5TmFtZSB0ZXN0XG5cdHN1cHBvcnQuZ2V0QnlJZCA9IGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5pZCA9IGV4cGFuZG87XG5cdFx0cmV0dXJuICFkb2N1bWVudC5nZXRFbGVtZW50c0J5TmFtZSB8fCAhZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUoIGV4cGFuZG8gKS5sZW5ndGg7XG5cdH0pO1xuXG5cdC8vIElEIGZpbHRlciBhbmQgZmluZFxuXHRpZiAoIHN1cHBvcnQuZ2V0QnlJZCApIHtcblx0XHRFeHByLmZpbHRlcltcIklEXCJdID0gZnVuY3Rpb24oIGlkICkge1xuXHRcdFx0dmFyIGF0dHJJZCA9IGlkLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZShcImlkXCIpID09PSBhdHRySWQ7XG5cdFx0XHR9O1xuXHRcdH07XG5cdFx0RXhwci5maW5kW1wiSURcIl0gPSBmdW5jdGlvbiggaWQsIGNvbnRleHQgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRCeUlkICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50SXNIVE1MICkge1xuXHRcdFx0XHR2YXIgZWxlbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIGlkICk7XG5cdFx0XHRcdHJldHVybiBlbGVtID8gWyBlbGVtIF0gOiBbXTtcblx0XHRcdH1cblx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdEV4cHIuZmlsdGVyW1wiSURcIl0gPSAgZnVuY3Rpb24oIGlkICkge1xuXHRcdFx0dmFyIGF0dHJJZCA9IGlkLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciBub2RlID0gdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlTm9kZSAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuXHRcdFx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlTm9kZShcImlkXCIpO1xuXHRcdFx0XHRyZXR1cm4gbm9kZSAmJiBub2RlLnZhbHVlID09PSBhdHRySWQ7XG5cdFx0XHR9O1xuXHRcdH07XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA2IC0gNyBvbmx5XG5cdFx0Ly8gZ2V0RWxlbWVudEJ5SWQgaXMgbm90IHJlbGlhYmxlIGFzIGEgZmluZCBzaG9ydGN1dFxuXHRcdEV4cHIuZmluZFtcIklEXCJdID0gZnVuY3Rpb24oIGlkLCBjb250ZXh0ICkge1xuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50QnlJZCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdFx0dmFyIG5vZGUsIGksIGVsZW1zLFxuXHRcdFx0XHRcdGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBpZCApO1xuXG5cdFx0XHRcdGlmICggZWxlbSApIHtcblxuXHRcdFx0XHRcdC8vIFZlcmlmeSB0aGUgaWQgYXR0cmlidXRlXG5cdFx0XHRcdFx0bm9kZSA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZShcImlkXCIpO1xuXHRcdFx0XHRcdGlmICggbm9kZSAmJiBub2RlLnZhbHVlID09PSBpZCApIHtcblx0XHRcdFx0XHRcdHJldHVybiBbIGVsZW0gXTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBGYWxsIGJhY2sgb24gZ2V0RWxlbWVudHNCeU5hbWVcblx0XHRcdFx0XHRlbGVtcyA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeU5hbWUoIGlkICk7XG5cdFx0XHRcdFx0aSA9IDA7XG5cdFx0XHRcdFx0d2hpbGUgKCAoZWxlbSA9IGVsZW1zW2krK10pICkge1xuXHRcdFx0XHRcdFx0bm9kZSA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZShcImlkXCIpO1xuXHRcdFx0XHRcdFx0aWYgKCBub2RlICYmIG5vZGUudmFsdWUgPT09IGlkICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gWyBlbGVtIF07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIFtdO1xuXHRcdFx0fVxuXHRcdH07XG5cdH1cblxuXHQvLyBUYWdcblx0RXhwci5maW5kW1wiVEFHXCJdID0gc3VwcG9ydC5nZXRFbGVtZW50c0J5VGFnTmFtZSA/XG5cdFx0ZnVuY3Rpb24oIHRhZywgY29udGV4dCApIHtcblx0XHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0XHRcdHJldHVybiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgKTtcblxuXHRcdFx0Ly8gRG9jdW1lbnRGcmFnbWVudCBub2RlcyBkb24ndCBoYXZlIGdFQlROXG5cdFx0XHR9IGVsc2UgaWYgKCBzdXBwb3J0LnFzYSApIHtcblx0XHRcdFx0cmV0dXJuIGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCggdGFnICk7XG5cdFx0XHR9XG5cdFx0fSA6XG5cblx0XHRmdW5jdGlvbiggdGFnLCBjb250ZXh0ICkge1xuXHRcdFx0dmFyIGVsZW0sXG5cdFx0XHRcdHRtcCA9IFtdLFxuXHRcdFx0XHRpID0gMCxcblx0XHRcdFx0Ly8gQnkgaGFwcHkgY29pbmNpZGVuY2UsIGEgKGJyb2tlbikgZ0VCVE4gYXBwZWFycyBvbiBEb2N1bWVudEZyYWdtZW50IG5vZGVzIHRvb1xuXHRcdFx0XHRyZXN1bHRzID0gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnICk7XG5cblx0XHRcdC8vIEZpbHRlciBvdXQgcG9zc2libGUgY29tbWVudHNcblx0XHRcdGlmICggdGFnID09PSBcIipcIiApIHtcblx0XHRcdFx0d2hpbGUgKCAoZWxlbSA9IHJlc3VsdHNbaSsrXSkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0XHRcdFx0dG1wLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdG1wO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0fTtcblxuXHQvLyBDbGFzc1xuXHRFeHByLmZpbmRbXCJDTEFTU1wiXSA9IHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAmJiBmdW5jdGlvbiggY2xhc3NOYW1lLCBjb250ZXh0ICkge1xuXHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdHJldHVybiBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoIGNsYXNzTmFtZSApO1xuXHRcdH1cblx0fTtcblxuXHQvKiBRU0EvbWF0Y2hlc1NlbGVjdG9yXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBRU0EgYW5kIG1hdGNoZXNTZWxlY3RvciBzdXBwb3J0XG5cblx0Ly8gbWF0Y2hlc1NlbGVjdG9yKDphY3RpdmUpIHJlcG9ydHMgZmFsc2Ugd2hlbiB0cnVlIChJRTkvT3BlcmEgMTEuNSlcblx0cmJ1Z2d5TWF0Y2hlcyA9IFtdO1xuXG5cdC8vIHFTYSg6Zm9jdXMpIHJlcG9ydHMgZmFsc2Ugd2hlbiB0cnVlIChDaHJvbWUgMjEpXG5cdC8vIFdlIGFsbG93IHRoaXMgYmVjYXVzZSBvZiBhIGJ1ZyBpbiBJRTgvOSB0aGF0IHRocm93cyBhbiBlcnJvclxuXHQvLyB3aGVuZXZlciBgZG9jdW1lbnQuYWN0aXZlRWxlbWVudGAgaXMgYWNjZXNzZWQgb24gYW4gaWZyYW1lXG5cdC8vIFNvLCB3ZSBhbGxvdyA6Zm9jdXMgdG8gcGFzcyB0aHJvdWdoIFFTQSBhbGwgdGhlIHRpbWUgdG8gYXZvaWQgdGhlIElFIGVycm9yXG5cdC8vIFNlZSBodHRwczovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTMzNzhcblx0cmJ1Z2d5UVNBID0gW107XG5cblx0aWYgKCAoc3VwcG9ydC5xc2EgPSBybmF0aXZlLnRlc3QoIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwgKSkgKSB7XG5cdFx0Ly8gQnVpbGQgUVNBIHJlZ2V4XG5cdFx0Ly8gUmVnZXggc3RyYXRlZ3kgYWRvcHRlZCBmcm9tIERpZWdvIFBlcmluaVxuXHRcdGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0XHQvLyBTZWxlY3QgaXMgc2V0IHRvIGVtcHR5IHN0cmluZyBvbiBwdXJwb3NlXG5cdFx0XHQvLyBUaGlzIGlzIHRvIHRlc3QgSUUncyB0cmVhdG1lbnQgb2Ygbm90IGV4cGxpY2l0bHlcblx0XHRcdC8vIHNldHRpbmcgYSBib29sZWFuIGNvbnRlbnQgYXR0cmlidXRlLFxuXHRcdFx0Ly8gc2luY2UgaXRzIHByZXNlbmNlIHNob3VsZCBiZSBlbm91Z2hcblx0XHRcdC8vIGh0dHBzOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMjM1OVxuXHRcdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5pbm5lckhUTUwgPSBcIjxhIGlkPSdcIiArIGV4cGFuZG8gKyBcIic+PC9hPlwiICtcblx0XHRcdFx0XCI8c2VsZWN0IGlkPSdcIiArIGV4cGFuZG8gKyBcIi1cXHJcXFxcJyBtc2FsbG93Y2FwdHVyZT0nJz5cIiArXG5cdFx0XHRcdFwiPG9wdGlvbiBzZWxlY3RlZD0nJz48L29wdGlvbj48L3NlbGVjdD5cIjtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4LCBPcGVyYSAxMS0xMi4xNlxuXHRcdFx0Ly8gTm90aGluZyBzaG91bGQgYmUgc2VsZWN0ZWQgd2hlbiBlbXB0eSBzdHJpbmdzIGZvbGxvdyBePSBvciAkPSBvciAqPVxuXHRcdFx0Ly8gVGhlIHRlc3QgYXR0cmlidXRlIG11c3QgYmUgdW5rbm93biBpbiBPcGVyYSBidXQgXCJzYWZlXCIgZm9yIFdpblJUXG5cdFx0XHQvLyBodHRwczovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L2llL2hoNDY1Mzg4LmFzcHgjYXR0cmlidXRlX3NlY3Rpb25cblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbChcIlttc2FsbG93Y2FwdHVyZV49JyddXCIpLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiWypeJF09XCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86Jyd8XFxcIlxcXCIpXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4XG5cdFx0XHQvLyBCb29sZWFuIGF0dHJpYnV0ZXMgYW5kIFwidmFsdWVcIiBhcmUgbm90IHRyZWF0ZWQgY29ycmVjdGx5XG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKFwiW3NlbGVjdGVkXVwiKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIlxcXFxbXCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86dmFsdWV8XCIgKyBib29sZWFucyArIFwiKVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZTwyOSwgQW5kcm9pZDw0LjQsIFNhZmFyaTw3LjArLCBpT1M8Ny4wKywgUGhhbnRvbUpTPDEuOS44K1xuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbCggXCJbaWR+PVwiICsgZXhwYW5kbyArIFwiLV1cIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCJ+PVwiKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gV2Via2l0L09wZXJhIC0gOmNoZWNrZWQgc2hvdWxkIHJldHVybiBzZWxlY3RlZCBvcHRpb24gZWxlbWVudHNcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMTEvUkVDLWNzczMtc2VsZWN0b3JzLTIwMTEwOTI5LyNjaGVja2VkXG5cdFx0XHQvLyBJRTggdGhyb3dzIGVycm9yIGhlcmUgYW5kIHdpbGwgbm90IHNlZSBsYXRlciB0ZXN0c1xuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbChcIjpjaGVja2VkXCIpLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCI6Y2hlY2tlZFwiKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDgrLCBpT1MgOCtcblx0XHRcdC8vIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xMzY4NTFcblx0XHRcdC8vIEluLXBhZ2UgYHNlbGVjdG9yI2lkIHNpYmxpbmctY29tYmluYXRvciBzZWxlY3RvcmAgZmFpbHNcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiYSNcIiArIGV4cGFuZG8gKyBcIisqXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKFwiLiMuK1srfl1cIik7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHRhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRcdFx0ZWwuaW5uZXJIVE1MID0gXCI8YSBocmVmPScnIGRpc2FibGVkPSdkaXNhYmxlZCc+PC9hPlwiICtcblx0XHRcdFx0XCI8c2VsZWN0IGRpc2FibGVkPSdkaXNhYmxlZCc+PG9wdGlvbi8+PC9zZWxlY3Q+XCI7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IFdpbmRvd3MgOCBOYXRpdmUgQXBwc1xuXHRcdFx0Ly8gVGhlIHR5cGUgYW5kIG5hbWUgYXR0cmlidXRlcyBhcmUgcmVzdHJpY3RlZCBkdXJpbmcgLmlubmVySFRNTCBhc3NpZ25tZW50XG5cdFx0XHR2YXIgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG5cdFx0XHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCBcImhpZGRlblwiICk7XG5cdFx0XHRlbC5hcHBlbmRDaGlsZCggaW5wdXQgKS5zZXRBdHRyaWJ1dGUoIFwibmFtZVwiLCBcIkRcIiApO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRThcblx0XHRcdC8vIEVuZm9yY2UgY2FzZS1zZW5zaXRpdml0eSBvZiBuYW1lIGF0dHJpYnV0ZVxuXHRcdFx0aWYgKCBlbC5xdWVyeVNlbGVjdG9yQWxsKFwiW25hbWU9ZF1cIikubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJuYW1lXCIgKyB3aGl0ZXNwYWNlICsgXCIqWypeJHwhfl0/PVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEZGIDMuNSAtIDplbmFibGVkLzpkaXNhYmxlZCBhbmQgaGlkZGVuIGVsZW1lbnRzIChoaWRkZW4gZWxlbWVudHMgYXJlIHN0aWxsIGVuYWJsZWQpXG5cdFx0XHQvLyBJRTggdGhyb3dzIGVycm9yIGhlcmUgYW5kIHdpbGwgbm90IHNlZSBsYXRlciB0ZXN0c1xuXHRcdFx0aWYgKCBlbC5xdWVyeVNlbGVjdG9yQWxsKFwiOmVuYWJsZWRcIikubGVuZ3RoICE9PSAyICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCI6ZW5hYmxlZFwiLCBcIjpkaXNhYmxlZFwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOS0xMStcblx0XHRcdC8vIElFJ3MgOmRpc2FibGVkIHNlbGVjdG9yIGRvZXMgbm90IHBpY2sgdXAgdGhlIGNoaWxkcmVuIG9mIGRpc2FibGVkIGZpZWxkc2V0c1xuXHRcdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5kaXNhYmxlZCA9IHRydWU7XG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCI6ZGlzYWJsZWRcIikubGVuZ3RoICE9PSAyICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCI6ZW5hYmxlZFwiLCBcIjpkaXNhYmxlZFwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE9wZXJhIDEwLTExIGRvZXMgbm90IHRocm93IG9uIHBvc3QtY29tbWEgaW52YWxpZCBwc2V1ZG9zXG5cdFx0XHRlbC5xdWVyeVNlbGVjdG9yQWxsKFwiKiw6eFwiKTtcblx0XHRcdHJidWdneVFTQS5wdXNoKFwiLC4qOlwiKTtcblx0XHR9KTtcblx0fVxuXG5cdGlmICggKHN1cHBvcnQubWF0Y2hlc1NlbGVjdG9yID0gcm5hdGl2ZS50ZXN0KCAobWF0Y2hlcyA9IGRvY0VsZW0ubWF0Y2hlcyB8fFxuXHRcdGRvY0VsZW0ud2Via2l0TWF0Y2hlc1NlbGVjdG9yIHx8XG5cdFx0ZG9jRWxlbS5tb3pNYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRkb2NFbGVtLm9NYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRkb2NFbGVtLm1zTWF0Y2hlc1NlbGVjdG9yKSApKSApIHtcblxuXHRcdGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0XHQvLyBDaGVjayB0byBzZWUgaWYgaXQncyBwb3NzaWJsZSB0byBkbyBtYXRjaGVzU2VsZWN0b3Jcblx0XHRcdC8vIG9uIGEgZGlzY29ubmVjdGVkIG5vZGUgKElFIDkpXG5cdFx0XHRzdXBwb3J0LmRpc2Nvbm5lY3RlZE1hdGNoID0gbWF0Y2hlcy5jYWxsKCBlbCwgXCIqXCIgKTtcblxuXHRcdFx0Ly8gVGhpcyBzaG91bGQgZmFpbCB3aXRoIGFuIGV4Y2VwdGlvblxuXHRcdFx0Ly8gR2Vja28gZG9lcyBub3QgZXJyb3IsIHJldHVybnMgZmFsc2UgaW5zdGVhZFxuXHRcdFx0bWF0Y2hlcy5jYWxsKCBlbCwgXCJbcyE9JyddOnhcIiApO1xuXHRcdFx0cmJ1Z2d5TWF0Y2hlcy5wdXNoKCBcIiE9XCIsIHBzZXVkb3MgKTtcblx0XHR9KTtcblx0fVxuXG5cdHJidWdneVFTQSA9IHJidWdneVFTQS5sZW5ndGggJiYgbmV3IFJlZ0V4cCggcmJ1Z2d5UVNBLmpvaW4oXCJ8XCIpICk7XG5cdHJidWdneU1hdGNoZXMgPSByYnVnZ3lNYXRjaGVzLmxlbmd0aCAmJiBuZXcgUmVnRXhwKCByYnVnZ3lNYXRjaGVzLmpvaW4oXCJ8XCIpICk7XG5cblx0LyogQ29udGFpbnNcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXHRoYXNDb21wYXJlID0gcm5hdGl2ZS50ZXN0KCBkb2NFbGVtLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uICk7XG5cblx0Ly8gRWxlbWVudCBjb250YWlucyBhbm90aGVyXG5cdC8vIFB1cnBvc2VmdWxseSBzZWxmLWV4Y2x1c2l2ZVxuXHQvLyBBcyBpbiwgYW4gZWxlbWVudCBkb2VzIG5vdCBjb250YWluIGl0c2VsZlxuXHRjb250YWlucyA9IGhhc0NvbXBhcmUgfHwgcm5hdGl2ZS50ZXN0KCBkb2NFbGVtLmNvbnRhaW5zICkgP1xuXHRcdGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdFx0dmFyIGFkb3duID0gYS5ub2RlVHlwZSA9PT0gOSA/IGEuZG9jdW1lbnRFbGVtZW50IDogYSxcblx0XHRcdFx0YnVwID0gYiAmJiBiLnBhcmVudE5vZGU7XG5cdFx0XHRyZXR1cm4gYSA9PT0gYnVwIHx8ICEhKCBidXAgJiYgYnVwLm5vZGVUeXBlID09PSAxICYmIChcblx0XHRcdFx0YWRvd24uY29udGFpbnMgP1xuXHRcdFx0XHRcdGFkb3duLmNvbnRhaW5zKCBidXAgKSA6XG5cdFx0XHRcdFx0YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiAmJiBhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBidXAgKSAmIDE2XG5cdFx0XHQpKTtcblx0XHR9IDpcblx0XHRmdW5jdGlvbiggYSwgYiApIHtcblx0XHRcdGlmICggYiApIHtcblx0XHRcdFx0d2hpbGUgKCAoYiA9IGIucGFyZW50Tm9kZSkgKSB7XG5cdFx0XHRcdFx0aWYgKCBiID09PSBhICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fTtcblxuXHQvKiBTb3J0aW5nXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBEb2N1bWVudCBvcmRlciBzb3J0aW5nXG5cdHNvcnRPcmRlciA9IGhhc0NvbXBhcmUgP1xuXHRmdW5jdGlvbiggYSwgYiApIHtcblxuXHRcdC8vIEZsYWcgZm9yIGR1cGxpY2F0ZSByZW1vdmFsXG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdC8vIFNvcnQgb24gbWV0aG9kIGV4aXN0ZW5jZSBpZiBvbmx5IG9uZSBpbnB1dCBoYXMgY29tcGFyZURvY3VtZW50UG9zaXRpb25cblx0XHR2YXIgY29tcGFyZSA9ICFhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIC0gIWIuY29tcGFyZURvY3VtZW50UG9zaXRpb247XG5cdFx0aWYgKCBjb21wYXJlICkge1xuXHRcdFx0cmV0dXJuIGNvbXBhcmU7XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsY3VsYXRlIHBvc2l0aW9uIGlmIGJvdGggaW5wdXRzIGJlbG9uZyB0byB0aGUgc2FtZSBkb2N1bWVudFxuXHRcdGNvbXBhcmUgPSAoIGEub3duZXJEb2N1bWVudCB8fCBhICkgPT09ICggYi5vd25lckRvY3VtZW50IHx8IGIgKSA/XG5cdFx0XHRhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBiICkgOlxuXG5cdFx0XHQvLyBPdGhlcndpc2Ugd2Uga25vdyB0aGV5IGFyZSBkaXNjb25uZWN0ZWRcblx0XHRcdDE7XG5cblx0XHQvLyBEaXNjb25uZWN0ZWQgbm9kZXNcblx0XHRpZiAoIGNvbXBhcmUgJiAxIHx8XG5cdFx0XHQoIXN1cHBvcnQuc29ydERldGFjaGVkICYmIGIuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGEgKSA9PT0gY29tcGFyZSkgKSB7XG5cblx0XHRcdC8vIENob29zZSB0aGUgZmlyc3QgZWxlbWVudCB0aGF0IGlzIHJlbGF0ZWQgdG8gb3VyIHByZWZlcnJlZCBkb2N1bWVudFxuXHRcdFx0aWYgKCBhID09PSBkb2N1bWVudCB8fCBhLm93bmVyRG9jdW1lbnQgPT09IHByZWZlcnJlZERvYyAmJiBjb250YWlucyhwcmVmZXJyZWREb2MsIGEpICkge1xuXHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIGIgPT09IGRvY3VtZW50IHx8IGIub3duZXJEb2N1bWVudCA9PT0gcHJlZmVycmVkRG9jICYmIGNvbnRhaW5zKHByZWZlcnJlZERvYywgYikgKSB7XG5cdFx0XHRcdHJldHVybiAxO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYWludGFpbiBvcmlnaW5hbCBvcmRlclxuXHRcdFx0cmV0dXJuIHNvcnRJbnB1dCA/XG5cdFx0XHRcdCggaW5kZXhPZiggc29ydElucHV0LCBhICkgLSBpbmRleE9mKCBzb3J0SW5wdXQsIGIgKSApIDpcblx0XHRcdFx0MDtcblx0XHR9XG5cblx0XHRyZXR1cm4gY29tcGFyZSAmIDQgPyAtMSA6IDE7XG5cdH0gOlxuXHRmdW5jdGlvbiggYSwgYiApIHtcblx0XHQvLyBFeGl0IGVhcmx5IGlmIHRoZSBub2RlcyBhcmUgaWRlbnRpY2FsXG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdHZhciBjdXIsXG5cdFx0XHRpID0gMCxcblx0XHRcdGF1cCA9IGEucGFyZW50Tm9kZSxcblx0XHRcdGJ1cCA9IGIucGFyZW50Tm9kZSxcblx0XHRcdGFwID0gWyBhIF0sXG5cdFx0XHRicCA9IFsgYiBdO1xuXG5cdFx0Ly8gUGFyZW50bGVzcyBub2RlcyBhcmUgZWl0aGVyIGRvY3VtZW50cyBvciBkaXNjb25uZWN0ZWRcblx0XHRpZiAoICFhdXAgfHwgIWJ1cCApIHtcblx0XHRcdHJldHVybiBhID09PSBkb2N1bWVudCA/IC0xIDpcblx0XHRcdFx0YiA9PT0gZG9jdW1lbnQgPyAxIDpcblx0XHRcdFx0YXVwID8gLTEgOlxuXHRcdFx0XHRidXAgPyAxIDpcblx0XHRcdFx0c29ydElucHV0ID9cblx0XHRcdFx0KCBpbmRleE9mKCBzb3J0SW5wdXQsIGEgKSAtIGluZGV4T2YoIHNvcnRJbnB1dCwgYiApICkgOlxuXHRcdFx0XHQwO1xuXG5cdFx0Ly8gSWYgdGhlIG5vZGVzIGFyZSBzaWJsaW5ncywgd2UgY2FuIGRvIGEgcXVpY2sgY2hlY2tcblx0XHR9IGVsc2UgaWYgKCBhdXAgPT09IGJ1cCApIHtcblx0XHRcdHJldHVybiBzaWJsaW5nQ2hlY2soIGEsIGIgKTtcblx0XHR9XG5cblx0XHQvLyBPdGhlcndpc2Ugd2UgbmVlZCBmdWxsIGxpc3RzIG9mIHRoZWlyIGFuY2VzdG9ycyBmb3IgY29tcGFyaXNvblxuXHRcdGN1ciA9IGE7XG5cdFx0d2hpbGUgKCAoY3VyID0gY3VyLnBhcmVudE5vZGUpICkge1xuXHRcdFx0YXAudW5zaGlmdCggY3VyICk7XG5cdFx0fVxuXHRcdGN1ciA9IGI7XG5cdFx0d2hpbGUgKCAoY3VyID0gY3VyLnBhcmVudE5vZGUpICkge1xuXHRcdFx0YnAudW5zaGlmdCggY3VyICk7XG5cdFx0fVxuXG5cdFx0Ly8gV2FsayBkb3duIHRoZSB0cmVlIGxvb2tpbmcgZm9yIGEgZGlzY3JlcGFuY3lcblx0XHR3aGlsZSAoIGFwW2ldID09PSBicFtpXSApIHtcblx0XHRcdGkrKztcblx0XHR9XG5cblx0XHRyZXR1cm4gaSA/XG5cdFx0XHQvLyBEbyBhIHNpYmxpbmcgY2hlY2sgaWYgdGhlIG5vZGVzIGhhdmUgYSBjb21tb24gYW5jZXN0b3Jcblx0XHRcdHNpYmxpbmdDaGVjayggYXBbaV0sIGJwW2ldICkgOlxuXG5cdFx0XHQvLyBPdGhlcndpc2Ugbm9kZXMgaW4gb3VyIGRvY3VtZW50IHNvcnQgZmlyc3Rcblx0XHRcdGFwW2ldID09PSBwcmVmZXJyZWREb2MgPyAtMSA6XG5cdFx0XHRicFtpXSA9PT0gcHJlZmVycmVkRG9jID8gMSA6XG5cdFx0XHQwO1xuXHR9O1xuXG5cdHJldHVybiBkb2N1bWVudDtcbn07XG5cblNpenpsZS5tYXRjaGVzID0gZnVuY3Rpb24oIGV4cHIsIGVsZW1lbnRzICkge1xuXHRyZXR1cm4gU2l6emxlKCBleHByLCBudWxsLCBudWxsLCBlbGVtZW50cyApO1xufTtcblxuU2l6emxlLm1hdGNoZXNTZWxlY3RvciA9IGZ1bmN0aW9uKCBlbGVtLCBleHByICkge1xuXHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcblx0aWYgKCAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBlbGVtICkgIT09IGRvY3VtZW50ICkge1xuXHRcdHNldERvY3VtZW50KCBlbGVtICk7XG5cdH1cblxuXHQvLyBNYWtlIHN1cmUgdGhhdCBhdHRyaWJ1dGUgc2VsZWN0b3JzIGFyZSBxdW90ZWRcblx0ZXhwciA9IGV4cHIucmVwbGFjZSggcmF0dHJpYnV0ZVF1b3RlcywgXCI9JyQxJ11cIiApO1xuXG5cdGlmICggc3VwcG9ydC5tYXRjaGVzU2VsZWN0b3IgJiYgZG9jdW1lbnRJc0hUTUwgJiZcblx0XHQhY29tcGlsZXJDYWNoZVsgZXhwciArIFwiIFwiIF0gJiZcblx0XHQoICFyYnVnZ3lNYXRjaGVzIHx8ICFyYnVnZ3lNYXRjaGVzLnRlc3QoIGV4cHIgKSApICYmXG5cdFx0KCAhcmJ1Z2d5UVNBICAgICB8fCAhcmJ1Z2d5UVNBLnRlc3QoIGV4cHIgKSApICkge1xuXG5cdFx0dHJ5IHtcblx0XHRcdHZhciByZXQgPSBtYXRjaGVzLmNhbGwoIGVsZW0sIGV4cHIgKTtcblxuXHRcdFx0Ly8gSUUgOSdzIG1hdGNoZXNTZWxlY3RvciByZXR1cm5zIGZhbHNlIG9uIGRpc2Nvbm5lY3RlZCBub2Rlc1xuXHRcdFx0aWYgKCByZXQgfHwgc3VwcG9ydC5kaXNjb25uZWN0ZWRNYXRjaCB8fFxuXHRcdFx0XHRcdC8vIEFzIHdlbGwsIGRpc2Nvbm5lY3RlZCBub2RlcyBhcmUgc2FpZCB0byBiZSBpbiBhIGRvY3VtZW50XG5cdFx0XHRcdFx0Ly8gZnJhZ21lbnQgaW4gSUUgOVxuXHRcdFx0XHRcdGVsZW0uZG9jdW1lbnQgJiYgZWxlbS5kb2N1bWVudC5ub2RlVHlwZSAhPT0gMTEgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cdFx0fSBjYXRjaCAoZSkge31cblx0fVxuXG5cdHJldHVybiBTaXp6bGUoIGV4cHIsIGRvY3VtZW50LCBudWxsLCBbIGVsZW0gXSApLmxlbmd0aCA+IDA7XG59O1xuXG5TaXp6bGUuY29udGFpbnMgPSBmdW5jdGlvbiggY29udGV4dCwgZWxlbSApIHtcblx0Ly8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkXG5cdGlmICggKCBjb250ZXh0Lm93bmVyRG9jdW1lbnQgfHwgY29udGV4dCApICE9PSBkb2N1bWVudCApIHtcblx0XHRzZXREb2N1bWVudCggY29udGV4dCApO1xuXHR9XG5cdHJldHVybiBjb250YWlucyggY29udGV4dCwgZWxlbSApO1xufTtcblxuU2l6emxlLmF0dHIgPSBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0Ly8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkXG5cdGlmICggKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSApICE9PSBkb2N1bWVudCApIHtcblx0XHRzZXREb2N1bWVudCggZWxlbSApO1xuXHR9XG5cblx0dmFyIGZuID0gRXhwci5hdHRySGFuZGxlWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSxcblx0XHQvLyBEb24ndCBnZXQgZm9vbGVkIGJ5IE9iamVjdC5wcm90b3R5cGUgcHJvcGVydGllcyAoalF1ZXJ5ICMxMzgwNylcblx0XHR2YWwgPSBmbiAmJiBoYXNPd24uY2FsbCggRXhwci5hdHRySGFuZGxlLCBuYW1lLnRvTG93ZXJDYXNlKCkgKSA/XG5cdFx0XHRmbiggZWxlbSwgbmFtZSwgIWRvY3VtZW50SXNIVE1MICkgOlxuXHRcdFx0dW5kZWZpbmVkO1xuXG5cdHJldHVybiB2YWwgIT09IHVuZGVmaW5lZCA/XG5cdFx0dmFsIDpcblx0XHRzdXBwb3J0LmF0dHJpYnV0ZXMgfHwgIWRvY3VtZW50SXNIVE1MID9cblx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lICkgOlxuXHRcdFx0KHZhbCA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZShuYW1lKSkgJiYgdmFsLnNwZWNpZmllZCA/XG5cdFx0XHRcdHZhbC52YWx1ZSA6XG5cdFx0XHRcdG51bGw7XG59O1xuXG5TaXp6bGUuZXNjYXBlID0gZnVuY3Rpb24oIHNlbCApIHtcblx0cmV0dXJuIChzZWwgKyBcIlwiKS5yZXBsYWNlKCByY3NzZXNjYXBlLCBmY3NzZXNjYXBlICk7XG59O1xuXG5TaXp6bGUuZXJyb3IgPSBmdW5jdGlvbiggbXNnICkge1xuXHR0aHJvdyBuZXcgRXJyb3IoIFwiU3ludGF4IGVycm9yLCB1bnJlY29nbml6ZWQgZXhwcmVzc2lvbjogXCIgKyBtc2cgKTtcbn07XG5cbi8qKlxuICogRG9jdW1lbnQgc29ydGluZyBhbmQgcmVtb3ZpbmcgZHVwbGljYXRlc1xuICogQHBhcmFtIHtBcnJheUxpa2V9IHJlc3VsdHNcbiAqL1xuU2l6emxlLnVuaXF1ZVNvcnQgPSBmdW5jdGlvbiggcmVzdWx0cyApIHtcblx0dmFyIGVsZW0sXG5cdFx0ZHVwbGljYXRlcyA9IFtdLFxuXHRcdGogPSAwLFxuXHRcdGkgPSAwO1xuXG5cdC8vIFVubGVzcyB3ZSAqa25vdyogd2UgY2FuIGRldGVjdCBkdXBsaWNhdGVzLCBhc3N1bWUgdGhlaXIgcHJlc2VuY2Vcblx0aGFzRHVwbGljYXRlID0gIXN1cHBvcnQuZGV0ZWN0RHVwbGljYXRlcztcblx0c29ydElucHV0ID0gIXN1cHBvcnQuc29ydFN0YWJsZSAmJiByZXN1bHRzLnNsaWNlKCAwICk7XG5cdHJlc3VsdHMuc29ydCggc29ydE9yZGVyICk7XG5cblx0aWYgKCBoYXNEdXBsaWNhdGUgKSB7XG5cdFx0d2hpbGUgKCAoZWxlbSA9IHJlc3VsdHNbaSsrXSkgKSB7XG5cdFx0XHRpZiAoIGVsZW0gPT09IHJlc3VsdHNbIGkgXSApIHtcblx0XHRcdFx0aiA9IGR1cGxpY2F0ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdH1cblx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdHJlc3VsdHMuc3BsaWNlKCBkdXBsaWNhdGVzWyBqIF0sIDEgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBDbGVhciBpbnB1dCBhZnRlciBzb3J0aW5nIHRvIHJlbGVhc2Ugb2JqZWN0c1xuXHQvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9zaXp6bGUvcHVsbC8yMjVcblx0c29ydElucHV0ID0gbnVsbDtcblxuXHRyZXR1cm4gcmVzdWx0cztcbn07XG5cbi8qKlxuICogVXRpbGl0eSBmdW5jdGlvbiBmb3IgcmV0cmlldmluZyB0aGUgdGV4dCB2YWx1ZSBvZiBhbiBhcnJheSBvZiBET00gbm9kZXNcbiAqIEBwYXJhbSB7QXJyYXl8RWxlbWVudH0gZWxlbVxuICovXG5nZXRUZXh0ID0gU2l6emxlLmdldFRleHQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0dmFyIG5vZGUsXG5cdFx0cmV0ID0gXCJcIixcblx0XHRpID0gMCxcblx0XHRub2RlVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0aWYgKCAhbm9kZVR5cGUgKSB7XG5cdFx0Ly8gSWYgbm8gbm9kZVR5cGUsIHRoaXMgaXMgZXhwZWN0ZWQgdG8gYmUgYW4gYXJyYXlcblx0XHR3aGlsZSAoIChub2RlID0gZWxlbVtpKytdKSApIHtcblx0XHRcdC8vIERvIG5vdCB0cmF2ZXJzZSBjb21tZW50IG5vZGVzXG5cdFx0XHRyZXQgKz0gZ2V0VGV4dCggbm9kZSApO1xuXHRcdH1cblx0fSBlbHNlIGlmICggbm9kZVR5cGUgPT09IDEgfHwgbm9kZVR5cGUgPT09IDkgfHwgbm9kZVR5cGUgPT09IDExICkge1xuXHRcdC8vIFVzZSB0ZXh0Q29udGVudCBmb3IgZWxlbWVudHNcblx0XHQvLyBpbm5lclRleHQgdXNhZ2UgcmVtb3ZlZCBmb3IgY29uc2lzdGVuY3kgb2YgbmV3IGxpbmVzIChqUXVlcnkgIzExMTUzKVxuXHRcdGlmICggdHlwZW9mIGVsZW0udGV4dENvbnRlbnQgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS50ZXh0Q29udGVudDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gVHJhdmVyc2UgaXRzIGNoaWxkcmVuXG5cdFx0XHRmb3IgKCBlbGVtID0gZWxlbS5maXJzdENoaWxkOyBlbGVtOyBlbGVtID0gZWxlbS5uZXh0U2libGluZyApIHtcblx0XHRcdFx0cmV0ICs9IGdldFRleHQoIGVsZW0gKTtcblx0XHRcdH1cblx0XHR9XG5cdH0gZWxzZSBpZiAoIG5vZGVUeXBlID09PSAzIHx8IG5vZGVUeXBlID09PSA0ICkge1xuXHRcdHJldHVybiBlbGVtLm5vZGVWYWx1ZTtcblx0fVxuXHQvLyBEbyBub3QgaW5jbHVkZSBjb21tZW50IG9yIHByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb24gbm9kZXNcblxuXHRyZXR1cm4gcmV0O1xufTtcblxuRXhwciA9IFNpenpsZS5zZWxlY3RvcnMgPSB7XG5cblx0Ly8gQ2FuIGJlIGFkanVzdGVkIGJ5IHRoZSB1c2VyXG5cdGNhY2hlTGVuZ3RoOiA1MCxcblxuXHRjcmVhdGVQc2V1ZG86IG1hcmtGdW5jdGlvbixcblxuXHRtYXRjaDogbWF0Y2hFeHByLFxuXG5cdGF0dHJIYW5kbGU6IHt9LFxuXG5cdGZpbmQ6IHt9LFxuXG5cdHJlbGF0aXZlOiB7XG5cdFx0XCI+XCI6IHsgZGlyOiBcInBhcmVudE5vZGVcIiwgZmlyc3Q6IHRydWUgfSxcblx0XHRcIiBcIjogeyBkaXI6IFwicGFyZW50Tm9kZVwiIH0sXG5cdFx0XCIrXCI6IHsgZGlyOiBcInByZXZpb3VzU2libGluZ1wiLCBmaXJzdDogdHJ1ZSB9LFxuXHRcdFwiflwiOiB7IGRpcjogXCJwcmV2aW91c1NpYmxpbmdcIiB9XG5cdH0sXG5cblx0cHJlRmlsdGVyOiB7XG5cdFx0XCJBVFRSXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblx0XHRcdG1hdGNoWzFdID0gbWF0Y2hbMV0ucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblxuXHRcdFx0Ly8gTW92ZSB0aGUgZ2l2ZW4gdmFsdWUgdG8gbWF0Y2hbM10gd2hldGhlciBxdW90ZWQgb3IgdW5xdW90ZWRcblx0XHRcdG1hdGNoWzNdID0gKCBtYXRjaFszXSB8fCBtYXRjaFs0XSB8fCBtYXRjaFs1XSB8fCBcIlwiICkucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblxuXHRcdFx0aWYgKCBtYXRjaFsyXSA9PT0gXCJ+PVwiICkge1xuXHRcdFx0XHRtYXRjaFszXSA9IFwiIFwiICsgbWF0Y2hbM10gKyBcIiBcIjtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG1hdGNoLnNsaWNlKCAwLCA0ICk7XG5cdFx0fSxcblxuXHRcdFwiQ0hJTERcIjogZnVuY3Rpb24oIG1hdGNoICkge1xuXHRcdFx0LyogbWF0Y2hlcyBmcm9tIG1hdGNoRXhwcltcIkNISUxEXCJdXG5cdFx0XHRcdDEgdHlwZSAob25seXxudGh8Li4uKVxuXHRcdFx0XHQyIHdoYXQgKGNoaWxkfG9mLXR5cGUpXG5cdFx0XHRcdDMgYXJndW1lbnQgKGV2ZW58b2RkfFxcZCp8XFxkKm4oWystXVxcZCspP3wuLi4pXG5cdFx0XHRcdDQgeG4tY29tcG9uZW50IG9mIHhuK3kgYXJndW1lbnQgKFsrLV0/XFxkKm58KVxuXHRcdFx0XHQ1IHNpZ24gb2YgeG4tY29tcG9uZW50XG5cdFx0XHRcdDYgeCBvZiB4bi1jb21wb25lbnRcblx0XHRcdFx0NyBzaWduIG9mIHktY29tcG9uZW50XG5cdFx0XHRcdDggeSBvZiB5LWNvbXBvbmVudFxuXHRcdFx0Ki9cblx0XHRcdG1hdGNoWzFdID0gbWF0Y2hbMV0udG9Mb3dlckNhc2UoKTtcblxuXHRcdFx0aWYgKCBtYXRjaFsxXS5zbGljZSggMCwgMyApID09PSBcIm50aFwiICkge1xuXHRcdFx0XHQvLyBudGgtKiByZXF1aXJlcyBhcmd1bWVudFxuXHRcdFx0XHRpZiAoICFtYXRjaFszXSApIHtcblx0XHRcdFx0XHRTaXp6bGUuZXJyb3IoIG1hdGNoWzBdICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBudW1lcmljIHggYW5kIHkgcGFyYW1ldGVycyBmb3IgRXhwci5maWx0ZXIuQ0hJTERcblx0XHRcdFx0Ly8gcmVtZW1iZXIgdGhhdCBmYWxzZS90cnVlIGNhc3QgcmVzcGVjdGl2ZWx5IHRvIDAvMVxuXHRcdFx0XHRtYXRjaFs0XSA9ICsoIG1hdGNoWzRdID8gbWF0Y2hbNV0gKyAobWF0Y2hbNl0gfHwgMSkgOiAyICogKCBtYXRjaFszXSA9PT0gXCJldmVuXCIgfHwgbWF0Y2hbM10gPT09IFwib2RkXCIgKSApO1xuXHRcdFx0XHRtYXRjaFs1XSA9ICsoICggbWF0Y2hbN10gKyBtYXRjaFs4XSApIHx8IG1hdGNoWzNdID09PSBcIm9kZFwiICk7XG5cblx0XHRcdC8vIG90aGVyIHR5cGVzIHByb2hpYml0IGFyZ3VtZW50c1xuXHRcdFx0fSBlbHNlIGlmICggbWF0Y2hbM10gKSB7XG5cdFx0XHRcdFNpenpsZS5lcnJvciggbWF0Y2hbMF0gKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG1hdGNoO1xuXHRcdH0sXG5cblx0XHRcIlBTRVVET1wiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XG5cdFx0XHR2YXIgZXhjZXNzLFxuXHRcdFx0XHR1bnF1b3RlZCA9ICFtYXRjaFs2XSAmJiBtYXRjaFsyXTtcblxuXHRcdFx0aWYgKCBtYXRjaEV4cHJbXCJDSElMRFwiXS50ZXN0KCBtYXRjaFswXSApICkge1xuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWNjZXB0IHF1b3RlZCBhcmd1bWVudHMgYXMtaXNcblx0XHRcdGlmICggbWF0Y2hbM10gKSB7XG5cdFx0XHRcdG1hdGNoWzJdID0gbWF0Y2hbNF0gfHwgbWF0Y2hbNV0gfHwgXCJcIjtcblxuXHRcdFx0Ly8gU3RyaXAgZXhjZXNzIGNoYXJhY3RlcnMgZnJvbSB1bnF1b3RlZCBhcmd1bWVudHNcblx0XHRcdH0gZWxzZSBpZiAoIHVucXVvdGVkICYmIHJwc2V1ZG8udGVzdCggdW5xdW90ZWQgKSAmJlxuXHRcdFx0XHQvLyBHZXQgZXhjZXNzIGZyb20gdG9rZW5pemUgKHJlY3Vyc2l2ZWx5KVxuXHRcdFx0XHQoZXhjZXNzID0gdG9rZW5pemUoIHVucXVvdGVkLCB0cnVlICkpICYmXG5cdFx0XHRcdC8vIGFkdmFuY2UgdG8gdGhlIG5leHQgY2xvc2luZyBwYXJlbnRoZXNpc1xuXHRcdFx0XHQoZXhjZXNzID0gdW5xdW90ZWQuaW5kZXhPZiggXCIpXCIsIHVucXVvdGVkLmxlbmd0aCAtIGV4Y2VzcyApIC0gdW5xdW90ZWQubGVuZ3RoKSApIHtcblxuXHRcdFx0XHQvLyBleGNlc3MgaXMgYSBuZWdhdGl2ZSBpbmRleFxuXHRcdFx0XHRtYXRjaFswXSA9IG1hdGNoWzBdLnNsaWNlKCAwLCBleGNlc3MgKTtcblx0XHRcdFx0bWF0Y2hbMl0gPSB1bnF1b3RlZC5zbGljZSggMCwgZXhjZXNzICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJldHVybiBvbmx5IGNhcHR1cmVzIG5lZWRlZCBieSB0aGUgcHNldWRvIGZpbHRlciBtZXRob2QgKHR5cGUgYW5kIGFyZ3VtZW50KVxuXHRcdFx0cmV0dXJuIG1hdGNoLnNsaWNlKCAwLCAzICk7XG5cdFx0fVxuXHR9LFxuXG5cdGZpbHRlcjoge1xuXG5cdFx0XCJUQUdcIjogZnVuY3Rpb24oIG5vZGVOYW1lU2VsZWN0b3IgKSB7XG5cdFx0XHR2YXIgbm9kZU5hbWUgPSBub2RlTmFtZVNlbGVjdG9yLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICkudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiBub2RlTmFtZVNlbGVjdG9yID09PSBcIipcIiA/XG5cdFx0XHRcdGZ1bmN0aW9uKCkgeyByZXR1cm4gdHJ1ZTsgfSA6XG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiBlbGVtLm5vZGVOYW1lICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbm9kZU5hbWU7XG5cdFx0XHRcdH07XG5cdFx0fSxcblxuXHRcdFwiQ0xBU1NcIjogZnVuY3Rpb24oIGNsYXNzTmFtZSApIHtcblx0XHRcdHZhciBwYXR0ZXJuID0gY2xhc3NDYWNoZVsgY2xhc3NOYW1lICsgXCIgXCIgXTtcblxuXHRcdFx0cmV0dXJuIHBhdHRlcm4gfHxcblx0XHRcdFx0KHBhdHRlcm4gPSBuZXcgUmVnRXhwKCBcIihefFwiICsgd2hpdGVzcGFjZSArIFwiKVwiICsgY2xhc3NOYW1lICsgXCIoXCIgKyB3aGl0ZXNwYWNlICsgXCJ8JClcIiApKSAmJlxuXHRcdFx0XHRjbGFzc0NhY2hlKCBjbGFzc05hbWUsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiBwYXR0ZXJuLnRlc3QoIHR5cGVvZiBlbGVtLmNsYXNzTmFtZSA9PT0gXCJzdHJpbmdcIiAmJiBlbGVtLmNsYXNzTmFtZSB8fCB0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGUgIT09IFwidW5kZWZpbmVkXCIgJiYgZWxlbS5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKSB8fCBcIlwiICk7XG5cdFx0XHRcdH0pO1xuXHRcdH0sXG5cblx0XHRcIkFUVFJcIjogZnVuY3Rpb24oIG5hbWUsIG9wZXJhdG9yLCBjaGVjayApIHtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIHJlc3VsdCA9IFNpenpsZS5hdHRyKCBlbGVtLCBuYW1lICk7XG5cblx0XHRcdFx0aWYgKCByZXN1bHQgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXR1cm4gb3BlcmF0b3IgPT09IFwiIT1cIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoICFvcGVyYXRvciApIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJlc3VsdCArPSBcIlwiO1xuXG5cdFx0XHRcdHJldHVybiBvcGVyYXRvciA9PT0gXCI9XCIgPyByZXN1bHQgPT09IGNoZWNrIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIhPVwiID8gcmVzdWx0ICE9PSBjaGVjayA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiXj1cIiA/IGNoZWNrICYmIHJlc3VsdC5pbmRleE9mKCBjaGVjayApID09PSAwIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIqPVwiID8gY2hlY2sgJiYgcmVzdWx0LmluZGV4T2YoIGNoZWNrICkgPiAtMSA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiJD1cIiA/IGNoZWNrICYmIHJlc3VsdC5zbGljZSggLWNoZWNrLmxlbmd0aCApID09PSBjaGVjayA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwifj1cIiA/ICggXCIgXCIgKyByZXN1bHQucmVwbGFjZSggcndoaXRlc3BhY2UsIFwiIFwiICkgKyBcIiBcIiApLmluZGV4T2YoIGNoZWNrICkgPiAtMSA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwifD1cIiA/IHJlc3VsdCA9PT0gY2hlY2sgfHwgcmVzdWx0LnNsaWNlKCAwLCBjaGVjay5sZW5ndGggKyAxICkgPT09IGNoZWNrICsgXCItXCIgOlxuXHRcdFx0XHRcdGZhbHNlO1xuXHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0XCJDSElMRFwiOiBmdW5jdGlvbiggdHlwZSwgd2hhdCwgYXJndW1lbnQsIGZpcnN0LCBsYXN0ICkge1xuXHRcdFx0dmFyIHNpbXBsZSA9IHR5cGUuc2xpY2UoIDAsIDMgKSAhPT0gXCJudGhcIixcblx0XHRcdFx0Zm9yd2FyZCA9IHR5cGUuc2xpY2UoIC00ICkgIT09IFwibGFzdFwiLFxuXHRcdFx0XHRvZlR5cGUgPSB3aGF0ID09PSBcIm9mLXR5cGVcIjtcblxuXHRcdFx0cmV0dXJuIGZpcnN0ID09PSAxICYmIGxhc3QgPT09IDAgP1xuXG5cdFx0XHRcdC8vIFNob3J0Y3V0IGZvciA6bnRoLSoobilcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0cmV0dXJuICEhZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0XHR9IDpcblxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0XHRcdHZhciBjYWNoZSwgdW5pcXVlQ2FjaGUsIG91dGVyQ2FjaGUsIG5vZGUsIG5vZGVJbmRleCwgc3RhcnQsXG5cdFx0XHRcdFx0XHRkaXIgPSBzaW1wbGUgIT09IGZvcndhcmQgPyBcIm5leHRTaWJsaW5nXCIgOiBcInByZXZpb3VzU2libGluZ1wiLFxuXHRcdFx0XHRcdFx0cGFyZW50ID0gZWxlbS5wYXJlbnROb2RlLFxuXHRcdFx0XHRcdFx0bmFtZSA9IG9mVHlwZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCksXG5cdFx0XHRcdFx0XHR1c2VDYWNoZSA9ICF4bWwgJiYgIW9mVHlwZSxcblx0XHRcdFx0XHRcdGRpZmYgPSBmYWxzZTtcblxuXHRcdFx0XHRcdGlmICggcGFyZW50ICkge1xuXG5cdFx0XHRcdFx0XHQvLyA6KGZpcnN0fGxhc3R8b25seSktKGNoaWxkfG9mLXR5cGUpXG5cdFx0XHRcdFx0XHRpZiAoIHNpbXBsZSApIHtcblx0XHRcdFx0XHRcdFx0d2hpbGUgKCBkaXIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0bm9kZSA9IGVsZW07XG5cdFx0XHRcdFx0XHRcdFx0d2hpbGUgKCAobm9kZSA9IG5vZGVbIGRpciBdKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggb2ZUeXBlID9cblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lIDpcblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdC8vIFJldmVyc2UgZGlyZWN0aW9uIGZvciA6b25seS0qIChpZiB3ZSBoYXZlbid0IHlldCBkb25lIHNvKVxuXHRcdFx0XHRcdFx0XHRcdHN0YXJ0ID0gZGlyID0gdHlwZSA9PT0gXCJvbmx5XCIgJiYgIXN0YXJ0ICYmIFwibmV4dFNpYmxpbmdcIjtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0c3RhcnQgPSBbIGZvcndhcmQgPyBwYXJlbnQuZmlyc3RDaGlsZCA6IHBhcmVudC5sYXN0Q2hpbGQgXTtcblxuXHRcdFx0XHRcdFx0Ly8gbm9uLXhtbCA6bnRoLWNoaWxkKC4uLikgc3RvcmVzIGNhY2hlIGRhdGEgb24gYHBhcmVudGBcblx0XHRcdFx0XHRcdGlmICggZm9yd2FyZCAmJiB1c2VDYWNoZSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBTZWVrIGBlbGVtYCBmcm9tIGEgcHJldmlvdXNseS1jYWNoZWQgaW5kZXhcblxuXHRcdFx0XHRcdFx0XHQvLyAuLi5pbiBhIGd6aXAtZnJpZW5kbHkgd2F5XG5cdFx0XHRcdFx0XHRcdG5vZGUgPSBwYXJlbnQ7XG5cdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBub2RlWyBleHBhbmRvIF0gfHwgKG5vZGVbIGV4cGFuZG8gXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdChvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0Y2FjaGUgPSB1bmlxdWVDYWNoZVsgdHlwZSBdIHx8IFtdO1xuXHRcdFx0XHRcdFx0XHRub2RlSW5kZXggPSBjYWNoZVsgMCBdID09PSBkaXJydW5zICYmIGNhY2hlWyAxIF07XG5cdFx0XHRcdFx0XHRcdGRpZmYgPSBub2RlSW5kZXggJiYgY2FjaGVbIDIgXTtcblx0XHRcdFx0XHRcdFx0bm9kZSA9IG5vZGVJbmRleCAmJiBwYXJlbnQuY2hpbGROb2Rlc1sgbm9kZUluZGV4IF07XG5cblx0XHRcdFx0XHRcdFx0d2hpbGUgKCAobm9kZSA9ICsrbm9kZUluZGV4ICYmIG5vZGUgJiYgbm9kZVsgZGlyIF0gfHxcblxuXHRcdFx0XHRcdFx0XHRcdC8vIEZhbGxiYWNrIHRvIHNlZWtpbmcgYGVsZW1gIGZyb20gdGhlIHN0YXJ0XG5cdFx0XHRcdFx0XHRcdFx0KGRpZmYgPSBub2RlSW5kZXggPSAwKSB8fCBzdGFydC5wb3AoKSkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBXaGVuIGZvdW5kLCBjYWNoZSBpbmRleGVzIG9uIGBwYXJlbnRgIGFuZCBicmVha1xuXHRcdFx0XHRcdFx0XHRcdGlmICggbm9kZS5ub2RlVHlwZSA9PT0gMSAmJiArK2RpZmYgJiYgbm9kZSA9PT0gZWxlbSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlWyB0eXBlIF0gPSBbIGRpcnJ1bnMsIG5vZGVJbmRleCwgZGlmZiBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdC8vIFVzZSBwcmV2aW91c2x5LWNhY2hlZCBlbGVtZW50IGluZGV4IGlmIGF2YWlsYWJsZVxuXHRcdFx0XHRcdFx0XHRpZiAoIHVzZUNhY2hlICkge1xuXHRcdFx0XHRcdFx0XHRcdC8vIC4uLmluIGEgZ3ppcC1mcmllbmRseSB3YXlcblx0XHRcdFx0XHRcdFx0XHRub2RlID0gZWxlbTtcblx0XHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVsgZXhwYW5kbyBdIHx8IChub2RlWyBleHBhbmRvIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRcdChvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0XHRjYWNoZSA9IHVuaXF1ZUNhY2hlWyB0eXBlIF0gfHwgW107XG5cdFx0XHRcdFx0XHRcdFx0bm9kZUluZGV4ID0gY2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBjYWNoZVsgMSBdO1xuXHRcdFx0XHRcdFx0XHRcdGRpZmYgPSBub2RlSW5kZXg7XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHQvLyB4bWwgOm50aC1jaGlsZCguLi4pXG5cdFx0XHRcdFx0XHRcdC8vIG9yIDpudGgtbGFzdC1jaGlsZCguLi4pIG9yIDpudGgoLWxhc3QpPy1vZi10eXBlKC4uLilcblx0XHRcdFx0XHRcdFx0aWYgKCBkaWZmID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRcdFx0XHQvLyBVc2UgdGhlIHNhbWUgbG9vcCBhcyBhYm92ZSB0byBzZWVrIGBlbGVtYCBmcm9tIHRoZSBzdGFydFxuXHRcdFx0XHRcdFx0XHRcdHdoaWxlICggKG5vZGUgPSArK25vZGVJbmRleCAmJiBub2RlICYmIG5vZGVbIGRpciBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHQoZGlmZiA9IG5vZGVJbmRleCA9IDApIHx8IHN0YXJ0LnBvcCgpKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCAoIG9mVHlwZSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZVR5cGUgPT09IDEgKSAmJlxuXHRcdFx0XHRcdFx0XHRcdFx0XHQrK2RpZmYgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gQ2FjaGUgdGhlIGluZGV4IG9mIGVhY2ggZW5jb3VudGVyZWQgZWxlbWVudFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIHVzZUNhY2hlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBub2RlWyBleHBhbmRvIF0gfHwgKG5vZGVbIGV4cGFuZG8gXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0KG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlWyB0eXBlIF0gPSBbIGRpcnJ1bnMsIGRpZmYgXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggbm9kZSA9PT0gZWxlbSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBJbmNvcnBvcmF0ZSB0aGUgb2Zmc2V0LCB0aGVuIGNoZWNrIGFnYWluc3QgY3ljbGUgc2l6ZVxuXHRcdFx0XHRcdFx0ZGlmZiAtPSBsYXN0O1xuXHRcdFx0XHRcdFx0cmV0dXJuIGRpZmYgPT09IGZpcnN0IHx8ICggZGlmZiAlIGZpcnN0ID09PSAwICYmIGRpZmYgLyBmaXJzdCA+PSAwICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRcIlBTRVVET1wiOiBmdW5jdGlvbiggcHNldWRvLCBhcmd1bWVudCApIHtcblx0XHRcdC8vIHBzZXVkby1jbGFzcyBuYW1lcyBhcmUgY2FzZS1pbnNlbnNpdGl2ZVxuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNwc2V1ZG8tY2xhc3Nlc1xuXHRcdFx0Ly8gUHJpb3JpdGl6ZSBieSBjYXNlIHNlbnNpdGl2aXR5IGluIGNhc2UgY3VzdG9tIHBzZXVkb3MgYXJlIGFkZGVkIHdpdGggdXBwZXJjYXNlIGxldHRlcnNcblx0XHRcdC8vIFJlbWVtYmVyIHRoYXQgc2V0RmlsdGVycyBpbmhlcml0cyBmcm9tIHBzZXVkb3Ncblx0XHRcdHZhciBhcmdzLFxuXHRcdFx0XHRmbiA9IEV4cHIucHNldWRvc1sgcHNldWRvIF0gfHwgRXhwci5zZXRGaWx0ZXJzWyBwc2V1ZG8udG9Mb3dlckNhc2UoKSBdIHx8XG5cdFx0XHRcdFx0U2l6emxlLmVycm9yKCBcInVuc3VwcG9ydGVkIHBzZXVkbzogXCIgKyBwc2V1ZG8gKTtcblxuXHRcdFx0Ly8gVGhlIHVzZXIgbWF5IHVzZSBjcmVhdGVQc2V1ZG8gdG8gaW5kaWNhdGUgdGhhdFxuXHRcdFx0Ly8gYXJndW1lbnRzIGFyZSBuZWVkZWQgdG8gY3JlYXRlIHRoZSBmaWx0ZXIgZnVuY3Rpb25cblx0XHRcdC8vIGp1c3QgYXMgU2l6emxlIGRvZXNcblx0XHRcdGlmICggZm5bIGV4cGFuZG8gXSApIHtcblx0XHRcdFx0cmV0dXJuIGZuKCBhcmd1bWVudCApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBCdXQgbWFpbnRhaW4gc3VwcG9ydCBmb3Igb2xkIHNpZ25hdHVyZXNcblx0XHRcdGlmICggZm4ubGVuZ3RoID4gMSApIHtcblx0XHRcdFx0YXJncyA9IFsgcHNldWRvLCBwc2V1ZG8sIFwiXCIsIGFyZ3VtZW50IF07XG5cdFx0XHRcdHJldHVybiBFeHByLnNldEZpbHRlcnMuaGFzT3duUHJvcGVydHkoIHBzZXVkby50b0xvd2VyQ2FzZSgpICkgP1xuXHRcdFx0XHRcdG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcyApIHtcblx0XHRcdFx0XHRcdHZhciBpZHgsXG5cdFx0XHRcdFx0XHRcdG1hdGNoZWQgPSBmbiggc2VlZCwgYXJndW1lbnQgKSxcblx0XHRcdFx0XHRcdFx0aSA9IG1hdGNoZWQubGVuZ3RoO1xuXHRcdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRcdGlkeCA9IGluZGV4T2YoIHNlZWQsIG1hdGNoZWRbaV0gKTtcblx0XHRcdFx0XHRcdFx0c2VlZFsgaWR4IF0gPSAhKCBtYXRjaGVzWyBpZHggXSA9IG1hdGNoZWRbaV0gKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9KSA6XG5cdFx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZm4oIGVsZW0sIDAsIGFyZ3MgKTtcblx0XHRcdFx0XHR9O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZm47XG5cdFx0fVxuXHR9LFxuXG5cdHBzZXVkb3M6IHtcblx0XHQvLyBQb3RlbnRpYWxseSBjb21wbGV4IHBzZXVkb3Ncblx0XHRcIm5vdFwiOiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdFx0Ly8gVHJpbSB0aGUgc2VsZWN0b3IgcGFzc2VkIHRvIGNvbXBpbGVcblx0XHRcdC8vIHRvIGF2b2lkIHRyZWF0aW5nIGxlYWRpbmcgYW5kIHRyYWlsaW5nXG5cdFx0XHQvLyBzcGFjZXMgYXMgY29tYmluYXRvcnNcblx0XHRcdHZhciBpbnB1dCA9IFtdLFxuXHRcdFx0XHRyZXN1bHRzID0gW10sXG5cdFx0XHRcdG1hdGNoZXIgPSBjb21waWxlKCBzZWxlY3Rvci5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICkgKTtcblxuXHRcdFx0cmV0dXJuIG1hdGNoZXJbIGV4cGFuZG8gXSA/XG5cdFx0XHRcdG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcywgY29udGV4dCwgeG1sICkge1xuXHRcdFx0XHRcdHZhciBlbGVtLFxuXHRcdFx0XHRcdFx0dW5tYXRjaGVkID0gbWF0Y2hlciggc2VlZCwgbnVsbCwgeG1sLCBbXSApLFxuXHRcdFx0XHRcdFx0aSA9IHNlZWQubGVuZ3RoO1xuXG5cdFx0XHRcdFx0Ly8gTWF0Y2ggZWxlbWVudHMgdW5tYXRjaGVkIGJ5IGBtYXRjaGVyYFxuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoZWxlbSA9IHVubWF0Y2hlZFtpXSkgKSB7XG5cdFx0XHRcdFx0XHRcdHNlZWRbaV0gPSAhKG1hdGNoZXNbaV0gPSBlbGVtKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pIDpcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHRpbnB1dFswXSA9IGVsZW07XG5cdFx0XHRcdFx0bWF0Y2hlciggaW5wdXQsIG51bGwsIHhtbCwgcmVzdWx0cyApO1xuXHRcdFx0XHRcdC8vIERvbid0IGtlZXAgdGhlIGVsZW1lbnQgKGlzc3VlICMyOTkpXG5cdFx0XHRcdFx0aW5wdXRbMF0gPSBudWxsO1xuXHRcdFx0XHRcdHJldHVybiAhcmVzdWx0cy5wb3AoKTtcblx0XHRcdFx0fTtcblx0XHR9KSxcblxuXHRcdFwiaGFzXCI6IG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBTaXp6bGUoIHNlbGVjdG9yLCBlbGVtICkubGVuZ3RoID4gMDtcblx0XHRcdH07XG5cdFx0fSksXG5cblx0XHRcImNvbnRhaW5zXCI6IG1hcmtGdW5jdGlvbihmdW5jdGlvbiggdGV4dCApIHtcblx0XHRcdHRleHQgPSB0ZXh0LnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiAoIGVsZW0udGV4dENvbnRlbnQgfHwgZWxlbS5pbm5lclRleHQgfHwgZ2V0VGV4dCggZWxlbSApICkuaW5kZXhPZiggdGV4dCApID4gLTE7XG5cdFx0XHR9O1xuXHRcdH0pLFxuXG5cdFx0Ly8gXCJXaGV0aGVyIGFuIGVsZW1lbnQgaXMgcmVwcmVzZW50ZWQgYnkgYSA6bGFuZygpIHNlbGVjdG9yXG5cdFx0Ly8gaXMgYmFzZWQgc29sZWx5IG9uIHRoZSBlbGVtZW50J3MgbGFuZ3VhZ2UgdmFsdWVcblx0XHQvLyBiZWluZyBlcXVhbCB0byB0aGUgaWRlbnRpZmllciBDLFxuXHRcdC8vIG9yIGJlZ2lubmluZyB3aXRoIHRoZSBpZGVudGlmaWVyIEMgaW1tZWRpYXRlbHkgZm9sbG93ZWQgYnkgXCItXCIuXG5cdFx0Ly8gVGhlIG1hdGNoaW5nIG9mIEMgYWdhaW5zdCB0aGUgZWxlbWVudCdzIGxhbmd1YWdlIHZhbHVlIGlzIHBlcmZvcm1lZCBjYXNlLWluc2Vuc2l0aXZlbHkuXG5cdFx0Ly8gVGhlIGlkZW50aWZpZXIgQyBkb2VzIG5vdCBoYXZlIHRvIGJlIGEgdmFsaWQgbGFuZ3VhZ2UgbmFtZS5cIlxuXHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jbGFuZy1wc2V1ZG9cblx0XHRcImxhbmdcIjogbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggbGFuZyApIHtcblx0XHRcdC8vIGxhbmcgdmFsdWUgbXVzdCBiZSBhIHZhbGlkIGlkZW50aWZpZXJcblx0XHRcdGlmICggIXJpZGVudGlmaWVyLnRlc3QobGFuZyB8fCBcIlwiKSApIHtcblx0XHRcdFx0U2l6emxlLmVycm9yKCBcInVuc3VwcG9ydGVkIGxhbmc6IFwiICsgbGFuZyApO1xuXHRcdFx0fVxuXHRcdFx0bGFuZyA9IGxhbmcucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgZWxlbUxhbmc7XG5cdFx0XHRcdGRvIHtcblx0XHRcdFx0XHRpZiAoIChlbGVtTGFuZyA9IGRvY3VtZW50SXNIVE1MID9cblx0XHRcdFx0XHRcdGVsZW0ubGFuZyA6XG5cdFx0XHRcdFx0XHRlbGVtLmdldEF0dHJpYnV0ZShcInhtbDpsYW5nXCIpIHx8IGVsZW0uZ2V0QXR0cmlidXRlKFwibGFuZ1wiKSkgKSB7XG5cblx0XHRcdFx0XHRcdGVsZW1MYW5nID0gZWxlbUxhbmcudG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtTGFuZyA9PT0gbGFuZyB8fCBlbGVtTGFuZy5pbmRleE9mKCBsYW5nICsgXCItXCIgKSA9PT0gMDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gd2hpbGUgKCAoZWxlbSA9IGVsZW0ucGFyZW50Tm9kZSkgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApO1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9O1xuXHRcdH0pLFxuXG5cdFx0Ly8gTWlzY2VsbGFuZW91c1xuXHRcdFwidGFyZ2V0XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIGhhc2ggPSB3aW5kb3cubG9jYXRpb24gJiYgd2luZG93LmxvY2F0aW9uLmhhc2g7XG5cdFx0XHRyZXR1cm4gaGFzaCAmJiBoYXNoLnNsaWNlKCAxICkgPT09IGVsZW0uaWQ7XG5cdFx0fSxcblxuXHRcdFwicm9vdFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBkb2NFbGVtO1xuXHRcdH0sXG5cblx0XHRcImZvY3VzXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgJiYgKCFkb2N1bWVudC5oYXNGb2N1cyB8fCBkb2N1bWVudC5oYXNGb2N1cygpKSAmJiAhIShlbGVtLnR5cGUgfHwgZWxlbS5ocmVmIHx8IH5lbGVtLnRhYkluZGV4KTtcblx0XHR9LFxuXG5cdFx0Ly8gQm9vbGVhbiBwcm9wZXJ0aWVzXG5cdFx0XCJlbmFibGVkXCI6IGNyZWF0ZURpc2FibGVkUHNldWRvKCBmYWxzZSApLFxuXHRcdFwiZGlzYWJsZWRcIjogY3JlYXRlRGlzYWJsZWRQc2V1ZG8oIHRydWUgKSxcblxuXHRcdFwiY2hlY2tlZFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdC8vIEluIENTUzMsIDpjaGVja2VkIHNob3VsZCByZXR1cm4gYm90aCBjaGVja2VkIGFuZCBzZWxlY3RlZCBlbGVtZW50c1xuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvMjAxMS9SRUMtY3NzMy1zZWxlY3RvcnMtMjAxMTA5MjkvI2NoZWNrZWRcblx0XHRcdHZhciBub2RlTmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiAobm9kZU5hbWUgPT09IFwiaW5wdXRcIiAmJiAhIWVsZW0uY2hlY2tlZCkgfHwgKG5vZGVOYW1lID09PSBcIm9wdGlvblwiICYmICEhZWxlbS5zZWxlY3RlZCk7XG5cdFx0fSxcblxuXHRcdFwic2VsZWN0ZWRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHQvLyBBY2Nlc3NpbmcgdGhpcyBwcm9wZXJ0eSBtYWtlcyBzZWxlY3RlZC1ieS1kZWZhdWx0XG5cdFx0XHQvLyBvcHRpb25zIGluIFNhZmFyaSB3b3JrIHByb3Blcmx5XG5cdFx0XHRpZiAoIGVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0ZWxlbS5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBlbGVtLnNlbGVjdGVkID09PSB0cnVlO1xuXHRcdH0sXG5cblx0XHQvLyBDb250ZW50c1xuXHRcdFwiZW1wdHlcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2VtcHR5LXBzZXVkb1xuXHRcdFx0Ly8gOmVtcHR5IGlzIG5lZ2F0ZWQgYnkgZWxlbWVudCAoMSkgb3IgY29udGVudCBub2RlcyAodGV4dDogMzsgY2RhdGE6IDQ7IGVudGl0eSByZWY6IDUpLFxuXHRcdFx0Ly8gICBidXQgbm90IGJ5IG90aGVycyAoY29tbWVudDogODsgcHJvY2Vzc2luZyBpbnN0cnVjdGlvbjogNzsgZXRjLilcblx0XHRcdC8vIG5vZGVUeXBlIDwgNiB3b3JrcyBiZWNhdXNlIGF0dHJpYnV0ZXMgKDIpIGRvIG5vdCBhcHBlYXIgYXMgY2hpbGRyZW5cblx0XHRcdGZvciAoIGVsZW0gPSBlbGVtLmZpcnN0Q2hpbGQ7IGVsZW07IGVsZW0gPSBlbGVtLm5leHRTaWJsaW5nICkge1xuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPCA2ICkge1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSxcblxuXHRcdFwicGFyZW50XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuICFFeHByLnBzZXVkb3NbXCJlbXB0eVwiXSggZWxlbSApO1xuXHRcdH0sXG5cblx0XHQvLyBFbGVtZW50L2lucHV0IHR5cGVzXG5cdFx0XCJoZWFkZXJcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gcmhlYWRlci50ZXN0KCBlbGVtLm5vZGVOYW1lICk7XG5cdFx0fSxcblxuXHRcdFwiaW5wdXRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gcmlucHV0cy50ZXN0KCBlbGVtLm5vZGVOYW1lICk7XG5cdFx0fSxcblxuXHRcdFwiYnV0dG9uXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gbmFtZSA9PT0gXCJpbnB1dFwiICYmIGVsZW0udHlwZSA9PT0gXCJidXR0b25cIiB8fCBuYW1lID09PSBcImJ1dHRvblwiO1xuXHRcdH0sXG5cblx0XHRcInRleHRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgYXR0cjtcblx0XHRcdHJldHVybiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiaW5wdXRcIiAmJlxuXHRcdFx0XHRlbGVtLnR5cGUgPT09IFwidGV4dFwiICYmXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUU8OFxuXHRcdFx0XHQvLyBOZXcgSFRNTDUgYXR0cmlidXRlIHZhbHVlcyAoZS5nLiwgXCJzZWFyY2hcIikgYXBwZWFyIHdpdGggZWxlbS50eXBlID09PSBcInRleHRcIlxuXHRcdFx0XHQoIChhdHRyID0gZWxlbS5nZXRBdHRyaWJ1dGUoXCJ0eXBlXCIpKSA9PSBudWxsIHx8IGF0dHIudG9Mb3dlckNhc2UoKSA9PT0gXCJ0ZXh0XCIgKTtcblx0XHR9LFxuXG5cdFx0Ly8gUG9zaXRpb24taW4tY29sbGVjdGlvblxuXHRcdFwiZmlyc3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBbIDAgXTtcblx0XHR9KSxcblxuXHRcdFwibGFzdFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdHJldHVybiBbIGxlbmd0aCAtIDEgXTtcblx0XHR9KSxcblxuXHRcdFwiZXFcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0cmV0dXJuIFsgYXJndW1lbnQgPCAwID8gYXJndW1lbnQgKyBsZW5ndGggOiBhcmd1bWVudCBdO1xuXHRcdH0pLFxuXG5cdFx0XCJldmVuXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0dmFyIGkgPSAwO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpICs9IDIgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0pLFxuXG5cdFx0XCJvZGRcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XG5cdFx0XHR2YXIgaSA9IDE7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkgKz0gMiApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSksXG5cblx0XHRcImx0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdHZhciBpID0gYXJndW1lbnQgPCAwID8gYXJndW1lbnQgKyBsZW5ndGggOiBhcmd1bWVudDtcblx0XHRcdGZvciAoIDsgLS1pID49IDA7ICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9KSxcblxuXHRcdFwiZ3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0dmFyIGkgPSBhcmd1bWVudCA8IDAgPyBhcmd1bWVudCArIGxlbmd0aCA6IGFyZ3VtZW50O1xuXHRcdFx0Zm9yICggOyArK2kgPCBsZW5ndGg7ICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9KVxuXHR9XG59O1xuXG5FeHByLnBzZXVkb3NbXCJudGhcIl0gPSBFeHByLnBzZXVkb3NbXCJlcVwiXTtcblxuLy8gQWRkIGJ1dHRvbi9pbnB1dCB0eXBlIHBzZXVkb3NcbmZvciAoIGkgaW4geyByYWRpbzogdHJ1ZSwgY2hlY2tib3g6IHRydWUsIGZpbGU6IHRydWUsIHBhc3N3b3JkOiB0cnVlLCBpbWFnZTogdHJ1ZSB9ICkge1xuXHRFeHByLnBzZXVkb3NbIGkgXSA9IGNyZWF0ZUlucHV0UHNldWRvKCBpICk7XG59XG5mb3IgKCBpIGluIHsgc3VibWl0OiB0cnVlLCByZXNldDogdHJ1ZSB9ICkge1xuXHRFeHByLnBzZXVkb3NbIGkgXSA9IGNyZWF0ZUJ1dHRvblBzZXVkbyggaSApO1xufVxuXG4vLyBFYXN5IEFQSSBmb3IgY3JlYXRpbmcgbmV3IHNldEZpbHRlcnNcbmZ1bmN0aW9uIHNldEZpbHRlcnMoKSB7fVxuc2V0RmlsdGVycy5wcm90b3R5cGUgPSBFeHByLmZpbHRlcnMgPSBFeHByLnBzZXVkb3M7XG5FeHByLnNldEZpbHRlcnMgPSBuZXcgc2V0RmlsdGVycygpO1xuXG50b2tlbml6ZSA9IFNpenpsZS50b2tlbml6ZSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgcGFyc2VPbmx5ICkge1xuXHR2YXIgbWF0Y2hlZCwgbWF0Y2gsIHRva2VucywgdHlwZSxcblx0XHRzb0ZhciwgZ3JvdXBzLCBwcmVGaWx0ZXJzLFxuXHRcdGNhY2hlZCA9IHRva2VuQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXTtcblxuXHRpZiAoIGNhY2hlZCApIHtcblx0XHRyZXR1cm4gcGFyc2VPbmx5ID8gMCA6IGNhY2hlZC5zbGljZSggMCApO1xuXHR9XG5cblx0c29GYXIgPSBzZWxlY3Rvcjtcblx0Z3JvdXBzID0gW107XG5cdHByZUZpbHRlcnMgPSBFeHByLnByZUZpbHRlcjtcblxuXHR3aGlsZSAoIHNvRmFyICkge1xuXG5cdFx0Ly8gQ29tbWEgYW5kIGZpcnN0IHJ1blxuXHRcdGlmICggIW1hdGNoZWQgfHwgKG1hdGNoID0gcmNvbW1hLmV4ZWMoIHNvRmFyICkpICkge1xuXHRcdFx0aWYgKCBtYXRjaCApIHtcblx0XHRcdFx0Ly8gRG9uJ3QgY29uc3VtZSB0cmFpbGluZyBjb21tYXMgYXMgdmFsaWRcblx0XHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hbMF0ubGVuZ3RoICkgfHwgc29GYXI7XG5cdFx0XHR9XG5cdFx0XHRncm91cHMucHVzaCggKHRva2VucyA9IFtdKSApO1xuXHRcdH1cblxuXHRcdG1hdGNoZWQgPSBmYWxzZTtcblxuXHRcdC8vIENvbWJpbmF0b3JzXG5cdFx0aWYgKCAobWF0Y2ggPSByY29tYmluYXRvcnMuZXhlYyggc29GYXIgKSkgKSB7XG5cdFx0XHRtYXRjaGVkID0gbWF0Y2guc2hpZnQoKTtcblx0XHRcdHRva2Vucy5wdXNoKHtcblx0XHRcdFx0dmFsdWU6IG1hdGNoZWQsXG5cdFx0XHRcdC8vIENhc3QgZGVzY2VuZGFudCBjb21iaW5hdG9ycyB0byBzcGFjZVxuXHRcdFx0XHR0eXBlOiBtYXRjaFswXS5yZXBsYWNlKCBydHJpbSwgXCIgXCIgKVxuXHRcdFx0fSk7XG5cdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaGVkLmxlbmd0aCApO1xuXHRcdH1cblxuXHRcdC8vIEZpbHRlcnNcblx0XHRmb3IgKCB0eXBlIGluIEV4cHIuZmlsdGVyICkge1xuXHRcdFx0aWYgKCAobWF0Y2ggPSBtYXRjaEV4cHJbIHR5cGUgXS5leGVjKCBzb0ZhciApKSAmJiAoIXByZUZpbHRlcnNbIHR5cGUgXSB8fFxuXHRcdFx0XHQobWF0Y2ggPSBwcmVGaWx0ZXJzWyB0eXBlIF0oIG1hdGNoICkpKSApIHtcblx0XHRcdFx0bWF0Y2hlZCA9IG1hdGNoLnNoaWZ0KCk7XG5cdFx0XHRcdHRva2Vucy5wdXNoKHtcblx0XHRcdFx0XHR2YWx1ZTogbWF0Y2hlZCxcblx0XHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRcdG1hdGNoZXM6IG1hdGNoXG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaGVkLmxlbmd0aCApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggIW1hdGNoZWQgKSB7XG5cdFx0XHRicmVhaztcblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIGxlbmd0aCBvZiB0aGUgaW52YWxpZCBleGNlc3Ncblx0Ly8gaWYgd2UncmUganVzdCBwYXJzaW5nXG5cdC8vIE90aGVyd2lzZSwgdGhyb3cgYW4gZXJyb3Igb3IgcmV0dXJuIHRva2Vuc1xuXHRyZXR1cm4gcGFyc2VPbmx5ID9cblx0XHRzb0Zhci5sZW5ndGggOlxuXHRcdHNvRmFyID9cblx0XHRcdFNpenpsZS5lcnJvciggc2VsZWN0b3IgKSA6XG5cdFx0XHQvLyBDYWNoZSB0aGUgdG9rZW5zXG5cdFx0XHR0b2tlbkNhY2hlKCBzZWxlY3RvciwgZ3JvdXBzICkuc2xpY2UoIDAgKTtcbn07XG5cbmZ1bmN0aW9uIHRvU2VsZWN0b3IoIHRva2VucyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGxlbiA9IHRva2Vucy5sZW5ndGgsXG5cdFx0c2VsZWN0b3IgPSBcIlwiO1xuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRzZWxlY3RvciArPSB0b2tlbnNbaV0udmFsdWU7XG5cdH1cblx0cmV0dXJuIHNlbGVjdG9yO1xufVxuXG5mdW5jdGlvbiBhZGRDb21iaW5hdG9yKCBtYXRjaGVyLCBjb21iaW5hdG9yLCBiYXNlICkge1xuXHR2YXIgZGlyID0gY29tYmluYXRvci5kaXIsXG5cdFx0c2tpcCA9IGNvbWJpbmF0b3IubmV4dCxcblx0XHRrZXkgPSBza2lwIHx8IGRpcixcblx0XHRjaGVja05vbkVsZW1lbnRzID0gYmFzZSAmJiBrZXkgPT09IFwicGFyZW50Tm9kZVwiLFxuXHRcdGRvbmVOYW1lID0gZG9uZSsrO1xuXG5cdHJldHVybiBjb21iaW5hdG9yLmZpcnN0ID9cblx0XHQvLyBDaGVjayBhZ2FpbnN0IGNsb3Nlc3QgYW5jZXN0b3IvcHJlY2VkaW5nIGVsZW1lbnRcblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0d2hpbGUgKCAoZWxlbSA9IGVsZW1bIGRpciBdKSApIHtcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fSA6XG5cblx0XHQvLyBDaGVjayBhZ2FpbnN0IGFsbCBhbmNlc3Rvci9wcmVjZWRpbmcgZWxlbWVudHNcblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0dmFyIG9sZENhY2hlLCB1bmlxdWVDYWNoZSwgb3V0ZXJDYWNoZSxcblx0XHRcdFx0bmV3Q2FjaGUgPSBbIGRpcnJ1bnMsIGRvbmVOYW1lIF07XG5cblx0XHRcdC8vIFdlIGNhbid0IHNldCBhcmJpdHJhcnkgZGF0YSBvbiBYTUwgbm9kZXMsIHNvIHRoZXkgZG9uJ3QgYmVuZWZpdCBmcm9tIGNvbWJpbmF0b3IgY2FjaGluZ1xuXHRcdFx0aWYgKCB4bWwgKSB7XG5cdFx0XHRcdHdoaWxlICggKGVsZW0gPSBlbGVtWyBkaXIgXSkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHdoaWxlICggKGVsZW0gPSBlbGVtWyBkaXIgXSkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gZWxlbVsgZXhwYW5kbyBdIHx8IChlbGVtWyBleHBhbmRvIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBlbGVtLnVuaXF1ZUlEIF0gfHwgKG91dGVyQ2FjaGVbIGVsZW0udW5pcXVlSUQgXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0aWYgKCBza2lwICYmIHNraXAgPT09IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSApIHtcblx0XHRcdFx0XHRcdFx0ZWxlbSA9IGVsZW1bIGRpciBdIHx8IGVsZW07XG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCAob2xkQ2FjaGUgPSB1bmlxdWVDYWNoZVsga2V5IF0pICYmXG5cdFx0XHRcdFx0XHRcdG9sZENhY2hlWyAwIF0gPT09IGRpcnJ1bnMgJiYgb2xkQ2FjaGVbIDEgXSA9PT0gZG9uZU5hbWUgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gQXNzaWduIHRvIG5ld0NhY2hlIHNvIHJlc3VsdHMgYmFjay1wcm9wYWdhdGUgdG8gcHJldmlvdXMgZWxlbWVudHNcblx0XHRcdFx0XHRcdFx0cmV0dXJuIChuZXdDYWNoZVsgMiBdID0gb2xkQ2FjaGVbIDIgXSk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHQvLyBSZXVzZSBuZXdjYWNoZSBzbyByZXN1bHRzIGJhY2stcHJvcGFnYXRlIHRvIHByZXZpb3VzIGVsZW1lbnRzXG5cdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlWyBrZXkgXSA9IG5ld0NhY2hlO1xuXG5cdFx0XHRcdFx0XHRcdC8vIEEgbWF0Y2ggbWVhbnMgd2UncmUgZG9uZTsgYSBmYWlsIG1lYW5zIHdlIGhhdmUgdG8ga2VlcCBjaGVja2luZ1xuXHRcdFx0XHRcdFx0XHRpZiAoIChuZXdDYWNoZVsgMiBdID0gbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICkpICkge1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fTtcbn1cblxuZnVuY3Rpb24gZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICkge1xuXHRyZXR1cm4gbWF0Y2hlcnMubGVuZ3RoID4gMSA/XG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciBpID0gbWF0Y2hlcnMubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGlmICggIW1hdGNoZXJzW2ldKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0gOlxuXHRcdG1hdGNoZXJzWzBdO1xufVxuXG5mdW5jdGlvbiBtdWx0aXBsZUNvbnRleHRzKCBzZWxlY3RvciwgY29udGV4dHMsIHJlc3VsdHMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSBjb250ZXh0cy5sZW5ndGg7XG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFNpenpsZSggc2VsZWN0b3IsIGNvbnRleHRzW2ldLCByZXN1bHRzICk7XG5cdH1cblx0cmV0dXJuIHJlc3VsdHM7XG59XG5cbmZ1bmN0aW9uIGNvbmRlbnNlKCB1bm1hdGNoZWQsIG1hcCwgZmlsdGVyLCBjb250ZXh0LCB4bWwgKSB7XG5cdHZhciBlbGVtLFxuXHRcdG5ld1VubWF0Y2hlZCA9IFtdLFxuXHRcdGkgPSAwLFxuXHRcdGxlbiA9IHVubWF0Y2hlZC5sZW5ndGgsXG5cdFx0bWFwcGVkID0gbWFwICE9IG51bGw7XG5cblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0aWYgKCAoZWxlbSA9IHVubWF0Y2hlZFtpXSkgKSB7XG5cdFx0XHRpZiAoICFmaWx0ZXIgfHwgZmlsdGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0bmV3VW5tYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0aWYgKCBtYXBwZWQgKSB7XG5cdFx0XHRcdFx0bWFwLnB1c2goIGkgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBuZXdVbm1hdGNoZWQ7XG59XG5cbmZ1bmN0aW9uIHNldE1hdGNoZXIoIHByZUZpbHRlciwgc2VsZWN0b3IsIG1hdGNoZXIsIHBvc3RGaWx0ZXIsIHBvc3RGaW5kZXIsIHBvc3RTZWxlY3RvciApIHtcblx0aWYgKCBwb3N0RmlsdGVyICYmICFwb3N0RmlsdGVyWyBleHBhbmRvIF0gKSB7XG5cdFx0cG9zdEZpbHRlciA9IHNldE1hdGNoZXIoIHBvc3RGaWx0ZXIgKTtcblx0fVxuXHRpZiAoIHBvc3RGaW5kZXIgJiYgIXBvc3RGaW5kZXJbIGV4cGFuZG8gXSApIHtcblx0XHRwb3N0RmluZGVyID0gc2V0TWF0Y2hlciggcG9zdEZpbmRlciwgcG9zdFNlbGVjdG9yICk7XG5cdH1cblx0cmV0dXJuIG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgcmVzdWx0cywgY29udGV4dCwgeG1sICkge1xuXHRcdHZhciB0ZW1wLCBpLCBlbGVtLFxuXHRcdFx0cHJlTWFwID0gW10sXG5cdFx0XHRwb3N0TWFwID0gW10sXG5cdFx0XHRwcmVleGlzdGluZyA9IHJlc3VsdHMubGVuZ3RoLFxuXG5cdFx0XHQvLyBHZXQgaW5pdGlhbCBlbGVtZW50cyBmcm9tIHNlZWQgb3IgY29udGV4dFxuXHRcdFx0ZWxlbXMgPSBzZWVkIHx8IG11bHRpcGxlQ29udGV4dHMoIHNlbGVjdG9yIHx8IFwiKlwiLCBjb250ZXh0Lm5vZGVUeXBlID8gWyBjb250ZXh0IF0gOiBjb250ZXh0LCBbXSApLFxuXG5cdFx0XHQvLyBQcmVmaWx0ZXIgdG8gZ2V0IG1hdGNoZXIgaW5wdXQsIHByZXNlcnZpbmcgYSBtYXAgZm9yIHNlZWQtcmVzdWx0cyBzeW5jaHJvbml6YXRpb25cblx0XHRcdG1hdGNoZXJJbiA9IHByZUZpbHRlciAmJiAoIHNlZWQgfHwgIXNlbGVjdG9yICkgP1xuXHRcdFx0XHRjb25kZW5zZSggZWxlbXMsIHByZU1hcCwgcHJlRmlsdGVyLCBjb250ZXh0LCB4bWwgKSA6XG5cdFx0XHRcdGVsZW1zLFxuXG5cdFx0XHRtYXRjaGVyT3V0ID0gbWF0Y2hlciA/XG5cdFx0XHRcdC8vIElmIHdlIGhhdmUgYSBwb3N0RmluZGVyLCBvciBmaWx0ZXJlZCBzZWVkLCBvciBub24tc2VlZCBwb3N0RmlsdGVyIG9yIHByZWV4aXN0aW5nIHJlc3VsdHMsXG5cdFx0XHRcdHBvc3RGaW5kZXIgfHwgKCBzZWVkID8gcHJlRmlsdGVyIDogcHJlZXhpc3RpbmcgfHwgcG9zdEZpbHRlciApID9cblxuXHRcdFx0XHRcdC8vIC4uLmludGVybWVkaWF0ZSBwcm9jZXNzaW5nIGlzIG5lY2Vzc2FyeVxuXHRcdFx0XHRcdFtdIDpcblxuXHRcdFx0XHRcdC8vIC4uLm90aGVyd2lzZSB1c2UgcmVzdWx0cyBkaXJlY3RseVxuXHRcdFx0XHRcdHJlc3VsdHMgOlxuXHRcdFx0XHRtYXRjaGVySW47XG5cblx0XHQvLyBGaW5kIHByaW1hcnkgbWF0Y2hlc1xuXHRcdGlmICggbWF0Y2hlciApIHtcblx0XHRcdG1hdGNoZXIoIG1hdGNoZXJJbiwgbWF0Y2hlck91dCwgY29udGV4dCwgeG1sICk7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgcG9zdEZpbHRlclxuXHRcdGlmICggcG9zdEZpbHRlciApIHtcblx0XHRcdHRlbXAgPSBjb25kZW5zZSggbWF0Y2hlck91dCwgcG9zdE1hcCApO1xuXHRcdFx0cG9zdEZpbHRlciggdGVtcCwgW10sIGNvbnRleHQsIHhtbCApO1xuXG5cdFx0XHQvLyBVbi1tYXRjaCBmYWlsaW5nIGVsZW1lbnRzIGJ5IG1vdmluZyB0aGVtIGJhY2sgdG8gbWF0Y2hlckluXG5cdFx0XHRpID0gdGVtcC5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCAoZWxlbSA9IHRlbXBbaV0pICkge1xuXHRcdFx0XHRcdG1hdGNoZXJPdXRbIHBvc3RNYXBbaV0gXSA9ICEobWF0Y2hlckluWyBwb3N0TWFwW2ldIF0gPSBlbGVtKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggc2VlZCApIHtcblx0XHRcdGlmICggcG9zdEZpbmRlciB8fCBwcmVGaWx0ZXIgKSB7XG5cdFx0XHRcdGlmICggcG9zdEZpbmRlciApIHtcblx0XHRcdFx0XHQvLyBHZXQgdGhlIGZpbmFsIG1hdGNoZXJPdXQgYnkgY29uZGVuc2luZyB0aGlzIGludGVybWVkaWF0ZSBpbnRvIHBvc3RGaW5kZXIgY29udGV4dHNcblx0XHRcdFx0XHR0ZW1wID0gW107XG5cdFx0XHRcdFx0aSA9IG1hdGNoZXJPdXQubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoZWxlbSA9IG1hdGNoZXJPdXRbaV0pICkge1xuXHRcdFx0XHRcdFx0XHQvLyBSZXN0b3JlIG1hdGNoZXJJbiBzaW5jZSBlbGVtIGlzIG5vdCB5ZXQgYSBmaW5hbCBtYXRjaFxuXHRcdFx0XHRcdFx0XHR0ZW1wLnB1c2goIChtYXRjaGVySW5baV0gPSBlbGVtKSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRwb3N0RmluZGVyKCBudWxsLCAobWF0Y2hlck91dCA9IFtdKSwgdGVtcCwgeG1sICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBNb3ZlIG1hdGNoZWQgZWxlbWVudHMgZnJvbSBzZWVkIHRvIHJlc3VsdHMgdG8ga2VlcCB0aGVtIHN5bmNocm9uaXplZFxuXHRcdFx0XHRpID0gbWF0Y2hlck91dC5sZW5ndGg7XG5cdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdGlmICggKGVsZW0gPSBtYXRjaGVyT3V0W2ldKSAmJlxuXHRcdFx0XHRcdFx0KHRlbXAgPSBwb3N0RmluZGVyID8gaW5kZXhPZiggc2VlZCwgZWxlbSApIDogcHJlTWFwW2ldKSA+IC0xICkge1xuXG5cdFx0XHRcdFx0XHRzZWVkW3RlbXBdID0gIShyZXN1bHRzW3RlbXBdID0gZWxlbSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHQvLyBBZGQgZWxlbWVudHMgdG8gcmVzdWx0cywgdGhyb3VnaCBwb3N0RmluZGVyIGlmIGRlZmluZWRcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWF0Y2hlck91dCA9IGNvbmRlbnNlKFxuXHRcdFx0XHRtYXRjaGVyT3V0ID09PSByZXN1bHRzID9cblx0XHRcdFx0XHRtYXRjaGVyT3V0LnNwbGljZSggcHJlZXhpc3RpbmcsIG1hdGNoZXJPdXQubGVuZ3RoICkgOlxuXHRcdFx0XHRcdG1hdGNoZXJPdXRcblx0XHRcdCk7XG5cdFx0XHRpZiAoIHBvc3RGaW5kZXIgKSB7XG5cdFx0XHRcdHBvc3RGaW5kZXIoIG51bGwsIHJlc3VsdHMsIG1hdGNoZXJPdXQsIHhtbCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgbWF0Y2hlck91dCApO1xuXHRcdFx0fVxuXHRcdH1cblx0fSk7XG59XG5cbmZ1bmN0aW9uIG1hdGNoZXJGcm9tVG9rZW5zKCB0b2tlbnMgKSB7XG5cdHZhciBjaGVja0NvbnRleHQsIG1hdGNoZXIsIGosXG5cdFx0bGVuID0gdG9rZW5zLmxlbmd0aCxcblx0XHRsZWFkaW5nUmVsYXRpdmUgPSBFeHByLnJlbGF0aXZlWyB0b2tlbnNbMF0udHlwZSBdLFxuXHRcdGltcGxpY2l0UmVsYXRpdmUgPSBsZWFkaW5nUmVsYXRpdmUgfHwgRXhwci5yZWxhdGl2ZVtcIiBcIl0sXG5cdFx0aSA9IGxlYWRpbmdSZWxhdGl2ZSA/IDEgOiAwLFxuXG5cdFx0Ly8gVGhlIGZvdW5kYXRpb25hbCBtYXRjaGVyIGVuc3VyZXMgdGhhdCBlbGVtZW50cyBhcmUgcmVhY2hhYmxlIGZyb20gdG9wLWxldmVsIGNvbnRleHQocylcblx0XHRtYXRjaENvbnRleHQgPSBhZGRDb21iaW5hdG9yKCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBjaGVja0NvbnRleHQ7XG5cdFx0fSwgaW1wbGljaXRSZWxhdGl2ZSwgdHJ1ZSApLFxuXHRcdG1hdGNoQW55Q29udGV4dCA9IGFkZENvbWJpbmF0b3IoIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGluZGV4T2YoIGNoZWNrQ29udGV4dCwgZWxlbSApID4gLTE7XG5cdFx0fSwgaW1wbGljaXRSZWxhdGl2ZSwgdHJ1ZSApLFxuXHRcdG1hdGNoZXJzID0gWyBmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0dmFyIHJldCA9ICggIWxlYWRpbmdSZWxhdGl2ZSAmJiAoIHhtbCB8fCBjb250ZXh0ICE9PSBvdXRlcm1vc3RDb250ZXh0ICkgKSB8fCAoXG5cdFx0XHRcdChjaGVja0NvbnRleHQgPSBjb250ZXh0KS5ub2RlVHlwZSA/XG5cdFx0XHRcdFx0bWF0Y2hDb250ZXh0KCBlbGVtLCBjb250ZXh0LCB4bWwgKSA6XG5cdFx0XHRcdFx0bWF0Y2hBbnlDb250ZXh0KCBlbGVtLCBjb250ZXh0LCB4bWwgKSApO1xuXHRcdFx0Ly8gQXZvaWQgaGFuZ2luZyBvbnRvIGVsZW1lbnQgKGlzc3VlICMyOTkpXG5cdFx0XHRjaGVja0NvbnRleHQgPSBudWxsO1xuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9IF07XG5cblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0aWYgKCAobWF0Y2hlciA9IEV4cHIucmVsYXRpdmVbIHRva2Vuc1tpXS50eXBlIF0pICkge1xuXHRcdFx0bWF0Y2hlcnMgPSBbIGFkZENvbWJpbmF0b3IoZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICksIG1hdGNoZXIpIF07XG5cdFx0fSBlbHNlIHtcblx0XHRcdG1hdGNoZXIgPSBFeHByLmZpbHRlclsgdG9rZW5zW2ldLnR5cGUgXS5hcHBseSggbnVsbCwgdG9rZW5zW2ldLm1hdGNoZXMgKTtcblxuXHRcdFx0Ly8gUmV0dXJuIHNwZWNpYWwgdXBvbiBzZWVpbmcgYSBwb3NpdGlvbmFsIG1hdGNoZXJcblx0XHRcdGlmICggbWF0Y2hlclsgZXhwYW5kbyBdICkge1xuXHRcdFx0XHQvLyBGaW5kIHRoZSBuZXh0IHJlbGF0aXZlIG9wZXJhdG9yIChpZiBhbnkpIGZvciBwcm9wZXIgaGFuZGxpbmdcblx0XHRcdFx0aiA9ICsraTtcblx0XHRcdFx0Zm9yICggOyBqIDwgbGVuOyBqKysgKSB7XG5cdFx0XHRcdFx0aWYgKCBFeHByLnJlbGF0aXZlWyB0b2tlbnNbal0udHlwZSBdICkge1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBzZXRNYXRjaGVyKFxuXHRcdFx0XHRcdGkgPiAxICYmIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApLFxuXHRcdFx0XHRcdGkgPiAxICYmIHRvU2VsZWN0b3IoXG5cdFx0XHRcdFx0XHQvLyBJZiB0aGUgcHJlY2VkaW5nIHRva2VuIHdhcyBhIGRlc2NlbmRhbnQgY29tYmluYXRvciwgaW5zZXJ0IGFuIGltcGxpY2l0IGFueS1lbGVtZW50IGAqYFxuXHRcdFx0XHRcdFx0dG9rZW5zLnNsaWNlKCAwLCBpIC0gMSApLmNvbmNhdCh7IHZhbHVlOiB0b2tlbnNbIGkgLSAyIF0udHlwZSA9PT0gXCIgXCIgPyBcIipcIiA6IFwiXCIgfSlcblx0XHRcdFx0XHQpLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSxcblx0XHRcdFx0XHRtYXRjaGVyLFxuXHRcdFx0XHRcdGkgPCBqICYmIG1hdGNoZXJGcm9tVG9rZW5zKCB0b2tlbnMuc2xpY2UoIGksIGogKSApLFxuXHRcdFx0XHRcdGogPCBsZW4gJiYgbWF0Y2hlckZyb21Ub2tlbnMoICh0b2tlbnMgPSB0b2tlbnMuc2xpY2UoIGogKSkgKSxcblx0XHRcdFx0XHRqIDwgbGVuICYmIHRvU2VsZWN0b3IoIHRva2VucyApXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0XHRtYXRjaGVycy5wdXNoKCBtYXRjaGVyICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApO1xufVxuXG5mdW5jdGlvbiBtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMoIGVsZW1lbnRNYXRjaGVycywgc2V0TWF0Y2hlcnMgKSB7XG5cdHZhciBieVNldCA9IHNldE1hdGNoZXJzLmxlbmd0aCA+IDAsXG5cdFx0YnlFbGVtZW50ID0gZWxlbWVudE1hdGNoZXJzLmxlbmd0aCA+IDAsXG5cdFx0c3VwZXJNYXRjaGVyID0gZnVuY3Rpb24oIHNlZWQsIGNvbnRleHQsIHhtbCwgcmVzdWx0cywgb3V0ZXJtb3N0ICkge1xuXHRcdFx0dmFyIGVsZW0sIGosIG1hdGNoZXIsXG5cdFx0XHRcdG1hdGNoZWRDb3VudCA9IDAsXG5cdFx0XHRcdGkgPSBcIjBcIixcblx0XHRcdFx0dW5tYXRjaGVkID0gc2VlZCAmJiBbXSxcblx0XHRcdFx0c2V0TWF0Y2hlZCA9IFtdLFxuXHRcdFx0XHRjb250ZXh0QmFja3VwID0gb3V0ZXJtb3N0Q29udGV4dCxcblx0XHRcdFx0Ly8gV2UgbXVzdCBhbHdheXMgaGF2ZSBlaXRoZXIgc2VlZCBlbGVtZW50cyBvciBvdXRlcm1vc3QgY29udGV4dFxuXHRcdFx0XHRlbGVtcyA9IHNlZWQgfHwgYnlFbGVtZW50ICYmIEV4cHIuZmluZFtcIlRBR1wiXSggXCIqXCIsIG91dGVybW9zdCApLFxuXHRcdFx0XHQvLyBVc2UgaW50ZWdlciBkaXJydW5zIGlmZiB0aGlzIGlzIHRoZSBvdXRlcm1vc3QgbWF0Y2hlclxuXHRcdFx0XHRkaXJydW5zVW5pcXVlID0gKGRpcnJ1bnMgKz0gY29udGV4dEJhY2t1cCA9PSBudWxsID8gMSA6IE1hdGgucmFuZG9tKCkgfHwgMC4xKSxcblx0XHRcdFx0bGVuID0gZWxlbXMubGVuZ3RoO1xuXG5cdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblx0XHRcdFx0b3V0ZXJtb3N0Q29udGV4dCA9IGNvbnRleHQgPT09IGRvY3VtZW50IHx8IGNvbnRleHQgfHwgb3V0ZXJtb3N0O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgZWxlbWVudHMgcGFzc2luZyBlbGVtZW50TWF0Y2hlcnMgZGlyZWN0bHkgdG8gcmVzdWx0c1xuXHRcdFx0Ly8gU3VwcG9ydDogSUU8OSwgU2FmYXJpXG5cdFx0XHQvLyBUb2xlcmF0ZSBOb2RlTGlzdCBwcm9wZXJ0aWVzIChJRTogXCJsZW5ndGhcIjsgU2FmYXJpOiA8bnVtYmVyPikgbWF0Y2hpbmcgZWxlbWVudHMgYnkgaWRcblx0XHRcdGZvciAoIDsgaSAhPT0gbGVuICYmIChlbGVtID0gZWxlbXNbaV0pICE9IG51bGw7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBieUVsZW1lbnQgJiYgZWxlbSApIHtcblx0XHRcdFx0XHRqID0gMDtcblx0XHRcdFx0XHRpZiAoICFjb250ZXh0ICYmIGVsZW0ub3duZXJEb2N1bWVudCAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0XHRcdFx0XHRzZXREb2N1bWVudCggZWxlbSApO1xuXHRcdFx0XHRcdFx0eG1sID0gIWRvY3VtZW50SXNIVE1MO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR3aGlsZSAoIChtYXRjaGVyID0gZWxlbWVudE1hdGNoZXJzW2orK10pICkge1xuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVyKCBlbGVtLCBjb250ZXh0IHx8IGRvY3VtZW50LCB4bWwpICkge1xuXHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggb3V0ZXJtb3N0ICkge1xuXHRcdFx0XHRcdFx0ZGlycnVucyA9IGRpcnJ1bnNVbmlxdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gVHJhY2sgdW5tYXRjaGVkIGVsZW1lbnRzIGZvciBzZXQgZmlsdGVyc1xuXHRcdFx0XHRpZiAoIGJ5U2V0ICkge1xuXHRcdFx0XHRcdC8vIFRoZXkgd2lsbCBoYXZlIGdvbmUgdGhyb3VnaCBhbGwgcG9zc2libGUgbWF0Y2hlcnNcblx0XHRcdFx0XHRpZiAoIChlbGVtID0gIW1hdGNoZXIgJiYgZWxlbSkgKSB7XG5cdFx0XHRcdFx0XHRtYXRjaGVkQ291bnQtLTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBMZW5ndGhlbiB0aGUgYXJyYXkgZm9yIGV2ZXJ5IGVsZW1lbnQsIG1hdGNoZWQgb3Igbm90XG5cdFx0XHRcdFx0aWYgKCBzZWVkICkge1xuXHRcdFx0XHRcdFx0dW5tYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gYGlgIGlzIG5vdyB0aGUgY291bnQgb2YgZWxlbWVudHMgdmlzaXRlZCBhYm92ZSwgYW5kIGFkZGluZyBpdCB0byBgbWF0Y2hlZENvdW50YFxuXHRcdFx0Ly8gbWFrZXMgdGhlIGxhdHRlciBub25uZWdhdGl2ZS5cblx0XHRcdG1hdGNoZWRDb3VudCArPSBpO1xuXG5cdFx0XHQvLyBBcHBseSBzZXQgZmlsdGVycyB0byB1bm1hdGNoZWQgZWxlbWVudHNcblx0XHRcdC8vIE5PVEU6IFRoaXMgY2FuIGJlIHNraXBwZWQgaWYgdGhlcmUgYXJlIG5vIHVubWF0Y2hlZCBlbGVtZW50cyAoaS5lLiwgYG1hdGNoZWRDb3VudGBcblx0XHRcdC8vIGVxdWFscyBgaWApLCB1bmxlc3Mgd2UgZGlkbid0IHZpc2l0IF9hbnlfIGVsZW1lbnRzIGluIHRoZSBhYm92ZSBsb29wIGJlY2F1c2Ugd2UgaGF2ZVxuXHRcdFx0Ly8gbm8gZWxlbWVudCBtYXRjaGVycyBhbmQgbm8gc2VlZC5cblx0XHRcdC8vIEluY3JlbWVudGluZyBhbiBpbml0aWFsbHktc3RyaW5nIFwiMFwiIGBpYCBhbGxvd3MgYGlgIHRvIHJlbWFpbiBhIHN0cmluZyBvbmx5IGluIHRoYXRcblx0XHRcdC8vIGNhc2UsIHdoaWNoIHdpbGwgcmVzdWx0IGluIGEgXCIwMFwiIGBtYXRjaGVkQ291bnRgIHRoYXQgZGlmZmVycyBmcm9tIGBpYCBidXQgaXMgYWxzb1xuXHRcdFx0Ly8gbnVtZXJpY2FsbHkgemVyby5cblx0XHRcdGlmICggYnlTZXQgJiYgaSAhPT0gbWF0Y2hlZENvdW50ICkge1xuXHRcdFx0XHRqID0gMDtcblx0XHRcdFx0d2hpbGUgKCAobWF0Y2hlciA9IHNldE1hdGNoZXJzW2orK10pICkge1xuXHRcdFx0XHRcdG1hdGNoZXIoIHVubWF0Y2hlZCwgc2V0TWF0Y2hlZCwgY29udGV4dCwgeG1sICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIHNlZWQgKSB7XG5cdFx0XHRcdFx0Ly8gUmVpbnRlZ3JhdGUgZWxlbWVudCBtYXRjaGVzIHRvIGVsaW1pbmF0ZSB0aGUgbmVlZCBmb3Igc29ydGluZ1xuXHRcdFx0XHRcdGlmICggbWF0Y2hlZENvdW50ID4gMCApIHtcblx0XHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoICEodW5tYXRjaGVkW2ldIHx8IHNldE1hdGNoZWRbaV0pICkge1xuXHRcdFx0XHRcdFx0XHRcdHNldE1hdGNoZWRbaV0gPSBwb3AuY2FsbCggcmVzdWx0cyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gRGlzY2FyZCBpbmRleCBwbGFjZWhvbGRlciB2YWx1ZXMgdG8gZ2V0IG9ubHkgYWN0dWFsIG1hdGNoZXNcblx0XHRcdFx0XHRzZXRNYXRjaGVkID0gY29uZGVuc2UoIHNldE1hdGNoZWQgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEFkZCBtYXRjaGVzIHRvIHJlc3VsdHNcblx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgc2V0TWF0Y2hlZCApO1xuXG5cdFx0XHRcdC8vIFNlZWRsZXNzIHNldCBtYXRjaGVzIHN1Y2NlZWRpbmcgbXVsdGlwbGUgc3VjY2Vzc2Z1bCBtYXRjaGVycyBzdGlwdWxhdGUgc29ydGluZ1xuXHRcdFx0XHRpZiAoIG91dGVybW9zdCAmJiAhc2VlZCAmJiBzZXRNYXRjaGVkLmxlbmd0aCA+IDAgJiZcblx0XHRcdFx0XHQoIG1hdGNoZWRDb3VudCArIHNldE1hdGNoZXJzLmxlbmd0aCApID4gMSApIHtcblxuXHRcdFx0XHRcdFNpenpsZS51bmlxdWVTb3J0KCByZXN1bHRzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gT3ZlcnJpZGUgbWFuaXB1bGF0aW9uIG9mIGdsb2JhbHMgYnkgbmVzdGVkIG1hdGNoZXJzXG5cdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblx0XHRcdFx0ZGlycnVucyA9IGRpcnJ1bnNVbmlxdWU7XG5cdFx0XHRcdG91dGVybW9zdENvbnRleHQgPSBjb250ZXh0QmFja3VwO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdW5tYXRjaGVkO1xuXHRcdH07XG5cblx0cmV0dXJuIGJ5U2V0ID9cblx0XHRtYXJrRnVuY3Rpb24oIHN1cGVyTWF0Y2hlciApIDpcblx0XHRzdXBlck1hdGNoZXI7XG59XG5cbmNvbXBpbGUgPSBTaXp6bGUuY29tcGlsZSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgbWF0Y2ggLyogSW50ZXJuYWwgVXNlIE9ubHkgKi8gKSB7XG5cdHZhciBpLFxuXHRcdHNldE1hdGNoZXJzID0gW10sXG5cdFx0ZWxlbWVudE1hdGNoZXJzID0gW10sXG5cdFx0Y2FjaGVkID0gY29tcGlsZXJDYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdO1xuXG5cdGlmICggIWNhY2hlZCApIHtcblx0XHQvLyBHZW5lcmF0ZSBhIGZ1bmN0aW9uIG9mIHJlY3Vyc2l2ZSBmdW5jdGlvbnMgdGhhdCBjYW4gYmUgdXNlZCB0byBjaGVjayBlYWNoIGVsZW1lbnRcblx0XHRpZiAoICFtYXRjaCApIHtcblx0XHRcdG1hdGNoID0gdG9rZW5pemUoIHNlbGVjdG9yICk7XG5cdFx0fVxuXHRcdGkgPSBtYXRjaC5sZW5ndGg7XG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRjYWNoZWQgPSBtYXRjaGVyRnJvbVRva2VucyggbWF0Y2hbaV0gKTtcblx0XHRcdGlmICggY2FjaGVkWyBleHBhbmRvIF0gKSB7XG5cdFx0XHRcdHNldE1hdGNoZXJzLnB1c2goIGNhY2hlZCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZWxlbWVudE1hdGNoZXJzLnB1c2goIGNhY2hlZCApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhY2hlIHRoZSBjb21waWxlZCBmdW5jdGlvblxuXHRcdGNhY2hlZCA9IGNvbXBpbGVyQ2FjaGUoIHNlbGVjdG9yLCBtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMoIGVsZW1lbnRNYXRjaGVycywgc2V0TWF0Y2hlcnMgKSApO1xuXG5cdFx0Ly8gU2F2ZSBzZWxlY3RvciBhbmQgdG9rZW5pemF0aW9uXG5cdFx0Y2FjaGVkLnNlbGVjdG9yID0gc2VsZWN0b3I7XG5cdH1cblx0cmV0dXJuIGNhY2hlZDtcbn07XG5cbi8qKlxuICogQSBsb3ctbGV2ZWwgc2VsZWN0aW9uIGZ1bmN0aW9uIHRoYXQgd29ya3Mgd2l0aCBTaXp6bGUncyBjb21waWxlZFxuICogIHNlbGVjdG9yIGZ1bmN0aW9uc1xuICogQHBhcmFtIHtTdHJpbmd8RnVuY3Rpb259IHNlbGVjdG9yIEEgc2VsZWN0b3Igb3IgYSBwcmUtY29tcGlsZWRcbiAqICBzZWxlY3RvciBmdW5jdGlvbiBidWlsdCB3aXRoIFNpenpsZS5jb21waWxlXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGNvbnRleHRcbiAqIEBwYXJhbSB7QXJyYXl9IFtyZXN1bHRzXVxuICogQHBhcmFtIHtBcnJheX0gW3NlZWRdIEEgc2V0IG9mIGVsZW1lbnRzIHRvIG1hdGNoIGFnYWluc3RcbiAqL1xuc2VsZWN0ID0gU2l6emxlLnNlbGVjdCA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApIHtcblx0dmFyIGksIHRva2VucywgdG9rZW4sIHR5cGUsIGZpbmQsXG5cdFx0Y29tcGlsZWQgPSB0eXBlb2Ygc2VsZWN0b3IgPT09IFwiZnVuY3Rpb25cIiAmJiBzZWxlY3Rvcixcblx0XHRtYXRjaCA9ICFzZWVkICYmIHRva2VuaXplKCAoc2VsZWN0b3IgPSBjb21waWxlZC5zZWxlY3RvciB8fCBzZWxlY3RvcikgKTtcblxuXHRyZXN1bHRzID0gcmVzdWx0cyB8fCBbXTtcblxuXHQvLyBUcnkgdG8gbWluaW1pemUgb3BlcmF0aW9ucyBpZiB0aGVyZSBpcyBvbmx5IG9uZSBzZWxlY3RvciBpbiB0aGUgbGlzdCBhbmQgbm8gc2VlZFxuXHQvLyAodGhlIGxhdHRlciBvZiB3aGljaCBndWFyYW50ZWVzIHVzIGNvbnRleHQpXG5cdGlmICggbWF0Y2gubGVuZ3RoID09PSAxICkge1xuXG5cdFx0Ly8gUmVkdWNlIGNvbnRleHQgaWYgdGhlIGxlYWRpbmcgY29tcG91bmQgc2VsZWN0b3IgaXMgYW4gSURcblx0XHR0b2tlbnMgPSBtYXRjaFswXSA9IG1hdGNoWzBdLnNsaWNlKCAwICk7XG5cdFx0aWYgKCB0b2tlbnMubGVuZ3RoID4gMiAmJiAodG9rZW4gPSB0b2tlbnNbMF0pLnR5cGUgPT09IFwiSURcIiAmJlxuXHRcdFx0XHRjb250ZXh0Lm5vZGVUeXBlID09PSA5ICYmIGRvY3VtZW50SXNIVE1MICYmIEV4cHIucmVsYXRpdmVbIHRva2Vuc1sxXS50eXBlIF0gKSB7XG5cblx0XHRcdGNvbnRleHQgPSAoIEV4cHIuZmluZFtcIklEXCJdKCB0b2tlbi5tYXRjaGVzWzBdLnJlcGxhY2UocnVuZXNjYXBlLCBmdW5lc2NhcGUpLCBjb250ZXh0ICkgfHwgW10gKVswXTtcblx0XHRcdGlmICggIWNvbnRleHQgKSB7XG5cdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXG5cdFx0XHQvLyBQcmVjb21waWxlZCBtYXRjaGVycyB3aWxsIHN0aWxsIHZlcmlmeSBhbmNlc3RyeSwgc28gc3RlcCB1cCBhIGxldmVsXG5cdFx0XHR9IGVsc2UgaWYgKCBjb21waWxlZCApIHtcblx0XHRcdFx0Y29udGV4dCA9IGNvbnRleHQucGFyZW50Tm9kZTtcblx0XHRcdH1cblxuXHRcdFx0c2VsZWN0b3IgPSBzZWxlY3Rvci5zbGljZSggdG9rZW5zLnNoaWZ0KCkudmFsdWUubGVuZ3RoICk7XG5cdFx0fVxuXG5cdFx0Ly8gRmV0Y2ggYSBzZWVkIHNldCBmb3IgcmlnaHQtdG8tbGVmdCBtYXRjaGluZ1xuXHRcdGkgPSBtYXRjaEV4cHJbXCJuZWVkc0NvbnRleHRcIl0udGVzdCggc2VsZWN0b3IgKSA/IDAgOiB0b2tlbnMubGVuZ3RoO1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0dG9rZW4gPSB0b2tlbnNbaV07XG5cblx0XHRcdC8vIEFib3J0IGlmIHdlIGhpdCBhIGNvbWJpbmF0b3Jcblx0XHRcdGlmICggRXhwci5yZWxhdGl2ZVsgKHR5cGUgPSB0b2tlbi50eXBlKSBdICkge1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdGlmICggKGZpbmQgPSBFeHByLmZpbmRbIHR5cGUgXSkgKSB7XG5cdFx0XHRcdC8vIFNlYXJjaCwgZXhwYW5kaW5nIGNvbnRleHQgZm9yIGxlYWRpbmcgc2libGluZyBjb21iaW5hdG9yc1xuXHRcdFx0XHRpZiAoIChzZWVkID0gZmluZChcblx0XHRcdFx0XHR0b2tlbi5tYXRjaGVzWzBdLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICksXG5cdFx0XHRcdFx0cnNpYmxpbmcudGVzdCggdG9rZW5zWzBdLnR5cGUgKSAmJiB0ZXN0Q29udGV4dCggY29udGV4dC5wYXJlbnROb2RlICkgfHwgY29udGV4dFxuXHRcdFx0XHQpKSApIHtcblxuXHRcdFx0XHRcdC8vIElmIHNlZWQgaXMgZW1wdHkgb3Igbm8gdG9rZW5zIHJlbWFpbiwgd2UgY2FuIHJldHVybiBlYXJseVxuXHRcdFx0XHRcdHRva2Vucy5zcGxpY2UoIGksIDEgKTtcblx0XHRcdFx0XHRzZWxlY3RvciA9IHNlZWQubGVuZ3RoICYmIHRvU2VsZWN0b3IoIHRva2VucyApO1xuXHRcdFx0XHRcdGlmICggIXNlbGVjdG9yICkge1xuXHRcdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgc2VlZCApO1xuXHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBDb21waWxlIGFuZCBleGVjdXRlIGEgZmlsdGVyaW5nIGZ1bmN0aW9uIGlmIG9uZSBpcyBub3QgcHJvdmlkZWRcblx0Ly8gUHJvdmlkZSBgbWF0Y2hgIHRvIGF2b2lkIHJldG9rZW5pemF0aW9uIGlmIHdlIG1vZGlmaWVkIHRoZSBzZWxlY3RvciBhYm92ZVxuXHQoIGNvbXBpbGVkIHx8IGNvbXBpbGUoIHNlbGVjdG9yLCBtYXRjaCApICkoXG5cdFx0c2VlZCxcblx0XHRjb250ZXh0LFxuXHRcdCFkb2N1bWVudElzSFRNTCxcblx0XHRyZXN1bHRzLFxuXHRcdCFjb250ZXh0IHx8IHJzaWJsaW5nLnRlc3QoIHNlbGVjdG9yICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8IGNvbnRleHRcblx0KTtcblx0cmV0dXJuIHJlc3VsdHM7XG59O1xuXG4vLyBPbmUtdGltZSBhc3NpZ25tZW50c1xuXG4vLyBTb3J0IHN0YWJpbGl0eVxuc3VwcG9ydC5zb3J0U3RhYmxlID0gZXhwYW5kby5zcGxpdChcIlwiKS5zb3J0KCBzb3J0T3JkZXIgKS5qb2luKFwiXCIpID09PSBleHBhbmRvO1xuXG4vLyBTdXBwb3J0OiBDaHJvbWUgMTQtMzUrXG4vLyBBbHdheXMgYXNzdW1lIGR1cGxpY2F0ZXMgaWYgdGhleSBhcmVuJ3QgcGFzc2VkIHRvIHRoZSBjb21wYXJpc29uIGZ1bmN0aW9uXG5zdXBwb3J0LmRldGVjdER1cGxpY2F0ZXMgPSAhIWhhc0R1cGxpY2F0ZTtcblxuLy8gSW5pdGlhbGl6ZSBhZ2FpbnN0IHRoZSBkZWZhdWx0IGRvY3VtZW50XG5zZXREb2N1bWVudCgpO1xuXG4vLyBTdXBwb3J0OiBXZWJraXQ8NTM3LjMyIC0gU2FmYXJpIDYuMC4zL0Nocm9tZSAyNSAoZml4ZWQgaW4gQ2hyb21lIDI3KVxuLy8gRGV0YWNoZWQgbm9kZXMgY29uZm91bmRpbmdseSBmb2xsb3cgKmVhY2ggb3RoZXIqXG5zdXBwb3J0LnNvcnREZXRhY2hlZCA9IGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdC8vIFNob3VsZCByZXR1cm4gMSwgYnV0IHJldHVybnMgNCAoZm9sbG93aW5nKVxuXHRyZXR1cm4gZWwuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJmaWVsZHNldFwiKSApICYgMTtcbn0pO1xuXG4vLyBTdXBwb3J0OiBJRTw4XG4vLyBQcmV2ZW50IGF0dHJpYnV0ZS9wcm9wZXJ0eSBcImludGVycG9sYXRpb25cIlxuLy8gaHR0cHM6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9tczUzNjQyOSUyOFZTLjg1JTI5LmFzcHhcbmlmICggIWFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdGVsLmlubmVySFRNTCA9IFwiPGEgaHJlZj0nIyc+PC9hPlwiO1xuXHRyZXR1cm4gZWwuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpID09PSBcIiNcIiA7XG59KSApIHtcblx0YWRkSGFuZGxlKCBcInR5cGV8aHJlZnxoZWlnaHR8d2lkdGhcIiwgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdGlmICggIWlzWE1MICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lLCBuYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwidHlwZVwiID8gMSA6IDIgKTtcblx0XHR9XG5cdH0pO1xufVxuXG4vLyBTdXBwb3J0OiBJRTw5XG4vLyBVc2UgZGVmYXVsdFZhbHVlIGluIHBsYWNlIG9mIGdldEF0dHJpYnV0ZShcInZhbHVlXCIpXG5pZiAoICFzdXBwb3J0LmF0dHJpYnV0ZXMgfHwgIWFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdGVsLmlubmVySFRNTCA9IFwiPGlucHV0Lz5cIjtcblx0ZWwuZmlyc3RDaGlsZC5zZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiwgXCJcIiApO1xuXHRyZXR1cm4gZWwuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiApID09PSBcIlwiO1xufSkgKSB7XG5cdGFkZEhhbmRsZSggXCJ2YWx1ZVwiLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0aWYgKCAhaXNYTUwgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImlucHV0XCIgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kZWZhdWx0VmFsdWU7XG5cdFx0fVxuXHR9KTtcbn1cblxuLy8gU3VwcG9ydDogSUU8OVxuLy8gVXNlIGdldEF0dHJpYnV0ZU5vZGUgdG8gZmV0Y2ggYm9vbGVhbnMgd2hlbiBnZXRBdHRyaWJ1dGUgbGllc1xuaWYgKCAhYXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0cmV0dXJuIGVsLmdldEF0dHJpYnV0ZShcImRpc2FibGVkXCIpID09IG51bGw7XG59KSApIHtcblx0YWRkSGFuZGxlKCBib29sZWFucywgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdHZhciB2YWw7XG5cdFx0aWYgKCAhaXNYTUwgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbVsgbmFtZSBdID09PSB0cnVlID8gbmFtZS50b0xvd2VyQ2FzZSgpIDpcblx0XHRcdFx0XHQodmFsID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKCBuYW1lICkpICYmIHZhbC5zcGVjaWZpZWQgP1xuXHRcdFx0XHRcdHZhbC52YWx1ZSA6XG5cdFx0XHRcdG51bGw7XG5cdFx0fVxuXHR9KTtcbn1cblxucmV0dXJuIFNpenpsZTtcblxufSkoIHdpbmRvdyApO1xuXG5cblxualF1ZXJ5LmZpbmQgPSBTaXp6bGU7XG5qUXVlcnkuZXhwciA9IFNpenpsZS5zZWxlY3RvcnM7XG5cbi8vIERlcHJlY2F0ZWRcbmpRdWVyeS5leHByWyBcIjpcIiBdID0galF1ZXJ5LmV4cHIucHNldWRvcztcbmpRdWVyeS51bmlxdWVTb3J0ID0galF1ZXJ5LnVuaXF1ZSA9IFNpenpsZS51bmlxdWVTb3J0O1xualF1ZXJ5LnRleHQgPSBTaXp6bGUuZ2V0VGV4dDtcbmpRdWVyeS5pc1hNTERvYyA9IFNpenpsZS5pc1hNTDtcbmpRdWVyeS5jb250YWlucyA9IFNpenpsZS5jb250YWlucztcbmpRdWVyeS5lc2NhcGVTZWxlY3RvciA9IFNpenpsZS5lc2NhcGU7XG5cblxuXG5cbnZhciBkaXIgPSBmdW5jdGlvbiggZWxlbSwgZGlyLCB1bnRpbCApIHtcblx0dmFyIG1hdGNoZWQgPSBbXSxcblx0XHR0cnVuY2F0ZSA9IHVudGlsICE9PSB1bmRlZmluZWQ7XG5cblx0d2hpbGUgKCAoIGVsZW0gPSBlbGVtWyBkaXIgXSApICYmIGVsZW0ubm9kZVR5cGUgIT09IDkgKSB7XG5cdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0aWYgKCB0cnVuY2F0ZSAmJiBqUXVlcnkoIGVsZW0gKS5pcyggdW50aWwgKSApIHtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRtYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIG1hdGNoZWQ7XG59O1xuXG5cbnZhciBzaWJsaW5ncyA9IGZ1bmN0aW9uKCBuLCBlbGVtICkge1xuXHR2YXIgbWF0Y2hlZCA9IFtdO1xuXG5cdGZvciAoIDsgbjsgbiA9IG4ubmV4dFNpYmxpbmcgKSB7XG5cdFx0aWYgKCBuLm5vZGVUeXBlID09PSAxICYmIG4gIT09IGVsZW0gKSB7XG5cdFx0XHRtYXRjaGVkLnB1c2goIG4gKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gbWF0Y2hlZDtcbn07XG5cblxudmFyIHJuZWVkc0NvbnRleHQgPSBqUXVlcnkuZXhwci5tYXRjaC5uZWVkc0NvbnRleHQ7XG5cblxuXG5mdW5jdGlvbiBub2RlTmFtZSggZWxlbSwgbmFtZSApIHtcblxuICByZXR1cm4gZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUudG9Mb3dlckNhc2UoKTtcblxufTtcbnZhciByc2luZ2xlVGFnID0gKCAvXjwoW2Etel1bXlxcL1xcMD46XFx4MjBcXHRcXHJcXG5cXGZdKilbXFx4MjBcXHRcXHJcXG5cXGZdKlxcLz8+KD86PFxcL1xcMT58KSQvaSApO1xuXG5cblxuLy8gSW1wbGVtZW50IHRoZSBpZGVudGljYWwgZnVuY3Rpb25hbGl0eSBmb3IgZmlsdGVyIGFuZCBub3RcbmZ1bmN0aW9uIHdpbm5vdyggZWxlbWVudHMsIHF1YWxpZmllciwgbm90ICkge1xuXHRpZiAoIGlzRnVuY3Rpb24oIHF1YWxpZmllciApICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtLCBpICkge1xuXHRcdFx0cmV0dXJuICEhcXVhbGlmaWVyLmNhbGwoIGVsZW0sIGksIGVsZW0gKSAhPT0gbm90O1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIFNpbmdsZSBlbGVtZW50XG5cdGlmICggcXVhbGlmaWVyLm5vZGVUeXBlICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuICggZWxlbSA9PT0gcXVhbGlmaWVyICkgIT09IG5vdDtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBBcnJheWxpa2Ugb2YgZWxlbWVudHMgKGpRdWVyeSwgYXJndW1lbnRzLCBBcnJheSlcblx0aWYgKCB0eXBlb2YgcXVhbGlmaWVyICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuICggaW5kZXhPZi5jYWxsKCBxdWFsaWZpZXIsIGVsZW0gKSA+IC0xICkgIT09IG5vdDtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBGaWx0ZXJlZCBkaXJlY3RseSBmb3IgYm90aCBzaW1wbGUgYW5kIGNvbXBsZXggc2VsZWN0b3JzXG5cdHJldHVybiBqUXVlcnkuZmlsdGVyKCBxdWFsaWZpZXIsIGVsZW1lbnRzLCBub3QgKTtcbn1cblxualF1ZXJ5LmZpbHRlciA9IGZ1bmN0aW9uKCBleHByLCBlbGVtcywgbm90ICkge1xuXHR2YXIgZWxlbSA9IGVsZW1zWyAwIF07XG5cblx0aWYgKCBub3QgKSB7XG5cdFx0ZXhwciA9IFwiOm5vdChcIiArIGV4cHIgKyBcIilcIjtcblx0fVxuXG5cdGlmICggZWxlbXMubGVuZ3RoID09PSAxICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvciggZWxlbSwgZXhwciApID8gWyBlbGVtIF0gOiBbXTtcblx0fVxuXG5cdHJldHVybiBqUXVlcnkuZmluZC5tYXRjaGVzKCBleHByLCBqUXVlcnkuZ3JlcCggZWxlbXMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBlbGVtLm5vZGVUeXBlID09PSAxO1xuXHR9ICkgKTtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZmluZDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBpLCByZXQsXG5cdFx0XHRsZW4gPSB0aGlzLmxlbmd0aCxcblx0XHRcdHNlbGYgPSB0aGlzO1xuXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeSggc2VsZWN0b3IgKS5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRcdGlmICggalF1ZXJ5LmNvbnRhaW5zKCBzZWxmWyBpIF0sIHRoaXMgKSApIHtcblx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSApICk7XG5cdFx0fVxuXG5cdFx0cmV0ID0gdGhpcy5wdXNoU3RhY2soIFtdICk7XG5cblx0XHRmb3IgKCBpID0gMDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0alF1ZXJ5LmZpbmQoIHNlbGVjdG9yLCBzZWxmWyBpIF0sIHJldCApO1xuXHRcdH1cblxuXHRcdHJldHVybiBsZW4gPiAxID8galF1ZXJ5LnVuaXF1ZVNvcnQoIHJldCApIDogcmV0O1xuXHR9LFxuXHRmaWx0ZXI6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHdpbm5vdyggdGhpcywgc2VsZWN0b3IgfHwgW10sIGZhbHNlICkgKTtcblx0fSxcblx0bm90OiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCB3aW5ub3coIHRoaXMsIHNlbGVjdG9yIHx8IFtdLCB0cnVlICkgKTtcblx0fSxcblx0aXM6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gISF3aW5ub3coXG5cdFx0XHR0aGlzLFxuXG5cdFx0XHQvLyBJZiB0aGlzIGlzIGEgcG9zaXRpb25hbC9yZWxhdGl2ZSBzZWxlY3RvciwgY2hlY2sgbWVtYmVyc2hpcCBpbiB0aGUgcmV0dXJuZWQgc2V0XG5cdFx0XHQvLyBzbyAkKFwicDpmaXJzdFwiKS5pcyhcInA6bGFzdFwiKSB3b24ndCByZXR1cm4gdHJ1ZSBmb3IgYSBkb2Mgd2l0aCB0d28gXCJwXCIuXG5cdFx0XHR0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgJiYgcm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvciApID9cblx0XHRcdFx0alF1ZXJ5KCBzZWxlY3RvciApIDpcblx0XHRcdFx0c2VsZWN0b3IgfHwgW10sXG5cdFx0XHRmYWxzZVxuXHRcdCkubGVuZ3RoO1xuXHR9XG59ICk7XG5cblxuLy8gSW5pdGlhbGl6ZSBhIGpRdWVyeSBvYmplY3RcblxuXG4vLyBBIGNlbnRyYWwgcmVmZXJlbmNlIHRvIHRoZSByb290IGpRdWVyeShkb2N1bWVudClcbnZhciByb290alF1ZXJ5LFxuXG5cdC8vIEEgc2ltcGxlIHdheSB0byBjaGVjayBmb3IgSFRNTCBzdHJpbmdzXG5cdC8vIFByaW9yaXRpemUgI2lkIG92ZXIgPHRhZz4gdG8gYXZvaWQgWFNTIHZpYSBsb2NhdGlvbi5oYXNoICgjOTUyMSlcblx0Ly8gU3RyaWN0IEhUTUwgcmVjb2duaXRpb24gKCMxMTI5MDogbXVzdCBzdGFydCB3aXRoIDwpXG5cdC8vIFNob3J0Y3V0IHNpbXBsZSAjaWQgY2FzZSBmb3Igc3BlZWRcblx0cnF1aWNrRXhwciA9IC9eKD86XFxzKig8W1xcd1xcV10rPilbXj5dKnwjKFtcXHctXSspKSQvLFxuXG5cdGluaXQgPSBqUXVlcnkuZm4uaW5pdCA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCwgcm9vdCApIHtcblx0XHR2YXIgbWF0Y2gsIGVsZW07XG5cblx0XHQvLyBIQU5ETEU6ICQoXCJcIiksICQobnVsbCksICQodW5kZWZpbmVkKSwgJChmYWxzZSlcblx0XHRpZiAoICFzZWxlY3RvciApIHtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblxuXHRcdC8vIE1ldGhvZCBpbml0KCkgYWNjZXB0cyBhbiBhbHRlcm5hdGUgcm9vdGpRdWVyeVxuXHRcdC8vIHNvIG1pZ3JhdGUgY2FuIHN1cHBvcnQgalF1ZXJ5LnN1YiAoZ2gtMjEwMSlcblx0XHRyb290ID0gcm9vdCB8fCByb290alF1ZXJ5O1xuXG5cdFx0Ly8gSGFuZGxlIEhUTUwgc3RyaW5nc1xuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0aWYgKCBzZWxlY3RvclsgMCBdID09PSBcIjxcIiAmJlxuXHRcdFx0XHRzZWxlY3Rvclsgc2VsZWN0b3IubGVuZ3RoIC0gMSBdID09PSBcIj5cIiAmJlxuXHRcdFx0XHRzZWxlY3Rvci5sZW5ndGggPj0gMyApIHtcblxuXHRcdFx0XHQvLyBBc3N1bWUgdGhhdCBzdHJpbmdzIHRoYXQgc3RhcnQgYW5kIGVuZCB3aXRoIDw+IGFyZSBIVE1MIGFuZCBza2lwIHRoZSByZWdleCBjaGVja1xuXHRcdFx0XHRtYXRjaCA9IFsgbnVsbCwgc2VsZWN0b3IsIG51bGwgXTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0bWF0Y2ggPSBycXVpY2tFeHByLmV4ZWMoIHNlbGVjdG9yICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE1hdGNoIGh0bWwgb3IgbWFrZSBzdXJlIG5vIGNvbnRleHQgaXMgc3BlY2lmaWVkIGZvciAjaWRcblx0XHRcdGlmICggbWF0Y2ggJiYgKCBtYXRjaFsgMSBdIHx8ICFjb250ZXh0ICkgKSB7XG5cblx0XHRcdFx0Ly8gSEFORExFOiAkKGh0bWwpIC0+ICQoYXJyYXkpXG5cdFx0XHRcdGlmICggbWF0Y2hbIDEgXSApIHtcblx0XHRcdFx0XHRjb250ZXh0ID0gY29udGV4dCBpbnN0YW5jZW9mIGpRdWVyeSA/IGNvbnRleHRbIDAgXSA6IGNvbnRleHQ7XG5cblx0XHRcdFx0XHQvLyBPcHRpb24gdG8gcnVuIHNjcmlwdHMgaXMgdHJ1ZSBmb3IgYmFjay1jb21wYXRcblx0XHRcdFx0XHQvLyBJbnRlbnRpb25hbGx5IGxldCB0aGUgZXJyb3IgYmUgdGhyb3duIGlmIHBhcnNlSFRNTCBpcyBub3QgcHJlc2VudFxuXHRcdFx0XHRcdGpRdWVyeS5tZXJnZSggdGhpcywgalF1ZXJ5LnBhcnNlSFRNTChcblx0XHRcdFx0XHRcdG1hdGNoWyAxIF0sXG5cdFx0XHRcdFx0XHRjb250ZXh0ICYmIGNvbnRleHQubm9kZVR5cGUgPyBjb250ZXh0Lm93bmVyRG9jdW1lbnQgfHwgY29udGV4dCA6IGRvY3VtZW50LFxuXHRcdFx0XHRcdFx0dHJ1ZVxuXHRcdFx0XHRcdCkgKTtcblxuXHRcdFx0XHRcdC8vIEhBTkRMRTogJChodG1sLCBwcm9wcylcblx0XHRcdFx0XHRpZiAoIHJzaW5nbGVUYWcudGVzdCggbWF0Y2hbIDEgXSApICYmIGpRdWVyeS5pc1BsYWluT2JqZWN0KCBjb250ZXh0ICkgKSB7XG5cdFx0XHRcdFx0XHRmb3IgKCBtYXRjaCBpbiBjb250ZXh0ICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFByb3BlcnRpZXMgb2YgY29udGV4dCBhcmUgY2FsbGVkIGFzIG1ldGhvZHMgaWYgcG9zc2libGVcblx0XHRcdFx0XHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCB0aGlzWyBtYXRjaCBdICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0dGhpc1sgbWF0Y2ggXSggY29udGV4dFsgbWF0Y2ggXSApO1xuXG5cdFx0XHRcdFx0XHRcdC8vIC4uLmFuZCBvdGhlcndpc2Ugc2V0IGFzIGF0dHJpYnV0ZXNcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHR0aGlzLmF0dHIoIG1hdGNoLCBjb250ZXh0WyBtYXRjaCBdICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdFx0XHQvLyBIQU5ETEU6ICQoI2lkKVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGVsZW0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCggbWF0Y2hbIDIgXSApO1xuXG5cdFx0XHRcdFx0aWYgKCBlbGVtICkge1xuXG5cdFx0XHRcdFx0XHQvLyBJbmplY3QgdGhlIGVsZW1lbnQgZGlyZWN0bHkgaW50byB0aGUgalF1ZXJ5IG9iamVjdFxuXHRcdFx0XHRcdFx0dGhpc1sgMCBdID0gZWxlbTtcblx0XHRcdFx0XHRcdHRoaXMubGVuZ3RoID0gMTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblxuXHRcdFx0Ly8gSEFORExFOiAkKGV4cHIsICQoLi4uKSlcblx0XHRcdH0gZWxzZSBpZiAoICFjb250ZXh0IHx8IGNvbnRleHQuanF1ZXJ5ICkge1xuXHRcdFx0XHRyZXR1cm4gKCBjb250ZXh0IHx8IHJvb3QgKS5maW5kKCBzZWxlY3RvciApO1xuXG5cdFx0XHQvLyBIQU5ETEU6ICQoZXhwciwgY29udGV4dClcblx0XHRcdC8vICh3aGljaCBpcyBqdXN0IGVxdWl2YWxlbnQgdG86ICQoY29udGV4dCkuZmluZChleHByKVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuY29uc3RydWN0b3IoIGNvbnRleHQgKS5maW5kKCBzZWxlY3RvciApO1xuXHRcdFx0fVxuXG5cdFx0Ly8gSEFORExFOiAkKERPTUVsZW1lbnQpXG5cdFx0fSBlbHNlIGlmICggc2VsZWN0b3Iubm9kZVR5cGUgKSB7XG5cdFx0XHR0aGlzWyAwIF0gPSBzZWxlY3Rvcjtcblx0XHRcdHRoaXMubGVuZ3RoID0gMTtcblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0Ly8gSEFORExFOiAkKGZ1bmN0aW9uKVxuXHRcdC8vIFNob3J0Y3V0IGZvciBkb2N1bWVudCByZWFkeVxuXHRcdH0gZWxzZSBpZiAoIGlzRnVuY3Rpb24oIHNlbGVjdG9yICkgKSB7XG5cdFx0XHRyZXR1cm4gcm9vdC5yZWFkeSAhPT0gdW5kZWZpbmVkID9cblx0XHRcdFx0cm9vdC5yZWFkeSggc2VsZWN0b3IgKSA6XG5cblx0XHRcdFx0Ly8gRXhlY3V0ZSBpbW1lZGlhdGVseSBpZiByZWFkeSBpcyBub3QgcHJlc2VudFxuXHRcdFx0XHRzZWxlY3RvciggalF1ZXJ5ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGpRdWVyeS5tYWtlQXJyYXkoIHNlbGVjdG9yLCB0aGlzICk7XG5cdH07XG5cbi8vIEdpdmUgdGhlIGluaXQgZnVuY3Rpb24gdGhlIGpRdWVyeSBwcm90b3R5cGUgZm9yIGxhdGVyIGluc3RhbnRpYXRpb25cbmluaXQucHJvdG90eXBlID0galF1ZXJ5LmZuO1xuXG4vLyBJbml0aWFsaXplIGNlbnRyYWwgcmVmZXJlbmNlXG5yb290alF1ZXJ5ID0galF1ZXJ5KCBkb2N1bWVudCApO1xuXG5cbnZhciBycGFyZW50c3ByZXYgPSAvXig/OnBhcmVudHN8cHJldig/OlVudGlsfEFsbCkpLyxcblxuXHQvLyBNZXRob2RzIGd1YXJhbnRlZWQgdG8gcHJvZHVjZSBhIHVuaXF1ZSBzZXQgd2hlbiBzdGFydGluZyBmcm9tIGEgdW5pcXVlIHNldFxuXHRndWFyYW50ZWVkVW5pcXVlID0ge1xuXHRcdGNoaWxkcmVuOiB0cnVlLFxuXHRcdGNvbnRlbnRzOiB0cnVlLFxuXHRcdG5leHQ6IHRydWUsXG5cdFx0cHJldjogdHJ1ZVxuXHR9O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGhhczogZnVuY3Rpb24oIHRhcmdldCApIHtcblx0XHR2YXIgdGFyZ2V0cyA9IGpRdWVyeSggdGFyZ2V0LCB0aGlzICksXG5cdFx0XHRsID0gdGFyZ2V0cy5sZW5ndGg7XG5cblx0XHRyZXR1cm4gdGhpcy5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGkgPSAwO1xuXHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRpZiAoIGpRdWVyeS5jb250YWlucyggdGhpcywgdGFyZ2V0c1sgaSBdICkgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0Y2xvc2VzdDogZnVuY3Rpb24oIHNlbGVjdG9ycywgY29udGV4dCApIHtcblx0XHR2YXIgY3VyLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRsID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRtYXRjaGVkID0gW10sXG5cdFx0XHR0YXJnZXRzID0gdHlwZW9mIHNlbGVjdG9ycyAhPT0gXCJzdHJpbmdcIiAmJiBqUXVlcnkoIHNlbGVjdG9ycyApO1xuXG5cdFx0Ly8gUG9zaXRpb25hbCBzZWxlY3RvcnMgbmV2ZXIgbWF0Y2gsIHNpbmNlIHRoZXJlJ3Mgbm8gX3NlbGVjdGlvbl8gY29udGV4dFxuXHRcdGlmICggIXJuZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3JzICkgKSB7XG5cdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdGZvciAoIGN1ciA9IHRoaXNbIGkgXTsgY3VyICYmIGN1ciAhPT0gY29udGV4dDsgY3VyID0gY3VyLnBhcmVudE5vZGUgKSB7XG5cblx0XHRcdFx0XHQvLyBBbHdheXMgc2tpcCBkb2N1bWVudCBmcmFnbWVudHNcblx0XHRcdFx0XHRpZiAoIGN1ci5ub2RlVHlwZSA8IDExICYmICggdGFyZ2V0cyA/XG5cdFx0XHRcdFx0XHR0YXJnZXRzLmluZGV4KCBjdXIgKSA+IC0xIDpcblxuXHRcdFx0XHRcdFx0Ly8gRG9uJ3QgcGFzcyBub24tZWxlbWVudHMgdG8gU2l6emxlXG5cdFx0XHRcdFx0XHRjdXIubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdFx0XHRcdFx0alF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKCBjdXIsIHNlbGVjdG9ycyApICkgKSB7XG5cblx0XHRcdFx0XHRcdG1hdGNoZWQucHVzaCggY3VyICk7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIG1hdGNoZWQubGVuZ3RoID4gMSA/IGpRdWVyeS51bmlxdWVTb3J0KCBtYXRjaGVkICkgOiBtYXRjaGVkICk7XG5cdH0sXG5cblx0Ly8gRGV0ZXJtaW5lIHRoZSBwb3NpdGlvbiBvZiBhbiBlbGVtZW50IHdpdGhpbiB0aGUgc2V0XG5cdGluZGV4OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdC8vIE5vIGFyZ3VtZW50LCByZXR1cm4gaW5kZXggaW4gcGFyZW50XG5cdFx0aWYgKCAhZWxlbSApIHtcblx0XHRcdHJldHVybiAoIHRoaXNbIDAgXSAmJiB0aGlzWyAwIF0ucGFyZW50Tm9kZSApID8gdGhpcy5maXJzdCgpLnByZXZBbGwoKS5sZW5ndGggOiAtMTtcblx0XHR9XG5cblx0XHQvLyBJbmRleCBpbiBzZWxlY3RvclxuXHRcdGlmICggdHlwZW9mIGVsZW0gPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gaW5kZXhPZi5jYWxsKCBqUXVlcnkoIGVsZW0gKSwgdGhpc1sgMCBdICk7XG5cdFx0fVxuXG5cdFx0Ly8gTG9jYXRlIHRoZSBwb3NpdGlvbiBvZiB0aGUgZGVzaXJlZCBlbGVtZW50XG5cdFx0cmV0dXJuIGluZGV4T2YuY2FsbCggdGhpcyxcblxuXHRcdFx0Ly8gSWYgaXQgcmVjZWl2ZXMgYSBqUXVlcnkgb2JqZWN0LCB0aGUgZmlyc3QgZWxlbWVudCBpcyB1c2VkXG5cdFx0XHRlbGVtLmpxdWVyeSA/IGVsZW1bIDAgXSA6IGVsZW1cblx0XHQpO1xuXHR9LFxuXG5cdGFkZDogZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0ICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayhcblx0XHRcdGpRdWVyeS51bmlxdWVTb3J0KFxuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIHRoaXMuZ2V0KCksIGpRdWVyeSggc2VsZWN0b3IsIGNvbnRleHQgKSApXG5cdFx0XHQpXG5cdFx0KTtcblx0fSxcblxuXHRhZGRCYWNrOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMuYWRkKCBzZWxlY3RvciA9PSBudWxsID9cblx0XHRcdHRoaXMucHJldk9iamVjdCA6IHRoaXMucHJldk9iamVjdC5maWx0ZXIoIHNlbGVjdG9yIClcblx0XHQpO1xuXHR9XG59ICk7XG5cbmZ1bmN0aW9uIHNpYmxpbmcoIGN1ciwgZGlyICkge1xuXHR3aGlsZSAoICggY3VyID0gY3VyWyBkaXIgXSApICYmIGN1ci5ub2RlVHlwZSAhPT0gMSApIHt9XG5cdHJldHVybiBjdXI7XG59XG5cbmpRdWVyeS5lYWNoKCB7XG5cdHBhcmVudDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblx0XHRyZXR1cm4gcGFyZW50ICYmIHBhcmVudC5ub2RlVHlwZSAhPT0gMTEgPyBwYXJlbnQgOiBudWxsO1xuXHR9LFxuXHRwYXJlbnRzOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInBhcmVudE5vZGVcIiApO1xuXHR9LFxuXHRwYXJlbnRzVW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBpLCB1bnRpbCApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInBhcmVudE5vZGVcIiwgdW50aWwgKTtcblx0fSxcblx0bmV4dDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmcoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiApO1xuXHR9LFxuXHRwcmV2OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZyggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiApO1xuXHR9LFxuXHRuZXh0QWxsOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIgKTtcblx0fSxcblx0cHJldkFsbDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiApO1xuXHR9LFxuXHRuZXh0VW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBpLCB1bnRpbCApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIsIHVudGlsICk7XG5cdH0sXG5cdHByZXZVbnRpbDogZnVuY3Rpb24oIGVsZW0sIGksIHVudGlsICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIsIHVudGlsICk7XG5cdH0sXG5cdHNpYmxpbmdzOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZ3MoICggZWxlbS5wYXJlbnROb2RlIHx8IHt9ICkuZmlyc3RDaGlsZCwgZWxlbSApO1xuXHR9LFxuXHRjaGlsZHJlbjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmdzKCBlbGVtLmZpcnN0Q2hpbGQgKTtcblx0fSxcblx0Y29udGVudHM6IGZ1bmN0aW9uKCBlbGVtICkge1xuICAgICAgICBpZiAoIG5vZGVOYW1lKCBlbGVtLCBcImlmcmFtZVwiICkgKSB7XG4gICAgICAgICAgICByZXR1cm4gZWxlbS5jb250ZW50RG9jdW1lbnQ7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTdXBwb3J0OiBJRSA5IC0gMTEgb25seSwgaU9TIDcgb25seSwgQW5kcm9pZCBCcm93c2VyIDw9NC4zIG9ubHlcbiAgICAgICAgLy8gVHJlYXQgdGhlIHRlbXBsYXRlIGVsZW1lbnQgYXMgYSByZWd1bGFyIG9uZSBpbiBicm93c2VycyB0aGF0XG4gICAgICAgIC8vIGRvbid0IHN1cHBvcnQgaXQuXG4gICAgICAgIGlmICggbm9kZU5hbWUoIGVsZW0sIFwidGVtcGxhdGVcIiApICkge1xuICAgICAgICAgICAgZWxlbSA9IGVsZW0uY29udGVudCB8fCBlbGVtO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGpRdWVyeS5tZXJnZSggW10sIGVsZW0uY2hpbGROb2RlcyApO1xuXHR9XG59LCBmdW5jdGlvbiggbmFtZSwgZm4gKSB7XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHVudGlsLCBzZWxlY3RvciApIHtcblx0XHR2YXIgbWF0Y2hlZCA9IGpRdWVyeS5tYXAoIHRoaXMsIGZuLCB1bnRpbCApO1xuXG5cdFx0aWYgKCBuYW1lLnNsaWNlKCAtNSApICE9PSBcIlVudGlsXCIgKSB7XG5cdFx0XHRzZWxlY3RvciA9IHVudGlsO1xuXHRcdH1cblxuXHRcdGlmICggc2VsZWN0b3IgJiYgdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0bWF0Y2hlZCA9IGpRdWVyeS5maWx0ZXIoIHNlbGVjdG9yLCBtYXRjaGVkICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLmxlbmd0aCA+IDEgKSB7XG5cblx0XHRcdC8vIFJlbW92ZSBkdXBsaWNhdGVzXG5cdFx0XHRpZiAoICFndWFyYW50ZWVkVW5pcXVlWyBuYW1lIF0gKSB7XG5cdFx0XHRcdGpRdWVyeS51bmlxdWVTb3J0KCBtYXRjaGVkICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJldmVyc2Ugb3JkZXIgZm9yIHBhcmVudHMqIGFuZCBwcmV2LWRlcml2YXRpdmVzXG5cdFx0XHRpZiAoIHJwYXJlbnRzcHJldi50ZXN0KCBuYW1lICkgKSB7XG5cdFx0XHRcdG1hdGNoZWQucmV2ZXJzZSgpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggbWF0Y2hlZCApO1xuXHR9O1xufSApO1xudmFyIHJub3RodG1sd2hpdGUgPSAoIC9bXlxceDIwXFx0XFxyXFxuXFxmXSsvZyApO1xuXG5cblxuLy8gQ29udmVydCBTdHJpbmctZm9ybWF0dGVkIG9wdGlvbnMgaW50byBPYmplY3QtZm9ybWF0dGVkIG9uZXNcbmZ1bmN0aW9uIGNyZWF0ZU9wdGlvbnMoIG9wdGlvbnMgKSB7XG5cdHZhciBvYmplY3QgPSB7fTtcblx0alF1ZXJ5LmVhY2goIG9wdGlvbnMubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXSwgZnVuY3Rpb24oIF8sIGZsYWcgKSB7XG5cdFx0b2JqZWN0WyBmbGFnIF0gPSB0cnVlO1xuXHR9ICk7XG5cdHJldHVybiBvYmplY3Q7XG59XG5cbi8qXG4gKiBDcmVhdGUgYSBjYWxsYmFjayBsaXN0IHVzaW5nIHRoZSBmb2xsb3dpbmcgcGFyYW1ldGVyczpcbiAqXG4gKlx0b3B0aW9uczogYW4gb3B0aW9uYWwgbGlzdCBvZiBzcGFjZS1zZXBhcmF0ZWQgb3B0aW9ucyB0aGF0IHdpbGwgY2hhbmdlIGhvd1xuICpcdFx0XHR0aGUgY2FsbGJhY2sgbGlzdCBiZWhhdmVzIG9yIGEgbW9yZSB0cmFkaXRpb25hbCBvcHRpb24gb2JqZWN0XG4gKlxuICogQnkgZGVmYXVsdCBhIGNhbGxiYWNrIGxpc3Qgd2lsbCBhY3QgbGlrZSBhbiBldmVudCBjYWxsYmFjayBsaXN0IGFuZCBjYW4gYmVcbiAqIFwiZmlyZWRcIiBtdWx0aXBsZSB0aW1lcy5cbiAqXG4gKiBQb3NzaWJsZSBvcHRpb25zOlxuICpcbiAqXHRvbmNlOlx0XHRcdHdpbGwgZW5zdXJlIHRoZSBjYWxsYmFjayBsaXN0IGNhbiBvbmx5IGJlIGZpcmVkIG9uY2UgKGxpa2UgYSBEZWZlcnJlZClcbiAqXG4gKlx0bWVtb3J5Olx0XHRcdHdpbGwga2VlcCB0cmFjayBvZiBwcmV2aW91cyB2YWx1ZXMgYW5kIHdpbGwgY2FsbCBhbnkgY2FsbGJhY2sgYWRkZWRcbiAqXHRcdFx0XHRcdGFmdGVyIHRoZSBsaXN0IGhhcyBiZWVuIGZpcmVkIHJpZ2h0IGF3YXkgd2l0aCB0aGUgbGF0ZXN0IFwibWVtb3JpemVkXCJcbiAqXHRcdFx0XHRcdHZhbHVlcyAobGlrZSBhIERlZmVycmVkKVxuICpcbiAqXHR1bmlxdWU6XHRcdFx0d2lsbCBlbnN1cmUgYSBjYWxsYmFjayBjYW4gb25seSBiZSBhZGRlZCBvbmNlIChubyBkdXBsaWNhdGUgaW4gdGhlIGxpc3QpXG4gKlxuICpcdHN0b3BPbkZhbHNlOlx0aW50ZXJydXB0IGNhbGxpbmdzIHdoZW4gYSBjYWxsYmFjayByZXR1cm5zIGZhbHNlXG4gKlxuICovXG5qUXVlcnkuQ2FsbGJhY2tzID0gZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cblx0Ly8gQ29udmVydCBvcHRpb25zIGZyb20gU3RyaW5nLWZvcm1hdHRlZCB0byBPYmplY3QtZm9ybWF0dGVkIGlmIG5lZWRlZFxuXHQvLyAod2UgY2hlY2sgaW4gY2FjaGUgZmlyc3QpXG5cdG9wdGlvbnMgPSB0eXBlb2Ygb3B0aW9ucyA9PT0gXCJzdHJpbmdcIiA/XG5cdFx0Y3JlYXRlT3B0aW9ucyggb3B0aW9ucyApIDpcblx0XHRqUXVlcnkuZXh0ZW5kKCB7fSwgb3B0aW9ucyApO1xuXG5cdHZhciAvLyBGbGFnIHRvIGtub3cgaWYgbGlzdCBpcyBjdXJyZW50bHkgZmlyaW5nXG5cdFx0ZmlyaW5nLFxuXG5cdFx0Ly8gTGFzdCBmaXJlIHZhbHVlIGZvciBub24tZm9yZ2V0dGFibGUgbGlzdHNcblx0XHRtZW1vcnksXG5cblx0XHQvLyBGbGFnIHRvIGtub3cgaWYgbGlzdCB3YXMgYWxyZWFkeSBmaXJlZFxuXHRcdGZpcmVkLFxuXG5cdFx0Ly8gRmxhZyB0byBwcmV2ZW50IGZpcmluZ1xuXHRcdGxvY2tlZCxcblxuXHRcdC8vIEFjdHVhbCBjYWxsYmFjayBsaXN0XG5cdFx0bGlzdCA9IFtdLFxuXG5cdFx0Ly8gUXVldWUgb2YgZXhlY3V0aW9uIGRhdGEgZm9yIHJlcGVhdGFibGUgbGlzdHNcblx0XHRxdWV1ZSA9IFtdLFxuXG5cdFx0Ly8gSW5kZXggb2YgY3VycmVudGx5IGZpcmluZyBjYWxsYmFjayAobW9kaWZpZWQgYnkgYWRkL3JlbW92ZSBhcyBuZWVkZWQpXG5cdFx0ZmlyaW5nSW5kZXggPSAtMSxcblxuXHRcdC8vIEZpcmUgY2FsbGJhY2tzXG5cdFx0ZmlyZSA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBFbmZvcmNlIHNpbmdsZS1maXJpbmdcblx0XHRcdGxvY2tlZCA9IGxvY2tlZCB8fCBvcHRpb25zLm9uY2U7XG5cblx0XHRcdC8vIEV4ZWN1dGUgY2FsbGJhY2tzIGZvciBhbGwgcGVuZGluZyBleGVjdXRpb25zLFxuXHRcdFx0Ly8gcmVzcGVjdGluZyBmaXJpbmdJbmRleCBvdmVycmlkZXMgYW5kIHJ1bnRpbWUgY2hhbmdlc1xuXHRcdFx0ZmlyZWQgPSBmaXJpbmcgPSB0cnVlO1xuXHRcdFx0Zm9yICggOyBxdWV1ZS5sZW5ndGg7IGZpcmluZ0luZGV4ID0gLTEgKSB7XG5cdFx0XHRcdG1lbW9yeSA9IHF1ZXVlLnNoaWZ0KCk7XG5cdFx0XHRcdHdoaWxlICggKytmaXJpbmdJbmRleCA8IGxpc3QubGVuZ3RoICkge1xuXG5cdFx0XHRcdFx0Ly8gUnVuIGNhbGxiYWNrIGFuZCBjaGVjayBmb3IgZWFybHkgdGVybWluYXRpb25cblx0XHRcdFx0XHRpZiAoIGxpc3RbIGZpcmluZ0luZGV4IF0uYXBwbHkoIG1lbW9yeVsgMCBdLCBtZW1vcnlbIDEgXSApID09PSBmYWxzZSAmJlxuXHRcdFx0XHRcdFx0b3B0aW9ucy5zdG9wT25GYWxzZSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gSnVtcCB0byBlbmQgYW5kIGZvcmdldCB0aGUgZGF0YSBzbyAuYWRkIGRvZXNuJ3QgcmUtZmlyZVxuXHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXggPSBsaXN0Lmxlbmd0aDtcblx0XHRcdFx0XHRcdG1lbW9yeSA9IGZhbHNlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBGb3JnZXQgdGhlIGRhdGEgaWYgd2UncmUgZG9uZSB3aXRoIGl0XG5cdFx0XHRpZiAoICFvcHRpb25zLm1lbW9yeSApIHtcblx0XHRcdFx0bWVtb3J5ID0gZmFsc2U7XG5cdFx0XHR9XG5cblx0XHRcdGZpcmluZyA9IGZhbHNlO1xuXG5cdFx0XHQvLyBDbGVhbiB1cCBpZiB3ZSdyZSBkb25lIGZpcmluZyBmb3IgZ29vZFxuXHRcdFx0aWYgKCBsb2NrZWQgKSB7XG5cblx0XHRcdFx0Ly8gS2VlcCBhbiBlbXB0eSBsaXN0IGlmIHdlIGhhdmUgZGF0YSBmb3IgZnV0dXJlIGFkZCBjYWxsc1xuXHRcdFx0XHRpZiAoIG1lbW9yeSApIHtcblx0XHRcdFx0XHRsaXN0ID0gW107XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCB0aGlzIG9iamVjdCBpcyBzcGVudFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGxpc3QgPSBcIlwiO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdC8vIEFjdHVhbCBDYWxsYmFja3Mgb2JqZWN0XG5cdFx0c2VsZiA9IHtcblxuXHRcdFx0Ly8gQWRkIGEgY2FsbGJhY2sgb3IgYSBjb2xsZWN0aW9uIG9mIGNhbGxiYWNrcyB0byB0aGUgbGlzdFxuXHRcdFx0YWRkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBsaXN0ICkge1xuXG5cdFx0XHRcdFx0Ly8gSWYgd2UgaGF2ZSBtZW1vcnkgZnJvbSBhIHBhc3QgcnVuLCB3ZSBzaG91bGQgZmlyZSBhZnRlciBhZGRpbmdcblx0XHRcdFx0XHRpZiAoIG1lbW9yeSAmJiAhZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXggPSBsaXN0Lmxlbmd0aCAtIDE7XG5cdFx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBtZW1vcnkgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQoIGZ1bmN0aW9uIGFkZCggYXJncyApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5lYWNoKCBhcmdzLCBmdW5jdGlvbiggXywgYXJnICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoIGlzRnVuY3Rpb24oIGFyZyApICkge1xuXHRcdFx0XHRcdFx0XHRcdGlmICggIW9wdGlvbnMudW5pcXVlIHx8ICFzZWxmLmhhcyggYXJnICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRsaXN0LnB1c2goIGFyZyApO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggYXJnICYmIGFyZy5sZW5ndGggJiYgdG9UeXBlKCBhcmcgKSAhPT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIEluc3BlY3QgcmVjdXJzaXZlbHlcblx0XHRcdFx0XHRcdFx0XHRhZGQoIGFyZyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0fSApKCBhcmd1bWVudHMgKTtcblxuXHRcdFx0XHRcdGlmICggbWVtb3J5ICYmICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0XHRmaXJlKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gUmVtb3ZlIGEgY2FsbGJhY2sgZnJvbSB0aGUgbGlzdFxuXHRcdFx0cmVtb3ZlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0alF1ZXJ5LmVhY2goIGFyZ3VtZW50cywgZnVuY3Rpb24oIF8sIGFyZyApIHtcblx0XHRcdFx0XHR2YXIgaW5kZXg7XG5cdFx0XHRcdFx0d2hpbGUgKCAoIGluZGV4ID0galF1ZXJ5LmluQXJyYXkoIGFyZywgbGlzdCwgaW5kZXggKSApID4gLTEgKSB7XG5cdFx0XHRcdFx0XHRsaXN0LnNwbGljZSggaW5kZXgsIDEgKTtcblxuXHRcdFx0XHRcdFx0Ly8gSGFuZGxlIGZpcmluZyBpbmRleGVzXG5cdFx0XHRcdFx0XHRpZiAoIGluZGV4IDw9IGZpcmluZ0luZGV4ICkge1xuXHRcdFx0XHRcdFx0XHRmaXJpbmdJbmRleC0tO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSApO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIENoZWNrIGlmIGEgZ2l2ZW4gY2FsbGJhY2sgaXMgaW4gdGhlIGxpc3QuXG5cdFx0XHQvLyBJZiBubyBhcmd1bWVudCBpcyBnaXZlbiwgcmV0dXJuIHdoZXRoZXIgb3Igbm90IGxpc3QgaGFzIGNhbGxiYWNrcyBhdHRhY2hlZC5cblx0XHRcdGhhczogZnVuY3Rpb24oIGZuICkge1xuXHRcdFx0XHRyZXR1cm4gZm4gP1xuXHRcdFx0XHRcdGpRdWVyeS5pbkFycmF5KCBmbiwgbGlzdCApID4gLTEgOlxuXHRcdFx0XHRcdGxpc3QubGVuZ3RoID4gMDtcblx0XHRcdH0sXG5cblx0XHRcdC8vIFJlbW92ZSBhbGwgY2FsbGJhY2tzIGZyb20gdGhlIGxpc3Rcblx0XHRcdGVtcHR5OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBsaXN0ICkge1xuXHRcdFx0XHRcdGxpc3QgPSBbXTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIERpc2FibGUgLmZpcmUgYW5kIC5hZGRcblx0XHRcdC8vIEFib3J0IGFueSBjdXJyZW50L3BlbmRpbmcgZXhlY3V0aW9uc1xuXHRcdFx0Ly8gQ2xlYXIgYWxsIGNhbGxiYWNrcyBhbmQgdmFsdWVzXG5cdFx0XHRkaXNhYmxlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0bG9ja2VkID0gcXVldWUgPSBbXTtcblx0XHRcdFx0bGlzdCA9IG1lbW9yeSA9IFwiXCI7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblx0XHRcdGRpc2FibGVkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICFsaXN0O1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gRGlzYWJsZSAuZmlyZVxuXHRcdFx0Ly8gQWxzbyBkaXNhYmxlIC5hZGQgdW5sZXNzIHdlIGhhdmUgbWVtb3J5IChzaW5jZSBpdCB3b3VsZCBoYXZlIG5vIGVmZmVjdClcblx0XHRcdC8vIEFib3J0IGFueSBwZW5kaW5nIGV4ZWN1dGlvbnNcblx0XHRcdGxvY2s6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRsb2NrZWQgPSBxdWV1ZSA9IFtdO1xuXHRcdFx0XHRpZiAoICFtZW1vcnkgJiYgIWZpcmluZyApIHtcblx0XHRcdFx0XHRsaXN0ID0gbWVtb3J5ID0gXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cdFx0XHRsb2NrZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gISFsb2NrZWQ7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBDYWxsIGFsbCBjYWxsYmFja3Mgd2l0aCB0aGUgZ2l2ZW4gY29udGV4dCBhbmQgYXJndW1lbnRzXG5cdFx0XHRmaXJlV2l0aDogZnVuY3Rpb24oIGNvbnRleHQsIGFyZ3MgKSB7XG5cdFx0XHRcdGlmICggIWxvY2tlZCApIHtcblx0XHRcdFx0XHRhcmdzID0gYXJncyB8fCBbXTtcblx0XHRcdFx0XHRhcmdzID0gWyBjb250ZXh0LCBhcmdzLnNsaWNlID8gYXJncy5zbGljZSgpIDogYXJncyBdO1xuXHRcdFx0XHRcdHF1ZXVlLnB1c2goIGFyZ3MgKTtcblx0XHRcdFx0XHRpZiAoICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0XHRmaXJlKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gQ2FsbCBhbGwgdGhlIGNhbGxiYWNrcyB3aXRoIHRoZSBnaXZlbiBhcmd1bWVudHNcblx0XHRcdGZpcmU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRzZWxmLmZpcmVXaXRoKCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBUbyBrbm93IGlmIHRoZSBjYWxsYmFja3MgaGF2ZSBhbHJlYWR5IGJlZW4gY2FsbGVkIGF0IGxlYXN0IG9uY2Vcblx0XHRcdGZpcmVkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICEhZmlyZWQ7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRyZXR1cm4gc2VsZjtcbn07XG5cblxuZnVuY3Rpb24gSWRlbnRpdHkoIHYgKSB7XG5cdHJldHVybiB2O1xufVxuZnVuY3Rpb24gVGhyb3dlciggZXggKSB7XG5cdHRocm93IGV4O1xufVxuXG5mdW5jdGlvbiBhZG9wdFZhbHVlKCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0LCBub1ZhbHVlICkge1xuXHR2YXIgbWV0aG9kO1xuXG5cdHRyeSB7XG5cblx0XHQvLyBDaGVjayBmb3IgcHJvbWlzZSBhc3BlY3QgZmlyc3QgdG8gcHJpdmlsZWdlIHN5bmNocm9ub3VzIGJlaGF2aW9yXG5cdFx0aWYgKCB2YWx1ZSAmJiBpc0Z1bmN0aW9uKCAoIG1ldGhvZCA9IHZhbHVlLnByb21pc2UgKSApICkge1xuXHRcdFx0bWV0aG9kLmNhbGwoIHZhbHVlICkuZG9uZSggcmVzb2x2ZSApLmZhaWwoIHJlamVjdCApO1xuXG5cdFx0Ly8gT3RoZXIgdGhlbmFibGVzXG5cdFx0fSBlbHNlIGlmICggdmFsdWUgJiYgaXNGdW5jdGlvbiggKCBtZXRob2QgPSB2YWx1ZS50aGVuICkgKSApIHtcblx0XHRcdG1ldGhvZC5jYWxsKCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0ICk7XG5cblx0XHQvLyBPdGhlciBub24tdGhlbmFibGVzXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gQ29udHJvbCBgcmVzb2x2ZWAgYXJndW1lbnRzIGJ5IGxldHRpbmcgQXJyYXkjc2xpY2UgY2FzdCBib29sZWFuIGBub1ZhbHVlYCB0byBpbnRlZ2VyOlxuXHRcdFx0Ly8gKiBmYWxzZTogWyB2YWx1ZSBdLnNsaWNlKCAwICkgPT4gcmVzb2x2ZSggdmFsdWUgKVxuXHRcdFx0Ly8gKiB0cnVlOiBbIHZhbHVlIF0uc2xpY2UoIDEgKSA9PiByZXNvbHZlKClcblx0XHRcdHJlc29sdmUuYXBwbHkoIHVuZGVmaW5lZCwgWyB2YWx1ZSBdLnNsaWNlKCBub1ZhbHVlICkgKTtcblx0XHR9XG5cblx0Ly8gRm9yIFByb21pc2VzL0ErLCBjb252ZXJ0IGV4Y2VwdGlvbnMgaW50byByZWplY3Rpb25zXG5cdC8vIFNpbmNlIGpRdWVyeS53aGVuIGRvZXNuJ3QgdW53cmFwIHRoZW5hYmxlcywgd2UgY2FuIHNraXAgdGhlIGV4dHJhIGNoZWNrcyBhcHBlYXJpbmcgaW5cblx0Ly8gRGVmZXJyZWQjdGhlbiB0byBjb25kaXRpb25hbGx5IHN1cHByZXNzIHJlamVjdGlvbi5cblx0fSBjYXRjaCAoIHZhbHVlICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgb25seVxuXHRcdC8vIFN0cmljdCBtb2RlIGZ1bmN0aW9ucyBpbnZva2VkIHdpdGhvdXQgLmNhbGwvLmFwcGx5IGdldCBnbG9iYWwtb2JqZWN0IGNvbnRleHRcblx0XHRyZWplY3QuYXBwbHkoIHVuZGVmaW5lZCwgWyB2YWx1ZSBdICk7XG5cdH1cbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdERlZmVycmVkOiBmdW5jdGlvbiggZnVuYyApIHtcblx0XHR2YXIgdHVwbGVzID0gW1xuXG5cdFx0XHRcdC8vIGFjdGlvbiwgYWRkIGxpc3RlbmVyLCBjYWxsYmFja3MsXG5cdFx0XHRcdC8vIC4uLiAudGhlbiBoYW5kbGVycywgYXJndW1lbnQgaW5kZXgsIFtmaW5hbCBzdGF0ZV1cblx0XHRcdFx0WyBcIm5vdGlmeVwiLCBcInByb2dyZXNzXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwibWVtb3J5XCIgKSxcblx0XHRcdFx0XHRqUXVlcnkuQ2FsbGJhY2tzKCBcIm1lbW9yeVwiICksIDIgXSxcblx0XHRcdFx0WyBcInJlc29sdmVcIiwgXCJkb25lXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLFxuXHRcdFx0XHRcdGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLCAwLCBcInJlc29sdmVkXCIgXSxcblx0XHRcdFx0WyBcInJlamVjdFwiLCBcImZhaWxcIiwgalF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksXG5cdFx0XHRcdFx0alF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksIDEsIFwicmVqZWN0ZWRcIiBdXG5cdFx0XHRdLFxuXHRcdFx0c3RhdGUgPSBcInBlbmRpbmdcIixcblx0XHRcdHByb21pc2UgPSB7XG5cdFx0XHRcdHN0YXRlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRyZXR1cm4gc3RhdGU7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdGFsd2F5czogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQuZG9uZSggYXJndW1lbnRzICkuZmFpbCggYXJndW1lbnRzICk7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiY2F0Y2hcIjogZnVuY3Rpb24oIGZuICkge1xuXHRcdFx0XHRcdHJldHVybiBwcm9taXNlLnRoZW4oIG51bGwsIGZuICk7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gS2VlcCBwaXBlIGZvciBiYWNrLWNvbXBhdFxuXHRcdFx0XHRwaXBlOiBmdW5jdGlvbiggLyogZm5Eb25lLCBmbkZhaWwsIGZuUHJvZ3Jlc3MgKi8gKSB7XG5cdFx0XHRcdFx0dmFyIGZucyA9IGFyZ3VtZW50cztcblxuXHRcdFx0XHRcdHJldHVybiBqUXVlcnkuRGVmZXJyZWQoIGZ1bmN0aW9uKCBuZXdEZWZlciApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5lYWNoKCB0dXBsZXMsIGZ1bmN0aW9uKCBpLCB0dXBsZSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBNYXAgdHVwbGVzIChwcm9ncmVzcywgZG9uZSwgZmFpbCkgdG8gYXJndW1lbnRzIChkb25lLCBmYWlsLCBwcm9ncmVzcylcblx0XHRcdFx0XHRcdFx0dmFyIGZuID0gaXNGdW5jdGlvbiggZm5zWyB0dXBsZVsgNCBdIF0gKSAmJiBmbnNbIHR1cGxlWyA0IF0gXTtcblxuXHRcdFx0XHRcdFx0XHQvLyBkZWZlcnJlZC5wcm9ncmVzcyhmdW5jdGlvbigpIHsgYmluZCB0byBuZXdEZWZlciBvciBuZXdEZWZlci5ub3RpZnkgfSlcblx0XHRcdFx0XHRcdFx0Ly8gZGVmZXJyZWQuZG9uZShmdW5jdGlvbigpIHsgYmluZCB0byBuZXdEZWZlciBvciBuZXdEZWZlci5yZXNvbHZlIH0pXG5cdFx0XHRcdFx0XHRcdC8vIGRlZmVycmVkLmZhaWwoZnVuY3Rpb24oKSB7IGJpbmQgdG8gbmV3RGVmZXIgb3IgbmV3RGVmZXIucmVqZWN0IH0pXG5cdFx0XHRcdFx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMSBdIF0oIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdHZhciByZXR1cm5lZCA9IGZuICYmIGZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIHJldHVybmVkICYmIGlzRnVuY3Rpb24oIHJldHVybmVkLnByb21pc2UgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLnByb21pc2UoKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQucHJvZ3Jlc3MoIG5ld0RlZmVyLm5vdGlmeSApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5kb25lKCBuZXdEZWZlci5yZXNvbHZlIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LmZhaWwoIG5ld0RlZmVyLnJlamVjdCApO1xuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlclsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0oXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRoaXMsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGZuID8gWyByZXR1cm5lZCBdIDogYXJndW1lbnRzXG5cdFx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0Zm5zID0gbnVsbDtcblx0XHRcdFx0XHR9ICkucHJvbWlzZSgpO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHR0aGVuOiBmdW5jdGlvbiggb25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQsIG9uUHJvZ3Jlc3MgKSB7XG5cdFx0XHRcdFx0dmFyIG1heERlcHRoID0gMDtcblx0XHRcdFx0XHRmdW5jdGlvbiByZXNvbHZlKCBkZXB0aCwgZGVmZXJyZWQsIGhhbmRsZXIsIHNwZWNpYWwgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdHZhciB0aGF0ID0gdGhpcyxcblx0XHRcdFx0XHRcdFx0XHRhcmdzID0gYXJndW1lbnRzLFxuXHRcdFx0XHRcdFx0XHRcdG1pZ2h0VGhyb3cgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHRcdHZhciByZXR1cm5lZCwgdGhlbjtcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMy4zLjNcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTU5XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBJZ25vcmUgZG91YmxlLXJlc29sdXRpb24gYXR0ZW1wdHNcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggZGVwdGggPCBtYXhEZXB0aCApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZCA9IGhhbmRsZXIuYXBwbHkoIHRoYXQsIGFyZ3MgKTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNDhcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggcmV0dXJuZWQgPT09IGRlZmVycmVkLnByb21pc2UoKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvciggXCJUaGVuYWJsZSBzZWxmLXJlc29sdXRpb25cIiApO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9ucyAyLjMuMy4xLCAzLjVcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTU0XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC03NVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gUmV0cmlldmUgYHRoZW5gIG9ubHkgb25jZVxuXHRcdFx0XHRcdFx0XHRcdFx0dGhlbiA9IHJldHVybmVkICYmXG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuNFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC02NFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IGNoZWNrIG9iamVjdHMgYW5kIGZ1bmN0aW9ucyBmb3IgdGhlbmFiaWxpdHlcblx0XHRcdFx0XHRcdFx0XHRcdFx0KCB0eXBlb2YgcmV0dXJuZWQgPT09IFwib2JqZWN0XCIgfHxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0eXBlb2YgcmV0dXJuZWQgPT09IFwiZnVuY3Rpb25cIiApICYmXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLnRoZW47XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIEhhbmRsZSBhIHJldHVybmVkIHRoZW5hYmxlXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGlzRnVuY3Rpb24oIHRoZW4gKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTcGVjaWFsIHByb2Nlc3NvcnMgKG5vdGlmeSkganVzdCB3YWl0IGZvciByZXNvbHV0aW9uXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggc3BlY2lhbCApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGVuLmNhbGwoXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZCxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgSWRlbnRpdHksIHNwZWNpYWwgKSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgVGhyb3dlciwgc3BlY2lhbCApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBOb3JtYWwgcHJvY2Vzc29ycyAocmVzb2x2ZSkgYWxzbyBob29rIGludG8gcHJvZ3Jlc3Ncblx0XHRcdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIC4uLmFuZCBkaXNyZWdhcmQgb2xkZXIgcmVzb2x1dGlvbiB2YWx1ZXNcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRtYXhEZXB0aCsrO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhlbi5jYWxsKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIElkZW50aXR5LCBzcGVjaWFsICksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIFRocm93ZXIsIHNwZWNpYWwgKSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgSWRlbnRpdHksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGggKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSGFuZGxlIGFsbCBvdGhlciByZXR1cm5lZCB2YWx1ZXNcblx0XHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBzdWJzdGl0dXRlIGhhbmRsZXJzIHBhc3Mgb24gY29udGV4dFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBhbmQgbXVsdGlwbGUgdmFsdWVzIChub24tc3BlYyBiZWhhdmlvcilcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBoYW5kbGVyICE9PSBJZGVudGl0eSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGF0ID0gdW5kZWZpbmVkO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGFyZ3MgPSBbIHJldHVybmVkIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBQcm9jZXNzIHRoZSB2YWx1ZShzKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBEZWZhdWx0IHByb2Nlc3MgaXMgcmVzb2x2ZVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQoIHNwZWNpYWwgfHwgZGVmZXJyZWQucmVzb2x2ZVdpdGggKSggdGhhdCwgYXJncyApO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH0sXG5cblx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IG5vcm1hbCBwcm9jZXNzb3JzIChyZXNvbHZlKSBjYXRjaCBhbmQgcmVqZWN0IGV4Y2VwdGlvbnNcblx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzID0gc3BlY2lhbCA/XG5cdFx0XHRcdFx0XHRcdFx0XHRtaWdodFRocm93IDpcblx0XHRcdFx0XHRcdFx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG1pZ2h0VGhyb3coKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5EZWZlcnJlZC5leGNlcHRpb25Ib29rICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LkRlZmVycmVkLmV4Y2VwdGlvbkhvb2soIGUsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHByb2Nlc3Muc3RhY2tUcmFjZSApO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjMuMy40LjFcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC02MVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIElnbm9yZSBwb3N0LXJlc29sdXRpb24gZXhjZXB0aW9uc1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggZGVwdGggKyAxID49IG1heERlcHRoICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IHN1YnN0aXR1dGUgaGFuZGxlcnMgcGFzcyBvbiBjb250ZXh0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBhbmQgbXVsdGlwbGUgdmFsdWVzIChub24tc3BlYyBiZWhhdmlvcilcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggaGFuZGxlciAhPT0gVGhyb3dlciApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhhdCA9IHVuZGVmaW5lZDtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0YXJncyA9IFsgZSBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCB0aGF0LCBhcmdzICk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHR9O1xuXG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjMuMy4xXG5cdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTU3XG5cdFx0XHRcdFx0XHRcdC8vIFJlLXJlc29sdmUgcHJvbWlzZXMgaW1tZWRpYXRlbHkgdG8gZG9kZ2UgZmFsc2UgcmVqZWN0aW9uIGZyb21cblx0XHRcdFx0XHRcdFx0Ly8gc3Vic2VxdWVudCBlcnJvcnNcblx0XHRcdFx0XHRcdFx0aWYgKCBkZXB0aCApIHtcblx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzKCk7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBDYWxsIGFuIG9wdGlvbmFsIGhvb2sgdG8gcmVjb3JkIHRoZSBzdGFjaywgaW4gY2FzZSBvZiBleGNlcHRpb25cblx0XHRcdFx0XHRcdFx0XHQvLyBzaW5jZSBpdCdzIG90aGVyd2lzZSBsb3N0IHdoZW4gZXhlY3V0aW9uIGdvZXMgYXN5bmNcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5EZWZlcnJlZC5nZXRTdGFja0hvb2sgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzLnN0YWNrVHJhY2UgPSBqUXVlcnkuRGVmZXJyZWQuZ2V0U3RhY2tIb29rKCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBwcm9jZXNzICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0dXJuIGpRdWVyeS5EZWZlcnJlZCggZnVuY3Rpb24oIG5ld0RlZmVyICkge1xuXG5cdFx0XHRcdFx0XHQvLyBwcm9ncmVzc19oYW5kbGVycy5hZGQoIC4uLiApXG5cdFx0XHRcdFx0XHR0dXBsZXNbIDAgXVsgMyBdLmFkZChcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZShcblx0XHRcdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLFxuXHRcdFx0XHRcdFx0XHRcdGlzRnVuY3Rpb24oIG9uUHJvZ3Jlc3MgKSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRvblByb2dyZXNzIDpcblx0XHRcdFx0XHRcdFx0XHRcdElkZW50aXR5LFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLm5vdGlmeVdpdGhcblx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0Ly8gZnVsZmlsbGVkX2hhbmRsZXJzLmFkZCggLi4uIClcblx0XHRcdFx0XHRcdHR1cGxlc1sgMSBdWyAzIF0uYWRkKFxuXHRcdFx0XHRcdFx0XHRyZXNvbHZlKFxuXHRcdFx0XHRcdFx0XHRcdDAsXG5cdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIsXG5cdFx0XHRcdFx0XHRcdFx0aXNGdW5jdGlvbiggb25GdWxmaWxsZWQgKSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRvbkZ1bGZpbGxlZCA6XG5cdFx0XHRcdFx0XHRcdFx0XHRJZGVudGl0eVxuXHRcdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHQvLyByZWplY3RlZF9oYW5kbGVycy5hZGQoIC4uLiApXG5cdFx0XHRcdFx0XHR0dXBsZXNbIDIgXVsgMyBdLmFkZChcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZShcblx0XHRcdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLFxuXHRcdFx0XHRcdFx0XHRcdGlzRnVuY3Rpb24oIG9uUmVqZWN0ZWQgKSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRvblJlamVjdGVkIDpcblx0XHRcdFx0XHRcdFx0XHRcdFRocm93ZXJcblx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHR9ICkucHJvbWlzZSgpO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIEdldCBhIHByb21pc2UgZm9yIHRoaXMgZGVmZXJyZWRcblx0XHRcdFx0Ly8gSWYgb2JqIGlzIHByb3ZpZGVkLCB0aGUgcHJvbWlzZSBhc3BlY3QgaXMgYWRkZWQgdG8gdGhlIG9iamVjdFxuXHRcdFx0XHRwcm9taXNlOiBmdW5jdGlvbiggb2JqICkge1xuXHRcdFx0XHRcdHJldHVybiBvYmogIT0gbnVsbCA/IGpRdWVyeS5leHRlbmQoIG9iaiwgcHJvbWlzZSApIDogcHJvbWlzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdGRlZmVycmVkID0ge307XG5cblx0XHQvLyBBZGQgbGlzdC1zcGVjaWZpYyBtZXRob2RzXG5cdFx0alF1ZXJ5LmVhY2goIHR1cGxlcywgZnVuY3Rpb24oIGksIHR1cGxlICkge1xuXHRcdFx0dmFyIGxpc3QgPSB0dXBsZVsgMiBdLFxuXHRcdFx0XHRzdGF0ZVN0cmluZyA9IHR1cGxlWyA1IF07XG5cblx0XHRcdC8vIHByb21pc2UucHJvZ3Jlc3MgPSBsaXN0LmFkZFxuXHRcdFx0Ly8gcHJvbWlzZS5kb25lID0gbGlzdC5hZGRcblx0XHRcdC8vIHByb21pc2UuZmFpbCA9IGxpc3QuYWRkXG5cdFx0XHRwcm9taXNlWyB0dXBsZVsgMSBdIF0gPSBsaXN0LmFkZDtcblxuXHRcdFx0Ly8gSGFuZGxlIHN0YXRlXG5cdFx0XHRpZiAoIHN0YXRlU3RyaW5nICkge1xuXHRcdFx0XHRsaXN0LmFkZChcblx0XHRcdFx0XHRmdW5jdGlvbigpIHtcblxuXHRcdFx0XHRcdFx0Ly8gc3RhdGUgPSBcInJlc29sdmVkXCIgKGkuZS4sIGZ1bGZpbGxlZClcblx0XHRcdFx0XHRcdC8vIHN0YXRlID0gXCJyZWplY3RlZFwiXG5cdFx0XHRcdFx0XHRzdGF0ZSA9IHN0YXRlU3RyaW5nO1xuXHRcdFx0XHRcdH0sXG5cblx0XHRcdFx0XHQvLyByZWplY3RlZF9jYWxsYmFja3MuZGlzYWJsZVxuXHRcdFx0XHRcdC8vIGZ1bGZpbGxlZF9jYWxsYmFja3MuZGlzYWJsZVxuXHRcdFx0XHRcdHR1cGxlc1sgMyAtIGkgXVsgMiBdLmRpc2FibGUsXG5cblx0XHRcdFx0XHQvLyByZWplY3RlZF9oYW5kbGVycy5kaXNhYmxlXG5cdFx0XHRcdFx0Ly8gZnVsZmlsbGVkX2hhbmRsZXJzLmRpc2FibGVcblx0XHRcdFx0XHR0dXBsZXNbIDMgLSBpIF1bIDMgXS5kaXNhYmxlLFxuXG5cdFx0XHRcdFx0Ly8gcHJvZ3Jlc3NfY2FsbGJhY2tzLmxvY2tcblx0XHRcdFx0XHR0dXBsZXNbIDAgXVsgMiBdLmxvY2ssXG5cblx0XHRcdFx0XHQvLyBwcm9ncmVzc19oYW5kbGVycy5sb2NrXG5cdFx0XHRcdFx0dHVwbGVzWyAwIF1bIDMgXS5sb2NrXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIHByb2dyZXNzX2hhbmRsZXJzLmZpcmVcblx0XHRcdC8vIGZ1bGZpbGxlZF9oYW5kbGVycy5maXJlXG5cdFx0XHQvLyByZWplY3RlZF9oYW5kbGVycy5maXJlXG5cdFx0XHRsaXN0LmFkZCggdHVwbGVbIDMgXS5maXJlICk7XG5cblx0XHRcdC8vIGRlZmVycmVkLm5vdGlmeSA9IGZ1bmN0aW9uKCkgeyBkZWZlcnJlZC5ub3RpZnlXaXRoKC4uLikgfVxuXHRcdFx0Ly8gZGVmZXJyZWQucmVzb2x2ZSA9IGZ1bmN0aW9uKCkgeyBkZWZlcnJlZC5yZXNvbHZlV2l0aCguLi4pIH1cblx0XHRcdC8vIGRlZmVycmVkLnJlamVjdCA9IGZ1bmN0aW9uKCkgeyBkZWZlcnJlZC5yZWplY3RXaXRoKC4uLikgfVxuXHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAwIF0gXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0oIHRoaXMgPT09IGRlZmVycmVkID8gdW5kZWZpbmVkIDogdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fTtcblxuXHRcdFx0Ly8gZGVmZXJyZWQubm90aWZ5V2l0aCA9IGxpc3QuZmlyZVdpdGhcblx0XHRcdC8vIGRlZmVycmVkLnJlc29sdmVXaXRoID0gbGlzdC5maXJlV2l0aFxuXHRcdFx0Ly8gZGVmZXJyZWQucmVqZWN0V2l0aCA9IGxpc3QuZmlyZVdpdGhcblx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMCBdICsgXCJXaXRoXCIgXSA9IGxpc3QuZmlyZVdpdGg7XG5cdFx0fSApO1xuXG5cdFx0Ly8gTWFrZSB0aGUgZGVmZXJyZWQgYSBwcm9taXNlXG5cdFx0cHJvbWlzZS5wcm9taXNlKCBkZWZlcnJlZCApO1xuXG5cdFx0Ly8gQ2FsbCBnaXZlbiBmdW5jIGlmIGFueVxuXHRcdGlmICggZnVuYyApIHtcblx0XHRcdGZ1bmMuY2FsbCggZGVmZXJyZWQsIGRlZmVycmVkICk7XG5cdFx0fVxuXG5cdFx0Ly8gQWxsIGRvbmUhXG5cdFx0cmV0dXJuIGRlZmVycmVkO1xuXHR9LFxuXG5cdC8vIERlZmVycmVkIGhlbHBlclxuXHR3aGVuOiBmdW5jdGlvbiggc2luZ2xlVmFsdWUgKSB7XG5cdFx0dmFyXG5cblx0XHRcdC8vIGNvdW50IG9mIHVuY29tcGxldGVkIHN1Ym9yZGluYXRlc1xuXHRcdFx0cmVtYWluaW5nID0gYXJndW1lbnRzLmxlbmd0aCxcblxuXHRcdFx0Ly8gY291bnQgb2YgdW5wcm9jZXNzZWQgYXJndW1lbnRzXG5cdFx0XHRpID0gcmVtYWluaW5nLFxuXG5cdFx0XHQvLyBzdWJvcmRpbmF0ZSBmdWxmaWxsbWVudCBkYXRhXG5cdFx0XHRyZXNvbHZlQ29udGV4dHMgPSBBcnJheSggaSApLFxuXHRcdFx0cmVzb2x2ZVZhbHVlcyA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApLFxuXG5cdFx0XHQvLyB0aGUgbWFzdGVyIERlZmVycmVkXG5cdFx0XHRtYXN0ZXIgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblxuXHRcdFx0Ly8gc3Vib3JkaW5hdGUgY2FsbGJhY2sgZmFjdG9yeVxuXHRcdFx0dXBkYXRlRnVuYyA9IGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0XHRcdHJlc29sdmVDb250ZXh0c1sgaSBdID0gdGhpcztcblx0XHRcdFx0XHRyZXNvbHZlVmFsdWVzWyBpIF0gPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApIDogdmFsdWU7XG5cdFx0XHRcdFx0aWYgKCAhKCAtLXJlbWFpbmluZyApICkge1xuXHRcdFx0XHRcdFx0bWFzdGVyLnJlc29sdmVXaXRoKCByZXNvbHZlQ29udGV4dHMsIHJlc29sdmVWYWx1ZXMgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH07XG5cdFx0XHR9O1xuXG5cdFx0Ly8gU2luZ2xlLSBhbmQgZW1wdHkgYXJndW1lbnRzIGFyZSBhZG9wdGVkIGxpa2UgUHJvbWlzZS5yZXNvbHZlXG5cdFx0aWYgKCByZW1haW5pbmcgPD0gMSApIHtcblx0XHRcdGFkb3B0VmFsdWUoIHNpbmdsZVZhbHVlLCBtYXN0ZXIuZG9uZSggdXBkYXRlRnVuYyggaSApICkucmVzb2x2ZSwgbWFzdGVyLnJlamVjdCxcblx0XHRcdFx0IXJlbWFpbmluZyApO1xuXG5cdFx0XHQvLyBVc2UgLnRoZW4oKSB0byB1bndyYXAgc2Vjb25kYXJ5IHRoZW5hYmxlcyAoY2YuIGdoLTMwMDApXG5cdFx0XHRpZiAoIG1hc3Rlci5zdGF0ZSgpID09PSBcInBlbmRpbmdcIiB8fFxuXHRcdFx0XHRpc0Z1bmN0aW9uKCByZXNvbHZlVmFsdWVzWyBpIF0gJiYgcmVzb2x2ZVZhbHVlc1sgaSBdLnRoZW4gKSApIHtcblxuXHRcdFx0XHRyZXR1cm4gbWFzdGVyLnRoZW4oKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBNdWx0aXBsZSBhcmd1bWVudHMgYXJlIGFnZ3JlZ2F0ZWQgbGlrZSBQcm9taXNlLmFsbCBhcnJheSBlbGVtZW50c1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0YWRvcHRWYWx1ZSggcmVzb2x2ZVZhbHVlc1sgaSBdLCB1cGRhdGVGdW5jKCBpICksIG1hc3Rlci5yZWplY3QgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gbWFzdGVyLnByb21pc2UoKTtcblx0fVxufSApO1xuXG5cbi8vIFRoZXNlIHVzdWFsbHkgaW5kaWNhdGUgYSBwcm9ncmFtbWVyIG1pc3Rha2UgZHVyaW5nIGRldmVsb3BtZW50LFxuLy8gd2FybiBhYm91dCB0aGVtIEFTQVAgcmF0aGVyIHRoYW4gc3dhbGxvd2luZyB0aGVtIGJ5IGRlZmF1bHQuXG52YXIgcmVycm9yTmFtZXMgPSAvXihFdmFsfEludGVybmFsfFJhbmdlfFJlZmVyZW5jZXxTeW50YXh8VHlwZXxVUkkpRXJyb3IkLztcblxualF1ZXJ5LkRlZmVycmVkLmV4Y2VwdGlvbkhvb2sgPSBmdW5jdGlvbiggZXJyb3IsIHN0YWNrICkge1xuXG5cdC8vIFN1cHBvcnQ6IElFIDggLSA5IG9ubHlcblx0Ly8gQ29uc29sZSBleGlzdHMgd2hlbiBkZXYgdG9vbHMgYXJlIG9wZW4sIHdoaWNoIGNhbiBoYXBwZW4gYXQgYW55IHRpbWVcblx0aWYgKCB3aW5kb3cuY29uc29sZSAmJiB3aW5kb3cuY29uc29sZS53YXJuICYmIGVycm9yICYmIHJlcnJvck5hbWVzLnRlc3QoIGVycm9yLm5hbWUgKSApIHtcblx0XHR3aW5kb3cuY29uc29sZS53YXJuKCBcImpRdWVyeS5EZWZlcnJlZCBleGNlcHRpb246IFwiICsgZXJyb3IubWVzc2FnZSwgZXJyb3Iuc3RhY2ssIHN0YWNrICk7XG5cdH1cbn07XG5cblxuXG5cbmpRdWVyeS5yZWFkeUV4Y2VwdGlvbiA9IGZ1bmN0aW9uKCBlcnJvciApIHtcblx0d2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdHRocm93IGVycm9yO1xuXHR9ICk7XG59O1xuXG5cblxuXG4vLyBUaGUgZGVmZXJyZWQgdXNlZCBvbiBET00gcmVhZHlcbnZhciByZWFkeUxpc3QgPSBqUXVlcnkuRGVmZXJyZWQoKTtcblxualF1ZXJ5LmZuLnJlYWR5ID0gZnVuY3Rpb24oIGZuICkge1xuXG5cdHJlYWR5TGlzdFxuXHRcdC50aGVuKCBmbiApXG5cblx0XHQvLyBXcmFwIGpRdWVyeS5yZWFkeUV4Y2VwdGlvbiBpbiBhIGZ1bmN0aW9uIHNvIHRoYXQgdGhlIGxvb2t1cFxuXHRcdC8vIGhhcHBlbnMgYXQgdGhlIHRpbWUgb2YgZXJyb3IgaGFuZGxpbmcgaW5zdGVhZCBvZiBjYWxsYmFja1xuXHRcdC8vIHJlZ2lzdHJhdGlvbi5cblx0XHQuY2F0Y2goIGZ1bmN0aW9uKCBlcnJvciApIHtcblx0XHRcdGpRdWVyeS5yZWFkeUV4Y2VwdGlvbiggZXJyb3IgKTtcblx0XHR9ICk7XG5cblx0cmV0dXJuIHRoaXM7XG59O1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gSXMgdGhlIERPTSByZWFkeSB0byBiZSB1c2VkPyBTZXQgdG8gdHJ1ZSBvbmNlIGl0IG9jY3Vycy5cblx0aXNSZWFkeTogZmFsc2UsXG5cblx0Ly8gQSBjb3VudGVyIHRvIHRyYWNrIGhvdyBtYW55IGl0ZW1zIHRvIHdhaXQgZm9yIGJlZm9yZVxuXHQvLyB0aGUgcmVhZHkgZXZlbnQgZmlyZXMuIFNlZSAjNjc4MVxuXHRyZWFkeVdhaXQ6IDEsXG5cblx0Ly8gSGFuZGxlIHdoZW4gdGhlIERPTSBpcyByZWFkeVxuXHRyZWFkeTogZnVuY3Rpb24oIHdhaXQgKSB7XG5cblx0XHQvLyBBYm9ydCBpZiB0aGVyZSBhcmUgcGVuZGluZyBob2xkcyBvciB3ZSdyZSBhbHJlYWR5IHJlYWR5XG5cdFx0aWYgKCB3YWl0ID09PSB0cnVlID8gLS1qUXVlcnkucmVhZHlXYWl0IDogalF1ZXJ5LmlzUmVhZHkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gUmVtZW1iZXIgdGhhdCB0aGUgRE9NIGlzIHJlYWR5XG5cdFx0alF1ZXJ5LmlzUmVhZHkgPSB0cnVlO1xuXG5cdFx0Ly8gSWYgYSBub3JtYWwgRE9NIFJlYWR5IGV2ZW50IGZpcmVkLCBkZWNyZW1lbnQsIGFuZCB3YWl0IGlmIG5lZWQgYmVcblx0XHRpZiAoIHdhaXQgIT09IHRydWUgJiYgLS1qUXVlcnkucmVhZHlXYWl0ID4gMCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBJZiB0aGVyZSBhcmUgZnVuY3Rpb25zIGJvdW5kLCB0byBleGVjdXRlXG5cdFx0cmVhZHlMaXN0LnJlc29sdmVXaXRoKCBkb2N1bWVudCwgWyBqUXVlcnkgXSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5yZWFkeS50aGVuID0gcmVhZHlMaXN0LnRoZW47XG5cbi8vIFRoZSByZWFkeSBldmVudCBoYW5kbGVyIGFuZCBzZWxmIGNsZWFudXAgbWV0aG9kXG5mdW5jdGlvbiBjb21wbGV0ZWQoKSB7XG5cdGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoIFwiRE9NQ29udGVudExvYWRlZFwiLCBjb21wbGV0ZWQgKTtcblx0d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoIFwibG9hZFwiLCBjb21wbGV0ZWQgKTtcblx0alF1ZXJ5LnJlYWR5KCk7XG59XG5cbi8vIENhdGNoIGNhc2VzIHdoZXJlICQoZG9jdW1lbnQpLnJlYWR5KCkgaXMgY2FsbGVkXG4vLyBhZnRlciB0aGUgYnJvd3NlciBldmVudCBoYXMgYWxyZWFkeSBvY2N1cnJlZC5cbi8vIFN1cHBvcnQ6IElFIDw9OSAtIDEwIG9ubHlcbi8vIE9sZGVyIElFIHNvbWV0aW1lcyBzaWduYWxzIFwiaW50ZXJhY3RpdmVcIiB0b28gc29vblxuaWYgKCBkb2N1bWVudC5yZWFkeVN0YXRlID09PSBcImNvbXBsZXRlXCIgfHxcblx0KCBkb2N1bWVudC5yZWFkeVN0YXRlICE9PSBcImxvYWRpbmdcIiAmJiAhZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmRvU2Nyb2xsICkgKSB7XG5cblx0Ly8gSGFuZGxlIGl0IGFzeW5jaHJvbm91c2x5IHRvIGFsbG93IHNjcmlwdHMgdGhlIG9wcG9ydHVuaXR5IHRvIGRlbGF5IHJlYWR5XG5cdHdpbmRvdy5zZXRUaW1lb3V0KCBqUXVlcnkucmVhZHkgKTtcblxufSBlbHNlIHtcblxuXHQvLyBVc2UgdGhlIGhhbmR5IGV2ZW50IGNhbGxiYWNrXG5cdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoIFwiRE9NQ29udGVudExvYWRlZFwiLCBjb21wbGV0ZWQgKTtcblxuXHQvLyBBIGZhbGxiYWNrIHRvIHdpbmRvdy5vbmxvYWQsIHRoYXQgd2lsbCBhbHdheXMgd29ya1xuXHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggXCJsb2FkXCIsIGNvbXBsZXRlZCApO1xufVxuXG5cblxuXG4vLyBNdWx0aWZ1bmN0aW9uYWwgbWV0aG9kIHRvIGdldCBhbmQgc2V0IHZhbHVlcyBvZiBhIGNvbGxlY3Rpb25cbi8vIFRoZSB2YWx1ZS9zIGNhbiBvcHRpb25hbGx5IGJlIGV4ZWN1dGVkIGlmIGl0J3MgYSBmdW5jdGlvblxudmFyIGFjY2VzcyA9IGZ1bmN0aW9uKCBlbGVtcywgZm4sIGtleSwgdmFsdWUsIGNoYWluYWJsZSwgZW1wdHlHZXQsIHJhdyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGxlbiA9IGVsZW1zLmxlbmd0aCxcblx0XHRidWxrID0ga2V5ID09IG51bGw7XG5cblx0Ly8gU2V0cyBtYW55IHZhbHVlc1xuXHRpZiAoIHRvVHlwZSgga2V5ICkgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0Y2hhaW5hYmxlID0gdHJ1ZTtcblx0XHRmb3IgKCBpIGluIGtleSApIHtcblx0XHRcdGFjY2VzcyggZWxlbXMsIGZuLCBpLCBrZXlbIGkgXSwgdHJ1ZSwgZW1wdHlHZXQsIHJhdyApO1xuXHRcdH1cblxuXHQvLyBTZXRzIG9uZSB2YWx1ZVxuXHR9IGVsc2UgaWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdGNoYWluYWJsZSA9IHRydWU7XG5cblx0XHRpZiAoICFpc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmF3ID0gdHJ1ZTtcblx0XHR9XG5cblx0XHRpZiAoIGJ1bGsgKSB7XG5cblx0XHRcdC8vIEJ1bGsgb3BlcmF0aW9ucyBydW4gYWdhaW5zdCB0aGUgZW50aXJlIHNldFxuXHRcdFx0aWYgKCByYXcgKSB7XG5cdFx0XHRcdGZuLmNhbGwoIGVsZW1zLCB2YWx1ZSApO1xuXHRcdFx0XHRmbiA9IG51bGw7XG5cblx0XHRcdC8vIC4uLmV4Y2VwdCB3aGVuIGV4ZWN1dGluZyBmdW5jdGlvbiB2YWx1ZXNcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGJ1bGsgPSBmbjtcblx0XHRcdFx0Zm4gPSBmdW5jdGlvbiggZWxlbSwga2V5LCB2YWx1ZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gYnVsay5jYWxsKCBqUXVlcnkoIGVsZW0gKSwgdmFsdWUgKTtcblx0XHRcdFx0fTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoIGZuICkge1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdGZuKFxuXHRcdFx0XHRcdGVsZW1zWyBpIF0sIGtleSwgcmF3ID9cblx0XHRcdFx0XHR2YWx1ZSA6XG5cdFx0XHRcdFx0dmFsdWUuY2FsbCggZWxlbXNbIGkgXSwgaSwgZm4oIGVsZW1zWyBpIF0sIGtleSApIClcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRpZiAoIGNoYWluYWJsZSApIHtcblx0XHRyZXR1cm4gZWxlbXM7XG5cdH1cblxuXHQvLyBHZXRzXG5cdGlmICggYnVsayApIHtcblx0XHRyZXR1cm4gZm4uY2FsbCggZWxlbXMgKTtcblx0fVxuXG5cdHJldHVybiBsZW4gPyBmbiggZWxlbXNbIDAgXSwga2V5ICkgOiBlbXB0eUdldDtcbn07XG5cblxuLy8gTWF0Y2hlcyBkYXNoZWQgc3RyaW5nIGZvciBjYW1lbGl6aW5nXG52YXIgcm1zUHJlZml4ID0gL14tbXMtLyxcblx0cmRhc2hBbHBoYSA9IC8tKFthLXpdKS9nO1xuXG4vLyBVc2VkIGJ5IGNhbWVsQ2FzZSBhcyBjYWxsYmFjayB0byByZXBsYWNlKClcbmZ1bmN0aW9uIGZjYW1lbENhc2UoIGFsbCwgbGV0dGVyICkge1xuXHRyZXR1cm4gbGV0dGVyLnRvVXBwZXJDYXNlKCk7XG59XG5cbi8vIENvbnZlcnQgZGFzaGVkIHRvIGNhbWVsQ2FzZTsgdXNlZCBieSB0aGUgY3NzIGFuZCBkYXRhIG1vZHVsZXNcbi8vIFN1cHBvcnQ6IElFIDw9OSAtIDExLCBFZGdlIDEyIC0gMTVcbi8vIE1pY3Jvc29mdCBmb3Jnb3QgdG8gaHVtcCB0aGVpciB2ZW5kb3IgcHJlZml4ICgjOTU3MilcbmZ1bmN0aW9uIGNhbWVsQ2FzZSggc3RyaW5nICkge1xuXHRyZXR1cm4gc3RyaW5nLnJlcGxhY2UoIHJtc1ByZWZpeCwgXCJtcy1cIiApLnJlcGxhY2UoIHJkYXNoQWxwaGEsIGZjYW1lbENhc2UgKTtcbn1cbnZhciBhY2NlcHREYXRhID0gZnVuY3Rpb24oIG93bmVyICkge1xuXG5cdC8vIEFjY2VwdHMgb25seTpcblx0Ly8gIC0gTm9kZVxuXHQvLyAgICAtIE5vZGUuRUxFTUVOVF9OT0RFXG5cdC8vICAgIC0gTm9kZS5ET0NVTUVOVF9OT0RFXG5cdC8vICAtIE9iamVjdFxuXHQvLyAgICAtIEFueVxuXHRyZXR1cm4gb3duZXIubm9kZVR5cGUgPT09IDEgfHwgb3duZXIubm9kZVR5cGUgPT09IDkgfHwgISggK293bmVyLm5vZGVUeXBlICk7XG59O1xuXG5cblxuXG5mdW5jdGlvbiBEYXRhKCkge1xuXHR0aGlzLmV4cGFuZG8gPSBqUXVlcnkuZXhwYW5kbyArIERhdGEudWlkKys7XG59XG5cbkRhdGEudWlkID0gMTtcblxuRGF0YS5wcm90b3R5cGUgPSB7XG5cblx0Y2FjaGU6IGZ1bmN0aW9uKCBvd25lciApIHtcblxuXHRcdC8vIENoZWNrIGlmIHRoZSBvd25lciBvYmplY3QgYWxyZWFkeSBoYXMgYSBjYWNoZVxuXHRcdHZhciB2YWx1ZSA9IG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblxuXHRcdC8vIElmIG5vdCwgY3JlYXRlIG9uZVxuXHRcdGlmICggIXZhbHVlICkge1xuXHRcdFx0dmFsdWUgPSB7fTtcblxuXHRcdFx0Ly8gV2UgY2FuIGFjY2VwdCBkYXRhIGZvciBub24tZWxlbWVudCBub2RlcyBpbiBtb2Rlcm4gYnJvd3NlcnMsXG5cdFx0XHQvLyBidXQgd2Ugc2hvdWxkIG5vdCwgc2VlICM4MzM1LlxuXHRcdFx0Ly8gQWx3YXlzIHJldHVybiBhbiBlbXB0eSBvYmplY3QuXG5cdFx0XHRpZiAoIGFjY2VwdERhdGEoIG93bmVyICkgKSB7XG5cblx0XHRcdFx0Ly8gSWYgaXQgaXMgYSBub2RlIHVubGlrZWx5IHRvIGJlIHN0cmluZ2lmeS1lZCBvciBsb29wZWQgb3ZlclxuXHRcdFx0XHQvLyB1c2UgcGxhaW4gYXNzaWdubWVudFxuXHRcdFx0XHRpZiAoIG93bmVyLm5vZGVUeXBlICkge1xuXHRcdFx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSA9IHZhbHVlO1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBzZWN1cmUgaXQgaW4gYSBub24tZW51bWVyYWJsZSBwcm9wZXJ0eVxuXHRcdFx0XHQvLyBjb25maWd1cmFibGUgbXVzdCBiZSB0cnVlIHRvIGFsbG93IHRoZSBwcm9wZXJ0eSB0byBiZVxuXHRcdFx0XHQvLyBkZWxldGVkIHdoZW4gZGF0YSBpcyByZW1vdmVkXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCBvd25lciwgdGhpcy5leHBhbmRvLCB7XG5cdFx0XHRcdFx0XHR2YWx1ZTogdmFsdWUsXG5cdFx0XHRcdFx0XHRjb25maWd1cmFibGU6IHRydWVcblx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdmFsdWU7XG5cdH0sXG5cdHNldDogZnVuY3Rpb24oIG93bmVyLCBkYXRhLCB2YWx1ZSApIHtcblx0XHR2YXIgcHJvcCxcblx0XHRcdGNhY2hlID0gdGhpcy5jYWNoZSggb3duZXIgKTtcblxuXHRcdC8vIEhhbmRsZTogWyBvd25lciwga2V5LCB2YWx1ZSBdIGFyZ3Ncblx0XHQvLyBBbHdheXMgdXNlIGNhbWVsQ2FzZSBrZXkgKGdoLTIyNTcpXG5cdFx0aWYgKCB0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGNhY2hlWyBjYW1lbENhc2UoIGRhdGEgKSBdID0gdmFsdWU7XG5cblx0XHQvLyBIYW5kbGU6IFsgb3duZXIsIHsgcHJvcGVydGllcyB9IF0gYXJnc1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIENvcHkgdGhlIHByb3BlcnRpZXMgb25lLWJ5LW9uZSB0byB0aGUgY2FjaGUgb2JqZWN0XG5cdFx0XHRmb3IgKCBwcm9wIGluIGRhdGEgKSB7XG5cdFx0XHRcdGNhY2hlWyBjYW1lbENhc2UoIHByb3AgKSBdID0gZGF0YVsgcHJvcCBdO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gY2FjaGU7XG5cdH0sXG5cdGdldDogZnVuY3Rpb24oIG93bmVyLCBrZXkgKSB7XG5cdFx0cmV0dXJuIGtleSA9PT0gdW5kZWZpbmVkID9cblx0XHRcdHRoaXMuY2FjaGUoIG93bmVyICkgOlxuXG5cdFx0XHQvLyBBbHdheXMgdXNlIGNhbWVsQ2FzZSBrZXkgKGdoLTIyNTcpXG5cdFx0XHRvd25lclsgdGhpcy5leHBhbmRvIF0gJiYgb3duZXJbIHRoaXMuZXhwYW5kbyBdWyBjYW1lbENhc2UoIGtleSApIF07XG5cdH0sXG5cdGFjY2VzczogZnVuY3Rpb24oIG93bmVyLCBrZXksIHZhbHVlICkge1xuXG5cdFx0Ly8gSW4gY2FzZXMgd2hlcmUgZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBObyBrZXkgd2FzIHNwZWNpZmllZFxuXHRcdC8vICAgMi4gQSBzdHJpbmcga2V5IHdhcyBzcGVjaWZpZWQsIGJ1dCBubyB2YWx1ZSBwcm92aWRlZFxuXHRcdC8vXG5cdFx0Ly8gVGFrZSB0aGUgXCJyZWFkXCIgcGF0aCBhbmQgYWxsb3cgdGhlIGdldCBtZXRob2QgdG8gZGV0ZXJtaW5lXG5cdFx0Ly8gd2hpY2ggdmFsdWUgdG8gcmV0dXJuLCByZXNwZWN0aXZlbHkgZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBUaGUgZW50aXJlIGNhY2hlIG9iamVjdFxuXHRcdC8vICAgMi4gVGhlIGRhdGEgc3RvcmVkIGF0IHRoZSBrZXlcblx0XHQvL1xuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgfHxcblx0XHRcdFx0KCAoIGtleSAmJiB0eXBlb2Yga2V5ID09PSBcInN0cmluZ1wiICkgJiYgdmFsdWUgPT09IHVuZGVmaW5lZCApICkge1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5nZXQoIG93bmVyLCBrZXkgKTtcblx0XHR9XG5cblx0XHQvLyBXaGVuIHRoZSBrZXkgaXMgbm90IGEgc3RyaW5nLCBvciBib3RoIGEga2V5IGFuZCB2YWx1ZVxuXHRcdC8vIGFyZSBzcGVjaWZpZWQsIHNldCBvciBleHRlbmQgKGV4aXN0aW5nIG9iamVjdHMpIHdpdGggZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBBbiBvYmplY3Qgb2YgcHJvcGVydGllc1xuXHRcdC8vICAgMi4gQSBrZXkgYW5kIHZhbHVlXG5cdFx0Ly9cblx0XHR0aGlzLnNldCggb3duZXIsIGtleSwgdmFsdWUgKTtcblxuXHRcdC8vIFNpbmNlIHRoZSBcInNldFwiIHBhdGggY2FuIGhhdmUgdHdvIHBvc3NpYmxlIGVudHJ5IHBvaW50c1xuXHRcdC8vIHJldHVybiB0aGUgZXhwZWN0ZWQgZGF0YSBiYXNlZCBvbiB3aGljaCBwYXRoIHdhcyB0YWtlblsqXVxuXHRcdHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUgOiBrZXk7XG5cdH0sXG5cdHJlbW92ZTogZnVuY3Rpb24oIG93bmVyLCBrZXkgKSB7XG5cdFx0dmFyIGksXG5cdFx0XHRjYWNoZSA9IG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblxuXHRcdGlmICggY2FjaGUgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIGtleSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHQvLyBTdXBwb3J0IGFycmF5IG9yIHNwYWNlIHNlcGFyYXRlZCBzdHJpbmcgb2Yga2V5c1xuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCBrZXkgKSApIHtcblxuXHRcdFx0XHQvLyBJZiBrZXkgaXMgYW4gYXJyYXkgb2Yga2V5cy4uLlxuXHRcdFx0XHQvLyBXZSBhbHdheXMgc2V0IGNhbWVsQ2FzZSBrZXlzLCBzbyByZW1vdmUgdGhhdC5cblx0XHRcdFx0a2V5ID0ga2V5Lm1hcCggY2FtZWxDYXNlICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRrZXkgPSBjYW1lbENhc2UoIGtleSApO1xuXG5cdFx0XHRcdC8vIElmIGEga2V5IHdpdGggdGhlIHNwYWNlcyBleGlzdHMsIHVzZSBpdC5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCBjcmVhdGUgYW4gYXJyYXkgYnkgbWF0Y2hpbmcgbm9uLXdoaXRlc3BhY2Vcblx0XHRcdFx0a2V5ID0ga2V5IGluIGNhY2hlID9cblx0XHRcdFx0XHRbIGtleSBdIDpcblx0XHRcdFx0XHQoIGtleS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdICk7XG5cdFx0XHR9XG5cblx0XHRcdGkgPSBrZXkubGVuZ3RoO1xuXG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0ZGVsZXRlIGNhY2hlWyBrZXlbIGkgXSBdO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFJlbW92ZSB0aGUgZXhwYW5kbyBpZiB0aGVyZSdzIG5vIG1vcmUgZGF0YVxuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgfHwgalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGNhY2hlICkgKSB7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTM1IC0gNDVcblx0XHRcdC8vIFdlYmtpdCAmIEJsaW5rIHBlcmZvcm1hbmNlIHN1ZmZlcnMgd2hlbiBkZWxldGluZyBwcm9wZXJ0aWVzXG5cdFx0XHQvLyBmcm9tIERPTSBub2Rlcywgc28gc2V0IHRvIHVuZGVmaW5lZCBpbnN0ZWFkXG5cdFx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD0zNzg2MDcgKGJ1ZyByZXN0cmljdGVkKVxuXHRcdFx0aWYgKCBvd25lci5ub2RlVHlwZSApIHtcblx0XHRcdFx0b3duZXJbIHRoaXMuZXhwYW5kbyBdID0gdW5kZWZpbmVkO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGVsZXRlIG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cdGhhc0RhdGE6IGZ1bmN0aW9uKCBvd25lciApIHtcblx0XHR2YXIgY2FjaGUgPSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cdFx0cmV0dXJuIGNhY2hlICE9PSB1bmRlZmluZWQgJiYgIWpRdWVyeS5pc0VtcHR5T2JqZWN0KCBjYWNoZSApO1xuXHR9XG59O1xudmFyIGRhdGFQcml2ID0gbmV3IERhdGEoKTtcblxudmFyIGRhdGFVc2VyID0gbmV3IERhdGEoKTtcblxuXG5cbi8vXHRJbXBsZW1lbnRhdGlvbiBTdW1tYXJ5XG4vL1xuLy9cdDEuIEVuZm9yY2UgQVBJIHN1cmZhY2UgYW5kIHNlbWFudGljIGNvbXBhdGliaWxpdHkgd2l0aCAxLjkueCBicmFuY2hcbi8vXHQyLiBJbXByb3ZlIHRoZSBtb2R1bGUncyBtYWludGFpbmFiaWxpdHkgYnkgcmVkdWNpbmcgdGhlIHN0b3JhZ2Vcbi8vXHRcdHBhdGhzIHRvIGEgc2luZ2xlIG1lY2hhbmlzbS5cbi8vXHQzLiBVc2UgdGhlIHNhbWUgc2luZ2xlIG1lY2hhbmlzbSB0byBzdXBwb3J0IFwicHJpdmF0ZVwiIGFuZCBcInVzZXJcIiBkYXRhLlxuLy9cdDQuIF9OZXZlcl8gZXhwb3NlIFwicHJpdmF0ZVwiIGRhdGEgdG8gdXNlciBjb2RlIChUT0RPOiBEcm9wIF9kYXRhLCBfcmVtb3ZlRGF0YSlcbi8vXHQ1LiBBdm9pZCBleHBvc2luZyBpbXBsZW1lbnRhdGlvbiBkZXRhaWxzIG9uIHVzZXIgb2JqZWN0cyAoZWcuIGV4cGFuZG8gcHJvcGVydGllcylcbi8vXHQ2LiBQcm92aWRlIGEgY2xlYXIgcGF0aCBmb3IgaW1wbGVtZW50YXRpb24gdXBncmFkZSB0byBXZWFrTWFwIGluIDIwMTRcblxudmFyIHJicmFjZSA9IC9eKD86XFx7W1xcd1xcV10qXFx9fFxcW1tcXHdcXFddKlxcXSkkLyxcblx0cm11bHRpRGFzaCA9IC9bQS1aXS9nO1xuXG5mdW5jdGlvbiBnZXREYXRhKCBkYXRhICkge1xuXHRpZiAoIGRhdGEgPT09IFwidHJ1ZVwiICkge1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cblx0aWYgKCBkYXRhID09PSBcImZhbHNlXCIgKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0aWYgKCBkYXRhID09PSBcIm51bGxcIiApIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdC8vIE9ubHkgY29udmVydCB0byBhIG51bWJlciBpZiBpdCBkb2Vzbid0IGNoYW5nZSB0aGUgc3RyaW5nXG5cdGlmICggZGF0YSA9PT0gK2RhdGEgKyBcIlwiICkge1xuXHRcdHJldHVybiArZGF0YTtcblx0fVxuXG5cdGlmICggcmJyYWNlLnRlc3QoIGRhdGEgKSApIHtcblx0XHRyZXR1cm4gSlNPTi5wYXJzZSggZGF0YSApO1xuXHR9XG5cblx0cmV0dXJuIGRhdGE7XG59XG5cbmZ1bmN0aW9uIGRhdGFBdHRyKCBlbGVtLCBrZXksIGRhdGEgKSB7XG5cdHZhciBuYW1lO1xuXG5cdC8vIElmIG5vdGhpbmcgd2FzIGZvdW5kIGludGVybmFsbHksIHRyeSB0byBmZXRjaCBhbnlcblx0Ly8gZGF0YSBmcm9tIHRoZSBIVE1MNSBkYXRhLSogYXR0cmlidXRlXG5cdGlmICggZGF0YSA9PT0gdW5kZWZpbmVkICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0bmFtZSA9IFwiZGF0YS1cIiArIGtleS5yZXBsYWNlKCBybXVsdGlEYXNoLCBcIi0kJlwiICkudG9Mb3dlckNhc2UoKTtcblx0XHRkYXRhID0gZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUgKTtcblxuXHRcdGlmICggdHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHRkYXRhID0gZ2V0RGF0YSggZGF0YSApO1xuXHRcdFx0fSBjYXRjaCAoIGUgKSB7fVxuXG5cdFx0XHQvLyBNYWtlIHN1cmUgd2Ugc2V0IHRoZSBkYXRhIHNvIGl0IGlzbid0IGNoYW5nZWQgbGF0ZXJcblx0XHRcdGRhdGFVc2VyLnNldCggZWxlbSwga2V5LCBkYXRhICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBkYXRhO1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdGhhc0RhdGE6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkYXRhVXNlci5oYXNEYXRhKCBlbGVtICkgfHwgZGF0YVByaXYuaGFzRGF0YSggZWxlbSApO1xuXHR9LFxuXG5cdGRhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBkYXRhICkge1xuXHRcdHJldHVybiBkYXRhVXNlci5hY2Nlc3MoIGVsZW0sIG5hbWUsIGRhdGEgKTtcblx0fSxcblxuXHRyZW1vdmVEYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0XHRkYXRhVXNlci5yZW1vdmUoIGVsZW0sIG5hbWUgKTtcblx0fSxcblxuXHQvLyBUT0RPOiBOb3cgdGhhdCBhbGwgY2FsbHMgdG8gX2RhdGEgYW5kIF9yZW1vdmVEYXRhIGhhdmUgYmVlbiByZXBsYWNlZFxuXHQvLyB3aXRoIGRpcmVjdCBjYWxscyB0byBkYXRhUHJpdiBtZXRob2RzLCB0aGVzZSBjYW4gYmUgZGVwcmVjYXRlZC5cblx0X2RhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBkYXRhICkge1xuXHRcdHJldHVybiBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIG5hbWUsIGRhdGEgKTtcblx0fSxcblxuXHRfcmVtb3ZlRGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBuYW1lICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRkYXRhOiBmdW5jdGlvbigga2V5LCB2YWx1ZSApIHtcblx0XHR2YXIgaSwgbmFtZSwgZGF0YSxcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF0sXG5cdFx0XHRhdHRycyA9IGVsZW0gJiYgZWxlbS5hdHRyaWJ1dGVzO1xuXG5cdFx0Ly8gR2V0cyBhbGwgdmFsdWVzXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggdGhpcy5sZW5ndGggKSB7XG5cdFx0XHRcdGRhdGEgPSBkYXRhVXNlci5nZXQoIGVsZW0gKTtcblxuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgIWRhdGFQcml2LmdldCggZWxlbSwgXCJoYXNEYXRhQXR0cnNcIiApICkge1xuXHRcdFx0XHRcdGkgPSBhdHRycy5sZW5ndGg7XG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDExIG9ubHlcblx0XHRcdFx0XHRcdC8vIFRoZSBhdHRycyBlbGVtZW50cyBjYW4gYmUgbnVsbCAoIzE0ODk0KVxuXHRcdFx0XHRcdFx0aWYgKCBhdHRyc1sgaSBdICkge1xuXHRcdFx0XHRcdFx0XHRuYW1lID0gYXR0cnNbIGkgXS5uYW1lO1xuXHRcdFx0XHRcdFx0XHRpZiAoIG5hbWUuaW5kZXhPZiggXCJkYXRhLVwiICkgPT09IDAgKSB7XG5cdFx0XHRcdFx0XHRcdFx0bmFtZSA9IGNhbWVsQ2FzZSggbmFtZS5zbGljZSggNSApICk7XG5cdFx0XHRcdFx0XHRcdFx0ZGF0YUF0dHIoIGVsZW0sIG5hbWUsIGRhdGFbIG5hbWUgXSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGRhdGFQcml2LnNldCggZWxlbSwgXCJoYXNEYXRhQXR0cnNcIiwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBkYXRhO1xuXHRcdH1cblxuXHRcdC8vIFNldHMgbXVsdGlwbGUgdmFsdWVzXG5cdFx0aWYgKCB0eXBlb2Yga2V5ID09PSBcIm9iamVjdFwiICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGRhdGFVc2VyLnNldCggdGhpcywga2V5ICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGRhdGE7XG5cblx0XHRcdC8vIFRoZSBjYWxsaW5nIGpRdWVyeSBvYmplY3QgKGVsZW1lbnQgbWF0Y2hlcykgaXMgbm90IGVtcHR5XG5cdFx0XHQvLyAoYW5kIHRoZXJlZm9yZSBoYXMgYW4gZWxlbWVudCBhcHBlYXJzIGF0IHRoaXNbIDAgXSkgYW5kIHRoZVxuXHRcdFx0Ly8gYHZhbHVlYCBwYXJhbWV0ZXIgd2FzIG5vdCB1bmRlZmluZWQuIEFuIGVtcHR5IGpRdWVyeSBvYmplY3Rcblx0XHRcdC8vIHdpbGwgcmVzdWx0IGluIGB1bmRlZmluZWRgIGZvciBlbGVtID0gdGhpc1sgMCBdIHdoaWNoIHdpbGxcblx0XHRcdC8vIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhbiBhdHRlbXB0IHRvIHJlYWQgYSBkYXRhIGNhY2hlIGlzIG1hZGUuXG5cdFx0XHRpZiAoIGVsZW0gJiYgdmFsdWUgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHQvLyBBdHRlbXB0IHRvIGdldCBkYXRhIGZyb20gdGhlIGNhY2hlXG5cdFx0XHRcdC8vIFRoZSBrZXkgd2lsbCBhbHdheXMgYmUgY2FtZWxDYXNlZCBpbiBEYXRhXG5cdFx0XHRcdGRhdGEgPSBkYXRhVXNlci5nZXQoIGVsZW0sIGtleSApO1xuXHRcdFx0XHRpZiAoIGRhdGEgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gZGF0YTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEF0dGVtcHQgdG8gXCJkaXNjb3ZlclwiIHRoZSBkYXRhIGluXG5cdFx0XHRcdC8vIEhUTUw1IGN1c3RvbSBkYXRhLSogYXR0cnNcblx0XHRcdFx0ZGF0YSA9IGRhdGFBdHRyKCBlbGVtLCBrZXkgKTtcblx0XHRcdFx0aWYgKCBkYXRhICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBXZSB0cmllZCByZWFsbHkgaGFyZCwgYnV0IHRoZSBkYXRhIGRvZXNuJ3QgZXhpc3QuXG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2V0IHRoZSBkYXRhLi4uXG5cdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdC8vIFdlIGFsd2F5cyBzdG9yZSB0aGUgY2FtZWxDYXNlZCBrZXlcblx0XHRcdFx0ZGF0YVVzZXIuc2V0KCB0aGlzLCBrZXksIHZhbHVlICk7XG5cdFx0XHR9ICk7XG5cdFx0fSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxLCBudWxsLCB0cnVlICk7XG5cdH0sXG5cblx0cmVtb3ZlRGF0YTogZnVuY3Rpb24oIGtleSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGRhdGFVc2VyLnJlbW92ZSggdGhpcywga2V5ICk7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cblxualF1ZXJ5LmV4dGVuZCgge1xuXHRxdWV1ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGUsIGRhdGEgKSB7XG5cdFx0dmFyIHF1ZXVlO1xuXG5cdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0dHlwZSA9ICggdHlwZSB8fCBcImZ4XCIgKSArIFwicXVldWVcIjtcblx0XHRcdHF1ZXVlID0gZGF0YVByaXYuZ2V0KCBlbGVtLCB0eXBlICk7XG5cblx0XHRcdC8vIFNwZWVkIHVwIGRlcXVldWUgYnkgZ2V0dGluZyBvdXQgcXVpY2tseSBpZiB0aGlzIGlzIGp1c3QgYSBsb29rdXBcblx0XHRcdGlmICggZGF0YSApIHtcblx0XHRcdFx0aWYgKCAhcXVldWUgfHwgQXJyYXkuaXNBcnJheSggZGF0YSApICkge1xuXHRcdFx0XHRcdHF1ZXVlID0gZGF0YVByaXYuYWNjZXNzKCBlbGVtLCB0eXBlLCBqUXVlcnkubWFrZUFycmF5KCBkYXRhICkgKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBkYXRhICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBxdWV1ZSB8fCBbXTtcblx0XHR9XG5cdH0sXG5cblx0ZGVxdWV1ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGUgKSB7XG5cdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdFx0dmFyIHF1ZXVlID0galF1ZXJ5LnF1ZXVlKCBlbGVtLCB0eXBlICksXG5cdFx0XHRzdGFydExlbmd0aCA9IHF1ZXVlLmxlbmd0aCxcblx0XHRcdGZuID0gcXVldWUuc2hpZnQoKSxcblx0XHRcdGhvb2tzID0galF1ZXJ5Ll9xdWV1ZUhvb2tzKCBlbGVtLCB0eXBlICksXG5cdFx0XHRuZXh0ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCBlbGVtLCB0eXBlICk7XG5cdFx0XHR9O1xuXG5cdFx0Ly8gSWYgdGhlIGZ4IHF1ZXVlIGlzIGRlcXVldWVkLCBhbHdheXMgcmVtb3ZlIHRoZSBwcm9ncmVzcyBzZW50aW5lbFxuXHRcdGlmICggZm4gPT09IFwiaW5wcm9ncmVzc1wiICkge1xuXHRcdFx0Zm4gPSBxdWV1ZS5zaGlmdCgpO1xuXHRcdFx0c3RhcnRMZW5ndGgtLTtcblx0XHR9XG5cblx0XHRpZiAoIGZuICkge1xuXG5cdFx0XHQvLyBBZGQgYSBwcm9ncmVzcyBzZW50aW5lbCB0byBwcmV2ZW50IHRoZSBmeCBxdWV1ZSBmcm9tIGJlaW5nXG5cdFx0XHQvLyBhdXRvbWF0aWNhbGx5IGRlcXVldWVkXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwiZnhcIiApIHtcblx0XHRcdFx0cXVldWUudW5zaGlmdCggXCJpbnByb2dyZXNzXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ2xlYXIgdXAgdGhlIGxhc3QgcXVldWUgc3RvcCBmdW5jdGlvblxuXHRcdFx0ZGVsZXRlIGhvb2tzLnN0b3A7XG5cdFx0XHRmbi5jYWxsKCBlbGVtLCBuZXh0LCBob29rcyApO1xuXHRcdH1cblxuXHRcdGlmICggIXN0YXJ0TGVuZ3RoICYmIGhvb2tzICkge1xuXHRcdFx0aG9va3MuZW1wdHkuZmlyZSgpO1xuXHRcdH1cblx0fSxcblxuXHQvLyBOb3QgcHVibGljIC0gZ2VuZXJhdGUgYSBxdWV1ZUhvb2tzIG9iamVjdCwgb3IgcmV0dXJuIHRoZSBjdXJyZW50IG9uZVxuXHRfcXVldWVIb29rczogZnVuY3Rpb24oIGVsZW0sIHR5cGUgKSB7XG5cdFx0dmFyIGtleSA9IHR5cGUgKyBcInF1ZXVlSG9va3NcIjtcblx0XHRyZXR1cm4gZGF0YVByaXYuZ2V0KCBlbGVtLCBrZXkgKSB8fCBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIGtleSwge1xuXHRcdFx0ZW1wdHk6IGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLmFkZCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgWyB0eXBlICsgXCJxdWV1ZVwiLCBrZXkgXSApO1xuXHRcdFx0fSApXG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0cXVldWU6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHZhciBzZXR0ZXIgPSAyO1xuXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGRhdGEgPSB0eXBlO1xuXHRcdFx0dHlwZSA9IFwiZnhcIjtcblx0XHRcdHNldHRlci0tO1xuXHRcdH1cblxuXHRcdGlmICggYXJndW1lbnRzLmxlbmd0aCA8IHNldHRlciApIHtcblx0XHRcdHJldHVybiBqUXVlcnkucXVldWUoIHRoaXNbIDAgXSwgdHlwZSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBkYXRhID09PSB1bmRlZmluZWQgP1xuXHRcdFx0dGhpcyA6XG5cdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgcXVldWUgPSBqUXVlcnkucXVldWUoIHRoaXMsIHR5cGUsIGRhdGEgKTtcblxuXHRcdFx0XHQvLyBFbnN1cmUgYSBob29rcyBmb3IgdGhpcyBxdWV1ZVxuXHRcdFx0XHRqUXVlcnkuX3F1ZXVlSG9va3MoIHRoaXMsIHR5cGUgKTtcblxuXHRcdFx0XHRpZiAoIHR5cGUgPT09IFwiZnhcIiAmJiBxdWV1ZVsgMCBdICE9PSBcImlucHJvZ3Jlc3NcIiApIHtcblx0XHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdH0sXG5cdGRlcXVldWU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHR9ICk7XG5cdH0sXG5cdGNsZWFyUXVldWU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdHJldHVybiB0aGlzLnF1ZXVlKCB0eXBlIHx8IFwiZnhcIiwgW10gKTtcblx0fSxcblxuXHQvLyBHZXQgYSBwcm9taXNlIHJlc29sdmVkIHdoZW4gcXVldWVzIG9mIGEgY2VydGFpbiB0eXBlXG5cdC8vIGFyZSBlbXB0aWVkIChmeCBpcyB0aGUgdHlwZSBieSBkZWZhdWx0KVxuXHRwcm9taXNlOiBmdW5jdGlvbiggdHlwZSwgb2JqICkge1xuXHRcdHZhciB0bXAsXG5cdFx0XHRjb3VudCA9IDEsXG5cdFx0XHRkZWZlciA9IGpRdWVyeS5EZWZlcnJlZCgpLFxuXHRcdFx0ZWxlbWVudHMgPSB0aGlzLFxuXHRcdFx0aSA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0cmVzb2x2ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoICEoIC0tY291bnQgKSApIHtcblx0XHRcdFx0XHRkZWZlci5yZXNvbHZlV2l0aCggZWxlbWVudHMsIFsgZWxlbWVudHMgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdG9iaiA9IHR5cGU7XG5cdFx0XHR0eXBlID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdHRtcCA9IGRhdGFQcml2LmdldCggZWxlbWVudHNbIGkgXSwgdHlwZSArIFwicXVldWVIb29rc1wiICk7XG5cdFx0XHRpZiAoIHRtcCAmJiB0bXAuZW1wdHkgKSB7XG5cdFx0XHRcdGNvdW50Kys7XG5cdFx0XHRcdHRtcC5lbXB0eS5hZGQoIHJlc29sdmUgKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmVzb2x2ZSgpO1xuXHRcdHJldHVybiBkZWZlci5wcm9taXNlKCBvYmogKTtcblx0fVxufSApO1xudmFyIHBudW0gPSAoIC9bKy1dPyg/OlxcZCpcXC58KVxcZCsoPzpbZUVdWystXT9cXGQrfCkvICkuc291cmNlO1xuXG52YXIgcmNzc051bSA9IG5ldyBSZWdFeHAoIFwiXig/OihbKy1dKT18KShcIiArIHBudW0gKyBcIikoW2EteiVdKikkXCIsIFwiaVwiICk7XG5cblxudmFyIGNzc0V4cGFuZCA9IFsgXCJUb3BcIiwgXCJSaWdodFwiLCBcIkJvdHRvbVwiLCBcIkxlZnRcIiBdO1xuXG52YXIgaXNIaWRkZW5XaXRoaW5UcmVlID0gZnVuY3Rpb24oIGVsZW0sIGVsICkge1xuXG5cdFx0Ly8gaXNIaWRkZW5XaXRoaW5UcmVlIG1pZ2h0IGJlIGNhbGxlZCBmcm9tIGpRdWVyeSNmaWx0ZXIgZnVuY3Rpb247XG5cdFx0Ly8gaW4gdGhhdCBjYXNlLCBlbGVtZW50IHdpbGwgYmUgc2Vjb25kIGFyZ3VtZW50XG5cdFx0ZWxlbSA9IGVsIHx8IGVsZW07XG5cblx0XHQvLyBJbmxpbmUgc3R5bGUgdHJ1bXBzIGFsbFxuXHRcdHJldHVybiBlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwibm9uZVwiIHx8XG5cdFx0XHRlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwiXCIgJiZcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlLCBjaGVjayBjb21wdXRlZCBzdHlsZVxuXHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTQzIC0gNDVcblx0XHRcdC8vIERpc2Nvbm5lY3RlZCBlbGVtZW50cyBjYW4gaGF2ZSBjb21wdXRlZCBkaXNwbGF5OiBub25lLCBzbyBmaXJzdCBjb25maXJtIHRoYXQgZWxlbSBpc1xuXHRcdFx0Ly8gaW4gdGhlIGRvY3VtZW50LlxuXHRcdFx0alF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKSAmJlxuXG5cdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApID09PSBcIm5vbmVcIjtcblx0fTtcblxudmFyIHN3YXAgPSBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgY2FsbGJhY2ssIGFyZ3MgKSB7XG5cdHZhciByZXQsIG5hbWUsXG5cdFx0b2xkID0ge307XG5cblx0Ly8gUmVtZW1iZXIgdGhlIG9sZCB2YWx1ZXMsIGFuZCBpbnNlcnQgdGhlIG5ldyBvbmVzXG5cdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRvbGRbIG5hbWUgXSA9IGVsZW0uc3R5bGVbIG5hbWUgXTtcblx0XHRlbGVtLnN0eWxlWyBuYW1lIF0gPSBvcHRpb25zWyBuYW1lIF07XG5cdH1cblxuXHRyZXQgPSBjYWxsYmFjay5hcHBseSggZWxlbSwgYXJncyB8fCBbXSApO1xuXG5cdC8vIFJldmVydCB0aGUgb2xkIHZhbHVlc1xuXHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0ZWxlbS5zdHlsZVsgbmFtZSBdID0gb2xkWyBuYW1lIF07XG5cdH1cblxuXHRyZXR1cm4gcmV0O1xufTtcblxuXG5cblxuZnVuY3Rpb24gYWRqdXN0Q1NTKCBlbGVtLCBwcm9wLCB2YWx1ZVBhcnRzLCB0d2VlbiApIHtcblx0dmFyIGFkanVzdGVkLCBzY2FsZSxcblx0XHRtYXhJdGVyYXRpb25zID0gMjAsXG5cdFx0Y3VycmVudFZhbHVlID0gdHdlZW4gP1xuXHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiB0d2Vlbi5jdXIoKTtcblx0XHRcdH0gOlxuXHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBqUXVlcnkuY3NzKCBlbGVtLCBwcm9wLCBcIlwiICk7XG5cdFx0XHR9LFxuXHRcdGluaXRpYWwgPSBjdXJyZW50VmFsdWUoKSxcblx0XHR1bml0ID0gdmFsdWVQYXJ0cyAmJiB2YWx1ZVBhcnRzWyAzIF0gfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gPyBcIlwiIDogXCJweFwiICksXG5cblx0XHQvLyBTdGFydGluZyB2YWx1ZSBjb21wdXRhdGlvbiBpcyByZXF1aXJlZCBmb3IgcG90ZW50aWFsIHVuaXQgbWlzbWF0Y2hlc1xuXHRcdGluaXRpYWxJblVuaXQgPSAoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSB8fCB1bml0ICE9PSBcInB4XCIgJiYgK2luaXRpYWwgKSAmJlxuXHRcdFx0cmNzc051bS5leGVjKCBqUXVlcnkuY3NzKCBlbGVtLCBwcm9wICkgKTtcblxuXHRpZiAoIGluaXRpYWxJblVuaXQgJiYgaW5pdGlhbEluVW5pdFsgMyBdICE9PSB1bml0ICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTU0XG5cdFx0Ly8gSGFsdmUgdGhlIGl0ZXJhdGlvbiB0YXJnZXQgdmFsdWUgdG8gcHJldmVudCBpbnRlcmZlcmVuY2UgZnJvbSBDU1MgdXBwZXIgYm91bmRzIChnaC0yMTQ0KVxuXHRcdGluaXRpYWwgPSBpbml0aWFsIC8gMjtcblxuXHRcdC8vIFRydXN0IHVuaXRzIHJlcG9ydGVkIGJ5IGpRdWVyeS5jc3Ncblx0XHR1bml0ID0gdW5pdCB8fCBpbml0aWFsSW5Vbml0WyAzIF07XG5cblx0XHQvLyBJdGVyYXRpdmVseSBhcHByb3hpbWF0ZSBmcm9tIGEgbm9uemVybyBzdGFydGluZyBwb2ludFxuXHRcdGluaXRpYWxJblVuaXQgPSAraW5pdGlhbCB8fCAxO1xuXG5cdFx0d2hpbGUgKCBtYXhJdGVyYXRpb25zLS0gKSB7XG5cblx0XHRcdC8vIEV2YWx1YXRlIGFuZCB1cGRhdGUgb3VyIGJlc3QgZ3Vlc3MgKGRvdWJsaW5nIGd1ZXNzZXMgdGhhdCB6ZXJvIG91dCkuXG5cdFx0XHQvLyBGaW5pc2ggaWYgdGhlIHNjYWxlIGVxdWFscyBvciBjcm9zc2VzIDEgKG1ha2luZyB0aGUgb2xkKm5ldyBwcm9kdWN0IG5vbi1wb3NpdGl2ZSkuXG5cdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AsIGluaXRpYWxJblVuaXQgKyB1bml0ICk7XG5cdFx0XHRpZiAoICggMSAtIHNjYWxlICkgKiAoIDEgLSAoIHNjYWxlID0gY3VycmVudFZhbHVlKCkgLyBpbml0aWFsIHx8IDAuNSApICkgPD0gMCApIHtcblx0XHRcdFx0bWF4SXRlcmF0aW9ucyA9IDA7XG5cdFx0XHR9XG5cdFx0XHRpbml0aWFsSW5Vbml0ID0gaW5pdGlhbEluVW5pdCAvIHNjYWxlO1xuXG5cdFx0fVxuXG5cdFx0aW5pdGlhbEluVW5pdCA9IGluaXRpYWxJblVuaXQgKiAyO1xuXHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCwgaW5pdGlhbEluVW5pdCArIHVuaXQgKTtcblxuXHRcdC8vIE1ha2Ugc3VyZSB3ZSB1cGRhdGUgdGhlIHR3ZWVuIHByb3BlcnRpZXMgbGF0ZXIgb25cblx0XHR2YWx1ZVBhcnRzID0gdmFsdWVQYXJ0cyB8fCBbXTtcblx0fVxuXG5cdGlmICggdmFsdWVQYXJ0cyApIHtcblx0XHRpbml0aWFsSW5Vbml0ID0gK2luaXRpYWxJblVuaXQgfHwgK2luaXRpYWwgfHwgMDtcblxuXHRcdC8vIEFwcGx5IHJlbGF0aXZlIG9mZnNldCAoKz0vLT0pIGlmIHNwZWNpZmllZFxuXHRcdGFkanVzdGVkID0gdmFsdWVQYXJ0c1sgMSBdID9cblx0XHRcdGluaXRpYWxJblVuaXQgKyAoIHZhbHVlUGFydHNbIDEgXSArIDEgKSAqIHZhbHVlUGFydHNbIDIgXSA6XG5cdFx0XHQrdmFsdWVQYXJ0c1sgMiBdO1xuXHRcdGlmICggdHdlZW4gKSB7XG5cdFx0XHR0d2Vlbi51bml0ID0gdW5pdDtcblx0XHRcdHR3ZWVuLnN0YXJ0ID0gaW5pdGlhbEluVW5pdDtcblx0XHRcdHR3ZWVuLmVuZCA9IGFkanVzdGVkO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gYWRqdXN0ZWQ7XG59XG5cblxudmFyIGRlZmF1bHREaXNwbGF5TWFwID0ge307XG5cbmZ1bmN0aW9uIGdldERlZmF1bHREaXNwbGF5KCBlbGVtICkge1xuXHR2YXIgdGVtcCxcblx0XHRkb2MgPSBlbGVtLm93bmVyRG9jdW1lbnQsXG5cdFx0bm9kZU5hbWUgPSBlbGVtLm5vZGVOYW1lLFxuXHRcdGRpc3BsYXkgPSBkZWZhdWx0RGlzcGxheU1hcFsgbm9kZU5hbWUgXTtcblxuXHRpZiAoIGRpc3BsYXkgKSB7XG5cdFx0cmV0dXJuIGRpc3BsYXk7XG5cdH1cblxuXHR0ZW1wID0gZG9jLmJvZHkuYXBwZW5kQ2hpbGQoIGRvYy5jcmVhdGVFbGVtZW50KCBub2RlTmFtZSApICk7XG5cdGRpc3BsYXkgPSBqUXVlcnkuY3NzKCB0ZW1wLCBcImRpc3BsYXlcIiApO1xuXG5cdHRlbXAucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggdGVtcCApO1xuXG5cdGlmICggZGlzcGxheSA9PT0gXCJub25lXCIgKSB7XG5cdFx0ZGlzcGxheSA9IFwiYmxvY2tcIjtcblx0fVxuXHRkZWZhdWx0RGlzcGxheU1hcFsgbm9kZU5hbWUgXSA9IGRpc3BsYXk7XG5cblx0cmV0dXJuIGRpc3BsYXk7XG59XG5cbmZ1bmN0aW9uIHNob3dIaWRlKCBlbGVtZW50cywgc2hvdyApIHtcblx0dmFyIGRpc3BsYXksIGVsZW0sXG5cdFx0dmFsdWVzID0gW10sXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IGVsZW1lbnRzLmxlbmd0aDtcblxuXHQvLyBEZXRlcm1pbmUgbmV3IGRpc3BsYXkgdmFsdWUgZm9yIGVsZW1lbnRzIHRoYXQgbmVlZCB0byBjaGFuZ2Vcblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRlbGVtID0gZWxlbWVudHNbIGluZGV4IF07XG5cdFx0aWYgKCAhZWxlbS5zdHlsZSApIHtcblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblxuXHRcdGRpc3BsYXkgPSBlbGVtLnN0eWxlLmRpc3BsYXk7XG5cdFx0aWYgKCBzaG93ICkge1xuXG5cdFx0XHQvLyBTaW5jZSB3ZSBmb3JjZSB2aXNpYmlsaXR5IHVwb24gY2FzY2FkZS1oaWRkZW4gZWxlbWVudHMsIGFuIGltbWVkaWF0ZSAoYW5kIHNsb3cpXG5cdFx0XHQvLyBjaGVjayBpcyByZXF1aXJlZCBpbiB0aGlzIGZpcnN0IGxvb3AgdW5sZXNzIHdlIGhhdmUgYSBub25lbXB0eSBkaXNwbGF5IHZhbHVlIChlaXRoZXJcblx0XHRcdC8vIGlubGluZSBvciBhYm91dC10by1iZS1yZXN0b3JlZClcblx0XHRcdGlmICggZGlzcGxheSA9PT0gXCJub25lXCIgKSB7XG5cdFx0XHRcdHZhbHVlc1sgaW5kZXggXSA9IGRhdGFQcml2LmdldCggZWxlbSwgXCJkaXNwbGF5XCIgKSB8fCBudWxsO1xuXHRcdFx0XHRpZiAoICF2YWx1ZXNbIGluZGV4IF0gKSB7XG5cdFx0XHRcdFx0ZWxlbS5zdHlsZS5kaXNwbGF5ID0gXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0aWYgKCBlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwiXCIgJiYgaXNIaWRkZW5XaXRoaW5UcmVlKCBlbGVtICkgKSB7XG5cdFx0XHRcdHZhbHVlc1sgaW5kZXggXSA9IGdldERlZmF1bHREaXNwbGF5KCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGlmICggZGlzcGxheSAhPT0gXCJub25lXCIgKSB7XG5cdFx0XHRcdHZhbHVlc1sgaW5kZXggXSA9IFwibm9uZVwiO1xuXG5cdFx0XHRcdC8vIFJlbWVtYmVyIHdoYXQgd2UncmUgb3ZlcndyaXRpbmdcblx0XHRcdFx0ZGF0YVByaXYuc2V0KCBlbGVtLCBcImRpc3BsYXlcIiwgZGlzcGxheSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFNldCB0aGUgZGlzcGxheSBvZiB0aGUgZWxlbWVudHMgaW4gYSBzZWNvbmQgbG9vcCB0byBhdm9pZCBjb25zdGFudCByZWZsb3dcblx0Zm9yICggaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRpZiAoIHZhbHVlc1sgaW5kZXggXSAhPSBudWxsICkge1xuXHRcdFx0ZWxlbWVudHNbIGluZGV4IF0uc3R5bGUuZGlzcGxheSA9IHZhbHVlc1sgaW5kZXggXTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZWxlbWVudHM7XG59XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0c2hvdzogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHNob3dIaWRlKCB0aGlzLCB0cnVlICk7XG5cdH0sXG5cdGhpZGU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzaG93SGlkZSggdGhpcyApO1xuXHR9LFxuXHR0b2dnbGU6IGZ1bmN0aW9uKCBzdGF0ZSApIHtcblx0XHRpZiAoIHR5cGVvZiBzdGF0ZSA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0XHRyZXR1cm4gc3RhdGUgPyB0aGlzLnNob3coKSA6IHRoaXMuaGlkZSgpO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBpc0hpZGRlbldpdGhpblRyZWUoIHRoaXMgKSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuc2hvdygpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuaGlkZSgpO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fVxufSApO1xudmFyIHJjaGVja2FibGVUeXBlID0gKCAvXig/OmNoZWNrYm94fHJhZGlvKSQvaSApO1xuXG52YXIgcnRhZ05hbWUgPSAoIC88KFthLXpdW15cXC9cXDA+XFx4MjBcXHRcXHJcXG5cXGZdKykvaSApO1xuXG52YXIgcnNjcmlwdFR5cGUgPSAoIC9eJHxebW9kdWxlJHxcXC8oPzpqYXZhfGVjbWEpc2NyaXB0L2kgKTtcblxuXG5cbi8vIFdlIGhhdmUgdG8gY2xvc2UgdGhlc2UgdGFncyB0byBzdXBwb3J0IFhIVE1MICgjMTMyMDApXG52YXIgd3JhcE1hcCA9IHtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRvcHRpb246IFsgMSwgXCI8c2VsZWN0IG11bHRpcGxlPSdtdWx0aXBsZSc+XCIsIFwiPC9zZWxlY3Q+XCIgXSxcblxuXHQvLyBYSFRNTCBwYXJzZXJzIGRvIG5vdCBtYWdpY2FsbHkgaW5zZXJ0IGVsZW1lbnRzIGluIHRoZVxuXHQvLyBzYW1lIHdheSB0aGF0IHRhZyBzb3VwIHBhcnNlcnMgZG8uIFNvIHdlIGNhbm5vdCBzaG9ydGVuXG5cdC8vIHRoaXMgYnkgb21pdHRpbmcgPHRib2R5PiBvciBvdGhlciByZXF1aXJlZCBlbGVtZW50cy5cblx0dGhlYWQ6IFsgMSwgXCI8dGFibGU+XCIsIFwiPC90YWJsZT5cIiBdLFxuXHRjb2w6IFsgMiwgXCI8dGFibGU+PGNvbGdyb3VwPlwiLCBcIjwvY29sZ3JvdXA+PC90YWJsZT5cIiBdLFxuXHR0cjogWyAyLCBcIjx0YWJsZT48dGJvZHk+XCIsIFwiPC90Ym9keT48L3RhYmxlPlwiIF0sXG5cdHRkOiBbIDMsIFwiPHRhYmxlPjx0Ym9keT48dHI+XCIsIFwiPC90cj48L3Rib2R5PjwvdGFibGU+XCIgXSxcblxuXHRfZGVmYXVsdDogWyAwLCBcIlwiLCBcIlwiIF1cbn07XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG53cmFwTWFwLm9wdGdyb3VwID0gd3JhcE1hcC5vcHRpb247XG5cbndyYXBNYXAudGJvZHkgPSB3cmFwTWFwLnRmb290ID0gd3JhcE1hcC5jb2xncm91cCA9IHdyYXBNYXAuY2FwdGlvbiA9IHdyYXBNYXAudGhlYWQ7XG53cmFwTWFwLnRoID0gd3JhcE1hcC50ZDtcblxuXG5mdW5jdGlvbiBnZXRBbGwoIGNvbnRleHQsIHRhZyApIHtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdC8vIFVzZSB0eXBlb2YgdG8gYXZvaWQgemVyby1hcmd1bWVudCBtZXRob2QgaW52b2NhdGlvbiBvbiBob3N0IG9iamVjdHMgKCMxNTE1MSlcblx0dmFyIHJldDtcblxuXHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdHJldCA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyB8fCBcIipcIiApO1xuXG5cdH0gZWxzZSBpZiAoIHR5cGVvZiBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwgIT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0cmV0ID0gY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCB0YWcgfHwgXCIqXCIgKTtcblxuXHR9IGVsc2Uge1xuXHRcdHJldCA9IFtdO1xuXHR9XG5cblx0aWYgKCB0YWcgPT09IHVuZGVmaW5lZCB8fCB0YWcgJiYgbm9kZU5hbWUoIGNvbnRleHQsIHRhZyApICkge1xuXHRcdHJldHVybiBqUXVlcnkubWVyZ2UoIFsgY29udGV4dCBdLCByZXQgKTtcblx0fVxuXG5cdHJldHVybiByZXQ7XG59XG5cblxuLy8gTWFyayBzY3JpcHRzIGFzIGhhdmluZyBhbHJlYWR5IGJlZW4gZXZhbHVhdGVkXG5mdW5jdGlvbiBzZXRHbG9iYWxFdmFsKCBlbGVtcywgcmVmRWxlbWVudHMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsID0gZWxlbXMubGVuZ3RoO1xuXG5cdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRkYXRhUHJpdi5zZXQoXG5cdFx0XHRlbGVtc1sgaSBdLFxuXHRcdFx0XCJnbG9iYWxFdmFsXCIsXG5cdFx0XHQhcmVmRWxlbWVudHMgfHwgZGF0YVByaXYuZ2V0KCByZWZFbGVtZW50c1sgaSBdLCBcImdsb2JhbEV2YWxcIiApXG5cdFx0KTtcblx0fVxufVxuXG5cbnZhciByaHRtbCA9IC88fCYjP1xcdys7LztcblxuZnVuY3Rpb24gYnVpbGRGcmFnbWVudCggZWxlbXMsIGNvbnRleHQsIHNjcmlwdHMsIHNlbGVjdGlvbiwgaWdub3JlZCApIHtcblx0dmFyIGVsZW0sIHRtcCwgdGFnLCB3cmFwLCBjb250YWlucywgaixcblx0XHRmcmFnbWVudCA9IGNvbnRleHQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLFxuXHRcdG5vZGVzID0gW10sXG5cdFx0aSA9IDAsXG5cdFx0bCA9IGVsZW1zLmxlbmd0aDtcblxuXHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0ZWxlbSA9IGVsZW1zWyBpIF07XG5cblx0XHRpZiAoIGVsZW0gfHwgZWxlbSA9PT0gMCApIHtcblxuXHRcdFx0Ly8gQWRkIG5vZGVzIGRpcmVjdGx5XG5cdFx0XHRpZiAoIHRvVHlwZSggZWxlbSApID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggbm9kZXMsIGVsZW0ubm9kZVR5cGUgPyBbIGVsZW0gXSA6IGVsZW0gKTtcblxuXHRcdFx0Ly8gQ29udmVydCBub24taHRtbCBpbnRvIGEgdGV4dCBub2RlXG5cdFx0XHR9IGVsc2UgaWYgKCAhcmh0bWwudGVzdCggZWxlbSApICkge1xuXHRcdFx0XHRub2Rlcy5wdXNoKCBjb250ZXh0LmNyZWF0ZVRleHROb2RlKCBlbGVtICkgKTtcblxuXHRcdFx0Ly8gQ29udmVydCBodG1sIGludG8gRE9NIG5vZGVzXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0bXAgPSB0bXAgfHwgZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGNvbnRleHQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApICk7XG5cblx0XHRcdFx0Ly8gRGVzZXJpYWxpemUgYSBzdGFuZGFyZCByZXByZXNlbnRhdGlvblxuXHRcdFx0XHR0YWcgPSAoIHJ0YWdOYW1lLmV4ZWMoIGVsZW0gKSB8fCBbIFwiXCIsIFwiXCIgXSApWyAxIF0udG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0d3JhcCA9IHdyYXBNYXBbIHRhZyBdIHx8IHdyYXBNYXAuX2RlZmF1bHQ7XG5cdFx0XHRcdHRtcC5pbm5lckhUTUwgPSB3cmFwWyAxIF0gKyBqUXVlcnkuaHRtbFByZWZpbHRlciggZWxlbSApICsgd3JhcFsgMiBdO1xuXG5cdFx0XHRcdC8vIERlc2NlbmQgdGhyb3VnaCB3cmFwcGVycyB0byB0aGUgcmlnaHQgY29udGVudFxuXHRcdFx0XHRqID0gd3JhcFsgMCBdO1xuXHRcdFx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdFx0XHR0bXAgPSB0bXAubGFzdENoaWxkO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBub2RlcywgdG1wLmNoaWxkTm9kZXMgKTtcblxuXHRcdFx0XHQvLyBSZW1lbWJlciB0aGUgdG9wLWxldmVsIGNvbnRhaW5lclxuXHRcdFx0XHR0bXAgPSBmcmFnbWVudC5maXJzdENoaWxkO1xuXG5cdFx0XHRcdC8vIEVuc3VyZSB0aGUgY3JlYXRlZCBub2RlcyBhcmUgb3JwaGFuZWQgKCMxMjM5Milcblx0XHRcdFx0dG1wLnRleHRDb250ZW50ID0gXCJcIjtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBSZW1vdmUgd3JhcHBlciBmcm9tIGZyYWdtZW50XG5cdGZyYWdtZW50LnRleHRDb250ZW50ID0gXCJcIjtcblxuXHRpID0gMDtcblx0d2hpbGUgKCAoIGVsZW0gPSBub2Rlc1sgaSsrIF0gKSApIHtcblxuXHRcdC8vIFNraXAgZWxlbWVudHMgYWxyZWFkeSBpbiB0aGUgY29udGV4dCBjb2xsZWN0aW9uICh0cmFjLTQwODcpXG5cdFx0aWYgKCBzZWxlY3Rpb24gJiYgalF1ZXJ5LmluQXJyYXkoIGVsZW0sIHNlbGVjdGlvbiApID4gLTEgKSB7XG5cdFx0XHRpZiAoIGlnbm9yZWQgKSB7XG5cdFx0XHRcdGlnbm9yZWQucHVzaCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXG5cdFx0Y29udGFpbnMgPSBqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApO1xuXG5cdFx0Ly8gQXBwZW5kIHRvIGZyYWdtZW50XG5cdFx0dG1wID0gZ2V0QWxsKCBmcmFnbWVudC5hcHBlbmRDaGlsZCggZWxlbSApLCBcInNjcmlwdFwiICk7XG5cblx0XHQvLyBQcmVzZXJ2ZSBzY3JpcHQgZXZhbHVhdGlvbiBoaXN0b3J5XG5cdFx0aWYgKCBjb250YWlucyApIHtcblx0XHRcdHNldEdsb2JhbEV2YWwoIHRtcCApO1xuXHRcdH1cblxuXHRcdC8vIENhcHR1cmUgZXhlY3V0YWJsZXNcblx0XHRpZiAoIHNjcmlwdHMgKSB7XG5cdFx0XHRqID0gMDtcblx0XHRcdHdoaWxlICggKCBlbGVtID0gdG1wWyBqKysgXSApICkge1xuXHRcdFx0XHRpZiAoIHJzY3JpcHRUeXBlLnRlc3QoIGVsZW0udHlwZSB8fCBcIlwiICkgKSB7XG5cdFx0XHRcdFx0c2NyaXB0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZnJhZ21lbnQ7XG59XG5cblxuKCBmdW5jdGlvbigpIHtcblx0dmFyIGZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLFxuXHRcdGRpdiA9IGZyYWdtZW50LmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkgKSxcblx0XHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIC0gNC4zIG9ubHlcblx0Ly8gQ2hlY2sgc3RhdGUgbG9zdCBpZiB0aGUgbmFtZSBpcyBzZXQgKCMxMTIxNylcblx0Ly8gU3VwcG9ydDogV2luZG93cyBXZWIgQXBwcyAoV1dBKVxuXHQvLyBgbmFtZWAgYW5kIGB0eXBlYCBtdXN0IHVzZSAuc2V0QXR0cmlidXRlIGZvciBXV0EgKCMxNDkwMSlcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgXCJyYWRpb1wiICk7XG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJjaGVja2VkXCIsIFwiY2hlY2tlZFwiICk7XG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJuYW1lXCIsIFwidFwiICk7XG5cblx0ZGl2LmFwcGVuZENoaWxkKCBpbnB1dCApO1xuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjEgb25seVxuXHQvLyBPbGRlciBXZWJLaXQgZG9lc24ndCBjbG9uZSBjaGVja2VkIHN0YXRlIGNvcnJlY3RseSBpbiBmcmFnbWVudHNcblx0c3VwcG9ydC5jaGVja0Nsb25lID0gZGl2LmNsb25lTm9kZSggdHJ1ZSApLmNsb25lTm9kZSggdHJ1ZSApLmxhc3RDaGlsZC5jaGVja2VkO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHQvLyBNYWtlIHN1cmUgdGV4dGFyZWEgKGFuZCBjaGVja2JveCkgZGVmYXVsdFZhbHVlIGlzIHByb3Blcmx5IGNsb25lZFxuXHRkaXYuaW5uZXJIVE1MID0gXCI8dGV4dGFyZWE+eDwvdGV4dGFyZWE+XCI7XG5cdHN1cHBvcnQubm9DbG9uZUNoZWNrZWQgPSAhIWRpdi5jbG9uZU5vZGUoIHRydWUgKS5sYXN0Q2hpbGQuZGVmYXVsdFZhbHVlO1xufSApKCk7XG52YXIgZG9jdW1lbnRFbGVtZW50ID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXG5cblxudmFyXG5cdHJrZXlFdmVudCA9IC9ea2V5Lyxcblx0cm1vdXNlRXZlbnQgPSAvXig/Om1vdXNlfHBvaW50ZXJ8Y29udGV4dG1lbnV8ZHJhZ3xkcm9wKXxjbGljay8sXG5cdHJ0eXBlbmFtZXNwYWNlID0gL14oW14uXSopKD86XFwuKC4rKXwpLztcblxuZnVuY3Rpb24gcmV0dXJuVHJ1ZSgpIHtcblx0cmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIHJldHVybkZhbHNlKCkge1xuXHRyZXR1cm4gZmFsc2U7XG59XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG4vLyBTZWUgIzEzMzkzIGZvciBtb3JlIGluZm9cbmZ1bmN0aW9uIHNhZmVBY3RpdmVFbGVtZW50KCkge1xuXHR0cnkge1xuXHRcdHJldHVybiBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xuXHR9IGNhdGNoICggZXJyICkgeyB9XG59XG5cbmZ1bmN0aW9uIG9uKCBlbGVtLCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuLCBvbmUgKSB7XG5cdHZhciBvcmlnRm4sIHR5cGU7XG5cblx0Ly8gVHlwZXMgY2FuIGJlIGEgbWFwIG9mIHR5cGVzL2hhbmRsZXJzXG5cdGlmICggdHlwZW9mIHR5cGVzID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0Ly8gKCB0eXBlcy1PYmplY3QsIHNlbGVjdG9yLCBkYXRhIClcblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcy1PYmplY3QsIGRhdGEgKVxuXHRcdFx0ZGF0YSA9IGRhdGEgfHwgc2VsZWN0b3I7XG5cdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0Zm9yICggdHlwZSBpbiB0eXBlcyApIHtcblx0XHRcdG9uKCBlbGVtLCB0eXBlLCBzZWxlY3RvciwgZGF0YSwgdHlwZXNbIHR5cGUgXSwgb25lICk7XG5cdFx0fVxuXHRcdHJldHVybiBlbGVtO1xuXHR9XG5cblx0aWYgKCBkYXRhID09IG51bGwgJiYgZm4gPT0gbnVsbCApIHtcblxuXHRcdC8vICggdHlwZXMsIGZuIClcblx0XHRmbiA9IHNlbGVjdG9yO1xuXHRcdGRhdGEgPSBzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0fSBlbHNlIGlmICggZm4gPT0gbnVsbCApIHtcblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcywgc2VsZWN0b3IsIGZuIClcblx0XHRcdGZuID0gZGF0YTtcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gKCB0eXBlcywgZGF0YSwgZm4gKVxuXHRcdFx0Zm4gPSBkYXRhO1xuXHRcdFx0ZGF0YSA9IHNlbGVjdG9yO1xuXHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHR9XG5cdGlmICggZm4gPT09IGZhbHNlICkge1xuXHRcdGZuID0gcmV0dXJuRmFsc2U7XG5cdH0gZWxzZSBpZiAoICFmbiApIHtcblx0XHRyZXR1cm4gZWxlbTtcblx0fVxuXG5cdGlmICggb25lID09PSAxICkge1xuXHRcdG9yaWdGbiA9IGZuO1xuXHRcdGZuID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0XHQvLyBDYW4gdXNlIGFuIGVtcHR5IHNldCwgc2luY2UgZXZlbnQgY29udGFpbnMgdGhlIGluZm9cblx0XHRcdGpRdWVyeSgpLm9mZiggZXZlbnQgKTtcblx0XHRcdHJldHVybiBvcmlnRm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdH07XG5cblx0XHQvLyBVc2Ugc2FtZSBndWlkIHNvIGNhbGxlciBjYW4gcmVtb3ZlIHVzaW5nIG9yaWdGblxuXHRcdGZuLmd1aWQgPSBvcmlnRm4uZ3VpZCB8fCAoIG9yaWdGbi5ndWlkID0galF1ZXJ5Lmd1aWQrKyApO1xuXHR9XG5cdHJldHVybiBlbGVtLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdGpRdWVyeS5ldmVudC5hZGQoIHRoaXMsIHR5cGVzLCBmbiwgZGF0YSwgc2VsZWN0b3IgKTtcblx0fSApO1xufVxuXG4vKlxuICogSGVscGVyIGZ1bmN0aW9ucyBmb3IgbWFuYWdpbmcgZXZlbnRzIC0tIG5vdCBwYXJ0IG9mIHRoZSBwdWJsaWMgaW50ZXJmYWNlLlxuICogUHJvcHMgdG8gRGVhbiBFZHdhcmRzJyBhZGRFdmVudCBsaWJyYXJ5IGZvciBtYW55IG9mIHRoZSBpZGVhcy5cbiAqL1xualF1ZXJ5LmV2ZW50ID0ge1xuXG5cdGdsb2JhbDoge30sXG5cblx0YWRkOiBmdW5jdGlvbiggZWxlbSwgdHlwZXMsIGhhbmRsZXIsIGRhdGEsIHNlbGVjdG9yICkge1xuXG5cdFx0dmFyIGhhbmRsZU9iakluLCBldmVudEhhbmRsZSwgdG1wLFxuXHRcdFx0ZXZlbnRzLCB0LCBoYW5kbGVPYmosXG5cdFx0XHRzcGVjaWFsLCBoYW5kbGVycywgdHlwZSwgbmFtZXNwYWNlcywgb3JpZ1R5cGUsXG5cdFx0XHRlbGVtRGF0YSA9IGRhdGFQcml2LmdldCggZWxlbSApO1xuXG5cdFx0Ly8gRG9uJ3QgYXR0YWNoIGV2ZW50cyB0byBub0RhdGEgb3IgdGV4dC9jb21tZW50IG5vZGVzIChidXQgYWxsb3cgcGxhaW4gb2JqZWN0cylcblx0XHRpZiAoICFlbGVtRGF0YSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBDYWxsZXIgY2FuIHBhc3MgaW4gYW4gb2JqZWN0IG9mIGN1c3RvbSBkYXRhIGluIGxpZXUgb2YgdGhlIGhhbmRsZXJcblx0XHRpZiAoIGhhbmRsZXIuaGFuZGxlciApIHtcblx0XHRcdGhhbmRsZU9iakluID0gaGFuZGxlcjtcblx0XHRcdGhhbmRsZXIgPSBoYW5kbGVPYmpJbi5oYW5kbGVyO1xuXHRcdFx0c2VsZWN0b3IgPSBoYW5kbGVPYmpJbi5zZWxlY3Rvcjtcblx0XHR9XG5cblx0XHQvLyBFbnN1cmUgdGhhdCBpbnZhbGlkIHNlbGVjdG9ycyB0aHJvdyBleGNlcHRpb25zIGF0IGF0dGFjaCB0aW1lXG5cdFx0Ly8gRXZhbHVhdGUgYWdhaW5zdCBkb2N1bWVudEVsZW1lbnQgaW4gY2FzZSBlbGVtIGlzIGEgbm9uLWVsZW1lbnQgbm9kZSAoZS5nLiwgZG9jdW1lbnQpXG5cdFx0aWYgKCBzZWxlY3RvciApIHtcblx0XHRcdGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvciggZG9jdW1lbnRFbGVtZW50LCBzZWxlY3RvciApO1xuXHRcdH1cblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHRoZSBoYW5kbGVyIGhhcyBhIHVuaXF1ZSBJRCwgdXNlZCB0byBmaW5kL3JlbW92ZSBpdCBsYXRlclxuXHRcdGlmICggIWhhbmRsZXIuZ3VpZCApIHtcblx0XHRcdGhhbmRsZXIuZ3VpZCA9IGpRdWVyeS5ndWlkKys7XG5cdFx0fVxuXG5cdFx0Ly8gSW5pdCB0aGUgZWxlbWVudCdzIGV2ZW50IHN0cnVjdHVyZSBhbmQgbWFpbiBoYW5kbGVyLCBpZiB0aGlzIGlzIHRoZSBmaXJzdFxuXHRcdGlmICggISggZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzICkgKSB7XG5cdFx0XHRldmVudHMgPSBlbGVtRGF0YS5ldmVudHMgPSB7fTtcblx0XHR9XG5cdFx0aWYgKCAhKCBldmVudEhhbmRsZSA9IGVsZW1EYXRhLmhhbmRsZSApICkge1xuXHRcdFx0ZXZlbnRIYW5kbGUgPSBlbGVtRGF0YS5oYW5kbGUgPSBmdW5jdGlvbiggZSApIHtcblxuXHRcdFx0XHQvLyBEaXNjYXJkIHRoZSBzZWNvbmQgZXZlbnQgb2YgYSBqUXVlcnkuZXZlbnQudHJpZ2dlcigpIGFuZFxuXHRcdFx0XHQvLyB3aGVuIGFuIGV2ZW50IGlzIGNhbGxlZCBhZnRlciBhIHBhZ2UgaGFzIHVubG9hZGVkXG5cdFx0XHRcdHJldHVybiB0eXBlb2YgalF1ZXJ5ICE9PSBcInVuZGVmaW5lZFwiICYmIGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgIT09IGUudHlwZSA/XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LmRpc3BhdGNoLmFwcGx5KCBlbGVtLCBhcmd1bWVudHMgKSA6IHVuZGVmaW5lZDtcblx0XHRcdH07XG5cdFx0fVxuXG5cdFx0Ly8gSGFuZGxlIG11bHRpcGxlIGV2ZW50cyBzZXBhcmF0ZWQgYnkgYSBzcGFjZVxuXHRcdHR5cGVzID0gKCB0eXBlcyB8fCBcIlwiICkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbIFwiXCIgXTtcblx0XHR0ID0gdHlwZXMubGVuZ3RoO1xuXHRcdHdoaWxlICggdC0tICkge1xuXHRcdFx0dG1wID0gcnR5cGVuYW1lc3BhY2UuZXhlYyggdHlwZXNbIHQgXSApIHx8IFtdO1xuXHRcdFx0dHlwZSA9IG9yaWdUeXBlID0gdG1wWyAxIF07XG5cdFx0XHRuYW1lc3BhY2VzID0gKCB0bXBbIDIgXSB8fCBcIlwiICkuc3BsaXQoIFwiLlwiICkuc29ydCgpO1xuXG5cdFx0XHQvLyBUaGVyZSAqbXVzdCogYmUgYSB0eXBlLCBubyBhdHRhY2hpbmcgbmFtZXNwYWNlLW9ubHkgaGFuZGxlcnNcblx0XHRcdGlmICggIXR5cGUgKSB7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBldmVudCBjaGFuZ2VzIGl0cyB0eXBlLCB1c2UgdGhlIHNwZWNpYWwgZXZlbnQgaGFuZGxlcnMgZm9yIHRoZSBjaGFuZ2VkIHR5cGVcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXG5cdFx0XHQvLyBJZiBzZWxlY3RvciBkZWZpbmVkLCBkZXRlcm1pbmUgc3BlY2lhbCBldmVudCBhcGkgdHlwZSwgb3RoZXJ3aXNlIGdpdmVuIHR5cGVcblx0XHRcdHR5cGUgPSAoIHNlbGVjdG9yID8gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgOiBzcGVjaWFsLmJpbmRUeXBlICkgfHwgdHlwZTtcblxuXHRcdFx0Ly8gVXBkYXRlIHNwZWNpYWwgYmFzZWQgb24gbmV3bHkgcmVzZXQgdHlwZVxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cblx0XHRcdC8vIGhhbmRsZU9iaiBpcyBwYXNzZWQgdG8gYWxsIGV2ZW50IGhhbmRsZXJzXG5cdFx0XHRoYW5kbGVPYmogPSBqUXVlcnkuZXh0ZW5kKCB7XG5cdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdG9yaWdUeXBlOiBvcmlnVHlwZSxcblx0XHRcdFx0ZGF0YTogZGF0YSxcblx0XHRcdFx0aGFuZGxlcjogaGFuZGxlcixcblx0XHRcdFx0Z3VpZDogaGFuZGxlci5ndWlkLFxuXHRcdFx0XHRzZWxlY3Rvcjogc2VsZWN0b3IsXG5cdFx0XHRcdG5lZWRzQ29udGV4dDogc2VsZWN0b3IgJiYgalF1ZXJ5LmV4cHIubWF0Y2gubmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9yICksXG5cdFx0XHRcdG5hbWVzcGFjZTogbmFtZXNwYWNlcy5qb2luKCBcIi5cIiApXG5cdFx0XHR9LCBoYW5kbGVPYmpJbiApO1xuXG5cdFx0XHQvLyBJbml0IHRoZSBldmVudCBoYW5kbGVyIHF1ZXVlIGlmIHdlJ3JlIHRoZSBmaXJzdFxuXHRcdFx0aWYgKCAhKCBoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdICkgKSB7XG5cdFx0XHRcdGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gPSBbXTtcblx0XHRcdFx0aGFuZGxlcnMuZGVsZWdhdGVDb3VudCA9IDA7XG5cblx0XHRcdFx0Ly8gT25seSB1c2UgYWRkRXZlbnRMaXN0ZW5lciBpZiB0aGUgc3BlY2lhbCBldmVudHMgaGFuZGxlciByZXR1cm5zIGZhbHNlXG5cdFx0XHRcdGlmICggIXNwZWNpYWwuc2V0dXAgfHxcblx0XHRcdFx0XHRzcGVjaWFsLnNldHVwLmNhbGwoIGVsZW0sIGRhdGEsIG5hbWVzcGFjZXMsIGV2ZW50SGFuZGxlICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdFx0aWYgKCBlbGVtLmFkZEV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLmFkZEV2ZW50TGlzdGVuZXIoIHR5cGUsIGV2ZW50SGFuZGxlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGlmICggc3BlY2lhbC5hZGQgKSB7XG5cdFx0XHRcdHNwZWNpYWwuYWRkLmNhbGwoIGVsZW0sIGhhbmRsZU9iaiApO1xuXG5cdFx0XHRcdGlmICggIWhhbmRsZU9iai5oYW5kbGVyLmd1aWQgKSB7XG5cdFx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXIuZ3VpZCA9IGhhbmRsZXIuZ3VpZDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgdG8gdGhlIGVsZW1lbnQncyBoYW5kbGVyIGxpc3QsIGRlbGVnYXRlcyBpbiBmcm9udFxuXHRcdFx0aWYgKCBzZWxlY3RvciApIHtcblx0XHRcdFx0aGFuZGxlcnMuc3BsaWNlKCBoYW5kbGVycy5kZWxlZ2F0ZUNvdW50KyssIDAsIGhhbmRsZU9iaiApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aGFuZGxlcnMucHVzaCggaGFuZGxlT2JqICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEtlZXAgdHJhY2sgb2Ygd2hpY2ggZXZlbnRzIGhhdmUgZXZlciBiZWVuIHVzZWQsIGZvciBldmVudCBvcHRpbWl6YXRpb25cblx0XHRcdGpRdWVyeS5ldmVudC5nbG9iYWxbIHR5cGUgXSA9IHRydWU7XG5cdFx0fVxuXG5cdH0sXG5cblx0Ly8gRGV0YWNoIGFuIGV2ZW50IG9yIHNldCBvZiBldmVudHMgZnJvbSBhbiBlbGVtZW50XG5cdHJlbW92ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGVzLCBoYW5kbGVyLCBzZWxlY3RvciwgbWFwcGVkVHlwZXMgKSB7XG5cblx0XHR2YXIgaiwgb3JpZ0NvdW50LCB0bXAsXG5cdFx0XHRldmVudHMsIHQsIGhhbmRsZU9iaixcblx0XHRcdHNwZWNpYWwsIGhhbmRsZXJzLCB0eXBlLCBuYW1lc3BhY2VzLCBvcmlnVHlwZSxcblx0XHRcdGVsZW1EYXRhID0gZGF0YVByaXYuaGFzRGF0YSggZWxlbSApICYmIGRhdGFQcml2LmdldCggZWxlbSApO1xuXG5cdFx0aWYgKCAhZWxlbURhdGEgfHwgISggZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzICkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gT25jZSBmb3IgZWFjaCB0eXBlLm5hbWVzcGFjZSBpbiB0eXBlczsgdHlwZSBtYXkgYmUgb21pdHRlZFxuXHRcdHR5cGVzID0gKCB0eXBlcyB8fCBcIlwiICkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbIFwiXCIgXTtcblx0XHR0ID0gdHlwZXMubGVuZ3RoO1xuXHRcdHdoaWxlICggdC0tICkge1xuXHRcdFx0dG1wID0gcnR5cGVuYW1lc3BhY2UuZXhlYyggdHlwZXNbIHQgXSApIHx8IFtdO1xuXHRcdFx0dHlwZSA9IG9yaWdUeXBlID0gdG1wWyAxIF07XG5cdFx0XHRuYW1lc3BhY2VzID0gKCB0bXBbIDIgXSB8fCBcIlwiICkuc3BsaXQoIFwiLlwiICkuc29ydCgpO1xuXG5cdFx0XHQvLyBVbmJpbmQgYWxsIGV2ZW50cyAob24gdGhpcyBuYW1lc3BhY2UsIGlmIHByb3ZpZGVkKSBmb3IgdGhlIGVsZW1lbnRcblx0XHRcdGlmICggIXR5cGUgKSB7XG5cdFx0XHRcdGZvciAoIHR5cGUgaW4gZXZlbnRzICkge1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIGVsZW0sIHR5cGUgKyB0eXBlc1sgdCBdLCBoYW5kbGVyLCBzZWxlY3RvciwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblx0XHRcdHR5cGUgPSAoIHNlbGVjdG9yID8gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgOiBzcGVjaWFsLmJpbmRUeXBlICkgfHwgdHlwZTtcblx0XHRcdGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gfHwgW107XG5cdFx0XHR0bXAgPSB0bXBbIDIgXSAmJlxuXHRcdFx0XHRuZXcgUmVnRXhwKCBcIihefFxcXFwuKVwiICsgbmFtZXNwYWNlcy5qb2luKCBcIlxcXFwuKD86LipcXFxcLnwpXCIgKSArIFwiKFxcXFwufCQpXCIgKTtcblxuXHRcdFx0Ly8gUmVtb3ZlIG1hdGNoaW5nIGV2ZW50c1xuXHRcdFx0b3JpZ0NvdW50ID0gaiA9IGhhbmRsZXJzLmxlbmd0aDtcblx0XHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0XHRoYW5kbGVPYmogPSBoYW5kbGVyc1sgaiBdO1xuXG5cdFx0XHRcdGlmICggKCBtYXBwZWRUeXBlcyB8fCBvcmlnVHlwZSA9PT0gaGFuZGxlT2JqLm9yaWdUeXBlICkgJiZcblx0XHRcdFx0XHQoICFoYW5kbGVyIHx8IGhhbmRsZXIuZ3VpZCA9PT0gaGFuZGxlT2JqLmd1aWQgKSAmJlxuXHRcdFx0XHRcdCggIXRtcCB8fCB0bXAudGVzdCggaGFuZGxlT2JqLm5hbWVzcGFjZSApICkgJiZcblx0XHRcdFx0XHQoICFzZWxlY3RvciB8fCBzZWxlY3RvciA9PT0gaGFuZGxlT2JqLnNlbGVjdG9yIHx8XG5cdFx0XHRcdFx0XHRzZWxlY3RvciA9PT0gXCIqKlwiICYmIGhhbmRsZU9iai5zZWxlY3RvciApICkge1xuXHRcdFx0XHRcdGhhbmRsZXJzLnNwbGljZSggaiwgMSApO1xuXG5cdFx0XHRcdFx0aWYgKCBoYW5kbGVPYmouc2VsZWN0b3IgKSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVycy5kZWxlZ2F0ZUNvdW50LS07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggc3BlY2lhbC5yZW1vdmUgKSB7XG5cdFx0XHRcdFx0XHRzcGVjaWFsLnJlbW92ZS5jYWxsKCBlbGVtLCBoYW5kbGVPYmogKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gUmVtb3ZlIGdlbmVyaWMgZXZlbnQgaGFuZGxlciBpZiB3ZSByZW1vdmVkIHNvbWV0aGluZyBhbmQgbm8gbW9yZSBoYW5kbGVycyBleGlzdFxuXHRcdFx0Ly8gKGF2b2lkcyBwb3RlbnRpYWwgZm9yIGVuZGxlc3MgcmVjdXJzaW9uIGR1cmluZyByZW1vdmFsIG9mIHNwZWNpYWwgZXZlbnQgaGFuZGxlcnMpXG5cdFx0XHRpZiAoIG9yaWdDb3VudCAmJiAhaGFuZGxlcnMubGVuZ3RoICkge1xuXHRcdFx0XHRpZiAoICFzcGVjaWFsLnRlYXJkb3duIHx8XG5cdFx0XHRcdFx0c3BlY2lhbC50ZWFyZG93bi5jYWxsKCBlbGVtLCBuYW1lc3BhY2VzLCBlbGVtRGF0YS5oYW5kbGUgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0XHRqUXVlcnkucmVtb3ZlRXZlbnQoIGVsZW0sIHR5cGUsIGVsZW1EYXRhLmhhbmRsZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0ZGVsZXRlIGV2ZW50c1sgdHlwZSBdO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFJlbW92ZSBkYXRhIGFuZCB0aGUgZXhwYW5kbyBpZiBpdCdzIG5vIGxvbmdlciB1c2VkXG5cdFx0aWYgKCBqUXVlcnkuaXNFbXB0eU9iamVjdCggZXZlbnRzICkgKSB7XG5cdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIFwiaGFuZGxlIGV2ZW50c1wiICk7XG5cdFx0fVxuXHR9LFxuXG5cdGRpc3BhdGNoOiBmdW5jdGlvbiggbmF0aXZlRXZlbnQgKSB7XG5cblx0XHQvLyBNYWtlIGEgd3JpdGFibGUgalF1ZXJ5LkV2ZW50IGZyb20gdGhlIG5hdGl2ZSBldmVudCBvYmplY3Rcblx0XHR2YXIgZXZlbnQgPSBqUXVlcnkuZXZlbnQuZml4KCBuYXRpdmVFdmVudCApO1xuXG5cdFx0dmFyIGksIGosIHJldCwgbWF0Y2hlZCwgaGFuZGxlT2JqLCBoYW5kbGVyUXVldWUsXG5cdFx0XHRhcmdzID0gbmV3IEFycmF5KCBhcmd1bWVudHMubGVuZ3RoICksXG5cdFx0XHRoYW5kbGVycyA9ICggZGF0YVByaXYuZ2V0KCB0aGlzLCBcImV2ZW50c1wiICkgfHwge30gKVsgZXZlbnQudHlwZSBdIHx8IFtdLFxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyBldmVudC50eXBlIF0gfHwge307XG5cblx0XHQvLyBVc2UgdGhlIGZpeC1lZCBqUXVlcnkuRXZlbnQgcmF0aGVyIHRoYW4gdGhlIChyZWFkLW9ubHkpIG5hdGl2ZSBldmVudFxuXHRcdGFyZ3NbIDAgXSA9IGV2ZW50O1xuXG5cdFx0Zm9yICggaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRhcmdzWyBpIF0gPSBhcmd1bWVudHNbIGkgXTtcblx0XHR9XG5cblx0XHRldmVudC5kZWxlZ2F0ZVRhcmdldCA9IHRoaXM7XG5cblx0XHQvLyBDYWxsIHRoZSBwcmVEaXNwYXRjaCBob29rIGZvciB0aGUgbWFwcGVkIHR5cGUsIGFuZCBsZXQgaXQgYmFpbCBpZiBkZXNpcmVkXG5cdFx0aWYgKCBzcGVjaWFsLnByZURpc3BhdGNoICYmIHNwZWNpYWwucHJlRGlzcGF0Y2guY2FsbCggdGhpcywgZXZlbnQgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZXJtaW5lIGhhbmRsZXJzXG5cdFx0aGFuZGxlclF1ZXVlID0galF1ZXJ5LmV2ZW50LmhhbmRsZXJzLmNhbGwoIHRoaXMsIGV2ZW50LCBoYW5kbGVycyApO1xuXG5cdFx0Ly8gUnVuIGRlbGVnYXRlcyBmaXJzdDsgdGhleSBtYXkgd2FudCB0byBzdG9wIHByb3BhZ2F0aW9uIGJlbmVhdGggdXNcblx0XHRpID0gMDtcblx0XHR3aGlsZSAoICggbWF0Y2hlZCA9IGhhbmRsZXJRdWV1ZVsgaSsrIF0gKSAmJiAhZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblx0XHRcdGV2ZW50LmN1cnJlbnRUYXJnZXQgPSBtYXRjaGVkLmVsZW07XG5cblx0XHRcdGogPSAwO1xuXHRcdFx0d2hpbGUgKCAoIGhhbmRsZU9iaiA9IG1hdGNoZWQuaGFuZGxlcnNbIGorKyBdICkgJiZcblx0XHRcdFx0IWV2ZW50LmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cblx0XHRcdFx0Ly8gVHJpZ2dlcmVkIGV2ZW50IG11c3QgZWl0aGVyIDEpIGhhdmUgbm8gbmFtZXNwYWNlLCBvciAyKSBoYXZlIG5hbWVzcGFjZShzKVxuXHRcdFx0XHQvLyBhIHN1YnNldCBvciBlcXVhbCB0byB0aG9zZSBpbiB0aGUgYm91bmQgZXZlbnQgKGJvdGggY2FuIGhhdmUgbm8gbmFtZXNwYWNlKS5cblx0XHRcdFx0aWYgKCAhZXZlbnQucm5hbWVzcGFjZSB8fCBldmVudC5ybmFtZXNwYWNlLnRlc3QoIGhhbmRsZU9iai5uYW1lc3BhY2UgKSApIHtcblxuXHRcdFx0XHRcdGV2ZW50LmhhbmRsZU9iaiA9IGhhbmRsZU9iajtcblx0XHRcdFx0XHRldmVudC5kYXRhID0gaGFuZGxlT2JqLmRhdGE7XG5cblx0XHRcdFx0XHRyZXQgPSAoICggalF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGhhbmRsZU9iai5vcmlnVHlwZSBdIHx8IHt9ICkuaGFuZGxlIHx8XG5cdFx0XHRcdFx0XHRoYW5kbGVPYmouaGFuZGxlciApLmFwcGx5KCBtYXRjaGVkLmVsZW0sIGFyZ3MgKTtcblxuXHRcdFx0XHRcdGlmICggcmV0ICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0XHRpZiAoICggZXZlbnQucmVzdWx0ID0gcmV0ICkgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRcdFx0XHRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDYWxsIHRoZSBwb3N0RGlzcGF0Y2ggaG9vayBmb3IgdGhlIG1hcHBlZCB0eXBlXG5cdFx0aWYgKCBzcGVjaWFsLnBvc3REaXNwYXRjaCApIHtcblx0XHRcdHNwZWNpYWwucG9zdERpc3BhdGNoLmNhbGwoIHRoaXMsIGV2ZW50ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGV2ZW50LnJlc3VsdDtcblx0fSxcblxuXHRoYW5kbGVyczogZnVuY3Rpb24oIGV2ZW50LCBoYW5kbGVycyApIHtcblx0XHR2YXIgaSwgaGFuZGxlT2JqLCBzZWwsIG1hdGNoZWRIYW5kbGVycywgbWF0Y2hlZFNlbGVjdG9ycyxcblx0XHRcdGhhbmRsZXJRdWV1ZSA9IFtdLFxuXHRcdFx0ZGVsZWdhdGVDb3VudCA9IGhhbmRsZXJzLmRlbGVnYXRlQ291bnQsXG5cdFx0XHRjdXIgPSBldmVudC50YXJnZXQ7XG5cblx0XHQvLyBGaW5kIGRlbGVnYXRlIGhhbmRsZXJzXG5cdFx0aWYgKCBkZWxlZ2F0ZUNvdW50ICYmXG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OVxuXHRcdFx0Ly8gQmxhY2staG9sZSBTVkcgPHVzZT4gaW5zdGFuY2UgdHJlZXMgKHRyYWMtMTMxODApXG5cdFx0XHRjdXIubm9kZVR5cGUgJiZcblxuXHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTQyXG5cdFx0XHQvLyBTdXBwcmVzcyBzcGVjLXZpb2xhdGluZyBjbGlja3MgaW5kaWNhdGluZyBhIG5vbi1wcmltYXJ5IHBvaW50ZXIgYnV0dG9uICh0cmFjLTM4NjEpXG5cdFx0XHQvLyBodHRwczovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzLyNldmVudC10eXBlLWNsaWNrXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSBvbmx5XG5cdFx0XHQvLyAuLi5idXQgbm90IGFycm93IGtleSBcImNsaWNrc1wiIG9mIHJhZGlvIGlucHV0cywgd2hpY2ggY2FuIGhhdmUgYGJ1dHRvbmAgLTEgKGdoLTIzNDMpXG5cdFx0XHQhKCBldmVudC50eXBlID09PSBcImNsaWNrXCIgJiYgZXZlbnQuYnV0dG9uID49IDEgKSApIHtcblxuXHRcdFx0Zm9yICggOyBjdXIgIT09IHRoaXM7IGN1ciA9IGN1ci5wYXJlbnROb2RlIHx8IHRoaXMgKSB7XG5cblx0XHRcdFx0Ly8gRG9uJ3QgY2hlY2sgbm9uLWVsZW1lbnRzICgjMTMyMDgpXG5cdFx0XHRcdC8vIERvbid0IHByb2Nlc3MgY2xpY2tzIG9uIGRpc2FibGVkIGVsZW1lbnRzICgjNjkxMSwgIzgxNjUsICMxMTM4MiwgIzExNzY0KVxuXHRcdFx0XHRpZiAoIGN1ci5ub2RlVHlwZSA9PT0gMSAmJiAhKCBldmVudC50eXBlID09PSBcImNsaWNrXCIgJiYgY3VyLmRpc2FibGVkID09PSB0cnVlICkgKSB7XG5cdFx0XHRcdFx0bWF0Y2hlZEhhbmRsZXJzID0gW107XG5cdFx0XHRcdFx0bWF0Y2hlZFNlbGVjdG9ycyA9IHt9O1xuXHRcdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgZGVsZWdhdGVDb3VudDsgaSsrICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlT2JqID0gaGFuZGxlcnNbIGkgXTtcblxuXHRcdFx0XHRcdFx0Ly8gRG9uJ3QgY29uZmxpY3Qgd2l0aCBPYmplY3QucHJvdG90eXBlIHByb3BlcnRpZXMgKCMxMzIwMylcblx0XHRcdFx0XHRcdHNlbCA9IGhhbmRsZU9iai5zZWxlY3RvciArIFwiIFwiO1xuXG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZWRTZWxlY3RvcnNbIHNlbCBdID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0XHRcdG1hdGNoZWRTZWxlY3RvcnNbIHNlbCBdID0gaGFuZGxlT2JqLm5lZWRzQ29udGV4dCA/XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5KCBzZWwsIHRoaXMgKS5pbmRleCggY3VyICkgPiAtMSA6XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LmZpbmQoIHNlbCwgdGhpcywgbnVsbCwgWyBjdXIgXSApLmxlbmd0aDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlZFNlbGVjdG9yc1sgc2VsIF0gKSB7XG5cdFx0XHRcdFx0XHRcdG1hdGNoZWRIYW5kbGVycy5wdXNoKCBoYW5kbGVPYmogKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBtYXRjaGVkSGFuZGxlcnMubGVuZ3RoICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlclF1ZXVlLnB1c2goIHsgZWxlbTogY3VyLCBoYW5kbGVyczogbWF0Y2hlZEhhbmRsZXJzIH0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBBZGQgdGhlIHJlbWFpbmluZyAoZGlyZWN0bHktYm91bmQpIGhhbmRsZXJzXG5cdFx0Y3VyID0gdGhpcztcblx0XHRpZiAoIGRlbGVnYXRlQ291bnQgPCBoYW5kbGVycy5sZW5ndGggKSB7XG5cdFx0XHRoYW5kbGVyUXVldWUucHVzaCggeyBlbGVtOiBjdXIsIGhhbmRsZXJzOiBoYW5kbGVycy5zbGljZSggZGVsZWdhdGVDb3VudCApIH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gaGFuZGxlclF1ZXVlO1xuXHR9LFxuXG5cdGFkZFByb3A6IGZ1bmN0aW9uKCBuYW1lLCBob29rICkge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggalF1ZXJ5LkV2ZW50LnByb3RvdHlwZSwgbmFtZSwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblxuXHRcdFx0Z2V0OiBpc0Z1bmN0aW9uKCBob29rICkgP1xuXHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpZiAoIHRoaXMub3JpZ2luYWxFdmVudCApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGhvb2soIHRoaXMub3JpZ2luYWxFdmVudCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSA6XG5cdFx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICggdGhpcy5vcmlnaW5hbEV2ZW50ICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdGhpcy5vcmlnaW5hbEV2ZW50WyBuYW1lIF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9LFxuXG5cdFx0XHRzZXQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCB0aGlzLCBuYW1lLCB7XG5cdFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRcdFx0d3JpdGFibGU6IHRydWUsXG5cdFx0XHRcdFx0dmFsdWU6IHZhbHVlXG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0Zml4OiBmdW5jdGlvbiggb3JpZ2luYWxFdmVudCApIHtcblx0XHRyZXR1cm4gb3JpZ2luYWxFdmVudFsgalF1ZXJ5LmV4cGFuZG8gXSA/XG5cdFx0XHRvcmlnaW5hbEV2ZW50IDpcblx0XHRcdG5ldyBqUXVlcnkuRXZlbnQoIG9yaWdpbmFsRXZlbnQgKTtcblx0fSxcblxuXHRzcGVjaWFsOiB7XG5cdFx0bG9hZDoge1xuXG5cdFx0XHQvLyBQcmV2ZW50IHRyaWdnZXJlZCBpbWFnZS5sb2FkIGV2ZW50cyBmcm9tIGJ1YmJsaW5nIHRvIHdpbmRvdy5sb2FkXG5cdFx0XHRub0J1YmJsZTogdHJ1ZVxuXHRcdH0sXG5cdFx0Zm9jdXM6IHtcblxuXHRcdFx0Ly8gRmlyZSBuYXRpdmUgZXZlbnQgaWYgcG9zc2libGUgc28gYmx1ci9mb2N1cyBzZXF1ZW5jZSBpcyBjb3JyZWN0XG5cdFx0XHR0cmlnZ2VyOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCB0aGlzICE9PSBzYWZlQWN0aXZlRWxlbWVudCgpICYmIHRoaXMuZm9jdXMgKSB7XG5cdFx0XHRcdFx0dGhpcy5mb2N1cygpO1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdGRlbGVnYXRlVHlwZTogXCJmb2N1c2luXCJcblx0XHR9LFxuXHRcdGJsdXI6IHtcblx0XHRcdHRyaWdnZXI6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIHRoaXMgPT09IHNhZmVBY3RpdmVFbGVtZW50KCkgJiYgdGhpcy5ibHVyICkge1xuXHRcdFx0XHRcdHRoaXMuYmx1cigpO1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdGRlbGVnYXRlVHlwZTogXCJmb2N1c291dFwiXG5cdFx0fSxcblx0XHRjbGljazoge1xuXG5cdFx0XHQvLyBGb3IgY2hlY2tib3gsIGZpcmUgbmF0aXZlIGV2ZW50IHNvIGNoZWNrZWQgc3RhdGUgd2lsbCBiZSByaWdodFxuXHRcdFx0dHJpZ2dlcjogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggdGhpcy50eXBlID09PSBcImNoZWNrYm94XCIgJiYgdGhpcy5jbGljayAmJiBub2RlTmFtZSggdGhpcywgXCJpbnB1dFwiICkgKSB7XG5cdFx0XHRcdFx0dGhpcy5jbGljaygpO1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblxuXHRcdFx0Ly8gRm9yIGNyb3NzLWJyb3dzZXIgY29uc2lzdGVuY3ksIGRvbid0IGZpcmUgbmF0aXZlIC5jbGljaygpIG9uIGxpbmtzXG5cdFx0XHRfZGVmYXVsdDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0XHRyZXR1cm4gbm9kZU5hbWUoIGV2ZW50LnRhcmdldCwgXCJhXCIgKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0YmVmb3JldW5sb2FkOiB7XG5cdFx0XHRwb3N0RGlzcGF0Y2g6IGZ1bmN0aW9uKCBldmVudCApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDIwK1xuXHRcdFx0XHQvLyBGaXJlZm94IGRvZXNuJ3QgYWxlcnQgaWYgdGhlIHJldHVyblZhbHVlIGZpZWxkIGlzIG5vdCBzZXQuXG5cdFx0XHRcdGlmICggZXZlbnQucmVzdWx0ICE9PSB1bmRlZmluZWQgJiYgZXZlbnQub3JpZ2luYWxFdmVudCApIHtcblx0XHRcdFx0XHRldmVudC5vcmlnaW5hbEV2ZW50LnJldHVyblZhbHVlID0gZXZlbnQucmVzdWx0O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59O1xuXG5qUXVlcnkucmVtb3ZlRXZlbnQgPSBmdW5jdGlvbiggZWxlbSwgdHlwZSwgaGFuZGxlICkge1xuXG5cdC8vIFRoaXMgXCJpZlwiIGlzIG5lZWRlZCBmb3IgcGxhaW4gb2JqZWN0c1xuXHRpZiAoIGVsZW0ucmVtb3ZlRXZlbnRMaXN0ZW5lciApIHtcblx0XHRlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIoIHR5cGUsIGhhbmRsZSApO1xuXHR9XG59O1xuXG5qUXVlcnkuRXZlbnQgPSBmdW5jdGlvbiggc3JjLCBwcm9wcyApIHtcblxuXHQvLyBBbGxvdyBpbnN0YW50aWF0aW9uIHdpdGhvdXQgdGhlICduZXcnIGtleXdvcmRcblx0aWYgKCAhKCB0aGlzIGluc3RhbmNlb2YgalF1ZXJ5LkV2ZW50ICkgKSB7XG5cdFx0cmV0dXJuIG5ldyBqUXVlcnkuRXZlbnQoIHNyYywgcHJvcHMgKTtcblx0fVxuXG5cdC8vIEV2ZW50IG9iamVjdFxuXHRpZiAoIHNyYyAmJiBzcmMudHlwZSApIHtcblx0XHR0aGlzLm9yaWdpbmFsRXZlbnQgPSBzcmM7XG5cdFx0dGhpcy50eXBlID0gc3JjLnR5cGU7XG5cblx0XHQvLyBFdmVudHMgYnViYmxpbmcgdXAgdGhlIGRvY3VtZW50IG1heSBoYXZlIGJlZW4gbWFya2VkIGFzIHByZXZlbnRlZFxuXHRcdC8vIGJ5IGEgaGFuZGxlciBsb3dlciBkb3duIHRoZSB0cmVlOyByZWZsZWN0IHRoZSBjb3JyZWN0IHZhbHVlLlxuXHRcdHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gc3JjLmRlZmF1bHRQcmV2ZW50ZWQgfHxcblx0XHRcdFx0c3JjLmRlZmF1bHRQcmV2ZW50ZWQgPT09IHVuZGVmaW5lZCAmJlxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD0yLjMgb25seVxuXHRcdFx0XHRzcmMucmV0dXJuVmFsdWUgPT09IGZhbHNlID9cblx0XHRcdHJldHVyblRydWUgOlxuXHRcdFx0cmV0dXJuRmFsc2U7XG5cblx0XHQvLyBDcmVhdGUgdGFyZ2V0IHByb3BlcnRpZXNcblx0XHQvLyBTdXBwb3J0OiBTYWZhcmkgPD02IC0gNyBvbmx5XG5cdFx0Ly8gVGFyZ2V0IHNob3VsZCBub3QgYmUgYSB0ZXh0IG5vZGUgKCM1MDQsICMxMzE0Mylcblx0XHR0aGlzLnRhcmdldCA9ICggc3JjLnRhcmdldCAmJiBzcmMudGFyZ2V0Lm5vZGVUeXBlID09PSAzICkgP1xuXHRcdFx0c3JjLnRhcmdldC5wYXJlbnROb2RlIDpcblx0XHRcdHNyYy50YXJnZXQ7XG5cblx0XHR0aGlzLmN1cnJlbnRUYXJnZXQgPSBzcmMuY3VycmVudFRhcmdldDtcblx0XHR0aGlzLnJlbGF0ZWRUYXJnZXQgPSBzcmMucmVsYXRlZFRhcmdldDtcblxuXHQvLyBFdmVudCB0eXBlXG5cdH0gZWxzZSB7XG5cdFx0dGhpcy50eXBlID0gc3JjO1xuXHR9XG5cblx0Ly8gUHV0IGV4cGxpY2l0bHkgcHJvdmlkZWQgcHJvcGVydGllcyBvbnRvIHRoZSBldmVudCBvYmplY3Rcblx0aWYgKCBwcm9wcyApIHtcblx0XHRqUXVlcnkuZXh0ZW5kKCB0aGlzLCBwcm9wcyApO1xuXHR9XG5cblx0Ly8gQ3JlYXRlIGEgdGltZXN0YW1wIGlmIGluY29taW5nIGV2ZW50IGRvZXNuJ3QgaGF2ZSBvbmVcblx0dGhpcy50aW1lU3RhbXAgPSBzcmMgJiYgc3JjLnRpbWVTdGFtcCB8fCBEYXRlLm5vdygpO1xuXG5cdC8vIE1hcmsgaXQgYXMgZml4ZWRcblx0dGhpc1sgalF1ZXJ5LmV4cGFuZG8gXSA9IHRydWU7XG59O1xuXG4vLyBqUXVlcnkuRXZlbnQgaXMgYmFzZWQgb24gRE9NMyBFdmVudHMgYXMgc3BlY2lmaWVkIGJ5IHRoZSBFQ01BU2NyaXB0IExhbmd1YWdlIEJpbmRpbmdcbi8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDAzL1dELURPTS1MZXZlbC0zLUV2ZW50cy0yMDAzMDMzMS9lY21hLXNjcmlwdC1iaW5kaW5nLmh0bWxcbmpRdWVyeS5FdmVudC5wcm90b3R5cGUgPSB7XG5cdGNvbnN0cnVjdG9yOiBqUXVlcnkuRXZlbnQsXG5cdGlzRGVmYXVsdFByZXZlbnRlZDogcmV0dXJuRmFsc2UsXG5cdGlzUHJvcGFnYXRpb25TdG9wcGVkOiByZXR1cm5GYWxzZSxcblx0aXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQ6IHJldHVybkZhbHNlLFxuXHRpc1NpbXVsYXRlZDogZmFsc2UsXG5cblx0cHJldmVudERlZmF1bHQ6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSByZXR1cm5UcnVlO1xuXG5cdFx0aWYgKCBlICYmICF0aGlzLmlzU2ltdWxhdGVkICkge1xuXHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdH1cblx0fSxcblx0c3RvcFByb3BhZ2F0aW9uOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuXHRcdHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQgPSByZXR1cm5UcnVlO1xuXG5cdFx0aWYgKCBlICYmICF0aGlzLmlzU2ltdWxhdGVkICkge1xuXHRcdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHR9XG5cdH0sXG5cdHN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cblx0XHR0aGlzLmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcblx0XHRcdGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG5cdFx0fVxuXG5cdFx0dGhpcy5zdG9wUHJvcGFnYXRpb24oKTtcblx0fVxufTtcblxuLy8gSW5jbHVkZXMgYWxsIGNvbW1vbiBldmVudCBwcm9wcyBpbmNsdWRpbmcgS2V5RXZlbnQgYW5kIE1vdXNlRXZlbnQgc3BlY2lmaWMgcHJvcHNcbmpRdWVyeS5lYWNoKCB7XG5cdGFsdEtleTogdHJ1ZSxcblx0YnViYmxlczogdHJ1ZSxcblx0Y2FuY2VsYWJsZTogdHJ1ZSxcblx0Y2hhbmdlZFRvdWNoZXM6IHRydWUsXG5cdGN0cmxLZXk6IHRydWUsXG5cdGRldGFpbDogdHJ1ZSxcblx0ZXZlbnRQaGFzZTogdHJ1ZSxcblx0bWV0YUtleTogdHJ1ZSxcblx0cGFnZVg6IHRydWUsXG5cdHBhZ2VZOiB0cnVlLFxuXHRzaGlmdEtleTogdHJ1ZSxcblx0dmlldzogdHJ1ZSxcblx0XCJjaGFyXCI6IHRydWUsXG5cdGNoYXJDb2RlOiB0cnVlLFxuXHRrZXk6IHRydWUsXG5cdGtleUNvZGU6IHRydWUsXG5cdGJ1dHRvbjogdHJ1ZSxcblx0YnV0dG9uczogdHJ1ZSxcblx0Y2xpZW50WDogdHJ1ZSxcblx0Y2xpZW50WTogdHJ1ZSxcblx0b2Zmc2V0WDogdHJ1ZSxcblx0b2Zmc2V0WTogdHJ1ZSxcblx0cG9pbnRlcklkOiB0cnVlLFxuXHRwb2ludGVyVHlwZTogdHJ1ZSxcblx0c2NyZWVuWDogdHJ1ZSxcblx0c2NyZWVuWTogdHJ1ZSxcblx0dGFyZ2V0VG91Y2hlczogdHJ1ZSxcblx0dG9FbGVtZW50OiB0cnVlLFxuXHR0b3VjaGVzOiB0cnVlLFxuXG5cdHdoaWNoOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0dmFyIGJ1dHRvbiA9IGV2ZW50LmJ1dHRvbjtcblxuXHRcdC8vIEFkZCB3aGljaCBmb3Iga2V5IGV2ZW50c1xuXHRcdGlmICggZXZlbnQud2hpY2ggPT0gbnVsbCAmJiBya2V5RXZlbnQudGVzdCggZXZlbnQudHlwZSApICkge1xuXHRcdFx0cmV0dXJuIGV2ZW50LmNoYXJDb2RlICE9IG51bGwgPyBldmVudC5jaGFyQ29kZSA6IGV2ZW50LmtleUNvZGU7XG5cdFx0fVxuXG5cdFx0Ly8gQWRkIHdoaWNoIGZvciBjbGljazogMSA9PT0gbGVmdDsgMiA9PT0gbWlkZGxlOyAzID09PSByaWdodFxuXHRcdGlmICggIWV2ZW50LndoaWNoICYmIGJ1dHRvbiAhPT0gdW5kZWZpbmVkICYmIHJtb3VzZUV2ZW50LnRlc3QoIGV2ZW50LnR5cGUgKSApIHtcblx0XHRcdGlmICggYnV0dG9uICYgMSApIHtcblx0XHRcdFx0cmV0dXJuIDE7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggYnV0dG9uICYgMiApIHtcblx0XHRcdFx0cmV0dXJuIDM7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggYnV0dG9uICYgNCApIHtcblx0XHRcdFx0cmV0dXJuIDI7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdHJldHVybiBldmVudC53aGljaDtcblx0fVxufSwgalF1ZXJ5LmV2ZW50LmFkZFByb3AgKTtcblxuLy8gQ3JlYXRlIG1vdXNlZW50ZXIvbGVhdmUgZXZlbnRzIHVzaW5nIG1vdXNlb3Zlci9vdXQgYW5kIGV2ZW50LXRpbWUgY2hlY2tzXG4vLyBzbyB0aGF0IGV2ZW50IGRlbGVnYXRpb24gd29ya3MgaW4galF1ZXJ5LlxuLy8gRG8gdGhlIHNhbWUgZm9yIHBvaW50ZXJlbnRlci9wb2ludGVybGVhdmUgYW5kIHBvaW50ZXJvdmVyL3BvaW50ZXJvdXRcbi8vXG4vLyBTdXBwb3J0OiBTYWZhcmkgNyBvbmx5XG4vLyBTYWZhcmkgc2VuZHMgbW91c2VlbnRlciB0b28gb2Z0ZW47IHNlZTpcbi8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTQ3MDI1OFxuLy8gZm9yIHRoZSBkZXNjcmlwdGlvbiBvZiB0aGUgYnVnIChpdCBleGlzdGVkIGluIG9sZGVyIENocm9tZSB2ZXJzaW9ucyBhcyB3ZWxsKS5cbmpRdWVyeS5lYWNoKCB7XG5cdG1vdXNlZW50ZXI6IFwibW91c2VvdmVyXCIsXG5cdG1vdXNlbGVhdmU6IFwibW91c2VvdXRcIixcblx0cG9pbnRlcmVudGVyOiBcInBvaW50ZXJvdmVyXCIsXG5cdHBvaW50ZXJsZWF2ZTogXCJwb2ludGVyb3V0XCJcbn0sIGZ1bmN0aW9uKCBvcmlnLCBmaXggKSB7XG5cdGpRdWVyeS5ldmVudC5zcGVjaWFsWyBvcmlnIF0gPSB7XG5cdFx0ZGVsZWdhdGVUeXBlOiBmaXgsXG5cdFx0YmluZFR5cGU6IGZpeCxcblxuXHRcdGhhbmRsZTogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0dmFyIHJldCxcblx0XHRcdFx0dGFyZ2V0ID0gdGhpcyxcblx0XHRcdFx0cmVsYXRlZCA9IGV2ZW50LnJlbGF0ZWRUYXJnZXQsXG5cdFx0XHRcdGhhbmRsZU9iaiA9IGV2ZW50LmhhbmRsZU9iajtcblxuXHRcdFx0Ly8gRm9yIG1vdXNlZW50ZXIvbGVhdmUgY2FsbCB0aGUgaGFuZGxlciBpZiByZWxhdGVkIGlzIG91dHNpZGUgdGhlIHRhcmdldC5cblx0XHRcdC8vIE5COiBObyByZWxhdGVkVGFyZ2V0IGlmIHRoZSBtb3VzZSBsZWZ0L2VudGVyZWQgdGhlIGJyb3dzZXIgd2luZG93XG5cdFx0XHRpZiAoICFyZWxhdGVkIHx8ICggcmVsYXRlZCAhPT0gdGFyZ2V0ICYmICFqUXVlcnkuY29udGFpbnMoIHRhcmdldCwgcmVsYXRlZCApICkgKSB7XG5cdFx0XHRcdGV2ZW50LnR5cGUgPSBoYW5kbGVPYmoub3JpZ1R5cGU7XG5cdFx0XHRcdHJldCA9IGhhbmRsZU9iai5oYW5kbGVyLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0ZXZlbnQudHlwZSA9IGZpeDtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXHR9O1xufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0b246IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiBvbiggdGhpcywgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApO1xuXHR9LFxuXHRvbmU6IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiBvbiggdGhpcywgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiwgMSApO1xuXHR9LFxuXHRvZmY6IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGZuICkge1xuXHRcdHZhciBoYW5kbGVPYmosIHR5cGU7XG5cdFx0aWYgKCB0eXBlcyAmJiB0eXBlcy5wcmV2ZW50RGVmYXVsdCAmJiB0eXBlcy5oYW5kbGVPYmogKSB7XG5cblx0XHRcdC8vICggZXZlbnQgKSAgZGlzcGF0Y2hlZCBqUXVlcnkuRXZlbnRcblx0XHRcdGhhbmRsZU9iaiA9IHR5cGVzLmhhbmRsZU9iajtcblx0XHRcdGpRdWVyeSggdHlwZXMuZGVsZWdhdGVUYXJnZXQgKS5vZmYoXG5cdFx0XHRcdGhhbmRsZU9iai5uYW1lc3BhY2UgP1xuXHRcdFx0XHRcdGhhbmRsZU9iai5vcmlnVHlwZSArIFwiLlwiICsgaGFuZGxlT2JqLm5hbWVzcGFjZSA6XG5cdFx0XHRcdFx0aGFuZGxlT2JqLm9yaWdUeXBlLFxuXHRcdFx0XHRoYW5kbGVPYmouc2VsZWN0b3IsXG5cdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyXG5cdFx0XHQpO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXHRcdGlmICggdHlwZW9mIHR5cGVzID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzLW9iamVjdCBbLCBzZWxlY3Rvcl0gKVxuXHRcdFx0Zm9yICggdHlwZSBpbiB0eXBlcyApIHtcblx0XHRcdFx0dGhpcy5vZmYoIHR5cGUsIHNlbGVjdG9yLCB0eXBlc1sgdHlwZSBdICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cdFx0aWYgKCBzZWxlY3RvciA9PT0gZmFsc2UgfHwgdHlwZW9mIHNlbGVjdG9yID09PSBcImZ1bmN0aW9uXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMgWywgZm5dIClcblx0XHRcdGZuID0gc2VsZWN0b3I7XG5cdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0aWYgKCBmbiA9PT0gZmFsc2UgKSB7XG5cdFx0XHRmbiA9IHJldHVybkZhbHNlO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIHRoaXMsIHR5cGVzLCBmbiwgc2VsZWN0b3IgKTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxuXG52YXJcblxuXHQvKiBlc2xpbnQtZGlzYWJsZSBtYXgtbGVuICovXG5cblx0Ly8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9lc2xpbnQvZXNsaW50L2lzc3Vlcy8zMjI5XG5cdHJ4aHRtbFRhZyA9IC88KD8hYXJlYXxicnxjb2x8ZW1iZWR8aHJ8aW1nfGlucHV0fGxpbmt8bWV0YXxwYXJhbSkoKFthLXpdW15cXC9cXDA+XFx4MjBcXHRcXHJcXG5cXGZdKilbXj5dKilcXC8+L2dpLFxuXG5cdC8qIGVzbGludC1lbmFibGUgKi9cblxuXHQvLyBTdXBwb3J0OiBJRSA8PTEwIC0gMTEsIEVkZ2UgMTIgLSAxMyBvbmx5XG5cdC8vIEluIElFL0VkZ2UgdXNpbmcgcmVnZXggZ3JvdXBzIGhlcmUgY2F1c2VzIHNldmVyZSBzbG93ZG93bnMuXG5cdC8vIFNlZSBodHRwczovL2Nvbm5lY3QubWljcm9zb2Z0LmNvbS9JRS9mZWVkYmFjay9kZXRhaWxzLzE3MzY1MTIvXG5cdHJub0lubmVyaHRtbCA9IC88c2NyaXB0fDxzdHlsZXw8bGluay9pLFxuXG5cdC8vIGNoZWNrZWQ9XCJjaGVja2VkXCIgb3IgY2hlY2tlZFxuXHRyY2hlY2tlZCA9IC9jaGVja2VkXFxzKig/OltePV18PVxccyouY2hlY2tlZC4pL2ksXG5cdHJjbGVhblNjcmlwdCA9IC9eXFxzKjwhKD86XFxbQ0RBVEFcXFt8LS0pfCg/OlxcXVxcXXwtLSk+XFxzKiQvZztcblxuLy8gUHJlZmVyIGEgdGJvZHkgb3ZlciBpdHMgcGFyZW50IHRhYmxlIGZvciBjb250YWluaW5nIG5ldyByb3dzXG5mdW5jdGlvbiBtYW5pcHVsYXRpb25UYXJnZXQoIGVsZW0sIGNvbnRlbnQgKSB7XG5cdGlmICggbm9kZU5hbWUoIGVsZW0sIFwidGFibGVcIiApICYmXG5cdFx0bm9kZU5hbWUoIGNvbnRlbnQubm9kZVR5cGUgIT09IDExID8gY29udGVudCA6IGNvbnRlbnQuZmlyc3RDaGlsZCwgXCJ0clwiICkgKSB7XG5cblx0XHRyZXR1cm4galF1ZXJ5KCBlbGVtICkuY2hpbGRyZW4oIFwidGJvZHlcIiApWyAwIF0gfHwgZWxlbTtcblx0fVxuXG5cdHJldHVybiBlbGVtO1xufVxuXG4vLyBSZXBsYWNlL3Jlc3RvcmUgdGhlIHR5cGUgYXR0cmlidXRlIG9mIHNjcmlwdCBlbGVtZW50cyBmb3Igc2FmZSBET00gbWFuaXB1bGF0aW9uXG5mdW5jdGlvbiBkaXNhYmxlU2NyaXB0KCBlbGVtICkge1xuXHRlbGVtLnR5cGUgPSAoIGVsZW0uZ2V0QXR0cmlidXRlKCBcInR5cGVcIiApICE9PSBudWxsICkgKyBcIi9cIiArIGVsZW0udHlwZTtcblx0cmV0dXJuIGVsZW07XG59XG5mdW5jdGlvbiByZXN0b3JlU2NyaXB0KCBlbGVtICkge1xuXHRpZiAoICggZWxlbS50eXBlIHx8IFwiXCIgKS5zbGljZSggMCwgNSApID09PSBcInRydWUvXCIgKSB7XG5cdFx0ZWxlbS50eXBlID0gZWxlbS50eXBlLnNsaWNlKCA1ICk7XG5cdH0gZWxzZSB7XG5cdFx0ZWxlbS5yZW1vdmVBdHRyaWJ1dGUoIFwidHlwZVwiICk7XG5cdH1cblxuXHRyZXR1cm4gZWxlbTtcbn1cblxuZnVuY3Rpb24gY2xvbmVDb3B5RXZlbnQoIHNyYywgZGVzdCApIHtcblx0dmFyIGksIGwsIHR5cGUsIHBkYXRhT2xkLCBwZGF0YUN1ciwgdWRhdGFPbGQsIHVkYXRhQ3VyLCBldmVudHM7XG5cblx0aWYgKCBkZXN0Lm5vZGVUeXBlICE9PSAxICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIDEuIENvcHkgcHJpdmF0ZSBkYXRhOiBldmVudHMsIGhhbmRsZXJzLCBldGMuXG5cdGlmICggZGF0YVByaXYuaGFzRGF0YSggc3JjICkgKSB7XG5cdFx0cGRhdGFPbGQgPSBkYXRhUHJpdi5hY2Nlc3MoIHNyYyApO1xuXHRcdHBkYXRhQ3VyID0gZGF0YVByaXYuc2V0KCBkZXN0LCBwZGF0YU9sZCApO1xuXHRcdGV2ZW50cyA9IHBkYXRhT2xkLmV2ZW50cztcblxuXHRcdGlmICggZXZlbnRzICkge1xuXHRcdFx0ZGVsZXRlIHBkYXRhQ3VyLmhhbmRsZTtcblx0XHRcdHBkYXRhQ3VyLmV2ZW50cyA9IHt9O1xuXG5cdFx0XHRmb3IgKCB0eXBlIGluIGV2ZW50cyApIHtcblx0XHRcdFx0Zm9yICggaSA9IDAsIGwgPSBldmVudHNbIHR5cGUgXS5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LmFkZCggZGVzdCwgdHlwZSwgZXZlbnRzWyB0eXBlIF1bIGkgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gMi4gQ29weSB1c2VyIGRhdGFcblx0aWYgKCBkYXRhVXNlci5oYXNEYXRhKCBzcmMgKSApIHtcblx0XHR1ZGF0YU9sZCA9IGRhdGFVc2VyLmFjY2Vzcyggc3JjICk7XG5cdFx0dWRhdGFDdXIgPSBqUXVlcnkuZXh0ZW5kKCB7fSwgdWRhdGFPbGQgKTtcblxuXHRcdGRhdGFVc2VyLnNldCggZGVzdCwgdWRhdGFDdXIgKTtcblx0fVxufVxuXG4vLyBGaXggSUUgYnVncywgc2VlIHN1cHBvcnQgdGVzdHNcbmZ1bmN0aW9uIGZpeElucHV0KCBzcmMsIGRlc3QgKSB7XG5cdHZhciBub2RlTmFtZSA9IGRlc3Qubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblxuXHQvLyBGYWlscyB0byBwZXJzaXN0IHRoZSBjaGVja2VkIHN0YXRlIG9mIGEgY2xvbmVkIGNoZWNrYm94IG9yIHJhZGlvIGJ1dHRvbi5cblx0aWYgKCBub2RlTmFtZSA9PT0gXCJpbnB1dFwiICYmIHJjaGVja2FibGVUeXBlLnRlc3QoIHNyYy50eXBlICkgKSB7XG5cdFx0ZGVzdC5jaGVja2VkID0gc3JjLmNoZWNrZWQ7XG5cblx0Ly8gRmFpbHMgdG8gcmV0dXJuIHRoZSBzZWxlY3RlZCBvcHRpb24gdG8gdGhlIGRlZmF1bHQgc2VsZWN0ZWQgc3RhdGUgd2hlbiBjbG9uaW5nIG9wdGlvbnNcblx0fSBlbHNlIGlmICggbm9kZU5hbWUgPT09IFwiaW5wdXRcIiB8fCBub2RlTmFtZSA9PT0gXCJ0ZXh0YXJlYVwiICkge1xuXHRcdGRlc3QuZGVmYXVsdFZhbHVlID0gc3JjLmRlZmF1bHRWYWx1ZTtcblx0fVxufVxuXG5mdW5jdGlvbiBkb21NYW5pcCggY29sbGVjdGlvbiwgYXJncywgY2FsbGJhY2ssIGlnbm9yZWQgKSB7XG5cblx0Ly8gRmxhdHRlbiBhbnkgbmVzdGVkIGFycmF5c1xuXHRhcmdzID0gY29uY2F0LmFwcGx5KCBbXSwgYXJncyApO1xuXG5cdHZhciBmcmFnbWVudCwgZmlyc3QsIHNjcmlwdHMsIGhhc1NjcmlwdHMsIG5vZGUsIGRvYyxcblx0XHRpID0gMCxcblx0XHRsID0gY29sbGVjdGlvbi5sZW5ndGgsXG5cdFx0aU5vQ2xvbmUgPSBsIC0gMSxcblx0XHR2YWx1ZSA9IGFyZ3NbIDAgXSxcblx0XHR2YWx1ZUlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uKCB2YWx1ZSApO1xuXG5cdC8vIFdlIGNhbid0IGNsb25lTm9kZSBmcmFnbWVudHMgdGhhdCBjb250YWluIGNoZWNrZWQsIGluIFdlYktpdFxuXHRpZiAoIHZhbHVlSXNGdW5jdGlvbiB8fFxuXHRcdFx0KCBsID4gMSAmJiB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0IXN1cHBvcnQuY2hlY2tDbG9uZSAmJiByY2hlY2tlZC50ZXN0KCB2YWx1ZSApICkgKSB7XG5cdFx0cmV0dXJuIGNvbGxlY3Rpb24uZWFjaCggZnVuY3Rpb24oIGluZGV4ICkge1xuXHRcdFx0dmFyIHNlbGYgPSBjb2xsZWN0aW9uLmVxKCBpbmRleCApO1xuXHRcdFx0aWYgKCB2YWx1ZUlzRnVuY3Rpb24gKSB7XG5cdFx0XHRcdGFyZ3NbIDAgXSA9IHZhbHVlLmNhbGwoIHRoaXMsIGluZGV4LCBzZWxmLmh0bWwoKSApO1xuXHRcdFx0fVxuXHRcdFx0ZG9tTWFuaXAoIHNlbGYsIGFyZ3MsIGNhbGxiYWNrLCBpZ25vcmVkICk7XG5cdFx0fSApO1xuXHR9XG5cblx0aWYgKCBsICkge1xuXHRcdGZyYWdtZW50ID0gYnVpbGRGcmFnbWVudCggYXJncywgY29sbGVjdGlvblsgMCBdLm93bmVyRG9jdW1lbnQsIGZhbHNlLCBjb2xsZWN0aW9uLCBpZ25vcmVkICk7XG5cdFx0Zmlyc3QgPSBmcmFnbWVudC5maXJzdENoaWxkO1xuXG5cdFx0aWYgKCBmcmFnbWVudC5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMSApIHtcblx0XHRcdGZyYWdtZW50ID0gZmlyc3Q7XG5cdFx0fVxuXG5cdFx0Ly8gUmVxdWlyZSBlaXRoZXIgbmV3IGNvbnRlbnQgb3IgYW4gaW50ZXJlc3QgaW4gaWdub3JlZCBlbGVtZW50cyB0byBpbnZva2UgdGhlIGNhbGxiYWNrXG5cdFx0aWYgKCBmaXJzdCB8fCBpZ25vcmVkICkge1xuXHRcdFx0c2NyaXB0cyA9IGpRdWVyeS5tYXAoIGdldEFsbCggZnJhZ21lbnQsIFwic2NyaXB0XCIgKSwgZGlzYWJsZVNjcmlwdCApO1xuXHRcdFx0aGFzU2NyaXB0cyA9IHNjcmlwdHMubGVuZ3RoO1xuXG5cdFx0XHQvLyBVc2UgdGhlIG9yaWdpbmFsIGZyYWdtZW50IGZvciB0aGUgbGFzdCBpdGVtXG5cdFx0XHQvLyBpbnN0ZWFkIG9mIHRoZSBmaXJzdCBiZWNhdXNlIGl0IGNhbiBlbmQgdXBcblx0XHRcdC8vIGJlaW5nIGVtcHRpZWQgaW5jb3JyZWN0bHkgaW4gY2VydGFpbiBzaXR1YXRpb25zICgjODA3MCkuXG5cdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdG5vZGUgPSBmcmFnbWVudDtcblxuXHRcdFx0XHRpZiAoIGkgIT09IGlOb0Nsb25lICkge1xuXHRcdFx0XHRcdG5vZGUgPSBqUXVlcnkuY2xvbmUoIG5vZGUsIHRydWUsIHRydWUgKTtcblxuXHRcdFx0XHRcdC8vIEtlZXAgcmVmZXJlbmNlcyB0byBjbG9uZWQgc2NyaXB0cyBmb3IgbGF0ZXIgcmVzdG9yYXRpb25cblx0XHRcdFx0XHRpZiAoIGhhc1NjcmlwdHMgKSB7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0XHRcdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBzY3JpcHRzLCBnZXRBbGwoIG5vZGUsIFwic2NyaXB0XCIgKSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGNhbGxiYWNrLmNhbGwoIGNvbGxlY3Rpb25bIGkgXSwgbm9kZSwgaSApO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGhhc1NjcmlwdHMgKSB7XG5cdFx0XHRcdGRvYyA9IHNjcmlwdHNbIHNjcmlwdHMubGVuZ3RoIC0gMSBdLm93bmVyRG9jdW1lbnQ7XG5cblx0XHRcdFx0Ly8gUmVlbmFibGUgc2NyaXB0c1xuXHRcdFx0XHRqUXVlcnkubWFwKCBzY3JpcHRzLCByZXN0b3JlU2NyaXB0ICk7XG5cblx0XHRcdFx0Ly8gRXZhbHVhdGUgZXhlY3V0YWJsZSBzY3JpcHRzIG9uIGZpcnN0IGRvY3VtZW50IGluc2VydGlvblxuXHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGhhc1NjcmlwdHM7IGkrKyApIHtcblx0XHRcdFx0XHRub2RlID0gc2NyaXB0c1sgaSBdO1xuXHRcdFx0XHRcdGlmICggcnNjcmlwdFR5cGUudGVzdCggbm9kZS50eXBlIHx8IFwiXCIgKSAmJlxuXHRcdFx0XHRcdFx0IWRhdGFQcml2LmFjY2Vzcyggbm9kZSwgXCJnbG9iYWxFdmFsXCIgKSAmJlxuXHRcdFx0XHRcdFx0alF1ZXJ5LmNvbnRhaW5zKCBkb2MsIG5vZGUgKSApIHtcblxuXHRcdFx0XHRcdFx0aWYgKCBub2RlLnNyYyAmJiAoIG5vZGUudHlwZSB8fCBcIlwiICkudG9Mb3dlckNhc2UoKSAgIT09IFwibW9kdWxlXCIgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gT3B0aW9uYWwgQUpBWCBkZXBlbmRlbmN5LCBidXQgd29uJ3QgcnVuIHNjcmlwdHMgaWYgbm90IHByZXNlbnRcblx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuX2V2YWxVcmwgKSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5Ll9ldmFsVXJsKCBub2RlLnNyYyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRET01FdmFsKCBub2RlLnRleHRDb250ZW50LnJlcGxhY2UoIHJjbGVhblNjcmlwdCwgXCJcIiApLCBkb2MsIG5vZGUgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gY29sbGVjdGlvbjtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlKCBlbGVtLCBzZWxlY3Rvciwga2VlcERhdGEgKSB7XG5cdHZhciBub2RlLFxuXHRcdG5vZGVzID0gc2VsZWN0b3IgPyBqUXVlcnkuZmlsdGVyKCBzZWxlY3RvciwgZWxlbSApIDogZWxlbSxcblx0XHRpID0gMDtcblxuXHRmb3IgKCA7ICggbm9kZSA9IG5vZGVzWyBpIF0gKSAhPSBudWxsOyBpKysgKSB7XG5cdFx0aWYgKCAha2VlcERhdGEgJiYgbm9kZS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggbm9kZSApICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBub2RlLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRpZiAoIGtlZXBEYXRhICYmIGpRdWVyeS5jb250YWlucyggbm9kZS5vd25lckRvY3VtZW50LCBub2RlICkgKSB7XG5cdFx0XHRcdHNldEdsb2JhbEV2YWwoIGdldEFsbCggbm9kZSwgXCJzY3JpcHRcIiApICk7XG5cdFx0XHR9XG5cdFx0XHRub2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIG5vZGUgKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZWxlbTtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXHRodG1sUHJlZmlsdGVyOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHRyZXR1cm4gaHRtbC5yZXBsYWNlKCByeGh0bWxUYWcsIFwiPCQxPjwvJDI+XCIgKTtcblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24oIGVsZW0sIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdHZhciBpLCBsLCBzcmNFbGVtZW50cywgZGVzdEVsZW1lbnRzLFxuXHRcdFx0Y2xvbmUgPSBlbGVtLmNsb25lTm9kZSggdHJ1ZSApLFxuXHRcdFx0aW5QYWdlID0galF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKTtcblxuXHRcdC8vIEZpeCBJRSBjbG9uaW5nIGlzc3Vlc1xuXHRcdGlmICggIXN1cHBvcnQubm9DbG9uZUNoZWNrZWQgJiYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGVsZW0ubm9kZVR5cGUgPT09IDExICkgJiZcblx0XHRcdFx0IWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xuXG5cdFx0XHQvLyBXZSBlc2NoZXcgU2l6emxlIGhlcmUgZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnM6IGh0dHBzOi8vanNwZXJmLmNvbS9nZXRhbGwtdnMtc2l6emxlLzJcblx0XHRcdGRlc3RFbGVtZW50cyA9IGdldEFsbCggY2xvbmUgKTtcblx0XHRcdHNyY0VsZW1lbnRzID0gZ2V0QWxsKCBlbGVtICk7XG5cblx0XHRcdGZvciAoIGkgPSAwLCBsID0gc3JjRWxlbWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRmaXhJbnB1dCggc3JjRWxlbWVudHNbIGkgXSwgZGVzdEVsZW1lbnRzWyBpIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDb3B5IHRoZSBldmVudHMgZnJvbSB0aGUgb3JpZ2luYWwgdG8gdGhlIGNsb25lXG5cdFx0aWYgKCBkYXRhQW5kRXZlbnRzICkge1xuXHRcdFx0aWYgKCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcblx0XHRcdFx0c3JjRWxlbWVudHMgPSBzcmNFbGVtZW50cyB8fCBnZXRBbGwoIGVsZW0gKTtcblx0XHRcdFx0ZGVzdEVsZW1lbnRzID0gZGVzdEVsZW1lbnRzIHx8IGdldEFsbCggY2xvbmUgKTtcblxuXHRcdFx0XHRmb3IgKCBpID0gMCwgbCA9IHNyY0VsZW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0XHRjbG9uZUNvcHlFdmVudCggc3JjRWxlbWVudHNbIGkgXSwgZGVzdEVsZW1lbnRzWyBpIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y2xvbmVDb3B5RXZlbnQoIGVsZW0sIGNsb25lICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gUHJlc2VydmUgc2NyaXB0IGV2YWx1YXRpb24gaGlzdG9yeVxuXHRcdGRlc3RFbGVtZW50cyA9IGdldEFsbCggY2xvbmUsIFwic2NyaXB0XCIgKTtcblx0XHRpZiAoIGRlc3RFbGVtZW50cy5sZW5ndGggPiAwICkge1xuXHRcdFx0c2V0R2xvYmFsRXZhbCggZGVzdEVsZW1lbnRzLCAhaW5QYWdlICYmIGdldEFsbCggZWxlbSwgXCJzY3JpcHRcIiApICk7XG5cdFx0fVxuXG5cdFx0Ly8gUmV0dXJuIHRoZSBjbG9uZWQgc2V0XG5cdFx0cmV0dXJuIGNsb25lO1xuXHR9LFxuXG5cdGNsZWFuRGF0YTogZnVuY3Rpb24oIGVsZW1zICkge1xuXHRcdHZhciBkYXRhLCBlbGVtLCB0eXBlLFxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7ICggZWxlbSA9IGVsZW1zWyBpIF0gKSAhPT0gdW5kZWZpbmVkOyBpKysgKSB7XG5cdFx0XHRpZiAoIGFjY2VwdERhdGEoIGVsZW0gKSApIHtcblx0XHRcdFx0aWYgKCAoIGRhdGEgPSBlbGVtWyBkYXRhUHJpdi5leHBhbmRvIF0gKSApIHtcblx0XHRcdFx0XHRpZiAoIGRhdGEuZXZlbnRzICkge1xuXHRcdFx0XHRcdFx0Zm9yICggdHlwZSBpbiBkYXRhLmV2ZW50cyApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCBzcGVjaWFsWyB0eXBlIF0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggZWxlbSwgdHlwZSApO1xuXG5cdFx0XHRcdFx0XHRcdC8vIFRoaXMgaXMgYSBzaG9ydGN1dCB0byBhdm9pZCBqUXVlcnkuZXZlbnQucmVtb3ZlJ3Mgb3ZlcmhlYWRcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkucmVtb3ZlRXZlbnQoIGVsZW0sIHR5cGUsIGRhdGEuaGFuZGxlICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0zNSAtIDQ1K1xuXHRcdFx0XHRcdC8vIEFzc2lnbiB1bmRlZmluZWQgaW5zdGVhZCBvZiB1c2luZyBkZWxldGUsIHNlZSBEYXRhI3JlbW92ZVxuXHRcdFx0XHRcdGVsZW1bIGRhdGFQcml2LmV4cGFuZG8gXSA9IHVuZGVmaW5lZDtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIGVsZW1bIGRhdGFVc2VyLmV4cGFuZG8gXSApIHtcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTM1IC0gNDUrXG5cdFx0XHRcdFx0Ly8gQXNzaWduIHVuZGVmaW5lZCBpbnN0ZWFkIG9mIHVzaW5nIGRlbGV0ZSwgc2VlIERhdGEjcmVtb3ZlXG5cdFx0XHRcdFx0ZWxlbVsgZGF0YVVzZXIuZXhwYW5kbyBdID0gdW5kZWZpbmVkO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZGV0YWNoOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHJlbW92ZSggdGhpcywgc2VsZWN0b3IsIHRydWUgKTtcblx0fSxcblxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gcmVtb3ZlKCB0aGlzLCBzZWxlY3RvciApO1xuXHR9LFxuXG5cdHRleHQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRyZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdGpRdWVyeS50ZXh0KCB0aGlzICkgOlxuXHRcdFx0XHR0aGlzLmVtcHR5KCkuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0XHR0aGlzLnRleHRDb250ZW50ID0gdmFsdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ICk7XG5cdFx0fSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggKTtcblx0fSxcblxuXHRhcHBlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHR2YXIgdGFyZ2V0ID0gbWFuaXB1bGF0aW9uVGFyZ2V0KCB0aGlzLCBlbGVtICk7XG5cdFx0XHRcdHRhcmdldC5hcHBlbmRDaGlsZCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRwcmVwZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0dmFyIHRhcmdldCA9IG1hbmlwdWxhdGlvblRhcmdldCggdGhpcywgZWxlbSApO1xuXHRcdFx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0YXJnZXQuZmlyc3RDaGlsZCApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRiZWZvcmU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5wYXJlbnROb2RlICkge1xuXHRcdFx0XHR0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0aGlzICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGFmdGVyOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0dGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSggZWxlbSwgdGhpcy5uZXh0U2libGluZyApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRlbXB0eTogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGVsZW0sXG5cdFx0XHRpID0gMDtcblxuXHRcdGZvciAoIDsgKCBlbGVtID0gdGhpc1sgaSBdICkgIT0gbnVsbDsgaSsrICkge1xuXHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0XHRcdC8vIFByZXZlbnQgbWVtb3J5IGxlYWtzXG5cdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggZWxlbSwgZmFsc2UgKSApO1xuXG5cdFx0XHRcdC8vIFJlbW92ZSBhbnkgcmVtYWluaW5nIG5vZGVzXG5cdFx0XHRcdGVsZW0udGV4dENvbnRlbnQgPSBcIlwiO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiggZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0ZGF0YUFuZEV2ZW50cyA9IGRhdGFBbmRFdmVudHMgPT0gbnVsbCA/IGZhbHNlIDogZGF0YUFuZEV2ZW50cztcblx0XHRkZWVwRGF0YUFuZEV2ZW50cyA9IGRlZXBEYXRhQW5kRXZlbnRzID09IG51bGwgPyBkYXRhQW5kRXZlbnRzIDogZGVlcERhdGFBbmRFdmVudHM7XG5cblx0XHRyZXR1cm4gdGhpcy5tYXAoIGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5jbG9uZSggdGhpcywgZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKTtcblx0XHR9ICk7XG5cdH0sXG5cblx0aHRtbDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHZhciBlbGVtID0gdGhpc1sgMCBdIHx8IHt9LFxuXHRcdFx0XHRpID0gMCxcblx0XHRcdFx0bCA9IHRoaXMubGVuZ3RoO1xuXG5cdFx0XHRpZiAoIHZhbHVlID09PSB1bmRlZmluZWQgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0cmV0dXJuIGVsZW0uaW5uZXJIVE1MO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZWUgaWYgd2UgY2FuIHRha2UgYSBzaG9ydGN1dCBhbmQganVzdCB1c2UgaW5uZXJIVE1MXG5cdFx0XHRpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJiAhcm5vSW5uZXJodG1sLnRlc3QoIHZhbHVlICkgJiZcblx0XHRcdFx0IXdyYXBNYXBbICggcnRhZ05hbWUuZXhlYyggdmFsdWUgKSB8fCBbIFwiXCIsIFwiXCIgXSApWyAxIF0udG9Mb3dlckNhc2UoKSBdICkge1xuXG5cdFx0XHRcdHZhbHVlID0galF1ZXJ5Lmh0bWxQcmVmaWx0ZXIoIHZhbHVlICk7XG5cblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0XHRlbGVtID0gdGhpc1sgaSBdIHx8IHt9O1xuXG5cdFx0XHRcdFx0XHQvLyBSZW1vdmUgZWxlbWVudCBub2RlcyBhbmQgcHJldmVudCBtZW1vcnkgbGVha3Ncblx0XHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBlbGVtLCBmYWxzZSApICk7XG5cdFx0XHRcdFx0XHRcdGVsZW0uaW5uZXJIVE1MID0gdmFsdWU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0ZWxlbSA9IDA7XG5cblx0XHRcdFx0Ly8gSWYgdXNpbmcgaW5uZXJIVE1MIHRocm93cyBhbiBleGNlcHRpb24sIHVzZSB0aGUgZmFsbGJhY2sgbWV0aG9kXG5cdFx0XHRcdH0gY2F0Y2ggKCBlICkge31cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0XHR0aGlzLmVtcHR5KCkuYXBwZW5kKCB2YWx1ZSApO1xuXHRcdFx0fVxuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH0sXG5cblx0cmVwbGFjZVdpdGg6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBpZ25vcmVkID0gW107XG5cblx0XHQvLyBNYWtlIHRoZSBjaGFuZ2VzLCByZXBsYWNpbmcgZWFjaCBub24taWdub3JlZCBjb250ZXh0IGVsZW1lbnQgd2l0aCB0aGUgbmV3IGNvbnRlbnRcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgcGFyZW50ID0gdGhpcy5wYXJlbnROb2RlO1xuXG5cdFx0XHRpZiAoIGpRdWVyeS5pbkFycmF5KCB0aGlzLCBpZ25vcmVkICkgPCAwICkge1xuXHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIHRoaXMgKSApO1xuXHRcdFx0XHRpZiAoIHBhcmVudCApIHtcblx0XHRcdFx0XHRwYXJlbnQucmVwbGFjZUNoaWxkKCBlbGVtLCB0aGlzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEZvcmNlIGNhbGxiYWNrIGludm9jYXRpb25cblx0XHR9LCBpZ25vcmVkICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIHtcblx0YXBwZW5kVG86IFwiYXBwZW5kXCIsXG5cdHByZXBlbmRUbzogXCJwcmVwZW5kXCIsXG5cdGluc2VydEJlZm9yZTogXCJiZWZvcmVcIixcblx0aW5zZXJ0QWZ0ZXI6IFwiYWZ0ZXJcIixcblx0cmVwbGFjZUFsbDogXCJyZXBsYWNlV2l0aFwiXG59LCBmdW5jdGlvbiggbmFtZSwgb3JpZ2luYWwgKSB7XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBlbGVtcyxcblx0XHRcdHJldCA9IFtdLFxuXHRcdFx0aW5zZXJ0ID0galF1ZXJ5KCBzZWxlY3RvciApLFxuXHRcdFx0bGFzdCA9IGluc2VydC5sZW5ndGggLSAxLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7IGkgPD0gbGFzdDsgaSsrICkge1xuXHRcdFx0ZWxlbXMgPSBpID09PSBsYXN0ID8gdGhpcyA6IHRoaXMuY2xvbmUoIHRydWUgKTtcblx0XHRcdGpRdWVyeSggaW5zZXJ0WyBpIF0gKVsgb3JpZ2luYWwgXSggZWxlbXMgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHQvLyAuZ2V0KCkgYmVjYXVzZSBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRwdXNoLmFwcGx5KCByZXQsIGVsZW1zLmdldCgpICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCByZXQgKTtcblx0fTtcbn0gKTtcbnZhciBybnVtbm9ucHggPSBuZXcgUmVnRXhwKCBcIl4oXCIgKyBwbnVtICsgXCIpKD8hcHgpW2EteiVdKyRcIiwgXCJpXCIgKTtcblxudmFyIGdldFN0eWxlcyA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5LCBGaXJlZm94IDw9MzAgKCMxNTA5OCwgIzE0MTUwKVxuXHRcdC8vIElFIHRocm93cyBvbiBlbGVtZW50cyBjcmVhdGVkIGluIHBvcHVwc1xuXHRcdC8vIEZGIG1lYW53aGlsZSB0aHJvd3Mgb24gZnJhbWUgZWxlbWVudHMgdGhyb3VnaCBcImRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGVcIlxuXHRcdHZhciB2aWV3ID0gZWxlbS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O1xuXG5cdFx0aWYgKCAhdmlldyB8fCAhdmlldy5vcGVuZXIgKSB7XG5cdFx0XHR2aWV3ID0gd2luZG93O1xuXHRcdH1cblxuXHRcdHJldHVybiB2aWV3LmdldENvbXB1dGVkU3R5bGUoIGVsZW0gKTtcblx0fTtcblxudmFyIHJib3hTdHlsZSA9IG5ldyBSZWdFeHAoIGNzc0V4cGFuZC5qb2luKCBcInxcIiApLCBcImlcIiApO1xuXG5cblxuKCBmdW5jdGlvbigpIHtcblxuXHQvLyBFeGVjdXRpbmcgYm90aCBwaXhlbFBvc2l0aW9uICYgYm94U2l6aW5nUmVsaWFibGUgdGVzdHMgcmVxdWlyZSBvbmx5IG9uZSBsYXlvdXRcblx0Ly8gc28gdGhleSdyZSBleGVjdXRlZCBhdCB0aGUgc2FtZSB0aW1lIHRvIHNhdmUgdGhlIHNlY29uZCBjb21wdXRhdGlvbi5cblx0ZnVuY3Rpb24gY29tcHV0ZVN0eWxlVGVzdHMoKSB7XG5cblx0XHQvLyBUaGlzIGlzIGEgc2luZ2xldG9uLCB3ZSBuZWVkIHRvIGV4ZWN1dGUgaXQgb25seSBvbmNlXG5cdFx0aWYgKCAhZGl2ICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGNvbnRhaW5lci5zdHlsZS5jc3NUZXh0ID0gXCJwb3NpdGlvbjphYnNvbHV0ZTtsZWZ0Oi0xMTExMXB4O3dpZHRoOjYwcHg7XCIgK1xuXHRcdFx0XCJtYXJnaW4tdG9wOjFweDtwYWRkaW5nOjA7Ym9yZGVyOjBcIjtcblx0XHRkaXYuc3R5bGUuY3NzVGV4dCA9XG5cdFx0XHRcInBvc2l0aW9uOnJlbGF0aXZlO2Rpc3BsYXk6YmxvY2s7Ym94LXNpemluZzpib3JkZXItYm94O292ZXJmbG93OnNjcm9sbDtcIiArXG5cdFx0XHRcIm1hcmdpbjphdXRvO2JvcmRlcjoxcHg7cGFkZGluZzoxcHg7XCIgK1xuXHRcdFx0XCJ3aWR0aDo2MCU7dG9wOjElXCI7XG5cdFx0ZG9jdW1lbnRFbGVtZW50LmFwcGVuZENoaWxkKCBjb250YWluZXIgKS5hcHBlbmRDaGlsZCggZGl2ICk7XG5cblx0XHR2YXIgZGl2U3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSggZGl2ICk7XG5cdFx0cGl4ZWxQb3NpdGlvblZhbCA9IGRpdlN0eWxlLnRvcCAhPT0gXCIxJVwiO1xuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgLSA0LjMgb25seSwgRmlyZWZveCA8PTMgLSA0NFxuXHRcdHJlbGlhYmxlTWFyZ2luTGVmdFZhbCA9IHJvdW5kUGl4ZWxNZWFzdXJlcyggZGl2U3R5bGUubWFyZ2luTGVmdCApID09PSAxMjtcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIC0gNC4zIG9ubHksIFNhZmFyaSA8PTkuMSAtIDEwLjEsIGlPUyA8PTcuMCAtIDkuM1xuXHRcdC8vIFNvbWUgc3R5bGVzIGNvbWUgYmFjayB3aXRoIHBlcmNlbnRhZ2UgdmFsdWVzLCBldmVuIHRob3VnaCB0aGV5IHNob3VsZG4ndFxuXHRcdGRpdi5zdHlsZS5yaWdodCA9IFwiNjAlXCI7XG5cdFx0cGl4ZWxCb3hTdHlsZXNWYWwgPSByb3VuZFBpeGVsTWVhc3VyZXMoIGRpdlN0eWxlLnJpZ2h0ICkgPT09IDM2O1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOSAtIDExIG9ubHlcblx0XHQvLyBEZXRlY3QgbWlzcmVwb3J0aW5nIG9mIGNvbnRlbnQgZGltZW5zaW9ucyBmb3IgYm94LXNpemluZzpib3JkZXItYm94IGVsZW1lbnRzXG5cdFx0Ym94U2l6aW5nUmVsaWFibGVWYWwgPSByb3VuZFBpeGVsTWVhc3VyZXMoIGRpdlN0eWxlLndpZHRoICkgPT09IDM2O1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOSBvbmx5XG5cdFx0Ly8gRGV0ZWN0IG92ZXJmbG93OnNjcm9sbCBzY3Jld2luZXNzIChnaC0zNjk5KVxuXHRcdGRpdi5zdHlsZS5wb3NpdGlvbiA9IFwiYWJzb2x1dGVcIjtcblx0XHRzY3JvbGxib3hTaXplVmFsID0gZGl2Lm9mZnNldFdpZHRoID09PSAzNiB8fCBcImFic29sdXRlXCI7XG5cblx0XHRkb2N1bWVudEVsZW1lbnQucmVtb3ZlQ2hpbGQoIGNvbnRhaW5lciApO1xuXG5cdFx0Ly8gTnVsbGlmeSB0aGUgZGl2IHNvIGl0IHdvdWxkbid0IGJlIHN0b3JlZCBpbiB0aGUgbWVtb3J5IGFuZFxuXHRcdC8vIGl0IHdpbGwgYWxzbyBiZSBhIHNpZ24gdGhhdCBjaGVja3MgYWxyZWFkeSBwZXJmb3JtZWRcblx0XHRkaXYgPSBudWxsO1xuXHR9XG5cblx0ZnVuY3Rpb24gcm91bmRQaXhlbE1lYXN1cmVzKCBtZWFzdXJlICkge1xuXHRcdHJldHVybiBNYXRoLnJvdW5kKCBwYXJzZUZsb2F0KCBtZWFzdXJlICkgKTtcblx0fVxuXG5cdHZhciBwaXhlbFBvc2l0aW9uVmFsLCBib3hTaXppbmdSZWxpYWJsZVZhbCwgc2Nyb2xsYm94U2l6ZVZhbCwgcGl4ZWxCb3hTdHlsZXNWYWwsXG5cdFx0cmVsaWFibGVNYXJnaW5MZWZ0VmFsLFxuXHRcdGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSxcblx0XHRkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICk7XG5cblx0Ly8gRmluaXNoIGVhcmx5IGluIGxpbWl0ZWQgKG5vbi1icm93c2VyKSBlbnZpcm9ubWVudHNcblx0aWYgKCAhZGl2LnN0eWxlICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0Ly8gU3R5bGUgb2YgY2xvbmVkIGVsZW1lbnQgYWZmZWN0cyBzb3VyY2UgZWxlbWVudCBjbG9uZWQgKCM4OTA4KVxuXHRkaXYuc3R5bGUuYmFja2dyb3VuZENsaXAgPSBcImNvbnRlbnQtYm94XCI7XG5cdGRpdi5jbG9uZU5vZGUoIHRydWUgKS5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9IFwiXCI7XG5cdHN1cHBvcnQuY2xlYXJDbG9uZVN0eWxlID0gZGl2LnN0eWxlLmJhY2tncm91bmRDbGlwID09PSBcImNvbnRlbnQtYm94XCI7XG5cblx0alF1ZXJ5LmV4dGVuZCggc3VwcG9ydCwge1xuXHRcdGJveFNpemluZ1JlbGlhYmxlOiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gYm94U2l6aW5nUmVsaWFibGVWYWw7XG5cdFx0fSxcblx0XHRwaXhlbEJveFN0eWxlczogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHBpeGVsQm94U3R5bGVzVmFsO1xuXHRcdH0sXG5cdFx0cGl4ZWxQb3NpdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHBpeGVsUG9zaXRpb25WYWw7XG5cdFx0fSxcblx0XHRyZWxpYWJsZU1hcmdpbkxlZnQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiByZWxpYWJsZU1hcmdpbkxlZnRWYWw7XG5cdFx0fSxcblx0XHRzY3JvbGxib3hTaXplOiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gc2Nyb2xsYm94U2l6ZVZhbDtcblx0XHR9XG5cdH0gKTtcbn0gKSgpO1xuXG5cbmZ1bmN0aW9uIGN1ckNTUyggZWxlbSwgbmFtZSwgY29tcHV0ZWQgKSB7XG5cdHZhciB3aWR0aCwgbWluV2lkdGgsIG1heFdpZHRoLCByZXQsXG5cblx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDUxK1xuXHRcdC8vIFJldHJpZXZpbmcgc3R5bGUgYmVmb3JlIGNvbXB1dGVkIHNvbWVob3dcblx0XHQvLyBmaXhlcyBhbiBpc3N1ZSB3aXRoIGdldHRpbmcgd3JvbmcgdmFsdWVzXG5cdFx0Ly8gb24gZGV0YWNoZWQgZWxlbWVudHNcblx0XHRzdHlsZSA9IGVsZW0uc3R5bGU7XG5cblx0Y29tcHV0ZWQgPSBjb21wdXRlZCB8fCBnZXRTdHlsZXMoIGVsZW0gKTtcblxuXHQvLyBnZXRQcm9wZXJ0eVZhbHVlIGlzIG5lZWRlZCBmb3I6XG5cdC8vICAgLmNzcygnZmlsdGVyJykgKElFIDkgb25seSwgIzEyNTM3KVxuXHQvLyAgIC5jc3MoJy0tY3VzdG9tUHJvcGVydHkpICgjMzE0NClcblx0aWYgKCBjb21wdXRlZCApIHtcblx0XHRyZXQgPSBjb21wdXRlZC5nZXRQcm9wZXJ0eVZhbHVlKCBuYW1lICkgfHwgY29tcHV0ZWRbIG5hbWUgXTtcblxuXHRcdGlmICggcmV0ID09PSBcIlwiICYmICFqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApICkge1xuXHRcdFx0cmV0ID0galF1ZXJ5LnN0eWxlKCBlbGVtLCBuYW1lICk7XG5cdFx0fVxuXG5cdFx0Ly8gQSB0cmlidXRlIHRvIHRoZSBcImF3ZXNvbWUgaGFjayBieSBEZWFuIEVkd2FyZHNcIlxuXHRcdC8vIEFuZHJvaWQgQnJvd3NlciByZXR1cm5zIHBlcmNlbnRhZ2UgZm9yIHNvbWUgdmFsdWVzLFxuXHRcdC8vIGJ1dCB3aWR0aCBzZWVtcyB0byBiZSByZWxpYWJseSBwaXhlbHMuXG5cdFx0Ly8gVGhpcyBpcyBhZ2FpbnN0IHRoZSBDU1NPTSBkcmFmdCBzcGVjOlxuXHRcdC8vIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3NvbS8jcmVzb2x2ZWQtdmFsdWVzXG5cdFx0aWYgKCAhc3VwcG9ydC5waXhlbEJveFN0eWxlcygpICYmIHJudW1ub25weC50ZXN0KCByZXQgKSAmJiByYm94U3R5bGUudGVzdCggbmFtZSApICkge1xuXG5cdFx0XHQvLyBSZW1lbWJlciB0aGUgb3JpZ2luYWwgdmFsdWVzXG5cdFx0XHR3aWR0aCA9IHN0eWxlLndpZHRoO1xuXHRcdFx0bWluV2lkdGggPSBzdHlsZS5taW5XaWR0aDtcblx0XHRcdG1heFdpZHRoID0gc3R5bGUubWF4V2lkdGg7XG5cblx0XHRcdC8vIFB1dCBpbiB0aGUgbmV3IHZhbHVlcyB0byBnZXQgYSBjb21wdXRlZCB2YWx1ZSBvdXRcblx0XHRcdHN0eWxlLm1pbldpZHRoID0gc3R5bGUubWF4V2lkdGggPSBzdHlsZS53aWR0aCA9IHJldDtcblx0XHRcdHJldCA9IGNvbXB1dGVkLndpZHRoO1xuXG5cdFx0XHQvLyBSZXZlcnQgdGhlIGNoYW5nZWQgdmFsdWVzXG5cdFx0XHRzdHlsZS53aWR0aCA9IHdpZHRoO1xuXHRcdFx0c3R5bGUubWluV2lkdGggPSBtaW5XaWR0aDtcblx0XHRcdHN0eWxlLm1heFdpZHRoID0gbWF4V2lkdGg7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHJldCAhPT0gdW5kZWZpbmVkID9cblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0XHQvLyBJRSByZXR1cm5zIHpJbmRleCB2YWx1ZSBhcyBhbiBpbnRlZ2VyLlxuXHRcdHJldCArIFwiXCIgOlxuXHRcdHJldDtcbn1cblxuXG5mdW5jdGlvbiBhZGRHZXRIb29rSWYoIGNvbmRpdGlvbkZuLCBob29rRm4gKSB7XG5cblx0Ly8gRGVmaW5lIHRoZSBob29rLCB3ZSdsbCBjaGVjayBvbiB0aGUgZmlyc3QgcnVuIGlmIGl0J3MgcmVhbGx5IG5lZWRlZC5cblx0cmV0dXJuIHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBjb25kaXRpb25GbigpICkge1xuXG5cdFx0XHRcdC8vIEhvb2sgbm90IG5lZWRlZCAob3IgaXQncyBub3QgcG9zc2libGUgdG8gdXNlIGl0IGR1ZVxuXHRcdFx0XHQvLyB0byBtaXNzaW5nIGRlcGVuZGVuY3kpLCByZW1vdmUgaXQuXG5cdFx0XHRcdGRlbGV0ZSB0aGlzLmdldDtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBIb29rIG5lZWRlZDsgcmVkZWZpbmUgaXQgc28gdGhhdCB0aGUgc3VwcG9ydCB0ZXN0IGlzIG5vdCBleGVjdXRlZCBhZ2Fpbi5cblx0XHRcdHJldHVybiAoIHRoaXMuZ2V0ID0gaG9va0ZuICkuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdH1cblx0fTtcbn1cblxuXG52YXJcblxuXHQvLyBTd2FwcGFibGUgaWYgZGlzcGxheSBpcyBub25lIG9yIHN0YXJ0cyB3aXRoIHRhYmxlXG5cdC8vIGV4Y2VwdCBcInRhYmxlXCIsIFwidGFibGUtY2VsbFwiLCBvciBcInRhYmxlLWNhcHRpb25cIlxuXHQvLyBTZWUgaGVyZSBmb3IgZGlzcGxheSB2YWx1ZXM6IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvQ1NTL2Rpc3BsYXlcblx0cmRpc3BsYXlzd2FwID0gL14obm9uZXx0YWJsZSg/IS1jW2VhXSkuKykvLFxuXHRyY3VzdG9tUHJvcCA9IC9eLS0vLFxuXHRjc3NTaG93ID0geyBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLCB2aXNpYmlsaXR5OiBcImhpZGRlblwiLCBkaXNwbGF5OiBcImJsb2NrXCIgfSxcblx0Y3NzTm9ybWFsVHJhbnNmb3JtID0ge1xuXHRcdGxldHRlclNwYWNpbmc6IFwiMFwiLFxuXHRcdGZvbnRXZWlnaHQ6IFwiNDAwXCJcblx0fSxcblxuXHRjc3NQcmVmaXhlcyA9IFsgXCJXZWJraXRcIiwgXCJNb3pcIiwgXCJtc1wiIF0sXG5cdGVtcHR5U3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkuc3R5bGU7XG5cbi8vIFJldHVybiBhIGNzcyBwcm9wZXJ0eSBtYXBwZWQgdG8gYSBwb3RlbnRpYWxseSB2ZW5kb3IgcHJlZml4ZWQgcHJvcGVydHlcbmZ1bmN0aW9uIHZlbmRvclByb3BOYW1lKCBuYW1lICkge1xuXG5cdC8vIFNob3J0Y3V0IGZvciBuYW1lcyB0aGF0IGFyZSBub3QgdmVuZG9yIHByZWZpeGVkXG5cdGlmICggbmFtZSBpbiBlbXB0eVN0eWxlICkge1xuXHRcdHJldHVybiBuYW1lO1xuXHR9XG5cblx0Ly8gQ2hlY2sgZm9yIHZlbmRvciBwcmVmaXhlZCBuYW1lc1xuXHR2YXIgY2FwTmFtZSA9IG5hbWVbIDAgXS50b1VwcGVyQ2FzZSgpICsgbmFtZS5zbGljZSggMSApLFxuXHRcdGkgPSBjc3NQcmVmaXhlcy5sZW5ndGg7XG5cblx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0bmFtZSA9IGNzc1ByZWZpeGVzWyBpIF0gKyBjYXBOYW1lO1xuXHRcdGlmICggbmFtZSBpbiBlbXB0eVN0eWxlICkge1xuXHRcdFx0cmV0dXJuIG5hbWU7XG5cdFx0fVxuXHR9XG59XG5cbi8vIFJldHVybiBhIHByb3BlcnR5IG1hcHBlZCBhbG9uZyB3aGF0IGpRdWVyeS5jc3NQcm9wcyBzdWdnZXN0cyBvciB0b1xuLy8gYSB2ZW5kb3IgcHJlZml4ZWQgcHJvcGVydHkuXG5mdW5jdGlvbiBmaW5hbFByb3BOYW1lKCBuYW1lICkge1xuXHR2YXIgcmV0ID0galF1ZXJ5LmNzc1Byb3BzWyBuYW1lIF07XG5cdGlmICggIXJldCApIHtcblx0XHRyZXQgPSBqUXVlcnkuY3NzUHJvcHNbIG5hbWUgXSA9IHZlbmRvclByb3BOYW1lKCBuYW1lICkgfHwgbmFtZTtcblx0fVxuXHRyZXR1cm4gcmV0O1xufVxuXG5mdW5jdGlvbiBzZXRQb3NpdGl2ZU51bWJlciggZWxlbSwgdmFsdWUsIHN1YnRyYWN0ICkge1xuXG5cdC8vIEFueSByZWxhdGl2ZSAoKy8tKSB2YWx1ZXMgaGF2ZSBhbHJlYWR5IGJlZW5cblx0Ly8gbm9ybWFsaXplZCBhdCB0aGlzIHBvaW50XG5cdHZhciBtYXRjaGVzID0gcmNzc051bS5leGVjKCB2YWx1ZSApO1xuXHRyZXR1cm4gbWF0Y2hlcyA/XG5cblx0XHQvLyBHdWFyZCBhZ2FpbnN0IHVuZGVmaW5lZCBcInN1YnRyYWN0XCIsIGUuZy4sIHdoZW4gdXNlZCBhcyBpbiBjc3NIb29rc1xuXHRcdE1hdGgubWF4KCAwLCBtYXRjaGVzWyAyIF0gLSAoIHN1YnRyYWN0IHx8IDAgKSApICsgKCBtYXRjaGVzWyAzIF0gfHwgXCJweFwiICkgOlxuXHRcdHZhbHVlO1xufVxuXG5mdW5jdGlvbiBib3hNb2RlbEFkanVzdG1lbnQoIGVsZW0sIGRpbWVuc2lvbiwgYm94LCBpc0JvcmRlckJveCwgc3R5bGVzLCBjb21wdXRlZFZhbCApIHtcblx0dmFyIGkgPSBkaW1lbnNpb24gPT09IFwid2lkdGhcIiA/IDEgOiAwLFxuXHRcdGV4dHJhID0gMCxcblx0XHRkZWx0YSA9IDA7XG5cblx0Ly8gQWRqdXN0bWVudCBtYXkgbm90IGJlIG5lY2Vzc2FyeVxuXHRpZiAoIGJveCA9PT0gKCBpc0JvcmRlckJveCA/IFwiYm9yZGVyXCIgOiBcImNvbnRlbnRcIiApICkge1xuXHRcdHJldHVybiAwO1xuXHR9XG5cblx0Zm9yICggOyBpIDwgNDsgaSArPSAyICkge1xuXG5cdFx0Ly8gQm90aCBib3ggbW9kZWxzIGV4Y2x1ZGUgbWFyZ2luXG5cdFx0aWYgKCBib3ggPT09IFwibWFyZ2luXCIgKSB7XG5cdFx0XHRkZWx0YSArPSBqUXVlcnkuY3NzKCBlbGVtLCBib3ggKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0fVxuXG5cdFx0Ly8gSWYgd2UgZ2V0IGhlcmUgd2l0aCBhIGNvbnRlbnQtYm94LCB3ZSdyZSBzZWVraW5nIFwicGFkZGluZ1wiIG9yIFwiYm9yZGVyXCIgb3IgXCJtYXJnaW5cIlxuXHRcdGlmICggIWlzQm9yZGVyQm94ICkge1xuXG5cdFx0XHQvLyBBZGQgcGFkZGluZ1xuXHRcdFx0ZGVsdGEgKz0galF1ZXJ5LmNzcyggZWxlbSwgXCJwYWRkaW5nXCIgKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XG5cblx0XHRcdC8vIEZvciBcImJvcmRlclwiIG9yIFwibWFyZ2luXCIsIGFkZCBib3JkZXJcblx0XHRcdGlmICggYm94ICE9PSBcInBhZGRpbmdcIiApIHtcblx0XHRcdFx0ZGVsdGEgKz0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3JkZXJcIiArIGNzc0V4cGFuZFsgaSBdICsgXCJXaWR0aFwiLCB0cnVlLCBzdHlsZXMgKTtcblxuXHRcdFx0Ly8gQnV0IHN0aWxsIGtlZXAgdHJhY2sgb2YgaXQgb3RoZXJ3aXNlXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRleHRyYSArPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kWyBpIF0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXG5cdFx0Ly8gSWYgd2UgZ2V0IGhlcmUgd2l0aCBhIGJvcmRlci1ib3ggKGNvbnRlbnQgKyBwYWRkaW5nICsgYm9yZGVyKSwgd2UncmUgc2Vla2luZyBcImNvbnRlbnRcIiBvclxuXHRcdC8vIFwicGFkZGluZ1wiIG9yIFwibWFyZ2luXCJcblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBGb3IgXCJjb250ZW50XCIsIHN1YnRyYWN0IHBhZGRpbmdcblx0XHRcdGlmICggYm94ID09PSBcImNvbnRlbnRcIiApIHtcblx0XHRcdFx0ZGVsdGEgLT0galF1ZXJ5LmNzcyggZWxlbSwgXCJwYWRkaW5nXCIgKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEZvciBcImNvbnRlbnRcIiBvciBcInBhZGRpbmdcIiwgc3VidHJhY3QgYm9yZGVyXG5cdFx0XHRpZiAoIGJveCAhPT0gXCJtYXJnaW5cIiApIHtcblx0XHRcdFx0ZGVsdGEgLT0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3JkZXJcIiArIGNzc0V4cGFuZFsgaSBdICsgXCJXaWR0aFwiLCB0cnVlLCBzdHlsZXMgKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBBY2NvdW50IGZvciBwb3NpdGl2ZSBjb250ZW50LWJveCBzY3JvbGwgZ3V0dGVyIHdoZW4gcmVxdWVzdGVkIGJ5IHByb3ZpZGluZyBjb21wdXRlZFZhbFxuXHRpZiAoICFpc0JvcmRlckJveCAmJiBjb21wdXRlZFZhbCA+PSAwICkge1xuXG5cdFx0Ly8gb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IGlzIGEgcm91bmRlZCBzdW0gb2YgY29udGVudCwgcGFkZGluZywgc2Nyb2xsIGd1dHRlciwgYW5kIGJvcmRlclxuXHRcdC8vIEFzc3VtaW5nIGludGVnZXIgc2Nyb2xsIGd1dHRlciwgc3VidHJhY3QgdGhlIHJlc3QgYW5kIHJvdW5kIGRvd25cblx0XHRkZWx0YSArPSBNYXRoLm1heCggMCwgTWF0aC5jZWlsKFxuXHRcdFx0ZWxlbVsgXCJvZmZzZXRcIiArIGRpbWVuc2lvblsgMCBdLnRvVXBwZXJDYXNlKCkgKyBkaW1lbnNpb24uc2xpY2UoIDEgKSBdIC1cblx0XHRcdGNvbXB1dGVkVmFsIC1cblx0XHRcdGRlbHRhIC1cblx0XHRcdGV4dHJhIC1cblx0XHRcdDAuNVxuXHRcdCkgKTtcblx0fVxuXG5cdHJldHVybiBkZWx0YTtcbn1cblxuZnVuY3Rpb24gZ2V0V2lkdGhPckhlaWdodCggZWxlbSwgZGltZW5zaW9uLCBleHRyYSApIHtcblxuXHQvLyBTdGFydCB3aXRoIGNvbXB1dGVkIHN0eWxlXG5cdHZhciBzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKSxcblx0XHR2YWwgPSBjdXJDU1MoIGVsZW0sIGRpbWVuc2lvbiwgc3R5bGVzICksXG5cdFx0aXNCb3JkZXJCb3ggPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJveFNpemluZ1wiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiYm9yZGVyLWJveFwiLFxuXHRcdHZhbHVlSXNCb3JkZXJCb3ggPSBpc0JvcmRlckJveDtcblxuXHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9NTRcblx0Ly8gUmV0dXJuIGEgY29uZm91bmRpbmcgbm9uLXBpeGVsIHZhbHVlIG9yIGZlaWduIGlnbm9yYW5jZSwgYXMgYXBwcm9wcmlhdGUuXG5cdGlmICggcm51bW5vbnB4LnRlc3QoIHZhbCApICkge1xuXHRcdGlmICggIWV4dHJhICkge1xuXHRcdFx0cmV0dXJuIHZhbDtcblx0XHR9XG5cdFx0dmFsID0gXCJhdXRvXCI7XG5cdH1cblxuXHQvLyBDaGVjayBmb3Igc3R5bGUgaW4gY2FzZSBhIGJyb3dzZXIgd2hpY2ggcmV0dXJucyB1bnJlbGlhYmxlIHZhbHVlc1xuXHQvLyBmb3IgZ2V0Q29tcHV0ZWRTdHlsZSBzaWxlbnRseSBmYWxscyBiYWNrIHRvIHRoZSByZWxpYWJsZSBlbGVtLnN0eWxlXG5cdHZhbHVlSXNCb3JkZXJCb3ggPSB2YWx1ZUlzQm9yZGVyQm94ICYmXG5cdFx0KCBzdXBwb3J0LmJveFNpemluZ1JlbGlhYmxlKCkgfHwgdmFsID09PSBlbGVtLnN0eWxlWyBkaW1lbnNpb24gXSApO1xuXG5cdC8vIEZhbGwgYmFjayB0byBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgd2hlbiB2YWx1ZSBpcyBcImF1dG9cIlxuXHQvLyBUaGlzIGhhcHBlbnMgZm9yIGlubGluZSBlbGVtZW50cyB3aXRoIG5vIGV4cGxpY2l0IHNldHRpbmcgKGdoLTM1NzEpXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjEgLSA0LjMgb25seVxuXHQvLyBBbHNvIHVzZSBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgZm9yIG1pc3JlcG9ydGVkIGlubGluZSBkaW1lbnNpb25zIChnaC0zNjAyKVxuXHRpZiAoIHZhbCA9PT0gXCJhdXRvXCIgfHxcblx0XHQhcGFyc2VGbG9hdCggdmFsICkgJiYgalF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJpbmxpbmVcIiApIHtcblxuXHRcdHZhbCA9IGVsZW1bIFwib2Zmc2V0XCIgKyBkaW1lbnNpb25bIDAgXS50b1VwcGVyQ2FzZSgpICsgZGltZW5zaW9uLnNsaWNlKCAxICkgXTtcblxuXHRcdC8vIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBwcm92aWRlIGJvcmRlci1ib3ggdmFsdWVzXG5cdFx0dmFsdWVJc0JvcmRlckJveCA9IHRydWU7XG5cdH1cblxuXHQvLyBOb3JtYWxpemUgXCJcIiBhbmQgYXV0b1xuXHR2YWwgPSBwYXJzZUZsb2F0KCB2YWwgKSB8fCAwO1xuXG5cdC8vIEFkanVzdCBmb3IgdGhlIGVsZW1lbnQncyBib3ggbW9kZWxcblx0cmV0dXJuICggdmFsICtcblx0XHRib3hNb2RlbEFkanVzdG1lbnQoXG5cdFx0XHRlbGVtLFxuXHRcdFx0ZGltZW5zaW9uLFxuXHRcdFx0ZXh0cmEgfHwgKCBpc0JvcmRlckJveCA/IFwiYm9yZGVyXCIgOiBcImNvbnRlbnRcIiApLFxuXHRcdFx0dmFsdWVJc0JvcmRlckJveCxcblx0XHRcdHN0eWxlcyxcblxuXHRcdFx0Ly8gUHJvdmlkZSB0aGUgY3VycmVudCBjb21wdXRlZCBzaXplIHRvIHJlcXVlc3Qgc2Nyb2xsIGd1dHRlciBjYWxjdWxhdGlvbiAoZ2gtMzU4OSlcblx0XHRcdHZhbFxuXHRcdClcblx0KSArIFwicHhcIjtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIEFkZCBpbiBzdHlsZSBwcm9wZXJ0eSBob29rcyBmb3Igb3ZlcnJpZGluZyB0aGUgZGVmYXVsdFxuXHQvLyBiZWhhdmlvciBvZiBnZXR0aW5nIGFuZCBzZXR0aW5nIGEgc3R5bGUgcHJvcGVydHlcblx0Y3NzSG9va3M6IHtcblx0XHRvcGFjaXR5OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblxuXHRcdFx0XHRcdC8vIFdlIHNob3VsZCBhbHdheXMgZ2V0IGEgbnVtYmVyIGJhY2sgZnJvbSBvcGFjaXR5XG5cdFx0XHRcdFx0dmFyIHJldCA9IGN1ckNTUyggZWxlbSwgXCJvcGFjaXR5XCIgKTtcblx0XHRcdFx0XHRyZXR1cm4gcmV0ID09PSBcIlwiID8gXCIxXCIgOiByZXQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0Ly8gRG9uJ3QgYXV0b21hdGljYWxseSBhZGQgXCJweFwiIHRvIHRoZXNlIHBvc3NpYmx5LXVuaXRsZXNzIHByb3BlcnRpZXNcblx0Y3NzTnVtYmVyOiB7XG5cdFx0XCJhbmltYXRpb25JdGVyYXRpb25Db3VudFwiOiB0cnVlLFxuXHRcdFwiY29sdW1uQ291bnRcIjogdHJ1ZSxcblx0XHRcImZpbGxPcGFjaXR5XCI6IHRydWUsXG5cdFx0XCJmbGV4R3Jvd1wiOiB0cnVlLFxuXHRcdFwiZmxleFNocmlua1wiOiB0cnVlLFxuXHRcdFwiZm9udFdlaWdodFwiOiB0cnVlLFxuXHRcdFwibGluZUhlaWdodFwiOiB0cnVlLFxuXHRcdFwib3BhY2l0eVwiOiB0cnVlLFxuXHRcdFwib3JkZXJcIjogdHJ1ZSxcblx0XHRcIm9ycGhhbnNcIjogdHJ1ZSxcblx0XHRcIndpZG93c1wiOiB0cnVlLFxuXHRcdFwiekluZGV4XCI6IHRydWUsXG5cdFx0XCJ6b29tXCI6IHRydWVcblx0fSxcblxuXHQvLyBBZGQgaW4gcHJvcGVydGllcyB3aG9zZSBuYW1lcyB5b3Ugd2lzaCB0byBmaXggYmVmb3JlXG5cdC8vIHNldHRpbmcgb3IgZ2V0dGluZyB0aGUgdmFsdWVcblx0Y3NzUHJvcHM6IHt9LFxuXG5cdC8vIEdldCBhbmQgc2V0IHRoZSBzdHlsZSBwcm9wZXJ0eSBvbiBhIERPTSBOb2RlXG5cdHN0eWxlOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUsIGV4dHJhICkge1xuXG5cdFx0Ly8gRG9uJ3Qgc2V0IHN0eWxlcyBvbiB0ZXh0IGFuZCBjb21tZW50IG5vZGVzXG5cdFx0aWYgKCAhZWxlbSB8fCBlbGVtLm5vZGVUeXBlID09PSAzIHx8IGVsZW0ubm9kZVR5cGUgPT09IDggfHwgIWVsZW0uc3R5bGUgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgd2UncmUgd29ya2luZyB3aXRoIHRoZSByaWdodCBuYW1lXG5cdFx0dmFyIHJldCwgdHlwZSwgaG9va3MsXG5cdFx0XHRvcmlnTmFtZSA9IGNhbWVsQ2FzZSggbmFtZSApLFxuXHRcdFx0aXNDdXN0b21Qcm9wID0gcmN1c3RvbVByb3AudGVzdCggbmFtZSApLFxuXHRcdFx0c3R5bGUgPSBlbGVtLnN0eWxlO1xuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgd2UncmUgd29ya2luZyB3aXRoIHRoZSByaWdodCBuYW1lLiBXZSBkb24ndFxuXHRcdC8vIHdhbnQgdG8gcXVlcnkgdGhlIHZhbHVlIGlmIGl0IGlzIGEgQ1NTIGN1c3RvbSBwcm9wZXJ0eVxuXHRcdC8vIHNpbmNlIHRoZXkgYXJlIHVzZXItZGVmaW5lZC5cblx0XHRpZiAoICFpc0N1c3RvbVByb3AgKSB7XG5cdFx0XHRuYW1lID0gZmluYWxQcm9wTmFtZSggb3JpZ05hbWUgKTtcblx0XHR9XG5cblx0XHQvLyBHZXRzIGhvb2sgZm9yIHRoZSBwcmVmaXhlZCB2ZXJzaW9uLCB0aGVuIHVucHJlZml4ZWQgdmVyc2lvblxuXHRcdGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF0gfHwgalF1ZXJ5LmNzc0hvb2tzWyBvcmlnTmFtZSBdO1xuXG5cdFx0Ly8gQ2hlY2sgaWYgd2UncmUgc2V0dGluZyBhIHZhbHVlXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0dHlwZSA9IHR5cGVvZiB2YWx1ZTtcblxuXHRcdFx0Ly8gQ29udmVydCBcIis9XCIgb3IgXCItPVwiIHRvIHJlbGF0aXZlIG51bWJlcnMgKCM3MzQ1KVxuXHRcdFx0aWYgKCB0eXBlID09PSBcInN0cmluZ1wiICYmICggcmV0ID0gcmNzc051bS5leGVjKCB2YWx1ZSApICkgJiYgcmV0WyAxIF0gKSB7XG5cdFx0XHRcdHZhbHVlID0gYWRqdXN0Q1NTKCBlbGVtLCBuYW1lLCByZXQgKTtcblxuXHRcdFx0XHQvLyBGaXhlcyBidWcgIzkyMzdcblx0XHRcdFx0dHlwZSA9IFwibnVtYmVyXCI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE1ha2Ugc3VyZSB0aGF0IG51bGwgYW5kIE5hTiB2YWx1ZXMgYXJlbid0IHNldCAoIzcxMTYpXG5cdFx0XHRpZiAoIHZhbHVlID09IG51bGwgfHwgdmFsdWUgIT09IHZhbHVlICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIGEgbnVtYmVyIHdhcyBwYXNzZWQgaW4sIGFkZCB0aGUgdW5pdCAoZXhjZXB0IGZvciBjZXJ0YWluIENTUyBwcm9wZXJ0aWVzKVxuXHRcdFx0aWYgKCB0eXBlID09PSBcIm51bWJlclwiICkge1xuXHRcdFx0XHR2YWx1ZSArPSByZXQgJiYgcmV0WyAzIF0gfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBvcmlnTmFtZSBdID8gXCJcIiA6IFwicHhcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBiYWNrZ3JvdW5kLSogcHJvcHMgYWZmZWN0IG9yaWdpbmFsIGNsb25lJ3MgdmFsdWVzXG5cdFx0XHRpZiAoICFzdXBwb3J0LmNsZWFyQ2xvbmVTdHlsZSAmJiB2YWx1ZSA9PT0gXCJcIiAmJiBuYW1lLmluZGV4T2YoIFwiYmFja2dyb3VuZFwiICkgPT09IDAgKSB7XG5cdFx0XHRcdHN0eWxlWyBuYW1lIF0gPSBcImluaGVyaXRcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCwgdXNlIHRoYXQgdmFsdWUsIG90aGVyd2lzZSBqdXN0IHNldCB0aGUgc3BlY2lmaWVkIHZhbHVlXG5cdFx0XHRpZiAoICFob29rcyB8fCAhKCBcInNldFwiIGluIGhvb2tzICkgfHxcblx0XHRcdFx0KCB2YWx1ZSA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIGV4dHJhICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGlmICggaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0XHRcdHN0eWxlLnNldFByb3BlcnR5KCBuYW1lLCB2YWx1ZSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHN0eWxlWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCBnZXQgdGhlIG5vbi1jb21wdXRlZCB2YWx1ZSBmcm9tIHRoZXJlXG5cdFx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0KCByZXQgPSBob29rcy5nZXQoIGVsZW0sIGZhbHNlLCBleHRyYSApICkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBPdGhlcndpc2UganVzdCBnZXQgdGhlIHZhbHVlIGZyb20gdGhlIHN0eWxlIG9iamVjdFxuXHRcdFx0cmV0dXJuIHN0eWxlWyBuYW1lIF07XG5cdFx0fVxuXHR9LFxuXG5cdGNzczogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGV4dHJhLCBzdHlsZXMgKSB7XG5cdFx0dmFyIHZhbCwgbnVtLCBob29rcyxcblx0XHRcdG9yaWdOYW1lID0gY2FtZWxDYXNlKCBuYW1lICksXG5cdFx0XHRpc0N1c3RvbVByb3AgPSByY3VzdG9tUHJvcC50ZXN0KCBuYW1lICk7XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWUuIFdlIGRvbid0XG5cdFx0Ly8gd2FudCB0byBtb2RpZnkgdGhlIHZhbHVlIGlmIGl0IGlzIGEgQ1NTIGN1c3RvbSBwcm9wZXJ0eVxuXHRcdC8vIHNpbmNlIHRoZXkgYXJlIHVzZXItZGVmaW5lZC5cblx0XHRpZiAoICFpc0N1c3RvbVByb3AgKSB7XG5cdFx0XHRuYW1lID0gZmluYWxQcm9wTmFtZSggb3JpZ05hbWUgKTtcblx0XHR9XG5cblx0XHQvLyBUcnkgcHJlZml4ZWQgbmFtZSBmb2xsb3dlZCBieSB0aGUgdW5wcmVmaXhlZCBuYW1lXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXSB8fCBqUXVlcnkuY3NzSG9va3NbIG9yaWdOYW1lIF07XG5cblx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkIGdldCB0aGUgY29tcHV0ZWQgdmFsdWUgZnJvbSB0aGVyZVxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyApIHtcblx0XHRcdHZhbCA9IGhvb2tzLmdldCggZWxlbSwgdHJ1ZSwgZXh0cmEgKTtcblx0XHR9XG5cblx0XHQvLyBPdGhlcndpc2UsIGlmIGEgd2F5IHRvIGdldCB0aGUgY29tcHV0ZWQgdmFsdWUgZXhpc3RzLCB1c2UgdGhhdFxuXHRcdGlmICggdmFsID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHR2YWwgPSBjdXJDU1MoIGVsZW0sIG5hbWUsIHN0eWxlcyApO1xuXHRcdH1cblxuXHRcdC8vIENvbnZlcnQgXCJub3JtYWxcIiB0byBjb21wdXRlZCB2YWx1ZVxuXHRcdGlmICggdmFsID09PSBcIm5vcm1hbFwiICYmIG5hbWUgaW4gY3NzTm9ybWFsVHJhbnNmb3JtICkge1xuXHRcdFx0dmFsID0gY3NzTm9ybWFsVHJhbnNmb3JtWyBuYW1lIF07XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBudW1lcmljIGlmIGZvcmNlZCBvciBhIHF1YWxpZmllciB3YXMgcHJvdmlkZWQgYW5kIHZhbCBsb29rcyBudW1lcmljXG5cdFx0aWYgKCBleHRyYSA9PT0gXCJcIiB8fCBleHRyYSApIHtcblx0XHRcdG51bSA9IHBhcnNlRmxvYXQoIHZhbCApO1xuXHRcdFx0cmV0dXJuIGV4dHJhID09PSB0cnVlIHx8IGlzRmluaXRlKCBudW0gKSA/IG51bSB8fCAwIDogdmFsO1xuXHRcdH1cblxuXHRcdHJldHVybiB2YWw7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIFsgXCJoZWlnaHRcIiwgXCJ3aWR0aFwiIF0sIGZ1bmN0aW9uKCBpLCBkaW1lbnNpb24gKSB7XG5cdGpRdWVyeS5jc3NIb29rc1sgZGltZW5zaW9uIF0gPSB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQsIGV4dHJhICkge1xuXHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblxuXHRcdFx0XHQvLyBDZXJ0YWluIGVsZW1lbnRzIGNhbiBoYXZlIGRpbWVuc2lvbiBpbmZvIGlmIHdlIGludmlzaWJseSBzaG93IHRoZW1cblx0XHRcdFx0Ly8gYnV0IGl0IG11c3QgaGF2ZSBhIGN1cnJlbnQgZGlzcGxheSBzdHlsZSB0aGF0IHdvdWxkIGJlbmVmaXRcblx0XHRcdFx0cmV0dXJuIHJkaXNwbGF5c3dhcC50ZXN0KCBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApICkgJiZcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA4K1xuXHRcdFx0XHRcdC8vIFRhYmxlIGNvbHVtbnMgaW4gU2FmYXJpIGhhdmUgbm9uLXplcm8gb2Zmc2V0V2lkdGggJiB6ZXJvXG5cdFx0XHRcdFx0Ly8gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGggdW5sZXNzIGRpc3BsYXkgaXMgY2hhbmdlZC5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0XHRcdFx0XHQvLyBSdW5uaW5nIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBvbiBhIGRpc2Nvbm5lY3RlZCBub2RlXG5cdFx0XHRcdFx0Ly8gaW4gSUUgdGhyb3dzIGFuIGVycm9yLlxuXHRcdFx0XHRcdCggIWVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggfHwgIWVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGggKSA/XG5cdFx0XHRcdFx0XHRzd2FwKCBlbGVtLCBjc3NTaG93LCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIGRpbWVuc2lvbiwgZXh0cmEgKTtcblx0XHRcdFx0XHRcdH0gKSA6XG5cdFx0XHRcdFx0XHRnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBkaW1lbnNpb24sIGV4dHJhICk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlLCBleHRyYSApIHtcblx0XHRcdHZhciBtYXRjaGVzLFxuXHRcdFx0XHRzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKSxcblx0XHRcdFx0aXNCb3JkZXJCb3ggPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJveFNpemluZ1wiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiYm9yZGVyLWJveFwiLFxuXHRcdFx0XHRzdWJ0cmFjdCA9IGV4dHJhICYmIGJveE1vZGVsQWRqdXN0bWVudChcblx0XHRcdFx0XHRlbGVtLFxuXHRcdFx0XHRcdGRpbWVuc2lvbixcblx0XHRcdFx0XHRleHRyYSxcblx0XHRcdFx0XHRpc0JvcmRlckJveCxcblx0XHRcdFx0XHRzdHlsZXNcblx0XHRcdFx0KTtcblxuXHRcdFx0Ly8gQWNjb3VudCBmb3IgdW5yZWxpYWJsZSBib3JkZXItYm94IGRpbWVuc2lvbnMgYnkgY29tcGFyaW5nIG9mZnNldCogdG8gY29tcHV0ZWQgYW5kXG5cdFx0XHQvLyBmYWtpbmcgYSBjb250ZW50LWJveCB0byBnZXQgYm9yZGVyIGFuZCBwYWRkaW5nIChnaC0zNjk5KVxuXHRcdFx0aWYgKCBpc0JvcmRlckJveCAmJiBzdXBwb3J0LnNjcm9sbGJveFNpemUoKSA9PT0gc3R5bGVzLnBvc2l0aW9uICkge1xuXHRcdFx0XHRzdWJ0cmFjdCAtPSBNYXRoLmNlaWwoXG5cdFx0XHRcdFx0ZWxlbVsgXCJvZmZzZXRcIiArIGRpbWVuc2lvblsgMCBdLnRvVXBwZXJDYXNlKCkgKyBkaW1lbnNpb24uc2xpY2UoIDEgKSBdIC1cblx0XHRcdFx0XHRwYXJzZUZsb2F0KCBzdHlsZXNbIGRpbWVuc2lvbiBdICkgLVxuXHRcdFx0XHRcdGJveE1vZGVsQWRqdXN0bWVudCggZWxlbSwgZGltZW5zaW9uLCBcImJvcmRlclwiLCBmYWxzZSwgc3R5bGVzICkgLVxuXHRcdFx0XHRcdDAuNVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb252ZXJ0IHRvIHBpeGVscyBpZiB2YWx1ZSBhZGp1c3RtZW50IGlzIG5lZWRlZFxuXHRcdFx0aWYgKCBzdWJ0cmFjdCAmJiAoIG1hdGNoZXMgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICkgKSAmJlxuXHRcdFx0XHQoIG1hdGNoZXNbIDMgXSB8fCBcInB4XCIgKSAhPT0gXCJweFwiICkge1xuXG5cdFx0XHRcdGVsZW0uc3R5bGVbIGRpbWVuc2lvbiBdID0gdmFsdWU7XG5cdFx0XHRcdHZhbHVlID0galF1ZXJ5LmNzcyggZWxlbSwgZGltZW5zaW9uICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBzZXRQb3NpdGl2ZU51bWJlciggZWxlbSwgdmFsdWUsIHN1YnRyYWN0ICk7XG5cdFx0fVxuXHR9O1xufSApO1xuXG5qUXVlcnkuY3NzSG9va3MubWFyZ2luTGVmdCA9IGFkZEdldEhvb2tJZiggc3VwcG9ydC5yZWxpYWJsZU1hcmdpbkxlZnQsXG5cdGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdFx0cmV0dXJuICggcGFyc2VGbG9hdCggY3VyQ1NTKCBlbGVtLCBcIm1hcmdpbkxlZnRcIiApICkgfHxcblx0XHRcdFx0ZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0IC1cblx0XHRcdFx0XHRzd2FwKCBlbGVtLCB7IG1hcmdpbkxlZnQ6IDAgfSwgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0O1xuXHRcdFx0XHRcdH0gKVxuXHRcdFx0XHQpICsgXCJweFwiO1xuXHRcdH1cblx0fVxuKTtcblxuLy8gVGhlc2UgaG9va3MgYXJlIHVzZWQgYnkgYW5pbWF0ZSB0byBleHBhbmQgcHJvcGVydGllc1xualF1ZXJ5LmVhY2goIHtcblx0bWFyZ2luOiBcIlwiLFxuXHRwYWRkaW5nOiBcIlwiLFxuXHRib3JkZXI6IFwiV2lkdGhcIlxufSwgZnVuY3Rpb24oIHByZWZpeCwgc3VmZml4ICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIHByZWZpeCArIHN1ZmZpeCBdID0ge1xuXHRcdGV4cGFuZDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGkgPSAwLFxuXHRcdFx0XHRleHBhbmRlZCA9IHt9LFxuXG5cdFx0XHRcdC8vIEFzc3VtZXMgYSBzaW5nbGUgbnVtYmVyIGlmIG5vdCBhIHN0cmluZ1xuXHRcdFx0XHRwYXJ0cyA9IHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiA/IHZhbHVlLnNwbGl0KCBcIiBcIiApIDogWyB2YWx1ZSBdO1xuXG5cdFx0XHRmb3IgKCA7IGkgPCA0OyBpKysgKSB7XG5cdFx0XHRcdGV4cGFuZGVkWyBwcmVmaXggKyBjc3NFeHBhbmRbIGkgXSArIHN1ZmZpeCBdID1cblx0XHRcdFx0XHRwYXJ0c1sgaSBdIHx8IHBhcnRzWyBpIC0gMiBdIHx8IHBhcnRzWyAwIF07XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBleHBhbmRlZDtcblx0XHR9XG5cdH07XG5cblx0aWYgKCBwcmVmaXggIT09IFwibWFyZ2luXCIgKSB7XG5cdFx0alF1ZXJ5LmNzc0hvb2tzWyBwcmVmaXggKyBzdWZmaXggXS5zZXQgPSBzZXRQb3NpdGl2ZU51bWJlcjtcblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGNzczogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHRcdHZhciBzdHlsZXMsIGxlbixcblx0XHRcdFx0bWFwID0ge30sXG5cdFx0XHRcdGkgPSAwO1xuXG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIG5hbWUgKSApIHtcblx0XHRcdFx0c3R5bGVzID0gZ2V0U3R5bGVzKCBlbGVtICk7XG5cdFx0XHRcdGxlbiA9IG5hbWUubGVuZ3RoO1xuXG5cdFx0XHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRcdG1hcFsgbmFtZVsgaSBdIF0gPSBqUXVlcnkuY3NzKCBlbGVtLCBuYW1lWyBpIF0sIGZhbHNlLCBzdHlsZXMgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBtYXA7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkID9cblx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBuYW1lLCB2YWx1ZSApIDpcblx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgbmFtZSApO1xuXHRcdH0sIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuXHR9XG59ICk7XG5cblxuZnVuY3Rpb24gVHdlZW4oIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nICkge1xuXHRyZXR1cm4gbmV3IFR3ZWVuLnByb3RvdHlwZS5pbml0KCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZyApO1xufVxualF1ZXJ5LlR3ZWVuID0gVHdlZW47XG5cblR3ZWVuLnByb3RvdHlwZSA9IHtcblx0Y29uc3RydWN0b3I6IFR3ZWVuLFxuXHRpbml0OiBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcsIHVuaXQgKSB7XG5cdFx0dGhpcy5lbGVtID0gZWxlbTtcblx0XHR0aGlzLnByb3AgPSBwcm9wO1xuXHRcdHRoaXMuZWFzaW5nID0gZWFzaW5nIHx8IGpRdWVyeS5lYXNpbmcuX2RlZmF1bHQ7XG5cdFx0dGhpcy5vcHRpb25zID0gb3B0aW9ucztcblx0XHR0aGlzLnN0YXJ0ID0gdGhpcy5ub3cgPSB0aGlzLmN1cigpO1xuXHRcdHRoaXMuZW5kID0gZW5kO1xuXHRcdHRoaXMudW5pdCA9IHVuaXQgfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gPyBcIlwiIDogXCJweFwiICk7XG5cdH0sXG5cdGN1cjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGhvb2tzID0gVHdlZW4ucHJvcEhvb2tzWyB0aGlzLnByb3AgXTtcblxuXHRcdHJldHVybiBob29rcyAmJiBob29rcy5nZXQgP1xuXHRcdFx0aG9va3MuZ2V0KCB0aGlzICkgOlxuXHRcdFx0VHdlZW4ucHJvcEhvb2tzLl9kZWZhdWx0LmdldCggdGhpcyApO1xuXHR9LFxuXHRydW46IGZ1bmN0aW9uKCBwZXJjZW50ICkge1xuXHRcdHZhciBlYXNlZCxcblx0XHRcdGhvb2tzID0gVHdlZW4ucHJvcEhvb2tzWyB0aGlzLnByb3AgXTtcblxuXHRcdGlmICggdGhpcy5vcHRpb25zLmR1cmF0aW9uICkge1xuXHRcdFx0dGhpcy5wb3MgPSBlYXNlZCA9IGpRdWVyeS5lYXNpbmdbIHRoaXMuZWFzaW5nIF0oXG5cdFx0XHRcdHBlcmNlbnQsIHRoaXMub3B0aW9ucy5kdXJhdGlvbiAqIHBlcmNlbnQsIDAsIDEsIHRoaXMub3B0aW9ucy5kdXJhdGlvblxuXHRcdFx0KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5wb3MgPSBlYXNlZCA9IHBlcmNlbnQ7XG5cdFx0fVxuXHRcdHRoaXMubm93ID0gKCB0aGlzLmVuZCAtIHRoaXMuc3RhcnQgKSAqIGVhc2VkICsgdGhpcy5zdGFydDtcblxuXHRcdGlmICggdGhpcy5vcHRpb25zLnN0ZXAgKSB7XG5cdFx0XHR0aGlzLm9wdGlvbnMuc3RlcC5jYWxsKCB0aGlzLmVsZW0sIHRoaXMubm93LCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBob29rcy5zZXQgKSB7XG5cdFx0XHRob29rcy5zZXQoIHRoaXMgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0VHdlZW4ucHJvcEhvb2tzLl9kZWZhdWx0LnNldCggdGhpcyApO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcztcblx0fVxufTtcblxuVHdlZW4ucHJvdG90eXBlLmluaXQucHJvdG90eXBlID0gVHdlZW4ucHJvdG90eXBlO1xuXG5Ud2Vlbi5wcm9wSG9va3MgPSB7XG5cdF9kZWZhdWx0OiB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cdFx0XHR2YXIgcmVzdWx0O1xuXG5cdFx0XHQvLyBVc2UgYSBwcm9wZXJ0eSBvbiB0aGUgZWxlbWVudCBkaXJlY3RseSB3aGVuIGl0IGlzIG5vdCBhIERPTSBlbGVtZW50LFxuXHRcdFx0Ly8gb3Igd2hlbiB0aGVyZSBpcyBubyBtYXRjaGluZyBzdHlsZSBwcm9wZXJ0eSB0aGF0IGV4aXN0cy5cblx0XHRcdGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSAhPT0gMSB8fFxuXHRcdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gIT0gbnVsbCAmJiB0d2Vlbi5lbGVtLnN0eWxlWyB0d2Vlbi5wcm9wIF0gPT0gbnVsbCApIHtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUGFzc2luZyBhbiBlbXB0eSBzdHJpbmcgYXMgYSAzcmQgcGFyYW1ldGVyIHRvIC5jc3Mgd2lsbCBhdXRvbWF0aWNhbGx5XG5cdFx0XHQvLyBhdHRlbXB0IGEgcGFyc2VGbG9hdCBhbmQgZmFsbGJhY2sgdG8gYSBzdHJpbmcgaWYgdGhlIHBhcnNlIGZhaWxzLlxuXHRcdFx0Ly8gU2ltcGxlIHZhbHVlcyBzdWNoIGFzIFwiMTBweFwiIGFyZSBwYXJzZWQgdG8gRmxvYXQ7XG5cdFx0XHQvLyBjb21wbGV4IHZhbHVlcyBzdWNoIGFzIFwicm90YXRlKDFyYWQpXCIgYXJlIHJldHVybmVkIGFzLWlzLlxuXHRcdFx0cmVzdWx0ID0galF1ZXJ5LmNzcyggdHdlZW4uZWxlbSwgdHdlZW4ucHJvcCwgXCJcIiApO1xuXG5cdFx0XHQvLyBFbXB0eSBzdHJpbmdzLCBudWxsLCB1bmRlZmluZWQgYW5kIFwiYXV0b1wiIGFyZSBjb252ZXJ0ZWQgdG8gMC5cblx0XHRcdHJldHVybiAhcmVzdWx0IHx8IHJlc3VsdCA9PT0gXCJhdXRvXCIgPyAwIDogcmVzdWx0O1xuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cblx0XHRcdC8vIFVzZSBzdGVwIGhvb2sgZm9yIGJhY2sgY29tcGF0LlxuXHRcdFx0Ly8gVXNlIGNzc0hvb2sgaWYgaXRzIHRoZXJlLlxuXHRcdFx0Ly8gVXNlIC5zdHlsZSBpZiBhdmFpbGFibGUgYW5kIHVzZSBwbGFpbiBwcm9wZXJ0aWVzIHdoZXJlIGF2YWlsYWJsZS5cblx0XHRcdGlmICggalF1ZXJ5LmZ4LnN0ZXBbIHR3ZWVuLnByb3AgXSApIHtcblx0XHRcdFx0alF1ZXJ5LmZ4LnN0ZXBbIHR3ZWVuLnByb3AgXSggdHdlZW4gKTtcblx0XHRcdH0gZWxzZSBpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdFx0KCB0d2Vlbi5lbGVtLnN0eWxlWyBqUXVlcnkuY3NzUHJvcHNbIHR3ZWVuLnByb3AgXSBdICE9IG51bGwgfHxcblx0XHRcdFx0XHRqUXVlcnkuY3NzSG9va3NbIHR3ZWVuLnByb3AgXSApICkge1xuXHRcdFx0XHRqUXVlcnkuc3R5bGUoIHR3ZWVuLmVsZW0sIHR3ZWVuLnByb3AsIHR3ZWVuLm5vdyArIHR3ZWVuLnVuaXQgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSA9IHR3ZWVuLm5vdztcblx0XHRcdH1cblx0XHR9XG5cdH1cbn07XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG4vLyBQYW5pYyBiYXNlZCBhcHByb2FjaCB0byBzZXR0aW5nIHRoaW5ncyBvbiBkaXNjb25uZWN0ZWQgbm9kZXNcblR3ZWVuLnByb3BIb29rcy5zY3JvbGxUb3AgPSBUd2Vlbi5wcm9wSG9va3Muc2Nyb2xsTGVmdCA9IHtcblx0c2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cdFx0aWYgKCB0d2Vlbi5lbGVtLm5vZGVUeXBlICYmIHR3ZWVuLmVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSA9IHR3ZWVuLm5vdztcblx0XHR9XG5cdH1cbn07XG5cbmpRdWVyeS5lYXNpbmcgPSB7XG5cdGxpbmVhcjogZnVuY3Rpb24oIHAgKSB7XG5cdFx0cmV0dXJuIHA7XG5cdH0sXG5cdHN3aW5nOiBmdW5jdGlvbiggcCApIHtcblx0XHRyZXR1cm4gMC41IC0gTWF0aC5jb3MoIHAgKiBNYXRoLlBJICkgLyAyO1xuXHR9LFxuXHRfZGVmYXVsdDogXCJzd2luZ1wiXG59O1xuXG5qUXVlcnkuZnggPSBUd2Vlbi5wcm90b3R5cGUuaW5pdDtcblxuLy8gQmFjayBjb21wYXQgPDEuOCBleHRlbnNpb24gcG9pbnRcbmpRdWVyeS5meC5zdGVwID0ge307XG5cblxuXG5cbnZhclxuXHRmeE5vdywgaW5Qcm9ncmVzcyxcblx0cmZ4dHlwZXMgPSAvXig/OnRvZ2dsZXxzaG93fGhpZGUpJC8sXG5cdHJydW4gPSAvcXVldWVIb29rcyQvO1xuXG5mdW5jdGlvbiBzY2hlZHVsZSgpIHtcblx0aWYgKCBpblByb2dyZXNzICkge1xuXHRcdGlmICggZG9jdW1lbnQuaGlkZGVuID09PSBmYWxzZSAmJiB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lICkge1xuXHRcdFx0d2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSggc2NoZWR1bGUgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0d2luZG93LnNldFRpbWVvdXQoIHNjaGVkdWxlLCBqUXVlcnkuZnguaW50ZXJ2YWwgKTtcblx0XHR9XG5cblx0XHRqUXVlcnkuZngudGljaygpO1xuXHR9XG59XG5cbi8vIEFuaW1hdGlvbnMgY3JlYXRlZCBzeW5jaHJvbm91c2x5IHdpbGwgcnVuIHN5bmNocm9ub3VzbHlcbmZ1bmN0aW9uIGNyZWF0ZUZ4Tm93KCkge1xuXHR3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0ZnhOb3cgPSB1bmRlZmluZWQ7XG5cdH0gKTtcblx0cmV0dXJuICggZnhOb3cgPSBEYXRlLm5vdygpICk7XG59XG5cbi8vIEdlbmVyYXRlIHBhcmFtZXRlcnMgdG8gY3JlYXRlIGEgc3RhbmRhcmQgYW5pbWF0aW9uXG5mdW5jdGlvbiBnZW5GeCggdHlwZSwgaW5jbHVkZVdpZHRoICkge1xuXHR2YXIgd2hpY2gsXG5cdFx0aSA9IDAsXG5cdFx0YXR0cnMgPSB7IGhlaWdodDogdHlwZSB9O1xuXG5cdC8vIElmIHdlIGluY2x1ZGUgd2lkdGgsIHN0ZXAgdmFsdWUgaXMgMSB0byBkbyBhbGwgY3NzRXhwYW5kIHZhbHVlcyxcblx0Ly8gb3RoZXJ3aXNlIHN0ZXAgdmFsdWUgaXMgMiB0byBza2lwIG92ZXIgTGVmdCBhbmQgUmlnaHRcblx0aW5jbHVkZVdpZHRoID0gaW5jbHVkZVdpZHRoID8gMSA6IDA7XG5cdGZvciAoIDsgaSA8IDQ7IGkgKz0gMiAtIGluY2x1ZGVXaWR0aCApIHtcblx0XHR3aGljaCA9IGNzc0V4cGFuZFsgaSBdO1xuXHRcdGF0dHJzWyBcIm1hcmdpblwiICsgd2hpY2ggXSA9IGF0dHJzWyBcInBhZGRpbmdcIiArIHdoaWNoIF0gPSB0eXBlO1xuXHR9XG5cblx0aWYgKCBpbmNsdWRlV2lkdGggKSB7XG5cdFx0YXR0cnMub3BhY2l0eSA9IGF0dHJzLndpZHRoID0gdHlwZTtcblx0fVxuXG5cdHJldHVybiBhdHRycztcbn1cblxuZnVuY3Rpb24gY3JlYXRlVHdlZW4oIHZhbHVlLCBwcm9wLCBhbmltYXRpb24gKSB7XG5cdHZhciB0d2Vlbixcblx0XHRjb2xsZWN0aW9uID0gKCBBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXSB8fCBbXSApLmNvbmNhdCggQW5pbWF0aW9uLnR3ZWVuZXJzWyBcIipcIiBdICksXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IGNvbGxlY3Rpb24ubGVuZ3RoO1xuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGlmICggKCB0d2VlbiA9IGNvbGxlY3Rpb25bIGluZGV4IF0uY2FsbCggYW5pbWF0aW9uLCBwcm9wLCB2YWx1ZSApICkgKSB7XG5cblx0XHRcdC8vIFdlJ3JlIGRvbmUgd2l0aCB0aGlzIHByb3BlcnR5XG5cdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRQcmVmaWx0ZXIoIGVsZW0sIHByb3BzLCBvcHRzICkge1xuXHR2YXIgcHJvcCwgdmFsdWUsIHRvZ2dsZSwgaG9va3MsIG9sZGZpcmUsIHByb3BUd2VlbiwgcmVzdG9yZURpc3BsYXksIGRpc3BsYXksXG5cdFx0aXNCb3ggPSBcIndpZHRoXCIgaW4gcHJvcHMgfHwgXCJoZWlnaHRcIiBpbiBwcm9wcyxcblx0XHRhbmltID0gdGhpcyxcblx0XHRvcmlnID0ge30sXG5cdFx0c3R5bGUgPSBlbGVtLnN0eWxlLFxuXHRcdGhpZGRlbiA9IGVsZW0ubm9kZVR5cGUgJiYgaXNIaWRkZW5XaXRoaW5UcmVlKCBlbGVtICksXG5cdFx0ZGF0YVNob3cgPSBkYXRhUHJpdi5nZXQoIGVsZW0sIFwiZnhzaG93XCIgKTtcblxuXHQvLyBRdWV1ZS1za2lwcGluZyBhbmltYXRpb25zIGhpamFjayB0aGUgZnggaG9va3Ncblx0aWYgKCAhb3B0cy5xdWV1ZSApIHtcblx0XHRob29rcyA9IGpRdWVyeS5fcXVldWVIb29rcyggZWxlbSwgXCJmeFwiICk7XG5cdFx0aWYgKCBob29rcy51bnF1ZXVlZCA9PSBudWxsICkge1xuXHRcdFx0aG9va3MudW5xdWV1ZWQgPSAwO1xuXHRcdFx0b2xkZmlyZSA9IGhvb2tzLmVtcHR5LmZpcmU7XG5cdFx0XHRob29rcy5lbXB0eS5maXJlID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggIWhvb2tzLnVucXVldWVkICkge1xuXHRcdFx0XHRcdG9sZGZpcmUoKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHR9XG5cdFx0aG9va3MudW5xdWV1ZWQrKztcblxuXHRcdGFuaW0uYWx3YXlzKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRW5zdXJlIHRoZSBjb21wbGV0ZSBoYW5kbGVyIGlzIGNhbGxlZCBiZWZvcmUgdGhpcyBjb21wbGV0ZXNcblx0XHRcdGFuaW0uYWx3YXlzKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0aG9va3MudW5xdWV1ZWQtLTtcblx0XHRcdFx0aWYgKCAhalF1ZXJ5LnF1ZXVlKCBlbGVtLCBcImZ4XCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdFx0aG9va3MuZW1wdHkuZmlyZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gRGV0ZWN0IHNob3cvaGlkZSBhbmltYXRpb25zXG5cdGZvciAoIHByb3AgaW4gcHJvcHMgKSB7XG5cdFx0dmFsdWUgPSBwcm9wc1sgcHJvcCBdO1xuXHRcdGlmICggcmZ4dHlwZXMudGVzdCggdmFsdWUgKSApIHtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgcHJvcCBdO1xuXHRcdFx0dG9nZ2xlID0gdG9nZ2xlIHx8IHZhbHVlID09PSBcInRvZ2dsZVwiO1xuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gKCBoaWRkZW4gPyBcImhpZGVcIiA6IFwic2hvd1wiICkgKSB7XG5cblx0XHRcdFx0Ly8gUHJldGVuZCB0byBiZSBoaWRkZW4gaWYgdGhpcyBpcyBhIFwic2hvd1wiIGFuZFxuXHRcdFx0XHQvLyB0aGVyZSBpcyBzdGlsbCBkYXRhIGZyb20gYSBzdG9wcGVkIHNob3cvaGlkZVxuXHRcdFx0XHRpZiAoIHZhbHVlID09PSBcInNob3dcIiAmJiBkYXRhU2hvdyAmJiBkYXRhU2hvd1sgcHJvcCBdICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0aGlkZGVuID0gdHJ1ZTtcblxuXHRcdFx0XHQvLyBJZ25vcmUgYWxsIG90aGVyIG5vLW9wIHNob3cvaGlkZSBkYXRhXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdG9yaWdbIHByb3AgXSA9IGRhdGFTaG93ICYmIGRhdGFTaG93WyBwcm9wIF0gfHwgalF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gQmFpbCBvdXQgaWYgdGhpcyBpcyBhIG5vLW9wIGxpa2UgLmhpZGUoKS5oaWRlKClcblx0cHJvcFR3ZWVuID0gIWpRdWVyeS5pc0VtcHR5T2JqZWN0KCBwcm9wcyApO1xuXHRpZiAoICFwcm9wVHdlZW4gJiYgalF1ZXJ5LmlzRW1wdHlPYmplY3QoIG9yaWcgKSApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyBSZXN0cmljdCBcIm92ZXJmbG93XCIgYW5kIFwiZGlzcGxheVwiIHN0eWxlcyBkdXJpbmcgYm94IGFuaW1hdGlvbnNcblx0aWYgKCBpc0JveCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEsIEVkZ2UgMTIgLSAxNVxuXHRcdC8vIFJlY29yZCBhbGwgMyBvdmVyZmxvdyBhdHRyaWJ1dGVzIGJlY2F1c2UgSUUgZG9lcyBub3QgaW5mZXIgdGhlIHNob3J0aGFuZFxuXHRcdC8vIGZyb20gaWRlbnRpY2FsbHktdmFsdWVkIG92ZXJmbG93WCBhbmQgb3ZlcmZsb3dZIGFuZCBFZGdlIGp1c3QgbWlycm9yc1xuXHRcdC8vIHRoZSBvdmVyZmxvd1ggdmFsdWUgdGhlcmUuXG5cdFx0b3B0cy5vdmVyZmxvdyA9IFsgc3R5bGUub3ZlcmZsb3csIHN0eWxlLm92ZXJmbG93WCwgc3R5bGUub3ZlcmZsb3dZIF07XG5cblx0XHQvLyBJZGVudGlmeSBhIGRpc3BsYXkgdHlwZSwgcHJlZmVycmluZyBvbGQgc2hvdy9oaWRlIGRhdGEgb3ZlciB0aGUgQ1NTIGNhc2NhZGVcblx0XHRyZXN0b3JlRGlzcGxheSA9IGRhdGFTaG93ICYmIGRhdGFTaG93LmRpc3BsYXk7XG5cdFx0aWYgKCByZXN0b3JlRGlzcGxheSA9PSBudWxsICkge1xuXHRcdFx0cmVzdG9yZURpc3BsYXkgPSBkYXRhUHJpdi5nZXQoIGVsZW0sIFwiZGlzcGxheVwiICk7XG5cdFx0fVxuXHRcdGRpc3BsYXkgPSBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApO1xuXHRcdGlmICggZGlzcGxheSA9PT0gXCJub25lXCIgKSB7XG5cdFx0XHRpZiAoIHJlc3RvcmVEaXNwbGF5ICkge1xuXHRcdFx0XHRkaXNwbGF5ID0gcmVzdG9yZURpc3BsYXk7XG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIEdldCBub25lbXB0eSB2YWx1ZShzKSBieSB0ZW1wb3JhcmlseSBmb3JjaW5nIHZpc2liaWxpdHlcblx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdLCB0cnVlICk7XG5cdFx0XHRcdHJlc3RvcmVEaXNwbGF5ID0gZWxlbS5zdHlsZS5kaXNwbGF5IHx8IHJlc3RvcmVEaXNwbGF5O1xuXHRcdFx0XHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKTtcblx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQW5pbWF0ZSBpbmxpbmUgZWxlbWVudHMgYXMgaW5saW5lLWJsb2NrXG5cdFx0aWYgKCBkaXNwbGF5ID09PSBcImlubGluZVwiIHx8IGRpc3BsYXkgPT09IFwiaW5saW5lLWJsb2NrXCIgJiYgcmVzdG9yZURpc3BsYXkgIT0gbnVsbCApIHtcblx0XHRcdGlmICggalF1ZXJ5LmNzcyggZWxlbSwgXCJmbG9hdFwiICkgPT09IFwibm9uZVwiICkge1xuXG5cdFx0XHRcdC8vIFJlc3RvcmUgdGhlIG9yaWdpbmFsIGRpc3BsYXkgdmFsdWUgYXQgdGhlIGVuZCBvZiBwdXJlIHNob3cvaGlkZSBhbmltYXRpb25zXG5cdFx0XHRcdGlmICggIXByb3BUd2VlbiApIHtcblx0XHRcdFx0XHRhbmltLmRvbmUoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0c3R5bGUuZGlzcGxheSA9IHJlc3RvcmVEaXNwbGF5O1xuXHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRpZiAoIHJlc3RvcmVEaXNwbGF5ID09IG51bGwgKSB7XG5cdFx0XHRcdFx0XHRkaXNwbGF5ID0gc3R5bGUuZGlzcGxheTtcblx0XHRcdFx0XHRcdHJlc3RvcmVEaXNwbGF5ID0gZGlzcGxheSA9PT0gXCJub25lXCIgPyBcIlwiIDogZGlzcGxheTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0c3R5bGUuZGlzcGxheSA9IFwiaW5saW5lLWJsb2NrXCI7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0aWYgKCBvcHRzLm92ZXJmbG93ICkge1xuXHRcdHN0eWxlLm92ZXJmbG93ID0gXCJoaWRkZW5cIjtcblx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cdFx0XHRzdHlsZS5vdmVyZmxvdyA9IG9wdHMub3ZlcmZsb3dbIDAgXTtcblx0XHRcdHN0eWxlLm92ZXJmbG93WCA9IG9wdHMub3ZlcmZsb3dbIDEgXTtcblx0XHRcdHN0eWxlLm92ZXJmbG93WSA9IG9wdHMub3ZlcmZsb3dbIDIgXTtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBJbXBsZW1lbnQgc2hvdy9oaWRlIGFuaW1hdGlvbnNcblx0cHJvcFR3ZWVuID0gZmFsc2U7XG5cdGZvciAoIHByb3AgaW4gb3JpZyApIHtcblxuXHRcdC8vIEdlbmVyYWwgc2hvdy9oaWRlIHNldHVwIGZvciB0aGlzIGVsZW1lbnQgYW5pbWF0aW9uXG5cdFx0aWYgKCAhcHJvcFR3ZWVuICkge1xuXHRcdFx0aWYgKCBkYXRhU2hvdyApIHtcblx0XHRcdFx0aWYgKCBcImhpZGRlblwiIGluIGRhdGFTaG93ICkge1xuXHRcdFx0XHRcdGhpZGRlbiA9IGRhdGFTaG93LmhpZGRlbjtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGF0YVNob3cgPSBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIFwiZnhzaG93XCIsIHsgZGlzcGxheTogcmVzdG9yZURpc3BsYXkgfSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdG9yZSBoaWRkZW4vdmlzaWJsZSBmb3IgdG9nZ2xlIHNvIGAuc3RvcCgpLnRvZ2dsZSgpYCBcInJldmVyc2VzXCJcblx0XHRcdGlmICggdG9nZ2xlICkge1xuXHRcdFx0XHRkYXRhU2hvdy5oaWRkZW4gPSAhaGlkZGVuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTaG93IGVsZW1lbnRzIGJlZm9yZSBhbmltYXRpbmcgdGhlbVxuXHRcdFx0aWYgKCBoaWRkZW4gKSB7XG5cdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSwgdHJ1ZSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvKiBlc2xpbnQtZGlzYWJsZSBuby1sb29wLWZ1bmMgKi9cblxuXHRcdFx0YW5pbS5kb25lKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0LyogZXNsaW50LWVuYWJsZSBuby1sb29wLWZ1bmMgKi9cblxuXHRcdFx0XHQvLyBUaGUgZmluYWwgc3RlcCBvZiBhIFwiaGlkZVwiIGFuaW1hdGlvbiBpcyBhY3R1YWxseSBoaWRpbmcgdGhlIGVsZW1lbnRcblx0XHRcdFx0aWYgKCAhaGlkZGVuICkge1xuXHRcdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgXCJmeHNob3dcIiApO1xuXHRcdFx0XHRmb3IgKCBwcm9wIGluIG9yaWcgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wLCBvcmlnWyBwcm9wIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdC8vIFBlci1wcm9wZXJ0eSBzZXR1cFxuXHRcdHByb3BUd2VlbiA9IGNyZWF0ZVR3ZWVuKCBoaWRkZW4gPyBkYXRhU2hvd1sgcHJvcCBdIDogMCwgcHJvcCwgYW5pbSApO1xuXHRcdGlmICggISggcHJvcCBpbiBkYXRhU2hvdyApICkge1xuXHRcdFx0ZGF0YVNob3dbIHByb3AgXSA9IHByb3BUd2Vlbi5zdGFydDtcblx0XHRcdGlmICggaGlkZGVuICkge1xuXHRcdFx0XHRwcm9wVHdlZW4uZW5kID0gcHJvcFR3ZWVuLnN0YXJ0O1xuXHRcdFx0XHRwcm9wVHdlZW4uc3RhcnQgPSAwO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBwcm9wRmlsdGVyKCBwcm9wcywgc3BlY2lhbEVhc2luZyApIHtcblx0dmFyIGluZGV4LCBuYW1lLCBlYXNpbmcsIHZhbHVlLCBob29rcztcblxuXHQvLyBjYW1lbENhc2UsIHNwZWNpYWxFYXNpbmcgYW5kIGV4cGFuZCBjc3NIb29rIHBhc3Ncblx0Zm9yICggaW5kZXggaW4gcHJvcHMgKSB7XG5cdFx0bmFtZSA9IGNhbWVsQ2FzZSggaW5kZXggKTtcblx0XHRlYXNpbmcgPSBzcGVjaWFsRWFzaW5nWyBuYW1lIF07XG5cdFx0dmFsdWUgPSBwcm9wc1sgaW5kZXggXTtcblx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cdFx0XHRlYXNpbmcgPSB2YWx1ZVsgMSBdO1xuXHRcdFx0dmFsdWUgPSBwcm9wc1sgaW5kZXggXSA9IHZhbHVlWyAwIF07XG5cdFx0fVxuXG5cdFx0aWYgKCBpbmRleCAhPT0gbmFtZSApIHtcblx0XHRcdHByb3BzWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgaW5kZXggXTtcblx0XHR9XG5cblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdO1xuXHRcdGlmICggaG9va3MgJiYgXCJleHBhbmRcIiBpbiBob29rcyApIHtcblx0XHRcdHZhbHVlID0gaG9va3MuZXhwYW5kKCB2YWx1ZSApO1xuXHRcdFx0ZGVsZXRlIHByb3BzWyBuYW1lIF07XG5cblx0XHRcdC8vIE5vdCBxdWl0ZSAkLmV4dGVuZCwgdGhpcyB3b24ndCBvdmVyd3JpdGUgZXhpc3Rpbmcga2V5cy5cblx0XHRcdC8vIFJldXNpbmcgJ2luZGV4JyBiZWNhdXNlIHdlIGhhdmUgdGhlIGNvcnJlY3QgXCJuYW1lXCJcblx0XHRcdGZvciAoIGluZGV4IGluIHZhbHVlICkge1xuXHRcdFx0XHRpZiAoICEoIGluZGV4IGluIHByb3BzICkgKSB7XG5cdFx0XHRcdFx0cHJvcHNbIGluZGV4IF0gPSB2YWx1ZVsgaW5kZXggXTtcblx0XHRcdFx0XHRzcGVjaWFsRWFzaW5nWyBpbmRleCBdID0gZWFzaW5nO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdHNwZWNpYWxFYXNpbmdbIG5hbWUgXSA9IGVhc2luZztcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gQW5pbWF0aW9uKCBlbGVtLCBwcm9wZXJ0aWVzLCBvcHRpb25zICkge1xuXHR2YXIgcmVzdWx0LFxuXHRcdHN0b3BwZWQsXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IEFuaW1hdGlvbi5wcmVmaWx0ZXJzLmxlbmd0aCxcblx0XHRkZWZlcnJlZCA9IGpRdWVyeS5EZWZlcnJlZCgpLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIERvbid0IG1hdGNoIGVsZW0gaW4gdGhlIDphbmltYXRlZCBzZWxlY3RvclxuXHRcdFx0ZGVsZXRlIHRpY2suZWxlbTtcblx0XHR9ICksXG5cdFx0dGljayA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBzdG9wcGVkICkge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0XHR2YXIgY3VycmVudFRpbWUgPSBmeE5vdyB8fCBjcmVhdGVGeE5vdygpLFxuXHRcdFx0XHRyZW1haW5pbmcgPSBNYXRoLm1heCggMCwgYW5pbWF0aW9uLnN0YXJ0VGltZSArIGFuaW1hdGlvbi5kdXJhdGlvbiAtIGN1cnJlbnRUaW1lICksXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCAyLjMgb25seVxuXHRcdFx0XHQvLyBBcmNoYWljIGNyYXNoIGJ1ZyB3b24ndCBhbGxvdyB1cyB0byB1c2UgYDEgLSAoIDAuNSB8fCAwIClgICgjMTI0OTcpXG5cdFx0XHRcdHRlbXAgPSByZW1haW5pbmcgLyBhbmltYXRpb24uZHVyYXRpb24gfHwgMCxcblx0XHRcdFx0cGVyY2VudCA9IDEgLSB0ZW1wLFxuXHRcdFx0XHRpbmRleCA9IDAsXG5cdFx0XHRcdGxlbmd0aCA9IGFuaW1hdGlvbi50d2VlbnMubGVuZ3RoO1xuXG5cdFx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0XHRhbmltYXRpb24udHdlZW5zWyBpbmRleCBdLnJ1biggcGVyY2VudCApO1xuXHRcdFx0fVxuXG5cdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgcGVyY2VudCwgcmVtYWluaW5nIF0gKTtcblxuXHRcdFx0Ly8gSWYgdGhlcmUncyBtb3JlIHRvIGRvLCB5aWVsZFxuXHRcdFx0aWYgKCBwZXJjZW50IDwgMSAmJiBsZW5ndGggKSB7XG5cdFx0XHRcdHJldHVybiByZW1haW5pbmc7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIHRoaXMgd2FzIGFuIGVtcHR5IGFuaW1hdGlvbiwgc3ludGhlc2l6ZSBhIGZpbmFsIHByb2dyZXNzIG5vdGlmaWNhdGlvblxuXHRcdFx0aWYgKCAhbGVuZ3RoICkge1xuXHRcdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgMSwgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJlc29sdmUgdGhlIGFuaW1hdGlvbiBhbmQgcmVwb3J0IGl0cyBjb25jbHVzaW9uXG5cdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggZWxlbSwgWyBhbmltYXRpb24gXSApO1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0sXG5cdFx0YW5pbWF0aW9uID0gZGVmZXJyZWQucHJvbWlzZSgge1xuXHRcdFx0ZWxlbTogZWxlbSxcblx0XHRcdHByb3BzOiBqUXVlcnkuZXh0ZW5kKCB7fSwgcHJvcGVydGllcyApLFxuXHRcdFx0b3B0czogalF1ZXJ5LmV4dGVuZCggdHJ1ZSwge1xuXHRcdFx0XHRzcGVjaWFsRWFzaW5nOiB7fSxcblx0XHRcdFx0ZWFzaW5nOiBqUXVlcnkuZWFzaW5nLl9kZWZhdWx0XG5cdFx0XHR9LCBvcHRpb25zICksXG5cdFx0XHRvcmlnaW5hbFByb3BlcnRpZXM6IHByb3BlcnRpZXMsXG5cdFx0XHRvcmlnaW5hbE9wdGlvbnM6IG9wdGlvbnMsXG5cdFx0XHRzdGFydFRpbWU6IGZ4Tm93IHx8IGNyZWF0ZUZ4Tm93KCksXG5cdFx0XHRkdXJhdGlvbjogb3B0aW9ucy5kdXJhdGlvbixcblx0XHRcdHR3ZWVuczogW10sXG5cdFx0XHRjcmVhdGVUd2VlbjogZnVuY3Rpb24oIHByb3AsIGVuZCApIHtcblx0XHRcdFx0dmFyIHR3ZWVuID0galF1ZXJ5LlR3ZWVuKCBlbGVtLCBhbmltYXRpb24ub3B0cywgcHJvcCwgZW5kLFxuXHRcdFx0XHRcdFx0YW5pbWF0aW9uLm9wdHMuc3BlY2lhbEVhc2luZ1sgcHJvcCBdIHx8IGFuaW1hdGlvbi5vcHRzLmVhc2luZyApO1xuXHRcdFx0XHRhbmltYXRpb24udHdlZW5zLnB1c2goIHR3ZWVuICk7XG5cdFx0XHRcdHJldHVybiB0d2Vlbjtcblx0XHRcdH0sXG5cdFx0XHRzdG9wOiBmdW5jdGlvbiggZ290b0VuZCApIHtcblx0XHRcdFx0dmFyIGluZGV4ID0gMCxcblxuXHRcdFx0XHRcdC8vIElmIHdlIGFyZSBnb2luZyB0byB0aGUgZW5kLCB3ZSB3YW50IHRvIHJ1biBhbGwgdGhlIHR3ZWVuc1xuXHRcdFx0XHRcdC8vIG90aGVyd2lzZSB3ZSBza2lwIHRoaXMgcGFydFxuXHRcdFx0XHRcdGxlbmd0aCA9IGdvdG9FbmQgPyBhbmltYXRpb24udHdlZW5zLmxlbmd0aCA6IDA7XG5cdFx0XHRcdGlmICggc3RvcHBlZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXHRcdFx0XHRzdG9wcGVkID0gdHJ1ZTtcblx0XHRcdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdFx0XHRhbmltYXRpb24udHdlZW5zWyBpbmRleCBdLnJ1biggMSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmVzb2x2ZSB3aGVuIHdlIHBsYXllZCB0aGUgbGFzdCBmcmFtZTsgb3RoZXJ3aXNlLCByZWplY3Rcblx0XHRcdFx0aWYgKCBnb3RvRW5kICkge1xuXHRcdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCAxLCAwIF0gKTtcblx0XHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggZWxlbSwgWyBhbmltYXRpb24sIGdvdG9FbmQgXSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGRlZmVycmVkLnJlamVjdFdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBnb3RvRW5kIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH1cblx0XHR9ICksXG5cdFx0cHJvcHMgPSBhbmltYXRpb24ucHJvcHM7XG5cblx0cHJvcEZpbHRlciggcHJvcHMsIGFuaW1hdGlvbi5vcHRzLnNwZWNpYWxFYXNpbmcgKTtcblxuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdHJlc3VsdCA9IEFuaW1hdGlvbi5wcmVmaWx0ZXJzWyBpbmRleCBdLmNhbGwoIGFuaW1hdGlvbiwgZWxlbSwgcHJvcHMsIGFuaW1hdGlvbi5vcHRzICk7XG5cdFx0aWYgKCByZXN1bHQgKSB7XG5cdFx0XHRpZiAoIGlzRnVuY3Rpb24oIHJlc3VsdC5zdG9wICkgKSB7XG5cdFx0XHRcdGpRdWVyeS5fcXVldWVIb29rcyggYW5pbWF0aW9uLmVsZW0sIGFuaW1hdGlvbi5vcHRzLnF1ZXVlICkuc3RvcCA9XG5cdFx0XHRcdFx0cmVzdWx0LnN0b3AuYmluZCggcmVzdWx0ICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdH1cblx0fVxuXG5cdGpRdWVyeS5tYXAoIHByb3BzLCBjcmVhdGVUd2VlbiwgYW5pbWF0aW9uICk7XG5cblx0aWYgKCBpc0Z1bmN0aW9uKCBhbmltYXRpb24ub3B0cy5zdGFydCApICkge1xuXHRcdGFuaW1hdGlvbi5vcHRzLnN0YXJ0LmNhbGwoIGVsZW0sIGFuaW1hdGlvbiApO1xuXHR9XG5cblx0Ly8gQXR0YWNoIGNhbGxiYWNrcyBmcm9tIG9wdGlvbnNcblx0YW5pbWF0aW9uXG5cdFx0LnByb2dyZXNzKCBhbmltYXRpb24ub3B0cy5wcm9ncmVzcyApXG5cdFx0LmRvbmUoIGFuaW1hdGlvbi5vcHRzLmRvbmUsIGFuaW1hdGlvbi5vcHRzLmNvbXBsZXRlIClcblx0XHQuZmFpbCggYW5pbWF0aW9uLm9wdHMuZmFpbCApXG5cdFx0LmFsd2F5cyggYW5pbWF0aW9uLm9wdHMuYWx3YXlzICk7XG5cblx0alF1ZXJ5LmZ4LnRpbWVyKFxuXHRcdGpRdWVyeS5leHRlbmQoIHRpY2ssIHtcblx0XHRcdGVsZW06IGVsZW0sXG5cdFx0XHRhbmltOiBhbmltYXRpb24sXG5cdFx0XHRxdWV1ZTogYW5pbWF0aW9uLm9wdHMucXVldWVcblx0XHR9IClcblx0KTtcblxuXHRyZXR1cm4gYW5pbWF0aW9uO1xufVxuXG5qUXVlcnkuQW5pbWF0aW9uID0galF1ZXJ5LmV4dGVuZCggQW5pbWF0aW9uLCB7XG5cblx0dHdlZW5lcnM6IHtcblx0XHRcIipcIjogWyBmdW5jdGlvbiggcHJvcCwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgdHdlZW4gPSB0aGlzLmNyZWF0ZVR3ZWVuKCBwcm9wLCB2YWx1ZSApO1xuXHRcdFx0YWRqdXN0Q1NTKCB0d2Vlbi5lbGVtLCBwcm9wLCByY3NzTnVtLmV4ZWMoIHZhbHVlICksIHR3ZWVuICk7XG5cdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0fSBdXG5cdH0sXG5cblx0dHdlZW5lcjogZnVuY3Rpb24oIHByb3BzLCBjYWxsYmFjayApIHtcblx0XHRpZiAoIGlzRnVuY3Rpb24oIHByb3BzICkgKSB7XG5cdFx0XHRjYWxsYmFjayA9IHByb3BzO1xuXHRcdFx0cHJvcHMgPSBbIFwiKlwiIF07XG5cdFx0fSBlbHNlIHtcblx0XHRcdHByb3BzID0gcHJvcHMubWF0Y2goIHJub3RodG1sd2hpdGUgKTtcblx0XHR9XG5cblx0XHR2YXIgcHJvcCxcblx0XHRcdGluZGV4ID0gMCxcblx0XHRcdGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuXHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRwcm9wID0gcHJvcHNbIGluZGV4IF07XG5cdFx0XHRBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXSA9IEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdIHx8IFtdO1xuXHRcdFx0QW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0udW5zaGlmdCggY2FsbGJhY2sgKTtcblx0XHR9XG5cdH0sXG5cblx0cHJlZmlsdGVyczogWyBkZWZhdWx0UHJlZmlsdGVyIF0sXG5cblx0cHJlZmlsdGVyOiBmdW5jdGlvbiggY2FsbGJhY2ssIHByZXBlbmQgKSB7XG5cdFx0aWYgKCBwcmVwZW5kICkge1xuXHRcdFx0QW5pbWF0aW9uLnByZWZpbHRlcnMudW5zaGlmdCggY2FsbGJhY2sgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0QW5pbWF0aW9uLnByZWZpbHRlcnMucHVzaCggY2FsbGJhY2sgKTtcblx0XHR9XG5cdH1cbn0gKTtcblxualF1ZXJ5LnNwZWVkID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGZuICkge1xuXHR2YXIgb3B0ID0gc3BlZWQgJiYgdHlwZW9mIHNwZWVkID09PSBcIm9iamVjdFwiID8galF1ZXJ5LmV4dGVuZCgge30sIHNwZWVkICkgOiB7XG5cdFx0Y29tcGxldGU6IGZuIHx8ICFmbiAmJiBlYXNpbmcgfHxcblx0XHRcdGlzRnVuY3Rpb24oIHNwZWVkICkgJiYgc3BlZWQsXG5cdFx0ZHVyYXRpb246IHNwZWVkLFxuXHRcdGVhc2luZzogZm4gJiYgZWFzaW5nIHx8IGVhc2luZyAmJiAhaXNGdW5jdGlvbiggZWFzaW5nICkgJiYgZWFzaW5nXG5cdH07XG5cblx0Ly8gR28gdG8gdGhlIGVuZCBzdGF0ZSBpZiBmeCBhcmUgb2ZmXG5cdGlmICggalF1ZXJ5LmZ4Lm9mZiApIHtcblx0XHRvcHQuZHVyYXRpb24gPSAwO1xuXG5cdH0gZWxzZSB7XG5cdFx0aWYgKCB0eXBlb2Ygb3B0LmR1cmF0aW9uICE9PSBcIm51bWJlclwiICkge1xuXHRcdFx0aWYgKCBvcHQuZHVyYXRpb24gaW4galF1ZXJ5LmZ4LnNwZWVkcyApIHtcblx0XHRcdFx0b3B0LmR1cmF0aW9uID0galF1ZXJ5LmZ4LnNwZWVkc1sgb3B0LmR1cmF0aW9uIF07XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG9wdC5kdXJhdGlvbiA9IGpRdWVyeS5meC5zcGVlZHMuX2RlZmF1bHQ7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gTm9ybWFsaXplIG9wdC5xdWV1ZSAtIHRydWUvdW5kZWZpbmVkL251bGwgLT4gXCJmeFwiXG5cdGlmICggb3B0LnF1ZXVlID09IG51bGwgfHwgb3B0LnF1ZXVlID09PSB0cnVlICkge1xuXHRcdG9wdC5xdWV1ZSA9IFwiZnhcIjtcblx0fVxuXG5cdC8vIFF1ZXVlaW5nXG5cdG9wdC5vbGQgPSBvcHQuY29tcGxldGU7XG5cblx0b3B0LmNvbXBsZXRlID0gZnVuY3Rpb24oKSB7XG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBvcHQub2xkICkgKSB7XG5cdFx0XHRvcHQub2xkLmNhbGwoIHRoaXMgKTtcblx0XHR9XG5cblx0XHRpZiAoIG9wdC5xdWV1ZSApIHtcblx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCBvcHQucXVldWUgKTtcblx0XHR9XG5cdH07XG5cblx0cmV0dXJuIG9wdDtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZmFkZVRvOiBmdW5jdGlvbiggc3BlZWQsIHRvLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXG5cdFx0Ly8gU2hvdyBhbnkgaGlkZGVuIGVsZW1lbnRzIGFmdGVyIHNldHRpbmcgb3BhY2l0eSB0byAwXG5cdFx0cmV0dXJuIHRoaXMuZmlsdGVyKCBpc0hpZGRlbldpdGhpblRyZWUgKS5jc3MoIFwib3BhY2l0eVwiLCAwICkuc2hvdygpXG5cblx0XHRcdC8vIEFuaW1hdGUgdG8gdGhlIHZhbHVlIHNwZWNpZmllZFxuXHRcdFx0LmVuZCgpLmFuaW1hdGUoIHsgb3BhY2l0eTogdG8gfSwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fSxcblx0YW5pbWF0ZTogZnVuY3Rpb24oIHByb3AsIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHZhciBlbXB0eSA9IGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBwcm9wICksXG5cdFx0XHRvcHRhbGwgPSBqUXVlcnkuc3BlZWQoIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICksXG5cdFx0XHRkb0FuaW1hdGlvbiA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdC8vIE9wZXJhdGUgb24gYSBjb3B5IG9mIHByb3Agc28gcGVyLXByb3BlcnR5IGVhc2luZyB3b24ndCBiZSBsb3N0XG5cdFx0XHRcdHZhciBhbmltID0gQW5pbWF0aW9uKCB0aGlzLCBqUXVlcnkuZXh0ZW5kKCB7fSwgcHJvcCApLCBvcHRhbGwgKTtcblxuXHRcdFx0XHQvLyBFbXB0eSBhbmltYXRpb25zLCBvciBmaW5pc2hpbmcgcmVzb2x2ZXMgaW1tZWRpYXRlbHlcblx0XHRcdFx0aWYgKCBlbXB0eSB8fCBkYXRhUHJpdi5nZXQoIHRoaXMsIFwiZmluaXNoXCIgKSApIHtcblx0XHRcdFx0XHRhbmltLnN0b3AoIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHRcdGRvQW5pbWF0aW9uLmZpbmlzaCA9IGRvQW5pbWF0aW9uO1xuXG5cdFx0cmV0dXJuIGVtcHR5IHx8IG9wdGFsbC5xdWV1ZSA9PT0gZmFsc2UgP1xuXHRcdFx0dGhpcy5lYWNoKCBkb0FuaW1hdGlvbiApIDpcblx0XHRcdHRoaXMucXVldWUoIG9wdGFsbC5xdWV1ZSwgZG9BbmltYXRpb24gKTtcblx0fSxcblx0c3RvcDogZnVuY3Rpb24oIHR5cGUsIGNsZWFyUXVldWUsIGdvdG9FbmQgKSB7XG5cdFx0dmFyIHN0b3BRdWV1ZSA9IGZ1bmN0aW9uKCBob29rcyApIHtcblx0XHRcdHZhciBzdG9wID0gaG9va3Muc3RvcDtcblx0XHRcdGRlbGV0ZSBob29rcy5zdG9wO1xuXHRcdFx0c3RvcCggZ290b0VuZCApO1xuXHRcdH07XG5cblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0Z290b0VuZCA9IGNsZWFyUXVldWU7XG5cdFx0XHRjbGVhclF1ZXVlID0gdHlwZTtcblx0XHRcdHR5cGUgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGlmICggY2xlYXJRdWV1ZSAmJiB0eXBlICE9PSBmYWxzZSApIHtcblx0XHRcdHRoaXMucXVldWUoIHR5cGUgfHwgXCJmeFwiLCBbXSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGRlcXVldWUgPSB0cnVlLFxuXHRcdFx0XHRpbmRleCA9IHR5cGUgIT0gbnVsbCAmJiB0eXBlICsgXCJxdWV1ZUhvb2tzXCIsXG5cdFx0XHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnMsXG5cdFx0XHRcdGRhdGEgPSBkYXRhUHJpdi5nZXQoIHRoaXMgKTtcblxuXHRcdFx0aWYgKCBpbmRleCApIHtcblx0XHRcdFx0aWYgKCBkYXRhWyBpbmRleCBdICYmIGRhdGFbIGluZGV4IF0uc3RvcCApIHtcblx0XHRcdFx0XHRzdG9wUXVldWUoIGRhdGFbIGluZGV4IF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Zm9yICggaW5kZXggaW4gZGF0YSApIHtcblx0XHRcdFx0XHRpZiAoIGRhdGFbIGluZGV4IF0gJiYgZGF0YVsgaW5kZXggXS5zdG9wICYmIHJydW4udGVzdCggaW5kZXggKSApIHtcblx0XHRcdFx0XHRcdHN0b3BRdWV1ZSggZGF0YVsgaW5kZXggXSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRmb3IgKCBpbmRleCA9IHRpbWVycy5sZW5ndGg7IGluZGV4LS07ICkge1xuXHRcdFx0XHRpZiAoIHRpbWVyc1sgaW5kZXggXS5lbGVtID09PSB0aGlzICYmXG5cdFx0XHRcdFx0KCB0eXBlID09IG51bGwgfHwgdGltZXJzWyBpbmRleCBdLnF1ZXVlID09PSB0eXBlICkgKSB7XG5cblx0XHRcdFx0XHR0aW1lcnNbIGluZGV4IF0uYW5pbS5zdG9wKCBnb3RvRW5kICk7XG5cdFx0XHRcdFx0ZGVxdWV1ZSA9IGZhbHNlO1xuXHRcdFx0XHRcdHRpbWVycy5zcGxpY2UoIGluZGV4LCAxICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RhcnQgdGhlIG5leHQgaW4gdGhlIHF1ZXVlIGlmIHRoZSBsYXN0IHN0ZXAgd2Fzbid0IGZvcmNlZC5cblx0XHRcdC8vIFRpbWVycyBjdXJyZW50bHkgd2lsbCBjYWxsIHRoZWlyIGNvbXBsZXRlIGNhbGxiYWNrcywgd2hpY2hcblx0XHRcdC8vIHdpbGwgZGVxdWV1ZSBidXQgb25seSBpZiB0aGV5IHdlcmUgZ290b0VuZC5cblx0XHRcdGlmICggZGVxdWV1ZSB8fCAhZ290b0VuZCApIHtcblx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cdGZpbmlzaDogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0aWYgKCB0eXBlICE9PSBmYWxzZSApIHtcblx0XHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgaW5kZXgsXG5cdFx0XHRcdGRhdGEgPSBkYXRhUHJpdi5nZXQoIHRoaXMgKSxcblx0XHRcdFx0cXVldWUgPSBkYXRhWyB0eXBlICsgXCJxdWV1ZVwiIF0sXG5cdFx0XHRcdGhvb2tzID0gZGF0YVsgdHlwZSArIFwicXVldWVIb29rc1wiIF0sXG5cdFx0XHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnMsXG5cdFx0XHRcdGxlbmd0aCA9IHF1ZXVlID8gcXVldWUubGVuZ3RoIDogMDtcblxuXHRcdFx0Ly8gRW5hYmxlIGZpbmlzaGluZyBmbGFnIG9uIHByaXZhdGUgZGF0YVxuXHRcdFx0ZGF0YS5maW5pc2ggPSB0cnVlO1xuXG5cdFx0XHQvLyBFbXB0eSB0aGUgcXVldWUgZmlyc3Rcblx0XHRcdGpRdWVyeS5xdWV1ZSggdGhpcywgdHlwZSwgW10gKTtcblxuXHRcdFx0aWYgKCBob29rcyAmJiBob29rcy5zdG9wICkge1xuXHRcdFx0XHRob29rcy5zdG9wLmNhbGwoIHRoaXMsIHRydWUgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTG9vayBmb3IgYW55IGFjdGl2ZSBhbmltYXRpb25zLCBhbmQgZmluaXNoIHRoZW1cblx0XHRcdGZvciAoIGluZGV4ID0gdGltZXJzLmxlbmd0aDsgaW5kZXgtLTsgKSB7XG5cdFx0XHRcdGlmICggdGltZXJzWyBpbmRleCBdLmVsZW0gPT09IHRoaXMgJiYgdGltZXJzWyBpbmRleCBdLnF1ZXVlID09PSB0eXBlICkge1xuXHRcdFx0XHRcdHRpbWVyc1sgaW5kZXggXS5hbmltLnN0b3AoIHRydWUgKTtcblx0XHRcdFx0XHR0aW1lcnMuc3BsaWNlKCBpbmRleCwgMSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIExvb2sgZm9yIGFueSBhbmltYXRpb25zIGluIHRoZSBvbGQgcXVldWUgYW5kIGZpbmlzaCB0aGVtXG5cdFx0XHRmb3IgKCBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0XHRpZiAoIHF1ZXVlWyBpbmRleCBdICYmIHF1ZXVlWyBpbmRleCBdLmZpbmlzaCApIHtcblx0XHRcdFx0XHRxdWV1ZVsgaW5kZXggXS5maW5pc2guY2FsbCggdGhpcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFR1cm4gb2ZmIGZpbmlzaGluZyBmbGFnXG5cdFx0XHRkZWxldGUgZGF0YS5maW5pc2g7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCBbIFwidG9nZ2xlXCIsIFwic2hvd1wiLCBcImhpZGVcIiBdLCBmdW5jdGlvbiggaSwgbmFtZSApIHtcblx0dmFyIGNzc0ZuID0galF1ZXJ5LmZuWyBuYW1lIF07XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBzcGVlZCA9PSBudWxsIHx8IHR5cGVvZiBzcGVlZCA9PT0gXCJib29sZWFuXCIgP1xuXHRcdFx0Y3NzRm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApIDpcblx0XHRcdHRoaXMuYW5pbWF0ZSggZ2VuRngoIG5hbWUsIHRydWUgKSwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fTtcbn0gKTtcblxuLy8gR2VuZXJhdGUgc2hvcnRjdXRzIGZvciBjdXN0b20gYW5pbWF0aW9uc1xualF1ZXJ5LmVhY2goIHtcblx0c2xpZGVEb3duOiBnZW5GeCggXCJzaG93XCIgKSxcblx0c2xpZGVVcDogZ2VuRngoIFwiaGlkZVwiICksXG5cdHNsaWRlVG9nZ2xlOiBnZW5GeCggXCJ0b2dnbGVcIiApLFxuXHRmYWRlSW46IHsgb3BhY2l0eTogXCJzaG93XCIgfSxcblx0ZmFkZU91dDogeyBvcGFjaXR5OiBcImhpZGVcIiB9LFxuXHRmYWRlVG9nZ2xlOiB7IG9wYWNpdHk6IFwidG9nZ2xlXCIgfVxufSwgZnVuY3Rpb24oIG5hbWUsIHByb3BzICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gdGhpcy5hbmltYXRlKCBwcm9wcywgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fTtcbn0gKTtcblxualF1ZXJ5LnRpbWVycyA9IFtdO1xualF1ZXJ5LmZ4LnRpY2sgPSBmdW5jdGlvbigpIHtcblx0dmFyIHRpbWVyLFxuXHRcdGkgPSAwLFxuXHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnM7XG5cblx0ZnhOb3cgPSBEYXRlLm5vdygpO1xuXG5cdGZvciAoIDsgaSA8IHRpbWVycy5sZW5ndGg7IGkrKyApIHtcblx0XHR0aW1lciA9IHRpbWVyc1sgaSBdO1xuXG5cdFx0Ly8gUnVuIHRoZSB0aW1lciBhbmQgc2FmZWx5IHJlbW92ZSBpdCB3aGVuIGRvbmUgKGFsbG93aW5nIGZvciBleHRlcm5hbCByZW1vdmFsKVxuXHRcdGlmICggIXRpbWVyKCkgJiYgdGltZXJzWyBpIF0gPT09IHRpbWVyICkge1xuXHRcdFx0dGltZXJzLnNwbGljZSggaS0tLCAxICk7XG5cdFx0fVxuXHR9XG5cblx0aWYgKCAhdGltZXJzLmxlbmd0aCApIHtcblx0XHRqUXVlcnkuZnguc3RvcCgpO1xuXHR9XG5cdGZ4Tm93ID0gdW5kZWZpbmVkO1xufTtcblxualF1ZXJ5LmZ4LnRpbWVyID0gZnVuY3Rpb24oIHRpbWVyICkge1xuXHRqUXVlcnkudGltZXJzLnB1c2goIHRpbWVyICk7XG5cdGpRdWVyeS5meC5zdGFydCgpO1xufTtcblxualF1ZXJ5LmZ4LmludGVydmFsID0gMTM7XG5qUXVlcnkuZnguc3RhcnQgPSBmdW5jdGlvbigpIHtcblx0aWYgKCBpblByb2dyZXNzICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdGluUHJvZ3Jlc3MgPSB0cnVlO1xuXHRzY2hlZHVsZSgpO1xufTtcblxualF1ZXJ5LmZ4LnN0b3AgPSBmdW5jdGlvbigpIHtcblx0aW5Qcm9ncmVzcyA9IG51bGw7XG59O1xuXG5qUXVlcnkuZnguc3BlZWRzID0ge1xuXHRzbG93OiA2MDAsXG5cdGZhc3Q6IDIwMCxcblxuXHQvLyBEZWZhdWx0IHNwZWVkXG5cdF9kZWZhdWx0OiA0MDBcbn07XG5cblxuLy8gQmFzZWQgb2ZmIG9mIHRoZSBwbHVnaW4gYnkgQ2xpbnQgSGVsZmVycywgd2l0aCBwZXJtaXNzaW9uLlxuLy8gaHR0cHM6Ly93ZWIuYXJjaGl2ZS5vcmcvd2ViLzIwMTAwMzI0MDE0NzQ3L2h0dHA6Ly9ibGluZHNpZ25hbHMuY29tL2luZGV4LnBocC8yMDA5LzA3L2pxdWVyeS1kZWxheS9cbmpRdWVyeS5mbi5kZWxheSA9IGZ1bmN0aW9uKCB0aW1lLCB0eXBlICkge1xuXHR0aW1lID0galF1ZXJ5LmZ4ID8galF1ZXJ5LmZ4LnNwZWVkc1sgdGltZSBdIHx8IHRpbWUgOiB0aW1lO1xuXHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cblx0cmV0dXJuIHRoaXMucXVldWUoIHR5cGUsIGZ1bmN0aW9uKCBuZXh0LCBob29rcyApIHtcblx0XHR2YXIgdGltZW91dCA9IHdpbmRvdy5zZXRUaW1lb3V0KCBuZXh0LCB0aW1lICk7XG5cdFx0aG9va3Muc3RvcCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0d2luZG93LmNsZWFyVGltZW91dCggdGltZW91dCApO1xuXHRcdH07XG5cdH0gKTtcbn07XG5cblxuKCBmdW5jdGlvbigpIHtcblx0dmFyIGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICksXG5cdFx0c2VsZWN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJzZWxlY3RcIiApLFxuXHRcdG9wdCA9IHNlbGVjdC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJvcHRpb25cIiApICk7XG5cblx0aW5wdXQudHlwZSA9IFwiY2hlY2tib3hcIjtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4zIG9ubHlcblx0Ly8gRGVmYXVsdCB2YWx1ZSBmb3IgYSBjaGVja2JveCBzaG91bGQgYmUgXCJvblwiXG5cdHN1cHBvcnQuY2hlY2tPbiA9IGlucHV0LnZhbHVlICE9PSBcIlwiO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHQvLyBNdXN0IGFjY2VzcyBzZWxlY3RlZEluZGV4IHRvIG1ha2UgZGVmYXVsdCBvcHRpb25zIHNlbGVjdFxuXHRzdXBwb3J0Lm9wdFNlbGVjdGVkID0gb3B0LnNlbGVjdGVkO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHQvLyBBbiBpbnB1dCBsb3NlcyBpdHMgdmFsdWUgYWZ0ZXIgYmVjb21pbmcgYSByYWRpb1xuXHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xuXHRpbnB1dC52YWx1ZSA9IFwidFwiO1xuXHRpbnB1dC50eXBlID0gXCJyYWRpb1wiO1xuXHRzdXBwb3J0LnJhZGlvVmFsdWUgPSBpbnB1dC52YWx1ZSA9PT0gXCJ0XCI7XG59ICkoKTtcblxuXG52YXIgYm9vbEhvb2ssXG5cdGF0dHJIYW5kbGUgPSBqUXVlcnkuZXhwci5hdHRySGFuZGxlO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGF0dHI6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBqUXVlcnkuYXR0ciwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XG5cdH0sXG5cblx0cmVtb3ZlQXR0cjogZnVuY3Rpb24oIG5hbWUgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggdGhpcywgbmFtZSApO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdGF0dHI6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHR2YXIgcmV0LCBob29rcyxcblx0XHRcdG5UeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRcdC8vIERvbid0IGdldC9zZXQgYXR0cmlidXRlcyBvbiB0ZXh0LCBjb21tZW50IGFuZCBhdHRyaWJ1dGUgbm9kZXNcblx0XHRpZiAoIG5UeXBlID09PSAzIHx8IG5UeXBlID09PSA4IHx8IG5UeXBlID09PSAyICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIEZhbGxiYWNrIHRvIHByb3Agd2hlbiBhdHRyaWJ1dGVzIGFyZSBub3Qgc3VwcG9ydGVkXG5cdFx0aWYgKCB0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGUgPT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LnByb3AoIGVsZW0sIG5hbWUsIHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0Ly8gQXR0cmlidXRlIGhvb2tzIGFyZSBkZXRlcm1pbmVkIGJ5IHRoZSBsb3dlcmNhc2UgdmVyc2lvblxuXHRcdC8vIEdyYWIgbmVjZXNzYXJ5IGhvb2sgaWYgb25lIGlzIGRlZmluZWRcblx0XHRpZiAoIG5UeXBlICE9PSAxIHx8ICFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblx0XHRcdGhvb2tzID0galF1ZXJ5LmF0dHJIb29rc1sgbmFtZS50b0xvd2VyQ2FzZSgpIF0gfHxcblx0XHRcdFx0KCBqUXVlcnkuZXhwci5tYXRjaC5ib29sLnRlc3QoIG5hbWUgKSA/IGJvb2xIb29rIDogdW5kZWZpbmVkICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gbnVsbCApIHtcblx0XHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIGVsZW0sIG5hbWUgKTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGhvb2tzICYmIFwic2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0KCByZXQgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBuYW1lICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggbmFtZSwgdmFsdWUgKyBcIlwiICk7XG5cdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmICggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBuYW1lICkgKSAhPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXG5cdFx0cmV0ID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgbmFtZSApO1xuXG5cdFx0Ly8gTm9uLWV4aXN0ZW50IGF0dHJpYnV0ZXMgcmV0dXJuIG51bGwsIHdlIG5vcm1hbGl6ZSB0byB1bmRlZmluZWRcblx0XHRyZXR1cm4gcmV0ID09IG51bGwgPyB1bmRlZmluZWQgOiByZXQ7XG5cdH0sXG5cblx0YXR0ckhvb2tzOiB7XG5cdFx0dHlwZToge1xuXHRcdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRcdGlmICggIXN1cHBvcnQucmFkaW9WYWx1ZSAmJiB2YWx1ZSA9PT0gXCJyYWRpb1wiICYmXG5cdFx0XHRcdFx0bm9kZU5hbWUoIGVsZW0sIFwiaW5wdXRcIiApICkge1xuXHRcdFx0XHRcdHZhciB2YWwgPSBlbGVtLnZhbHVlO1xuXHRcdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgdmFsdWUgKTtcblx0XHRcdFx0XHRpZiAoIHZhbCApIHtcblx0XHRcdFx0XHRcdGVsZW0udmFsdWUgPSB2YWw7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHRyZW1vdmVBdHRyOiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0dmFyIG5hbWUsXG5cdFx0XHRpID0gMCxcblxuXHRcdFx0Ly8gQXR0cmlidXRlIG5hbWVzIGNhbiBjb250YWluIG5vbi1IVE1MIHdoaXRlc3BhY2UgY2hhcmFjdGVyc1xuXHRcdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc3ludGF4Lmh0bWwjYXR0cmlidXRlcy0yXG5cdFx0XHRhdHRyTmFtZXMgPSB2YWx1ZSAmJiB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApO1xuXG5cdFx0aWYgKCBhdHRyTmFtZXMgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdHdoaWxlICggKCBuYW1lID0gYXR0ck5hbWVzWyBpKysgXSApICkge1xuXHRcdFx0XHRlbGVtLnJlbW92ZUF0dHJpYnV0ZSggbmFtZSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufSApO1xuXG4vLyBIb29rcyBmb3IgYm9vbGVhbiBhdHRyaWJ1dGVzXG5ib29sSG9vayA9IHtcblx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUsIG5hbWUgKSB7XG5cdFx0aWYgKCB2YWx1ZSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdC8vIFJlbW92ZSBib29sZWFuIGF0dHJpYnV0ZXMgd2hlbiBzZXQgdG8gZmFsc2Vcblx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCBlbGVtLCBuYW1lICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBuYW1lLCBuYW1lICk7XG5cdFx0fVxuXHRcdHJldHVybiBuYW1lO1xuXHR9XG59O1xuXG5qUXVlcnkuZWFjaCggalF1ZXJ5LmV4cHIubWF0Y2guYm9vbC5zb3VyY2UubWF0Y2goIC9cXHcrL2cgKSwgZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cdHZhciBnZXR0ZXIgPSBhdHRySGFuZGxlWyBuYW1lIF0gfHwgalF1ZXJ5LmZpbmQuYXR0cjtcblxuXHRhdHRySGFuZGxlWyBuYW1lIF0gPSBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0dmFyIHJldCwgaGFuZGxlLFxuXHRcdFx0bG93ZXJjYXNlTmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcblxuXHRcdGlmICggIWlzWE1MICkge1xuXG5cdFx0XHQvLyBBdm9pZCBhbiBpbmZpbml0ZSBsb29wIGJ5IHRlbXBvcmFyaWx5IHJlbW92aW5nIHRoaXMgZnVuY3Rpb24gZnJvbSB0aGUgZ2V0dGVyXG5cdFx0XHRoYW5kbGUgPSBhdHRySGFuZGxlWyBsb3dlcmNhc2VOYW1lIF07XG5cdFx0XHRhdHRySGFuZGxlWyBsb3dlcmNhc2VOYW1lIF0gPSByZXQ7XG5cdFx0XHRyZXQgPSBnZXR0ZXIoIGVsZW0sIG5hbWUsIGlzWE1MICkgIT0gbnVsbCA/XG5cdFx0XHRcdGxvd2VyY2FzZU5hbWUgOlxuXHRcdFx0XHRudWxsO1xuXHRcdFx0YXR0ckhhbmRsZVsgbG93ZXJjYXNlTmFtZSBdID0gaGFuZGxlO1xuXHRcdH1cblx0XHRyZXR1cm4gcmV0O1xuXHR9O1xufSApO1xuXG5cblxuXG52YXIgcmZvY3VzYWJsZSA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbikkL2ksXG5cdHJjbGlja2FibGUgPSAvXig/OmF8YXJlYSkkL2k7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0cHJvcDogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGpRdWVyeS5wcm9wLCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fSxcblxuXHRyZW1vdmVQcm9wOiBmdW5jdGlvbiggbmFtZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGRlbGV0ZSB0aGlzWyBqUXVlcnkucHJvcEZpeFsgbmFtZSBdIHx8IG5hbWUgXTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXHRwcm9wOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0dmFyIHJldCwgaG9va3MsXG5cdFx0XHRuVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0XHQvLyBEb24ndCBnZXQvc2V0IHByb3BlcnRpZXMgb24gdGV4dCwgY29tbWVudCBhbmQgYXR0cmlidXRlIG5vZGVzXG5cdFx0aWYgKCBuVHlwZSA9PT0gMyB8fCBuVHlwZSA9PT0gOCB8fCBuVHlwZSA9PT0gMiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIG5UeXBlICE9PSAxIHx8ICFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblxuXHRcdFx0Ly8gRml4IG5hbWUgYW5kIGF0dGFjaCBob29rc1xuXHRcdFx0bmFtZSA9IGpRdWVyeS5wcm9wRml4WyBuYW1lIF0gfHwgbmFtZTtcblx0XHRcdGhvb2tzID0galF1ZXJ5LnByb3BIb29rc1sgbmFtZSBdO1xuXHRcdH1cblxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggaG9va3MgJiYgXCJzZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHQoIHJldCA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIG5hbWUgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiAoIGVsZW1bIG5hbWUgXSA9IHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmICggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBuYW1lICkgKSAhPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGVsZW1bIG5hbWUgXTtcblx0fSxcblxuXHRwcm9wSG9va3M6IHtcblx0XHR0YWJJbmRleDoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdFx0XHRcdC8vIGVsZW0udGFiSW5kZXggZG9lc24ndCBhbHdheXMgcmV0dXJuIHRoZVxuXHRcdFx0XHQvLyBjb3JyZWN0IHZhbHVlIHdoZW4gaXQgaGFzbid0IGJlZW4gZXhwbGljaXRseSBzZXRcblx0XHRcdFx0Ly8gaHR0cHM6Ly93ZWIuYXJjaGl2ZS5vcmcvd2ViLzIwMTQxMTE2MjMzMzQ3L2h0dHA6Ly9mbHVpZHByb2plY3Qub3JnL2Jsb2cvMjAwOC8wMS8wOS9nZXR0aW5nLXNldHRpbmctYW5kLXJlbW92aW5nLXRhYmluZGV4LXZhbHVlcy13aXRoLWphdmFzY3JpcHQvXG5cdFx0XHRcdC8vIFVzZSBwcm9wZXIgYXR0cmlidXRlIHJldHJpZXZhbCgjMTIwNzIpXG5cdFx0XHRcdHZhciB0YWJpbmRleCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIFwidGFiaW5kZXhcIiApO1xuXG5cdFx0XHRcdGlmICggdGFiaW5kZXggKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHBhcnNlSW50KCB0YWJpbmRleCwgMTAgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChcblx0XHRcdFx0XHRyZm9jdXNhYmxlLnRlc3QoIGVsZW0ubm9kZU5hbWUgKSB8fFxuXHRcdFx0XHRcdHJjbGlja2FibGUudGVzdCggZWxlbS5ub2RlTmFtZSApICYmXG5cdFx0XHRcdFx0ZWxlbS5ocmVmXG5cdFx0XHRcdCkge1xuXHRcdFx0XHRcdHJldHVybiAwO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHRwcm9wRml4OiB7XG5cdFx0XCJmb3JcIjogXCJodG1sRm9yXCIsXG5cdFx0XCJjbGFzc1wiOiBcImNsYXNzTmFtZVwiXG5cdH1cbn0gKTtcblxuLy8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG4vLyBBY2Nlc3NpbmcgdGhlIHNlbGVjdGVkSW5kZXggcHJvcGVydHlcbi8vIGZvcmNlcyB0aGUgYnJvd3NlciB0byByZXNwZWN0IHNldHRpbmcgc2VsZWN0ZWRcbi8vIG9uIHRoZSBvcHRpb25cbi8vIFRoZSBnZXR0ZXIgZW5zdXJlcyBhIGRlZmF1bHQgb3B0aW9uIGlzIHNlbGVjdGVkXG4vLyB3aGVuIGluIGFuIG9wdGdyb3VwXG4vLyBlc2xpbnQgcnVsZSBcIm5vLXVudXNlZC1leHByZXNzaW9uc1wiIGlzIGRpc2FibGVkIGZvciB0aGlzIGNvZGVcbi8vIHNpbmNlIGl0IGNvbnNpZGVycyBzdWNoIGFjY2Vzc2lvbnMgbm9vcFxuaWYgKCAhc3VwcG9ydC5vcHRTZWxlY3RlZCApIHtcblx0alF1ZXJ5LnByb3BIb29rcy5zZWxlY3RlZCA9IHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHQvKiBlc2xpbnQgbm8tdW51c2VkLWV4cHJlc3Npb25zOiBcIm9mZlwiICovXG5cblx0XHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0XHRpZiAoIHBhcmVudCAmJiBwYXJlbnQucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0cGFyZW50LnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdH1cblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0LyogZXNsaW50IG5vLXVudXNlZC1leHByZXNzaW9uczogXCJvZmZcIiAqL1xuXG5cdFx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cdFx0XHRcdHBhcmVudC5zZWxlY3RlZEluZGV4O1xuXG5cdFx0XHRcdGlmICggcGFyZW50LnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdFx0cGFyZW50LnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn1cblxualF1ZXJ5LmVhY2goIFtcblx0XCJ0YWJJbmRleFwiLFxuXHRcInJlYWRPbmx5XCIsXG5cdFwibWF4TGVuZ3RoXCIsXG5cdFwiY2VsbFNwYWNpbmdcIixcblx0XCJjZWxsUGFkZGluZ1wiLFxuXHRcInJvd1NwYW5cIixcblx0XCJjb2xTcGFuXCIsXG5cdFwidXNlTWFwXCIsXG5cdFwiZnJhbWVCb3JkZXJcIixcblx0XCJjb250ZW50RWRpdGFibGVcIlxuXSwgZnVuY3Rpb24oKSB7XG5cdGpRdWVyeS5wcm9wRml4WyB0aGlzLnRvTG93ZXJDYXNlKCkgXSA9IHRoaXM7XG59ICk7XG5cblxuXG5cblx0Ly8gU3RyaXAgYW5kIGNvbGxhcHNlIHdoaXRlc3BhY2UgYWNjb3JkaW5nIHRvIEhUTUwgc3BlY1xuXHQvLyBodHRwczovL2luZnJhLnNwZWMud2hhdHdnLm9yZy8jc3RyaXAtYW5kLWNvbGxhcHNlLWFzY2lpLXdoaXRlc3BhY2Vcblx0ZnVuY3Rpb24gc3RyaXBBbmRDb2xsYXBzZSggdmFsdWUgKSB7XG5cdFx0dmFyIHRva2VucyA9IHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cdFx0cmV0dXJuIHRva2Vucy5qb2luKCBcIiBcIiApO1xuXHR9XG5cblxuZnVuY3Rpb24gZ2V0Q2xhc3MoIGVsZW0gKSB7XG5cdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSAmJiBlbGVtLmdldEF0dHJpYnV0ZSggXCJjbGFzc1wiICkgfHwgXCJcIjtcbn1cblxuZnVuY3Rpb24gY2xhc3Nlc1RvQXJyYXkoIHZhbHVlICkge1xuXHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cdFx0cmV0dXJuIHZhbHVlO1xuXHR9XG5cdGlmICggdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdO1xuXHR9XG5cdHJldHVybiBbXTtcbn1cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRhZGRDbGFzczogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBjbGFzc2VzLCBlbGVtLCBjdXIsIGN1clZhbHVlLCBjbGF6eiwgaiwgZmluYWxWYWx1ZSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGogKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLmFkZENsYXNzKCB2YWx1ZS5jYWxsKCB0aGlzLCBqLCBnZXRDbGFzcyggdGhpcyApICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRjbGFzc2VzID0gY2xhc3Nlc1RvQXJyYXkoIHZhbHVlICk7XG5cblx0XHRpZiAoIGNsYXNzZXMubGVuZ3RoICkge1xuXHRcdFx0d2hpbGUgKCAoIGVsZW0gPSB0aGlzWyBpKysgXSApICkge1xuXHRcdFx0XHRjdXJWYWx1ZSA9IGdldENsYXNzKCBlbGVtICk7XG5cdFx0XHRcdGN1ciA9IGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgKCBcIiBcIiArIHN0cmlwQW5kQ29sbGFwc2UoIGN1clZhbHVlICkgKyBcIiBcIiApO1xuXG5cdFx0XHRcdGlmICggY3VyICkge1xuXHRcdFx0XHRcdGogPSAwO1xuXHRcdFx0XHRcdHdoaWxlICggKCBjbGF6eiA9IGNsYXNzZXNbIGorKyBdICkgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGN1ci5pbmRleE9mKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIgKSA8IDAgKSB7XG5cdFx0XHRcdFx0XHRcdGN1ciArPSBjbGF6eiArIFwiIFwiO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIE9ubHkgYXNzaWduIGlmIGRpZmZlcmVudCB0byBhdm9pZCB1bm5lZWRlZCByZW5kZXJpbmcuXG5cdFx0XHRcdFx0ZmluYWxWYWx1ZSA9IHN0cmlwQW5kQ29sbGFwc2UoIGN1ciApO1xuXHRcdFx0XHRcdGlmICggY3VyVmFsdWUgIT09IGZpbmFsVmFsdWUgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLCBmaW5hbFZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0cmVtb3ZlQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgY2xhc3NlcywgZWxlbSwgY3VyLCBjdXJWYWx1ZSwgY2xhenosIGosIGZpbmFsVmFsdWUsXG5cdFx0XHRpID0gMDtcblxuXHRcdGlmICggaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBqICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5yZW1vdmVDbGFzcyggdmFsdWUuY2FsbCggdGhpcywgaiwgZ2V0Q2xhc3MoIHRoaXMgKSApICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0aWYgKCAhYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiB0aGlzLmF0dHIoIFwiY2xhc3NcIiwgXCJcIiApO1xuXHRcdH1cblxuXHRcdGNsYXNzZXMgPSBjbGFzc2VzVG9BcnJheSggdmFsdWUgKTtcblxuXHRcdGlmICggY2xhc3Nlcy5sZW5ndGggKSB7XG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IHRoaXNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdGN1clZhbHVlID0gZ2V0Q2xhc3MoIGVsZW0gKTtcblxuXHRcdFx0XHQvLyBUaGlzIGV4cHJlc3Npb24gaXMgaGVyZSBmb3IgYmV0dGVyIGNvbXByZXNzaWJpbGl0eSAoc2VlIGFkZENsYXNzKVxuXHRcdFx0XHRjdXIgPSBlbGVtLm5vZGVUeXBlID09PSAxICYmICggXCIgXCIgKyBzdHJpcEFuZENvbGxhcHNlKCBjdXJWYWx1ZSApICsgXCIgXCIgKTtcblxuXHRcdFx0XHRpZiAoIGN1ciApIHtcblx0XHRcdFx0XHRqID0gMDtcblx0XHRcdFx0XHR3aGlsZSAoICggY2xhenogPSBjbGFzc2VzWyBqKysgXSApICkge1xuXG5cdFx0XHRcdFx0XHQvLyBSZW1vdmUgKmFsbCogaW5zdGFuY2VzXG5cdFx0XHRcdFx0XHR3aGlsZSAoIGN1ci5pbmRleE9mKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIgKSA+IC0xICkge1xuXHRcdFx0XHRcdFx0XHRjdXIgPSBjdXIucmVwbGFjZSggXCIgXCIgKyBjbGF6eiArIFwiIFwiLCBcIiBcIiApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIE9ubHkgYXNzaWduIGlmIGRpZmZlcmVudCB0byBhdm9pZCB1bm5lZWRlZCByZW5kZXJpbmcuXG5cdFx0XHRcdFx0ZmluYWxWYWx1ZSA9IHN0cmlwQW5kQ29sbGFwc2UoIGN1ciApO1xuXHRcdFx0XHRcdGlmICggY3VyVmFsdWUgIT09IGZpbmFsVmFsdWUgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLCBmaW5hbFZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0dG9nZ2xlQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSwgc3RhdGVWYWwgKSB7XG5cdFx0dmFyIHR5cGUgPSB0eXBlb2YgdmFsdWUsXG5cdFx0XHRpc1ZhbGlkVmFsdWUgPSB0eXBlID09PSBcInN0cmluZ1wiIHx8IEFycmF5LmlzQXJyYXkoIHZhbHVlICk7XG5cblx0XHRpZiAoIHR5cGVvZiBzdGF0ZVZhbCA9PT0gXCJib29sZWFuXCIgJiYgaXNWYWxpZFZhbHVlICkge1xuXHRcdFx0cmV0dXJuIHN0YXRlVmFsID8gdGhpcy5hZGRDbGFzcyggdmFsdWUgKSA6IHRoaXMucmVtb3ZlQ2xhc3MoIHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnRvZ2dsZUNsYXNzKFxuXHRcdFx0XHRcdHZhbHVlLmNhbGwoIHRoaXMsIGksIGdldENsYXNzKCB0aGlzICksIHN0YXRlVmFsICksXG5cdFx0XHRcdFx0c3RhdGVWYWxcblx0XHRcdFx0KTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBjbGFzc05hbWUsIGksIHNlbGYsIGNsYXNzTmFtZXM7XG5cblx0XHRcdGlmICggaXNWYWxpZFZhbHVlICkge1xuXG5cdFx0XHRcdC8vIFRvZ2dsZSBpbmRpdmlkdWFsIGNsYXNzIG5hbWVzXG5cdFx0XHRcdGkgPSAwO1xuXHRcdFx0XHRzZWxmID0galF1ZXJ5KCB0aGlzICk7XG5cdFx0XHRcdGNsYXNzTmFtZXMgPSBjbGFzc2VzVG9BcnJheSggdmFsdWUgKTtcblxuXHRcdFx0XHR3aGlsZSAoICggY2xhc3NOYW1lID0gY2xhc3NOYW1lc1sgaSsrIF0gKSApIHtcblxuXHRcdFx0XHRcdC8vIENoZWNrIGVhY2ggY2xhc3NOYW1lIGdpdmVuLCBzcGFjZSBzZXBhcmF0ZWQgbGlzdFxuXHRcdFx0XHRcdGlmICggc2VsZi5oYXNDbGFzcyggY2xhc3NOYW1lICkgKSB7XG5cdFx0XHRcdFx0XHRzZWxmLnJlbW92ZUNsYXNzKCBjbGFzc05hbWUgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0c2VsZi5hZGRDbGFzcyggY2xhc3NOYW1lICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdC8vIFRvZ2dsZSB3aG9sZSBjbGFzcyBuYW1lXG5cdFx0XHR9IGVsc2UgaWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHR5cGUgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdFx0XHRjbGFzc05hbWUgPSBnZXRDbGFzcyggdGhpcyApO1xuXHRcdFx0XHRpZiAoIGNsYXNzTmFtZSApIHtcblxuXHRcdFx0XHRcdC8vIFN0b3JlIGNsYXNzTmFtZSBpZiBzZXRcblx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIHRoaXMsIFwiX19jbGFzc05hbWVfX1wiLCBjbGFzc05hbWUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIElmIHRoZSBlbGVtZW50IGhhcyBhIGNsYXNzIG5hbWUgb3IgaWYgd2UncmUgcGFzc2VkIGBmYWxzZWAsXG5cdFx0XHRcdC8vIHRoZW4gcmVtb3ZlIHRoZSB3aG9sZSBjbGFzc25hbWUgKGlmIHRoZXJlIHdhcyBvbmUsIHRoZSBhYm92ZSBzYXZlZCBpdCkuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBicmluZyBiYWNrIHdoYXRldmVyIHdhcyBwcmV2aW91c2x5IHNhdmVkIChpZiBhbnl0aGluZyksXG5cdFx0XHRcdC8vIGZhbGxpbmcgYmFjayB0byB0aGUgZW1wdHkgc3RyaW5nIGlmIG5vdGhpbmcgd2FzIHN0b3JlZC5cblx0XHRcdFx0aWYgKCB0aGlzLnNldEF0dHJpYnV0ZSApIHtcblx0XHRcdFx0XHR0aGlzLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLFxuXHRcdFx0XHRcdFx0Y2xhc3NOYW1lIHx8IHZhbHVlID09PSBmYWxzZSA/XG5cdFx0XHRcdFx0XHRcIlwiIDpcblx0XHRcdFx0XHRcdGRhdGFQcml2LmdldCggdGhpcywgXCJfX2NsYXNzTmFtZV9fXCIgKSB8fCBcIlwiXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRoYXNDbGFzczogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBjbGFzc05hbWUsIGVsZW0sXG5cdFx0XHRpID0gMDtcblxuXHRcdGNsYXNzTmFtZSA9IFwiIFwiICsgc2VsZWN0b3IgKyBcIiBcIjtcblx0XHR3aGlsZSAoICggZWxlbSA9IHRoaXNbIGkrKyBdICkgKSB7XG5cdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdFx0KCBcIiBcIiArIHN0cmlwQW5kQ29sbGFwc2UoIGdldENsYXNzKCBlbGVtICkgKSArIFwiIFwiICkuaW5kZXhPZiggY2xhc3NOYW1lICkgPiAtMSApIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn0gKTtcblxuXG5cblxudmFyIHJyZXR1cm4gPSAvXFxyL2c7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0dmFsOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dmFyIGhvb2tzLCByZXQsIHZhbHVlSXNGdW5jdGlvbixcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF07XG5cblx0XHRpZiAoICFhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0XHRob29rcyA9IGpRdWVyeS52YWxIb29rc1sgZWxlbS50eXBlIF0gfHxcblx0XHRcdFx0XHRqUXVlcnkudmFsSG9va3NbIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSBdO1xuXG5cdFx0XHRcdGlmICggaG9va3MgJiZcblx0XHRcdFx0XHRcImdldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdFx0KCByZXQgPSBob29rcy5nZXQoIGVsZW0sIFwidmFsdWVcIiApICkgIT09IHVuZGVmaW5lZFxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0ID0gZWxlbS52YWx1ZTtcblxuXHRcdFx0XHQvLyBIYW5kbGUgbW9zdCBjb21tb24gc3RyaW5nIGNhc2VzXG5cdFx0XHRcdGlmICggdHlwZW9mIHJldCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdFx0XHRyZXR1cm4gcmV0LnJlcGxhY2UoIHJyZXR1cm4sIFwiXCIgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEhhbmRsZSBjYXNlcyB3aGVyZSB2YWx1ZSBpcyBudWxsL3VuZGVmIG9yIG51bWJlclxuXHRcdFx0XHRyZXR1cm4gcmV0ID09IG51bGwgPyBcIlwiIDogcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dmFsdWVJc0Z1bmN0aW9uID0gaXNGdW5jdGlvbiggdmFsdWUgKTtcblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0dmFyIHZhbDtcblxuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlICE9PSAxICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGlmICggdmFsdWVJc0Z1bmN0aW9uICkge1xuXHRcdFx0XHR2YWwgPSB2YWx1ZS5jYWxsKCB0aGlzLCBpLCBqUXVlcnkoIHRoaXMgKS52YWwoKSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dmFsID0gdmFsdWU7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRyZWF0IG51bGwvdW5kZWZpbmVkIGFzIFwiXCI7IGNvbnZlcnQgbnVtYmVycyB0byBzdHJpbmdcblx0XHRcdGlmICggdmFsID09IG51bGwgKSB7XG5cdFx0XHRcdHZhbCA9IFwiXCI7XG5cblx0XHRcdH0gZWxzZSBpZiAoIHR5cGVvZiB2YWwgPT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRcdHZhbCArPSBcIlwiO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBBcnJheS5pc0FycmF5KCB2YWwgKSApIHtcblx0XHRcdFx0dmFsID0galF1ZXJ5Lm1hcCggdmFsLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHZhbHVlID09IG51bGwgPyBcIlwiIDogdmFsdWUgKyBcIlwiO1xuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cblx0XHRcdGhvb2tzID0galF1ZXJ5LnZhbEhvb2tzWyB0aGlzLnR5cGUgXSB8fCBqUXVlcnkudmFsSG9va3NbIHRoaXMubm9kZU5hbWUudG9Mb3dlckNhc2UoKSBdO1xuXG5cdFx0XHQvLyBJZiBzZXQgcmV0dXJucyB1bmRlZmluZWQsIGZhbGwgYmFjayB0byBub3JtYWwgc2V0dGluZ1xuXHRcdFx0aWYgKCAhaG9va3MgfHwgISggXCJzZXRcIiBpbiBob29rcyApIHx8IGhvb2tzLnNldCggdGhpcywgdmFsLCBcInZhbHVlXCIgKSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHR0aGlzLnZhbHVlID0gdmFsO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdHZhbEhvb2tzOiB7XG5cdFx0b3B0aW9uOiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHRcdHZhciB2YWwgPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBcInZhbHVlXCIgKTtcblx0XHRcdFx0cmV0dXJuIHZhbCAhPSBudWxsID9cblx0XHRcdFx0XHR2YWwgOlxuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD0xMCAtIDExIG9ubHlcblx0XHRcdFx0XHQvLyBvcHRpb24udGV4dCB0aHJvd3MgZXhjZXB0aW9ucyAoIzE0Njg2LCAjMTQ4NTgpXG5cdFx0XHRcdFx0Ly8gU3RyaXAgYW5kIGNvbGxhcHNlIHdoaXRlc3BhY2Vcblx0XHRcdFx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnLyNzdHJpcC1hbmQtY29sbGFwc2Utd2hpdGVzcGFjZVxuXHRcdFx0XHRcdHN0cmlwQW5kQ29sbGFwc2UoIGpRdWVyeS50ZXh0KCBlbGVtICkgKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdHNlbGVjdDoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIHZhbHVlLCBvcHRpb24sIGksXG5cdFx0XHRcdFx0b3B0aW9ucyA9IGVsZW0ub3B0aW9ucyxcblx0XHRcdFx0XHRpbmRleCA9IGVsZW0uc2VsZWN0ZWRJbmRleCxcblx0XHRcdFx0XHRvbmUgPSBlbGVtLnR5cGUgPT09IFwic2VsZWN0LW9uZVwiLFxuXHRcdFx0XHRcdHZhbHVlcyA9IG9uZSA/IG51bGwgOiBbXSxcblx0XHRcdFx0XHRtYXggPSBvbmUgPyBpbmRleCArIDEgOiBvcHRpb25zLmxlbmd0aDtcblxuXHRcdFx0XHRpZiAoIGluZGV4IDwgMCApIHtcblx0XHRcdFx0XHRpID0gbWF4O1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0aSA9IG9uZSA/IGluZGV4IDogMDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIExvb3AgdGhyb3VnaCBhbGwgdGhlIHNlbGVjdGVkIG9wdGlvbnNcblx0XHRcdFx0Zm9yICggOyBpIDwgbWF4OyBpKysgKSB7XG5cdFx0XHRcdFx0b3B0aW9uID0gb3B0aW9uc1sgaSBdO1xuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHRcdFx0XHQvLyBJRTgtOSBkb2Vzbid0IHVwZGF0ZSBzZWxlY3RlZCBhZnRlciBmb3JtIHJlc2V0ICgjMjU1MSlcblx0XHRcdFx0XHRpZiAoICggb3B0aW9uLnNlbGVjdGVkIHx8IGkgPT09IGluZGV4ICkgJiZcblxuXHRcdFx0XHRcdFx0XHQvLyBEb24ndCByZXR1cm4gb3B0aW9ucyB0aGF0IGFyZSBkaXNhYmxlZCBvciBpbiBhIGRpc2FibGVkIG9wdGdyb3VwXG5cdFx0XHRcdFx0XHRcdCFvcHRpb24uZGlzYWJsZWQgJiZcblx0XHRcdFx0XHRcdFx0KCAhb3B0aW9uLnBhcmVudE5vZGUuZGlzYWJsZWQgfHxcblx0XHRcdFx0XHRcdFx0XHQhbm9kZU5hbWUoIG9wdGlvbi5wYXJlbnROb2RlLCBcIm9wdGdyb3VwXCIgKSApICkge1xuXG5cdFx0XHRcdFx0XHQvLyBHZXQgdGhlIHNwZWNpZmljIHZhbHVlIGZvciB0aGUgb3B0aW9uXG5cdFx0XHRcdFx0XHR2YWx1ZSA9IGpRdWVyeSggb3B0aW9uICkudmFsKCk7XG5cblx0XHRcdFx0XHRcdC8vIFdlIGRvbid0IG5lZWQgYW4gYXJyYXkgZm9yIG9uZSBzZWxlY3RzXG5cdFx0XHRcdFx0XHRpZiAoIG9uZSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBNdWx0aS1TZWxlY3RzIHJldHVybiBhbiBhcnJheVxuXHRcdFx0XHRcdFx0dmFsdWVzLnB1c2goIHZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHZhbHVlcztcblx0XHRcdH0sXG5cblx0XHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0XHR2YXIgb3B0aW9uU2V0LCBvcHRpb24sXG5cdFx0XHRcdFx0b3B0aW9ucyA9IGVsZW0ub3B0aW9ucyxcblx0XHRcdFx0XHR2YWx1ZXMgPSBqUXVlcnkubWFrZUFycmF5KCB2YWx1ZSApLFxuXHRcdFx0XHRcdGkgPSBvcHRpb25zLmxlbmd0aDtcblxuXHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRvcHRpb24gPSBvcHRpb25zWyBpIF07XG5cblx0XHRcdFx0XHQvKiBlc2xpbnQtZGlzYWJsZSBuby1jb25kLWFzc2lnbiAqL1xuXG5cdFx0XHRcdFx0aWYgKCBvcHRpb24uc2VsZWN0ZWQgPVxuXHRcdFx0XHRcdFx0alF1ZXJ5LmluQXJyYXkoIGpRdWVyeS52YWxIb29rcy5vcHRpb24uZ2V0KCBvcHRpb24gKSwgdmFsdWVzICkgPiAtMVxuXHRcdFx0XHRcdCkge1xuXHRcdFx0XHRcdFx0b3B0aW9uU2V0ID0gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvKiBlc2xpbnQtZW5hYmxlIG5vLWNvbmQtYXNzaWduICovXG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBGb3JjZSBicm93c2VycyB0byBiZWhhdmUgY29uc2lzdGVudGx5IHdoZW4gbm9uLW1hdGNoaW5nIHZhbHVlIGlzIHNldFxuXHRcdFx0XHRpZiAoICFvcHRpb25TZXQgKSB7XG5cdFx0XHRcdFx0ZWxlbS5zZWxlY3RlZEluZGV4ID0gLTE7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHZhbHVlcztcblx0XHRcdH1cblx0XHR9XG5cdH1cbn0gKTtcblxuLy8gUmFkaW9zIGFuZCBjaGVja2JveGVzIGdldHRlci9zZXR0ZXJcbmpRdWVyeS5lYWNoKCBbIFwicmFkaW9cIiwgXCJjaGVja2JveFwiIF0sIGZ1bmN0aW9uKCkge1xuXHRqUXVlcnkudmFsSG9va3NbIHRoaXMgXSA9IHtcblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggdmFsdWUgKSApIHtcblx0XHRcdFx0cmV0dXJuICggZWxlbS5jaGVja2VkID0galF1ZXJ5LmluQXJyYXkoIGpRdWVyeSggZWxlbSApLnZhbCgpLCB2YWx1ZSApID4gLTEgKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cdGlmICggIXN1cHBvcnQuY2hlY2tPbiApIHtcblx0XHRqUXVlcnkudmFsSG9va3NbIHRoaXMgXS5nZXQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSggXCJ2YWx1ZVwiICkgPT09IG51bGwgPyBcIm9uXCIgOiBlbGVtLnZhbHVlO1xuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxuLy8gUmV0dXJuIGpRdWVyeSBmb3IgYXR0cmlidXRlcy1vbmx5IGluY2x1c2lvblxuXG5cbnN1cHBvcnQuZm9jdXNpbiA9IFwib25mb2N1c2luXCIgaW4gd2luZG93O1xuXG5cbnZhciByZm9jdXNNb3JwaCA9IC9eKD86Zm9jdXNpbmZvY3VzfGZvY3Vzb3V0Ymx1cikkLyxcblx0c3RvcFByb3BhZ2F0aW9uQ2FsbGJhY2sgPSBmdW5jdGlvbiggZSApIHtcblx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHR9O1xuXG5qUXVlcnkuZXh0ZW5kKCBqUXVlcnkuZXZlbnQsIHtcblxuXHR0cmlnZ2VyOiBmdW5jdGlvbiggZXZlbnQsIGRhdGEsIGVsZW0sIG9ubHlIYW5kbGVycyApIHtcblxuXHRcdHZhciBpLCBjdXIsIHRtcCwgYnViYmxlVHlwZSwgb250eXBlLCBoYW5kbGUsIHNwZWNpYWwsIGxhc3RFbGVtZW50LFxuXHRcdFx0ZXZlbnRQYXRoID0gWyBlbGVtIHx8IGRvY3VtZW50IF0sXG5cdFx0XHR0eXBlID0gaGFzT3duLmNhbGwoIGV2ZW50LCBcInR5cGVcIiApID8gZXZlbnQudHlwZSA6IGV2ZW50LFxuXHRcdFx0bmFtZXNwYWNlcyA9IGhhc093bi5jYWxsKCBldmVudCwgXCJuYW1lc3BhY2VcIiApID8gZXZlbnQubmFtZXNwYWNlLnNwbGl0KCBcIi5cIiApIDogW107XG5cblx0XHRjdXIgPSBsYXN0RWxlbWVudCA9IHRtcCA9IGVsZW0gPSBlbGVtIHx8IGRvY3VtZW50O1xuXG5cdFx0Ly8gRG9uJ3QgZG8gZXZlbnRzIG9uIHRleHQgYW5kIGNvbW1lbnQgbm9kZXNcblx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDMgfHwgZWxlbS5ub2RlVHlwZSA9PT0gOCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBmb2N1cy9ibHVyIG1vcnBocyB0byBmb2N1c2luL291dDsgZW5zdXJlIHdlJ3JlIG5vdCBmaXJpbmcgdGhlbSByaWdodCBub3dcblx0XHRpZiAoIHJmb2N1c01vcnBoLnRlc3QoIHR5cGUgKyBqUXVlcnkuZXZlbnQudHJpZ2dlcmVkICkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCB0eXBlLmluZGV4T2YoIFwiLlwiICkgPiAtMSApIHtcblxuXHRcdFx0Ly8gTmFtZXNwYWNlZCB0cmlnZ2VyOyBjcmVhdGUgYSByZWdleHAgdG8gbWF0Y2ggZXZlbnQgdHlwZSBpbiBoYW5kbGUoKVxuXHRcdFx0bmFtZXNwYWNlcyA9IHR5cGUuc3BsaXQoIFwiLlwiICk7XG5cdFx0XHR0eXBlID0gbmFtZXNwYWNlcy5zaGlmdCgpO1xuXHRcdFx0bmFtZXNwYWNlcy5zb3J0KCk7XG5cdFx0fVxuXHRcdG9udHlwZSA9IHR5cGUuaW5kZXhPZiggXCI6XCIgKSA8IDAgJiYgXCJvblwiICsgdHlwZTtcblxuXHRcdC8vIENhbGxlciBjYW4gcGFzcyBpbiBhIGpRdWVyeS5FdmVudCBvYmplY3QsIE9iamVjdCwgb3IganVzdCBhbiBldmVudCB0eXBlIHN0cmluZ1xuXHRcdGV2ZW50ID0gZXZlbnRbIGpRdWVyeS5leHBhbmRvIF0gP1xuXHRcdFx0ZXZlbnQgOlxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCggdHlwZSwgdHlwZW9mIGV2ZW50ID09PSBcIm9iamVjdFwiICYmIGV2ZW50ICk7XG5cblx0XHQvLyBUcmlnZ2VyIGJpdG1hc2s6ICYgMSBmb3IgbmF0aXZlIGhhbmRsZXJzOyAmIDIgZm9yIGpRdWVyeSAoYWx3YXlzIHRydWUpXG5cdFx0ZXZlbnQuaXNUcmlnZ2VyID0gb25seUhhbmRsZXJzID8gMiA6IDM7XG5cdFx0ZXZlbnQubmFtZXNwYWNlID0gbmFtZXNwYWNlcy5qb2luKCBcIi5cIiApO1xuXHRcdGV2ZW50LnJuYW1lc3BhY2UgPSBldmVudC5uYW1lc3BhY2UgP1xuXHRcdFx0bmV3IFJlZ0V4cCggXCIoXnxcXFxcLilcIiArIG5hbWVzcGFjZXMuam9pbiggXCJcXFxcLig/Oi4qXFxcXC58KVwiICkgKyBcIihcXFxcLnwkKVwiICkgOlxuXHRcdFx0bnVsbDtcblxuXHRcdC8vIENsZWFuIHVwIHRoZSBldmVudCBpbiBjYXNlIGl0IGlzIGJlaW5nIHJldXNlZFxuXHRcdGV2ZW50LnJlc3VsdCA9IHVuZGVmaW5lZDtcblx0XHRpZiAoICFldmVudC50YXJnZXQgKSB7XG5cdFx0XHRldmVudC50YXJnZXQgPSBlbGVtO1xuXHRcdH1cblxuXHRcdC8vIENsb25lIGFueSBpbmNvbWluZyBkYXRhIGFuZCBwcmVwZW5kIHRoZSBldmVudCwgY3JlYXRpbmcgdGhlIGhhbmRsZXIgYXJnIGxpc3Rcblx0XHRkYXRhID0gZGF0YSA9PSBudWxsID9cblx0XHRcdFsgZXZlbnQgXSA6XG5cdFx0XHRqUXVlcnkubWFrZUFycmF5KCBkYXRhLCBbIGV2ZW50IF0gKTtcblxuXHRcdC8vIEFsbG93IHNwZWNpYWwgZXZlbnRzIHRvIGRyYXcgb3V0c2lkZSB0aGUgbGluZXNcblx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgc3BlY2lhbC50cmlnZ2VyICYmIHNwZWNpYWwudHJpZ2dlci5hcHBseSggZWxlbSwgZGF0YSApID09PSBmYWxzZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBEZXRlcm1pbmUgZXZlbnQgcHJvcGFnYXRpb24gcGF0aCBpbiBhZHZhbmNlLCBwZXIgVzNDIGV2ZW50cyBzcGVjICgjOTk1MSlcblx0XHQvLyBCdWJibGUgdXAgdG8gZG9jdW1lbnQsIHRoZW4gdG8gd2luZG93OyB3YXRjaCBmb3IgYSBnbG9iYWwgb3duZXJEb2N1bWVudCB2YXIgKCM5NzI0KVxuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiAhc3BlY2lhbC5ub0J1YmJsZSAmJiAhaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0YnViYmxlVHlwZSA9IHNwZWNpYWwuZGVsZWdhdGVUeXBlIHx8IHR5cGU7XG5cdFx0XHRpZiAoICFyZm9jdXNNb3JwaC50ZXN0KCBidWJibGVUeXBlICsgdHlwZSApICkge1xuXHRcdFx0XHRjdXIgPSBjdXIucGFyZW50Tm9kZTtcblx0XHRcdH1cblx0XHRcdGZvciAoIDsgY3VyOyBjdXIgPSBjdXIucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0ZXZlbnRQYXRoLnB1c2goIGN1ciApO1xuXHRcdFx0XHR0bXAgPSBjdXI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE9ubHkgYWRkIHdpbmRvdyBpZiB3ZSBnb3QgdG8gZG9jdW1lbnQgKGUuZy4sIG5vdCBwbGFpbiBvYmogb3IgZGV0YWNoZWQgRE9NKVxuXHRcdFx0aWYgKCB0bXAgPT09ICggZWxlbS5vd25lckRvY3VtZW50IHx8IGRvY3VtZW50ICkgKSB7XG5cdFx0XHRcdGV2ZW50UGF0aC5wdXNoKCB0bXAuZGVmYXVsdFZpZXcgfHwgdG1wLnBhcmVudFdpbmRvdyB8fCB3aW5kb3cgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBGaXJlIGhhbmRsZXJzIG9uIHRoZSBldmVudCBwYXRoXG5cdFx0aSA9IDA7XG5cdFx0d2hpbGUgKCAoIGN1ciA9IGV2ZW50UGF0aFsgaSsrIF0gKSAmJiAhZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblx0XHRcdGxhc3RFbGVtZW50ID0gY3VyO1xuXHRcdFx0ZXZlbnQudHlwZSA9IGkgPiAxID9cblx0XHRcdFx0YnViYmxlVHlwZSA6XG5cdFx0XHRcdHNwZWNpYWwuYmluZFR5cGUgfHwgdHlwZTtcblxuXHRcdFx0Ly8galF1ZXJ5IGhhbmRsZXJcblx0XHRcdGhhbmRsZSA9ICggZGF0YVByaXYuZ2V0KCBjdXIsIFwiZXZlbnRzXCIgKSB8fCB7fSApWyBldmVudC50eXBlIF0gJiZcblx0XHRcdFx0ZGF0YVByaXYuZ2V0KCBjdXIsIFwiaGFuZGxlXCIgKTtcblx0XHRcdGlmICggaGFuZGxlICkge1xuXHRcdFx0XHRoYW5kbGUuYXBwbHkoIGN1ciwgZGF0YSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBOYXRpdmUgaGFuZGxlclxuXHRcdFx0aGFuZGxlID0gb250eXBlICYmIGN1clsgb250eXBlIF07XG5cdFx0XHRpZiAoIGhhbmRsZSAmJiBoYW5kbGUuYXBwbHkgJiYgYWNjZXB0RGF0YSggY3VyICkgKSB7XG5cdFx0XHRcdGV2ZW50LnJlc3VsdCA9IGhhbmRsZS5hcHBseSggY3VyLCBkYXRhICk7XG5cdFx0XHRcdGlmICggZXZlbnQucmVzdWx0ID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGV2ZW50LnR5cGUgPSB0eXBlO1xuXG5cdFx0Ly8gSWYgbm9ib2R5IHByZXZlbnRlZCB0aGUgZGVmYXVsdCBhY3Rpb24sIGRvIGl0IG5vd1xuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiAhZXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkgKSB7XG5cblx0XHRcdGlmICggKCAhc3BlY2lhbC5fZGVmYXVsdCB8fFxuXHRcdFx0XHRzcGVjaWFsLl9kZWZhdWx0LmFwcGx5KCBldmVudFBhdGgucG9wKCksIGRhdGEgKSA9PT0gZmFsc2UgKSAmJlxuXHRcdFx0XHRhY2NlcHREYXRhKCBlbGVtICkgKSB7XG5cblx0XHRcdFx0Ly8gQ2FsbCBhIG5hdGl2ZSBET00gbWV0aG9kIG9uIHRoZSB0YXJnZXQgd2l0aCB0aGUgc2FtZSBuYW1lIGFzIHRoZSBldmVudC5cblx0XHRcdFx0Ly8gRG9uJ3QgZG8gZGVmYXVsdCBhY3Rpb25zIG9uIHdpbmRvdywgdGhhdCdzIHdoZXJlIGdsb2JhbCB2YXJpYWJsZXMgYmUgKCM2MTcwKVxuXHRcdFx0XHRpZiAoIG9udHlwZSAmJiBpc0Z1bmN0aW9uKCBlbGVtWyB0eXBlIF0gKSAmJiAhaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0XHRcdC8vIERvbid0IHJlLXRyaWdnZXIgYW4gb25GT08gZXZlbnQgd2hlbiB3ZSBjYWxsIGl0cyBGT08oKSBtZXRob2Rcblx0XHRcdFx0XHR0bXAgPSBlbGVtWyBvbnR5cGUgXTtcblxuXHRcdFx0XHRcdGlmICggdG1wICkge1xuXHRcdFx0XHRcdFx0ZWxlbVsgb250eXBlIF0gPSBudWxsO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFByZXZlbnQgcmUtdHJpZ2dlcmluZyBvZiB0aGUgc2FtZSBldmVudCwgc2luY2Ugd2UgYWxyZWFkeSBidWJibGVkIGl0IGFib3ZlXG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCA9IHR5cGU7XG5cblx0XHRcdFx0XHRpZiAoIGV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRcdFx0XHRsYXN0RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCB0eXBlLCBzdG9wUHJvcGFnYXRpb25DYWxsYmFjayApO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGVsZW1bIHR5cGUgXSgpO1xuXG5cdFx0XHRcdFx0aWYgKCBldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXHRcdFx0XHRcdFx0bGFzdEVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggdHlwZSwgc3RvcFByb3BhZ2F0aW9uQ2FsbGJhY2sgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlcmVkID0gdW5kZWZpbmVkO1xuXG5cdFx0XHRcdFx0aWYgKCB0bXAgKSB7XG5cdFx0XHRcdFx0XHRlbGVtWyBvbnR5cGUgXSA9IHRtcDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZXZlbnQucmVzdWx0O1xuXHR9LFxuXG5cdC8vIFBpZ2d5YmFjayBvbiBhIGRvbm9yIGV2ZW50IHRvIHNpbXVsYXRlIGEgZGlmZmVyZW50IG9uZVxuXHQvLyBVc2VkIG9ubHkgZm9yIGBmb2N1cyhpbiB8IG91dClgIGV2ZW50c1xuXHRzaW11bGF0ZTogZnVuY3Rpb24oIHR5cGUsIGVsZW0sIGV2ZW50ICkge1xuXHRcdHZhciBlID0galF1ZXJ5LmV4dGVuZChcblx0XHRcdG5ldyBqUXVlcnkuRXZlbnQoKSxcblx0XHRcdGV2ZW50LFxuXHRcdFx0e1xuXHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRpc1NpbXVsYXRlZDogdHJ1ZVxuXHRcdFx0fVxuXHRcdCk7XG5cblx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggZSwgbnVsbCwgZWxlbSApO1xuXHR9XG5cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdHRyaWdnZXI6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIHR5cGUsIGRhdGEsIHRoaXMgKTtcblx0XHR9ICk7XG5cdH0sXG5cdHRyaWdnZXJIYW5kbGVyOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHR2YXIgZWxlbSA9IHRoaXNbIDAgXTtcblx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmV2ZW50LnRyaWdnZXIoIHR5cGUsIGRhdGEsIGVsZW0sIHRydWUgKTtcblx0XHR9XG5cdH1cbn0gKTtcblxuXG4vLyBTdXBwb3J0OiBGaXJlZm94IDw9NDRcbi8vIEZpcmVmb3ggZG9lc24ndCBoYXZlIGZvY3VzKGluIHwgb3V0KSBldmVudHNcbi8vIFJlbGF0ZWQgdGlja2V0IC0gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9Njg3Nzg3XG4vL1xuLy8gU3VwcG9ydDogQ2hyb21lIDw9NDggLSA0OSwgU2FmYXJpIDw9OS4wIC0gOS4xXG4vLyBmb2N1cyhpbiB8IG91dCkgZXZlbnRzIGZpcmUgYWZ0ZXIgZm9jdXMgJiBibHVyIGV2ZW50cyxcbi8vIHdoaWNoIGlzIHNwZWMgdmlvbGF0aW9uIC0gaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzLyNldmVudHMtZm9jdXNldmVudC1ldmVudC1vcmRlclxuLy8gUmVsYXRlZCB0aWNrZXQgLSBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD00NDk4NTdcbmlmICggIXN1cHBvcnQuZm9jdXNpbiApIHtcblx0alF1ZXJ5LmVhY2goIHsgZm9jdXM6IFwiZm9jdXNpblwiLCBibHVyOiBcImZvY3Vzb3V0XCIgfSwgZnVuY3Rpb24oIG9yaWcsIGZpeCApIHtcblxuXHRcdC8vIEF0dGFjaCBhIHNpbmdsZSBjYXB0dXJpbmcgaGFuZGxlciBvbiB0aGUgZG9jdW1lbnQgd2hpbGUgc29tZW9uZSB3YW50cyBmb2N1c2luL2ZvY3Vzb3V0XG5cdFx0dmFyIGhhbmRsZXIgPSBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQuc2ltdWxhdGUoIGZpeCwgZXZlbnQudGFyZ2V0LCBqUXVlcnkuZXZlbnQuZml4KCBldmVudCApICk7XG5cdFx0fTtcblxuXHRcdGpRdWVyeS5ldmVudC5zcGVjaWFsWyBmaXggXSA9IHtcblx0XHRcdHNldHVwOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIGRvYyA9IHRoaXMub3duZXJEb2N1bWVudCB8fCB0aGlzLFxuXHRcdFx0XHRcdGF0dGFjaGVzID0gZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCApO1xuXG5cdFx0XHRcdGlmICggIWF0dGFjaGVzICkge1xuXHRcdFx0XHRcdGRvYy5hZGRFdmVudExpc3RlbmVyKCBvcmlnLCBoYW5kbGVyLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCwgKCBhdHRhY2hlcyB8fCAwICkgKyAxICk7XG5cdFx0XHR9LFxuXHRcdFx0dGVhcmRvd246IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgZG9jID0gdGhpcy5vd25lckRvY3VtZW50IHx8IHRoaXMsXG5cdFx0XHRcdFx0YXR0YWNoZXMgPSBkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4ICkgLSAxO1xuXG5cdFx0XHRcdGlmICggIWF0dGFjaGVzICkge1xuXHRcdFx0XHRcdGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKCBvcmlnLCBoYW5kbGVyLCB0cnVlICk7XG5cdFx0XHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBkb2MsIGZpeCApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCwgYXR0YWNoZXMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH0gKTtcbn1cbnZhciBsb2NhdGlvbiA9IHdpbmRvdy5sb2NhdGlvbjtcblxudmFyIG5vbmNlID0gRGF0ZS5ub3coKTtcblxudmFyIHJxdWVyeSA9ICggL1xcPy8gKTtcblxuXG5cbi8vIENyb3NzLWJyb3dzZXIgeG1sIHBhcnNpbmdcbmpRdWVyeS5wYXJzZVhNTCA9IGZ1bmN0aW9uKCBkYXRhICkge1xuXHR2YXIgeG1sO1xuXHRpZiAoICFkYXRhIHx8IHR5cGVvZiBkYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0Ly8gU3VwcG9ydDogSUUgOSAtIDExIG9ubHlcblx0Ly8gSUUgdGhyb3dzIG9uIHBhcnNlRnJvbVN0cmluZyB3aXRoIGludmFsaWQgaW5wdXQuXG5cdHRyeSB7XG5cdFx0eG1sID0gKCBuZXcgd2luZG93LkRPTVBhcnNlcigpICkucGFyc2VGcm9tU3RyaW5nKCBkYXRhLCBcInRleHQveG1sXCIgKTtcblx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0eG1sID0gdW5kZWZpbmVkO1xuXHR9XG5cblx0aWYgKCAheG1sIHx8IHhtbC5nZXRFbGVtZW50c0J5VGFnTmFtZSggXCJwYXJzZXJlcnJvclwiICkubGVuZ3RoICkge1xuXHRcdGpRdWVyeS5lcnJvciggXCJJbnZhbGlkIFhNTDogXCIgKyBkYXRhICk7XG5cdH1cblx0cmV0dXJuIHhtbDtcbn07XG5cblxudmFyXG5cdHJicmFja2V0ID0gL1xcW1xcXSQvLFxuXHRyQ1JMRiA9IC9cXHI/XFxuL2csXG5cdHJzdWJtaXR0ZXJUeXBlcyA9IC9eKD86c3VibWl0fGJ1dHRvbnxpbWFnZXxyZXNldHxmaWxlKSQvaSxcblx0cnN1Ym1pdHRhYmxlID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8a2V5Z2VuKS9pO1xuXG5mdW5jdGlvbiBidWlsZFBhcmFtcyggcHJlZml4LCBvYmosIHRyYWRpdGlvbmFsLCBhZGQgKSB7XG5cdHZhciBuYW1lO1xuXG5cdGlmICggQXJyYXkuaXNBcnJheSggb2JqICkgKSB7XG5cblx0XHQvLyBTZXJpYWxpemUgYXJyYXkgaXRlbS5cblx0XHRqUXVlcnkuZWFjaCggb2JqLCBmdW5jdGlvbiggaSwgdiApIHtcblx0XHRcdGlmICggdHJhZGl0aW9uYWwgfHwgcmJyYWNrZXQudGVzdCggcHJlZml4ICkgKSB7XG5cblx0XHRcdFx0Ly8gVHJlYXQgZWFjaCBhcnJheSBpdGVtIGFzIGEgc2NhbGFyLlxuXHRcdFx0XHRhZGQoIHByZWZpeCwgdiApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIEl0ZW0gaXMgbm9uLXNjYWxhciAoYXJyYXkgb3Igb2JqZWN0KSwgZW5jb2RlIGl0cyBudW1lcmljIGluZGV4LlxuXHRcdFx0XHRidWlsZFBhcmFtcyhcblx0XHRcdFx0XHRwcmVmaXggKyBcIltcIiArICggdHlwZW9mIHYgPT09IFwib2JqZWN0XCIgJiYgdiAhPSBudWxsID8gaSA6IFwiXCIgKSArIFwiXVwiLFxuXHRcdFx0XHRcdHYsXG5cdFx0XHRcdFx0dHJhZGl0aW9uYWwsXG5cdFx0XHRcdFx0YWRkXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXG5cdH0gZWxzZSBpZiAoICF0cmFkaXRpb25hbCAmJiB0b1R5cGUoIG9iaiApID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0Ly8gU2VyaWFsaXplIG9iamVjdCBpdGVtLlxuXHRcdGZvciAoIG5hbWUgaW4gb2JqICkge1xuXHRcdFx0YnVpbGRQYXJhbXMoIHByZWZpeCArIFwiW1wiICsgbmFtZSArIFwiXVwiLCBvYmpbIG5hbWUgXSwgdHJhZGl0aW9uYWwsIGFkZCApO1xuXHRcdH1cblxuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gU2VyaWFsaXplIHNjYWxhciBpdGVtLlxuXHRcdGFkZCggcHJlZml4LCBvYmogKTtcblx0fVxufVxuXG4vLyBTZXJpYWxpemUgYW4gYXJyYXkgb2YgZm9ybSBlbGVtZW50cyBvciBhIHNldCBvZlxuLy8ga2V5L3ZhbHVlcyBpbnRvIGEgcXVlcnkgc3RyaW5nXG5qUXVlcnkucGFyYW0gPSBmdW5jdGlvbiggYSwgdHJhZGl0aW9uYWwgKSB7XG5cdHZhciBwcmVmaXgsXG5cdFx0cyA9IFtdLFxuXHRcdGFkZCA9IGZ1bmN0aW9uKCBrZXksIHZhbHVlT3JGdW5jdGlvbiApIHtcblxuXHRcdFx0Ly8gSWYgdmFsdWUgaXMgYSBmdW5jdGlvbiwgaW52b2tlIGl0IGFuZCB1c2UgaXRzIHJldHVybiB2YWx1ZVxuXHRcdFx0dmFyIHZhbHVlID0gaXNGdW5jdGlvbiggdmFsdWVPckZ1bmN0aW9uICkgP1xuXHRcdFx0XHR2YWx1ZU9yRnVuY3Rpb24oKSA6XG5cdFx0XHRcdHZhbHVlT3JGdW5jdGlvbjtcblxuXHRcdFx0c1sgcy5sZW5ndGggXSA9IGVuY29kZVVSSUNvbXBvbmVudCgga2V5ICkgKyBcIj1cIiArXG5cdFx0XHRcdGVuY29kZVVSSUNvbXBvbmVudCggdmFsdWUgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZSApO1xuXHRcdH07XG5cblx0Ly8gSWYgYW4gYXJyYXkgd2FzIHBhc3NlZCBpbiwgYXNzdW1lIHRoYXQgaXQgaXMgYW4gYXJyYXkgb2YgZm9ybSBlbGVtZW50cy5cblx0aWYgKCBBcnJheS5pc0FycmF5KCBhICkgfHwgKCBhLmpxdWVyeSAmJiAhalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGEgKSApICkge1xuXG5cdFx0Ly8gU2VyaWFsaXplIHRoZSBmb3JtIGVsZW1lbnRzXG5cdFx0alF1ZXJ5LmVhY2goIGEsIGZ1bmN0aW9uKCkge1xuXHRcdFx0YWRkKCB0aGlzLm5hbWUsIHRoaXMudmFsdWUgKTtcblx0XHR9ICk7XG5cblx0fSBlbHNlIHtcblxuXHRcdC8vIElmIHRyYWRpdGlvbmFsLCBlbmNvZGUgdGhlIFwib2xkXCIgd2F5ICh0aGUgd2F5IDEuMy4yIG9yIG9sZGVyXG5cdFx0Ly8gZGlkIGl0KSwgb3RoZXJ3aXNlIGVuY29kZSBwYXJhbXMgcmVjdXJzaXZlbHkuXG5cdFx0Zm9yICggcHJlZml4IGluIGEgKSB7XG5cdFx0XHRidWlsZFBhcmFtcyggcHJlZml4LCBhWyBwcmVmaXggXSwgdHJhZGl0aW9uYWwsIGFkZCApO1xuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgcmVzdWx0aW5nIHNlcmlhbGl6YXRpb25cblx0cmV0dXJuIHMuam9pbiggXCImXCIgKTtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0c2VyaWFsaXplOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4galF1ZXJ5LnBhcmFtKCB0aGlzLnNlcmlhbGl6ZUFycmF5KCkgKTtcblx0fSxcblx0c2VyaWFsaXplQXJyYXk6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLm1hcCggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIENhbiBhZGQgcHJvcEhvb2sgZm9yIFwiZWxlbWVudHNcIiB0byBmaWx0ZXIgb3IgYWRkIGZvcm0gZWxlbWVudHNcblx0XHRcdHZhciBlbGVtZW50cyA9IGpRdWVyeS5wcm9wKCB0aGlzLCBcImVsZW1lbnRzXCIgKTtcblx0XHRcdHJldHVybiBlbGVtZW50cyA/IGpRdWVyeS5tYWtlQXJyYXkoIGVsZW1lbnRzICkgOiB0aGlzO1xuXHRcdH0gKVxuXHRcdC5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHR5cGUgPSB0aGlzLnR5cGU7XG5cblx0XHRcdC8vIFVzZSAuaXMoIFwiOmRpc2FibGVkXCIgKSBzbyB0aGF0IGZpZWxkc2V0W2Rpc2FibGVkXSB3b3Jrc1xuXHRcdFx0cmV0dXJuIHRoaXMubmFtZSAmJiAhalF1ZXJ5KCB0aGlzICkuaXMoIFwiOmRpc2FibGVkXCIgKSAmJlxuXHRcdFx0XHRyc3VibWl0dGFibGUudGVzdCggdGhpcy5ub2RlTmFtZSApICYmICFyc3VibWl0dGVyVHlwZXMudGVzdCggdHlwZSApICYmXG5cdFx0XHRcdCggdGhpcy5jaGVja2VkIHx8ICFyY2hlY2thYmxlVHlwZS50ZXN0KCB0eXBlICkgKTtcblx0XHR9IClcblx0XHQubWFwKCBmdW5jdGlvbiggaSwgZWxlbSApIHtcblx0XHRcdHZhciB2YWwgPSBqUXVlcnkoIHRoaXMgKS52YWwoKTtcblxuXHRcdFx0aWYgKCB2YWwgPT0gbnVsbCApIHtcblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggdmFsICkgKSB7XG5cdFx0XHRcdHJldHVybiBqUXVlcnkubWFwKCB2YWwsIGZ1bmN0aW9uKCB2YWwgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHsgbmFtZTogZWxlbS5uYW1lLCB2YWx1ZTogdmFsLnJlcGxhY2UoIHJDUkxGLCBcIlxcclxcblwiICkgfTtcblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4geyBuYW1lOiBlbGVtLm5hbWUsIHZhbHVlOiB2YWwucmVwbGFjZSggckNSTEYsIFwiXFxyXFxuXCIgKSB9O1xuXHRcdH0gKS5nZXQoKTtcblx0fVxufSApO1xuXG5cbnZhclxuXHRyMjAgPSAvJTIwL2csXG5cdHJoYXNoID0gLyMuKiQvLFxuXHRyYW50aUNhY2hlID0gLyhbPyZdKV89W14mXSovLFxuXHRyaGVhZGVycyA9IC9eKC4qPyk6WyBcXHRdKihbXlxcclxcbl0qKSQvbWcsXG5cblx0Ly8gIzc2NTMsICM4MTI1LCAjODE1MjogbG9jYWwgcHJvdG9jb2wgZGV0ZWN0aW9uXG5cdHJsb2NhbFByb3RvY29sID0gL14oPzphYm91dHxhcHB8YXBwLXN0b3JhZ2V8ListZXh0ZW5zaW9ufGZpbGV8cmVzfHdpZGdldCk6JC8sXG5cdHJub0NvbnRlbnQgPSAvXig/OkdFVHxIRUFEKSQvLFxuXHRycHJvdG9jb2wgPSAvXlxcL1xcLy8sXG5cblx0LyogUHJlZmlsdGVyc1xuXHQgKiAxKSBUaGV5IGFyZSB1c2VmdWwgdG8gaW50cm9kdWNlIGN1c3RvbSBkYXRhVHlwZXMgKHNlZSBhamF4L2pzb25wLmpzIGZvciBhbiBleGFtcGxlKVxuXHQgKiAyKSBUaGVzZSBhcmUgY2FsbGVkOlxuXHQgKiAgICAtIEJFRk9SRSBhc2tpbmcgZm9yIGEgdHJhbnNwb3J0XG5cdCAqICAgIC0gQUZURVIgcGFyYW0gc2VyaWFsaXphdGlvbiAocy5kYXRhIGlzIGEgc3RyaW5nIGlmIHMucHJvY2Vzc0RhdGEgaXMgdHJ1ZSlcblx0ICogMykga2V5IGlzIHRoZSBkYXRhVHlwZVxuXHQgKiA0KSB0aGUgY2F0Y2hhbGwgc3ltYm9sIFwiKlwiIGNhbiBiZSB1c2VkXG5cdCAqIDUpIGV4ZWN1dGlvbiB3aWxsIHN0YXJ0IHdpdGggdHJhbnNwb3J0IGRhdGFUeXBlIGFuZCBUSEVOIGNvbnRpbnVlIGRvd24gdG8gXCIqXCIgaWYgbmVlZGVkXG5cdCAqL1xuXHRwcmVmaWx0ZXJzID0ge30sXG5cblx0LyogVHJhbnNwb3J0cyBiaW5kaW5nc1xuXHQgKiAxKSBrZXkgaXMgdGhlIGRhdGFUeXBlXG5cdCAqIDIpIHRoZSBjYXRjaGFsbCBzeW1ib2wgXCIqXCIgY2FuIGJlIHVzZWRcblx0ICogMykgc2VsZWN0aW9uIHdpbGwgc3RhcnQgd2l0aCB0cmFuc3BvcnQgZGF0YVR5cGUgYW5kIFRIRU4gZ28gdG8gXCIqXCIgaWYgbmVlZGVkXG5cdCAqL1xuXHR0cmFuc3BvcnRzID0ge30sXG5cblx0Ly8gQXZvaWQgY29tbWVudC1wcm9sb2cgY2hhciBzZXF1ZW5jZSAoIzEwMDk4KTsgbXVzdCBhcHBlYXNlIGxpbnQgYW5kIGV2YWRlIGNvbXByZXNzaW9uXG5cdGFsbFR5cGVzID0gXCIqL1wiLmNvbmNhdCggXCIqXCIgKSxcblxuXHQvLyBBbmNob3IgdGFnIGZvciBwYXJzaW5nIHRoZSBkb2N1bWVudCBvcmlnaW5cblx0b3JpZ2luQW5jaG9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJhXCIgKTtcblx0b3JpZ2luQW5jaG9yLmhyZWYgPSBsb2NhdGlvbi5ocmVmO1xuXG4vLyBCYXNlIFwiY29uc3RydWN0b3JcIiBmb3IgalF1ZXJ5LmFqYXhQcmVmaWx0ZXIgYW5kIGpRdWVyeS5hamF4VHJhbnNwb3J0XG5mdW5jdGlvbiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHN0cnVjdHVyZSApIHtcblxuXHQvLyBkYXRhVHlwZUV4cHJlc3Npb24gaXMgb3B0aW9uYWwgYW5kIGRlZmF1bHRzIHRvIFwiKlwiXG5cdHJldHVybiBmdW5jdGlvbiggZGF0YVR5cGVFeHByZXNzaW9uLCBmdW5jICkge1xuXG5cdFx0aWYgKCB0eXBlb2YgZGF0YVR5cGVFeHByZXNzaW9uICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0ZnVuYyA9IGRhdGFUeXBlRXhwcmVzc2lvbjtcblx0XHRcdGRhdGFUeXBlRXhwcmVzc2lvbiA9IFwiKlwiO1xuXHRcdH1cblxuXHRcdHZhciBkYXRhVHlwZSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0ZGF0YVR5cGVzID0gZGF0YVR5cGVFeHByZXNzaW9uLnRvTG93ZXJDYXNlKCkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXTtcblxuXHRcdGlmICggaXNGdW5jdGlvbiggZnVuYyApICkge1xuXG5cdFx0XHQvLyBGb3IgZWFjaCBkYXRhVHlwZSBpbiB0aGUgZGF0YVR5cGVFeHByZXNzaW9uXG5cdFx0XHR3aGlsZSAoICggZGF0YVR5cGUgPSBkYXRhVHlwZXNbIGkrKyBdICkgKSB7XG5cblx0XHRcdFx0Ly8gUHJlcGVuZCBpZiByZXF1ZXN0ZWRcblx0XHRcdFx0aWYgKCBkYXRhVHlwZVsgMCBdID09PSBcIitcIiApIHtcblx0XHRcdFx0XHRkYXRhVHlwZSA9IGRhdGFUeXBlLnNsaWNlKCAxICkgfHwgXCIqXCI7XG5cdFx0XHRcdFx0KCBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gPSBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10gKS51bnNoaWZ0KCBmdW5jICk7XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIGFwcGVuZFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdCggc3RydWN0dXJlWyBkYXRhVHlwZSBdID0gc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdICkucHVzaCggZnVuYyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xufVxuXG4vLyBCYXNlIGluc3BlY3Rpb24gZnVuY3Rpb24gZm9yIHByZWZpbHRlcnMgYW5kIHRyYW5zcG9ydHNcbmZ1bmN0aW9uIGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBzdHJ1Y3R1cmUsIG9wdGlvbnMsIG9yaWdpbmFsT3B0aW9ucywganFYSFIgKSB7XG5cblx0dmFyIGluc3BlY3RlZCA9IHt9LFxuXHRcdHNlZWtpbmdUcmFuc3BvcnQgPSAoIHN0cnVjdHVyZSA9PT0gdHJhbnNwb3J0cyApO1xuXG5cdGZ1bmN0aW9uIGluc3BlY3QoIGRhdGFUeXBlICkge1xuXHRcdHZhciBzZWxlY3RlZDtcblx0XHRpbnNwZWN0ZWRbIGRhdGFUeXBlIF0gPSB0cnVlO1xuXHRcdGpRdWVyeS5lYWNoKCBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10sIGZ1bmN0aW9uKCBfLCBwcmVmaWx0ZXJPckZhY3RvcnkgKSB7XG5cdFx0XHR2YXIgZGF0YVR5cGVPclRyYW5zcG9ydCA9IHByZWZpbHRlck9yRmFjdG9yeSggb3B0aW9ucywgb3JpZ2luYWxPcHRpb25zLCBqcVhIUiApO1xuXHRcdFx0aWYgKCB0eXBlb2YgZGF0YVR5cGVPclRyYW5zcG9ydCA9PT0gXCJzdHJpbmdcIiAmJlxuXHRcdFx0XHQhc2Vla2luZ1RyYW5zcG9ydCAmJiAhaW5zcGVjdGVkWyBkYXRhVHlwZU9yVHJhbnNwb3J0IF0gKSB7XG5cblx0XHRcdFx0b3B0aW9ucy5kYXRhVHlwZXMudW5zaGlmdCggZGF0YVR5cGVPclRyYW5zcG9ydCApO1xuXHRcdFx0XHRpbnNwZWN0KCBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH0gZWxzZSBpZiAoIHNlZWtpbmdUcmFuc3BvcnQgKSB7XG5cdFx0XHRcdHJldHVybiAhKCBzZWxlY3RlZCA9IGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdFx0cmV0dXJuIHNlbGVjdGVkO1xuXHR9XG5cblx0cmV0dXJuIGluc3BlY3QoIG9wdGlvbnMuZGF0YVR5cGVzWyAwIF0gKSB8fCAhaW5zcGVjdGVkWyBcIipcIiBdICYmIGluc3BlY3QoIFwiKlwiICk7XG59XG5cbi8vIEEgc3BlY2lhbCBleHRlbmQgZm9yIGFqYXggb3B0aW9uc1xuLy8gdGhhdCB0YWtlcyBcImZsYXRcIiBvcHRpb25zIChub3QgdG8gYmUgZGVlcCBleHRlbmRlZClcbi8vIEZpeGVzICM5ODg3XG5mdW5jdGlvbiBhamF4RXh0ZW5kKCB0YXJnZXQsIHNyYyApIHtcblx0dmFyIGtleSwgZGVlcCxcblx0XHRmbGF0T3B0aW9ucyA9IGpRdWVyeS5hamF4U2V0dGluZ3MuZmxhdE9wdGlvbnMgfHwge307XG5cblx0Zm9yICgga2V5IGluIHNyYyApIHtcblx0XHRpZiAoIHNyY1sga2V5IF0gIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdCggZmxhdE9wdGlvbnNbIGtleSBdID8gdGFyZ2V0IDogKCBkZWVwIHx8ICggZGVlcCA9IHt9ICkgKSApWyBrZXkgXSA9IHNyY1sga2V5IF07XG5cdFx0fVxuXHR9XG5cdGlmICggZGVlcCApIHtcblx0XHRqUXVlcnkuZXh0ZW5kKCB0cnVlLCB0YXJnZXQsIGRlZXAgKTtcblx0fVxuXG5cdHJldHVybiB0YXJnZXQ7XG59XG5cbi8qIEhhbmRsZXMgcmVzcG9uc2VzIHRvIGFuIGFqYXggcmVxdWVzdDpcbiAqIC0gZmluZHMgdGhlIHJpZ2h0IGRhdGFUeXBlIChtZWRpYXRlcyBiZXR3ZWVuIGNvbnRlbnQtdHlwZSBhbmQgZXhwZWN0ZWQgZGF0YVR5cGUpXG4gKiAtIHJldHVybnMgdGhlIGNvcnJlc3BvbmRpbmcgcmVzcG9uc2VcbiAqL1xuZnVuY3Rpb24gYWpheEhhbmRsZVJlc3BvbnNlcyggcywganFYSFIsIHJlc3BvbnNlcyApIHtcblxuXHR2YXIgY3QsIHR5cGUsIGZpbmFsRGF0YVR5cGUsIGZpcnN0RGF0YVR5cGUsXG5cdFx0Y29udGVudHMgPSBzLmNvbnRlbnRzLFxuXHRcdGRhdGFUeXBlcyA9IHMuZGF0YVR5cGVzO1xuXG5cdC8vIFJlbW92ZSBhdXRvIGRhdGFUeXBlIGFuZCBnZXQgY29udGVudC10eXBlIGluIHRoZSBwcm9jZXNzXG5cdHdoaWxlICggZGF0YVR5cGVzWyAwIF0gPT09IFwiKlwiICkge1xuXHRcdGRhdGFUeXBlcy5zaGlmdCgpO1xuXHRcdGlmICggY3QgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGN0ID0gcy5taW1lVHlwZSB8fCBqcVhIUi5nZXRSZXNwb25zZUhlYWRlciggXCJDb250ZW50LVR5cGVcIiApO1xuXHRcdH1cblx0fVxuXG5cdC8vIENoZWNrIGlmIHdlJ3JlIGRlYWxpbmcgd2l0aCBhIGtub3duIGNvbnRlbnQtdHlwZVxuXHRpZiAoIGN0ICkge1xuXHRcdGZvciAoIHR5cGUgaW4gY29udGVudHMgKSB7XG5cdFx0XHRpZiAoIGNvbnRlbnRzWyB0eXBlIF0gJiYgY29udGVudHNbIHR5cGUgXS50ZXN0KCBjdCApICkge1xuXHRcdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggdHlwZSApO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBDaGVjayB0byBzZWUgaWYgd2UgaGF2ZSBhIHJlc3BvbnNlIGZvciB0aGUgZXhwZWN0ZWQgZGF0YVR5cGVcblx0aWYgKCBkYXRhVHlwZXNbIDAgXSBpbiByZXNwb25zZXMgKSB7XG5cdFx0ZmluYWxEYXRhVHlwZSA9IGRhdGFUeXBlc1sgMCBdO1xuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gVHJ5IGNvbnZlcnRpYmxlIGRhdGFUeXBlc1xuXHRcdGZvciAoIHR5cGUgaW4gcmVzcG9uc2VzICkge1xuXHRcdFx0aWYgKCAhZGF0YVR5cGVzWyAwIF0gfHwgcy5jb252ZXJ0ZXJzWyB0eXBlICsgXCIgXCIgKyBkYXRhVHlwZXNbIDAgXSBdICkge1xuXHRcdFx0XHRmaW5hbERhdGFUeXBlID0gdHlwZTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRpZiAoICFmaXJzdERhdGFUeXBlICkge1xuXHRcdFx0XHRmaXJzdERhdGFUeXBlID0gdHlwZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBPciBqdXN0IHVzZSBmaXJzdCBvbmVcblx0XHRmaW5hbERhdGFUeXBlID0gZmluYWxEYXRhVHlwZSB8fCBmaXJzdERhdGFUeXBlO1xuXHR9XG5cblx0Ly8gSWYgd2UgZm91bmQgYSBkYXRhVHlwZVxuXHQvLyBXZSBhZGQgdGhlIGRhdGFUeXBlIHRvIHRoZSBsaXN0IGlmIG5lZWRlZFxuXHQvLyBhbmQgcmV0dXJuIHRoZSBjb3JyZXNwb25kaW5nIHJlc3BvbnNlXG5cdGlmICggZmluYWxEYXRhVHlwZSApIHtcblx0XHRpZiAoIGZpbmFsRGF0YVR5cGUgIT09IGRhdGFUeXBlc1sgMCBdICkge1xuXHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIGZpbmFsRGF0YVR5cGUgKTtcblx0XHR9XG5cdFx0cmV0dXJuIHJlc3BvbnNlc1sgZmluYWxEYXRhVHlwZSBdO1xuXHR9XG59XG5cbi8qIENoYWluIGNvbnZlcnNpb25zIGdpdmVuIHRoZSByZXF1ZXN0IGFuZCB0aGUgb3JpZ2luYWwgcmVzcG9uc2VcbiAqIEFsc28gc2V0cyB0aGUgcmVzcG9uc2VYWFggZmllbGRzIG9uIHRoZSBqcVhIUiBpbnN0YW5jZVxuICovXG5mdW5jdGlvbiBhamF4Q29udmVydCggcywgcmVzcG9uc2UsIGpxWEhSLCBpc1N1Y2Nlc3MgKSB7XG5cdHZhciBjb252MiwgY3VycmVudCwgY29udiwgdG1wLCBwcmV2LFxuXHRcdGNvbnZlcnRlcnMgPSB7fSxcblxuXHRcdC8vIFdvcmsgd2l0aCBhIGNvcHkgb2YgZGF0YVR5cGVzIGluIGNhc2Ugd2UgbmVlZCB0byBtb2RpZnkgaXQgZm9yIGNvbnZlcnNpb25cblx0XHRkYXRhVHlwZXMgPSBzLmRhdGFUeXBlcy5zbGljZSgpO1xuXG5cdC8vIENyZWF0ZSBjb252ZXJ0ZXJzIG1hcCB3aXRoIGxvd2VyY2FzZWQga2V5c1xuXHRpZiAoIGRhdGFUeXBlc1sgMSBdICkge1xuXHRcdGZvciAoIGNvbnYgaW4gcy5jb252ZXJ0ZXJzICkge1xuXHRcdFx0Y29udmVydGVyc1sgY29udi50b0xvd2VyQ2FzZSgpIF0gPSBzLmNvbnZlcnRlcnNbIGNvbnYgXTtcblx0XHR9XG5cdH1cblxuXHRjdXJyZW50ID0gZGF0YVR5cGVzLnNoaWZ0KCk7XG5cblx0Ly8gQ29udmVydCB0byBlYWNoIHNlcXVlbnRpYWwgZGF0YVR5cGVcblx0d2hpbGUgKCBjdXJyZW50ICkge1xuXG5cdFx0aWYgKCBzLnJlc3BvbnNlRmllbGRzWyBjdXJyZW50IF0gKSB7XG5cdFx0XHRqcVhIUlsgcy5yZXNwb25zZUZpZWxkc1sgY3VycmVudCBdIF0gPSByZXNwb25zZTtcblx0XHR9XG5cblx0XHQvLyBBcHBseSB0aGUgZGF0YUZpbHRlciBpZiBwcm92aWRlZFxuXHRcdGlmICggIXByZXYgJiYgaXNTdWNjZXNzICYmIHMuZGF0YUZpbHRlciApIHtcblx0XHRcdHJlc3BvbnNlID0gcy5kYXRhRmlsdGVyKCByZXNwb25zZSwgcy5kYXRhVHlwZSApO1xuXHRcdH1cblxuXHRcdHByZXYgPSBjdXJyZW50O1xuXHRcdGN1cnJlbnQgPSBkYXRhVHlwZXMuc2hpZnQoKTtcblxuXHRcdGlmICggY3VycmVudCApIHtcblxuXHRcdFx0Ly8gVGhlcmUncyBvbmx5IHdvcmsgdG8gZG8gaWYgY3VycmVudCBkYXRhVHlwZSBpcyBub24tYXV0b1xuXHRcdFx0aWYgKCBjdXJyZW50ID09PSBcIipcIiApIHtcblxuXHRcdFx0XHRjdXJyZW50ID0gcHJldjtcblxuXHRcdFx0Ly8gQ29udmVydCByZXNwb25zZSBpZiBwcmV2IGRhdGFUeXBlIGlzIG5vbi1hdXRvIGFuZCBkaWZmZXJzIGZyb20gY3VycmVudFxuXHRcdFx0fSBlbHNlIGlmICggcHJldiAhPT0gXCIqXCIgJiYgcHJldiAhPT0gY3VycmVudCApIHtcblxuXHRcdFx0XHQvLyBTZWVrIGEgZGlyZWN0IGNvbnZlcnRlclxuXHRcdFx0XHRjb252ID0gY29udmVydGVyc1sgcHJldiArIFwiIFwiICsgY3VycmVudCBdIHx8IGNvbnZlcnRlcnNbIFwiKiBcIiArIGN1cnJlbnQgXTtcblxuXHRcdFx0XHQvLyBJZiBub25lIGZvdW5kLCBzZWVrIGEgcGFpclxuXHRcdFx0XHRpZiAoICFjb252ICkge1xuXHRcdFx0XHRcdGZvciAoIGNvbnYyIGluIGNvbnZlcnRlcnMgKSB7XG5cblx0XHRcdFx0XHRcdC8vIElmIGNvbnYyIG91dHB1dHMgY3VycmVudFxuXHRcdFx0XHRcdFx0dG1wID0gY29udjIuc3BsaXQoIFwiIFwiICk7XG5cdFx0XHRcdFx0XHRpZiAoIHRtcFsgMSBdID09PSBjdXJyZW50ICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIElmIHByZXYgY2FuIGJlIGNvbnZlcnRlZCB0byBhY2NlcHRlZCBpbnB1dFxuXHRcdFx0XHRcdFx0XHRjb252ID0gY29udmVydGVyc1sgcHJldiArIFwiIFwiICsgdG1wWyAwIF0gXSB8fFxuXHRcdFx0XHRcdFx0XHRcdGNvbnZlcnRlcnNbIFwiKiBcIiArIHRtcFsgMCBdIF07XG5cdFx0XHRcdFx0XHRcdGlmICggY29udiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIENvbmRlbnNlIGVxdWl2YWxlbmNlIGNvbnZlcnRlcnNcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGNvbnYgPT09IHRydWUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjb252ID0gY29udmVydGVyc1sgY29udjIgXTtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIE90aGVyd2lzZSwgaW5zZXJ0IHRoZSBpbnRlcm1lZGlhdGUgZGF0YVR5cGVcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCBjb252ZXJ0ZXJzWyBjb252MiBdICE9PSB0cnVlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y3VycmVudCA9IHRtcFsgMCBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIHRtcFsgMSBdICk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQXBwbHkgY29udmVydGVyIChpZiBub3QgYW4gZXF1aXZhbGVuY2UpXG5cdFx0XHRcdGlmICggY29udiAhPT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRcdC8vIFVubGVzcyBlcnJvcnMgYXJlIGFsbG93ZWQgdG8gYnViYmxlLCBjYXRjaCBhbmQgcmV0dXJuIHRoZW1cblx0XHRcdFx0XHRpZiAoIGNvbnYgJiYgcy50aHJvd3MgKSB7XG5cdFx0XHRcdFx0XHRyZXNwb25zZSA9IGNvbnYoIHJlc3BvbnNlICk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRcdHJlc3BvbnNlID0gY29udiggcmVzcG9uc2UgKTtcblx0XHRcdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdFx0XHRcdHN0YXRlOiBcInBhcnNlcmVycm9yXCIsXG5cdFx0XHRcdFx0XHRcdFx0ZXJyb3I6IGNvbnYgPyBlIDogXCJObyBjb252ZXJzaW9uIGZyb20gXCIgKyBwcmV2ICsgXCIgdG8gXCIgKyBjdXJyZW50XG5cdFx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHsgc3RhdGU6IFwic3VjY2Vzc1wiLCBkYXRhOiByZXNwb25zZSB9O1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gQ291bnRlciBmb3IgaG9sZGluZyB0aGUgbnVtYmVyIG9mIGFjdGl2ZSBxdWVyaWVzXG5cdGFjdGl2ZTogMCxcblxuXHQvLyBMYXN0LU1vZGlmaWVkIGhlYWRlciBjYWNoZSBmb3IgbmV4dCByZXF1ZXN0XG5cdGxhc3RNb2RpZmllZDoge30sXG5cdGV0YWc6IHt9LFxuXG5cdGFqYXhTZXR0aW5nczoge1xuXHRcdHVybDogbG9jYXRpb24uaHJlZixcblx0XHR0eXBlOiBcIkdFVFwiLFxuXHRcdGlzTG9jYWw6IHJsb2NhbFByb3RvY29sLnRlc3QoIGxvY2F0aW9uLnByb3RvY29sICksXG5cdFx0Z2xvYmFsOiB0cnVlLFxuXHRcdHByb2Nlc3NEYXRhOiB0cnVlLFxuXHRcdGFzeW5jOiB0cnVlLFxuXHRcdGNvbnRlbnRUeXBlOiBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDsgY2hhcnNldD1VVEYtOFwiLFxuXG5cdFx0Lypcblx0XHR0aW1lb3V0OiAwLFxuXHRcdGRhdGE6IG51bGwsXG5cdFx0ZGF0YVR5cGU6IG51bGwsXG5cdFx0dXNlcm5hbWU6IG51bGwsXG5cdFx0cGFzc3dvcmQ6IG51bGwsXG5cdFx0Y2FjaGU6IG51bGwsXG5cdFx0dGhyb3dzOiBmYWxzZSxcblx0XHR0cmFkaXRpb25hbDogZmFsc2UsXG5cdFx0aGVhZGVyczoge30sXG5cdFx0Ki9cblxuXHRcdGFjY2VwdHM6IHtcblx0XHRcdFwiKlwiOiBhbGxUeXBlcyxcblx0XHRcdHRleHQ6IFwidGV4dC9wbGFpblwiLFxuXHRcdFx0aHRtbDogXCJ0ZXh0L2h0bWxcIixcblx0XHRcdHhtbDogXCJhcHBsaWNhdGlvbi94bWwsIHRleHQveG1sXCIsXG5cdFx0XHRqc29uOiBcImFwcGxpY2F0aW9uL2pzb24sIHRleHQvamF2YXNjcmlwdFwiXG5cdFx0fSxcblxuXHRcdGNvbnRlbnRzOiB7XG5cdFx0XHR4bWw6IC9cXGJ4bWxcXGIvLFxuXHRcdFx0aHRtbDogL1xcYmh0bWwvLFxuXHRcdFx0anNvbjogL1xcYmpzb25cXGIvXG5cdFx0fSxcblxuXHRcdHJlc3BvbnNlRmllbGRzOiB7XG5cdFx0XHR4bWw6IFwicmVzcG9uc2VYTUxcIixcblx0XHRcdHRleHQ6IFwicmVzcG9uc2VUZXh0XCIsXG5cdFx0XHRqc29uOiBcInJlc3BvbnNlSlNPTlwiXG5cdFx0fSxcblxuXHRcdC8vIERhdGEgY29udmVydGVyc1xuXHRcdC8vIEtleXMgc2VwYXJhdGUgc291cmNlIChvciBjYXRjaGFsbCBcIipcIikgYW5kIGRlc3RpbmF0aW9uIHR5cGVzIHdpdGggYSBzaW5nbGUgc3BhY2Vcblx0XHRjb252ZXJ0ZXJzOiB7XG5cblx0XHRcdC8vIENvbnZlcnQgYW55dGhpbmcgdG8gdGV4dFxuXHRcdFx0XCIqIHRleHRcIjogU3RyaW5nLFxuXG5cdFx0XHQvLyBUZXh0IHRvIGh0bWwgKHRydWUgPSBubyB0cmFuc2Zvcm1hdGlvbilcblx0XHRcdFwidGV4dCBodG1sXCI6IHRydWUsXG5cblx0XHRcdC8vIEV2YWx1YXRlIHRleHQgYXMgYSBqc29uIGV4cHJlc3Npb25cblx0XHRcdFwidGV4dCBqc29uXCI6IEpTT04ucGFyc2UsXG5cblx0XHRcdC8vIFBhcnNlIHRleHQgYXMgeG1sXG5cdFx0XHRcInRleHQgeG1sXCI6IGpRdWVyeS5wYXJzZVhNTFxuXHRcdH0sXG5cblx0XHQvLyBGb3Igb3B0aW9ucyB0aGF0IHNob3VsZG4ndCBiZSBkZWVwIGV4dGVuZGVkOlxuXHRcdC8vIHlvdSBjYW4gYWRkIHlvdXIgb3duIGN1c3RvbSBvcHRpb25zIGhlcmUgaWZcblx0XHQvLyBhbmQgd2hlbiB5b3UgY3JlYXRlIG9uZSB0aGF0IHNob3VsZG4ndCBiZVxuXHRcdC8vIGRlZXAgZXh0ZW5kZWQgKHNlZSBhamF4RXh0ZW5kKVxuXHRcdGZsYXRPcHRpb25zOiB7XG5cdFx0XHR1cmw6IHRydWUsXG5cdFx0XHRjb250ZXh0OiB0cnVlXG5cdFx0fVxuXHR9LFxuXG5cdC8vIENyZWF0ZXMgYSBmdWxsIGZsZWRnZWQgc2V0dGluZ3Mgb2JqZWN0IGludG8gdGFyZ2V0XG5cdC8vIHdpdGggYm90aCBhamF4U2V0dGluZ3MgYW5kIHNldHRpbmdzIGZpZWxkcy5cblx0Ly8gSWYgdGFyZ2V0IGlzIG9taXR0ZWQsIHdyaXRlcyBpbnRvIGFqYXhTZXR0aW5ncy5cblx0YWpheFNldHVwOiBmdW5jdGlvbiggdGFyZ2V0LCBzZXR0aW5ncyApIHtcblx0XHRyZXR1cm4gc2V0dGluZ3MgP1xuXG5cdFx0XHQvLyBCdWlsZGluZyBhIHNldHRpbmdzIG9iamVjdFxuXHRcdFx0YWpheEV4dGVuZCggYWpheEV4dGVuZCggdGFyZ2V0LCBqUXVlcnkuYWpheFNldHRpbmdzICksIHNldHRpbmdzICkgOlxuXG5cdFx0XHQvLyBFeHRlbmRpbmcgYWpheFNldHRpbmdzXG5cdFx0XHRhamF4RXh0ZW5kKCBqUXVlcnkuYWpheFNldHRpbmdzLCB0YXJnZXQgKTtcblx0fSxcblxuXHRhamF4UHJlZmlsdGVyOiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHByZWZpbHRlcnMgKSxcblx0YWpheFRyYW5zcG9ydDogYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCB0cmFuc3BvcnRzICksXG5cblx0Ly8gTWFpbiBtZXRob2Rcblx0YWpheDogZnVuY3Rpb24oIHVybCwgb3B0aW9ucyApIHtcblxuXHRcdC8vIElmIHVybCBpcyBhbiBvYmplY3QsIHNpbXVsYXRlIHByZS0xLjUgc2lnbmF0dXJlXG5cdFx0aWYgKCB0eXBlb2YgdXJsID09PSBcIm9iamVjdFwiICkge1xuXHRcdFx0b3B0aW9ucyA9IHVybDtcblx0XHRcdHVybCA9IHVuZGVmaW5lZDtcblx0XHR9XG5cblx0XHQvLyBGb3JjZSBvcHRpb25zIHRvIGJlIGFuIG9iamVjdFxuXHRcdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG5cdFx0dmFyIHRyYW5zcG9ydCxcblxuXHRcdFx0Ly8gVVJMIHdpdGhvdXQgYW50aS1jYWNoZSBwYXJhbVxuXHRcdFx0Y2FjaGVVUkwsXG5cblx0XHRcdC8vIFJlc3BvbnNlIGhlYWRlcnNcblx0XHRcdHJlc3BvbnNlSGVhZGVyc1N0cmluZyxcblx0XHRcdHJlc3BvbnNlSGVhZGVycyxcblxuXHRcdFx0Ly8gdGltZW91dCBoYW5kbGVcblx0XHRcdHRpbWVvdXRUaW1lcixcblxuXHRcdFx0Ly8gVXJsIGNsZWFudXAgdmFyXG5cdFx0XHR1cmxBbmNob3IsXG5cblx0XHRcdC8vIFJlcXVlc3Qgc3RhdGUgKGJlY29tZXMgZmFsc2UgdXBvbiBzZW5kIGFuZCB0cnVlIHVwb24gY29tcGxldGlvbilcblx0XHRcdGNvbXBsZXRlZCxcblxuXHRcdFx0Ly8gVG8ga25vdyBpZiBnbG9iYWwgZXZlbnRzIGFyZSB0byBiZSBkaXNwYXRjaGVkXG5cdFx0XHRmaXJlR2xvYmFscyxcblxuXHRcdFx0Ly8gTG9vcCB2YXJpYWJsZVxuXHRcdFx0aSxcblxuXHRcdFx0Ly8gdW5jYWNoZWQgcGFydCBvZiB0aGUgdXJsXG5cdFx0XHR1bmNhY2hlZCxcblxuXHRcdFx0Ly8gQ3JlYXRlIHRoZSBmaW5hbCBvcHRpb25zIG9iamVjdFxuXHRcdFx0cyA9IGpRdWVyeS5hamF4U2V0dXAoIHt9LCBvcHRpb25zICksXG5cblx0XHRcdC8vIENhbGxiYWNrcyBjb250ZXh0XG5cdFx0XHRjYWxsYmFja0NvbnRleHQgPSBzLmNvbnRleHQgfHwgcyxcblxuXHRcdFx0Ly8gQ29udGV4dCBmb3IgZ2xvYmFsIGV2ZW50cyBpcyBjYWxsYmFja0NvbnRleHQgaWYgaXQgaXMgYSBET00gbm9kZSBvciBqUXVlcnkgY29sbGVjdGlvblxuXHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0ID0gcy5jb250ZXh0ICYmXG5cdFx0XHRcdCggY2FsbGJhY2tDb250ZXh0Lm5vZGVUeXBlIHx8IGNhbGxiYWNrQ29udGV4dC5qcXVlcnkgKSA/XG5cdFx0XHRcdFx0alF1ZXJ5KCBjYWxsYmFja0NvbnRleHQgKSA6XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LFxuXG5cdFx0XHQvLyBEZWZlcnJlZHNcblx0XHRcdGRlZmVycmVkID0galF1ZXJ5LkRlZmVycmVkKCksXG5cdFx0XHRjb21wbGV0ZURlZmVycmVkID0galF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksXG5cblx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRzdGF0dXNDb2RlID0gcy5zdGF0dXNDb2RlIHx8IHt9LFxuXG5cdFx0XHQvLyBIZWFkZXJzICh0aGV5IGFyZSBzZW50IGFsbCBhdCBvbmNlKVxuXHRcdFx0cmVxdWVzdEhlYWRlcnMgPSB7fSxcblx0XHRcdHJlcXVlc3RIZWFkZXJzTmFtZXMgPSB7fSxcblxuXHRcdFx0Ly8gRGVmYXVsdCBhYm9ydCBtZXNzYWdlXG5cdFx0XHRzdHJBYm9ydCA9IFwiY2FuY2VsZWRcIixcblxuXHRcdFx0Ly8gRmFrZSB4aHJcblx0XHRcdGpxWEhSID0ge1xuXHRcdFx0XHRyZWFkeVN0YXRlOiAwLFxuXG5cdFx0XHRcdC8vIEJ1aWxkcyBoZWFkZXJzIGhhc2h0YWJsZSBpZiBuZWVkZWRcblx0XHRcdFx0Z2V0UmVzcG9uc2VIZWFkZXI6IGZ1bmN0aW9uKCBrZXkgKSB7XG5cdFx0XHRcdFx0dmFyIG1hdGNoO1xuXHRcdFx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRcdFx0aWYgKCAhcmVzcG9uc2VIZWFkZXJzICkge1xuXHRcdFx0XHRcdFx0XHRyZXNwb25zZUhlYWRlcnMgPSB7fTtcblx0XHRcdFx0XHRcdFx0d2hpbGUgKCAoIG1hdGNoID0gcmhlYWRlcnMuZXhlYyggcmVzcG9uc2VIZWFkZXJzU3RyaW5nICkgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXNwb25zZUhlYWRlcnNbIG1hdGNoWyAxIF0udG9Mb3dlckNhc2UoKSBdID0gbWF0Y2hbIDIgXTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0bWF0Y2ggPSByZXNwb25zZUhlYWRlcnNbIGtleS50b0xvd2VyQ2FzZSgpIF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiBtYXRjaCA9PSBudWxsID8gbnVsbCA6IG1hdGNoO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIFJhdyBzdHJpbmdcblx0XHRcdFx0Z2V0QWxsUmVzcG9uc2VIZWFkZXJzOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRyZXR1cm4gY29tcGxldGVkID8gcmVzcG9uc2VIZWFkZXJzU3RyaW5nIDogbnVsbDtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBDYWNoZXMgdGhlIGhlYWRlclxuXHRcdFx0XHRzZXRSZXF1ZXN0SGVhZGVyOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRcdG5hbWUgPSByZXF1ZXN0SGVhZGVyc05hbWVzWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSA9XG5cdFx0XHRcdFx0XHRcdHJlcXVlc3RIZWFkZXJzTmFtZXNbIG5hbWUudG9Mb3dlckNhc2UoKSBdIHx8IG5hbWU7XG5cdFx0XHRcdFx0XHRyZXF1ZXN0SGVhZGVyc1sgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIE92ZXJyaWRlcyByZXNwb25zZSBjb250ZW50LXR5cGUgaGVhZGVyXG5cdFx0XHRcdG92ZXJyaWRlTWltZVR5cGU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdFx0XHRcdGlmICggY29tcGxldGVkID09IG51bGwgKSB7XG5cdFx0XHRcdFx0XHRzLm1pbWVUeXBlID0gdHlwZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3Ncblx0XHRcdFx0c3RhdHVzQ29kZTogZnVuY3Rpb24oIG1hcCApIHtcblx0XHRcdFx0XHR2YXIgY29kZTtcblx0XHRcdFx0XHRpZiAoIG1hcCApIHtcblx0XHRcdFx0XHRcdGlmICggY29tcGxldGVkICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEV4ZWN1dGUgdGhlIGFwcHJvcHJpYXRlIGNhbGxiYWNrc1xuXHRcdFx0XHRcdFx0XHRqcVhIUi5hbHdheXMoIG1hcFsganFYSFIuc3RhdHVzIF0gKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gTGF6eS1hZGQgdGhlIG5ldyBjYWxsYmFja3MgaW4gYSB3YXkgdGhhdCBwcmVzZXJ2ZXMgb2xkIG9uZXNcblx0XHRcdFx0XHRcdFx0Zm9yICggY29kZSBpbiBtYXAgKSB7XG5cdFx0XHRcdFx0XHRcdFx0c3RhdHVzQ29kZVsgY29kZSBdID0gWyBzdGF0dXNDb2RlWyBjb2RlIF0sIG1hcFsgY29kZSBdIF07XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gQ2FuY2VsIHRoZSByZXF1ZXN0XG5cdFx0XHRcdGFib3J0OiBmdW5jdGlvbiggc3RhdHVzVGV4dCApIHtcblx0XHRcdFx0XHR2YXIgZmluYWxUZXh0ID0gc3RhdHVzVGV4dCB8fCBzdHJBYm9ydDtcblx0XHRcdFx0XHRpZiAoIHRyYW5zcG9ydCApIHtcblx0XHRcdFx0XHRcdHRyYW5zcG9ydC5hYm9ydCggZmluYWxUZXh0ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGRvbmUoIDAsIGZpbmFsVGV4dCApO1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXG5cdFx0Ly8gQXR0YWNoIGRlZmVycmVkc1xuXHRcdGRlZmVycmVkLnByb21pc2UoIGpxWEhSICk7XG5cblx0XHQvLyBBZGQgcHJvdG9jb2wgaWYgbm90IHByb3ZpZGVkIChwcmVmaWx0ZXJzIG1pZ2h0IGV4cGVjdCBpdClcblx0XHQvLyBIYW5kbGUgZmFsc3kgdXJsIGluIHRoZSBzZXR0aW5ncyBvYmplY3QgKCMxMDA5MzogY29uc2lzdGVuY3kgd2l0aCBvbGQgc2lnbmF0dXJlKVxuXHRcdC8vIFdlIGFsc28gdXNlIHRoZSB1cmwgcGFyYW1ldGVyIGlmIGF2YWlsYWJsZVxuXHRcdHMudXJsID0gKCAoIHVybCB8fCBzLnVybCB8fCBsb2NhdGlvbi5ocmVmICkgKyBcIlwiIClcblx0XHRcdC5yZXBsYWNlKCBycHJvdG9jb2wsIGxvY2F0aW9uLnByb3RvY29sICsgXCIvL1wiICk7XG5cblx0XHQvLyBBbGlhcyBtZXRob2Qgb3B0aW9uIHRvIHR5cGUgYXMgcGVyIHRpY2tldCAjMTIwMDRcblx0XHRzLnR5cGUgPSBvcHRpb25zLm1ldGhvZCB8fCBvcHRpb25zLnR5cGUgfHwgcy5tZXRob2QgfHwgcy50eXBlO1xuXG5cdFx0Ly8gRXh0cmFjdCBkYXRhVHlwZXMgbGlzdFxuXHRcdHMuZGF0YVR5cGVzID0gKCBzLmRhdGFUeXBlIHx8IFwiKlwiICkudG9Mb3dlckNhc2UoKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFsgXCJcIiBdO1xuXG5cdFx0Ly8gQSBjcm9zcy1kb21haW4gcmVxdWVzdCBpcyBpbiBvcmRlciB3aGVuIHRoZSBvcmlnaW4gZG9lc24ndCBtYXRjaCB0aGUgY3VycmVudCBvcmlnaW4uXG5cdFx0aWYgKCBzLmNyb3NzRG9tYWluID09IG51bGwgKSB7XG5cdFx0XHR1cmxBbmNob3IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImFcIiApO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTggLSAxMSwgRWRnZSAxMiAtIDE1XG5cdFx0XHQvLyBJRSB0aHJvd3MgZXhjZXB0aW9uIG9uIGFjY2Vzc2luZyB0aGUgaHJlZiBwcm9wZXJ0eSBpZiB1cmwgaXMgbWFsZm9ybWVkLFxuXHRcdFx0Ly8gZS5nLiBodHRwOi8vZXhhbXBsZS5jb206ODB4L1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0dXJsQW5jaG9yLmhyZWYgPSBzLnVybDtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTggLSAxMSBvbmx5XG5cdFx0XHRcdC8vIEFuY2hvcidzIGhvc3QgcHJvcGVydHkgaXNuJ3QgY29ycmVjdGx5IHNldCB3aGVuIHMudXJsIGlzIHJlbGF0aXZlXG5cdFx0XHRcdHVybEFuY2hvci5ocmVmID0gdXJsQW5jaG9yLmhyZWY7XG5cdFx0XHRcdHMuY3Jvc3NEb21haW4gPSBvcmlnaW5BbmNob3IucHJvdG9jb2wgKyBcIi8vXCIgKyBvcmlnaW5BbmNob3IuaG9zdCAhPT1cblx0XHRcdFx0XHR1cmxBbmNob3IucHJvdG9jb2wgKyBcIi8vXCIgKyB1cmxBbmNob3IuaG9zdDtcblx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdC8vIElmIHRoZXJlIGlzIGFuIGVycm9yIHBhcnNpbmcgdGhlIFVSTCwgYXNzdW1lIGl0IGlzIGNyb3NzRG9tYWluLFxuXHRcdFx0XHQvLyBpdCBjYW4gYmUgcmVqZWN0ZWQgYnkgdGhlIHRyYW5zcG9ydCBpZiBpdCBpcyBpbnZhbGlkXG5cdFx0XHRcdHMuY3Jvc3NEb21haW4gPSB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENvbnZlcnQgZGF0YSBpZiBub3QgYWxyZWFkeSBhIHN0cmluZ1xuXHRcdGlmICggcy5kYXRhICYmIHMucHJvY2Vzc0RhdGEgJiYgdHlwZW9mIHMuZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHMuZGF0YSA9IGpRdWVyeS5wYXJhbSggcy5kYXRhLCBzLnRyYWRpdGlvbmFsICk7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgcHJlZmlsdGVyc1xuXHRcdGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBwcmVmaWx0ZXJzLCBzLCBvcHRpb25zLCBqcVhIUiApO1xuXG5cdFx0Ly8gSWYgcmVxdWVzdCB3YXMgYWJvcnRlZCBpbnNpZGUgYSBwcmVmaWx0ZXIsIHN0b3AgdGhlcmVcblx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdHJldHVybiBqcVhIUjtcblx0XHR9XG5cblx0XHQvLyBXZSBjYW4gZmlyZSBnbG9iYWwgZXZlbnRzIGFzIG9mIG5vdyBpZiBhc2tlZCB0b1xuXHRcdC8vIERvbid0IGZpcmUgZXZlbnRzIGlmIGpRdWVyeS5ldmVudCBpcyB1bmRlZmluZWQgaW4gYW4gQU1ELXVzYWdlIHNjZW5hcmlvICgjMTUxMTgpXG5cdFx0ZmlyZUdsb2JhbHMgPSBqUXVlcnkuZXZlbnQgJiYgcy5nbG9iYWw7XG5cblx0XHQvLyBXYXRjaCBmb3IgYSBuZXcgc2V0IG9mIHJlcXVlc3RzXG5cdFx0aWYgKCBmaXJlR2xvYmFscyAmJiBqUXVlcnkuYWN0aXZlKysgPT09IDAgKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggXCJhamF4U3RhcnRcIiApO1xuXHRcdH1cblxuXHRcdC8vIFVwcGVyY2FzZSB0aGUgdHlwZVxuXHRcdHMudHlwZSA9IHMudHlwZS50b1VwcGVyQ2FzZSgpO1xuXG5cdFx0Ly8gRGV0ZXJtaW5lIGlmIHJlcXVlc3QgaGFzIGNvbnRlbnRcblx0XHRzLmhhc0NvbnRlbnQgPSAhcm5vQ29udGVudC50ZXN0KCBzLnR5cGUgKTtcblxuXHRcdC8vIFNhdmUgdGhlIFVSTCBpbiBjYXNlIHdlJ3JlIHRveWluZyB3aXRoIHRoZSBJZi1Nb2RpZmllZC1TaW5jZVxuXHRcdC8vIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciBsYXRlciBvblxuXHRcdC8vIFJlbW92ZSBoYXNoIHRvIHNpbXBsaWZ5IHVybCBtYW5pcHVsYXRpb25cblx0XHRjYWNoZVVSTCA9IHMudXJsLnJlcGxhY2UoIHJoYXNoLCBcIlwiICk7XG5cblx0XHQvLyBNb3JlIG9wdGlvbnMgaGFuZGxpbmcgZm9yIHJlcXVlc3RzIHdpdGggbm8gY29udGVudFxuXHRcdGlmICggIXMuaGFzQ29udGVudCApIHtcblxuXHRcdFx0Ly8gUmVtZW1iZXIgdGhlIGhhc2ggc28gd2UgY2FuIHB1dCBpdCBiYWNrXG5cdFx0XHR1bmNhY2hlZCA9IHMudXJsLnNsaWNlKCBjYWNoZVVSTC5sZW5ndGggKTtcblxuXHRcdFx0Ly8gSWYgZGF0YSBpcyBhdmFpbGFibGUgYW5kIHNob3VsZCBiZSBwcm9jZXNzZWQsIGFwcGVuZCBkYXRhIHRvIHVybFxuXHRcdFx0aWYgKCBzLmRhdGEgJiYgKCBzLnByb2Nlc3NEYXRhIHx8IHR5cGVvZiBzLmRhdGEgPT09IFwic3RyaW5nXCIgKSApIHtcblx0XHRcdFx0Y2FjaGVVUkwgKz0gKCBycXVlcnkudGVzdCggY2FjaGVVUkwgKSA/IFwiJlwiIDogXCI/XCIgKSArIHMuZGF0YTtcblxuXHRcdFx0XHQvLyAjOTY4MjogcmVtb3ZlIGRhdGEgc28gdGhhdCBpdCdzIG5vdCB1c2VkIGluIGFuIGV2ZW50dWFsIHJldHJ5XG5cdFx0XHRcdGRlbGV0ZSBzLmRhdGE7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCBvciB1cGRhdGUgYW50aS1jYWNoZSBwYXJhbSBpZiBuZWVkZWRcblx0XHRcdGlmICggcy5jYWNoZSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdGNhY2hlVVJMID0gY2FjaGVVUkwucmVwbGFjZSggcmFudGlDYWNoZSwgXCIkMVwiICk7XG5cdFx0XHRcdHVuY2FjaGVkID0gKCBycXVlcnkudGVzdCggY2FjaGVVUkwgKSA/IFwiJlwiIDogXCI/XCIgKSArIFwiXz1cIiArICggbm9uY2UrKyApICsgdW5jYWNoZWQ7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFB1dCBoYXNoIGFuZCBhbnRpLWNhY2hlIG9uIHRoZSBVUkwgdGhhdCB3aWxsIGJlIHJlcXVlc3RlZCAoZ2gtMTczMilcblx0XHRcdHMudXJsID0gY2FjaGVVUkwgKyB1bmNhY2hlZDtcblxuXHRcdC8vIENoYW5nZSAnJTIwJyB0byAnKycgaWYgdGhpcyBpcyBlbmNvZGVkIGZvcm0gYm9keSBjb250ZW50IChnaC0yNjU4KVxuXHRcdH0gZWxzZSBpZiAoIHMuZGF0YSAmJiBzLnByb2Nlc3NEYXRhICYmXG5cdFx0XHQoIHMuY29udGVudFR5cGUgfHwgXCJcIiApLmluZGV4T2YoIFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIgKSA9PT0gMCApIHtcblx0XHRcdHMuZGF0YSA9IHMuZGF0YS5yZXBsYWNlKCByMjAsIFwiK1wiICk7XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IHRoZSBJZi1Nb2RpZmllZC1TaW5jZSBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIsIGlmIGluIGlmTW9kaWZpZWQgbW9kZS5cblx0XHRpZiAoIHMuaWZNb2RpZmllZCApIHtcblx0XHRcdGlmICggalF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSApIHtcblx0XHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJJZi1Nb2RpZmllZC1TaW5jZVwiLCBqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdICk7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdICkge1xuXHRcdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIklmLU5vbmUtTWF0Y2hcIiwgalF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBTZXQgdGhlIGNvcnJlY3QgaGVhZGVyLCBpZiBkYXRhIGlzIGJlaW5nIHNlbnRcblx0XHRpZiAoIHMuZGF0YSAmJiBzLmhhc0NvbnRlbnQgJiYgcy5jb250ZW50VHlwZSAhPT0gZmFsc2UgfHwgb3B0aW9ucy5jb250ZW50VHlwZSApIHtcblx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiQ29udGVudC1UeXBlXCIsIHMuY29udGVudFR5cGUgKTtcblx0XHR9XG5cblx0XHQvLyBTZXQgdGhlIEFjY2VwdHMgaGVhZGVyIGZvciB0aGUgc2VydmVyLCBkZXBlbmRpbmcgb24gdGhlIGRhdGFUeXBlXG5cdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlcihcblx0XHRcdFwiQWNjZXB0XCIsXG5cdFx0XHRzLmRhdGFUeXBlc1sgMCBdICYmIHMuYWNjZXB0c1sgcy5kYXRhVHlwZXNbIDAgXSBdID9cblx0XHRcdFx0cy5hY2NlcHRzWyBzLmRhdGFUeXBlc1sgMCBdIF0gK1xuXHRcdFx0XHRcdCggcy5kYXRhVHlwZXNbIDAgXSAhPT0gXCIqXCIgPyBcIiwgXCIgKyBhbGxUeXBlcyArIFwiOyBxPTAuMDFcIiA6IFwiXCIgKSA6XG5cdFx0XHRcdHMuYWNjZXB0c1sgXCIqXCIgXVxuXHRcdCk7XG5cblx0XHQvLyBDaGVjayBmb3IgaGVhZGVycyBvcHRpb25cblx0XHRmb3IgKCBpIGluIHMuaGVhZGVycyApIHtcblx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIGksIHMuaGVhZGVyc1sgaSBdICk7XG5cdFx0fVxuXG5cdFx0Ly8gQWxsb3cgY3VzdG9tIGhlYWRlcnMvbWltZXR5cGVzIGFuZCBlYXJseSBhYm9ydFxuXHRcdGlmICggcy5iZWZvcmVTZW5kICYmXG5cdFx0XHQoIHMuYmVmb3JlU2VuZC5jYWxsKCBjYWxsYmFja0NvbnRleHQsIGpxWEhSLCBzICkgPT09IGZhbHNlIHx8IGNvbXBsZXRlZCApICkge1xuXG5cdFx0XHQvLyBBYm9ydCBpZiBub3QgZG9uZSBhbHJlYWR5IGFuZCByZXR1cm5cblx0XHRcdHJldHVybiBqcVhIUi5hYm9ydCgpO1xuXHRcdH1cblxuXHRcdC8vIEFib3J0aW5nIGlzIG5vIGxvbmdlciBhIGNhbmNlbGxhdGlvblxuXHRcdHN0ckFib3J0ID0gXCJhYm9ydFwiO1xuXG5cdFx0Ly8gSW5zdGFsbCBjYWxsYmFja3Mgb24gZGVmZXJyZWRzXG5cdFx0Y29tcGxldGVEZWZlcnJlZC5hZGQoIHMuY29tcGxldGUgKTtcblx0XHRqcVhIUi5kb25lKCBzLnN1Y2Nlc3MgKTtcblx0XHRqcVhIUi5mYWlsKCBzLmVycm9yICk7XG5cblx0XHQvLyBHZXQgdHJhbnNwb3J0XG5cdFx0dHJhbnNwb3J0ID0gaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHRyYW5zcG9ydHMsIHMsIG9wdGlvbnMsIGpxWEhSICk7XG5cblx0XHQvLyBJZiBubyB0cmFuc3BvcnQsIHdlIGF1dG8tYWJvcnRcblx0XHRpZiAoICF0cmFuc3BvcnQgKSB7XG5cdFx0XHRkb25lKCAtMSwgXCJObyBUcmFuc3BvcnRcIiApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRqcVhIUi5yZWFkeVN0YXRlID0gMTtcblxuXHRcdFx0Ly8gU2VuZCBnbG9iYWwgZXZlbnRcblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBcImFqYXhTZW5kXCIsIFsganFYSFIsIHMgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiByZXF1ZXN0IHdhcyBhYm9ydGVkIGluc2lkZSBhamF4U2VuZCwgc3RvcCB0aGVyZVxuXHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdHJldHVybiBqcVhIUjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVGltZW91dFxuXHRcdFx0aWYgKCBzLmFzeW5jICYmIHMudGltZW91dCA+IDAgKSB7XG5cdFx0XHRcdHRpbWVvdXRUaW1lciA9IHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRqcVhIUi5hYm9ydCggXCJ0aW1lb3V0XCIgKTtcblx0XHRcdFx0fSwgcy50aW1lb3V0ICk7XG5cdFx0XHR9XG5cblx0XHRcdHRyeSB7XG5cdFx0XHRcdGNvbXBsZXRlZCA9IGZhbHNlO1xuXHRcdFx0XHR0cmFuc3BvcnQuc2VuZCggcmVxdWVzdEhlYWRlcnMsIGRvbmUgKTtcblx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdC8vIFJldGhyb3cgcG9zdC1jb21wbGV0aW9uIGV4Y2VwdGlvbnNcblx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdFx0dGhyb3cgZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFByb3BhZ2F0ZSBvdGhlcnMgYXMgcmVzdWx0c1xuXHRcdFx0XHRkb25lKCAtMSwgZSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhbGxiYWNrIGZvciB3aGVuIGV2ZXJ5dGhpbmcgaXMgZG9uZVxuXHRcdGZ1bmN0aW9uIGRvbmUoIHN0YXR1cywgbmF0aXZlU3RhdHVzVGV4dCwgcmVzcG9uc2VzLCBoZWFkZXJzICkge1xuXHRcdFx0dmFyIGlzU3VjY2Vzcywgc3VjY2VzcywgZXJyb3IsIHJlc3BvbnNlLCBtb2RpZmllZCxcblx0XHRcdFx0c3RhdHVzVGV4dCA9IG5hdGl2ZVN0YXR1c1RleHQ7XG5cblx0XHRcdC8vIElnbm9yZSByZXBlYXQgaW52b2NhdGlvbnNcblx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGNvbXBsZXRlZCA9IHRydWU7XG5cblx0XHRcdC8vIENsZWFyIHRpbWVvdXQgaWYgaXQgZXhpc3RzXG5cdFx0XHRpZiAoIHRpbWVvdXRUaW1lciApIHtcblx0XHRcdFx0d2luZG93LmNsZWFyVGltZW91dCggdGltZW91dFRpbWVyICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIERlcmVmZXJlbmNlIHRyYW5zcG9ydCBmb3IgZWFybHkgZ2FyYmFnZSBjb2xsZWN0aW9uXG5cdFx0XHQvLyAobm8gbWF0dGVyIGhvdyBsb25nIHRoZSBqcVhIUiBvYmplY3Qgd2lsbCBiZSB1c2VkKVxuXHRcdFx0dHJhbnNwb3J0ID0gdW5kZWZpbmVkO1xuXG5cdFx0XHQvLyBDYWNoZSByZXNwb25zZSBoZWFkZXJzXG5cdFx0XHRyZXNwb25zZUhlYWRlcnNTdHJpbmcgPSBoZWFkZXJzIHx8IFwiXCI7XG5cblx0XHRcdC8vIFNldCByZWFkeVN0YXRlXG5cdFx0XHRqcVhIUi5yZWFkeVN0YXRlID0gc3RhdHVzID4gMCA/IDQgOiAwO1xuXG5cdFx0XHQvLyBEZXRlcm1pbmUgaWYgc3VjY2Vzc2Z1bFxuXHRcdFx0aXNTdWNjZXNzID0gc3RhdHVzID49IDIwMCAmJiBzdGF0dXMgPCAzMDAgfHwgc3RhdHVzID09PSAzMDQ7XG5cblx0XHRcdC8vIEdldCByZXNwb25zZSBkYXRhXG5cdFx0XHRpZiAoIHJlc3BvbnNlcyApIHtcblx0XHRcdFx0cmVzcG9uc2UgPSBhamF4SGFuZGxlUmVzcG9uc2VzKCBzLCBqcVhIUiwgcmVzcG9uc2VzICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbnZlcnQgbm8gbWF0dGVyIHdoYXQgKHRoYXQgd2F5IHJlc3BvbnNlWFhYIGZpZWxkcyBhcmUgYWx3YXlzIHNldClcblx0XHRcdHJlc3BvbnNlID0gYWpheENvbnZlcnQoIHMsIHJlc3BvbnNlLCBqcVhIUiwgaXNTdWNjZXNzICk7XG5cblx0XHRcdC8vIElmIHN1Y2Nlc3NmdWwsIGhhbmRsZSB0eXBlIGNoYWluaW5nXG5cdFx0XHRpZiAoIGlzU3VjY2VzcyApIHtcblxuXHRcdFx0XHQvLyBTZXQgdGhlIElmLU1vZGlmaWVkLVNpbmNlIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciwgaWYgaW4gaWZNb2RpZmllZCBtb2RlLlxuXHRcdFx0XHRpZiAoIHMuaWZNb2RpZmllZCApIHtcblx0XHRcdFx0XHRtb2RpZmllZCA9IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKCBcIkxhc3QtTW9kaWZpZWRcIiApO1xuXHRcdFx0XHRcdGlmICggbW9kaWZpZWQgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdID0gbW9kaWZpZWQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdG1vZGlmaWVkID0ganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoIFwiZXRhZ1wiICk7XG5cdFx0XHRcdFx0aWYgKCBtb2RpZmllZCApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdID0gbW9kaWZpZWQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gaWYgbm8gY29udGVudFxuXHRcdFx0XHRpZiAoIHN0YXR1cyA9PT0gMjA0IHx8IHMudHlwZSA9PT0gXCJIRUFEXCIgKSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwibm9jb250ZW50XCI7XG5cblx0XHRcdFx0Ly8gaWYgbm90IG1vZGlmaWVkXG5cdFx0XHRcdH0gZWxzZSBpZiAoIHN0YXR1cyA9PT0gMzA0ICkge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcIm5vdG1vZGlmaWVkXCI7XG5cblx0XHRcdFx0Ly8gSWYgd2UgaGF2ZSBkYXRhLCBsZXQncyBjb252ZXJ0IGl0XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IHJlc3BvbnNlLnN0YXRlO1xuXHRcdFx0XHRcdHN1Y2Nlc3MgPSByZXNwb25zZS5kYXRhO1xuXHRcdFx0XHRcdGVycm9yID0gcmVzcG9uc2UuZXJyb3I7XG5cdFx0XHRcdFx0aXNTdWNjZXNzID0gIWVycm9yO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIEV4dHJhY3QgZXJyb3IgZnJvbSBzdGF0dXNUZXh0IGFuZCBub3JtYWxpemUgZm9yIG5vbi1hYm9ydHNcblx0XHRcdFx0ZXJyb3IgPSBzdGF0dXNUZXh0O1xuXHRcdFx0XHRpZiAoIHN0YXR1cyB8fCAhc3RhdHVzVGV4dCApIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJlcnJvclwiO1xuXHRcdFx0XHRcdGlmICggc3RhdHVzIDwgMCApIHtcblx0XHRcdFx0XHRcdHN0YXR1cyA9IDA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNldCBkYXRhIGZvciB0aGUgZmFrZSB4aHIgb2JqZWN0XG5cdFx0XHRqcVhIUi5zdGF0dXMgPSBzdGF0dXM7XG5cdFx0XHRqcVhIUi5zdGF0dXNUZXh0ID0gKCBuYXRpdmVTdGF0dXNUZXh0IHx8IHN0YXR1c1RleHQgKSArIFwiXCI7XG5cblx0XHRcdC8vIFN1Y2Nlc3MvRXJyb3Jcblx0XHRcdGlmICggaXNTdWNjZXNzICkge1xuXHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIHN1Y2Nlc3MsIHN0YXR1c1RleHQsIGpxWEhSIF0gKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRlZmVycmVkLnJlamVjdFdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBqcVhIUiwgc3RhdHVzVGV4dCwgZXJyb3IgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuXHRcdFx0anFYSFIuc3RhdHVzQ29kZSggc3RhdHVzQ29kZSApO1xuXHRcdFx0c3RhdHVzQ29kZSA9IHVuZGVmaW5lZDtcblxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIGlzU3VjY2VzcyA/IFwiYWpheFN1Y2Nlc3NcIiA6IFwiYWpheEVycm9yXCIsXG5cdFx0XHRcdFx0WyBqcVhIUiwgcywgaXNTdWNjZXNzID8gc3VjY2VzcyA6IGVycm9yIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29tcGxldGVcblx0XHRcdGNvbXBsZXRlRGVmZXJyZWQuZmlyZVdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBqcVhIUiwgc3RhdHVzVGV4dCBdICk7XG5cblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBcImFqYXhDb21wbGV0ZVwiLCBbIGpxWEhSLCBzIF0gKTtcblxuXHRcdFx0XHQvLyBIYW5kbGUgdGhlIGdsb2JhbCBBSkFYIGNvdW50ZXJcblx0XHRcdFx0aWYgKCAhKCAtLWpRdWVyeS5hY3RpdmUgKSApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggXCJhamF4U3RvcFwiICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4ganFYSFI7XG5cdH0sXG5cblx0Z2V0SlNPTjogZnVuY3Rpb24oIHVybCwgZGF0YSwgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5nZXQoIHVybCwgZGF0YSwgY2FsbGJhY2ssIFwianNvblwiICk7XG5cdH0sXG5cblx0Z2V0U2NyaXB0OiBmdW5jdGlvbiggdXJsLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdldCggdXJsLCB1bmRlZmluZWQsIGNhbGxiYWNrLCBcInNjcmlwdFwiICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIFsgXCJnZXRcIiwgXCJwb3N0XCIgXSwgZnVuY3Rpb24oIGksIG1ldGhvZCApIHtcblx0alF1ZXJ5WyBtZXRob2QgXSA9IGZ1bmN0aW9uKCB1cmwsIGRhdGEsIGNhbGxiYWNrLCB0eXBlICkge1xuXG5cdFx0Ly8gU2hpZnQgYXJndW1lbnRzIGlmIGRhdGEgYXJndW1lbnQgd2FzIG9taXR0ZWRcblx0XHRpZiAoIGlzRnVuY3Rpb24oIGRhdGEgKSApIHtcblx0XHRcdHR5cGUgPSB0eXBlIHx8IGNhbGxiYWNrO1xuXHRcdFx0Y2FsbGJhY2sgPSBkYXRhO1xuXHRcdFx0ZGF0YSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cblx0XHQvLyBUaGUgdXJsIGNhbiBiZSBhbiBvcHRpb25zIG9iamVjdCAod2hpY2ggdGhlbiBtdXN0IGhhdmUgLnVybClcblx0XHRyZXR1cm4galF1ZXJ5LmFqYXgoIGpRdWVyeS5leHRlbmQoIHtcblx0XHRcdHVybDogdXJsLFxuXHRcdFx0dHlwZTogbWV0aG9kLFxuXHRcdFx0ZGF0YVR5cGU6IHR5cGUsXG5cdFx0XHRkYXRhOiBkYXRhLFxuXHRcdFx0c3VjY2VzczogY2FsbGJhY2tcblx0XHR9LCBqUXVlcnkuaXNQbGFpbk9iamVjdCggdXJsICkgJiYgdXJsICkgKTtcblx0fTtcbn0gKTtcblxuXG5qUXVlcnkuX2V2YWxVcmwgPSBmdW5jdGlvbiggdXJsICkge1xuXHRyZXR1cm4galF1ZXJ5LmFqYXgoIHtcblx0XHR1cmw6IHVybCxcblxuXHRcdC8vIE1ha2UgdGhpcyBleHBsaWNpdCwgc2luY2UgdXNlciBjYW4gb3ZlcnJpZGUgdGhpcyB0aHJvdWdoIGFqYXhTZXR1cCAoIzExMjY0KVxuXHRcdHR5cGU6IFwiR0VUXCIsXG5cdFx0ZGF0YVR5cGU6IFwic2NyaXB0XCIsXG5cdFx0Y2FjaGU6IHRydWUsXG5cdFx0YXN5bmM6IGZhbHNlLFxuXHRcdGdsb2JhbDogZmFsc2UsXG5cdFx0XCJ0aHJvd3NcIjogdHJ1ZVxuXHR9ICk7XG59O1xuXG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0d3JhcEFsbDogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0dmFyIHdyYXA7XG5cblx0XHRpZiAoIHRoaXNbIDAgXSApIHtcblx0XHRcdGlmICggaXNGdW5jdGlvbiggaHRtbCApICkge1xuXHRcdFx0XHRodG1sID0gaHRtbC5jYWxsKCB0aGlzWyAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVGhlIGVsZW1lbnRzIHRvIHdyYXAgdGhlIHRhcmdldCBhcm91bmRcblx0XHRcdHdyYXAgPSBqUXVlcnkoIGh0bWwsIHRoaXNbIDAgXS5vd25lckRvY3VtZW50ICkuZXEoIDAgKS5jbG9uZSggdHJ1ZSApO1xuXG5cdFx0XHRpZiAoIHRoaXNbIDAgXS5wYXJlbnROb2RlICkge1xuXHRcdFx0XHR3cmFwLmluc2VydEJlZm9yZSggdGhpc1sgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdHdyYXAubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIGVsZW0gPSB0aGlzO1xuXG5cdFx0XHRcdHdoaWxlICggZWxlbS5maXJzdEVsZW1lbnRDaGlsZCApIHtcblx0XHRcdFx0XHRlbGVtID0gZWxlbS5maXJzdEVsZW1lbnRDaGlsZDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBlbGVtO1xuXHRcdFx0fSApLmFwcGVuZCggdGhpcyApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHdyYXBJbm5lcjogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBodG1sICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkud3JhcElubmVyKCBodG1sLmNhbGwoIHRoaXMsIGkgKSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHNlbGYgPSBqUXVlcnkoIHRoaXMgKSxcblx0XHRcdFx0Y29udGVudHMgPSBzZWxmLmNvbnRlbnRzKCk7XG5cblx0XHRcdGlmICggY29udGVudHMubGVuZ3RoICkge1xuXHRcdFx0XHRjb250ZW50cy53cmFwQWxsKCBodG1sICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHNlbGYuYXBwZW5kKCBodG1sICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdHdyYXA6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdHZhciBodG1sSXNGdW5jdGlvbiA9IGlzRnVuY3Rpb24oIGh0bWwgKTtcblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0alF1ZXJ5KCB0aGlzICkud3JhcEFsbCggaHRtbElzRnVuY3Rpb24gPyBodG1sLmNhbGwoIHRoaXMsIGkgKSA6IGh0bWwgKTtcblx0XHR9ICk7XG5cdH0sXG5cblx0dW53cmFwOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dGhpcy5wYXJlbnQoIHNlbGVjdG9yICkubm90KCBcImJvZHlcIiApLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5KCB0aGlzICkucmVwbGFjZVdpdGgoIHRoaXMuY2hpbGROb2RlcyApO1xuXHRcdH0gKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxufSApO1xuXG5cbmpRdWVyeS5leHByLnBzZXVkb3MuaGlkZGVuID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHJldHVybiAhalF1ZXJ5LmV4cHIucHNldWRvcy52aXNpYmxlKCBlbGVtICk7XG59O1xualF1ZXJ5LmV4cHIucHNldWRvcy52aXNpYmxlID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHJldHVybiAhISggZWxlbS5vZmZzZXRXaWR0aCB8fCBlbGVtLm9mZnNldEhlaWdodCB8fCBlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoICk7XG59O1xuXG5cblxuXG5qUXVlcnkuYWpheFNldHRpbmdzLnhociA9IGZ1bmN0aW9uKCkge1xuXHR0cnkge1xuXHRcdHJldHVybiBuZXcgd2luZG93LlhNTEh0dHBSZXF1ZXN0KCk7XG5cdH0gY2F0Y2ggKCBlICkge31cbn07XG5cbnZhciB4aHJTdWNjZXNzU3RhdHVzID0ge1xuXG5cdFx0Ly8gRmlsZSBwcm90b2NvbCBhbHdheXMgeWllbGRzIHN0YXR1cyBjb2RlIDAsIGFzc3VtZSAyMDBcblx0XHQwOiAyMDAsXG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdC8vICMxNDUwOiBzb21ldGltZXMgSUUgcmV0dXJucyAxMjIzIHdoZW4gaXQgc2hvdWxkIGJlIDIwNFxuXHRcdDEyMjM6IDIwNFxuXHR9LFxuXHR4aHJTdXBwb3J0ZWQgPSBqUXVlcnkuYWpheFNldHRpbmdzLnhocigpO1xuXG5zdXBwb3J0LmNvcnMgPSAhIXhoclN1cHBvcnRlZCAmJiAoIFwid2l0aENyZWRlbnRpYWxzXCIgaW4geGhyU3VwcG9ydGVkICk7XG5zdXBwb3J0LmFqYXggPSB4aHJTdXBwb3J0ZWQgPSAhIXhoclN1cHBvcnRlZDtcblxualF1ZXJ5LmFqYXhUcmFuc3BvcnQoIGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXHR2YXIgY2FsbGJhY2ssIGVycm9yQ2FsbGJhY2s7XG5cblx0Ly8gQ3Jvc3MgZG9tYWluIG9ubHkgYWxsb3dlZCBpZiBzdXBwb3J0ZWQgdGhyb3VnaCBYTUxIdHRwUmVxdWVzdFxuXHRpZiAoIHN1cHBvcnQuY29ycyB8fCB4aHJTdXBwb3J0ZWQgJiYgIW9wdGlvbnMuY3Jvc3NEb21haW4gKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHNlbmQ6IGZ1bmN0aW9uKCBoZWFkZXJzLCBjb21wbGV0ZSApIHtcblx0XHRcdFx0dmFyIGksXG5cdFx0XHRcdFx0eGhyID0gb3B0aW9ucy54aHIoKTtcblxuXHRcdFx0XHR4aHIub3Blbihcblx0XHRcdFx0XHRvcHRpb25zLnR5cGUsXG5cdFx0XHRcdFx0b3B0aW9ucy51cmwsXG5cdFx0XHRcdFx0b3B0aW9ucy5hc3luYyxcblx0XHRcdFx0XHRvcHRpb25zLnVzZXJuYW1lLFxuXHRcdFx0XHRcdG9wdGlvbnMucGFzc3dvcmRcblx0XHRcdFx0KTtcblxuXHRcdFx0XHQvLyBBcHBseSBjdXN0b20gZmllbGRzIGlmIHByb3ZpZGVkXG5cdFx0XHRcdGlmICggb3B0aW9ucy54aHJGaWVsZHMgKSB7XG5cdFx0XHRcdFx0Zm9yICggaSBpbiBvcHRpb25zLnhockZpZWxkcyApIHtcblx0XHRcdFx0XHRcdHhoclsgaSBdID0gb3B0aW9ucy54aHJGaWVsZHNbIGkgXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBPdmVycmlkZSBtaW1lIHR5cGUgaWYgbmVlZGVkXG5cdFx0XHRcdGlmICggb3B0aW9ucy5taW1lVHlwZSAmJiB4aHIub3ZlcnJpZGVNaW1lVHlwZSApIHtcblx0XHRcdFx0XHR4aHIub3ZlcnJpZGVNaW1lVHlwZSggb3B0aW9ucy5taW1lVHlwZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gWC1SZXF1ZXN0ZWQtV2l0aCBoZWFkZXJcblx0XHRcdFx0Ly8gRm9yIGNyb3NzLWRvbWFpbiByZXF1ZXN0cywgc2VlaW5nIGFzIGNvbmRpdGlvbnMgZm9yIGEgcHJlZmxpZ2h0IGFyZVxuXHRcdFx0XHQvLyBha2luIHRvIGEgamlnc2F3IHB1enpsZSwgd2Ugc2ltcGx5IG5ldmVyIHNldCBpdCB0byBiZSBzdXJlLlxuXHRcdFx0XHQvLyAoaXQgY2FuIGFsd2F5cyBiZSBzZXQgb24gYSBwZXItcmVxdWVzdCBiYXNpcyBvciBldmVuIHVzaW5nIGFqYXhTZXR1cClcblx0XHRcdFx0Ly8gRm9yIHNhbWUtZG9tYWluIHJlcXVlc3RzLCB3b24ndCBjaGFuZ2UgaGVhZGVyIGlmIGFscmVhZHkgcHJvdmlkZWQuXG5cdFx0XHRcdGlmICggIW9wdGlvbnMuY3Jvc3NEb21haW4gJiYgIWhlYWRlcnNbIFwiWC1SZXF1ZXN0ZWQtV2l0aFwiIF0gKSB7XG5cdFx0XHRcdFx0aGVhZGVyc1sgXCJYLVJlcXVlc3RlZC1XaXRoXCIgXSA9IFwiWE1MSHR0cFJlcXVlc3RcIjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFNldCBoZWFkZXJzXG5cdFx0XHRcdGZvciAoIGkgaW4gaGVhZGVycyApIHtcblx0XHRcdFx0XHR4aHIuc2V0UmVxdWVzdEhlYWRlciggaSwgaGVhZGVyc1sgaSBdICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBDYWxsYmFja1xuXHRcdFx0XHRjYWxsYmFjayA9IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdFx0XHRcdHJldHVybiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0XHRcdGNhbGxiYWNrID0gZXJyb3JDYWxsYmFjayA9IHhoci5vbmxvYWQgPVxuXHRcdFx0XHRcdFx0XHRcdHhoci5vbmVycm9yID0geGhyLm9uYWJvcnQgPSB4aHIub250aW1lb3V0ID1cblx0XHRcdFx0XHRcdFx0XHRcdHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBudWxsO1xuXG5cdFx0XHRcdFx0XHRcdGlmICggdHlwZSA9PT0gXCJhYm9ydFwiICkge1xuXHRcdFx0XHRcdFx0XHRcdHhoci5hYm9ydCgpO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCB0eXBlID09PSBcImVycm9yXCIgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdFx0XHRcdFx0XHRcdC8vIE9uIGEgbWFudWFsIG5hdGl2ZSBhYm9ydCwgSUU5IHRocm93c1xuXHRcdFx0XHRcdFx0XHRcdC8vIGVycm9ycyBvbiBhbnkgcHJvcGVydHkgYWNjZXNzIHRoYXQgaXMgbm90IHJlYWR5U3RhdGVcblx0XHRcdFx0XHRcdFx0XHRpZiAoIHR5cGVvZiB4aHIuc3RhdHVzICE9PSBcIm51bWJlclwiICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoIDAsIFwiZXJyb3JcIiApO1xuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjb21wbGV0ZShcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBGaWxlOiBwcm90b2NvbCBhbHdheXMgeWllbGRzIHN0YXR1cyAwOyBzZWUgIzg2MDUsICMxNDIwN1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzVGV4dFxuXHRcdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHJTdWNjZXNzU3RhdHVzWyB4aHIuc3RhdHVzIF0gfHwgeGhyLnN0YXR1cyxcblx0XHRcdFx0XHRcdFx0XHRcdHhoci5zdGF0dXNUZXh0LFxuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSUU5IGhhcyBubyBYSFIyIGJ1dCB0aHJvd3Mgb24gYmluYXJ5ICh0cmFjLTExNDI2KVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gRm9yIFhIUjIgbm9uLXRleHQsIGxldCB0aGUgY2FsbGVyIGhhbmRsZSBpdCAoZ2gtMjQ5OClcblx0XHRcdFx0XHRcdFx0XHRcdCggeGhyLnJlc3BvbnNlVHlwZSB8fCBcInRleHRcIiApICE9PSBcInRleHRcIiAgfHxcblx0XHRcdFx0XHRcdFx0XHRcdHR5cGVvZiB4aHIucmVzcG9uc2VUZXh0ICE9PSBcInN0cmluZ1wiID9cblx0XHRcdFx0XHRcdFx0XHRcdFx0eyBiaW5hcnk6IHhoci5yZXNwb25zZSB9IDpcblx0XHRcdFx0XHRcdFx0XHRcdFx0eyB0ZXh0OiB4aHIucmVzcG9uc2VUZXh0IH0sXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKClcblx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fTtcblxuXHRcdFx0XHQvLyBMaXN0ZW4gdG8gZXZlbnRzXG5cdFx0XHRcdHhoci5vbmxvYWQgPSBjYWxsYmFjaygpO1xuXHRcdFx0XHRlcnJvckNhbGxiYWNrID0geGhyLm9uZXJyb3IgPSB4aHIub250aW1lb3V0ID0gY2FsbGJhY2soIFwiZXJyb3JcIiApO1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDkgb25seVxuXHRcdFx0XHQvLyBVc2Ugb25yZWFkeXN0YXRlY2hhbmdlIHRvIHJlcGxhY2Ugb25hYm9ydFxuXHRcdFx0XHQvLyB0byBoYW5kbGUgdW5jYXVnaHQgYWJvcnRzXG5cdFx0XHRcdGlmICggeGhyLm9uYWJvcnQgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHR4aHIub25hYm9ydCA9IGVycm9yQ2FsbGJhY2s7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0eGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdFx0XHQvLyBDaGVjayByZWFkeVN0YXRlIGJlZm9yZSB0aW1lb3V0IGFzIGl0IGNoYW5nZXNcblx0XHRcdFx0XHRcdGlmICggeGhyLnJlYWR5U3RhdGUgPT09IDQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gQWxsb3cgb25lcnJvciB0byBiZSBjYWxsZWQgZmlyc3QsXG5cdFx0XHRcdFx0XHRcdC8vIGJ1dCB0aGF0IHdpbGwgbm90IGhhbmRsZSBhIG5hdGl2ZSBhYm9ydFxuXHRcdFx0XHRcdFx0XHQvLyBBbHNvLCBzYXZlIGVycm9yQ2FsbGJhY2sgdG8gYSB2YXJpYWJsZVxuXHRcdFx0XHRcdFx0XHQvLyBhcyB4aHIub25lcnJvciBjYW5ub3QgYmUgYWNjZXNzZWRcblx0XHRcdFx0XHRcdFx0d2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRlcnJvckNhbGxiYWNrKCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIENyZWF0ZSB0aGUgYWJvcnQgY2FsbGJhY2tcblx0XHRcdFx0Y2FsbGJhY2sgPSBjYWxsYmFjayggXCJhYm9ydFwiICk7XG5cblx0XHRcdFx0dHJ5IHtcblxuXHRcdFx0XHRcdC8vIERvIHNlbmQgdGhlIHJlcXVlc3QgKHRoaXMgbWF5IHJhaXNlIGFuIGV4Y2VwdGlvbilcblx0XHRcdFx0XHR4aHIuc2VuZCggb3B0aW9ucy5oYXNDb250ZW50ICYmIG9wdGlvbnMuZGF0YSB8fCBudWxsICk7XG5cdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdFx0Ly8gIzE0NjgzOiBPbmx5IHJldGhyb3cgaWYgdGhpcyBoYXNuJ3QgYmVlbiBub3RpZmllZCBhcyBhbiBlcnJvciB5ZXRcblx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0dGhyb3cgZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cblx0XHRcdGFib3J0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRjYWxsYmFjaygpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxufSApO1xuXG5cblxuXG4vLyBQcmV2ZW50IGF1dG8tZXhlY3V0aW9uIG9mIHNjcmlwdHMgd2hlbiBubyBleHBsaWNpdCBkYXRhVHlwZSB3YXMgcHJvdmlkZWQgKFNlZSBnaC0yNDMyKVxualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIGZ1bmN0aW9uKCBzICkge1xuXHRpZiAoIHMuY3Jvc3NEb21haW4gKSB7XG5cdFx0cy5jb250ZW50cy5zY3JpcHQgPSBmYWxzZTtcblx0fVxufSApO1xuXG4vLyBJbnN0YWxsIHNjcmlwdCBkYXRhVHlwZVxualF1ZXJ5LmFqYXhTZXR1cCgge1xuXHRhY2NlcHRzOiB7XG5cdFx0c2NyaXB0OiBcInRleHQvamF2YXNjcmlwdCwgYXBwbGljYXRpb24vamF2YXNjcmlwdCwgXCIgK1xuXHRcdFx0XCJhcHBsaWNhdGlvbi9lY21hc2NyaXB0LCBhcHBsaWNhdGlvbi94LWVjbWFzY3JpcHRcIlxuXHR9LFxuXHRjb250ZW50czoge1xuXHRcdHNjcmlwdDogL1xcYig/OmphdmF8ZWNtYSlzY3JpcHRcXGIvXG5cdH0sXG5cdGNvbnZlcnRlcnM6IHtcblx0XHRcInRleHQgc2NyaXB0XCI6IGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHRcdFx0alF1ZXJ5Lmdsb2JhbEV2YWwoIHRleHQgKTtcblx0XHRcdHJldHVybiB0ZXh0O1xuXHRcdH1cblx0fVxufSApO1xuXG4vLyBIYW5kbGUgY2FjaGUncyBzcGVjaWFsIGNhc2UgYW5kIGNyb3NzRG9tYWluXG5qUXVlcnkuYWpheFByZWZpbHRlciggXCJzY3JpcHRcIiwgZnVuY3Rpb24oIHMgKSB7XG5cdGlmICggcy5jYWNoZSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdHMuY2FjaGUgPSBmYWxzZTtcblx0fVxuXHRpZiAoIHMuY3Jvc3NEb21haW4gKSB7XG5cdFx0cy50eXBlID0gXCJHRVRcIjtcblx0fVxufSApO1xuXG4vLyBCaW5kIHNjcmlwdCB0YWcgaGFjayB0cmFuc3BvcnRcbmpRdWVyeS5hamF4VHJhbnNwb3J0KCBcInNjcmlwdFwiLCBmdW5jdGlvbiggcyApIHtcblxuXHQvLyBUaGlzIHRyYW5zcG9ydCBvbmx5IGRlYWxzIHdpdGggY3Jvc3MgZG9tYWluIHJlcXVlc3RzXG5cdGlmICggcy5jcm9zc0RvbWFpbiApIHtcblx0XHR2YXIgc2NyaXB0LCBjYWxsYmFjaztcblx0XHRyZXR1cm4ge1xuXHRcdFx0c2VuZDogZnVuY3Rpb24oIF8sIGNvbXBsZXRlICkge1xuXHRcdFx0XHRzY3JpcHQgPSBqUXVlcnkoIFwiPHNjcmlwdD5cIiApLnByb3AoIHtcblx0XHRcdFx0XHRjaGFyc2V0OiBzLnNjcmlwdENoYXJzZXQsXG5cdFx0XHRcdFx0c3JjOiBzLnVybFxuXHRcdFx0XHR9ICkub24oXG5cdFx0XHRcdFx0XCJsb2FkIGVycm9yXCIsXG5cdFx0XHRcdFx0Y2FsbGJhY2sgPSBmdW5jdGlvbiggZXZ0ICkge1xuXHRcdFx0XHRcdFx0c2NyaXB0LnJlbW92ZSgpO1xuXHRcdFx0XHRcdFx0Y2FsbGJhY2sgPSBudWxsO1xuXHRcdFx0XHRcdFx0aWYgKCBldnQgKSB7XG5cdFx0XHRcdFx0XHRcdGNvbXBsZXRlKCBldnQudHlwZSA9PT0gXCJlcnJvclwiID8gNDA0IDogMjAwLCBldnQudHlwZSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0KTtcblxuXHRcdFx0XHQvLyBVc2UgbmF0aXZlIERPTSBtYW5pcHVsYXRpb24gdG8gYXZvaWQgb3VyIGRvbU1hbmlwIEFKQVggdHJpY2tlcnlcblx0XHRcdFx0ZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZCggc2NyaXB0WyAwIF0gKTtcblx0XHRcdH0sXG5cdFx0XHRhYm9ydDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0Y2FsbGJhY2soKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxudmFyIG9sZENhbGxiYWNrcyA9IFtdLFxuXHRyanNvbnAgPSAvKD0pXFw/KD89JnwkKXxcXD9cXD8vO1xuXG4vLyBEZWZhdWx0IGpzb25wIHNldHRpbmdzXG5qUXVlcnkuYWpheFNldHVwKCB7XG5cdGpzb25wOiBcImNhbGxiYWNrXCIsXG5cdGpzb25wQ2FsbGJhY2s6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBjYWxsYmFjayA9IG9sZENhbGxiYWNrcy5wb3AoKSB8fCAoIGpRdWVyeS5leHBhbmRvICsgXCJfXCIgKyAoIG5vbmNlKysgKSApO1xuXHRcdHRoaXNbIGNhbGxiYWNrIF0gPSB0cnVlO1xuXHRcdHJldHVybiBjYWxsYmFjaztcblx0fVxufSApO1xuXG4vLyBEZXRlY3QsIG5vcm1hbGl6ZSBvcHRpb25zIGFuZCBpbnN0YWxsIGNhbGxiYWNrcyBmb3IganNvbnAgcmVxdWVzdHNcbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBcImpzb24ganNvbnBcIiwgZnVuY3Rpb24oIHMsIG9yaWdpbmFsU2V0dGluZ3MsIGpxWEhSICkge1xuXG5cdHZhciBjYWxsYmFja05hbWUsIG92ZXJ3cml0dGVuLCByZXNwb25zZUNvbnRhaW5lcixcblx0XHRqc29uUHJvcCA9IHMuanNvbnAgIT09IGZhbHNlICYmICggcmpzb25wLnRlc3QoIHMudXJsICkgP1xuXHRcdFx0XCJ1cmxcIiA6XG5cdFx0XHR0eXBlb2Ygcy5kYXRhID09PSBcInN0cmluZ1wiICYmXG5cdFx0XHRcdCggcy5jb250ZW50VHlwZSB8fCBcIlwiIClcblx0XHRcdFx0XHQuaW5kZXhPZiggXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIiApID09PSAwICYmXG5cdFx0XHRcdHJqc29ucC50ZXN0KCBzLmRhdGEgKSAmJiBcImRhdGFcIlxuXHRcdCk7XG5cblx0Ly8gSGFuZGxlIGlmZiB0aGUgZXhwZWN0ZWQgZGF0YSB0eXBlIGlzIFwianNvbnBcIiBvciB3ZSBoYXZlIGEgcGFyYW1ldGVyIHRvIHNldFxuXHRpZiAoIGpzb25Qcm9wIHx8IHMuZGF0YVR5cGVzWyAwIF0gPT09IFwianNvbnBcIiApIHtcblxuXHRcdC8vIEdldCBjYWxsYmFjayBuYW1lLCByZW1lbWJlcmluZyBwcmVleGlzdGluZyB2YWx1ZSBhc3NvY2lhdGVkIHdpdGggaXRcblx0XHRjYWxsYmFja05hbWUgPSBzLmpzb25wQ2FsbGJhY2sgPSBpc0Z1bmN0aW9uKCBzLmpzb25wQ2FsbGJhY2sgKSA/XG5cdFx0XHRzLmpzb25wQ2FsbGJhY2soKSA6XG5cdFx0XHRzLmpzb25wQ2FsbGJhY2s7XG5cblx0XHQvLyBJbnNlcnQgY2FsbGJhY2sgaW50byB1cmwgb3IgZm9ybSBkYXRhXG5cdFx0aWYgKCBqc29uUHJvcCApIHtcblx0XHRcdHNbIGpzb25Qcm9wIF0gPSBzWyBqc29uUHJvcCBdLnJlcGxhY2UoIHJqc29ucCwgXCIkMVwiICsgY2FsbGJhY2tOYW1lICk7XG5cdFx0fSBlbHNlIGlmICggcy5qc29ucCAhPT0gZmFsc2UgKSB7XG5cdFx0XHRzLnVybCArPSAoIHJxdWVyeS50ZXN0KCBzLnVybCApID8gXCImXCIgOiBcIj9cIiApICsgcy5qc29ucCArIFwiPVwiICsgY2FsbGJhY2tOYW1lO1xuXHRcdH1cblxuXHRcdC8vIFVzZSBkYXRhIGNvbnZlcnRlciB0byByZXRyaWV2ZSBqc29uIGFmdGVyIHNjcmlwdCBleGVjdXRpb25cblx0XHRzLmNvbnZlcnRlcnNbIFwic2NyaXB0IGpzb25cIiBdID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoICFyZXNwb25zZUNvbnRhaW5lciApIHtcblx0XHRcdFx0alF1ZXJ5LmVycm9yKCBjYWxsYmFja05hbWUgKyBcIiB3YXMgbm90IGNhbGxlZFwiICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzcG9uc2VDb250YWluZXJbIDAgXTtcblx0XHR9O1xuXG5cdFx0Ly8gRm9yY2UganNvbiBkYXRhVHlwZVxuXHRcdHMuZGF0YVR5cGVzWyAwIF0gPSBcImpzb25cIjtcblxuXHRcdC8vIEluc3RhbGwgY2FsbGJhY2tcblx0XHRvdmVyd3JpdHRlbiA9IHdpbmRvd1sgY2FsbGJhY2tOYW1lIF07XG5cdFx0d2luZG93WyBjYWxsYmFja05hbWUgXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmVzcG9uc2VDb250YWluZXIgPSBhcmd1bWVudHM7XG5cdFx0fTtcblxuXHRcdC8vIENsZWFuLXVwIGZ1bmN0aW9uIChmaXJlcyBhZnRlciBjb252ZXJ0ZXJzKVxuXHRcdGpxWEhSLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIElmIHByZXZpb3VzIHZhbHVlIGRpZG4ndCBleGlzdCAtIHJlbW92ZSBpdFxuXHRcdFx0aWYgKCBvdmVyd3JpdHRlbiA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRqUXVlcnkoIHdpbmRvdyApLnJlbW92ZVByb3AoIGNhbGxiYWNrTmFtZSApO1xuXG5cdFx0XHQvLyBPdGhlcndpc2UgcmVzdG9yZSBwcmVleGlzdGluZyB2YWx1ZVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0d2luZG93WyBjYWxsYmFja05hbWUgXSA9IG92ZXJ3cml0dGVuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTYXZlIGJhY2sgYXMgZnJlZVxuXHRcdFx0aWYgKCBzWyBjYWxsYmFja05hbWUgXSApIHtcblxuXHRcdFx0XHQvLyBNYWtlIHN1cmUgdGhhdCByZS11c2luZyB0aGUgb3B0aW9ucyBkb2Vzbid0IHNjcmV3IHRoaW5ncyBhcm91bmRcblx0XHRcdFx0cy5qc29ucENhbGxiYWNrID0gb3JpZ2luYWxTZXR0aW5ncy5qc29ucENhbGxiYWNrO1xuXG5cdFx0XHRcdC8vIFNhdmUgdGhlIGNhbGxiYWNrIG5hbWUgZm9yIGZ1dHVyZSB1c2Vcblx0XHRcdFx0b2xkQ2FsbGJhY2tzLnB1c2goIGNhbGxiYWNrTmFtZSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDYWxsIGlmIGl0IHdhcyBhIGZ1bmN0aW9uIGFuZCB3ZSBoYXZlIGEgcmVzcG9uc2Vcblx0XHRcdGlmICggcmVzcG9uc2VDb250YWluZXIgJiYgaXNGdW5jdGlvbiggb3ZlcndyaXR0ZW4gKSApIHtcblx0XHRcdFx0b3ZlcndyaXR0ZW4oIHJlc3BvbnNlQ29udGFpbmVyWyAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0cmVzcG9uc2VDb250YWluZXIgPSBvdmVyd3JpdHRlbiA9IHVuZGVmaW5lZDtcblx0XHR9ICk7XG5cblx0XHQvLyBEZWxlZ2F0ZSB0byBzY3JpcHRcblx0XHRyZXR1cm4gXCJzY3JpcHRcIjtcblx0fVxufSApO1xuXG5cblxuXG4vLyBTdXBwb3J0OiBTYWZhcmkgOCBvbmx5XG4vLyBJbiBTYWZhcmkgOCBkb2N1bWVudHMgY3JlYXRlZCB2aWEgZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50XG4vLyBjb2xsYXBzZSBzaWJsaW5nIGZvcm1zOiB0aGUgc2Vjb25kIG9uZSBiZWNvbWVzIGEgY2hpbGQgb2YgdGhlIGZpcnN0IG9uZS5cbi8vIEJlY2F1c2Ugb2YgdGhhdCwgdGhpcyBzZWN1cml0eSBtZWFzdXJlIGhhcyB0byBiZSBkaXNhYmxlZCBpbiBTYWZhcmkgOC5cbi8vIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xMzczMzdcbnN1cHBvcnQuY3JlYXRlSFRNTERvY3VtZW50ID0gKCBmdW5jdGlvbigpIHtcblx0dmFyIGJvZHkgPSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnQoIFwiXCIgKS5ib2R5O1xuXHRib2R5LmlubmVySFRNTCA9IFwiPGZvcm0+PC9mb3JtPjxmb3JtPjwvZm9ybT5cIjtcblx0cmV0dXJuIGJvZHkuY2hpbGROb2Rlcy5sZW5ndGggPT09IDI7XG59ICkoKTtcblxuXG4vLyBBcmd1bWVudCBcImRhdGFcIiBzaG91bGQgYmUgc3RyaW5nIG9mIGh0bWxcbi8vIGNvbnRleHQgKG9wdGlvbmFsKTogSWYgc3BlY2lmaWVkLCB0aGUgZnJhZ21lbnQgd2lsbCBiZSBjcmVhdGVkIGluIHRoaXMgY29udGV4dCxcbi8vIGRlZmF1bHRzIHRvIGRvY3VtZW50XG4vLyBrZWVwU2NyaXB0cyAob3B0aW9uYWwpOiBJZiB0cnVlLCB3aWxsIGluY2x1ZGUgc2NyaXB0cyBwYXNzZWQgaW4gdGhlIGh0bWwgc3RyaW5nXG5qUXVlcnkucGFyc2VIVE1MID0gZnVuY3Rpb24oIGRhdGEsIGNvbnRleHQsIGtlZXBTY3JpcHRzICkge1xuXHRpZiAoIHR5cGVvZiBkYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiBbXTtcblx0fVxuXHRpZiAoIHR5cGVvZiBjb250ZXh0ID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRrZWVwU2NyaXB0cyA9IGNvbnRleHQ7XG5cdFx0Y29udGV4dCA9IGZhbHNlO1xuXHR9XG5cblx0dmFyIGJhc2UsIHBhcnNlZCwgc2NyaXB0cztcblxuXHRpZiAoICFjb250ZXh0ICkge1xuXG5cdFx0Ly8gU3RvcCBzY3JpcHRzIG9yIGlubGluZSBldmVudCBoYW5kbGVycyBmcm9tIGJlaW5nIGV4ZWN1dGVkIGltbWVkaWF0ZWx5XG5cdFx0Ly8gYnkgdXNpbmcgZG9jdW1lbnQuaW1wbGVtZW50YXRpb25cblx0XHRpZiAoIHN1cHBvcnQuY3JlYXRlSFRNTERvY3VtZW50ICkge1xuXHRcdFx0Y29udGV4dCA9IGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudCggXCJcIiApO1xuXG5cdFx0XHQvLyBTZXQgdGhlIGJhc2UgaHJlZiBmb3IgdGhlIGNyZWF0ZWQgZG9jdW1lbnRcblx0XHRcdC8vIHNvIGFueSBwYXJzZWQgZWxlbWVudHMgd2l0aCBVUkxzXG5cdFx0XHQvLyBhcmUgYmFzZWQgb24gdGhlIGRvY3VtZW50J3MgVVJMIChnaC0yOTY1KVxuXHRcdFx0YmFzZSA9IGNvbnRleHQuY3JlYXRlRWxlbWVudCggXCJiYXNlXCIgKTtcblx0XHRcdGJhc2UuaHJlZiA9IGRvY3VtZW50LmxvY2F0aW9uLmhyZWY7XG5cdFx0XHRjb250ZXh0LmhlYWQuYXBwZW5kQ2hpbGQoIGJhc2UgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Y29udGV4dCA9IGRvY3VtZW50O1xuXHRcdH1cblx0fVxuXG5cdHBhcnNlZCA9IHJzaW5nbGVUYWcuZXhlYyggZGF0YSApO1xuXHRzY3JpcHRzID0gIWtlZXBTY3JpcHRzICYmIFtdO1xuXG5cdC8vIFNpbmdsZSB0YWdcblx0aWYgKCBwYXJzZWQgKSB7XG5cdFx0cmV0dXJuIFsgY29udGV4dC5jcmVhdGVFbGVtZW50KCBwYXJzZWRbIDEgXSApIF07XG5cdH1cblxuXHRwYXJzZWQgPSBidWlsZEZyYWdtZW50KCBbIGRhdGEgXSwgY29udGV4dCwgc2NyaXB0cyApO1xuXG5cdGlmICggc2NyaXB0cyAmJiBzY3JpcHRzLmxlbmd0aCApIHtcblx0XHRqUXVlcnkoIHNjcmlwdHMgKS5yZW1vdmUoKTtcblx0fVxuXG5cdHJldHVybiBqUXVlcnkubWVyZ2UoIFtdLCBwYXJzZWQuY2hpbGROb2RlcyApO1xufTtcblxuXG4vKipcbiAqIExvYWQgYSB1cmwgaW50byBhIHBhZ2VcbiAqL1xualF1ZXJ5LmZuLmxvYWQgPSBmdW5jdGlvbiggdXJsLCBwYXJhbXMsIGNhbGxiYWNrICkge1xuXHR2YXIgc2VsZWN0b3IsIHR5cGUsIHJlc3BvbnNlLFxuXHRcdHNlbGYgPSB0aGlzLFxuXHRcdG9mZiA9IHVybC5pbmRleE9mKCBcIiBcIiApO1xuXG5cdGlmICggb2ZmID4gLTEgKSB7XG5cdFx0c2VsZWN0b3IgPSBzdHJpcEFuZENvbGxhcHNlKCB1cmwuc2xpY2UoIG9mZiApICk7XG5cdFx0dXJsID0gdXJsLnNsaWNlKCAwLCBvZmYgKTtcblx0fVxuXG5cdC8vIElmIGl0J3MgYSBmdW5jdGlvblxuXHRpZiAoIGlzRnVuY3Rpb24oIHBhcmFtcyApICkge1xuXG5cdFx0Ly8gV2UgYXNzdW1lIHRoYXQgaXQncyB0aGUgY2FsbGJhY2tcblx0XHRjYWxsYmFjayA9IHBhcmFtcztcblx0XHRwYXJhbXMgPSB1bmRlZmluZWQ7XG5cblx0Ly8gT3RoZXJ3aXNlLCBidWlsZCBhIHBhcmFtIHN0cmluZ1xuXHR9IGVsc2UgaWYgKCBwYXJhbXMgJiYgdHlwZW9mIHBhcmFtcyA9PT0gXCJvYmplY3RcIiApIHtcblx0XHR0eXBlID0gXCJQT1NUXCI7XG5cdH1cblxuXHQvLyBJZiB3ZSBoYXZlIGVsZW1lbnRzIHRvIG1vZGlmeSwgbWFrZSB0aGUgcmVxdWVzdFxuXHRpZiAoIHNlbGYubGVuZ3RoID4gMCApIHtcblx0XHRqUXVlcnkuYWpheCgge1xuXHRcdFx0dXJsOiB1cmwsXG5cblx0XHRcdC8vIElmIFwidHlwZVwiIHZhcmlhYmxlIGlzIHVuZGVmaW5lZCwgdGhlbiBcIkdFVFwiIG1ldGhvZCB3aWxsIGJlIHVzZWQuXG5cdFx0XHQvLyBNYWtlIHZhbHVlIG9mIHRoaXMgZmllbGQgZXhwbGljaXQgc2luY2Vcblx0XHRcdC8vIHVzZXIgY2FuIG92ZXJyaWRlIGl0IHRocm91Z2ggYWpheFNldHVwIG1ldGhvZFxuXHRcdFx0dHlwZTogdHlwZSB8fCBcIkdFVFwiLFxuXHRcdFx0ZGF0YVR5cGU6IFwiaHRtbFwiLFxuXHRcdFx0ZGF0YTogcGFyYW1zXG5cdFx0fSApLmRvbmUoIGZ1bmN0aW9uKCByZXNwb25zZVRleHQgKSB7XG5cblx0XHRcdC8vIFNhdmUgcmVzcG9uc2UgZm9yIHVzZSBpbiBjb21wbGV0ZSBjYWxsYmFja1xuXHRcdFx0cmVzcG9uc2UgPSBhcmd1bWVudHM7XG5cblx0XHRcdHNlbGYuaHRtbCggc2VsZWN0b3IgP1xuXG5cdFx0XHRcdC8vIElmIGEgc2VsZWN0b3Igd2FzIHNwZWNpZmllZCwgbG9jYXRlIHRoZSByaWdodCBlbGVtZW50cyBpbiBhIGR1bW15IGRpdlxuXHRcdFx0XHQvLyBFeGNsdWRlIHNjcmlwdHMgdG8gYXZvaWQgSUUgJ1Blcm1pc3Npb24gRGVuaWVkJyBlcnJvcnNcblx0XHRcdFx0alF1ZXJ5KCBcIjxkaXY+XCIgKS5hcHBlbmQoIGpRdWVyeS5wYXJzZUhUTUwoIHJlc3BvbnNlVGV4dCApICkuZmluZCggc2VsZWN0b3IgKSA6XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIHVzZSB0aGUgZnVsbCByZXN1bHRcblx0XHRcdFx0cmVzcG9uc2VUZXh0ICk7XG5cblx0XHQvLyBJZiB0aGUgcmVxdWVzdCBzdWNjZWVkcywgdGhpcyBmdW5jdGlvbiBnZXRzIFwiZGF0YVwiLCBcInN0YXR1c1wiLCBcImpxWEhSXCJcblx0XHQvLyBidXQgdGhleSBhcmUgaWdub3JlZCBiZWNhdXNlIHJlc3BvbnNlIHdhcyBzZXQgYWJvdmUuXG5cdFx0Ly8gSWYgaXQgZmFpbHMsIHRoaXMgZnVuY3Rpb24gZ2V0cyBcImpxWEhSXCIsIFwic3RhdHVzXCIsIFwiZXJyb3JcIlxuXHRcdH0gKS5hbHdheXMoIGNhbGxiYWNrICYmIGZ1bmN0aW9uKCBqcVhIUiwgc3RhdHVzICkge1xuXHRcdFx0c2VsZi5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0Y2FsbGJhY2suYXBwbHkoIHRoaXMsIHJlc3BvbnNlIHx8IFsganFYSFIucmVzcG9uc2VUZXh0LCBzdGF0dXMsIGpxWEhSIF0gKTtcblx0XHRcdH0gKTtcblx0XHR9ICk7XG5cdH1cblxuXHRyZXR1cm4gdGhpcztcbn07XG5cblxuXG5cbi8vIEF0dGFjaCBhIGJ1bmNoIG9mIGZ1bmN0aW9ucyBmb3IgaGFuZGxpbmcgY29tbW9uIEFKQVggZXZlbnRzXG5qUXVlcnkuZWFjaCggW1xuXHRcImFqYXhTdGFydFwiLFxuXHRcImFqYXhTdG9wXCIsXG5cdFwiYWpheENvbXBsZXRlXCIsXG5cdFwiYWpheEVycm9yXCIsXG5cdFwiYWpheFN1Y2Nlc3NcIixcblx0XCJhamF4U2VuZFwiXG5dLCBmdW5jdGlvbiggaSwgdHlwZSApIHtcblx0alF1ZXJ5LmZuWyB0eXBlIF0gPSBmdW5jdGlvbiggZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGUsIGZuICk7XG5cdH07XG59ICk7XG5cblxuXG5cbmpRdWVyeS5leHByLnBzZXVkb3MuYW5pbWF0ZWQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0cmV0dXJuIGpRdWVyeS5ncmVwKCBqUXVlcnkudGltZXJzLCBmdW5jdGlvbiggZm4gKSB7XG5cdFx0cmV0dXJuIGVsZW0gPT09IGZuLmVsZW07XG5cdH0gKS5sZW5ndGg7XG59O1xuXG5cblxuXG5qUXVlcnkub2Zmc2V0ID0ge1xuXHRzZXRPZmZzZXQ6IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBpICkge1xuXHRcdHZhciBjdXJQb3NpdGlvbiwgY3VyTGVmdCwgY3VyQ1NTVG9wLCBjdXJUb3AsIGN1ck9mZnNldCwgY3VyQ1NTTGVmdCwgY2FsY3VsYXRlUG9zaXRpb24sXG5cdFx0XHRwb3NpdGlvbiA9IGpRdWVyeS5jc3MoIGVsZW0sIFwicG9zaXRpb25cIiApLFxuXHRcdFx0Y3VyRWxlbSA9IGpRdWVyeSggZWxlbSApLFxuXHRcdFx0cHJvcHMgPSB7fTtcblxuXHRcdC8vIFNldCBwb3NpdGlvbiBmaXJzdCwgaW4tY2FzZSB0b3AvbGVmdCBhcmUgc2V0IGV2ZW4gb24gc3RhdGljIGVsZW1cblx0XHRpZiAoIHBvc2l0aW9uID09PSBcInN0YXRpY1wiICkge1xuXHRcdFx0ZWxlbS5zdHlsZS5wb3NpdGlvbiA9IFwicmVsYXRpdmVcIjtcblx0XHR9XG5cblx0XHRjdXJPZmZzZXQgPSBjdXJFbGVtLm9mZnNldCgpO1xuXHRcdGN1ckNTU1RvcCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwidG9wXCIgKTtcblx0XHRjdXJDU1NMZWZ0ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJsZWZ0XCIgKTtcblx0XHRjYWxjdWxhdGVQb3NpdGlvbiA9ICggcG9zaXRpb24gPT09IFwiYWJzb2x1dGVcIiB8fCBwb3NpdGlvbiA9PT0gXCJmaXhlZFwiICkgJiZcblx0XHRcdCggY3VyQ1NTVG9wICsgY3VyQ1NTTGVmdCApLmluZGV4T2YoIFwiYXV0b1wiICkgPiAtMTtcblxuXHRcdC8vIE5lZWQgdG8gYmUgYWJsZSB0byBjYWxjdWxhdGUgcG9zaXRpb24gaWYgZWl0aGVyXG5cdFx0Ly8gdG9wIG9yIGxlZnQgaXMgYXV0byBhbmQgcG9zaXRpb24gaXMgZWl0aGVyIGFic29sdXRlIG9yIGZpeGVkXG5cdFx0aWYgKCBjYWxjdWxhdGVQb3NpdGlvbiApIHtcblx0XHRcdGN1clBvc2l0aW9uID0gY3VyRWxlbS5wb3NpdGlvbigpO1xuXHRcdFx0Y3VyVG9wID0gY3VyUG9zaXRpb24udG9wO1xuXHRcdFx0Y3VyTGVmdCA9IGN1clBvc2l0aW9uLmxlZnQ7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0Y3VyVG9wID0gcGFyc2VGbG9hdCggY3VyQ1NTVG9wICkgfHwgMDtcblx0XHRcdGN1ckxlZnQgPSBwYXJzZUZsb2F0KCBjdXJDU1NMZWZ0ICkgfHwgMDtcblx0XHR9XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIG9wdGlvbnMgKSApIHtcblxuXHRcdFx0Ly8gVXNlIGpRdWVyeS5leHRlbmQgaGVyZSB0byBhbGxvdyBtb2RpZmljYXRpb24gb2YgY29vcmRpbmF0ZXMgYXJndW1lbnQgKGdoLTE4NDgpXG5cdFx0XHRvcHRpb25zID0gb3B0aW9ucy5jYWxsKCBlbGVtLCBpLCBqUXVlcnkuZXh0ZW5kKCB7fSwgY3VyT2Zmc2V0ICkgKTtcblx0XHR9XG5cblx0XHRpZiAoIG9wdGlvbnMudG9wICE9IG51bGwgKSB7XG5cdFx0XHRwcm9wcy50b3AgPSAoIG9wdGlvbnMudG9wIC0gY3VyT2Zmc2V0LnRvcCApICsgY3VyVG9wO1xuXHRcdH1cblx0XHRpZiAoIG9wdGlvbnMubGVmdCAhPSBudWxsICkge1xuXHRcdFx0cHJvcHMubGVmdCA9ICggb3B0aW9ucy5sZWZ0IC0gY3VyT2Zmc2V0LmxlZnQgKSArIGN1ckxlZnQ7XG5cdFx0fVxuXG5cdFx0aWYgKCBcInVzaW5nXCIgaW4gb3B0aW9ucyApIHtcblx0XHRcdG9wdGlvbnMudXNpbmcuY2FsbCggZWxlbSwgcHJvcHMgKTtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRjdXJFbGVtLmNzcyggcHJvcHMgKTtcblx0XHR9XG5cdH1cbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHQvLyBvZmZzZXQoKSByZWxhdGVzIGFuIGVsZW1lbnQncyBib3JkZXIgYm94IHRvIHRoZSBkb2N1bWVudCBvcmlnaW5cblx0b2Zmc2V0OiBmdW5jdGlvbiggb3B0aW9ucyApIHtcblxuXHRcdC8vIFByZXNlcnZlIGNoYWluaW5nIGZvciBzZXR0ZXJcblx0XHRpZiAoIGFyZ3VtZW50cy5sZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gb3B0aW9ucyA9PT0gdW5kZWZpbmVkID9cblx0XHRcdFx0dGhpcyA6XG5cdFx0XHRcdHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5Lm9mZnNldC5zZXRPZmZzZXQoIHRoaXMsIG9wdGlvbnMsIGkgKTtcblx0XHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHZhciByZWN0LCB3aW4sXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdO1xuXG5cdFx0aWYgKCAhZWxlbSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBSZXR1cm4gemVyb3MgZm9yIGRpc2Nvbm5lY3RlZCBhbmQgaGlkZGVuIChkaXNwbGF5OiBub25lKSBlbGVtZW50cyAoZ2gtMjMxMClcblx0XHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0XHQvLyBSdW5uaW5nIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBvbiBhXG5cdFx0Ly8gZGlzY29ubmVjdGVkIG5vZGUgaW4gSUUgdGhyb3dzIGFuIGVycm9yXG5cdFx0aWYgKCAhZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiB7IHRvcDogMCwgbGVmdDogMCB9O1xuXHRcdH1cblxuXHRcdC8vIEdldCBkb2N1bWVudC1yZWxhdGl2ZSBwb3NpdGlvbiBieSBhZGRpbmcgdmlld3BvcnQgc2Nyb2xsIHRvIHZpZXdwb3J0LXJlbGF0aXZlIGdCQ1Jcblx0XHRyZWN0ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblx0XHR3aW4gPSBlbGVtLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHRvcDogcmVjdC50b3AgKyB3aW4ucGFnZVlPZmZzZXQsXG5cdFx0XHRsZWZ0OiByZWN0LmxlZnQgKyB3aW4ucGFnZVhPZmZzZXRcblx0XHR9O1xuXHR9LFxuXG5cdC8vIHBvc2l0aW9uKCkgcmVsYXRlcyBhbiBlbGVtZW50J3MgbWFyZ2luIGJveCB0byBpdHMgb2Zmc2V0IHBhcmVudCdzIHBhZGRpbmcgYm94XG5cdC8vIFRoaXMgY29ycmVzcG9uZHMgdG8gdGhlIGJlaGF2aW9yIG9mIENTUyBhYnNvbHV0ZSBwb3NpdGlvbmluZ1xuXHRwb3NpdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0aWYgKCAhdGhpc1sgMCBdICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHZhciBvZmZzZXRQYXJlbnQsIG9mZnNldCwgZG9jLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXSxcblx0XHRcdHBhcmVudE9mZnNldCA9IHsgdG9wOiAwLCBsZWZ0OiAwIH07XG5cblx0XHQvLyBwb3NpdGlvbjpmaXhlZCBlbGVtZW50cyBhcmUgb2Zmc2V0IGZyb20gdGhlIHZpZXdwb3J0LCB3aGljaCBpdHNlbGYgYWx3YXlzIGhhcyB6ZXJvIG9mZnNldFxuXHRcdGlmICggalF1ZXJ5LmNzcyggZWxlbSwgXCJwb3NpdGlvblwiICkgPT09IFwiZml4ZWRcIiApIHtcblxuXHRcdFx0Ly8gQXNzdW1lIHBvc2l0aW9uOmZpeGVkIGltcGxpZXMgYXZhaWxhYmlsaXR5IG9mIGdldEJvdW5kaW5nQ2xpZW50UmVjdFxuXHRcdFx0b2Zmc2V0ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRvZmZzZXQgPSB0aGlzLm9mZnNldCgpO1xuXG5cdFx0XHQvLyBBY2NvdW50IGZvciB0aGUgKnJlYWwqIG9mZnNldCBwYXJlbnQsIHdoaWNoIGNhbiBiZSB0aGUgZG9jdW1lbnQgb3IgaXRzIHJvb3QgZWxlbWVudFxuXHRcdFx0Ly8gd2hlbiBhIHN0YXRpY2FsbHkgcG9zaXRpb25lZCBlbGVtZW50IGlzIGlkZW50aWZpZWRcblx0XHRcdGRvYyA9IGVsZW0ub3duZXJEb2N1bWVudDtcblx0XHRcdG9mZnNldFBhcmVudCA9IGVsZW0ub2Zmc2V0UGFyZW50IHx8IGRvYy5kb2N1bWVudEVsZW1lbnQ7XG5cdFx0XHR3aGlsZSAoIG9mZnNldFBhcmVudCAmJlxuXHRcdFx0XHQoIG9mZnNldFBhcmVudCA9PT0gZG9jLmJvZHkgfHwgb2Zmc2V0UGFyZW50ID09PSBkb2MuZG9jdW1lbnRFbGVtZW50ICkgJiZcblx0XHRcdFx0alF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcInBvc2l0aW9uXCIgKSA9PT0gXCJzdGF0aWNcIiApIHtcblxuXHRcdFx0XHRvZmZzZXRQYXJlbnQgPSBvZmZzZXRQYXJlbnQucGFyZW50Tm9kZTtcblx0XHRcdH1cblx0XHRcdGlmICggb2Zmc2V0UGFyZW50ICYmIG9mZnNldFBhcmVudCAhPT0gZWxlbSAmJiBvZmZzZXRQYXJlbnQubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHRcdFx0Ly8gSW5jb3Jwb3JhdGUgYm9yZGVycyBpbnRvIGl0cyBvZmZzZXQsIHNpbmNlIHRoZXkgYXJlIG91dHNpZGUgaXRzIGNvbnRlbnQgb3JpZ2luXG5cdFx0XHRcdHBhcmVudE9mZnNldCA9IGpRdWVyeSggb2Zmc2V0UGFyZW50ICkub2Zmc2V0KCk7XG5cdFx0XHRcdHBhcmVudE9mZnNldC50b3AgKz0galF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcImJvcmRlclRvcFdpZHRoXCIsIHRydWUgKTtcblx0XHRcdFx0cGFyZW50T2Zmc2V0LmxlZnQgKz0galF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcImJvcmRlckxlZnRXaWR0aFwiLCB0cnVlICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gU3VidHJhY3QgcGFyZW50IG9mZnNldHMgYW5kIGVsZW1lbnQgbWFyZ2luc1xuXHRcdHJldHVybiB7XG5cdFx0XHR0b3A6IG9mZnNldC50b3AgLSBwYXJlbnRPZmZzZXQudG9wIC0galF1ZXJ5LmNzcyggZWxlbSwgXCJtYXJnaW5Ub3BcIiwgdHJ1ZSApLFxuXHRcdFx0bGVmdDogb2Zmc2V0LmxlZnQgLSBwYXJlbnRPZmZzZXQubGVmdCAtIGpRdWVyeS5jc3MoIGVsZW0sIFwibWFyZ2luTGVmdFwiLCB0cnVlIClcblx0XHR9O1xuXHR9LFxuXG5cdC8vIFRoaXMgbWV0aG9kIHdpbGwgcmV0dXJuIGRvY3VtZW50RWxlbWVudCBpbiB0aGUgZm9sbG93aW5nIGNhc2VzOlxuXHQvLyAxKSBGb3IgdGhlIGVsZW1lbnQgaW5zaWRlIHRoZSBpZnJhbWUgd2l0aG91dCBvZmZzZXRQYXJlbnQsIHRoaXMgbWV0aG9kIHdpbGwgcmV0dXJuXG5cdC8vICAgIGRvY3VtZW50RWxlbWVudCBvZiB0aGUgcGFyZW50IHdpbmRvd1xuXHQvLyAyKSBGb3IgdGhlIGhpZGRlbiBvciBkZXRhY2hlZCBlbGVtZW50XG5cdC8vIDMpIEZvciBib2R5IG9yIGh0bWwgZWxlbWVudCwgaS5lLiBpbiBjYXNlIG9mIHRoZSBodG1sIG5vZGUgLSBpdCB3aWxsIHJldHVybiBpdHNlbGZcblx0Ly9cblx0Ly8gYnV0IHRob3NlIGV4Y2VwdGlvbnMgd2VyZSBuZXZlciBwcmVzZW50ZWQgYXMgYSByZWFsIGxpZmUgdXNlLWNhc2VzXG5cdC8vIGFuZCBtaWdodCBiZSBjb25zaWRlcmVkIGFzIG1vcmUgcHJlZmVyYWJsZSByZXN1bHRzLlxuXHQvL1xuXHQvLyBUaGlzIGxvZ2ljLCBob3dldmVyLCBpcyBub3QgZ3VhcmFudGVlZCBhbmQgY2FuIGNoYW5nZSBhdCBhbnkgcG9pbnQgaW4gdGhlIGZ1dHVyZVxuXHRvZmZzZXRQYXJlbnQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgb2Zmc2V0UGFyZW50ID0gdGhpcy5vZmZzZXRQYXJlbnQ7XG5cblx0XHRcdHdoaWxlICggb2Zmc2V0UGFyZW50ICYmIGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudCwgXCJwb3NpdGlvblwiICkgPT09IFwic3RhdGljXCIgKSB7XG5cdFx0XHRcdG9mZnNldFBhcmVudCA9IG9mZnNldFBhcmVudC5vZmZzZXRQYXJlbnQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBvZmZzZXRQYXJlbnQgfHwgZG9jdW1lbnRFbGVtZW50O1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG4vLyBDcmVhdGUgc2Nyb2xsTGVmdCBhbmQgc2Nyb2xsVG9wIG1ldGhvZHNcbmpRdWVyeS5lYWNoKCB7IHNjcm9sbExlZnQ6IFwicGFnZVhPZmZzZXRcIiwgc2Nyb2xsVG9wOiBcInBhZ2VZT2Zmc2V0XCIgfSwgZnVuY3Rpb24oIG1ldGhvZCwgcHJvcCApIHtcblx0dmFyIHRvcCA9IFwicGFnZVlPZmZzZXRcIiA9PT0gcHJvcDtcblxuXHRqUXVlcnkuZm5bIG1ldGhvZCBdID0gZnVuY3Rpb24oIHZhbCApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgbWV0aG9kLCB2YWwgKSB7XG5cblx0XHRcdC8vIENvYWxlc2NlIGRvY3VtZW50cyBhbmQgd2luZG93c1xuXHRcdFx0dmFyIHdpbjtcblx0XHRcdGlmICggaXNXaW5kb3coIGVsZW0gKSApIHtcblx0XHRcdFx0d2luID0gZWxlbTtcblx0XHRcdH0gZWxzZSBpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdHdpbiA9IGVsZW0uZGVmYXVsdFZpZXc7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggdmFsID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiB3aW4gPyB3aW5bIHByb3AgXSA6IGVsZW1bIG1ldGhvZCBdO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHdpbiApIHtcblx0XHRcdFx0d2luLnNjcm9sbFRvKFxuXHRcdFx0XHRcdCF0b3AgPyB2YWwgOiB3aW4ucGFnZVhPZmZzZXQsXG5cdFx0XHRcdFx0dG9wID8gdmFsIDogd2luLnBhZ2VZT2Zmc2V0XG5cdFx0XHRcdCk7XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGVsZW1bIG1ldGhvZCBdID0gdmFsO1xuXHRcdFx0fVxuXHRcdH0sIG1ldGhvZCwgdmFsLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH07XG59ICk7XG5cbi8vIFN1cHBvcnQ6IFNhZmFyaSA8PTcgLSA5LjEsIENocm9tZSA8PTM3IC0gNDlcbi8vIEFkZCB0aGUgdG9wL2xlZnQgY3NzSG9va3MgdXNpbmcgalF1ZXJ5LmZuLnBvc2l0aW9uXG4vLyBXZWJraXQgYnVnOiBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MjkwODRcbi8vIEJsaW5rIGJ1ZzogaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NTg5MzQ3XG4vLyBnZXRDb21wdXRlZFN0eWxlIHJldHVybnMgcGVyY2VudCB3aGVuIHNwZWNpZmllZCBmb3IgdG9wL2xlZnQvYm90dG9tL3JpZ2h0O1xuLy8gcmF0aGVyIHRoYW4gbWFrZSB0aGUgY3NzIG1vZHVsZSBkZXBlbmQgb24gdGhlIG9mZnNldCBtb2R1bGUsIGp1c3QgY2hlY2sgZm9yIGl0IGhlcmVcbmpRdWVyeS5lYWNoKCBbIFwidG9wXCIsIFwibGVmdFwiIF0sIGZ1bmN0aW9uKCBpLCBwcm9wICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIHByb3AgXSA9IGFkZEdldEhvb2tJZiggc3VwcG9ydC5waXhlbFBvc2l0aW9uLFxuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0XHRcdGNvbXB1dGVkID0gY3VyQ1NTKCBlbGVtLCBwcm9wICk7XG5cblx0XHRcdFx0Ly8gSWYgY3VyQ1NTIHJldHVybnMgcGVyY2VudGFnZSwgZmFsbGJhY2sgdG8gb2Zmc2V0XG5cdFx0XHRcdHJldHVybiBybnVtbm9ucHgudGVzdCggY29tcHV0ZWQgKSA/XG5cdFx0XHRcdFx0alF1ZXJ5KCBlbGVtICkucG9zaXRpb24oKVsgcHJvcCBdICsgXCJweFwiIDpcblx0XHRcdFx0XHRjb21wdXRlZDtcblx0XHRcdH1cblx0XHR9XG5cdCk7XG59ICk7XG5cblxuLy8gQ3JlYXRlIGlubmVySGVpZ2h0LCBpbm5lcldpZHRoLCBoZWlnaHQsIHdpZHRoLCBvdXRlckhlaWdodCBhbmQgb3V0ZXJXaWR0aCBtZXRob2RzXG5qUXVlcnkuZWFjaCggeyBIZWlnaHQ6IFwiaGVpZ2h0XCIsIFdpZHRoOiBcIndpZHRoXCIgfSwgZnVuY3Rpb24oIG5hbWUsIHR5cGUgKSB7XG5cdGpRdWVyeS5lYWNoKCB7IHBhZGRpbmc6IFwiaW5uZXJcIiArIG5hbWUsIGNvbnRlbnQ6IHR5cGUsIFwiXCI6IFwib3V0ZXJcIiArIG5hbWUgfSxcblx0XHRmdW5jdGlvbiggZGVmYXVsdEV4dHJhLCBmdW5jTmFtZSApIHtcblxuXHRcdC8vIE1hcmdpbiBpcyBvbmx5IGZvciBvdXRlckhlaWdodCwgb3V0ZXJXaWR0aFxuXHRcdGpRdWVyeS5mblsgZnVuY05hbWUgXSA9IGZ1bmN0aW9uKCBtYXJnaW4sIHZhbHVlICkge1xuXHRcdFx0dmFyIGNoYWluYWJsZSA9IGFyZ3VtZW50cy5sZW5ndGggJiYgKCBkZWZhdWx0RXh0cmEgfHwgdHlwZW9mIG1hcmdpbiAhPT0gXCJib29sZWFuXCIgKSxcblx0XHRcdFx0ZXh0cmEgPSBkZWZhdWx0RXh0cmEgfHwgKCBtYXJnaW4gPT09IHRydWUgfHwgdmFsdWUgPT09IHRydWUgPyBcIm1hcmdpblwiIDogXCJib3JkZXJcIiApO1xuXG5cdFx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgdHlwZSwgdmFsdWUgKSB7XG5cdFx0XHRcdHZhciBkb2M7XG5cblx0XHRcdFx0aWYgKCBpc1dpbmRvdyggZWxlbSApICkge1xuXG5cdFx0XHRcdFx0Ly8gJCggd2luZG93ICkub3V0ZXJXaWR0aC9IZWlnaHQgcmV0dXJuIHcvaCBpbmNsdWRpbmcgc2Nyb2xsYmFycyAoZ2gtMTcyOSlcblx0XHRcdFx0XHRyZXR1cm4gZnVuY05hbWUuaW5kZXhPZiggXCJvdXRlclwiICkgPT09IDAgP1xuXHRcdFx0XHRcdFx0ZWxlbVsgXCJpbm5lclwiICsgbmFtZSBdIDpcblx0XHRcdFx0XHRcdGVsZW0uZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50WyBcImNsaWVudFwiICsgbmFtZSBdO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gR2V0IGRvY3VtZW50IHdpZHRoIG9yIGhlaWdodFxuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0ZG9jID0gZWxlbS5kb2N1bWVudEVsZW1lbnQ7XG5cblx0XHRcdFx0XHQvLyBFaXRoZXIgc2Nyb2xsW1dpZHRoL0hlaWdodF0gb3Igb2Zmc2V0W1dpZHRoL0hlaWdodF0gb3IgY2xpZW50W1dpZHRoL0hlaWdodF0sXG5cdFx0XHRcdFx0Ly8gd2hpY2hldmVyIGlzIGdyZWF0ZXN0XG5cdFx0XHRcdFx0cmV0dXJuIE1hdGgubWF4KFxuXHRcdFx0XHRcdFx0ZWxlbS5ib2R5WyBcInNjcm9sbFwiICsgbmFtZSBdLCBkb2NbIFwic2Nyb2xsXCIgKyBuYW1lIF0sXG5cdFx0XHRcdFx0XHRlbGVtLmJvZHlbIFwib2Zmc2V0XCIgKyBuYW1lIF0sIGRvY1sgXCJvZmZzZXRcIiArIG5hbWUgXSxcblx0XHRcdFx0XHRcdGRvY1sgXCJjbGllbnRcIiArIG5hbWUgXVxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/XG5cblx0XHRcdFx0XHQvLyBHZXQgd2lkdGggb3IgaGVpZ2h0IG9uIHRoZSBlbGVtZW50LCByZXF1ZXN0aW5nIGJ1dCBub3QgZm9yY2luZyBwYXJzZUZsb2F0XG5cdFx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgdHlwZSwgZXh0cmEgKSA6XG5cblx0XHRcdFx0XHQvLyBTZXQgd2lkdGggb3IgaGVpZ2h0IG9uIHRoZSBlbGVtZW50XG5cdFx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCB0eXBlLCB2YWx1ZSwgZXh0cmEgKTtcblx0XHRcdH0sIHR5cGUsIGNoYWluYWJsZSA/IG1hcmdpbiA6IHVuZGVmaW5lZCwgY2hhaW5hYmxlICk7XG5cdFx0fTtcblx0fSApO1xufSApO1xuXG5cbmpRdWVyeS5lYWNoKCAoIFwiYmx1ciBmb2N1cyBmb2N1c2luIGZvY3Vzb3V0IHJlc2l6ZSBzY3JvbGwgY2xpY2sgZGJsY2xpY2sgXCIgK1xuXHRcIm1vdXNlZG93biBtb3VzZXVwIG1vdXNlbW92ZSBtb3VzZW92ZXIgbW91c2VvdXQgbW91c2VlbnRlciBtb3VzZWxlYXZlIFwiICtcblx0XCJjaGFuZ2Ugc2VsZWN0IHN1Ym1pdCBrZXlkb3duIGtleXByZXNzIGtleXVwIGNvbnRleHRtZW51XCIgKS5zcGxpdCggXCIgXCIgKSxcblx0ZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cblx0Ly8gSGFuZGxlIGV2ZW50IGJpbmRpbmdcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPiAwID9cblx0XHRcdHRoaXMub24oIG5hbWUsIG51bGwsIGRhdGEsIGZuICkgOlxuXHRcdFx0dGhpcy50cmlnZ2VyKCBuYW1lICk7XG5cdH07XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0aG92ZXI6IGZ1bmN0aW9uKCBmbk92ZXIsIGZuT3V0ICkge1xuXHRcdHJldHVybiB0aGlzLm1vdXNlZW50ZXIoIGZuT3ZlciApLm1vdXNlbGVhdmUoIGZuT3V0IHx8IGZuT3ZlciApO1xuXHR9XG59ICk7XG5cblxuXG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHRiaW5kOiBmdW5jdGlvbiggdHlwZXMsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlcywgbnVsbCwgZGF0YSwgZm4gKTtcblx0fSxcblx0dW5iaW5kOiBmdW5jdGlvbiggdHlwZXMsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9mZiggdHlwZXMsIG51bGwsIGZuICk7XG5cdH0sXG5cblx0ZGVsZWdhdGU6IGZ1bmN0aW9uKCBzZWxlY3RvciwgdHlwZXMsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICk7XG5cdH0sXG5cdHVuZGVsZWdhdGU6IGZ1bmN0aW9uKCBzZWxlY3RvciwgdHlwZXMsIGZuICkge1xuXG5cdFx0Ly8gKCBuYW1lc3BhY2UgKSBvciAoIHNlbGVjdG9yLCB0eXBlcyBbLCBmbl0gKVxuXHRcdHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID9cblx0XHRcdHRoaXMub2ZmKCBzZWxlY3RvciwgXCIqKlwiICkgOlxuXHRcdFx0dGhpcy5vZmYoIHR5cGVzLCBzZWxlY3RvciB8fCBcIioqXCIsIGZuICk7XG5cdH1cbn0gKTtcblxuLy8gQmluZCBhIGZ1bmN0aW9uIHRvIGEgY29udGV4dCwgb3B0aW9uYWxseSBwYXJ0aWFsbHkgYXBwbHlpbmcgYW55XG4vLyBhcmd1bWVudHMuXG4vLyBqUXVlcnkucHJveHkgaXMgZGVwcmVjYXRlZCB0byBwcm9tb3RlIHN0YW5kYXJkcyAoc3BlY2lmaWNhbGx5IEZ1bmN0aW9uI2JpbmQpXG4vLyBIb3dldmVyLCBpdCBpcyBub3Qgc2xhdGVkIGZvciByZW1vdmFsIGFueSB0aW1lIHNvb25cbmpRdWVyeS5wcm94eSA9IGZ1bmN0aW9uKCBmbiwgY29udGV4dCApIHtcblx0dmFyIHRtcCwgYXJncywgcHJveHk7XG5cblx0aWYgKCB0eXBlb2YgY29udGV4dCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHR0bXAgPSBmblsgY29udGV4dCBdO1xuXHRcdGNvbnRleHQgPSBmbjtcblx0XHRmbiA9IHRtcDtcblx0fVxuXG5cdC8vIFF1aWNrIGNoZWNrIHRvIGRldGVybWluZSBpZiB0YXJnZXQgaXMgY2FsbGFibGUsIGluIHRoZSBzcGVjXG5cdC8vIHRoaXMgdGhyb3dzIGEgVHlwZUVycm9yLCBidXQgd2Ugd2lsbCBqdXN0IHJldHVybiB1bmRlZmluZWQuXG5cdGlmICggIWlzRnVuY3Rpb24oIGZuICkgKSB7XG5cdFx0cmV0dXJuIHVuZGVmaW5lZDtcblx0fVxuXG5cdC8vIFNpbXVsYXRlZCBiaW5kXG5cdGFyZ3MgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMsIDIgKTtcblx0cHJveHkgPSBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZm4uYXBwbHkoIGNvbnRleHQgfHwgdGhpcywgYXJncy5jb25jYXQoIHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApICkgKTtcblx0fTtcblxuXHQvLyBTZXQgdGhlIGd1aWQgb2YgdW5pcXVlIGhhbmRsZXIgdG8gdGhlIHNhbWUgb2Ygb3JpZ2luYWwgaGFuZGxlciwgc28gaXQgY2FuIGJlIHJlbW92ZWRcblx0cHJveHkuZ3VpZCA9IGZuLmd1aWQgPSBmbi5ndWlkIHx8IGpRdWVyeS5ndWlkKys7XG5cblx0cmV0dXJuIHByb3h5O1xufTtcblxualF1ZXJ5LmhvbGRSZWFkeSA9IGZ1bmN0aW9uKCBob2xkICkge1xuXHRpZiAoIGhvbGQgKSB7XG5cdFx0alF1ZXJ5LnJlYWR5V2FpdCsrO1xuXHR9IGVsc2Uge1xuXHRcdGpRdWVyeS5yZWFkeSggdHJ1ZSApO1xuXHR9XG59O1xualF1ZXJ5LmlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xualF1ZXJ5LnBhcnNlSlNPTiA9IEpTT04ucGFyc2U7XG5qUXVlcnkubm9kZU5hbWUgPSBub2RlTmFtZTtcbmpRdWVyeS5pc0Z1bmN0aW9uID0gaXNGdW5jdGlvbjtcbmpRdWVyeS5pc1dpbmRvdyA9IGlzV2luZG93O1xualF1ZXJ5LmNhbWVsQ2FzZSA9IGNhbWVsQ2FzZTtcbmpRdWVyeS50eXBlID0gdG9UeXBlO1xuXG5qUXVlcnkubm93ID0gRGF0ZS5ub3c7XG5cbmpRdWVyeS5pc051bWVyaWMgPSBmdW5jdGlvbiggb2JqICkge1xuXG5cdC8vIEFzIG9mIGpRdWVyeSAzLjAsIGlzTnVtZXJpYyBpcyBsaW1pdGVkIHRvXG5cdC8vIHN0cmluZ3MgYW5kIG51bWJlcnMgKHByaW1pdGl2ZXMgb3Igb2JqZWN0cylcblx0Ly8gdGhhdCBjYW4gYmUgY29lcmNlZCB0byBmaW5pdGUgbnVtYmVycyAoZ2gtMjY2Milcblx0dmFyIHR5cGUgPSBqUXVlcnkudHlwZSggb2JqICk7XG5cdHJldHVybiAoIHR5cGUgPT09IFwibnVtYmVyXCIgfHwgdHlwZSA9PT0gXCJzdHJpbmdcIiApICYmXG5cblx0XHQvLyBwYXJzZUZsb2F0IE5hTnMgbnVtZXJpYy1jYXN0IGZhbHNlIHBvc2l0aXZlcyAoXCJcIilcblx0XHQvLyAuLi5idXQgbWlzaW50ZXJwcmV0cyBsZWFkaW5nLW51bWJlciBzdHJpbmdzLCBwYXJ0aWN1bGFybHkgaGV4IGxpdGVyYWxzIChcIjB4Li4uXCIpXG5cdFx0Ly8gc3VidHJhY3Rpb24gZm9yY2VzIGluZmluaXRpZXMgdG8gTmFOXG5cdFx0IWlzTmFOKCBvYmogLSBwYXJzZUZsb2F0KCBvYmogKSApO1xufTtcblxuXG5cblxuLy8gUmVnaXN0ZXIgYXMgYSBuYW1lZCBBTUQgbW9kdWxlLCBzaW5jZSBqUXVlcnkgY2FuIGJlIGNvbmNhdGVuYXRlZCB3aXRoIG90aGVyXG4vLyBmaWxlcyB0aGF0IG1heSB1c2UgZGVmaW5lLCBidXQgbm90IHZpYSBhIHByb3BlciBjb25jYXRlbmF0aW9uIHNjcmlwdCB0aGF0XG4vLyB1bmRlcnN0YW5kcyBhbm9ueW1vdXMgQU1EIG1vZHVsZXMuIEEgbmFtZWQgQU1EIGlzIHNhZmVzdCBhbmQgbW9zdCByb2J1c3Rcbi8vIHdheSB0byByZWdpc3Rlci4gTG93ZXJjYXNlIGpxdWVyeSBpcyB1c2VkIGJlY2F1c2UgQU1EIG1vZHVsZSBuYW1lcyBhcmVcbi8vIGRlcml2ZWQgZnJvbSBmaWxlIG5hbWVzLCBhbmQgalF1ZXJ5IGlzIG5vcm1hbGx5IGRlbGl2ZXJlZCBpbiBhIGxvd2VyY2FzZVxuLy8gZmlsZSBuYW1lLiBEbyB0aGlzIGFmdGVyIGNyZWF0aW5nIHRoZSBnbG9iYWwgc28gdGhhdCBpZiBhbiBBTUQgbW9kdWxlIHdhbnRzXG4vLyB0byBjYWxsIG5vQ29uZmxpY3QgdG8gaGlkZSB0aGlzIHZlcnNpb24gb2YgalF1ZXJ5LCBpdCB3aWxsIHdvcmsuXG5cbi8vIE5vdGUgdGhhdCBmb3IgbWF4aW11bSBwb3J0YWJpbGl0eSwgbGlicmFyaWVzIHRoYXQgYXJlIG5vdCBqUXVlcnkgc2hvdWxkXG4vLyBkZWNsYXJlIHRoZW1zZWx2ZXMgYXMgYW5vbnltb3VzIG1vZHVsZXMsIGFuZCBhdm9pZCBzZXR0aW5nIGEgZ2xvYmFsIGlmIGFuXG4vLyBBTUQgbG9hZGVyIGlzIHByZXNlbnQuIGpRdWVyeSBpcyBhIHNwZWNpYWwgY2FzZS4gRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2pyYnVya2UvcmVxdWlyZWpzL3dpa2kvVXBkYXRpbmctZXhpc3RpbmctbGlicmFyaWVzI3dpa2ktYW5vblxuXG5pZiAoIHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kICkge1xuXHRkZWZpbmUoIFwianF1ZXJ5XCIsIFtdLCBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4galF1ZXJ5O1xuXHR9ICk7XG59XG5cblxuXG5cbnZhclxuXG5cdC8vIE1hcCBvdmVyIGpRdWVyeSBpbiBjYXNlIG9mIG92ZXJ3cml0ZVxuXHRfalF1ZXJ5ID0gd2luZG93LmpRdWVyeSxcblxuXHQvLyBNYXAgb3ZlciB0aGUgJCBpbiBjYXNlIG9mIG92ZXJ3cml0ZVxuXHRfJCA9IHdpbmRvdy4kO1xuXG5qUXVlcnkubm9Db25mbGljdCA9IGZ1bmN0aW9uKCBkZWVwICkge1xuXHRpZiAoIHdpbmRvdy4kID09PSBqUXVlcnkgKSB7XG5cdFx0d2luZG93LiQgPSBfJDtcblx0fVxuXG5cdGlmICggZGVlcCAmJiB3aW5kb3cualF1ZXJ5ID09PSBqUXVlcnkgKSB7XG5cdFx0d2luZG93LmpRdWVyeSA9IF9qUXVlcnk7XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5O1xufTtcblxuLy8gRXhwb3NlIGpRdWVyeSBhbmQgJCBpZGVudGlmaWVycywgZXZlbiBpbiBBTURcbi8vICgjNzEwMiNjb21tZW50OjEwLCBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L2pxdWVyeS9wdWxsLzU1Nylcbi8vIGFuZCBDb21tb25KUyBmb3IgYnJvd3NlciBlbXVsYXRvcnMgKCMxMzU2NilcbmlmICggIW5vR2xvYmFsICkge1xuXHR3aW5kb3cualF1ZXJ5ID0gd2luZG93LiQgPSBqUXVlcnk7XG59XG5cblxuXG5cbnJldHVybiBqUXVlcnk7XG59ICk7XG4iLCIvLyBSZXNlcnZlZCB3b3JkIGxpc3RzIGZvciB2YXJpb3VzIGRpYWxlY3RzIG9mIHRoZSBsYW5ndWFnZVxuXG52YXIgcmVzZXJ2ZWRXb3JkcyA9IHtcbiAgMzogXCJhYnN0cmFjdCBib29sZWFuIGJ5dGUgY2hhciBjbGFzcyBkb3VibGUgZW51bSBleHBvcnQgZXh0ZW5kcyBmaW5hbCBmbG9hdCBnb3RvIGltcGxlbWVudHMgaW1wb3J0IGludCBpbnRlcmZhY2UgbG9uZyBuYXRpdmUgcGFja2FnZSBwcml2YXRlIHByb3RlY3RlZCBwdWJsaWMgc2hvcnQgc3RhdGljIHN1cGVyIHN5bmNocm9uaXplZCB0aHJvd3MgdHJhbnNpZW50IHZvbGF0aWxlXCIsXG4gIDU6IFwiY2xhc3MgZW51bSBleHRlbmRzIHN1cGVyIGNvbnN0IGV4cG9ydCBpbXBvcnRcIixcbiAgNjogXCJlbnVtXCIsXG4gIHN0cmljdDogXCJpbXBsZW1lbnRzIGludGVyZmFjZSBsZXQgcGFja2FnZSBwcml2YXRlIHByb3RlY3RlZCBwdWJsaWMgc3RhdGljIHlpZWxkXCIsXG4gIHN0cmljdEJpbmQ6IFwiZXZhbCBhcmd1bWVudHNcIlxufTtcblxuLy8gQW5kIHRoZSBrZXl3b3Jkc1xuXG52YXIgZWNtYTVBbmRMZXNzS2V5d29yZHMgPSBcImJyZWFrIGNhc2UgY2F0Y2ggY29udGludWUgZGVidWdnZXIgZGVmYXVsdCBkbyBlbHNlIGZpbmFsbHkgZm9yIGZ1bmN0aW9uIGlmIHJldHVybiBzd2l0Y2ggdGhyb3cgdHJ5IHZhciB3aGlsZSB3aXRoIG51bGwgdHJ1ZSBmYWxzZSBpbnN0YW5jZW9mIHR5cGVvZiB2b2lkIGRlbGV0ZSBuZXcgaW4gdGhpc1wiO1xuXG52YXIga2V5d29yZHMgPSB7XG4gIDU6IGVjbWE1QW5kTGVzc0tleXdvcmRzLFxuICA2OiBlY21hNUFuZExlc3NLZXl3b3JkcyArIFwiIGNvbnN0IGNsYXNzIGV4dGVuZHMgZXhwb3J0IGltcG9ydCBzdXBlclwiXG59O1xuXG52YXIga2V5d29yZFJlbGF0aW9uYWxPcGVyYXRvciA9IC9eaW4oc3RhbmNlb2YpPyQvO1xuXG4vLyAjIyBDaGFyYWN0ZXIgY2F0ZWdvcmllc1xuXG4vLyBCaWcgdWdseSByZWd1bGFyIGV4cHJlc3Npb25zIHRoYXQgbWF0Y2ggY2hhcmFjdGVycyBpbiB0aGVcbi8vIHdoaXRlc3BhY2UsIGlkZW50aWZpZXIsIGFuZCBpZGVudGlmaWVyLXN0YXJ0IGNhdGVnb3JpZXMuIFRoZXNlXG4vLyBhcmUgb25seSBhcHBsaWVkIHdoZW4gYSBjaGFyYWN0ZXIgaXMgZm91bmQgdG8gYWN0dWFsbHkgaGF2ZSBhXG4vLyBjb2RlIHBvaW50IGFib3ZlIDEyOC5cbi8vIEdlbmVyYXRlZCBieSBgYmluL2dlbmVyYXRlLWlkZW50aWZpZXItcmVnZXguanNgLlxuXG52YXIgbm9uQVNDSUlpZGVudGlmaWVyU3RhcnRDaGFycyA9IFwiXFx4YWFcXHhiNVxceGJhXFx4YzAtXFx4ZDZcXHhkOC1cXHhmNlxceGY4LVxcdTAyYzFcXHUwMmM2LVxcdTAyZDFcXHUwMmUwLVxcdTAyZTRcXHUwMmVjXFx1MDJlZVxcdTAzNzAtXFx1MDM3NFxcdTAzNzZcXHUwMzc3XFx1MDM3YS1cXHUwMzdkXFx1MDM3ZlxcdTAzODZcXHUwMzg4LVxcdTAzOGFcXHUwMzhjXFx1MDM4ZS1cXHUwM2ExXFx1MDNhMy1cXHUwM2Y1XFx1MDNmNy1cXHUwNDgxXFx1MDQ4YS1cXHUwNTJmXFx1MDUzMS1cXHUwNTU2XFx1MDU1OVxcdTA1NjAtXFx1MDU4OFxcdTA1ZDAtXFx1MDVlYVxcdTA1ZWYtXFx1MDVmMlxcdTA2MjAtXFx1MDY0YVxcdTA2NmVcXHUwNjZmXFx1MDY3MS1cXHUwNmQzXFx1MDZkNVxcdTA2ZTVcXHUwNmU2XFx1MDZlZVxcdTA2ZWZcXHUwNmZhLVxcdTA2ZmNcXHUwNmZmXFx1MDcxMFxcdTA3MTItXFx1MDcyZlxcdTA3NGQtXFx1MDdhNVxcdTA3YjFcXHUwN2NhLVxcdTA3ZWFcXHUwN2Y0XFx1MDdmNVxcdTA3ZmFcXHUwODAwLVxcdTA4MTVcXHUwODFhXFx1MDgyNFxcdTA4MjhcXHUwODQwLVxcdTA4NThcXHUwODYwLVxcdTA4NmFcXHUwOGEwLVxcdTA4YjRcXHUwOGI2LVxcdTA4YmRcXHUwOTA0LVxcdTA5MzlcXHUwOTNkXFx1MDk1MFxcdTA5NTgtXFx1MDk2MVxcdTA5NzEtXFx1MDk4MFxcdTA5ODUtXFx1MDk4Y1xcdTA5OGZcXHUwOTkwXFx1MDk5My1cXHUwOWE4XFx1MDlhYS1cXHUwOWIwXFx1MDliMlxcdTA5YjYtXFx1MDliOVxcdTA5YmRcXHUwOWNlXFx1MDlkY1xcdTA5ZGRcXHUwOWRmLVxcdTA5ZTFcXHUwOWYwXFx1MDlmMVxcdTA5ZmNcXHUwYTA1LVxcdTBhMGFcXHUwYTBmXFx1MGExMFxcdTBhMTMtXFx1MGEyOFxcdTBhMmEtXFx1MGEzMFxcdTBhMzJcXHUwYTMzXFx1MGEzNVxcdTBhMzZcXHUwYTM4XFx1MGEzOVxcdTBhNTktXFx1MGE1Y1xcdTBhNWVcXHUwYTcyLVxcdTBhNzRcXHUwYTg1LVxcdTBhOGRcXHUwYThmLVxcdTBhOTFcXHUwYTkzLVxcdTBhYThcXHUwYWFhLVxcdTBhYjBcXHUwYWIyXFx1MGFiM1xcdTBhYjUtXFx1MGFiOVxcdTBhYmRcXHUwYWQwXFx1MGFlMFxcdTBhZTFcXHUwYWY5XFx1MGIwNS1cXHUwYjBjXFx1MGIwZlxcdTBiMTBcXHUwYjEzLVxcdTBiMjhcXHUwYjJhLVxcdTBiMzBcXHUwYjMyXFx1MGIzM1xcdTBiMzUtXFx1MGIzOVxcdTBiM2RcXHUwYjVjXFx1MGI1ZFxcdTBiNWYtXFx1MGI2MVxcdTBiNzFcXHUwYjgzXFx1MGI4NS1cXHUwYjhhXFx1MGI4ZS1cXHUwYjkwXFx1MGI5Mi1cXHUwYjk1XFx1MGI5OVxcdTBiOWFcXHUwYjljXFx1MGI5ZVxcdTBiOWZcXHUwYmEzXFx1MGJhNFxcdTBiYTgtXFx1MGJhYVxcdTBiYWUtXFx1MGJiOVxcdTBiZDBcXHUwYzA1LVxcdTBjMGNcXHUwYzBlLVxcdTBjMTBcXHUwYzEyLVxcdTBjMjhcXHUwYzJhLVxcdTBjMzlcXHUwYzNkXFx1MGM1OC1cXHUwYzVhXFx1MGM2MFxcdTBjNjFcXHUwYzgwXFx1MGM4NS1cXHUwYzhjXFx1MGM4ZS1cXHUwYzkwXFx1MGM5Mi1cXHUwY2E4XFx1MGNhYS1cXHUwY2IzXFx1MGNiNS1cXHUwY2I5XFx1MGNiZFxcdTBjZGVcXHUwY2UwXFx1MGNlMVxcdTBjZjFcXHUwY2YyXFx1MGQwNS1cXHUwZDBjXFx1MGQwZS1cXHUwZDEwXFx1MGQxMi1cXHUwZDNhXFx1MGQzZFxcdTBkNGVcXHUwZDU0LVxcdTBkNTZcXHUwZDVmLVxcdTBkNjFcXHUwZDdhLVxcdTBkN2ZcXHUwZDg1LVxcdTBkOTZcXHUwZDlhLVxcdTBkYjFcXHUwZGIzLVxcdTBkYmJcXHUwZGJkXFx1MGRjMC1cXHUwZGM2XFx1MGUwMS1cXHUwZTMwXFx1MGUzMlxcdTBlMzNcXHUwZTQwLVxcdTBlNDZcXHUwZTgxXFx1MGU4MlxcdTBlODRcXHUwZTg3XFx1MGU4OFxcdTBlOGFcXHUwZThkXFx1MGU5NC1cXHUwZTk3XFx1MGU5OS1cXHUwZTlmXFx1MGVhMS1cXHUwZWEzXFx1MGVhNVxcdTBlYTdcXHUwZWFhXFx1MGVhYlxcdTBlYWQtXFx1MGViMFxcdTBlYjJcXHUwZWIzXFx1MGViZFxcdTBlYzAtXFx1MGVjNFxcdTBlYzZcXHUwZWRjLVxcdTBlZGZcXHUwZjAwXFx1MGY0MC1cXHUwZjQ3XFx1MGY0OS1cXHUwZjZjXFx1MGY4OC1cXHUwZjhjXFx1MTAwMC1cXHUxMDJhXFx1MTAzZlxcdTEwNTAtXFx1MTA1NVxcdTEwNWEtXFx1MTA1ZFxcdTEwNjFcXHUxMDY1XFx1MTA2NlxcdTEwNmUtXFx1MTA3MFxcdTEwNzUtXFx1MTA4MVxcdTEwOGVcXHUxMGEwLVxcdTEwYzVcXHUxMGM3XFx1MTBjZFxcdTEwZDAtXFx1MTBmYVxcdTEwZmMtXFx1MTI0OFxcdTEyNGEtXFx1MTI0ZFxcdTEyNTAtXFx1MTI1NlxcdTEyNThcXHUxMjVhLVxcdTEyNWRcXHUxMjYwLVxcdTEyODhcXHUxMjhhLVxcdTEyOGRcXHUxMjkwLVxcdTEyYjBcXHUxMmIyLVxcdTEyYjVcXHUxMmI4LVxcdTEyYmVcXHUxMmMwXFx1MTJjMi1cXHUxMmM1XFx1MTJjOC1cXHUxMmQ2XFx1MTJkOC1cXHUxMzEwXFx1MTMxMi1cXHUxMzE1XFx1MTMxOC1cXHUxMzVhXFx1MTM4MC1cXHUxMzhmXFx1MTNhMC1cXHUxM2Y1XFx1MTNmOC1cXHUxM2ZkXFx1MTQwMS1cXHUxNjZjXFx1MTY2Zi1cXHUxNjdmXFx1MTY4MS1cXHUxNjlhXFx1MTZhMC1cXHUxNmVhXFx1MTZlZS1cXHUxNmY4XFx1MTcwMC1cXHUxNzBjXFx1MTcwZS1cXHUxNzExXFx1MTcyMC1cXHUxNzMxXFx1MTc0MC1cXHUxNzUxXFx1MTc2MC1cXHUxNzZjXFx1MTc2ZS1cXHUxNzcwXFx1MTc4MC1cXHUxN2IzXFx1MTdkN1xcdTE3ZGNcXHUxODIwLVxcdTE4NzhcXHUxODgwLVxcdTE4YThcXHUxOGFhXFx1MThiMC1cXHUxOGY1XFx1MTkwMC1cXHUxOTFlXFx1MTk1MC1cXHUxOTZkXFx1MTk3MC1cXHUxOTc0XFx1MTk4MC1cXHUxOWFiXFx1MTliMC1cXHUxOWM5XFx1MWEwMC1cXHUxYTE2XFx1MWEyMC1cXHUxYTU0XFx1MWFhN1xcdTFiMDUtXFx1MWIzM1xcdTFiNDUtXFx1MWI0YlxcdTFiODMtXFx1MWJhMFxcdTFiYWVcXHUxYmFmXFx1MWJiYS1cXHUxYmU1XFx1MWMwMC1cXHUxYzIzXFx1MWM0ZC1cXHUxYzRmXFx1MWM1YS1cXHUxYzdkXFx1MWM4MC1cXHUxYzg4XFx1MWM5MC1cXHUxY2JhXFx1MWNiZC1cXHUxY2JmXFx1MWNlOS1cXHUxY2VjXFx1MWNlZS1cXHUxY2YxXFx1MWNmNVxcdTFjZjZcXHUxZDAwLVxcdTFkYmZcXHUxZTAwLVxcdTFmMTVcXHUxZjE4LVxcdTFmMWRcXHUxZjIwLVxcdTFmNDVcXHUxZjQ4LVxcdTFmNGRcXHUxZjUwLVxcdTFmNTdcXHUxZjU5XFx1MWY1YlxcdTFmNWRcXHUxZjVmLVxcdTFmN2RcXHUxZjgwLVxcdTFmYjRcXHUxZmI2LVxcdTFmYmNcXHUxZmJlXFx1MWZjMi1cXHUxZmM0XFx1MWZjNi1cXHUxZmNjXFx1MWZkMC1cXHUxZmQzXFx1MWZkNi1cXHUxZmRiXFx1MWZlMC1cXHUxZmVjXFx1MWZmMi1cXHUxZmY0XFx1MWZmNi1cXHUxZmZjXFx1MjA3MVxcdTIwN2ZcXHUyMDkwLVxcdTIwOWNcXHUyMTAyXFx1MjEwN1xcdTIxMGEtXFx1MjExM1xcdTIxMTVcXHUyMTE4LVxcdTIxMWRcXHUyMTI0XFx1MjEyNlxcdTIxMjhcXHUyMTJhLVxcdTIxMzlcXHUyMTNjLVxcdTIxM2ZcXHUyMTQ1LVxcdTIxNDlcXHUyMTRlXFx1MjE2MC1cXHUyMTg4XFx1MmMwMC1cXHUyYzJlXFx1MmMzMC1cXHUyYzVlXFx1MmM2MC1cXHUyY2U0XFx1MmNlYi1cXHUyY2VlXFx1MmNmMlxcdTJjZjNcXHUyZDAwLVxcdTJkMjVcXHUyZDI3XFx1MmQyZFxcdTJkMzAtXFx1MmQ2N1xcdTJkNmZcXHUyZDgwLVxcdTJkOTZcXHUyZGEwLVxcdTJkYTZcXHUyZGE4LVxcdTJkYWVcXHUyZGIwLVxcdTJkYjZcXHUyZGI4LVxcdTJkYmVcXHUyZGMwLVxcdTJkYzZcXHUyZGM4LVxcdTJkY2VcXHUyZGQwLVxcdTJkZDZcXHUyZGQ4LVxcdTJkZGVcXHUzMDA1LVxcdTMwMDdcXHUzMDIxLVxcdTMwMjlcXHUzMDMxLVxcdTMwMzVcXHUzMDM4LVxcdTMwM2NcXHUzMDQxLVxcdTMwOTZcXHUzMDliLVxcdTMwOWZcXHUzMGExLVxcdTMwZmFcXHUzMGZjLVxcdTMwZmZcXHUzMTA1LVxcdTMxMmZcXHUzMTMxLVxcdTMxOGVcXHUzMWEwLVxcdTMxYmFcXHUzMWYwLVxcdTMxZmZcXHUzNDAwLVxcdTRkYjVcXHU0ZTAwLVxcdTlmZWZcXHVhMDAwLVxcdWE0OGNcXHVhNGQwLVxcdWE0ZmRcXHVhNTAwLVxcdWE2MGNcXHVhNjEwLVxcdWE2MWZcXHVhNjJhXFx1YTYyYlxcdWE2NDAtXFx1YTY2ZVxcdWE2N2YtXFx1YTY5ZFxcdWE2YTAtXFx1YTZlZlxcdWE3MTctXFx1YTcxZlxcdWE3MjItXFx1YTc4OFxcdWE3OGItXFx1YTdiOVxcdWE3ZjctXFx1YTgwMVxcdWE4MDMtXFx1YTgwNVxcdWE4MDctXFx1YTgwYVxcdWE4MGMtXFx1YTgyMlxcdWE4NDAtXFx1YTg3M1xcdWE4ODItXFx1YThiM1xcdWE4ZjItXFx1YThmN1xcdWE4ZmJcXHVhOGZkXFx1YThmZVxcdWE5MGEtXFx1YTkyNVxcdWE5MzAtXFx1YTk0NlxcdWE5NjAtXFx1YTk3Y1xcdWE5ODQtXFx1YTliMlxcdWE5Y2ZcXHVhOWUwLVxcdWE5ZTRcXHVhOWU2LVxcdWE5ZWZcXHVhOWZhLVxcdWE5ZmVcXHVhYTAwLVxcdWFhMjhcXHVhYTQwLVxcdWFhNDJcXHVhYTQ0LVxcdWFhNGJcXHVhYTYwLVxcdWFhNzZcXHVhYTdhXFx1YWE3ZS1cXHVhYWFmXFx1YWFiMVxcdWFhYjVcXHVhYWI2XFx1YWFiOS1cXHVhYWJkXFx1YWFjMFxcdWFhYzJcXHVhYWRiLVxcdWFhZGRcXHVhYWUwLVxcdWFhZWFcXHVhYWYyLVxcdWFhZjRcXHVhYjAxLVxcdWFiMDZcXHVhYjA5LVxcdWFiMGVcXHVhYjExLVxcdWFiMTZcXHVhYjIwLVxcdWFiMjZcXHVhYjI4LVxcdWFiMmVcXHVhYjMwLVxcdWFiNWFcXHVhYjVjLVxcdWFiNjVcXHVhYjcwLVxcdWFiZTJcXHVhYzAwLVxcdWQ3YTNcXHVkN2IwLVxcdWQ3YzZcXHVkN2NiLVxcdWQ3ZmJcXHVmOTAwLVxcdWZhNmRcXHVmYTcwLVxcdWZhZDlcXHVmYjAwLVxcdWZiMDZcXHVmYjEzLVxcdWZiMTdcXHVmYjFkXFx1ZmIxZi1cXHVmYjI4XFx1ZmIyYS1cXHVmYjM2XFx1ZmIzOC1cXHVmYjNjXFx1ZmIzZVxcdWZiNDBcXHVmYjQxXFx1ZmI0M1xcdWZiNDRcXHVmYjQ2LVxcdWZiYjFcXHVmYmQzLVxcdWZkM2RcXHVmZDUwLVxcdWZkOGZcXHVmZDkyLVxcdWZkYzdcXHVmZGYwLVxcdWZkZmJcXHVmZTcwLVxcdWZlNzRcXHVmZTc2LVxcdWZlZmNcXHVmZjIxLVxcdWZmM2FcXHVmZjQxLVxcdWZmNWFcXHVmZjY2LVxcdWZmYmVcXHVmZmMyLVxcdWZmYzdcXHVmZmNhLVxcdWZmY2ZcXHVmZmQyLVxcdWZmZDdcXHVmZmRhLVxcdWZmZGNcIjtcbnZhciBub25BU0NJSWlkZW50aWZpZXJDaGFycyA9IFwiXFx1MjAwY1xcdTIwMGRcXHhiN1xcdTAzMDAtXFx1MDM2ZlxcdTAzODdcXHUwNDgzLVxcdTA0ODdcXHUwNTkxLVxcdTA1YmRcXHUwNWJmXFx1MDVjMVxcdTA1YzJcXHUwNWM0XFx1MDVjNVxcdTA1YzdcXHUwNjEwLVxcdTA2MWFcXHUwNjRiLVxcdTA2NjlcXHUwNjcwXFx1MDZkNi1cXHUwNmRjXFx1MDZkZi1cXHUwNmU0XFx1MDZlN1xcdTA2ZThcXHUwNmVhLVxcdTA2ZWRcXHUwNmYwLVxcdTA2ZjlcXHUwNzExXFx1MDczMC1cXHUwNzRhXFx1MDdhNi1cXHUwN2IwXFx1MDdjMC1cXHUwN2M5XFx1MDdlYi1cXHUwN2YzXFx1MDdmZFxcdTA4MTYtXFx1MDgxOVxcdTA4MWItXFx1MDgyM1xcdTA4MjUtXFx1MDgyN1xcdTA4MjktXFx1MDgyZFxcdTA4NTktXFx1MDg1YlxcdTA4ZDMtXFx1MDhlMVxcdTA4ZTMtXFx1MDkwM1xcdTA5M2EtXFx1MDkzY1xcdTA5M2UtXFx1MDk0ZlxcdTA5NTEtXFx1MDk1N1xcdTA5NjJcXHUwOTYzXFx1MDk2Ni1cXHUwOTZmXFx1MDk4MS1cXHUwOTgzXFx1MDliY1xcdTA5YmUtXFx1MDljNFxcdTA5YzdcXHUwOWM4XFx1MDljYi1cXHUwOWNkXFx1MDlkN1xcdTA5ZTJcXHUwOWUzXFx1MDllNi1cXHUwOWVmXFx1MDlmZVxcdTBhMDEtXFx1MGEwM1xcdTBhM2NcXHUwYTNlLVxcdTBhNDJcXHUwYTQ3XFx1MGE0OFxcdTBhNGItXFx1MGE0ZFxcdTBhNTFcXHUwYTY2LVxcdTBhNzFcXHUwYTc1XFx1MGE4MS1cXHUwYTgzXFx1MGFiY1xcdTBhYmUtXFx1MGFjNVxcdTBhYzctXFx1MGFjOVxcdTBhY2ItXFx1MGFjZFxcdTBhZTJcXHUwYWUzXFx1MGFlNi1cXHUwYWVmXFx1MGFmYS1cXHUwYWZmXFx1MGIwMS1cXHUwYjAzXFx1MGIzY1xcdTBiM2UtXFx1MGI0NFxcdTBiNDdcXHUwYjQ4XFx1MGI0Yi1cXHUwYjRkXFx1MGI1NlxcdTBiNTdcXHUwYjYyXFx1MGI2M1xcdTBiNjYtXFx1MGI2ZlxcdTBiODJcXHUwYmJlLVxcdTBiYzJcXHUwYmM2LVxcdTBiYzhcXHUwYmNhLVxcdTBiY2RcXHUwYmQ3XFx1MGJlNi1cXHUwYmVmXFx1MGMwMC1cXHUwYzA0XFx1MGMzZS1cXHUwYzQ0XFx1MGM0Ni1cXHUwYzQ4XFx1MGM0YS1cXHUwYzRkXFx1MGM1NVxcdTBjNTZcXHUwYzYyXFx1MGM2M1xcdTBjNjYtXFx1MGM2ZlxcdTBjODEtXFx1MGM4M1xcdTBjYmNcXHUwY2JlLVxcdTBjYzRcXHUwY2M2LVxcdTBjYzhcXHUwY2NhLVxcdTBjY2RcXHUwY2Q1XFx1MGNkNlxcdTBjZTJcXHUwY2UzXFx1MGNlNi1cXHUwY2VmXFx1MGQwMC1cXHUwZDAzXFx1MGQzYlxcdTBkM2NcXHUwZDNlLVxcdTBkNDRcXHUwZDQ2LVxcdTBkNDhcXHUwZDRhLVxcdTBkNGRcXHUwZDU3XFx1MGQ2MlxcdTBkNjNcXHUwZDY2LVxcdTBkNmZcXHUwZDgyXFx1MGQ4M1xcdTBkY2FcXHUwZGNmLVxcdTBkZDRcXHUwZGQ2XFx1MGRkOC1cXHUwZGRmXFx1MGRlNi1cXHUwZGVmXFx1MGRmMlxcdTBkZjNcXHUwZTMxXFx1MGUzNC1cXHUwZTNhXFx1MGU0Ny1cXHUwZTRlXFx1MGU1MC1cXHUwZTU5XFx1MGViMVxcdTBlYjQtXFx1MGViOVxcdTBlYmJcXHUwZWJjXFx1MGVjOC1cXHUwZWNkXFx1MGVkMC1cXHUwZWQ5XFx1MGYxOFxcdTBmMTlcXHUwZjIwLVxcdTBmMjlcXHUwZjM1XFx1MGYzN1xcdTBmMzlcXHUwZjNlXFx1MGYzZlxcdTBmNzEtXFx1MGY4NFxcdTBmODZcXHUwZjg3XFx1MGY4ZC1cXHUwZjk3XFx1MGY5OS1cXHUwZmJjXFx1MGZjNlxcdTEwMmItXFx1MTAzZVxcdTEwNDAtXFx1MTA0OVxcdTEwNTYtXFx1MTA1OVxcdTEwNWUtXFx1MTA2MFxcdTEwNjItXFx1MTA2NFxcdTEwNjctXFx1MTA2ZFxcdTEwNzEtXFx1MTA3NFxcdTEwODItXFx1MTA4ZFxcdTEwOGYtXFx1MTA5ZFxcdTEzNWQtXFx1MTM1ZlxcdTEzNjktXFx1MTM3MVxcdTE3MTItXFx1MTcxNFxcdTE3MzItXFx1MTczNFxcdTE3NTJcXHUxNzUzXFx1MTc3MlxcdTE3NzNcXHUxN2I0LVxcdTE3ZDNcXHUxN2RkXFx1MTdlMC1cXHUxN2U5XFx1MTgwYi1cXHUxODBkXFx1MTgxMC1cXHUxODE5XFx1MThhOVxcdTE5MjAtXFx1MTkyYlxcdTE5MzAtXFx1MTkzYlxcdTE5NDYtXFx1MTk0ZlxcdTE5ZDAtXFx1MTlkYVxcdTFhMTctXFx1MWExYlxcdTFhNTUtXFx1MWE1ZVxcdTFhNjAtXFx1MWE3Y1xcdTFhN2YtXFx1MWE4OVxcdTFhOTAtXFx1MWE5OVxcdTFhYjAtXFx1MWFiZFxcdTFiMDAtXFx1MWIwNFxcdTFiMzQtXFx1MWI0NFxcdTFiNTAtXFx1MWI1OVxcdTFiNmItXFx1MWI3M1xcdTFiODAtXFx1MWI4MlxcdTFiYTEtXFx1MWJhZFxcdTFiYjAtXFx1MWJiOVxcdTFiZTYtXFx1MWJmM1xcdTFjMjQtXFx1MWMzN1xcdTFjNDAtXFx1MWM0OVxcdTFjNTAtXFx1MWM1OVxcdTFjZDAtXFx1MWNkMlxcdTFjZDQtXFx1MWNlOFxcdTFjZWRcXHUxY2YyLVxcdTFjZjRcXHUxY2Y3LVxcdTFjZjlcXHUxZGMwLVxcdTFkZjlcXHUxZGZiLVxcdTFkZmZcXHUyMDNmXFx1MjA0MFxcdTIwNTRcXHUyMGQwLVxcdTIwZGNcXHUyMGUxXFx1MjBlNS1cXHUyMGYwXFx1MmNlZi1cXHUyY2YxXFx1MmQ3ZlxcdTJkZTAtXFx1MmRmZlxcdTMwMmEtXFx1MzAyZlxcdTMwOTlcXHUzMDlhXFx1YTYyMC1cXHVhNjI5XFx1YTY2ZlxcdWE2NzQtXFx1YTY3ZFxcdWE2OWVcXHVhNjlmXFx1YTZmMFxcdWE2ZjFcXHVhODAyXFx1YTgwNlxcdWE4MGJcXHVhODIzLVxcdWE4MjdcXHVhODgwXFx1YTg4MVxcdWE4YjQtXFx1YThjNVxcdWE4ZDAtXFx1YThkOVxcdWE4ZTAtXFx1YThmMVxcdWE4ZmYtXFx1YTkwOVxcdWE5MjYtXFx1YTkyZFxcdWE5NDctXFx1YTk1M1xcdWE5ODAtXFx1YTk4M1xcdWE5YjMtXFx1YTljMFxcdWE5ZDAtXFx1YTlkOVxcdWE5ZTVcXHVhOWYwLVxcdWE5ZjlcXHVhYTI5LVxcdWFhMzZcXHVhYTQzXFx1YWE0Y1xcdWFhNGRcXHVhYTUwLVxcdWFhNTlcXHVhYTdiLVxcdWFhN2RcXHVhYWIwXFx1YWFiMi1cXHVhYWI0XFx1YWFiN1xcdWFhYjhcXHVhYWJlXFx1YWFiZlxcdWFhYzFcXHVhYWViLVxcdWFhZWZcXHVhYWY1XFx1YWFmNlxcdWFiZTMtXFx1YWJlYVxcdWFiZWNcXHVhYmVkXFx1YWJmMC1cXHVhYmY5XFx1ZmIxZVxcdWZlMDAtXFx1ZmUwZlxcdWZlMjAtXFx1ZmUyZlxcdWZlMzNcXHVmZTM0XFx1ZmU0ZC1cXHVmZTRmXFx1ZmYxMC1cXHVmZjE5XFx1ZmYzZlwiO1xuXG52YXIgbm9uQVNDSUlpZGVudGlmaWVyU3RhcnQgPSBuZXcgUmVnRXhwKFwiW1wiICsgbm9uQVNDSUlpZGVudGlmaWVyU3RhcnRDaGFycyArIFwiXVwiKTtcbnZhciBub25BU0NJSWlkZW50aWZpZXIgPSBuZXcgUmVnRXhwKFwiW1wiICsgbm9uQVNDSUlpZGVudGlmaWVyU3RhcnRDaGFycyArIG5vbkFTQ0lJaWRlbnRpZmllckNoYXJzICsgXCJdXCIpO1xuXG5ub25BU0NJSWlkZW50aWZpZXJTdGFydENoYXJzID0gbm9uQVNDSUlpZGVudGlmaWVyQ2hhcnMgPSBudWxsO1xuXG4vLyBUaGVzZSBhcmUgYSBydW4tbGVuZ3RoIGFuZCBvZmZzZXQgZW5jb2RlZCByZXByZXNlbnRhdGlvbiBvZiB0aGVcbi8vID4weGZmZmYgY29kZSBwb2ludHMgdGhhdCBhcmUgYSB2YWxpZCBwYXJ0IG9mIGlkZW50aWZpZXJzLiBUaGVcbi8vIG9mZnNldCBzdGFydHMgYXQgMHgxMDAwMCwgYW5kIGVhY2ggcGFpciBvZiBudW1iZXJzIHJlcHJlc2VudHMgYW5cbi8vIG9mZnNldCB0byB0aGUgbmV4dCByYW5nZSwgYW5kIHRoZW4gYSBzaXplIG9mIHRoZSByYW5nZS4gVGhleSB3ZXJlXG4vLyBnZW5lcmF0ZWQgYnkgYmluL2dlbmVyYXRlLWlkZW50aWZpZXItcmVnZXguanNcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbW1hLXNwYWNpbmdcbnZhciBhc3RyYWxJZGVudGlmaWVyU3RhcnRDb2RlcyA9IFswLDExLDIsMjUsMiwxOCwyLDEsMiwxNCwzLDEzLDM1LDEyMiw3MCw1MiwyNjgsMjgsNCw0OCw0OCwzMSwxNCwyOSw2LDM3LDExLDI5LDMsMzUsNSw3LDIsNCw0MywxNTcsMTksMzUsNSwzNSw1LDM5LDksNTEsMTU3LDMxMCwxMCwyMSwxMSw3LDE1Myw1LDMsMCwyLDQzLDIsMSw0LDAsMywyMiwxMSwyMiwxMCwzMCw2NiwxOCwyLDEsMTEsMjEsMTEsMjUsNzEsNTUsNywxLDY1LDAsMTYsMywyLDIsMiwyOCw0MywyOCw0LDI4LDM2LDcsMiwyNywyOCw1MywxMSwyMSwxMSwxOCwxNCwxNywxMTEsNzIsNTYsNTAsMTQsNTAsMTQsMzUsNDc3LDI4LDExLDAsOSwyMSwxOTAsNTIsNzYsNDQsMzMsMjQsMjcsMzUsMzAsMCwxMiwzNCw0LDAsMTMsNDcsMTUsMywyMiwwLDIsMCwzNiwxNywyLDI0LDg1LDYsMiwwLDIsMywyLDE0LDIsOSw4LDQ2LDM5LDcsMywxLDMsMjEsMiw2LDIsMSwyLDQsNCwwLDE5LDAsMTMsNCwxNTksNTIsMTksMyw1NCw0NywyMSwxLDIsMCwxODUsNDYsNDIsMywzNyw0NywyMSwwLDYwLDQyLDg2LDI2LDIzMCw0MywxMTcsNjMsMzIsMCwyNTcsMCwxMSwzOSw4LDAsMjIsMCwxMiwzOSwzLDMsMjAsMCwzNSw1NiwyNjQsOCwyLDM2LDE4LDAsNTAsMjksMTEzLDYsMiwxLDIsMzcsMjIsMCwyNiw1LDIsMSwyLDMxLDE1LDAsMzI4LDE4LDI3MCw5MjEsMTAzLDExMCwxOCwxOTUsMjc0OSwxMDcwLDQwNTAsNTgyLDg2MzQsNTY4LDgsMzAsMTE0LDI5LDE5LDQ3LDE3LDMsMzIsMjAsNiwxOCw2ODksNjMsMTI5LDY4LDEyLDAsNjcsMTIsNjUsMSwzMSw2MTI5LDE1LDc1NCw5NDg2LDI4Niw4MiwzOTUsMjMwOSwxMDYsNiwxMiw0LDgsOCw5LDU5OTEsODQsMiw3MCwyLDEsMywwLDMsMSwzLDMsMiwxMSwyLDAsMiw2LDIsNjQsMiwzLDMsNywyLDYsMiwyNywyLDMsMiw0LDIsMCw0LDYsMiwzMzksMywyNCwyLDI0LDIsMzAsMiwyNCwyLDMwLDIsMjQsMiwzMCwyLDI0LDIsMzAsMiwyNCwyLDcsNDE0OSwxOTYsNjAsNjcsMTIxMywzLDIsMjYsMiwxLDIsMCwzLDAsMiw5LDIsMywyLDAsMiwwLDcsMCw1LDAsMiwwLDIsMCwyLDIsMiwxLDIsMCwzLDAsMiwwLDIsMCwyLDAsMiwwLDIsMSwyLDAsMywzLDIsNiwyLDMsMiwzLDIsMCwyLDksMiwxNiw2LDIsMiw0LDIsMTYsNDQyMSw0MjcxMCw0Miw0MTQ4LDEyLDIyMSwzLDU3NjEsMTUsNzQ3MiwzMTA0LDU0MV07XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb21tYS1zcGFjaW5nXG52YXIgYXN0cmFsSWRlbnRpZmllckNvZGVzID0gWzUwOSwwLDIyNywwLDE1MCw0LDI5NCw5LDEzNjgsMiwyLDEsNiwzLDQxLDIsNSwwLDE2NiwxLDU3NCwzLDksOSw1MjUsMTAsMTc2LDIsNTQsMTQsMzIsOSwxNiwzLDQ2LDEwLDU0LDksNywyLDM3LDEzLDIsOSw2LDEsNDUsMCwxMywyLDQ5LDEzLDksMyw0LDksODMsMTEsNywwLDE2MSwxMSw2LDksNywzLDU2LDEsMiw2LDMsMSwzLDIsMTAsMCwxMSwxLDMsNiw0LDQsMTkzLDE3LDEwLDksNSwwLDgyLDE5LDEzLDksMjE0LDYsMyw4LDI4LDEsODMsMTYsMTYsOSw4MiwxMiw5LDksODQsMTQsNSw5LDI0MywxNCwxNjYsOSwyODAsOSw0MSw2LDIsMyw5LDAsMTAsMTAsNDcsMTUsNDA2LDcsMiw3LDE3LDksNTcsMjEsMiwxMywxMjMsNSw0LDAsMiwxLDIsNiwyLDAsOSw5LDQ5LDQsMiwxLDIsNCw5LDksMzMwLDMsMTkzMDYsOSwxMzUsNCw2MCw2LDI2LDksMTAxNiw0NSwxNywzLDE5NzIzLDEsNTMxOSw0LDQsNSw5LDcsMyw2LDMxLDMsMTQ5LDIsMTQxOCw0OSw1MTMsNTQsNSw0OSw5LDAsMTUsMCwyMyw0LDIsMTQsMTM2MSw2LDIsMTYsMyw2LDIsMSwyLDQsMjIxNCw2LDExMCw2LDYsOSw3OTI0ODcsMjM5XTtcblxuLy8gVGhpcyBoYXMgYSBjb21wbGV4aXR5IGxpbmVhciB0byB0aGUgdmFsdWUgb2YgdGhlIGNvZGUuIFRoZVxuLy8gYXNzdW1wdGlvbiBpcyB0aGF0IGxvb2tpbmcgdXAgYXN0cmFsIGlkZW50aWZpZXIgY2hhcmFjdGVycyBpc1xuLy8gcmFyZS5cbmZ1bmN0aW9uIGlzSW5Bc3RyYWxTZXQoY29kZSwgc2V0KSB7XG4gIHZhciBwb3MgPSAweDEwMDAwO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHNldC5sZW5ndGg7IGkgKz0gMikge1xuICAgIHBvcyArPSBzZXRbaV07XG4gICAgaWYgKHBvcyA+IGNvZGUpIHsgcmV0dXJuIGZhbHNlIH1cbiAgICBwb3MgKz0gc2V0W2kgKyAxXTtcbiAgICBpZiAocG9zID49IGNvZGUpIHsgcmV0dXJuIHRydWUgfVxuICB9XG59XG5cbi8vIFRlc3Qgd2hldGhlciBhIGdpdmVuIGNoYXJhY3RlciBjb2RlIHN0YXJ0cyBhbiBpZGVudGlmaWVyLlxuXG5mdW5jdGlvbiBpc0lkZW50aWZpZXJTdGFydChjb2RlLCBhc3RyYWwpIHtcbiAgaWYgKGNvZGUgPCA2NSkgeyByZXR1cm4gY29kZSA9PT0gMzYgfVxuICBpZiAoY29kZSA8IDkxKSB7IHJldHVybiB0cnVlIH1cbiAgaWYgKGNvZGUgPCA5NykgeyByZXR1cm4gY29kZSA9PT0gOTUgfVxuICBpZiAoY29kZSA8IDEyMykgeyByZXR1cm4gdHJ1ZSB9XG4gIGlmIChjb2RlIDw9IDB4ZmZmZikgeyByZXR1cm4gY29kZSA+PSAweGFhICYmIG5vbkFTQ0lJaWRlbnRpZmllclN0YXJ0LnRlc3QoU3RyaW5nLmZyb21DaGFyQ29kZShjb2RlKSkgfVxuICBpZiAoYXN0cmFsID09PSBmYWxzZSkgeyByZXR1cm4gZmFsc2UgfVxuICByZXR1cm4gaXNJbkFzdHJhbFNldChjb2RlLCBhc3RyYWxJZGVudGlmaWVyU3RhcnRDb2Rlcylcbn1cblxuLy8gVGVzdCB3aGV0aGVyIGEgZ2l2ZW4gY2hhcmFjdGVyIGlzIHBhcnQgb2YgYW4gaWRlbnRpZmllci5cblxuZnVuY3Rpb24gaXNJZGVudGlmaWVyQ2hhcihjb2RlLCBhc3RyYWwpIHtcbiAgaWYgKGNvZGUgPCA0OCkgeyByZXR1cm4gY29kZSA9PT0gMzYgfVxuICBpZiAoY29kZSA8IDU4KSB7IHJldHVybiB0cnVlIH1cbiAgaWYgKGNvZGUgPCA2NSkgeyByZXR1cm4gZmFsc2UgfVxuICBpZiAoY29kZSA8IDkxKSB7IHJldHVybiB0cnVlIH1cbiAgaWYgKGNvZGUgPCA5NykgeyByZXR1cm4gY29kZSA9PT0gOTUgfVxuICBpZiAoY29kZSA8IDEyMykgeyByZXR1cm4gdHJ1ZSB9XG4gIGlmIChjb2RlIDw9IDB4ZmZmZikgeyByZXR1cm4gY29kZSA+PSAweGFhICYmIG5vbkFTQ0lJaWRlbnRpZmllci50ZXN0KFN0cmluZy5mcm9tQ2hhckNvZGUoY29kZSkpIH1cbiAgaWYgKGFzdHJhbCA9PT0gZmFsc2UpIHsgcmV0dXJuIGZhbHNlIH1cbiAgcmV0dXJuIGlzSW5Bc3RyYWxTZXQoY29kZSwgYXN0cmFsSWRlbnRpZmllclN0YXJ0Q29kZXMpIHx8IGlzSW5Bc3RyYWxTZXQoY29kZSwgYXN0cmFsSWRlbnRpZmllckNvZGVzKVxufVxuXG4vLyAjIyBUb2tlbiB0eXBlc1xuXG4vLyBUaGUgYXNzaWdubWVudCBvZiBmaW5lLWdyYWluZWQsIGluZm9ybWF0aW9uLWNhcnJ5aW5nIHR5cGUgb2JqZWN0c1xuLy8gYWxsb3dzIHRoZSB0b2tlbml6ZXIgdG8gc3RvcmUgdGhlIGluZm9ybWF0aW9uIGl0IGhhcyBhYm91dCBhXG4vLyB0b2tlbiBpbiBhIHdheSB0aGF0IGlzIHZlcnkgY2hlYXAgZm9yIHRoZSBwYXJzZXIgdG8gbG9vayB1cC5cblxuLy8gQWxsIHRva2VuIHR5cGUgdmFyaWFibGVzIHN0YXJ0IHdpdGggYW4gdW5kZXJzY29yZSwgdG8gbWFrZSB0aGVtXG4vLyBlYXN5IHRvIHJlY29nbml6ZS5cblxuLy8gVGhlIGBiZWZvcmVFeHByYCBwcm9wZXJ0eSBpcyB1c2VkIHRvIGRpc2FtYmlndWF0ZSBiZXR3ZWVuIHJlZ3VsYXJcbi8vIGV4cHJlc3Npb25zIGFuZCBkaXZpc2lvbnMuIEl0IGlzIHNldCBvbiBhbGwgdG9rZW4gdHlwZXMgdGhhdCBjYW5cbi8vIGJlIGZvbGxvd2VkIGJ5IGFuIGV4cHJlc3Npb24gKHRodXMsIGEgc2xhc2ggYWZ0ZXIgdGhlbSB3b3VsZCBiZSBhXG4vLyByZWd1bGFyIGV4cHJlc3Npb24pLlxuLy9cbi8vIFRoZSBgc3RhcnRzRXhwcmAgcHJvcGVydHkgaXMgdXNlZCB0byBjaGVjayBpZiB0aGUgdG9rZW4gZW5kcyBhXG4vLyBgeWllbGRgIGV4cHJlc3Npb24uIEl0IGlzIHNldCBvbiBhbGwgdG9rZW4gdHlwZXMgdGhhdCBlaXRoZXIgY2FuXG4vLyBkaXJlY3RseSBzdGFydCBhbiBleHByZXNzaW9uIChsaWtlIGEgcXVvdGF0aW9uIG1hcmspIG9yIGNhblxuLy8gY29udGludWUgYW4gZXhwcmVzc2lvbiAobGlrZSB0aGUgYm9keSBvZiBhIHN0cmluZykuXG4vL1xuLy8gYGlzTG9vcGAgbWFya3MgYSBrZXl3b3JkIGFzIHN0YXJ0aW5nIGEgbG9vcCwgd2hpY2ggaXMgaW1wb3J0YW50XG4vLyB0byBrbm93IHdoZW4gcGFyc2luZyBhIGxhYmVsLCBpbiBvcmRlciB0byBhbGxvdyBvciBkaXNhbGxvd1xuLy8gY29udGludWUganVtcHMgdG8gdGhhdCBsYWJlbC5cblxudmFyIFRva2VuVHlwZSA9IGZ1bmN0aW9uIFRva2VuVHlwZShsYWJlbCwgY29uZikge1xuICBpZiAoIGNvbmYgPT09IHZvaWQgMCApIGNvbmYgPSB7fTtcblxuICB0aGlzLmxhYmVsID0gbGFiZWw7XG4gIHRoaXMua2V5d29yZCA9IGNvbmYua2V5d29yZDtcbiAgdGhpcy5iZWZvcmVFeHByID0gISFjb25mLmJlZm9yZUV4cHI7XG4gIHRoaXMuc3RhcnRzRXhwciA9ICEhY29uZi5zdGFydHNFeHByO1xuICB0aGlzLmlzTG9vcCA9ICEhY29uZi5pc0xvb3A7XG4gIHRoaXMuaXNBc3NpZ24gPSAhIWNvbmYuaXNBc3NpZ247XG4gIHRoaXMucHJlZml4ID0gISFjb25mLnByZWZpeDtcbiAgdGhpcy5wb3N0Zml4ID0gISFjb25mLnBvc3RmaXg7XG4gIHRoaXMuYmlub3AgPSBjb25mLmJpbm9wIHx8IG51bGw7XG4gIHRoaXMudXBkYXRlQ29udGV4dCA9IG51bGw7XG59O1xuXG5mdW5jdGlvbiBiaW5vcChuYW1lLCBwcmVjKSB7XG4gIHJldHVybiBuZXcgVG9rZW5UeXBlKG5hbWUsIHtiZWZvcmVFeHByOiB0cnVlLCBiaW5vcDogcHJlY30pXG59XG52YXIgYmVmb3JlRXhwciA9IHtiZWZvcmVFeHByOiB0cnVlfTtcbnZhciBzdGFydHNFeHByID0ge3N0YXJ0c0V4cHI6IHRydWV9O1xuXG4vLyBNYXAga2V5d29yZCBuYW1lcyB0byB0b2tlbiB0eXBlcy5cblxudmFyIGtleXdvcmRzJDEgPSB7fTtcblxuLy8gU3VjY2luY3QgZGVmaW5pdGlvbnMgb2Yga2V5d29yZCB0b2tlbiB0eXBlc1xuZnVuY3Rpb24ga3cobmFtZSwgb3B0aW9ucykge1xuICBpZiAoIG9wdGlvbnMgPT09IHZvaWQgMCApIG9wdGlvbnMgPSB7fTtcblxuICBvcHRpb25zLmtleXdvcmQgPSBuYW1lO1xuICByZXR1cm4ga2V5d29yZHMkMVtuYW1lXSA9IG5ldyBUb2tlblR5cGUobmFtZSwgb3B0aW9ucylcbn1cblxudmFyIHR5cGVzID0ge1xuICBudW06IG5ldyBUb2tlblR5cGUoXCJudW1cIiwgc3RhcnRzRXhwciksXG4gIHJlZ2V4cDogbmV3IFRva2VuVHlwZShcInJlZ2V4cFwiLCBzdGFydHNFeHByKSxcbiAgc3RyaW5nOiBuZXcgVG9rZW5UeXBlKFwic3RyaW5nXCIsIHN0YXJ0c0V4cHIpLFxuICBuYW1lOiBuZXcgVG9rZW5UeXBlKFwibmFtZVwiLCBzdGFydHNFeHByKSxcbiAgZW9mOiBuZXcgVG9rZW5UeXBlKFwiZW9mXCIpLFxuXG4gIC8vIFB1bmN0dWF0aW9uIHRva2VuIHR5cGVzLlxuICBicmFja2V0TDogbmV3IFRva2VuVHlwZShcIltcIiwge2JlZm9yZUV4cHI6IHRydWUsIHN0YXJ0c0V4cHI6IHRydWV9KSxcbiAgYnJhY2tldFI6IG5ldyBUb2tlblR5cGUoXCJdXCIpLFxuICBicmFjZUw6IG5ldyBUb2tlblR5cGUoXCJ7XCIsIHtiZWZvcmVFeHByOiB0cnVlLCBzdGFydHNFeHByOiB0cnVlfSksXG4gIGJyYWNlUjogbmV3IFRva2VuVHlwZShcIn1cIiksXG4gIHBhcmVuTDogbmV3IFRva2VuVHlwZShcIihcIiwge2JlZm9yZUV4cHI6IHRydWUsIHN0YXJ0c0V4cHI6IHRydWV9KSxcbiAgcGFyZW5SOiBuZXcgVG9rZW5UeXBlKFwiKVwiKSxcbiAgY29tbWE6IG5ldyBUb2tlblR5cGUoXCIsXCIsIGJlZm9yZUV4cHIpLFxuICBzZW1pOiBuZXcgVG9rZW5UeXBlKFwiO1wiLCBiZWZvcmVFeHByKSxcbiAgY29sb246IG5ldyBUb2tlblR5cGUoXCI6XCIsIGJlZm9yZUV4cHIpLFxuICBkb3Q6IG5ldyBUb2tlblR5cGUoXCIuXCIpLFxuICBxdWVzdGlvbjogbmV3IFRva2VuVHlwZShcIj9cIiwgYmVmb3JlRXhwciksXG4gIGFycm93OiBuZXcgVG9rZW5UeXBlKFwiPT5cIiwgYmVmb3JlRXhwciksXG4gIHRlbXBsYXRlOiBuZXcgVG9rZW5UeXBlKFwidGVtcGxhdGVcIiksXG4gIGludmFsaWRUZW1wbGF0ZTogbmV3IFRva2VuVHlwZShcImludmFsaWRUZW1wbGF0ZVwiKSxcbiAgZWxsaXBzaXM6IG5ldyBUb2tlblR5cGUoXCIuLi5cIiwgYmVmb3JlRXhwciksXG4gIGJhY2tRdW90ZTogbmV3IFRva2VuVHlwZShcImBcIiwgc3RhcnRzRXhwciksXG4gIGRvbGxhckJyYWNlTDogbmV3IFRva2VuVHlwZShcIiR7XCIsIHtiZWZvcmVFeHByOiB0cnVlLCBzdGFydHNFeHByOiB0cnVlfSksXG5cbiAgLy8gT3BlcmF0b3JzLiBUaGVzZSBjYXJyeSBzZXZlcmFsIGtpbmRzIG9mIHByb3BlcnRpZXMgdG8gaGVscCB0aGVcbiAgLy8gcGFyc2VyIHVzZSB0aGVtIHByb3Blcmx5ICh0aGUgcHJlc2VuY2Ugb2YgdGhlc2UgcHJvcGVydGllcyBpc1xuICAvLyB3aGF0IGNhdGVnb3JpemVzIHRoZW0gYXMgb3BlcmF0b3JzKS5cbiAgLy9cbiAgLy8gYGJpbm9wYCwgd2hlbiBwcmVzZW50LCBzcGVjaWZpZXMgdGhhdCB0aGlzIG9wZXJhdG9yIGlzIGEgYmluYXJ5XG4gIC8vIG9wZXJhdG9yLCBhbmQgd2lsbCByZWZlciB0byBpdHMgcHJlY2VkZW5jZS5cbiAgLy9cbiAgLy8gYHByZWZpeGAgYW5kIGBwb3N0Zml4YCBtYXJrIHRoZSBvcGVyYXRvciBhcyBhIHByZWZpeCBvciBwb3N0Zml4XG4gIC8vIHVuYXJ5IG9wZXJhdG9yLlxuICAvL1xuICAvLyBgaXNBc3NpZ25gIG1hcmtzIGFsbCBvZiBgPWAsIGArPWAsIGAtPWAgZXRjZXRlcmEsIHdoaWNoIGFjdCBhc1xuICAvLyBiaW5hcnkgb3BlcmF0b3JzIHdpdGggYSB2ZXJ5IGxvdyBwcmVjZWRlbmNlLCB0aGF0IHNob3VsZCByZXN1bHRcbiAgLy8gaW4gQXNzaWdubWVudEV4cHJlc3Npb24gbm9kZXMuXG5cbiAgZXE6IG5ldyBUb2tlblR5cGUoXCI9XCIsIHtiZWZvcmVFeHByOiB0cnVlLCBpc0Fzc2lnbjogdHJ1ZX0pLFxuICBhc3NpZ246IG5ldyBUb2tlblR5cGUoXCJfPVwiLCB7YmVmb3JlRXhwcjogdHJ1ZSwgaXNBc3NpZ246IHRydWV9KSxcbiAgaW5jRGVjOiBuZXcgVG9rZW5UeXBlKFwiKysvLS1cIiwge3ByZWZpeDogdHJ1ZSwgcG9zdGZpeDogdHJ1ZSwgc3RhcnRzRXhwcjogdHJ1ZX0pLFxuICBwcmVmaXg6IG5ldyBUb2tlblR5cGUoXCIhL35cIiwge2JlZm9yZUV4cHI6IHRydWUsIHByZWZpeDogdHJ1ZSwgc3RhcnRzRXhwcjogdHJ1ZX0pLFxuICBsb2dpY2FsT1I6IGJpbm9wKFwifHxcIiwgMSksXG4gIGxvZ2ljYWxBTkQ6IGJpbm9wKFwiJiZcIiwgMiksXG4gIGJpdHdpc2VPUjogYmlub3AoXCJ8XCIsIDMpLFxuICBiaXR3aXNlWE9SOiBiaW5vcChcIl5cIiwgNCksXG4gIGJpdHdpc2VBTkQ6IGJpbm9wKFwiJlwiLCA1KSxcbiAgZXF1YWxpdHk6IGJpbm9wKFwiPT0vIT0vPT09LyE9PVwiLCA2KSxcbiAgcmVsYXRpb25hbDogYmlub3AoXCI8Lz4vPD0vPj1cIiwgNyksXG4gIGJpdFNoaWZ0OiBiaW5vcChcIjw8Lz4+Lz4+PlwiLCA4KSxcbiAgcGx1c01pbjogbmV3IFRva2VuVHlwZShcIisvLVwiLCB7YmVmb3JlRXhwcjogdHJ1ZSwgYmlub3A6IDksIHByZWZpeDogdHJ1ZSwgc3RhcnRzRXhwcjogdHJ1ZX0pLFxuICBtb2R1bG86IGJpbm9wKFwiJVwiLCAxMCksXG4gIHN0YXI6IGJpbm9wKFwiKlwiLCAxMCksXG4gIHNsYXNoOiBiaW5vcChcIi9cIiwgMTApLFxuICBzdGFyc3RhcjogbmV3IFRva2VuVHlwZShcIioqXCIsIHtiZWZvcmVFeHByOiB0cnVlfSksXG5cbiAgLy8gS2V5d29yZCB0b2tlbiB0eXBlcy5cbiAgX2JyZWFrOiBrdyhcImJyZWFrXCIpLFxuICBfY2FzZToga3coXCJjYXNlXCIsIGJlZm9yZUV4cHIpLFxuICBfY2F0Y2g6IGt3KFwiY2F0Y2hcIiksXG4gIF9jb250aW51ZToga3coXCJjb250aW51ZVwiKSxcbiAgX2RlYnVnZ2VyOiBrdyhcImRlYnVnZ2VyXCIpLFxuICBfZGVmYXVsdDoga3coXCJkZWZhdWx0XCIsIGJlZm9yZUV4cHIpLFxuICBfZG86IGt3KFwiZG9cIiwge2lzTG9vcDogdHJ1ZSwgYmVmb3JlRXhwcjogdHJ1ZX0pLFxuICBfZWxzZToga3coXCJlbHNlXCIsIGJlZm9yZUV4cHIpLFxuICBfZmluYWxseToga3coXCJmaW5hbGx5XCIpLFxuICBfZm9yOiBrdyhcImZvclwiLCB7aXNMb29wOiB0cnVlfSksXG4gIF9mdW5jdGlvbjoga3coXCJmdW5jdGlvblwiLCBzdGFydHNFeHByKSxcbiAgX2lmOiBrdyhcImlmXCIpLFxuICBfcmV0dXJuOiBrdyhcInJldHVyblwiLCBiZWZvcmVFeHByKSxcbiAgX3N3aXRjaDoga3coXCJzd2l0Y2hcIiksXG4gIF90aHJvdzoga3coXCJ0aHJvd1wiLCBiZWZvcmVFeHByKSxcbiAgX3RyeToga3coXCJ0cnlcIiksXG4gIF92YXI6IGt3KFwidmFyXCIpLFxuICBfY29uc3Q6IGt3KFwiY29uc3RcIiksXG4gIF93aGlsZToga3coXCJ3aGlsZVwiLCB7aXNMb29wOiB0cnVlfSksXG4gIF93aXRoOiBrdyhcIndpdGhcIiksXG4gIF9uZXc6IGt3KFwibmV3XCIsIHtiZWZvcmVFeHByOiB0cnVlLCBzdGFydHNFeHByOiB0cnVlfSksXG4gIF90aGlzOiBrdyhcInRoaXNcIiwgc3RhcnRzRXhwciksXG4gIF9zdXBlcjoga3coXCJzdXBlclwiLCBzdGFydHNFeHByKSxcbiAgX2NsYXNzOiBrdyhcImNsYXNzXCIsIHN0YXJ0c0V4cHIpLFxuICBfZXh0ZW5kczoga3coXCJleHRlbmRzXCIsIGJlZm9yZUV4cHIpLFxuICBfZXhwb3J0OiBrdyhcImV4cG9ydFwiKSxcbiAgX2ltcG9ydDoga3coXCJpbXBvcnRcIiksXG4gIF9udWxsOiBrdyhcIm51bGxcIiwgc3RhcnRzRXhwciksXG4gIF90cnVlOiBrdyhcInRydWVcIiwgc3RhcnRzRXhwciksXG4gIF9mYWxzZToga3coXCJmYWxzZVwiLCBzdGFydHNFeHByKSxcbiAgX2luOiBrdyhcImluXCIsIHtiZWZvcmVFeHByOiB0cnVlLCBiaW5vcDogN30pLFxuICBfaW5zdGFuY2VvZjoga3coXCJpbnN0YW5jZW9mXCIsIHtiZWZvcmVFeHByOiB0cnVlLCBiaW5vcDogN30pLFxuICBfdHlwZW9mOiBrdyhcInR5cGVvZlwiLCB7YmVmb3JlRXhwcjogdHJ1ZSwgcHJlZml4OiB0cnVlLCBzdGFydHNFeHByOiB0cnVlfSksXG4gIF92b2lkOiBrdyhcInZvaWRcIiwge2JlZm9yZUV4cHI6IHRydWUsIHByZWZpeDogdHJ1ZSwgc3RhcnRzRXhwcjogdHJ1ZX0pLFxuICBfZGVsZXRlOiBrdyhcImRlbGV0ZVwiLCB7YmVmb3JlRXhwcjogdHJ1ZSwgcHJlZml4OiB0cnVlLCBzdGFydHNFeHByOiB0cnVlfSlcbn07XG5cbi8vIE1hdGNoZXMgYSB3aG9sZSBsaW5lIGJyZWFrICh3aGVyZSBDUkxGIGlzIGNvbnNpZGVyZWQgYSBzaW5nbGVcbi8vIGxpbmUgYnJlYWspLiBVc2VkIHRvIGNvdW50IGxpbmVzLlxuXG52YXIgbGluZUJyZWFrID0gL1xcclxcbj98XFxufFxcdTIwMjh8XFx1MjAyOS87XG52YXIgbGluZUJyZWFrRyA9IG5ldyBSZWdFeHAobGluZUJyZWFrLnNvdXJjZSwgXCJnXCIpO1xuXG5mdW5jdGlvbiBpc05ld0xpbmUoY29kZSwgZWNtYTIwMTlTdHJpbmcpIHtcbiAgcmV0dXJuIGNvZGUgPT09IDEwIHx8IGNvZGUgPT09IDEzIHx8ICghZWNtYTIwMTlTdHJpbmcgJiYgKGNvZGUgPT09IDB4MjAyOCB8fCBjb2RlID09PSAweDIwMjkpKVxufVxuXG52YXIgbm9uQVNDSUl3aGl0ZXNwYWNlID0gL1tcXHUxNjgwXFx1MjAwMC1cXHUyMDBhXFx1MjAyZlxcdTIwNWZcXHUzMDAwXFx1ZmVmZl0vO1xuXG52YXIgc2tpcFdoaXRlU3BhY2UgPSAvKD86XFxzfFxcL1xcLy4qfFxcL1xcKlteXSo/XFwqXFwvKSovZztcblxudmFyIHJlZiA9IE9iamVjdC5wcm90b3R5cGU7XG52YXIgaGFzT3duUHJvcGVydHkgPSByZWYuaGFzT3duUHJvcGVydHk7XG52YXIgdG9TdHJpbmcgPSByZWYudG9TdHJpbmc7XG5cbi8vIENoZWNrcyBpZiBhbiBvYmplY3QgaGFzIGEgcHJvcGVydHkuXG5cbmZ1bmN0aW9uIGhhcyhvYmosIHByb3BOYW1lKSB7XG4gIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcE5hbWUpXG59XG5cbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheSB8fCAoZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gKFxuICB0b1N0cmluZy5jYWxsKG9iaikgPT09IFwiW29iamVjdCBBcnJheV1cIlxuKTsgfSk7XG5cbmZ1bmN0aW9uIHdvcmRzUmVnZXhwKHdvcmRzKSB7XG4gIHJldHVybiBuZXcgUmVnRXhwKFwiXig/OlwiICsgd29yZHMucmVwbGFjZSgvIC9nLCBcInxcIikgKyBcIikkXCIpXG59XG5cbi8vIFRoZXNlIGFyZSB1c2VkIHdoZW4gYG9wdGlvbnMubG9jYXRpb25zYCBpcyBvbiwgZm9yIHRoZVxuLy8gYHN0YXJ0TG9jYCBhbmQgYGVuZExvY2AgcHJvcGVydGllcy5cblxudmFyIFBvc2l0aW9uID0gZnVuY3Rpb24gUG9zaXRpb24obGluZSwgY29sKSB7XG4gIHRoaXMubGluZSA9IGxpbmU7XG4gIHRoaXMuY29sdW1uID0gY29sO1xufTtcblxuUG9zaXRpb24ucHJvdG90eXBlLm9mZnNldCA9IGZ1bmN0aW9uIG9mZnNldCAobikge1xuICByZXR1cm4gbmV3IFBvc2l0aW9uKHRoaXMubGluZSwgdGhpcy5jb2x1bW4gKyBuKVxufTtcblxudmFyIFNvdXJjZUxvY2F0aW9uID0gZnVuY3Rpb24gU291cmNlTG9jYXRpb24ocCwgc3RhcnQsIGVuZCkge1xuICB0aGlzLnN0YXJ0ID0gc3RhcnQ7XG4gIHRoaXMuZW5kID0gZW5kO1xuICBpZiAocC5zb3VyY2VGaWxlICE9PSBudWxsKSB7IHRoaXMuc291cmNlID0gcC5zb3VyY2VGaWxlOyB9XG59O1xuXG4vLyBUaGUgYGdldExpbmVJbmZvYCBmdW5jdGlvbiBpcyBtb3N0bHkgdXNlZnVsIHdoZW4gdGhlXG4vLyBgbG9jYXRpb25zYCBvcHRpb24gaXMgb2ZmIChmb3IgcGVyZm9ybWFuY2UgcmVhc29ucykgYW5kIHlvdVxuLy8gd2FudCB0byBmaW5kIHRoZSBsaW5lL2NvbHVtbiBwb3NpdGlvbiBmb3IgYSBnaXZlbiBjaGFyYWN0ZXJcbi8vIG9mZnNldC4gYGlucHV0YCBzaG91bGQgYmUgdGhlIGNvZGUgc3RyaW5nIHRoYXQgdGhlIG9mZnNldCByZWZlcnNcbi8vIGludG8uXG5cbmZ1bmN0aW9uIGdldExpbmVJbmZvKGlucHV0LCBvZmZzZXQpIHtcbiAgZm9yICh2YXIgbGluZSA9IDEsIGN1ciA9IDA7Oykge1xuICAgIGxpbmVCcmVha0cubGFzdEluZGV4ID0gY3VyO1xuICAgIHZhciBtYXRjaCA9IGxpbmVCcmVha0cuZXhlYyhpbnB1dCk7XG4gICAgaWYgKG1hdGNoICYmIG1hdGNoLmluZGV4IDwgb2Zmc2V0KSB7XG4gICAgICArK2xpbmU7XG4gICAgICBjdXIgPSBtYXRjaC5pbmRleCArIG1hdGNoWzBdLmxlbmd0aDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG5ldyBQb3NpdGlvbihsaW5lLCBvZmZzZXQgLSBjdXIpXG4gICAgfVxuICB9XG59XG5cbi8vIEEgc2Vjb25kIG9wdGlvbmFsIGFyZ3VtZW50IGNhbiBiZSBnaXZlbiB0byBmdXJ0aGVyIGNvbmZpZ3VyZVxuLy8gdGhlIHBhcnNlciBwcm9jZXNzLiBUaGVzZSBvcHRpb25zIGFyZSByZWNvZ25pemVkOlxuXG52YXIgZGVmYXVsdE9wdGlvbnMgPSB7XG4gIC8vIGBlY21hVmVyc2lvbmAgaW5kaWNhdGVzIHRoZSBFQ01BU2NyaXB0IHZlcnNpb24gdG8gcGFyc2UuIE11c3QgYmVcbiAgLy8gZWl0aGVyIDMsIDUsIDYgKDIwMTUpLCA3ICgyMDE2KSwgOCAoMjAxNyksIDkgKDIwMTgpLCBvciAxMFxuICAvLyAoMjAxOSkuIFRoaXMgaW5mbHVlbmNlcyBzdXBwb3J0IGZvciBzdHJpY3QgbW9kZSwgdGhlIHNldCBvZlxuICAvLyByZXNlcnZlZCB3b3JkcywgYW5kIHN1cHBvcnQgZm9yIG5ldyBzeW50YXggZmVhdHVyZXMuIFRoZSBkZWZhdWx0XG4gIC8vIGlzIDkuXG4gIGVjbWFWZXJzaW9uOiA5LFxuICAvLyBgc291cmNlVHlwZWAgaW5kaWNhdGVzIHRoZSBtb2RlIHRoZSBjb2RlIHNob3VsZCBiZSBwYXJzZWQgaW4uXG4gIC8vIENhbiBiZSBlaXRoZXIgYFwic2NyaXB0XCJgIG9yIGBcIm1vZHVsZVwiYC4gVGhpcyBpbmZsdWVuY2VzIGdsb2JhbFxuICAvLyBzdHJpY3QgbW9kZSBhbmQgcGFyc2luZyBvZiBgaW1wb3J0YCBhbmQgYGV4cG9ydGAgZGVjbGFyYXRpb25zLlxuICBzb3VyY2VUeXBlOiBcInNjcmlwdFwiLFxuICAvLyBgb25JbnNlcnRlZFNlbWljb2xvbmAgY2FuIGJlIGEgY2FsbGJhY2sgdGhhdCB3aWxsIGJlIGNhbGxlZFxuICAvLyB3aGVuIGEgc2VtaWNvbG9uIGlzIGF1dG9tYXRpY2FsbHkgaW5zZXJ0ZWQuIEl0IHdpbGwgYmUgcGFzc2VkXG4gIC8vIHRoZSBwb3NpdGlvbiBvZiB0aGUgY29tbWEgYXMgYW4gb2Zmc2V0LCBhbmQgaWYgYGxvY2F0aW9uc2AgaXNcbiAgLy8gZW5hYmxlZCwgaXQgaXMgZ2l2ZW4gdGhlIGxvY2F0aW9uIGFzIGEgYHtsaW5lLCBjb2x1bW59YCBvYmplY3RcbiAgLy8gYXMgc2Vjb25kIGFyZ3VtZW50LlxuICBvbkluc2VydGVkU2VtaWNvbG9uOiBudWxsLFxuICAvLyBgb25UcmFpbGluZ0NvbW1hYCBpcyBzaW1pbGFyIHRvIGBvbkluc2VydGVkU2VtaWNvbG9uYCwgYnV0IGZvclxuICAvLyB0cmFpbGluZyBjb21tYXMuXG4gIG9uVHJhaWxpbmdDb21tYTogbnVsbCxcbiAgLy8gQnkgZGVmYXVsdCwgcmVzZXJ2ZWQgd29yZHMgYXJlIG9ubHkgZW5mb3JjZWQgaWYgZWNtYVZlcnNpb24gPj0gNS5cbiAgLy8gU2V0IGBhbGxvd1Jlc2VydmVkYCB0byBhIGJvb2xlYW4gdmFsdWUgdG8gZXhwbGljaXRseSB0dXJuIHRoaXMgb25cbiAgLy8gYW4gb2ZmLiBXaGVuIHRoaXMgb3B0aW9uIGhhcyB0aGUgdmFsdWUgXCJuZXZlclwiLCByZXNlcnZlZCB3b3Jkc1xuICAvLyBhbmQga2V5d29yZHMgY2FuIGFsc28gbm90IGJlIHVzZWQgYXMgcHJvcGVydHkgbmFtZXMuXG4gIGFsbG93UmVzZXJ2ZWQ6IG51bGwsXG4gIC8vIFdoZW4gZW5hYmxlZCwgYSByZXR1cm4gYXQgdGhlIHRvcCBsZXZlbCBpcyBub3QgY29uc2lkZXJlZCBhblxuICAvLyBlcnJvci5cbiAgYWxsb3dSZXR1cm5PdXRzaWRlRnVuY3Rpb246IGZhbHNlLFxuICAvLyBXaGVuIGVuYWJsZWQsIGltcG9ydC9leHBvcnQgc3RhdGVtZW50cyBhcmUgbm90IGNvbnN0cmFpbmVkIHRvXG4gIC8vIGFwcGVhcmluZyBhdCB0aGUgdG9wIG9mIHRoZSBwcm9ncmFtLlxuICBhbGxvd0ltcG9ydEV4cG9ydEV2ZXJ5d2hlcmU6IGZhbHNlLFxuICAvLyBXaGVuIGVuYWJsZWQsIGF3YWl0IGlkZW50aWZpZXJzIGFyZSBhbGxvd2VkIHRvIGFwcGVhciBhdCB0aGUgdG9wLWxldmVsIHNjb3BlLFxuICAvLyBidXQgdGhleSBhcmUgc3RpbGwgbm90IGFsbG93ZWQgaW4gbm9uLWFzeW5jIGZ1bmN0aW9ucy5cbiAgYWxsb3dBd2FpdE91dHNpZGVGdW5jdGlvbjogZmFsc2UsXG4gIC8vIFdoZW4gZW5hYmxlZCwgaGFzaGJhbmcgZGlyZWN0aXZlIGluIHRoZSBiZWdpbm5pbmcgb2YgZmlsZVxuICAvLyBpcyBhbGxvd2VkIGFuZCB0cmVhdGVkIGFzIGEgbGluZSBjb21tZW50LlxuICBhbGxvd0hhc2hCYW5nOiBmYWxzZSxcbiAgLy8gV2hlbiBgbG9jYXRpb25zYCBpcyBvbiwgYGxvY2AgcHJvcGVydGllcyBob2xkaW5nIG9iamVjdHMgd2l0aFxuICAvLyBgc3RhcnRgIGFuZCBgZW5kYCBwcm9wZXJ0aWVzIGluIGB7bGluZSwgY29sdW1ufWAgZm9ybSAod2l0aFxuICAvLyBsaW5lIGJlaW5nIDEtYmFzZWQgYW5kIGNvbHVtbiAwLWJhc2VkKSB3aWxsIGJlIGF0dGFjaGVkIHRvIHRoZVxuICAvLyBub2Rlcy5cbiAgbG9jYXRpb25zOiBmYWxzZSxcbiAgLy8gQSBmdW5jdGlvbiBjYW4gYmUgcGFzc2VkIGFzIGBvblRva2VuYCBvcHRpb24sIHdoaWNoIHdpbGxcbiAgLy8gY2F1c2UgQWNvcm4gdG8gY2FsbCB0aGF0IGZ1bmN0aW9uIHdpdGggb2JqZWN0IGluIHRoZSBzYW1lXG4gIC8vIGZvcm1hdCBhcyB0b2tlbnMgcmV0dXJuZWQgZnJvbSBgdG9rZW5pemVyKCkuZ2V0VG9rZW4oKWAuIE5vdGVcbiAgLy8gdGhhdCB5b3UgYXJlIG5vdCBhbGxvd2VkIHRvIGNhbGwgdGhlIHBhcnNlciBmcm9tIHRoZVxuICAvLyBjYWxsYmFja+KAlHRoYXQgd2lsbCBjb3JydXB0IGl0cyBpbnRlcm5hbCBzdGF0ZS5cbiAgb25Ub2tlbjogbnVsbCxcbiAgLy8gQSBmdW5jdGlvbiBjYW4gYmUgcGFzc2VkIGFzIGBvbkNvbW1lbnRgIG9wdGlvbiwgd2hpY2ggd2lsbFxuICAvLyBjYXVzZSBBY29ybiB0byBjYWxsIHRoYXQgZnVuY3Rpb24gd2l0aCBgKGJsb2NrLCB0ZXh0LCBzdGFydCxcbiAgLy8gZW5kKWAgcGFyYW1ldGVycyB3aGVuZXZlciBhIGNvbW1lbnQgaXMgc2tpcHBlZC4gYGJsb2NrYCBpcyBhXG4gIC8vIGJvb2xlYW4gaW5kaWNhdGluZyB3aGV0aGVyIHRoaXMgaXMgYSBibG9jayAoYC8qICovYCkgY29tbWVudCxcbiAgLy8gYHRleHRgIGlzIHRoZSBjb250ZW50IG9mIHRoZSBjb21tZW50LCBhbmQgYHN0YXJ0YCBhbmQgYGVuZGAgYXJlXG4gIC8vIGNoYXJhY3RlciBvZmZzZXRzIHRoYXQgZGVub3RlIHRoZSBzdGFydCBhbmQgZW5kIG9mIHRoZSBjb21tZW50LlxuICAvLyBXaGVuIHRoZSBgbG9jYXRpb25zYCBvcHRpb24gaXMgb24sIHR3byBtb3JlIHBhcmFtZXRlcnMgYXJlXG4gIC8vIHBhc3NlZCwgdGhlIGZ1bGwgYHtsaW5lLCBjb2x1bW59YCBsb2NhdGlvbnMgb2YgdGhlIHN0YXJ0IGFuZFxuICAvLyBlbmQgb2YgdGhlIGNvbW1lbnRzLiBOb3RlIHRoYXQgeW91IGFyZSBub3QgYWxsb3dlZCB0byBjYWxsIHRoZVxuICAvLyBwYXJzZXIgZnJvbSB0aGUgY2FsbGJhY2vigJR0aGF0IHdpbGwgY29ycnVwdCBpdHMgaW50ZXJuYWwgc3RhdGUuXG4gIG9uQ29tbWVudDogbnVsbCxcbiAgLy8gTm9kZXMgaGF2ZSB0aGVpciBzdGFydCBhbmQgZW5kIGNoYXJhY3RlcnMgb2Zmc2V0cyByZWNvcmRlZCBpblxuICAvLyBgc3RhcnRgIGFuZCBgZW5kYCBwcm9wZXJ0aWVzIChkaXJlY3RseSBvbiB0aGUgbm9kZSwgcmF0aGVyIHRoYW5cbiAgLy8gdGhlIGBsb2NgIG9iamVjdCwgd2hpY2ggaG9sZHMgbGluZS9jb2x1bW4gZGF0YS4gVG8gYWxzbyBhZGQgYVxuICAvLyBbc2VtaS1zdGFuZGFyZGl6ZWRdW3JhbmdlXSBgcmFuZ2VgIHByb3BlcnR5IGhvbGRpbmcgYSBgW3N0YXJ0LFxuICAvLyBlbmRdYCBhcnJheSB3aXRoIHRoZSBzYW1lIG51bWJlcnMsIHNldCB0aGUgYHJhbmdlc2Agb3B0aW9uIHRvXG4gIC8vIGB0cnVlYC5cbiAgLy9cbiAgLy8gW3JhbmdlXTogaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9NzQ1Njc4XG4gIHJhbmdlczogZmFsc2UsXG4gIC8vIEl0IGlzIHBvc3NpYmxlIHRvIHBhcnNlIG11bHRpcGxlIGZpbGVzIGludG8gYSBzaW5nbGUgQVNUIGJ5XG4gIC8vIHBhc3NpbmcgdGhlIHRyZWUgcHJvZHVjZWQgYnkgcGFyc2luZyB0aGUgZmlyc3QgZmlsZSBhc1xuICAvLyBgcHJvZ3JhbWAgb3B0aW9uIGluIHN1YnNlcXVlbnQgcGFyc2VzLiBUaGlzIHdpbGwgYWRkIHRoZVxuICAvLyB0b3BsZXZlbCBmb3JtcyBvZiB0aGUgcGFyc2VkIGZpbGUgdG8gdGhlIGBQcm9ncmFtYCAodG9wKSBub2RlXG4gIC8vIG9mIGFuIGV4aXN0aW5nIHBhcnNlIHRyZWUuXG4gIHByb2dyYW06IG51bGwsXG4gIC8vIFdoZW4gYGxvY2F0aW9uc2AgaXMgb24sIHlvdSBjYW4gcGFzcyB0aGlzIHRvIHJlY29yZCB0aGUgc291cmNlXG4gIC8vIGZpbGUgaW4gZXZlcnkgbm9kZSdzIGBsb2NgIG9iamVjdC5cbiAgc291cmNlRmlsZTogbnVsbCxcbiAgLy8gVGhpcyB2YWx1ZSwgaWYgZ2l2ZW4sIGlzIHN0b3JlZCBpbiBldmVyeSBub2RlLCB3aGV0aGVyXG4gIC8vIGBsb2NhdGlvbnNgIGlzIG9uIG9yIG9mZi5cbiAgZGlyZWN0U291cmNlRmlsZTogbnVsbCxcbiAgLy8gV2hlbiBlbmFibGVkLCBwYXJlbnRoZXNpemVkIGV4cHJlc3Npb25zIGFyZSByZXByZXNlbnRlZCBieVxuICAvLyAobm9uLXN0YW5kYXJkKSBQYXJlbnRoZXNpemVkRXhwcmVzc2lvbiBub2Rlc1xuICBwcmVzZXJ2ZVBhcmVuczogZmFsc2Vcbn07XG5cbi8vIEludGVycHJldCBhbmQgZGVmYXVsdCBhbiBvcHRpb25zIG9iamVjdFxuXG5mdW5jdGlvbiBnZXRPcHRpb25zKG9wdHMpIHtcbiAgdmFyIG9wdGlvbnMgPSB7fTtcblxuICBmb3IgKHZhciBvcHQgaW4gZGVmYXVsdE9wdGlvbnMpXG4gICAgeyBvcHRpb25zW29wdF0gPSBvcHRzICYmIGhhcyhvcHRzLCBvcHQpID8gb3B0c1tvcHRdIDogZGVmYXVsdE9wdGlvbnNbb3B0XTsgfVxuXG4gIGlmIChvcHRpb25zLmVjbWFWZXJzaW9uID49IDIwMTUpXG4gICAgeyBvcHRpb25zLmVjbWFWZXJzaW9uIC09IDIwMDk7IH1cblxuICBpZiAob3B0aW9ucy5hbGxvd1Jlc2VydmVkID09IG51bGwpXG4gICAgeyBvcHRpb25zLmFsbG93UmVzZXJ2ZWQgPSBvcHRpb25zLmVjbWFWZXJzaW9uIDwgNTsgfVxuXG4gIGlmIChpc0FycmF5KG9wdGlvbnMub25Ub2tlbikpIHtcbiAgICB2YXIgdG9rZW5zID0gb3B0aW9ucy5vblRva2VuO1xuICAgIG9wdGlvbnMub25Ub2tlbiA9IGZ1bmN0aW9uICh0b2tlbikgeyByZXR1cm4gdG9rZW5zLnB1c2godG9rZW4pOyB9O1xuICB9XG4gIGlmIChpc0FycmF5KG9wdGlvbnMub25Db21tZW50KSlcbiAgICB7IG9wdGlvbnMub25Db21tZW50ID0gcHVzaENvbW1lbnQob3B0aW9ucywgb3B0aW9ucy5vbkNvbW1lbnQpOyB9XG5cbiAgcmV0dXJuIG9wdGlvbnNcbn1cblxuZnVuY3Rpb24gcHVzaENvbW1lbnQob3B0aW9ucywgYXJyYXkpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGJsb2NrLCB0ZXh0LCBzdGFydCwgZW5kLCBzdGFydExvYywgZW5kTG9jKSB7XG4gICAgdmFyIGNvbW1lbnQgPSB7XG4gICAgICB0eXBlOiBibG9jayA/IFwiQmxvY2tcIiA6IFwiTGluZVwiLFxuICAgICAgdmFsdWU6IHRleHQsXG4gICAgICBzdGFydDogc3RhcnQsXG4gICAgICBlbmQ6IGVuZFxuICAgIH07XG4gICAgaWYgKG9wdGlvbnMubG9jYXRpb25zKVxuICAgICAgeyBjb21tZW50LmxvYyA9IG5ldyBTb3VyY2VMb2NhdGlvbih0aGlzLCBzdGFydExvYywgZW5kTG9jKTsgfVxuICAgIGlmIChvcHRpb25zLnJhbmdlcylcbiAgICAgIHsgY29tbWVudC5yYW5nZSA9IFtzdGFydCwgZW5kXTsgfVxuICAgIGFycmF5LnB1c2goY29tbWVudCk7XG4gIH1cbn1cblxuLy8gRWFjaCBzY29wZSBnZXRzIGEgYml0c2V0IHRoYXQgbWF5IGNvbnRhaW4gdGhlc2UgZmxhZ3NcbnZhciBTQ09QRV9UT1AgPSAxO1xudmFyIFNDT1BFX0ZVTkNUSU9OID0gMjtcbnZhciBTQ09QRV9WQVIgPSBTQ09QRV9UT1AgfCBTQ09QRV9GVU5DVElPTjtcbnZhciBTQ09QRV9BU1lOQyA9IDQ7XG52YXIgU0NPUEVfR0VORVJBVE9SID0gODtcbnZhciBTQ09QRV9BUlJPVyA9IDE2O1xudmFyIFNDT1BFX1NJTVBMRV9DQVRDSCA9IDMyO1xudmFyIFNDT1BFX1NVUEVSID0gNjQ7XG52YXIgU0NPUEVfRElSRUNUX1NVUEVSID0gMTI4O1xuXG5mdW5jdGlvbiBmdW5jdGlvbkZsYWdzKGFzeW5jLCBnZW5lcmF0b3IpIHtcbiAgcmV0dXJuIFNDT1BFX0ZVTkNUSU9OIHwgKGFzeW5jID8gU0NPUEVfQVNZTkMgOiAwKSB8IChnZW5lcmF0b3IgPyBTQ09QRV9HRU5FUkFUT1IgOiAwKVxufVxuXG4vLyBVc2VkIGluIGNoZWNrTFZhbCBhbmQgZGVjbGFyZU5hbWUgdG8gZGV0ZXJtaW5lIHRoZSB0eXBlIG9mIGEgYmluZGluZ1xudmFyIEJJTkRfTk9ORSA9IDA7XG52YXIgQklORF9WQVIgPSAxO1xudmFyIEJJTkRfTEVYSUNBTCA9IDI7XG52YXIgQklORF9GVU5DVElPTiA9IDM7XG52YXIgQklORF9TSU1QTEVfQ0FUQ0ggPSA0O1xudmFyIEJJTkRfT1VUU0lERSA9IDU7IC8vIFNwZWNpYWwgY2FzZSBmb3IgZnVuY3Rpb24gbmFtZXMgYXMgYm91bmQgaW5zaWRlIHRoZSBmdW5jdGlvblxuXG52YXIgUGFyc2VyID0gZnVuY3Rpb24gUGFyc2VyKG9wdGlvbnMsIGlucHV0LCBzdGFydFBvcykge1xuICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zID0gZ2V0T3B0aW9ucyhvcHRpb25zKTtcbiAgdGhpcy5zb3VyY2VGaWxlID0gb3B0aW9ucy5zb3VyY2VGaWxlO1xuICB0aGlzLmtleXdvcmRzID0gd29yZHNSZWdleHAoa2V5d29yZHNbb3B0aW9ucy5lY21hVmVyc2lvbiA+PSA2ID8gNiA6IDVdKTtcbiAgdmFyIHJlc2VydmVkID0gXCJcIjtcbiAgaWYgKCFvcHRpb25zLmFsbG93UmVzZXJ2ZWQpIHtcbiAgICBmb3IgKHZhciB2ID0gb3B0aW9ucy5lY21hVmVyc2lvbjs7IHYtLSlcbiAgICAgIHsgaWYgKHJlc2VydmVkID0gcmVzZXJ2ZWRXb3Jkc1t2XSkgeyBicmVhayB9IH1cbiAgICBpZiAob3B0aW9ucy5zb3VyY2VUeXBlID09PSBcIm1vZHVsZVwiKSB7IHJlc2VydmVkICs9IFwiIGF3YWl0XCI7IH1cbiAgfVxuICB0aGlzLnJlc2VydmVkV29yZHMgPSB3b3Jkc1JlZ2V4cChyZXNlcnZlZCk7XG4gIHZhciByZXNlcnZlZFN0cmljdCA9IChyZXNlcnZlZCA/IHJlc2VydmVkICsgXCIgXCIgOiBcIlwiKSArIHJlc2VydmVkV29yZHMuc3RyaWN0O1xuICB0aGlzLnJlc2VydmVkV29yZHNTdHJpY3QgPSB3b3Jkc1JlZ2V4cChyZXNlcnZlZFN0cmljdCk7XG4gIHRoaXMucmVzZXJ2ZWRXb3Jkc1N0cmljdEJpbmQgPSB3b3Jkc1JlZ2V4cChyZXNlcnZlZFN0cmljdCArIFwiIFwiICsgcmVzZXJ2ZWRXb3Jkcy5zdHJpY3RCaW5kKTtcbiAgdGhpcy5pbnB1dCA9IFN0cmluZyhpbnB1dCk7XG5cbiAgLy8gVXNlZCB0byBzaWduYWwgdG8gY2FsbGVycyBvZiBgcmVhZFdvcmQxYCB3aGV0aGVyIHRoZSB3b3JkXG4gIC8vIGNvbnRhaW5lZCBhbnkgZXNjYXBlIHNlcXVlbmNlcy4gVGhpcyBpcyBuZWVkZWQgYmVjYXVzZSB3b3JkcyB3aXRoXG4gIC8vIGVzY2FwZSBzZXF1ZW5jZXMgbXVzdCBub3QgYmUgaW50ZXJwcmV0ZWQgYXMga2V5d29yZHMuXG4gIHRoaXMuY29udGFpbnNFc2MgPSBmYWxzZTtcblxuICAvLyBTZXQgdXAgdG9rZW4gc3RhdGVcblxuICAvLyBUaGUgY3VycmVudCBwb3NpdGlvbiBvZiB0aGUgdG9rZW5pemVyIGluIHRoZSBpbnB1dC5cbiAgaWYgKHN0YXJ0UG9zKSB7XG4gICAgdGhpcy5wb3MgPSBzdGFydFBvcztcbiAgICB0aGlzLmxpbmVTdGFydCA9IHRoaXMuaW5wdXQubGFzdEluZGV4T2YoXCJcXG5cIiwgc3RhcnRQb3MgLSAxKSArIDE7XG4gICAgdGhpcy5jdXJMaW5lID0gdGhpcy5pbnB1dC5zbGljZSgwLCB0aGlzLmxpbmVTdGFydCkuc3BsaXQobGluZUJyZWFrKS5sZW5ndGg7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5wb3MgPSB0aGlzLmxpbmVTdGFydCA9IDA7XG4gICAgdGhpcy5jdXJMaW5lID0gMTtcbiAgfVxuXG4gIC8vIFByb3BlcnRpZXMgb2YgdGhlIGN1cnJlbnQgdG9rZW46XG4gIC8vIEl0cyB0eXBlXG4gIHRoaXMudHlwZSA9IHR5cGVzLmVvZjtcbiAgLy8gRm9yIHRva2VucyB0aGF0IGluY2x1ZGUgbW9yZSBpbmZvcm1hdGlvbiB0aGFuIHRoZWlyIHR5cGUsIHRoZSB2YWx1ZVxuICB0aGlzLnZhbHVlID0gbnVsbDtcbiAgLy8gSXRzIHN0YXJ0IGFuZCBlbmQgb2Zmc2V0XG4gIHRoaXMuc3RhcnQgPSB0aGlzLmVuZCA9IHRoaXMucG9zO1xuICAvLyBBbmQsIGlmIGxvY2F0aW9ucyBhcmUgdXNlZCwgdGhlIHtsaW5lLCBjb2x1bW59IG9iamVjdFxuICAvLyBjb3JyZXNwb25kaW5nIHRvIHRob3NlIG9mZnNldHNcbiAgdGhpcy5zdGFydExvYyA9IHRoaXMuZW5kTG9jID0gdGhpcy5jdXJQb3NpdGlvbigpO1xuXG4gIC8vIFBvc2l0aW9uIGluZm9ybWF0aW9uIGZvciB0aGUgcHJldmlvdXMgdG9rZW5cbiAgdGhpcy5sYXN0VG9rRW5kTG9jID0gdGhpcy5sYXN0VG9rU3RhcnRMb2MgPSBudWxsO1xuICB0aGlzLmxhc3RUb2tTdGFydCA9IHRoaXMubGFzdFRva0VuZCA9IHRoaXMucG9zO1xuXG4gIC8vIFRoZSBjb250ZXh0IHN0YWNrIGlzIHVzZWQgdG8gc3VwZXJmaWNpYWxseSB0cmFjayBzeW50YWN0aWNcbiAgLy8gY29udGV4dCB0byBwcmVkaWN0IHdoZXRoZXIgYSByZWd1bGFyIGV4cHJlc3Npb24gaXMgYWxsb3dlZCBpbiBhXG4gIC8vIGdpdmVuIHBvc2l0aW9uLlxuICB0aGlzLmNvbnRleHQgPSB0aGlzLmluaXRpYWxDb250ZXh0KCk7XG4gIHRoaXMuZXhwckFsbG93ZWQgPSB0cnVlO1xuXG4gIC8vIEZpZ3VyZSBvdXQgaWYgaXQncyBhIG1vZHVsZSBjb2RlLlxuICB0aGlzLmluTW9kdWxlID0gb3B0aW9ucy5zb3VyY2VUeXBlID09PSBcIm1vZHVsZVwiO1xuICB0aGlzLnN0cmljdCA9IHRoaXMuaW5Nb2R1bGUgfHwgdGhpcy5zdHJpY3REaXJlY3RpdmUodGhpcy5wb3MpO1xuXG4gIC8vIFVzZWQgdG8gc2lnbmlmeSB0aGUgc3RhcnQgb2YgYSBwb3RlbnRpYWwgYXJyb3cgZnVuY3Rpb25cbiAgdGhpcy5wb3RlbnRpYWxBcnJvd0F0ID0gLTE7XG5cbiAgLy8gUG9zaXRpb25zIHRvIGRlbGF5ZWQtY2hlY2sgdGhhdCB5aWVsZC9hd2FpdCBkb2VzIG5vdCBleGlzdCBpbiBkZWZhdWx0IHBhcmFtZXRlcnMuXG4gIHRoaXMueWllbGRQb3MgPSB0aGlzLmF3YWl0UG9zID0gdGhpcy5hd2FpdElkZW50UG9zID0gMDtcbiAgLy8gTGFiZWxzIGluIHNjb3BlLlxuICB0aGlzLmxhYmVscyA9IFtdO1xuICAvLyBUaHVzLWZhciB1bmRlZmluZWQgZXhwb3J0cy5cbiAgdGhpcy51bmRlZmluZWRFeHBvcnRzID0ge307XG5cbiAgLy8gSWYgZW5hYmxlZCwgc2tpcCBsZWFkaW5nIGhhc2hiYW5nIGxpbmUuXG4gIGlmICh0aGlzLnBvcyA9PT0gMCAmJiBvcHRpb25zLmFsbG93SGFzaEJhbmcgJiYgdGhpcy5pbnB1dC5zbGljZSgwLCAyKSA9PT0gXCIjIVwiKVxuICAgIHsgdGhpcy5za2lwTGluZUNvbW1lbnQoMik7IH1cblxuICAvLyBTY29wZSB0cmFja2luZyBmb3IgZHVwbGljYXRlIHZhcmlhYmxlIG5hbWVzIChzZWUgc2NvcGUuanMpXG4gIHRoaXMuc2NvcGVTdGFjayA9IFtdO1xuICB0aGlzLmVudGVyU2NvcGUoU0NPUEVfVE9QKTtcblxuICAvLyBGb3IgUmVnRXhwIHZhbGlkYXRpb25cbiAgdGhpcy5yZWdleHBTdGF0ZSA9IG51bGw7XG59O1xuXG52YXIgcHJvdG90eXBlQWNjZXNzb3JzID0geyBpbkZ1bmN0aW9uOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9LGluR2VuZXJhdG9yOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9LGluQXN5bmM6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0sYWxsb3dTdXBlcjogeyBjb25maWd1cmFibGU6IHRydWUgfSxhbGxvd0RpcmVjdFN1cGVyOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9LHRyZWF0RnVuY3Rpb25zQXNWYXI6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0gfTtcblxuUGFyc2VyLnByb3RvdHlwZS5wYXJzZSA9IGZ1bmN0aW9uIHBhcnNlICgpIHtcbiAgdmFyIG5vZGUgPSB0aGlzLm9wdGlvbnMucHJvZ3JhbSB8fCB0aGlzLnN0YXJ0Tm9kZSgpO1xuICB0aGlzLm5leHRUb2tlbigpO1xuICByZXR1cm4gdGhpcy5wYXJzZVRvcExldmVsKG5vZGUpXG59O1xuXG5wcm90b3R5cGVBY2Nlc3NvcnMuaW5GdW5jdGlvbi5nZXQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAodGhpcy5jdXJyZW50VmFyU2NvcGUoKS5mbGFncyAmIFNDT1BFX0ZVTkNUSU9OKSA+IDAgfTtcbnByb3RvdHlwZUFjY2Vzc29ycy5pbkdlbmVyYXRvci5nZXQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAodGhpcy5jdXJyZW50VmFyU2NvcGUoKS5mbGFncyAmIFNDT1BFX0dFTkVSQVRPUikgPiAwIH07XG5wcm90b3R5cGVBY2Nlc3NvcnMuaW5Bc3luYy5nZXQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAodGhpcy5jdXJyZW50VmFyU2NvcGUoKS5mbGFncyAmIFNDT1BFX0FTWU5DKSA+IDAgfTtcbnByb3RvdHlwZUFjY2Vzc29ycy5hbGxvd1N1cGVyLmdldCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICh0aGlzLmN1cnJlbnRUaGlzU2NvcGUoKS5mbGFncyAmIFNDT1BFX1NVUEVSKSA+IDAgfTtcbnByb3RvdHlwZUFjY2Vzc29ycy5hbGxvd0RpcmVjdFN1cGVyLmdldCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICh0aGlzLmN1cnJlbnRUaGlzU2NvcGUoKS5mbGFncyAmIFNDT1BFX0RJUkVDVF9TVVBFUikgPiAwIH07XG5wcm90b3R5cGVBY2Nlc3NvcnMudHJlYXRGdW5jdGlvbnNBc1Zhci5nZXQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLnRyZWF0RnVuY3Rpb25zQXNWYXJJblNjb3BlKHRoaXMuY3VycmVudFNjb3BlKCkpIH07XG5cbi8vIFN3aXRjaCB0byBhIGdldHRlciBmb3IgNy4wLjAuXG5QYXJzZXIucHJvdG90eXBlLmluTm9uQXJyb3dGdW5jdGlvbiA9IGZ1bmN0aW9uIGluTm9uQXJyb3dGdW5jdGlvbiAoKSB7IHJldHVybiAodGhpcy5jdXJyZW50VGhpc1Njb3BlKCkuZmxhZ3MgJiBTQ09QRV9GVU5DVElPTikgPiAwIH07XG5cblBhcnNlci5leHRlbmQgPSBmdW5jdGlvbiBleHRlbmQgKCkge1xuICAgIHZhciBwbHVnaW5zID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgd2hpbGUgKCBsZW4tLSApIHBsdWdpbnNbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcblxuICB2YXIgY2xzID0gdGhpcztcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwbHVnaW5zLmxlbmd0aDsgaSsrKSB7IGNscyA9IHBsdWdpbnNbaV0oY2xzKTsgfVxuICByZXR1cm4gY2xzXG59O1xuXG5QYXJzZXIucGFyc2UgPSBmdW5jdGlvbiBwYXJzZSAoaW5wdXQsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIG5ldyB0aGlzKG9wdGlvbnMsIGlucHV0KS5wYXJzZSgpXG59O1xuXG5QYXJzZXIucGFyc2VFeHByZXNzaW9uQXQgPSBmdW5jdGlvbiBwYXJzZUV4cHJlc3Npb25BdCAoaW5wdXQsIHBvcywgb3B0aW9ucykge1xuICB2YXIgcGFyc2VyID0gbmV3IHRoaXMob3B0aW9ucywgaW5wdXQsIHBvcyk7XG4gIHBhcnNlci5uZXh0VG9rZW4oKTtcbiAgcmV0dXJuIHBhcnNlci5wYXJzZUV4cHJlc3Npb24oKVxufTtcblxuUGFyc2VyLnRva2VuaXplciA9IGZ1bmN0aW9uIHRva2VuaXplciAoaW5wdXQsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIG5ldyB0aGlzKG9wdGlvbnMsIGlucHV0KVxufTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIFBhcnNlci5wcm90b3R5cGUsIHByb3RvdHlwZUFjY2Vzc29ycyApO1xuXG52YXIgcHAgPSBQYXJzZXIucHJvdG90eXBlO1xuXG4vLyAjIyBQYXJzZXIgdXRpbGl0aWVzXG5cbnZhciBsaXRlcmFsID0gL14oPzonKCg/OlxcXFwufFteJ10pKj8pJ3xcIigoPzpcXFxcLnxbXlwiXSkqPylcIikvO1xucHAuc3RyaWN0RGlyZWN0aXZlID0gZnVuY3Rpb24oc3RhcnQpIHtcbiAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgZm9yICg7Oykge1xuICAgIC8vIFRyeSB0byBmaW5kIHN0cmluZyBsaXRlcmFsLlxuICAgIHNraXBXaGl0ZVNwYWNlLmxhc3RJbmRleCA9IHN0YXJ0O1xuICAgIHN0YXJ0ICs9IHNraXBXaGl0ZVNwYWNlLmV4ZWModGhpcyQxLmlucHV0KVswXS5sZW5ndGg7XG4gICAgdmFyIG1hdGNoID0gbGl0ZXJhbC5leGVjKHRoaXMkMS5pbnB1dC5zbGljZShzdGFydCkpO1xuICAgIGlmICghbWF0Y2gpIHsgcmV0dXJuIGZhbHNlIH1cbiAgICBpZiAoKG1hdGNoWzFdIHx8IG1hdGNoWzJdKSA9PT0gXCJ1c2Ugc3RyaWN0XCIpIHsgcmV0dXJuIHRydWUgfVxuICAgIHN0YXJ0ICs9IG1hdGNoWzBdLmxlbmd0aDtcblxuICAgIC8vIFNraXAgc2VtaWNvbG9uLCBpZiBhbnkuXG4gICAgc2tpcFdoaXRlU3BhY2UubGFzdEluZGV4ID0gc3RhcnQ7XG4gICAgc3RhcnQgKz0gc2tpcFdoaXRlU3BhY2UuZXhlYyh0aGlzJDEuaW5wdXQpWzBdLmxlbmd0aDtcbiAgICBpZiAodGhpcyQxLmlucHV0W3N0YXJ0XSA9PT0gXCI7XCIpXG4gICAgICB7IHN0YXJ0Kys7IH1cbiAgfVxufTtcblxuLy8gUHJlZGljYXRlIHRoYXQgdGVzdHMgd2hldGhlciB0aGUgbmV4dCB0b2tlbiBpcyBvZiB0aGUgZ2l2ZW5cbi8vIHR5cGUsIGFuZCBpZiB5ZXMsIGNvbnN1bWVzIGl0IGFzIGEgc2lkZSBlZmZlY3QuXG5cbnBwLmVhdCA9IGZ1bmN0aW9uKHR5cGUpIHtcbiAgaWYgKHRoaXMudHlwZSA9PT0gdHlwZSkge1xuICAgIHRoaXMubmV4dCgpO1xuICAgIHJldHVybiB0cnVlXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbn07XG5cbi8vIFRlc3RzIHdoZXRoZXIgcGFyc2VkIHRva2VuIGlzIGEgY29udGV4dHVhbCBrZXl3b3JkLlxuXG5wcC5pc0NvbnRleHR1YWwgPSBmdW5jdGlvbihuYW1lKSB7XG4gIHJldHVybiB0aGlzLnR5cGUgPT09IHR5cGVzLm5hbWUgJiYgdGhpcy52YWx1ZSA9PT0gbmFtZSAmJiAhdGhpcy5jb250YWluc0VzY1xufTtcblxuLy8gQ29uc3VtZXMgY29udGV4dHVhbCBrZXl3b3JkIGlmIHBvc3NpYmxlLlxuXG5wcC5lYXRDb250ZXh0dWFsID0gZnVuY3Rpb24obmFtZSkge1xuICBpZiAoIXRoaXMuaXNDb250ZXh0dWFsKG5hbWUpKSB7IHJldHVybiBmYWxzZSB9XG4gIHRoaXMubmV4dCgpO1xuICByZXR1cm4gdHJ1ZVxufTtcblxuLy8gQXNzZXJ0cyB0aGF0IGZvbGxvd2luZyB0b2tlbiBpcyBnaXZlbiBjb250ZXh0dWFsIGtleXdvcmQuXG5cbnBwLmV4cGVjdENvbnRleHR1YWwgPSBmdW5jdGlvbihuYW1lKSB7XG4gIGlmICghdGhpcy5lYXRDb250ZXh0dWFsKG5hbWUpKSB7IHRoaXMudW5leHBlY3RlZCgpOyB9XG59O1xuXG4vLyBUZXN0IHdoZXRoZXIgYSBzZW1pY29sb24gY2FuIGJlIGluc2VydGVkIGF0IHRoZSBjdXJyZW50IHBvc2l0aW9uLlxuXG5wcC5jYW5JbnNlcnRTZW1pY29sb24gPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMudHlwZSA9PT0gdHlwZXMuZW9mIHx8XG4gICAgdGhpcy50eXBlID09PSB0eXBlcy5icmFjZVIgfHxcbiAgICBsaW5lQnJlYWsudGVzdCh0aGlzLmlucHV0LnNsaWNlKHRoaXMubGFzdFRva0VuZCwgdGhpcy5zdGFydCkpXG59O1xuXG5wcC5pbnNlcnRTZW1pY29sb24gPSBmdW5jdGlvbigpIHtcbiAgaWYgKHRoaXMuY2FuSW5zZXJ0U2VtaWNvbG9uKCkpIHtcbiAgICBpZiAodGhpcy5vcHRpb25zLm9uSW5zZXJ0ZWRTZW1pY29sb24pXG4gICAgICB7IHRoaXMub3B0aW9ucy5vbkluc2VydGVkU2VtaWNvbG9uKHRoaXMubGFzdFRva0VuZCwgdGhpcy5sYXN0VG9rRW5kTG9jKTsgfVxuICAgIHJldHVybiB0cnVlXG4gIH1cbn07XG5cbi8vIENvbnN1bWUgYSBzZW1pY29sb24sIG9yLCBmYWlsaW5nIHRoYXQsIHNlZSBpZiB3ZSBhcmUgYWxsb3dlZCB0b1xuLy8gcHJldGVuZCB0aGF0IHRoZXJlIGlzIGEgc2VtaWNvbG9uIGF0IHRoaXMgcG9zaXRpb24uXG5cbnBwLnNlbWljb2xvbiA9IGZ1bmN0aW9uKCkge1xuICBpZiAoIXRoaXMuZWF0KHR5cGVzLnNlbWkpICYmICF0aGlzLmluc2VydFNlbWljb2xvbigpKSB7IHRoaXMudW5leHBlY3RlZCgpOyB9XG59O1xuXG5wcC5hZnRlclRyYWlsaW5nQ29tbWEgPSBmdW5jdGlvbih0b2tUeXBlLCBub3ROZXh0KSB7XG4gIGlmICh0aGlzLnR5cGUgPT09IHRva1R5cGUpIHtcbiAgICBpZiAodGhpcy5vcHRpb25zLm9uVHJhaWxpbmdDb21tYSlcbiAgICAgIHsgdGhpcy5vcHRpb25zLm9uVHJhaWxpbmdDb21tYSh0aGlzLmxhc3RUb2tTdGFydCwgdGhpcy5sYXN0VG9rU3RhcnRMb2MpOyB9XG4gICAgaWYgKCFub3ROZXh0KVxuICAgICAgeyB0aGlzLm5leHQoKTsgfVxuICAgIHJldHVybiB0cnVlXG4gIH1cbn07XG5cbi8vIEV4cGVjdCBhIHRva2VuIG9mIGEgZ2l2ZW4gdHlwZS4gSWYgZm91bmQsIGNvbnN1bWUgaXQsIG90aGVyd2lzZSxcbi8vIHJhaXNlIGFuIHVuZXhwZWN0ZWQgdG9rZW4gZXJyb3IuXG5cbnBwLmV4cGVjdCA9IGZ1bmN0aW9uKHR5cGUpIHtcbiAgdGhpcy5lYXQodHlwZSkgfHwgdGhpcy51bmV4cGVjdGVkKCk7XG59O1xuXG4vLyBSYWlzZSBhbiB1bmV4cGVjdGVkIHRva2VuIGVycm9yLlxuXG5wcC51bmV4cGVjdGVkID0gZnVuY3Rpb24ocG9zKSB7XG4gIHRoaXMucmFpc2UocG9zICE9IG51bGwgPyBwb3MgOiB0aGlzLnN0YXJ0LCBcIlVuZXhwZWN0ZWQgdG9rZW5cIik7XG59O1xuXG5mdW5jdGlvbiBEZXN0cnVjdHVyaW5nRXJyb3JzKCkge1xuICB0aGlzLnNob3J0aGFuZEFzc2lnbiA9XG4gIHRoaXMudHJhaWxpbmdDb21tYSA9XG4gIHRoaXMucGFyZW50aGVzaXplZEFzc2lnbiA9XG4gIHRoaXMucGFyZW50aGVzaXplZEJpbmQgPVxuICB0aGlzLmRvdWJsZVByb3RvID1cbiAgICAtMTtcbn1cblxucHAuY2hlY2tQYXR0ZXJuRXJyb3JzID0gZnVuY3Rpb24ocmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycywgaXNBc3NpZ24pIHtcbiAgaWYgKCFyZWZEZXN0cnVjdHVyaW5nRXJyb3JzKSB7IHJldHVybiB9XG4gIGlmIChyZWZEZXN0cnVjdHVyaW5nRXJyb3JzLnRyYWlsaW5nQ29tbWEgPiAtMSlcbiAgICB7IHRoaXMucmFpc2VSZWNvdmVyYWJsZShyZWZEZXN0cnVjdHVyaW5nRXJyb3JzLnRyYWlsaW5nQ29tbWEsIFwiQ29tbWEgaXMgbm90IHBlcm1pdHRlZCBhZnRlciB0aGUgcmVzdCBlbGVtZW50XCIpOyB9XG4gIHZhciBwYXJlbnMgPSBpc0Fzc2lnbiA/IHJlZkRlc3RydWN0dXJpbmdFcnJvcnMucGFyZW50aGVzaXplZEFzc2lnbiA6IHJlZkRlc3RydWN0dXJpbmdFcnJvcnMucGFyZW50aGVzaXplZEJpbmQ7XG4gIGlmIChwYXJlbnMgPiAtMSkgeyB0aGlzLnJhaXNlUmVjb3ZlcmFibGUocGFyZW5zLCBcIlBhcmVudGhlc2l6ZWQgcGF0dGVyblwiKTsgfVxufTtcblxucHAuY2hlY2tFeHByZXNzaW9uRXJyb3JzID0gZnVuY3Rpb24ocmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycywgYW5kVGhyb3cpIHtcbiAgaWYgKCFyZWZEZXN0cnVjdHVyaW5nRXJyb3JzKSB7IHJldHVybiBmYWxzZSB9XG4gIHZhciBzaG9ydGhhbmRBc3NpZ24gPSByZWZEZXN0cnVjdHVyaW5nRXJyb3JzLnNob3J0aGFuZEFzc2lnbjtcbiAgdmFyIGRvdWJsZVByb3RvID0gcmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycy5kb3VibGVQcm90bztcbiAgaWYgKCFhbmRUaHJvdykgeyByZXR1cm4gc2hvcnRoYW5kQXNzaWduID49IDAgfHwgZG91YmxlUHJvdG8gPj0gMCB9XG4gIGlmIChzaG9ydGhhbmRBc3NpZ24gPj0gMClcbiAgICB7IHRoaXMucmFpc2Uoc2hvcnRoYW5kQXNzaWduLCBcIlNob3J0aGFuZCBwcm9wZXJ0eSBhc3NpZ25tZW50cyBhcmUgdmFsaWQgb25seSBpbiBkZXN0cnVjdHVyaW5nIHBhdHRlcm5zXCIpOyB9XG4gIGlmIChkb3VibGVQcm90byA+PSAwKVxuICAgIHsgdGhpcy5yYWlzZVJlY292ZXJhYmxlKGRvdWJsZVByb3RvLCBcIlJlZGVmaW5pdGlvbiBvZiBfX3Byb3RvX18gcHJvcGVydHlcIik7IH1cbn07XG5cbnBwLmNoZWNrWWllbGRBd2FpdEluRGVmYXVsdFBhcmFtcyA9IGZ1bmN0aW9uKCkge1xuICBpZiAodGhpcy55aWVsZFBvcyAmJiAoIXRoaXMuYXdhaXRQb3MgfHwgdGhpcy55aWVsZFBvcyA8IHRoaXMuYXdhaXRQb3MpKVxuICAgIHsgdGhpcy5yYWlzZSh0aGlzLnlpZWxkUG9zLCBcIllpZWxkIGV4cHJlc3Npb24gY2Fubm90IGJlIGEgZGVmYXVsdCB2YWx1ZVwiKTsgfVxuICBpZiAodGhpcy5hd2FpdFBvcylcbiAgICB7IHRoaXMucmFpc2UodGhpcy5hd2FpdFBvcywgXCJBd2FpdCBleHByZXNzaW9uIGNhbm5vdCBiZSBhIGRlZmF1bHQgdmFsdWVcIik7IH1cbn07XG5cbnBwLmlzU2ltcGxlQXNzaWduVGFyZ2V0ID0gZnVuY3Rpb24oZXhwcikge1xuICBpZiAoZXhwci50eXBlID09PSBcIlBhcmVudGhlc2l6ZWRFeHByZXNzaW9uXCIpXG4gICAgeyByZXR1cm4gdGhpcy5pc1NpbXBsZUFzc2lnblRhcmdldChleHByLmV4cHJlc3Npb24pIH1cbiAgcmV0dXJuIGV4cHIudHlwZSA9PT0gXCJJZGVudGlmaWVyXCIgfHwgZXhwci50eXBlID09PSBcIk1lbWJlckV4cHJlc3Npb25cIlxufTtcblxudmFyIHBwJDEgPSBQYXJzZXIucHJvdG90eXBlO1xuXG4vLyAjIyMgU3RhdGVtZW50IHBhcnNpbmdcblxuLy8gUGFyc2UgYSBwcm9ncmFtLiBJbml0aWFsaXplcyB0aGUgcGFyc2VyLCByZWFkcyBhbnkgbnVtYmVyIG9mXG4vLyBzdGF0ZW1lbnRzLCBhbmQgd3JhcHMgdGhlbSBpbiBhIFByb2dyYW0gbm9kZS4gIE9wdGlvbmFsbHkgdGFrZXMgYVxuLy8gYHByb2dyYW1gIGFyZ3VtZW50LiAgSWYgcHJlc2VudCwgdGhlIHN0YXRlbWVudHMgd2lsbCBiZSBhcHBlbmRlZFxuLy8gdG8gaXRzIGJvZHkgaW5zdGVhZCBvZiBjcmVhdGluZyBhIG5ldyBub2RlLlxuXG5wcCQxLnBhcnNlVG9wTGV2ZWwgPSBmdW5jdGlvbihub2RlKSB7XG4gIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIHZhciBleHBvcnRzID0ge307XG4gIGlmICghbm9kZS5ib2R5KSB7IG5vZGUuYm9keSA9IFtdOyB9XG4gIHdoaWxlICh0aGlzLnR5cGUgIT09IHR5cGVzLmVvZikge1xuICAgIHZhciBzdG10ID0gdGhpcyQxLnBhcnNlU3RhdGVtZW50KG51bGwsIHRydWUsIGV4cG9ydHMpO1xuICAgIG5vZGUuYm9keS5wdXNoKHN0bXQpO1xuICB9XG4gIGlmICh0aGlzLmluTW9kdWxlKVxuICAgIHsgZm9yICh2YXIgaSA9IDAsIGxpc3QgPSBPYmplY3Qua2V5cyh0aGlzJDEudW5kZWZpbmVkRXhwb3J0cyk7IGkgPCBsaXN0Lmxlbmd0aDsgaSArPSAxKVxuICAgICAge1xuICAgICAgICB2YXIgbmFtZSA9IGxpc3RbaV07XG5cbiAgICAgICAgdGhpcyQxLnJhaXNlUmVjb3ZlcmFibGUodGhpcyQxLnVuZGVmaW5lZEV4cG9ydHNbbmFtZV0uc3RhcnQsIChcIkV4cG9ydCAnXCIgKyBuYW1lICsgXCInIGlzIG5vdCBkZWZpbmVkXCIpKTtcbiAgICAgIH0gfVxuICB0aGlzLmFkYXB0RGlyZWN0aXZlUHJvbG9ndWUobm9kZS5ib2R5KTtcbiAgdGhpcy5uZXh0KCk7XG4gIGlmICh0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24gPj0gNikge1xuICAgIG5vZGUuc291cmNlVHlwZSA9IHRoaXMub3B0aW9ucy5zb3VyY2VUeXBlO1xuICB9XG4gIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJQcm9ncmFtXCIpXG59O1xuXG52YXIgbG9vcExhYmVsID0ge2tpbmQ6IFwibG9vcFwifTtcbnZhciBzd2l0Y2hMYWJlbCA9IHtraW5kOiBcInN3aXRjaFwifTtcblxucHAkMS5pc0xldCA9IGZ1bmN0aW9uKGNvbnRleHQpIHtcbiAgaWYgKHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA8IDYgfHwgIXRoaXMuaXNDb250ZXh0dWFsKFwibGV0XCIpKSB7IHJldHVybiBmYWxzZSB9XG4gIHNraXBXaGl0ZVNwYWNlLmxhc3RJbmRleCA9IHRoaXMucG9zO1xuICB2YXIgc2tpcCA9IHNraXBXaGl0ZVNwYWNlLmV4ZWModGhpcy5pbnB1dCk7XG4gIHZhciBuZXh0ID0gdGhpcy5wb3MgKyBza2lwWzBdLmxlbmd0aCwgbmV4dENoID0gdGhpcy5pbnB1dC5jaGFyQ29kZUF0KG5leHQpO1xuICAvLyBGb3IgYW1iaWd1b3VzIGNhc2VzLCBkZXRlcm1pbmUgaWYgYSBMZXhpY2FsRGVjbGFyYXRpb24gKG9yIG9ubHkgYVxuICAvLyBTdGF0ZW1lbnQpIGlzIGFsbG93ZWQgaGVyZS4gSWYgY29udGV4dCBpcyBub3QgZW1wdHkgdGhlbiBvbmx5IGEgU3RhdGVtZW50XG4gIC8vIGlzIGFsbG93ZWQuIEhvd2V2ZXIsIGBsZXQgW2AgaXMgYW4gZXhwbGljaXQgbmVnYXRpdmUgbG9va2FoZWFkIGZvclxuICAvLyBFeHByZXNzaW9uU3RhdGVtZW50LCBzbyBzcGVjaWFsLWNhc2UgaXQgZmlyc3QuXG4gIGlmIChuZXh0Q2ggPT09IDkxKSB7IHJldHVybiB0cnVlIH0gLy8gJ1snXG4gIGlmIChjb250ZXh0KSB7IHJldHVybiBmYWxzZSB9XG5cbiAgaWYgKG5leHRDaCA9PT0gMTIzKSB7IHJldHVybiB0cnVlIH0gLy8gJ3snXG4gIGlmIChpc0lkZW50aWZpZXJTdGFydChuZXh0Q2gsIHRydWUpKSB7XG4gICAgdmFyIHBvcyA9IG5leHQgKyAxO1xuICAgIHdoaWxlIChpc0lkZW50aWZpZXJDaGFyKHRoaXMuaW5wdXQuY2hhckNvZGVBdChwb3MpLCB0cnVlKSkgeyArK3BvczsgfVxuICAgIHZhciBpZGVudCA9IHRoaXMuaW5wdXQuc2xpY2UobmV4dCwgcG9zKTtcbiAgICBpZiAoIWtleXdvcmRSZWxhdGlvbmFsT3BlcmF0b3IudGVzdChpZGVudCkpIHsgcmV0dXJuIHRydWUgfVxuICB9XG4gIHJldHVybiBmYWxzZVxufTtcblxuLy8gY2hlY2sgJ2FzeW5jIFtubyBMaW5lVGVybWluYXRvciBoZXJlXSBmdW5jdGlvbidcbi8vIC0gJ2FzeW5jIC8qZm9vKi8gZnVuY3Rpb24nIGlzIE9LLlxuLy8gLSAnYXN5bmMgLypcXG4qLyBmdW5jdGlvbicgaXMgaW52YWxpZC5cbnBwJDEuaXNBc3luY0Z1bmN0aW9uID0gZnVuY3Rpb24oKSB7XG4gIGlmICh0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24gPCA4IHx8ICF0aGlzLmlzQ29udGV4dHVhbChcImFzeW5jXCIpKVxuICAgIHsgcmV0dXJuIGZhbHNlIH1cblxuICBza2lwV2hpdGVTcGFjZS5sYXN0SW5kZXggPSB0aGlzLnBvcztcbiAgdmFyIHNraXAgPSBza2lwV2hpdGVTcGFjZS5leGVjKHRoaXMuaW5wdXQpO1xuICB2YXIgbmV4dCA9IHRoaXMucG9zICsgc2tpcFswXS5sZW5ndGg7XG4gIHJldHVybiAhbGluZUJyZWFrLnRlc3QodGhpcy5pbnB1dC5zbGljZSh0aGlzLnBvcywgbmV4dCkpICYmXG4gICAgdGhpcy5pbnB1dC5zbGljZShuZXh0LCBuZXh0ICsgOCkgPT09IFwiZnVuY3Rpb25cIiAmJlxuICAgIChuZXh0ICsgOCA9PT0gdGhpcy5pbnB1dC5sZW5ndGggfHwgIWlzSWRlbnRpZmllckNoYXIodGhpcy5pbnB1dC5jaGFyQXQobmV4dCArIDgpKSlcbn07XG5cbi8vIFBhcnNlIGEgc2luZ2xlIHN0YXRlbWVudC5cbi8vXG4vLyBJZiBleHBlY3RpbmcgYSBzdGF0ZW1lbnQgYW5kIGZpbmRpbmcgYSBzbGFzaCBvcGVyYXRvciwgcGFyc2UgYVxuLy8gcmVndWxhciBleHByZXNzaW9uIGxpdGVyYWwuIFRoaXMgaXMgdG8gaGFuZGxlIGNhc2VzIGxpa2Vcbi8vIGBpZiAoZm9vKSAvYmxhaC8uZXhlYyhmb28pYCwgd2hlcmUgbG9va2luZyBhdCB0aGUgcHJldmlvdXMgdG9rZW5cbi8vIGRvZXMgbm90IGhlbHAuXG5cbnBwJDEucGFyc2VTdGF0ZW1lbnQgPSBmdW5jdGlvbihjb250ZXh0LCB0b3BMZXZlbCwgZXhwb3J0cykge1xuICB2YXIgc3RhcnR0eXBlID0gdGhpcy50eXBlLCBub2RlID0gdGhpcy5zdGFydE5vZGUoKSwga2luZDtcblxuICBpZiAodGhpcy5pc0xldChjb250ZXh0KSkge1xuICAgIHN0YXJ0dHlwZSA9IHR5cGVzLl92YXI7XG4gICAga2luZCA9IFwibGV0XCI7XG4gIH1cblxuICAvLyBNb3N0IHR5cGVzIG9mIHN0YXRlbWVudHMgYXJlIHJlY29nbml6ZWQgYnkgdGhlIGtleXdvcmQgdGhleVxuICAvLyBzdGFydCB3aXRoLiBNYW55IGFyZSB0cml2aWFsIHRvIHBhcnNlLCBzb21lIHJlcXVpcmUgYSBiaXQgb2ZcbiAgLy8gY29tcGxleGl0eS5cblxuICBzd2l0Y2ggKHN0YXJ0dHlwZSkge1xuICBjYXNlIHR5cGVzLl9icmVhazogY2FzZSB0eXBlcy5fY29udGludWU6IHJldHVybiB0aGlzLnBhcnNlQnJlYWtDb250aW51ZVN0YXRlbWVudChub2RlLCBzdGFydHR5cGUua2V5d29yZClcbiAgY2FzZSB0eXBlcy5fZGVidWdnZXI6IHJldHVybiB0aGlzLnBhcnNlRGVidWdnZXJTdGF0ZW1lbnQobm9kZSlcbiAgY2FzZSB0eXBlcy5fZG86IHJldHVybiB0aGlzLnBhcnNlRG9TdGF0ZW1lbnQobm9kZSlcbiAgY2FzZSB0eXBlcy5fZm9yOiByZXR1cm4gdGhpcy5wYXJzZUZvclN0YXRlbWVudChub2RlKVxuICBjYXNlIHR5cGVzLl9mdW5jdGlvbjpcbiAgICAvLyBGdW5jdGlvbiBhcyBzb2xlIGJvZHkgb2YgZWl0aGVyIGFuIGlmIHN0YXRlbWVudCBvciBhIGxhYmVsZWQgc3RhdGVtZW50XG4gICAgLy8gd29ya3MsIGJ1dCBub3Qgd2hlbiBpdCBpcyBwYXJ0IG9mIGEgbGFiZWxlZCBzdGF0ZW1lbnQgdGhhdCBpcyB0aGUgc29sZVxuICAgIC8vIGJvZHkgb2YgYW4gaWYgc3RhdGVtZW50LlxuICAgIGlmICgoY29udGV4dCAmJiAodGhpcy5zdHJpY3QgfHwgY29udGV4dCAhPT0gXCJpZlwiICYmIGNvbnRleHQgIT09IFwibGFiZWxcIikpICYmIHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA+PSA2KSB7IHRoaXMudW5leHBlY3RlZCgpOyB9XG4gICAgcmV0dXJuIHRoaXMucGFyc2VGdW5jdGlvblN0YXRlbWVudChub2RlLCBmYWxzZSwgIWNvbnRleHQpXG4gIGNhc2UgdHlwZXMuX2NsYXNzOlxuICAgIGlmIChjb250ZXh0KSB7IHRoaXMudW5leHBlY3RlZCgpOyB9XG4gICAgcmV0dXJuIHRoaXMucGFyc2VDbGFzcyhub2RlLCB0cnVlKVxuICBjYXNlIHR5cGVzLl9pZjogcmV0dXJuIHRoaXMucGFyc2VJZlN0YXRlbWVudChub2RlKVxuICBjYXNlIHR5cGVzLl9yZXR1cm46IHJldHVybiB0aGlzLnBhcnNlUmV0dXJuU3RhdGVtZW50KG5vZGUpXG4gIGNhc2UgdHlwZXMuX3N3aXRjaDogcmV0dXJuIHRoaXMucGFyc2VTd2l0Y2hTdGF0ZW1lbnQobm9kZSlcbiAgY2FzZSB0eXBlcy5fdGhyb3c6IHJldHVybiB0aGlzLnBhcnNlVGhyb3dTdGF0ZW1lbnQobm9kZSlcbiAgY2FzZSB0eXBlcy5fdHJ5OiByZXR1cm4gdGhpcy5wYXJzZVRyeVN0YXRlbWVudChub2RlKVxuICBjYXNlIHR5cGVzLl9jb25zdDogY2FzZSB0eXBlcy5fdmFyOlxuICAgIGtpbmQgPSBraW5kIHx8IHRoaXMudmFsdWU7XG4gICAgaWYgKGNvbnRleHQgJiYga2luZCAhPT0gXCJ2YXJcIikgeyB0aGlzLnVuZXhwZWN0ZWQoKTsgfVxuICAgIHJldHVybiB0aGlzLnBhcnNlVmFyU3RhdGVtZW50KG5vZGUsIGtpbmQpXG4gIGNhc2UgdHlwZXMuX3doaWxlOiByZXR1cm4gdGhpcy5wYXJzZVdoaWxlU3RhdGVtZW50KG5vZGUpXG4gIGNhc2UgdHlwZXMuX3dpdGg6IHJldHVybiB0aGlzLnBhcnNlV2l0aFN0YXRlbWVudChub2RlKVxuICBjYXNlIHR5cGVzLmJyYWNlTDogcmV0dXJuIHRoaXMucGFyc2VCbG9jayh0cnVlLCBub2RlKVxuICBjYXNlIHR5cGVzLnNlbWk6IHJldHVybiB0aGlzLnBhcnNlRW1wdHlTdGF0ZW1lbnQobm9kZSlcbiAgY2FzZSB0eXBlcy5fZXhwb3J0OlxuICBjYXNlIHR5cGVzLl9pbXBvcnQ6XG4gICAgaWYgKCF0aGlzLm9wdGlvbnMuYWxsb3dJbXBvcnRFeHBvcnRFdmVyeXdoZXJlKSB7XG4gICAgICBpZiAoIXRvcExldmVsKVxuICAgICAgICB7IHRoaXMucmFpc2UodGhpcy5zdGFydCwgXCInaW1wb3J0JyBhbmQgJ2V4cG9ydCcgbWF5IG9ubHkgYXBwZWFyIGF0IHRoZSB0b3AgbGV2ZWxcIik7IH1cbiAgICAgIGlmICghdGhpcy5pbk1vZHVsZSlcbiAgICAgICAgeyB0aGlzLnJhaXNlKHRoaXMuc3RhcnQsIFwiJ2ltcG9ydCcgYW5kICdleHBvcnQnIG1heSBhcHBlYXIgb25seSB3aXRoICdzb3VyY2VUeXBlOiBtb2R1bGUnXCIpOyB9XG4gICAgfVxuICAgIHJldHVybiBzdGFydHR5cGUgPT09IHR5cGVzLl9pbXBvcnQgPyB0aGlzLnBhcnNlSW1wb3J0KG5vZGUpIDogdGhpcy5wYXJzZUV4cG9ydChub2RlLCBleHBvcnRzKVxuXG4gICAgLy8gSWYgdGhlIHN0YXRlbWVudCBkb2VzIG5vdCBzdGFydCB3aXRoIGEgc3RhdGVtZW50IGtleXdvcmQgb3IgYVxuICAgIC8vIGJyYWNlLCBpdCdzIGFuIEV4cHJlc3Npb25TdGF0ZW1lbnQgb3IgTGFiZWxlZFN0YXRlbWVudC4gV2VcbiAgICAvLyBzaW1wbHkgc3RhcnQgcGFyc2luZyBhbiBleHByZXNzaW9uLCBhbmQgYWZ0ZXJ3YXJkcywgaWYgdGhlXG4gICAgLy8gbmV4dCB0b2tlbiBpcyBhIGNvbG9uIGFuZCB0aGUgZXhwcmVzc2lvbiB3YXMgYSBzaW1wbGVcbiAgICAvLyBJZGVudGlmaWVyIG5vZGUsIHdlIHN3aXRjaCB0byBpbnRlcnByZXRpbmcgaXQgYXMgYSBsYWJlbC5cbiAgZGVmYXVsdDpcbiAgICBpZiAodGhpcy5pc0FzeW5jRnVuY3Rpb24oKSkge1xuICAgICAgaWYgKGNvbnRleHQpIHsgdGhpcy51bmV4cGVjdGVkKCk7IH1cbiAgICAgIHRoaXMubmV4dCgpO1xuICAgICAgcmV0dXJuIHRoaXMucGFyc2VGdW5jdGlvblN0YXRlbWVudChub2RlLCB0cnVlLCAhY29udGV4dClcbiAgICB9XG5cbiAgICB2YXIgbWF5YmVOYW1lID0gdGhpcy52YWx1ZSwgZXhwciA9IHRoaXMucGFyc2VFeHByZXNzaW9uKCk7XG4gICAgaWYgKHN0YXJ0dHlwZSA9PT0gdHlwZXMubmFtZSAmJiBleHByLnR5cGUgPT09IFwiSWRlbnRpZmllclwiICYmIHRoaXMuZWF0KHR5cGVzLmNvbG9uKSlcbiAgICAgIHsgcmV0dXJuIHRoaXMucGFyc2VMYWJlbGVkU3RhdGVtZW50KG5vZGUsIG1heWJlTmFtZSwgZXhwciwgY29udGV4dCkgfVxuICAgIGVsc2UgeyByZXR1cm4gdGhpcy5wYXJzZUV4cHJlc3Npb25TdGF0ZW1lbnQobm9kZSwgZXhwcikgfVxuICB9XG59O1xuXG5wcCQxLnBhcnNlQnJlYWtDb250aW51ZVN0YXRlbWVudCA9IGZ1bmN0aW9uKG5vZGUsIGtleXdvcmQpIHtcbiAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgdmFyIGlzQnJlYWsgPSBrZXl3b3JkID09PSBcImJyZWFrXCI7XG4gIHRoaXMubmV4dCgpO1xuICBpZiAodGhpcy5lYXQodHlwZXMuc2VtaSkgfHwgdGhpcy5pbnNlcnRTZW1pY29sb24oKSkgeyBub2RlLmxhYmVsID0gbnVsbDsgfVxuICBlbHNlIGlmICh0aGlzLnR5cGUgIT09IHR5cGVzLm5hbWUpIHsgdGhpcy51bmV4cGVjdGVkKCk7IH1cbiAgZWxzZSB7XG4gICAgbm9kZS5sYWJlbCA9IHRoaXMucGFyc2VJZGVudCgpO1xuICAgIHRoaXMuc2VtaWNvbG9uKCk7XG4gIH1cblxuICAvLyBWZXJpZnkgdGhhdCB0aGVyZSBpcyBhbiBhY3R1YWwgZGVzdGluYXRpb24gdG8gYnJlYWsgb3JcbiAgLy8gY29udGludWUgdG8uXG4gIHZhciBpID0gMDtcbiAgZm9yICg7IGkgPCB0aGlzLmxhYmVscy5sZW5ndGg7ICsraSkge1xuICAgIHZhciBsYWIgPSB0aGlzJDEubGFiZWxzW2ldO1xuICAgIGlmIChub2RlLmxhYmVsID09IG51bGwgfHwgbGFiLm5hbWUgPT09IG5vZGUubGFiZWwubmFtZSkge1xuICAgICAgaWYgKGxhYi5raW5kICE9IG51bGwgJiYgKGlzQnJlYWsgfHwgbGFiLmtpbmQgPT09IFwibG9vcFwiKSkgeyBicmVhayB9XG4gICAgICBpZiAobm9kZS5sYWJlbCAmJiBpc0JyZWFrKSB7IGJyZWFrIH1cbiAgICB9XG4gIH1cbiAgaWYgKGkgPT09IHRoaXMubGFiZWxzLmxlbmd0aCkgeyB0aGlzLnJhaXNlKG5vZGUuc3RhcnQsIFwiVW5zeW50YWN0aWMgXCIgKyBrZXl3b3JkKTsgfVxuICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIGlzQnJlYWsgPyBcIkJyZWFrU3RhdGVtZW50XCIgOiBcIkNvbnRpbnVlU3RhdGVtZW50XCIpXG59O1xuXG5wcCQxLnBhcnNlRGVidWdnZXJTdGF0ZW1lbnQgPSBmdW5jdGlvbihub2RlKSB7XG4gIHRoaXMubmV4dCgpO1xuICB0aGlzLnNlbWljb2xvbigpO1xuICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiRGVidWdnZXJTdGF0ZW1lbnRcIilcbn07XG5cbnBwJDEucGFyc2VEb1N0YXRlbWVudCA9IGZ1bmN0aW9uKG5vZGUpIHtcbiAgdGhpcy5uZXh0KCk7XG4gIHRoaXMubGFiZWxzLnB1c2gobG9vcExhYmVsKTtcbiAgbm9kZS5ib2R5ID0gdGhpcy5wYXJzZVN0YXRlbWVudChcImRvXCIpO1xuICB0aGlzLmxhYmVscy5wb3AoKTtcbiAgdGhpcy5leHBlY3QodHlwZXMuX3doaWxlKTtcbiAgbm9kZS50ZXN0ID0gdGhpcy5wYXJzZVBhcmVuRXhwcmVzc2lvbigpO1xuICBpZiAodGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uID49IDYpXG4gICAgeyB0aGlzLmVhdCh0eXBlcy5zZW1pKTsgfVxuICBlbHNlXG4gICAgeyB0aGlzLnNlbWljb2xvbigpOyB9XG4gIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJEb1doaWxlU3RhdGVtZW50XCIpXG59O1xuXG4vLyBEaXNhbWJpZ3VhdGluZyBiZXR3ZWVuIGEgYGZvcmAgYW5kIGEgYGZvcmAvYGluYCBvciBgZm9yYC9gb2ZgXG4vLyBsb29wIGlzIG5vbi10cml2aWFsLiBCYXNpY2FsbHksIHdlIGhhdmUgdG8gcGFyc2UgdGhlIGluaXQgYHZhcmBcbi8vIHN0YXRlbWVudCBvciBleHByZXNzaW9uLCBkaXNhbGxvd2luZyB0aGUgYGluYCBvcGVyYXRvciAoc2VlXG4vLyB0aGUgc2Vjb25kIHBhcmFtZXRlciB0byBgcGFyc2VFeHByZXNzaW9uYCksIGFuZCB0aGVuIGNoZWNrXG4vLyB3aGV0aGVyIHRoZSBuZXh0IHRva2VuIGlzIGBpbmAgb3IgYG9mYC4gV2hlbiB0aGVyZSBpcyBubyBpbml0XG4vLyBwYXJ0IChzZW1pY29sb24gaW1tZWRpYXRlbHkgYWZ0ZXIgdGhlIG9wZW5pbmcgcGFyZW50aGVzaXMpLCBpdFxuLy8gaXMgYSByZWd1bGFyIGBmb3JgIGxvb3AuXG5cbnBwJDEucGFyc2VGb3JTdGF0ZW1lbnQgPSBmdW5jdGlvbihub2RlKSB7XG4gIHRoaXMubmV4dCgpO1xuICB2YXIgYXdhaXRBdCA9ICh0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24gPj0gOSAmJiAodGhpcy5pbkFzeW5jIHx8ICghdGhpcy5pbkZ1bmN0aW9uICYmIHRoaXMub3B0aW9ucy5hbGxvd0F3YWl0T3V0c2lkZUZ1bmN0aW9uKSkgJiYgdGhpcy5lYXRDb250ZXh0dWFsKFwiYXdhaXRcIikpID8gdGhpcy5sYXN0VG9rU3RhcnQgOiAtMTtcbiAgdGhpcy5sYWJlbHMucHVzaChsb29wTGFiZWwpO1xuICB0aGlzLmVudGVyU2NvcGUoMCk7XG4gIHRoaXMuZXhwZWN0KHR5cGVzLnBhcmVuTCk7XG4gIGlmICh0aGlzLnR5cGUgPT09IHR5cGVzLnNlbWkpIHtcbiAgICBpZiAoYXdhaXRBdCA+IC0xKSB7IHRoaXMudW5leHBlY3RlZChhd2FpdEF0KTsgfVxuICAgIHJldHVybiB0aGlzLnBhcnNlRm9yKG5vZGUsIG51bGwpXG4gIH1cbiAgdmFyIGlzTGV0ID0gdGhpcy5pc0xldCgpO1xuICBpZiAodGhpcy50eXBlID09PSB0eXBlcy5fdmFyIHx8IHRoaXMudHlwZSA9PT0gdHlwZXMuX2NvbnN0IHx8IGlzTGV0KSB7XG4gICAgdmFyIGluaXQkMSA9IHRoaXMuc3RhcnROb2RlKCksIGtpbmQgPSBpc0xldCA/IFwibGV0XCIgOiB0aGlzLnZhbHVlO1xuICAgIHRoaXMubmV4dCgpO1xuICAgIHRoaXMucGFyc2VWYXIoaW5pdCQxLCB0cnVlLCBraW5kKTtcbiAgICB0aGlzLmZpbmlzaE5vZGUoaW5pdCQxLCBcIlZhcmlhYmxlRGVjbGFyYXRpb25cIik7XG4gICAgaWYgKCh0aGlzLnR5cGUgPT09IHR5cGVzLl9pbiB8fCAodGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uID49IDYgJiYgdGhpcy5pc0NvbnRleHR1YWwoXCJvZlwiKSkpICYmIGluaXQkMS5kZWNsYXJhdGlvbnMubGVuZ3RoID09PSAxICYmXG4gICAgICAgICEoa2luZCAhPT0gXCJ2YXJcIiAmJiBpbml0JDEuZGVjbGFyYXRpb25zWzBdLmluaXQpKSB7XG4gICAgICBpZiAodGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uID49IDkpIHtcbiAgICAgICAgaWYgKHRoaXMudHlwZSA9PT0gdHlwZXMuX2luKSB7XG4gICAgICAgICAgaWYgKGF3YWl0QXQgPiAtMSkgeyB0aGlzLnVuZXhwZWN0ZWQoYXdhaXRBdCk7IH1cbiAgICAgICAgfSBlbHNlIHsgbm9kZS5hd2FpdCA9IGF3YWl0QXQgPiAtMTsgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMucGFyc2VGb3JJbihub2RlLCBpbml0JDEpXG4gICAgfVxuICAgIGlmIChhd2FpdEF0ID4gLTEpIHsgdGhpcy51bmV4cGVjdGVkKGF3YWl0QXQpOyB9XG4gICAgcmV0dXJuIHRoaXMucGFyc2VGb3Iobm9kZSwgaW5pdCQxKVxuICB9XG4gIHZhciByZWZEZXN0cnVjdHVyaW5nRXJyb3JzID0gbmV3IERlc3RydWN0dXJpbmdFcnJvcnM7XG4gIHZhciBpbml0ID0gdGhpcy5wYXJzZUV4cHJlc3Npb24odHJ1ZSwgcmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycyk7XG4gIGlmICh0aGlzLnR5cGUgPT09IHR5cGVzLl9pbiB8fCAodGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uID49IDYgJiYgdGhpcy5pc0NvbnRleHR1YWwoXCJvZlwiKSkpIHtcbiAgICBpZiAodGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uID49IDkpIHtcbiAgICAgIGlmICh0aGlzLnR5cGUgPT09IHR5cGVzLl9pbikge1xuICAgICAgICBpZiAoYXdhaXRBdCA+IC0xKSB7IHRoaXMudW5leHBlY3RlZChhd2FpdEF0KTsgfVxuICAgICAgfSBlbHNlIHsgbm9kZS5hd2FpdCA9IGF3YWl0QXQgPiAtMTsgfVxuICAgIH1cbiAgICB0aGlzLnRvQXNzaWduYWJsZShpbml0LCBmYWxzZSwgcmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycyk7XG4gICAgdGhpcy5jaGVja0xWYWwoaW5pdCk7XG4gICAgcmV0dXJuIHRoaXMucGFyc2VGb3JJbihub2RlLCBpbml0KVxuICB9IGVsc2Uge1xuICAgIHRoaXMuY2hlY2tFeHByZXNzaW9uRXJyb3JzKHJlZkRlc3RydWN0dXJpbmdFcnJvcnMsIHRydWUpO1xuICB9XG4gIGlmIChhd2FpdEF0ID4gLTEpIHsgdGhpcy51bmV4cGVjdGVkKGF3YWl0QXQpOyB9XG4gIHJldHVybiB0aGlzLnBhcnNlRm9yKG5vZGUsIGluaXQpXG59O1xuXG5wcCQxLnBhcnNlRnVuY3Rpb25TdGF0ZW1lbnQgPSBmdW5jdGlvbihub2RlLCBpc0FzeW5jLCBkZWNsYXJhdGlvblBvc2l0aW9uKSB7XG4gIHRoaXMubmV4dCgpO1xuICByZXR1cm4gdGhpcy5wYXJzZUZ1bmN0aW9uKG5vZGUsIEZVTkNfU1RBVEVNRU5UIHwgKGRlY2xhcmF0aW9uUG9zaXRpb24gPyAwIDogRlVOQ19IQU5HSU5HX1NUQVRFTUVOVCksIGZhbHNlLCBpc0FzeW5jKVxufTtcblxucHAkMS5wYXJzZUlmU3RhdGVtZW50ID0gZnVuY3Rpb24obm9kZSkge1xuICB0aGlzLm5leHQoKTtcbiAgbm9kZS50ZXN0ID0gdGhpcy5wYXJzZVBhcmVuRXhwcmVzc2lvbigpO1xuICAvLyBhbGxvdyBmdW5jdGlvbiBkZWNsYXJhdGlvbnMgaW4gYnJhbmNoZXMsIGJ1dCBvbmx5IGluIG5vbi1zdHJpY3QgbW9kZVxuICBub2RlLmNvbnNlcXVlbnQgPSB0aGlzLnBhcnNlU3RhdGVtZW50KFwiaWZcIik7XG4gIG5vZGUuYWx0ZXJuYXRlID0gdGhpcy5lYXQodHlwZXMuX2Vsc2UpID8gdGhpcy5wYXJzZVN0YXRlbWVudChcImlmXCIpIDogbnVsbDtcbiAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIklmU3RhdGVtZW50XCIpXG59O1xuXG5wcCQxLnBhcnNlUmV0dXJuU3RhdGVtZW50ID0gZnVuY3Rpb24obm9kZSkge1xuICBpZiAoIXRoaXMuaW5GdW5jdGlvbiAmJiAhdGhpcy5vcHRpb25zLmFsbG93UmV0dXJuT3V0c2lkZUZ1bmN0aW9uKVxuICAgIHsgdGhpcy5yYWlzZSh0aGlzLnN0YXJ0LCBcIidyZXR1cm4nIG91dHNpZGUgb2YgZnVuY3Rpb25cIik7IH1cbiAgdGhpcy5uZXh0KCk7XG5cbiAgLy8gSW4gYHJldHVybmAgKGFuZCBgYnJlYWtgL2Bjb250aW51ZWApLCB0aGUga2V5d29yZHMgd2l0aFxuICAvLyBvcHRpb25hbCBhcmd1bWVudHMsIHdlIGVhZ2VybHkgbG9vayBmb3IgYSBzZW1pY29sb24gb3IgdGhlXG4gIC8vIHBvc3NpYmlsaXR5IHRvIGluc2VydCBvbmUuXG5cbiAgaWYgKHRoaXMuZWF0KHR5cGVzLnNlbWkpIHx8IHRoaXMuaW5zZXJ0U2VtaWNvbG9uKCkpIHsgbm9kZS5hcmd1bWVudCA9IG51bGw7IH1cbiAgZWxzZSB7IG5vZGUuYXJndW1lbnQgPSB0aGlzLnBhcnNlRXhwcmVzc2lvbigpOyB0aGlzLnNlbWljb2xvbigpOyB9XG4gIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJSZXR1cm5TdGF0ZW1lbnRcIilcbn07XG5cbnBwJDEucGFyc2VTd2l0Y2hTdGF0ZW1lbnQgPSBmdW5jdGlvbihub2RlKSB7XG4gIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIHRoaXMubmV4dCgpO1xuICBub2RlLmRpc2NyaW1pbmFudCA9IHRoaXMucGFyc2VQYXJlbkV4cHJlc3Npb24oKTtcbiAgbm9kZS5jYXNlcyA9IFtdO1xuICB0aGlzLmV4cGVjdCh0eXBlcy5icmFjZUwpO1xuICB0aGlzLmxhYmVscy5wdXNoKHN3aXRjaExhYmVsKTtcbiAgdGhpcy5lbnRlclNjb3BlKDApO1xuXG4gIC8vIFN0YXRlbWVudHMgdW5kZXIgbXVzdCBiZSBncm91cGVkIChieSBsYWJlbCkgaW4gU3dpdGNoQ2FzZVxuICAvLyBub2Rlcy4gYGN1cmAgaXMgdXNlZCB0byBrZWVwIHRoZSBub2RlIHRoYXQgd2UgYXJlIGN1cnJlbnRseVxuICAvLyBhZGRpbmcgc3RhdGVtZW50cyB0by5cblxuICB2YXIgY3VyO1xuICBmb3IgKHZhciBzYXdEZWZhdWx0ID0gZmFsc2U7IHRoaXMudHlwZSAhPT0gdHlwZXMuYnJhY2VSOykge1xuICAgIGlmICh0aGlzJDEudHlwZSA9PT0gdHlwZXMuX2Nhc2UgfHwgdGhpcyQxLnR5cGUgPT09IHR5cGVzLl9kZWZhdWx0KSB7XG4gICAgICB2YXIgaXNDYXNlID0gdGhpcyQxLnR5cGUgPT09IHR5cGVzLl9jYXNlO1xuICAgICAgaWYgKGN1cikgeyB0aGlzJDEuZmluaXNoTm9kZShjdXIsIFwiU3dpdGNoQ2FzZVwiKTsgfVxuICAgICAgbm9kZS5jYXNlcy5wdXNoKGN1ciA9IHRoaXMkMS5zdGFydE5vZGUoKSk7XG4gICAgICBjdXIuY29uc2VxdWVudCA9IFtdO1xuICAgICAgdGhpcyQxLm5leHQoKTtcbiAgICAgIGlmIChpc0Nhc2UpIHtcbiAgICAgICAgY3VyLnRlc3QgPSB0aGlzJDEucGFyc2VFeHByZXNzaW9uKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoc2F3RGVmYXVsdCkgeyB0aGlzJDEucmFpc2VSZWNvdmVyYWJsZSh0aGlzJDEubGFzdFRva1N0YXJ0LCBcIk11bHRpcGxlIGRlZmF1bHQgY2xhdXNlc1wiKTsgfVxuICAgICAgICBzYXdEZWZhdWx0ID0gdHJ1ZTtcbiAgICAgICAgY3VyLnRlc3QgPSBudWxsO1xuICAgICAgfVxuICAgICAgdGhpcyQxLmV4cGVjdCh0eXBlcy5jb2xvbik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICghY3VyKSB7IHRoaXMkMS51bmV4cGVjdGVkKCk7IH1cbiAgICAgIGN1ci5jb25zZXF1ZW50LnB1c2godGhpcyQxLnBhcnNlU3RhdGVtZW50KG51bGwpKTtcbiAgICB9XG4gIH1cbiAgdGhpcy5leGl0U2NvcGUoKTtcbiAgaWYgKGN1cikgeyB0aGlzLmZpbmlzaE5vZGUoY3VyLCBcIlN3aXRjaENhc2VcIik7IH1cbiAgdGhpcy5uZXh0KCk7IC8vIENsb3NpbmcgYnJhY2VcbiAgdGhpcy5sYWJlbHMucG9wKCk7XG4gIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJTd2l0Y2hTdGF0ZW1lbnRcIilcbn07XG5cbnBwJDEucGFyc2VUaHJvd1N0YXRlbWVudCA9IGZ1bmN0aW9uKG5vZGUpIHtcbiAgdGhpcy5uZXh0KCk7XG4gIGlmIChsaW5lQnJlYWsudGVzdCh0aGlzLmlucHV0LnNsaWNlKHRoaXMubGFzdFRva0VuZCwgdGhpcy5zdGFydCkpKVxuICAgIHsgdGhpcy5yYWlzZSh0aGlzLmxhc3RUb2tFbmQsIFwiSWxsZWdhbCBuZXdsaW5lIGFmdGVyIHRocm93XCIpOyB9XG4gIG5vZGUuYXJndW1lbnQgPSB0aGlzLnBhcnNlRXhwcmVzc2lvbigpO1xuICB0aGlzLnNlbWljb2xvbigpO1xuICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiVGhyb3dTdGF0ZW1lbnRcIilcbn07XG5cbi8vIFJldXNlZCBlbXB0eSBhcnJheSBhZGRlZCBmb3Igbm9kZSBmaWVsZHMgdGhhdCBhcmUgYWx3YXlzIGVtcHR5LlxuXG52YXIgZW1wdHkgPSBbXTtcblxucHAkMS5wYXJzZVRyeVN0YXRlbWVudCA9IGZ1bmN0aW9uKG5vZGUpIHtcbiAgdGhpcy5uZXh0KCk7XG4gIG5vZGUuYmxvY2sgPSB0aGlzLnBhcnNlQmxvY2soKTtcbiAgbm9kZS5oYW5kbGVyID0gbnVsbDtcbiAgaWYgKHRoaXMudHlwZSA9PT0gdHlwZXMuX2NhdGNoKSB7XG4gICAgdmFyIGNsYXVzZSA9IHRoaXMuc3RhcnROb2RlKCk7XG4gICAgdGhpcy5uZXh0KCk7XG4gICAgaWYgKHRoaXMuZWF0KHR5cGVzLnBhcmVuTCkpIHtcbiAgICAgIGNsYXVzZS5wYXJhbSA9IHRoaXMucGFyc2VCaW5kaW5nQXRvbSgpO1xuICAgICAgdmFyIHNpbXBsZSA9IGNsYXVzZS5wYXJhbS50eXBlID09PSBcIklkZW50aWZpZXJcIjtcbiAgICAgIHRoaXMuZW50ZXJTY29wZShzaW1wbGUgPyBTQ09QRV9TSU1QTEVfQ0FUQ0ggOiAwKTtcbiAgICAgIHRoaXMuY2hlY2tMVmFsKGNsYXVzZS5wYXJhbSwgc2ltcGxlID8gQklORF9TSU1QTEVfQ0FUQ0ggOiBCSU5EX0xFWElDQUwpO1xuICAgICAgdGhpcy5leHBlY3QodHlwZXMucGFyZW5SKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA8IDEwKSB7IHRoaXMudW5leHBlY3RlZCgpOyB9XG4gICAgICBjbGF1c2UucGFyYW0gPSBudWxsO1xuICAgICAgdGhpcy5lbnRlclNjb3BlKDApO1xuICAgIH1cbiAgICBjbGF1c2UuYm9keSA9IHRoaXMucGFyc2VCbG9jayhmYWxzZSk7XG4gICAgdGhpcy5leGl0U2NvcGUoKTtcbiAgICBub2RlLmhhbmRsZXIgPSB0aGlzLmZpbmlzaE5vZGUoY2xhdXNlLCBcIkNhdGNoQ2xhdXNlXCIpO1xuICB9XG4gIG5vZGUuZmluYWxpemVyID0gdGhpcy5lYXQodHlwZXMuX2ZpbmFsbHkpID8gdGhpcy5wYXJzZUJsb2NrKCkgOiBudWxsO1xuICBpZiAoIW5vZGUuaGFuZGxlciAmJiAhbm9kZS5maW5hbGl6ZXIpXG4gICAgeyB0aGlzLnJhaXNlKG5vZGUuc3RhcnQsIFwiTWlzc2luZyBjYXRjaCBvciBmaW5hbGx5IGNsYXVzZVwiKTsgfVxuICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiVHJ5U3RhdGVtZW50XCIpXG59O1xuXG5wcCQxLnBhcnNlVmFyU3RhdGVtZW50ID0gZnVuY3Rpb24obm9kZSwga2luZCkge1xuICB0aGlzLm5leHQoKTtcbiAgdGhpcy5wYXJzZVZhcihub2RlLCBmYWxzZSwga2luZCk7XG4gIHRoaXMuc2VtaWNvbG9uKCk7XG4gIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJWYXJpYWJsZURlY2xhcmF0aW9uXCIpXG59O1xuXG5wcCQxLnBhcnNlV2hpbGVTdGF0ZW1lbnQgPSBmdW5jdGlvbihub2RlKSB7XG4gIHRoaXMubmV4dCgpO1xuICBub2RlLnRlc3QgPSB0aGlzLnBhcnNlUGFyZW5FeHByZXNzaW9uKCk7XG4gIHRoaXMubGFiZWxzLnB1c2gobG9vcExhYmVsKTtcbiAgbm9kZS5ib2R5ID0gdGhpcy5wYXJzZVN0YXRlbWVudChcIndoaWxlXCIpO1xuICB0aGlzLmxhYmVscy5wb3AoKTtcbiAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIldoaWxlU3RhdGVtZW50XCIpXG59O1xuXG5wcCQxLnBhcnNlV2l0aFN0YXRlbWVudCA9IGZ1bmN0aW9uKG5vZGUpIHtcbiAgaWYgKHRoaXMuc3RyaWN0KSB7IHRoaXMucmFpc2UodGhpcy5zdGFydCwgXCInd2l0aCcgaW4gc3RyaWN0IG1vZGVcIik7IH1cbiAgdGhpcy5uZXh0KCk7XG4gIG5vZGUub2JqZWN0ID0gdGhpcy5wYXJzZVBhcmVuRXhwcmVzc2lvbigpO1xuICBub2RlLmJvZHkgPSB0aGlzLnBhcnNlU3RhdGVtZW50KFwid2l0aFwiKTtcbiAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIldpdGhTdGF0ZW1lbnRcIilcbn07XG5cbnBwJDEucGFyc2VFbXB0eVN0YXRlbWVudCA9IGZ1bmN0aW9uKG5vZGUpIHtcbiAgdGhpcy5uZXh0KCk7XG4gIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJFbXB0eVN0YXRlbWVudFwiKVxufTtcblxucHAkMS5wYXJzZUxhYmVsZWRTdGF0ZW1lbnQgPSBmdW5jdGlvbihub2RlLCBtYXliZU5hbWUsIGV4cHIsIGNvbnRleHQpIHtcbiAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgZm9yICh2YXIgaSQxID0gMCwgbGlzdCA9IHRoaXMkMS5sYWJlbHM7IGkkMSA8IGxpc3QubGVuZ3RoOyBpJDEgKz0gMSlcbiAgICB7XG4gICAgdmFyIGxhYmVsID0gbGlzdFtpJDFdO1xuXG4gICAgaWYgKGxhYmVsLm5hbWUgPT09IG1heWJlTmFtZSlcbiAgICAgIHsgdGhpcyQxLnJhaXNlKGV4cHIuc3RhcnQsIFwiTGFiZWwgJ1wiICsgbWF5YmVOYW1lICsgXCInIGlzIGFscmVhZHkgZGVjbGFyZWRcIik7XG4gIH0gfVxuICB2YXIga2luZCA9IHRoaXMudHlwZS5pc0xvb3AgPyBcImxvb3BcIiA6IHRoaXMudHlwZSA9PT0gdHlwZXMuX3N3aXRjaCA/IFwic3dpdGNoXCIgOiBudWxsO1xuICBmb3IgKHZhciBpID0gdGhpcy5sYWJlbHMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICB2YXIgbGFiZWwkMSA9IHRoaXMkMS5sYWJlbHNbaV07XG4gICAgaWYgKGxhYmVsJDEuc3RhdGVtZW50U3RhcnQgPT09IG5vZGUuc3RhcnQpIHtcbiAgICAgIC8vIFVwZGF0ZSBpbmZvcm1hdGlvbiBhYm91dCBwcmV2aW91cyBsYWJlbHMgb24gdGhpcyBub2RlXG4gICAgICBsYWJlbCQxLnN0YXRlbWVudFN0YXJ0ID0gdGhpcyQxLnN0YXJ0O1xuICAgICAgbGFiZWwkMS5raW5kID0ga2luZDtcbiAgICB9IGVsc2UgeyBicmVhayB9XG4gIH1cbiAgdGhpcy5sYWJlbHMucHVzaCh7bmFtZTogbWF5YmVOYW1lLCBraW5kOiBraW5kLCBzdGF0ZW1lbnRTdGFydDogdGhpcy5zdGFydH0pO1xuICBub2RlLmJvZHkgPSB0aGlzLnBhcnNlU3RhdGVtZW50KGNvbnRleHQgPyBjb250ZXh0LmluZGV4T2YoXCJsYWJlbFwiKSA9PT0gLTEgPyBjb250ZXh0ICsgXCJsYWJlbFwiIDogY29udGV4dCA6IFwibGFiZWxcIik7XG4gIHRoaXMubGFiZWxzLnBvcCgpO1xuICBub2RlLmxhYmVsID0gZXhwcjtcbiAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIkxhYmVsZWRTdGF0ZW1lbnRcIilcbn07XG5cbnBwJDEucGFyc2VFeHByZXNzaW9uU3RhdGVtZW50ID0gZnVuY3Rpb24obm9kZSwgZXhwcikge1xuICBub2RlLmV4cHJlc3Npb24gPSBleHByO1xuICB0aGlzLnNlbWljb2xvbigpO1xuICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiRXhwcmVzc2lvblN0YXRlbWVudFwiKVxufTtcblxuLy8gUGFyc2UgYSBzZW1pY29sb24tZW5jbG9zZWQgYmxvY2sgb2Ygc3RhdGVtZW50cywgaGFuZGxpbmcgYFwidXNlXG4vLyBzdHJpY3RcImAgZGVjbGFyYXRpb25zIHdoZW4gYGFsbG93U3RyaWN0YCBpcyB0cnVlICh1c2VkIGZvclxuLy8gZnVuY3Rpb24gYm9kaWVzKS5cblxucHAkMS5wYXJzZUJsb2NrID0gZnVuY3Rpb24oY3JlYXRlTmV3TGV4aWNhbFNjb3BlLCBub2RlKSB7XG4gIHZhciB0aGlzJDEgPSB0aGlzO1xuICBpZiAoIGNyZWF0ZU5ld0xleGljYWxTY29wZSA9PT0gdm9pZCAwICkgY3JlYXRlTmV3TGV4aWNhbFNjb3BlID0gdHJ1ZTtcbiAgaWYgKCBub2RlID09PSB2b2lkIDAgKSBub2RlID0gdGhpcy5zdGFydE5vZGUoKTtcblxuICBub2RlLmJvZHkgPSBbXTtcbiAgdGhpcy5leHBlY3QodHlwZXMuYnJhY2VMKTtcbiAgaWYgKGNyZWF0ZU5ld0xleGljYWxTY29wZSkgeyB0aGlzLmVudGVyU2NvcGUoMCk7IH1cbiAgd2hpbGUgKCF0aGlzLmVhdCh0eXBlcy5icmFjZVIpKSB7XG4gICAgdmFyIHN0bXQgPSB0aGlzJDEucGFyc2VTdGF0ZW1lbnQobnVsbCk7XG4gICAgbm9kZS5ib2R5LnB1c2goc3RtdCk7XG4gIH1cbiAgaWYgKGNyZWF0ZU5ld0xleGljYWxTY29wZSkgeyB0aGlzLmV4aXRTY29wZSgpOyB9XG4gIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJCbG9ja1N0YXRlbWVudFwiKVxufTtcblxuLy8gUGFyc2UgYSByZWd1bGFyIGBmb3JgIGxvb3AuIFRoZSBkaXNhbWJpZ3VhdGlvbiBjb2RlIGluXG4vLyBgcGFyc2VTdGF0ZW1lbnRgIHdpbGwgYWxyZWFkeSBoYXZlIHBhcnNlZCB0aGUgaW5pdCBzdGF0ZW1lbnQgb3Jcbi8vIGV4cHJlc3Npb24uXG5cbnBwJDEucGFyc2VGb3IgPSBmdW5jdGlvbihub2RlLCBpbml0KSB7XG4gIG5vZGUuaW5pdCA9IGluaXQ7XG4gIHRoaXMuZXhwZWN0KHR5cGVzLnNlbWkpO1xuICBub2RlLnRlc3QgPSB0aGlzLnR5cGUgPT09IHR5cGVzLnNlbWkgPyBudWxsIDogdGhpcy5wYXJzZUV4cHJlc3Npb24oKTtcbiAgdGhpcy5leHBlY3QodHlwZXMuc2VtaSk7XG4gIG5vZGUudXBkYXRlID0gdGhpcy50eXBlID09PSB0eXBlcy5wYXJlblIgPyBudWxsIDogdGhpcy5wYXJzZUV4cHJlc3Npb24oKTtcbiAgdGhpcy5leHBlY3QodHlwZXMucGFyZW5SKTtcbiAgbm9kZS5ib2R5ID0gdGhpcy5wYXJzZVN0YXRlbWVudChcImZvclwiKTtcbiAgdGhpcy5leGl0U2NvcGUoKTtcbiAgdGhpcy5sYWJlbHMucG9wKCk7XG4gIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJGb3JTdGF0ZW1lbnRcIilcbn07XG5cbi8vIFBhcnNlIGEgYGZvcmAvYGluYCBhbmQgYGZvcmAvYG9mYCBsb29wLCB3aGljaCBhcmUgYWxtb3N0XG4vLyBzYW1lIGZyb20gcGFyc2VyJ3MgcGVyc3BlY3RpdmUuXG5cbnBwJDEucGFyc2VGb3JJbiA9IGZ1bmN0aW9uKG5vZGUsIGluaXQpIHtcbiAgdmFyIHR5cGUgPSB0aGlzLnR5cGUgPT09IHR5cGVzLl9pbiA/IFwiRm9ySW5TdGF0ZW1lbnRcIiA6IFwiRm9yT2ZTdGF0ZW1lbnRcIjtcbiAgdGhpcy5uZXh0KCk7XG4gIGlmICh0eXBlID09PSBcIkZvckluU3RhdGVtZW50XCIpIHtcbiAgICBpZiAoaW5pdC50eXBlID09PSBcIkFzc2lnbm1lbnRQYXR0ZXJuXCIgfHxcbiAgICAgIChpbml0LnR5cGUgPT09IFwiVmFyaWFibGVEZWNsYXJhdGlvblwiICYmIGluaXQuZGVjbGFyYXRpb25zWzBdLmluaXQgIT0gbnVsbCAmJlxuICAgICAgICh0aGlzLnN0cmljdCB8fCBpbml0LmRlY2xhcmF0aW9uc1swXS5pZC50eXBlICE9PSBcIklkZW50aWZpZXJcIikpKVxuICAgICAgeyB0aGlzLnJhaXNlKGluaXQuc3RhcnQsIFwiSW52YWxpZCBhc3NpZ25tZW50IGluIGZvci1pbiBsb29wIGhlYWRcIik7IH1cbiAgfVxuICBub2RlLmxlZnQgPSBpbml0O1xuICBub2RlLnJpZ2h0ID0gdHlwZSA9PT0gXCJGb3JJblN0YXRlbWVudFwiID8gdGhpcy5wYXJzZUV4cHJlc3Npb24oKSA6IHRoaXMucGFyc2VNYXliZUFzc2lnbigpO1xuICB0aGlzLmV4cGVjdCh0eXBlcy5wYXJlblIpO1xuICBub2RlLmJvZHkgPSB0aGlzLnBhcnNlU3RhdGVtZW50KFwiZm9yXCIpO1xuICB0aGlzLmV4aXRTY29wZSgpO1xuICB0aGlzLmxhYmVscy5wb3AoKTtcbiAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCB0eXBlKVxufTtcblxuLy8gUGFyc2UgYSBsaXN0IG9mIHZhcmlhYmxlIGRlY2xhcmF0aW9ucy5cblxucHAkMS5wYXJzZVZhciA9IGZ1bmN0aW9uKG5vZGUsIGlzRm9yLCBraW5kKSB7XG4gIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIG5vZGUuZGVjbGFyYXRpb25zID0gW107XG4gIG5vZGUua2luZCA9IGtpbmQ7XG4gIGZvciAoOzspIHtcbiAgICB2YXIgZGVjbCA9IHRoaXMkMS5zdGFydE5vZGUoKTtcbiAgICB0aGlzJDEucGFyc2VWYXJJZChkZWNsLCBraW5kKTtcbiAgICBpZiAodGhpcyQxLmVhdCh0eXBlcy5lcSkpIHtcbiAgICAgIGRlY2wuaW5pdCA9IHRoaXMkMS5wYXJzZU1heWJlQXNzaWduKGlzRm9yKTtcbiAgICB9IGVsc2UgaWYgKGtpbmQgPT09IFwiY29uc3RcIiAmJiAhKHRoaXMkMS50eXBlID09PSB0eXBlcy5faW4gfHwgKHRoaXMkMS5vcHRpb25zLmVjbWFWZXJzaW9uID49IDYgJiYgdGhpcyQxLmlzQ29udGV4dHVhbChcIm9mXCIpKSkpIHtcbiAgICAgIHRoaXMkMS51bmV4cGVjdGVkKCk7XG4gICAgfSBlbHNlIGlmIChkZWNsLmlkLnR5cGUgIT09IFwiSWRlbnRpZmllclwiICYmICEoaXNGb3IgJiYgKHRoaXMkMS50eXBlID09PSB0eXBlcy5faW4gfHwgdGhpcyQxLmlzQ29udGV4dHVhbChcIm9mXCIpKSkpIHtcbiAgICAgIHRoaXMkMS5yYWlzZSh0aGlzJDEubGFzdFRva0VuZCwgXCJDb21wbGV4IGJpbmRpbmcgcGF0dGVybnMgcmVxdWlyZSBhbiBpbml0aWFsaXphdGlvbiB2YWx1ZVwiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGVjbC5pbml0ID0gbnVsbDtcbiAgICB9XG4gICAgbm9kZS5kZWNsYXJhdGlvbnMucHVzaCh0aGlzJDEuZmluaXNoTm9kZShkZWNsLCBcIlZhcmlhYmxlRGVjbGFyYXRvclwiKSk7XG4gICAgaWYgKCF0aGlzJDEuZWF0KHR5cGVzLmNvbW1hKSkgeyBicmVhayB9XG4gIH1cbiAgcmV0dXJuIG5vZGVcbn07XG5cbnBwJDEucGFyc2VWYXJJZCA9IGZ1bmN0aW9uKGRlY2wsIGtpbmQpIHtcbiAgaWYgKChraW5kID09PSBcImNvbnN0XCIgfHwga2luZCA9PT0gXCJsZXRcIikgJiYgdGhpcy5pc0NvbnRleHR1YWwoXCJsZXRcIikpIHtcbiAgICB0aGlzLnJhaXNlUmVjb3ZlcmFibGUodGhpcy5zdGFydCwgXCJsZXQgaXMgZGlzYWxsb3dlZCBhcyBhIGxleGljYWxseSBib3VuZCBuYW1lXCIpO1xuICB9XG4gIGRlY2wuaWQgPSB0aGlzLnBhcnNlQmluZGluZ0F0b20oKTtcbiAgdGhpcy5jaGVja0xWYWwoZGVjbC5pZCwga2luZCA9PT0gXCJ2YXJcIiA/IEJJTkRfVkFSIDogQklORF9MRVhJQ0FMLCBmYWxzZSk7XG59O1xuXG52YXIgRlVOQ19TVEFURU1FTlQgPSAxO1xudmFyIEZVTkNfSEFOR0lOR19TVEFURU1FTlQgPSAyO1xudmFyIEZVTkNfTlVMTEFCTEVfSUQgPSA0O1xuXG4vLyBQYXJzZSBhIGZ1bmN0aW9uIGRlY2xhcmF0aW9uIG9yIGxpdGVyYWwgKGRlcGVuZGluZyBvbiB0aGVcbi8vIGBzdGF0ZW1lbnQgJiBGVU5DX1NUQVRFTUVOVGApLlxuXG4vLyBSZW1vdmUgYGFsbG93RXhwcmVzc2lvbkJvZHlgIGZvciA3LjAuMCwgYXMgaXQgaXMgb25seSBjYWxsZWQgd2l0aCBmYWxzZVxucHAkMS5wYXJzZUZ1bmN0aW9uID0gZnVuY3Rpb24obm9kZSwgc3RhdGVtZW50LCBhbGxvd0V4cHJlc3Npb25Cb2R5LCBpc0FzeW5jKSB7XG4gIHRoaXMuaW5pdEZ1bmN0aW9uKG5vZGUpO1xuICBpZiAodGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uID49IDkgfHwgdGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uID49IDYgJiYgIWlzQXN5bmMpIHtcbiAgICBpZiAodGhpcy50eXBlID09PSB0eXBlcy5zdGFyICYmIChzdGF0ZW1lbnQgJiBGVU5DX0hBTkdJTkdfU1RBVEVNRU5UKSlcbiAgICAgIHsgdGhpcy51bmV4cGVjdGVkKCk7IH1cbiAgICBub2RlLmdlbmVyYXRvciA9IHRoaXMuZWF0KHR5cGVzLnN0YXIpO1xuICB9XG4gIGlmICh0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24gPj0gOClcbiAgICB7IG5vZGUuYXN5bmMgPSAhIWlzQXN5bmM7IH1cblxuICBpZiAoc3RhdGVtZW50ICYgRlVOQ19TVEFURU1FTlQpIHtcbiAgICBub2RlLmlkID0gKHN0YXRlbWVudCAmIEZVTkNfTlVMTEFCTEVfSUQpICYmIHRoaXMudHlwZSAhPT0gdHlwZXMubmFtZSA/IG51bGwgOiB0aGlzLnBhcnNlSWRlbnQoKTtcbiAgICBpZiAobm9kZS5pZCAmJiAhKHN0YXRlbWVudCAmIEZVTkNfSEFOR0lOR19TVEFURU1FTlQpKVxuICAgICAgLy8gSWYgaXQgaXMgYSByZWd1bGFyIGZ1bmN0aW9uIGRlY2xhcmF0aW9uIGluIHNsb3BweSBtb2RlLCB0aGVuIGl0IGlzXG4gICAgICAvLyBzdWJqZWN0IHRvIEFubmV4IEIgc2VtYW50aWNzIChCSU5EX0ZVTkNUSU9OKS4gT3RoZXJ3aXNlLCB0aGUgYmluZGluZ1xuICAgICAgLy8gbW9kZSBkZXBlbmRzIG9uIHByb3BlcnRpZXMgb2YgdGhlIGN1cnJlbnQgc2NvcGUgKHNlZVxuICAgICAgLy8gdHJlYXRGdW5jdGlvbnNBc1ZhcikuXG4gICAgICB7IHRoaXMuY2hlY2tMVmFsKG5vZGUuaWQsICh0aGlzLnN0cmljdCB8fCBub2RlLmdlbmVyYXRvciB8fCBub2RlLmFzeW5jKSA/IHRoaXMudHJlYXRGdW5jdGlvbnNBc1ZhciA/IEJJTkRfVkFSIDogQklORF9MRVhJQ0FMIDogQklORF9GVU5DVElPTik7IH1cbiAgfVxuXG4gIHZhciBvbGRZaWVsZFBvcyA9IHRoaXMueWllbGRQb3MsIG9sZEF3YWl0UG9zID0gdGhpcy5hd2FpdFBvcywgb2xkQXdhaXRJZGVudFBvcyA9IHRoaXMuYXdhaXRJZGVudFBvcztcbiAgdGhpcy55aWVsZFBvcyA9IDA7XG4gIHRoaXMuYXdhaXRQb3MgPSAwO1xuICB0aGlzLmF3YWl0SWRlbnRQb3MgPSAwO1xuICB0aGlzLmVudGVyU2NvcGUoZnVuY3Rpb25GbGFncyhub2RlLmFzeW5jLCBub2RlLmdlbmVyYXRvcikpO1xuXG4gIGlmICghKHN0YXRlbWVudCAmIEZVTkNfU1RBVEVNRU5UKSlcbiAgICB7IG5vZGUuaWQgPSB0aGlzLnR5cGUgPT09IHR5cGVzLm5hbWUgPyB0aGlzLnBhcnNlSWRlbnQoKSA6IG51bGw7IH1cblxuICB0aGlzLnBhcnNlRnVuY3Rpb25QYXJhbXMobm9kZSk7XG4gIHRoaXMucGFyc2VGdW5jdGlvbkJvZHkobm9kZSwgYWxsb3dFeHByZXNzaW9uQm9keSwgZmFsc2UpO1xuXG4gIHRoaXMueWllbGRQb3MgPSBvbGRZaWVsZFBvcztcbiAgdGhpcy5hd2FpdFBvcyA9IG9sZEF3YWl0UG9zO1xuICB0aGlzLmF3YWl0SWRlbnRQb3MgPSBvbGRBd2FpdElkZW50UG9zO1xuICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIChzdGF0ZW1lbnQgJiBGVU5DX1NUQVRFTUVOVCkgPyBcIkZ1bmN0aW9uRGVjbGFyYXRpb25cIiA6IFwiRnVuY3Rpb25FeHByZXNzaW9uXCIpXG59O1xuXG5wcCQxLnBhcnNlRnVuY3Rpb25QYXJhbXMgPSBmdW5jdGlvbihub2RlKSB7XG4gIHRoaXMuZXhwZWN0KHR5cGVzLnBhcmVuTCk7XG4gIG5vZGUucGFyYW1zID0gdGhpcy5wYXJzZUJpbmRpbmdMaXN0KHR5cGVzLnBhcmVuUiwgZmFsc2UsIHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA+PSA4KTtcbiAgdGhpcy5jaGVja1lpZWxkQXdhaXRJbkRlZmF1bHRQYXJhbXMoKTtcbn07XG5cbi8vIFBhcnNlIGEgY2xhc3MgZGVjbGFyYXRpb24gb3IgbGl0ZXJhbCAoZGVwZW5kaW5nIG9uIHRoZVxuLy8gYGlzU3RhdGVtZW50YCBwYXJhbWV0ZXIpLlxuXG5wcCQxLnBhcnNlQ2xhc3MgPSBmdW5jdGlvbihub2RlLCBpc1N0YXRlbWVudCkge1xuICB2YXIgdGhpcyQxID0gdGhpcztcblxuICB0aGlzLm5leHQoKTtcblxuICAvLyBlY21hLTI2MiAxNC42IENsYXNzIERlZmluaXRpb25zXG4gIC8vIEEgY2xhc3MgZGVmaW5pdGlvbiBpcyBhbHdheXMgc3RyaWN0IG1vZGUgY29kZS5cbiAgdmFyIG9sZFN0cmljdCA9IHRoaXMuc3RyaWN0O1xuICB0aGlzLnN0cmljdCA9IHRydWU7XG5cbiAgdGhpcy5wYXJzZUNsYXNzSWQobm9kZSwgaXNTdGF0ZW1lbnQpO1xuICB0aGlzLnBhcnNlQ2xhc3NTdXBlcihub2RlKTtcbiAgdmFyIGNsYXNzQm9keSA9IHRoaXMuc3RhcnROb2RlKCk7XG4gIHZhciBoYWRDb25zdHJ1Y3RvciA9IGZhbHNlO1xuICBjbGFzc0JvZHkuYm9keSA9IFtdO1xuICB0aGlzLmV4cGVjdCh0eXBlcy5icmFjZUwpO1xuICB3aGlsZSAoIXRoaXMuZWF0KHR5cGVzLmJyYWNlUikpIHtcbiAgICB2YXIgZWxlbWVudCA9IHRoaXMkMS5wYXJzZUNsYXNzRWxlbWVudChub2RlLnN1cGVyQ2xhc3MgIT09IG51bGwpO1xuICAgIGlmIChlbGVtZW50KSB7XG4gICAgICBjbGFzc0JvZHkuYm9keS5wdXNoKGVsZW1lbnQpO1xuICAgICAgaWYgKGVsZW1lbnQudHlwZSA9PT0gXCJNZXRob2REZWZpbml0aW9uXCIgJiYgZWxlbWVudC5raW5kID09PSBcImNvbnN0cnVjdG9yXCIpIHtcbiAgICAgICAgaWYgKGhhZENvbnN0cnVjdG9yKSB7IHRoaXMkMS5yYWlzZShlbGVtZW50LnN0YXJ0LCBcIkR1cGxpY2F0ZSBjb25zdHJ1Y3RvciBpbiB0aGUgc2FtZSBjbGFzc1wiKTsgfVxuICAgICAgICBoYWRDb25zdHJ1Y3RvciA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIG5vZGUuYm9keSA9IHRoaXMuZmluaXNoTm9kZShjbGFzc0JvZHksIFwiQ2xhc3NCb2R5XCIpO1xuICB0aGlzLnN0cmljdCA9IG9sZFN0cmljdDtcbiAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBpc1N0YXRlbWVudCA/IFwiQ2xhc3NEZWNsYXJhdGlvblwiIDogXCJDbGFzc0V4cHJlc3Npb25cIilcbn07XG5cbnBwJDEucGFyc2VDbGFzc0VsZW1lbnQgPSBmdW5jdGlvbihjb25zdHJ1Y3RvckFsbG93c1N1cGVyKSB7XG4gIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIGlmICh0aGlzLmVhdCh0eXBlcy5zZW1pKSkgeyByZXR1cm4gbnVsbCB9XG5cbiAgdmFyIG1ldGhvZCA9IHRoaXMuc3RhcnROb2RlKCk7XG4gIHZhciB0cnlDb250ZXh0dWFsID0gZnVuY3Rpb24gKGssIG5vTGluZUJyZWFrKSB7XG4gICAgaWYgKCBub0xpbmVCcmVhayA9PT0gdm9pZCAwICkgbm9MaW5lQnJlYWsgPSBmYWxzZTtcblxuICAgIHZhciBzdGFydCA9IHRoaXMkMS5zdGFydCwgc3RhcnRMb2MgPSB0aGlzJDEuc3RhcnRMb2M7XG4gICAgaWYgKCF0aGlzJDEuZWF0Q29udGV4dHVhbChrKSkgeyByZXR1cm4gZmFsc2UgfVxuICAgIGlmICh0aGlzJDEudHlwZSAhPT0gdHlwZXMucGFyZW5MICYmICghbm9MaW5lQnJlYWsgfHwgIXRoaXMkMS5jYW5JbnNlcnRTZW1pY29sb24oKSkpIHsgcmV0dXJuIHRydWUgfVxuICAgIGlmIChtZXRob2Qua2V5KSB7IHRoaXMkMS51bmV4cGVjdGVkKCk7IH1cbiAgICBtZXRob2QuY29tcHV0ZWQgPSBmYWxzZTtcbiAgICBtZXRob2Qua2V5ID0gdGhpcyQxLnN0YXJ0Tm9kZUF0KHN0YXJ0LCBzdGFydExvYyk7XG4gICAgbWV0aG9kLmtleS5uYW1lID0gaztcbiAgICB0aGlzJDEuZmluaXNoTm9kZShtZXRob2Qua2V5LCBcIklkZW50aWZpZXJcIik7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH07XG5cbiAgbWV0aG9kLmtpbmQgPSBcIm1ldGhvZFwiO1xuICBtZXRob2Quc3RhdGljID0gdHJ5Q29udGV4dHVhbChcInN0YXRpY1wiKTtcbiAgdmFyIGlzR2VuZXJhdG9yID0gdGhpcy5lYXQodHlwZXMuc3Rhcik7XG4gIHZhciBpc0FzeW5jID0gZmFsc2U7XG4gIGlmICghaXNHZW5lcmF0b3IpIHtcbiAgICBpZiAodGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uID49IDggJiYgdHJ5Q29udGV4dHVhbChcImFzeW5jXCIsIHRydWUpKSB7XG4gICAgICBpc0FzeW5jID0gdHJ1ZTtcbiAgICAgIGlzR2VuZXJhdG9yID0gdGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uID49IDkgJiYgdGhpcy5lYXQodHlwZXMuc3Rhcik7XG4gICAgfSBlbHNlIGlmICh0cnlDb250ZXh0dWFsKFwiZ2V0XCIpKSB7XG4gICAgICBtZXRob2Qua2luZCA9IFwiZ2V0XCI7XG4gICAgfSBlbHNlIGlmICh0cnlDb250ZXh0dWFsKFwic2V0XCIpKSB7XG4gICAgICBtZXRob2Qua2luZCA9IFwic2V0XCI7XG4gICAgfVxuICB9XG4gIGlmICghbWV0aG9kLmtleSkgeyB0aGlzLnBhcnNlUHJvcGVydHlOYW1lKG1ldGhvZCk7IH1cbiAgdmFyIGtleSA9IG1ldGhvZC5rZXk7XG4gIHZhciBhbGxvd3NEaXJlY3RTdXBlciA9IGZhbHNlO1xuICBpZiAoIW1ldGhvZC5jb21wdXRlZCAmJiAhbWV0aG9kLnN0YXRpYyAmJiAoa2V5LnR5cGUgPT09IFwiSWRlbnRpZmllclwiICYmIGtleS5uYW1lID09PSBcImNvbnN0cnVjdG9yXCIgfHxcbiAgICAgIGtleS50eXBlID09PSBcIkxpdGVyYWxcIiAmJiBrZXkudmFsdWUgPT09IFwiY29uc3RydWN0b3JcIikpIHtcbiAgICBpZiAobWV0aG9kLmtpbmQgIT09IFwibWV0aG9kXCIpIHsgdGhpcy5yYWlzZShrZXkuc3RhcnQsIFwiQ29uc3RydWN0b3IgY2FuJ3QgaGF2ZSBnZXQvc2V0IG1vZGlmaWVyXCIpOyB9XG4gICAgaWYgKGlzR2VuZXJhdG9yKSB7IHRoaXMucmFpc2Uoa2V5LnN0YXJ0LCBcIkNvbnN0cnVjdG9yIGNhbid0IGJlIGEgZ2VuZXJhdG9yXCIpOyB9XG4gICAgaWYgKGlzQXN5bmMpIHsgdGhpcy5yYWlzZShrZXkuc3RhcnQsIFwiQ29uc3RydWN0b3IgY2FuJ3QgYmUgYW4gYXN5bmMgbWV0aG9kXCIpOyB9XG4gICAgbWV0aG9kLmtpbmQgPSBcImNvbnN0cnVjdG9yXCI7XG4gICAgYWxsb3dzRGlyZWN0U3VwZXIgPSBjb25zdHJ1Y3RvckFsbG93c1N1cGVyO1xuICB9IGVsc2UgaWYgKG1ldGhvZC5zdGF0aWMgJiYga2V5LnR5cGUgPT09IFwiSWRlbnRpZmllclwiICYmIGtleS5uYW1lID09PSBcInByb3RvdHlwZVwiKSB7XG4gICAgdGhpcy5yYWlzZShrZXkuc3RhcnQsIFwiQ2xhc3NlcyBtYXkgbm90IGhhdmUgYSBzdGF0aWMgcHJvcGVydHkgbmFtZWQgcHJvdG90eXBlXCIpO1xuICB9XG4gIHRoaXMucGFyc2VDbGFzc01ldGhvZChtZXRob2QsIGlzR2VuZXJhdG9yLCBpc0FzeW5jLCBhbGxvd3NEaXJlY3RTdXBlcik7XG4gIGlmIChtZXRob2Qua2luZCA9PT0gXCJnZXRcIiAmJiBtZXRob2QudmFsdWUucGFyYW1zLmxlbmd0aCAhPT0gMClcbiAgICB7IHRoaXMucmFpc2VSZWNvdmVyYWJsZShtZXRob2QudmFsdWUuc3RhcnQsIFwiZ2V0dGVyIHNob3VsZCBoYXZlIG5vIHBhcmFtc1wiKTsgfVxuICBpZiAobWV0aG9kLmtpbmQgPT09IFwic2V0XCIgJiYgbWV0aG9kLnZhbHVlLnBhcmFtcy5sZW5ndGggIT09IDEpXG4gICAgeyB0aGlzLnJhaXNlUmVjb3ZlcmFibGUobWV0aG9kLnZhbHVlLnN0YXJ0LCBcInNldHRlciBzaG91bGQgaGF2ZSBleGFjdGx5IG9uZSBwYXJhbVwiKTsgfVxuICBpZiAobWV0aG9kLmtpbmQgPT09IFwic2V0XCIgJiYgbWV0aG9kLnZhbHVlLnBhcmFtc1swXS50eXBlID09PSBcIlJlc3RFbGVtZW50XCIpXG4gICAgeyB0aGlzLnJhaXNlUmVjb3ZlcmFibGUobWV0aG9kLnZhbHVlLnBhcmFtc1swXS5zdGFydCwgXCJTZXR0ZXIgY2Fubm90IHVzZSByZXN0IHBhcmFtc1wiKTsgfVxuICByZXR1cm4gbWV0aG9kXG59O1xuXG5wcCQxLnBhcnNlQ2xhc3NNZXRob2QgPSBmdW5jdGlvbihtZXRob2QsIGlzR2VuZXJhdG9yLCBpc0FzeW5jLCBhbGxvd3NEaXJlY3RTdXBlcikge1xuICBtZXRob2QudmFsdWUgPSB0aGlzLnBhcnNlTWV0aG9kKGlzR2VuZXJhdG9yLCBpc0FzeW5jLCBhbGxvd3NEaXJlY3RTdXBlcik7XG4gIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobWV0aG9kLCBcIk1ldGhvZERlZmluaXRpb25cIilcbn07XG5cbnBwJDEucGFyc2VDbGFzc0lkID0gZnVuY3Rpb24obm9kZSwgaXNTdGF0ZW1lbnQpIHtcbiAgaWYgKHRoaXMudHlwZSA9PT0gdHlwZXMubmFtZSkge1xuICAgIG5vZGUuaWQgPSB0aGlzLnBhcnNlSWRlbnQoKTtcbiAgICBpZiAoaXNTdGF0ZW1lbnQpXG4gICAgICB7IHRoaXMuY2hlY2tMVmFsKG5vZGUuaWQsIEJJTkRfTEVYSUNBTCwgZmFsc2UpOyB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKGlzU3RhdGVtZW50ID09PSB0cnVlKVxuICAgICAgeyB0aGlzLnVuZXhwZWN0ZWQoKTsgfVxuICAgIG5vZGUuaWQgPSBudWxsO1xuICB9XG59O1xuXG5wcCQxLnBhcnNlQ2xhc3NTdXBlciA9IGZ1bmN0aW9uKG5vZGUpIHtcbiAgbm9kZS5zdXBlckNsYXNzID0gdGhpcy5lYXQodHlwZXMuX2V4dGVuZHMpID8gdGhpcy5wYXJzZUV4cHJTdWJzY3JpcHRzKCkgOiBudWxsO1xufTtcblxuLy8gUGFyc2VzIG1vZHVsZSBleHBvcnQgZGVjbGFyYXRpb24uXG5cbnBwJDEucGFyc2VFeHBvcnQgPSBmdW5jdGlvbihub2RlLCBleHBvcnRzKSB7XG4gIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIHRoaXMubmV4dCgpO1xuICAvLyBleHBvcnQgKiBmcm9tICcuLi4nXG4gIGlmICh0aGlzLmVhdCh0eXBlcy5zdGFyKSkge1xuICAgIHRoaXMuZXhwZWN0Q29udGV4dHVhbChcImZyb21cIik7XG4gICAgaWYgKHRoaXMudHlwZSAhPT0gdHlwZXMuc3RyaW5nKSB7IHRoaXMudW5leHBlY3RlZCgpOyB9XG4gICAgbm9kZS5zb3VyY2UgPSB0aGlzLnBhcnNlRXhwckF0b20oKTtcbiAgICB0aGlzLnNlbWljb2xvbigpO1xuICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJFeHBvcnRBbGxEZWNsYXJhdGlvblwiKVxuICB9XG4gIGlmICh0aGlzLmVhdCh0eXBlcy5fZGVmYXVsdCkpIHsgLy8gZXhwb3J0IGRlZmF1bHQgLi4uXG4gICAgdGhpcy5jaGVja0V4cG9ydChleHBvcnRzLCBcImRlZmF1bHRcIiwgdGhpcy5sYXN0VG9rU3RhcnQpO1xuICAgIHZhciBpc0FzeW5jO1xuICAgIGlmICh0aGlzLnR5cGUgPT09IHR5cGVzLl9mdW5jdGlvbiB8fCAoaXNBc3luYyA9IHRoaXMuaXNBc3luY0Z1bmN0aW9uKCkpKSB7XG4gICAgICB2YXIgZk5vZGUgPSB0aGlzLnN0YXJ0Tm9kZSgpO1xuICAgICAgdGhpcy5uZXh0KCk7XG4gICAgICBpZiAoaXNBc3luYykgeyB0aGlzLm5leHQoKTsgfVxuICAgICAgbm9kZS5kZWNsYXJhdGlvbiA9IHRoaXMucGFyc2VGdW5jdGlvbihmTm9kZSwgRlVOQ19TVEFURU1FTlQgfCBGVU5DX05VTExBQkxFX0lELCBmYWxzZSwgaXNBc3luYyk7XG4gICAgfSBlbHNlIGlmICh0aGlzLnR5cGUgPT09IHR5cGVzLl9jbGFzcykge1xuICAgICAgdmFyIGNOb2RlID0gdGhpcy5zdGFydE5vZGUoKTtcbiAgICAgIG5vZGUuZGVjbGFyYXRpb24gPSB0aGlzLnBhcnNlQ2xhc3MoY05vZGUsIFwibnVsbGFibGVJRFwiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbm9kZS5kZWNsYXJhdGlvbiA9IHRoaXMucGFyc2VNYXliZUFzc2lnbigpO1xuICAgICAgdGhpcy5zZW1pY29sb24oKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIkV4cG9ydERlZmF1bHREZWNsYXJhdGlvblwiKVxuICB9XG4gIC8vIGV4cG9ydCB2YXJ8Y29uc3R8bGV0fGZ1bmN0aW9ufGNsYXNzIC4uLlxuICBpZiAodGhpcy5zaG91bGRQYXJzZUV4cG9ydFN0YXRlbWVudCgpKSB7XG4gICAgbm9kZS5kZWNsYXJhdGlvbiA9IHRoaXMucGFyc2VTdGF0ZW1lbnQobnVsbCk7XG4gICAgaWYgKG5vZGUuZGVjbGFyYXRpb24udHlwZSA9PT0gXCJWYXJpYWJsZURlY2xhcmF0aW9uXCIpXG4gICAgICB7IHRoaXMuY2hlY2tWYXJpYWJsZUV4cG9ydChleHBvcnRzLCBub2RlLmRlY2xhcmF0aW9uLmRlY2xhcmF0aW9ucyk7IH1cbiAgICBlbHNlXG4gICAgICB7IHRoaXMuY2hlY2tFeHBvcnQoZXhwb3J0cywgbm9kZS5kZWNsYXJhdGlvbi5pZC5uYW1lLCBub2RlLmRlY2xhcmF0aW9uLmlkLnN0YXJ0KTsgfVxuICAgIG5vZGUuc3BlY2lmaWVycyA9IFtdO1xuICAgIG5vZGUuc291cmNlID0gbnVsbDtcbiAgfSBlbHNlIHsgLy8gZXhwb3J0IHsgeCwgeSBhcyB6IH0gW2Zyb20gJy4uLiddXG4gICAgbm9kZS5kZWNsYXJhdGlvbiA9IG51bGw7XG4gICAgbm9kZS5zcGVjaWZpZXJzID0gdGhpcy5wYXJzZUV4cG9ydFNwZWNpZmllcnMoZXhwb3J0cyk7XG4gICAgaWYgKHRoaXMuZWF0Q29udGV4dHVhbChcImZyb21cIikpIHtcbiAgICAgIGlmICh0aGlzLnR5cGUgIT09IHR5cGVzLnN0cmluZykgeyB0aGlzLnVuZXhwZWN0ZWQoKTsgfVxuICAgICAgbm9kZS5zb3VyY2UgPSB0aGlzLnBhcnNlRXhwckF0b20oKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGxpc3QgPSBub2RlLnNwZWNpZmllcnM7IGkgPCBsaXN0Lmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIC8vIGNoZWNrIGZvciBrZXl3b3JkcyB1c2VkIGFzIGxvY2FsIG5hbWVzXG4gICAgICAgIHZhciBzcGVjID0gbGlzdFtpXTtcblxuICAgICAgICB0aGlzJDEuY2hlY2tVbnJlc2VydmVkKHNwZWMubG9jYWwpO1xuICAgICAgICAvLyBjaGVjayBpZiBleHBvcnQgaXMgZGVmaW5lZFxuICAgICAgICB0aGlzJDEuY2hlY2tMb2NhbEV4cG9ydChzcGVjLmxvY2FsKTtcbiAgICAgIH1cblxuICAgICAgbm9kZS5zb3VyY2UgPSBudWxsO1xuICAgIH1cbiAgICB0aGlzLnNlbWljb2xvbigpO1xuICB9XG4gIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJFeHBvcnROYW1lZERlY2xhcmF0aW9uXCIpXG59O1xuXG5wcCQxLmNoZWNrRXhwb3J0ID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgcG9zKSB7XG4gIGlmICghZXhwb3J0cykgeyByZXR1cm4gfVxuICBpZiAoaGFzKGV4cG9ydHMsIG5hbWUpKVxuICAgIHsgdGhpcy5yYWlzZVJlY292ZXJhYmxlKHBvcywgXCJEdXBsaWNhdGUgZXhwb3J0ICdcIiArIG5hbWUgKyBcIidcIik7IH1cbiAgZXhwb3J0c1tuYW1lXSA9IHRydWU7XG59O1xuXG5wcCQxLmNoZWNrUGF0dGVybkV4cG9ydCA9IGZ1bmN0aW9uKGV4cG9ydHMsIHBhdCkge1xuICB2YXIgdGhpcyQxID0gdGhpcztcblxuICB2YXIgdHlwZSA9IHBhdC50eXBlO1xuICBpZiAodHlwZSA9PT0gXCJJZGVudGlmaWVyXCIpXG4gICAgeyB0aGlzLmNoZWNrRXhwb3J0KGV4cG9ydHMsIHBhdC5uYW1lLCBwYXQuc3RhcnQpOyB9XG4gIGVsc2UgaWYgKHR5cGUgPT09IFwiT2JqZWN0UGF0dGVyblwiKVxuICAgIHsgZm9yICh2YXIgaSA9IDAsIGxpc3QgPSBwYXQucHJvcGVydGllczsgaSA8IGxpc3QubGVuZ3RoOyBpICs9IDEpXG4gICAgICB7XG4gICAgICAgIHZhciBwcm9wID0gbGlzdFtpXTtcblxuICAgICAgICB0aGlzJDEuY2hlY2tQYXR0ZXJuRXhwb3J0KGV4cG9ydHMsIHByb3ApO1xuICAgICAgfSB9XG4gIGVsc2UgaWYgKHR5cGUgPT09IFwiQXJyYXlQYXR0ZXJuXCIpXG4gICAgeyBmb3IgKHZhciBpJDEgPSAwLCBsaXN0JDEgPSBwYXQuZWxlbWVudHM7IGkkMSA8IGxpc3QkMS5sZW5ndGg7IGkkMSArPSAxKSB7XG4gICAgICB2YXIgZWx0ID0gbGlzdCQxW2kkMV07XG5cbiAgICAgICAgaWYgKGVsdCkgeyB0aGlzJDEuY2hlY2tQYXR0ZXJuRXhwb3J0KGV4cG9ydHMsIGVsdCk7IH1cbiAgICB9IH1cbiAgZWxzZSBpZiAodHlwZSA9PT0gXCJQcm9wZXJ0eVwiKVxuICAgIHsgdGhpcy5jaGVja1BhdHRlcm5FeHBvcnQoZXhwb3J0cywgcGF0LnZhbHVlKTsgfVxuICBlbHNlIGlmICh0eXBlID09PSBcIkFzc2lnbm1lbnRQYXR0ZXJuXCIpXG4gICAgeyB0aGlzLmNoZWNrUGF0dGVybkV4cG9ydChleHBvcnRzLCBwYXQubGVmdCk7IH1cbiAgZWxzZSBpZiAodHlwZSA9PT0gXCJSZXN0RWxlbWVudFwiKVxuICAgIHsgdGhpcy5jaGVja1BhdHRlcm5FeHBvcnQoZXhwb3J0cywgcGF0LmFyZ3VtZW50KTsgfVxuICBlbHNlIGlmICh0eXBlID09PSBcIlBhcmVudGhlc2l6ZWRFeHByZXNzaW9uXCIpXG4gICAgeyB0aGlzLmNoZWNrUGF0dGVybkV4cG9ydChleHBvcnRzLCBwYXQuZXhwcmVzc2lvbik7IH1cbn07XG5cbnBwJDEuY2hlY2tWYXJpYWJsZUV4cG9ydCA9IGZ1bmN0aW9uKGV4cG9ydHMsIGRlY2xzKSB7XG4gIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIGlmICghZXhwb3J0cykgeyByZXR1cm4gfVxuICBmb3IgKHZhciBpID0gMCwgbGlzdCA9IGRlY2xzOyBpIDwgbGlzdC5sZW5ndGg7IGkgKz0gMSlcbiAgICB7XG4gICAgdmFyIGRlY2wgPSBsaXN0W2ldO1xuXG4gICAgdGhpcyQxLmNoZWNrUGF0dGVybkV4cG9ydChleHBvcnRzLCBkZWNsLmlkKTtcbiAgfVxufTtcblxucHAkMS5zaG91bGRQYXJzZUV4cG9ydFN0YXRlbWVudCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy50eXBlLmtleXdvcmQgPT09IFwidmFyXCIgfHxcbiAgICB0aGlzLnR5cGUua2V5d29yZCA9PT0gXCJjb25zdFwiIHx8XG4gICAgdGhpcy50eXBlLmtleXdvcmQgPT09IFwiY2xhc3NcIiB8fFxuICAgIHRoaXMudHlwZS5rZXl3b3JkID09PSBcImZ1bmN0aW9uXCIgfHxcbiAgICB0aGlzLmlzTGV0KCkgfHxcbiAgICB0aGlzLmlzQXN5bmNGdW5jdGlvbigpXG59O1xuXG4vLyBQYXJzZXMgYSBjb21tYS1zZXBhcmF0ZWQgbGlzdCBvZiBtb2R1bGUgZXhwb3J0cy5cblxucHAkMS5wYXJzZUV4cG9ydFNwZWNpZmllcnMgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIHZhciBub2RlcyA9IFtdLCBmaXJzdCA9IHRydWU7XG4gIC8vIGV4cG9ydCB7IHgsIHkgYXMgeiB9IFtmcm9tICcuLi4nXVxuICB0aGlzLmV4cGVjdCh0eXBlcy5icmFjZUwpO1xuICB3aGlsZSAoIXRoaXMuZWF0KHR5cGVzLmJyYWNlUikpIHtcbiAgICBpZiAoIWZpcnN0KSB7XG4gICAgICB0aGlzJDEuZXhwZWN0KHR5cGVzLmNvbW1hKTtcbiAgICAgIGlmICh0aGlzJDEuYWZ0ZXJUcmFpbGluZ0NvbW1hKHR5cGVzLmJyYWNlUikpIHsgYnJlYWsgfVxuICAgIH0gZWxzZSB7IGZpcnN0ID0gZmFsc2U7IH1cblxuICAgIHZhciBub2RlID0gdGhpcyQxLnN0YXJ0Tm9kZSgpO1xuICAgIG5vZGUubG9jYWwgPSB0aGlzJDEucGFyc2VJZGVudCh0cnVlKTtcbiAgICBub2RlLmV4cG9ydGVkID0gdGhpcyQxLmVhdENvbnRleHR1YWwoXCJhc1wiKSA/IHRoaXMkMS5wYXJzZUlkZW50KHRydWUpIDogbm9kZS5sb2NhbDtcbiAgICB0aGlzJDEuY2hlY2tFeHBvcnQoZXhwb3J0cywgbm9kZS5leHBvcnRlZC5uYW1lLCBub2RlLmV4cG9ydGVkLnN0YXJ0KTtcbiAgICBub2Rlcy5wdXNoKHRoaXMkMS5maW5pc2hOb2RlKG5vZGUsIFwiRXhwb3J0U3BlY2lmaWVyXCIpKTtcbiAgfVxuICByZXR1cm4gbm9kZXNcbn07XG5cbi8vIFBhcnNlcyBpbXBvcnQgZGVjbGFyYXRpb24uXG5cbnBwJDEucGFyc2VJbXBvcnQgPSBmdW5jdGlvbihub2RlKSB7XG4gIHRoaXMubmV4dCgpO1xuICAvLyBpbXBvcnQgJy4uLidcbiAgaWYgKHRoaXMudHlwZSA9PT0gdHlwZXMuc3RyaW5nKSB7XG4gICAgbm9kZS5zcGVjaWZpZXJzID0gZW1wdHk7XG4gICAgbm9kZS5zb3VyY2UgPSB0aGlzLnBhcnNlRXhwckF0b20oKTtcbiAgfSBlbHNlIHtcbiAgICBub2RlLnNwZWNpZmllcnMgPSB0aGlzLnBhcnNlSW1wb3J0U3BlY2lmaWVycygpO1xuICAgIHRoaXMuZXhwZWN0Q29udGV4dHVhbChcImZyb21cIik7XG4gICAgbm9kZS5zb3VyY2UgPSB0aGlzLnR5cGUgPT09IHR5cGVzLnN0cmluZyA/IHRoaXMucGFyc2VFeHByQXRvbSgpIDogdGhpcy51bmV4cGVjdGVkKCk7XG4gIH1cbiAgdGhpcy5zZW1pY29sb24oKTtcbiAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIkltcG9ydERlY2xhcmF0aW9uXCIpXG59O1xuXG4vLyBQYXJzZXMgYSBjb21tYS1zZXBhcmF0ZWQgbGlzdCBvZiBtb2R1bGUgaW1wb3J0cy5cblxucHAkMS5wYXJzZUltcG9ydFNwZWNpZmllcnMgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgdmFyIG5vZGVzID0gW10sIGZpcnN0ID0gdHJ1ZTtcbiAgaWYgKHRoaXMudHlwZSA9PT0gdHlwZXMubmFtZSkge1xuICAgIC8vIGltcG9ydCBkZWZhdWx0T2JqLCB7IHgsIHkgYXMgeiB9IGZyb20gJy4uLidcbiAgICB2YXIgbm9kZSA9IHRoaXMuc3RhcnROb2RlKCk7XG4gICAgbm9kZS5sb2NhbCA9IHRoaXMucGFyc2VJZGVudCgpO1xuICAgIHRoaXMuY2hlY2tMVmFsKG5vZGUubG9jYWwsIEJJTkRfTEVYSUNBTCk7XG4gICAgbm9kZXMucHVzaCh0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJJbXBvcnREZWZhdWx0U3BlY2lmaWVyXCIpKTtcbiAgICBpZiAoIXRoaXMuZWF0KHR5cGVzLmNvbW1hKSkgeyByZXR1cm4gbm9kZXMgfVxuICB9XG4gIGlmICh0aGlzLnR5cGUgPT09IHR5cGVzLnN0YXIpIHtcbiAgICB2YXIgbm9kZSQxID0gdGhpcy5zdGFydE5vZGUoKTtcbiAgICB0aGlzLm5leHQoKTtcbiAgICB0aGlzLmV4cGVjdENvbnRleHR1YWwoXCJhc1wiKTtcbiAgICBub2RlJDEubG9jYWwgPSB0aGlzLnBhcnNlSWRlbnQoKTtcbiAgICB0aGlzLmNoZWNrTFZhbChub2RlJDEubG9jYWwsIEJJTkRfTEVYSUNBTCk7XG4gICAgbm9kZXMucHVzaCh0aGlzLmZpbmlzaE5vZGUobm9kZSQxLCBcIkltcG9ydE5hbWVzcGFjZVNwZWNpZmllclwiKSk7XG4gICAgcmV0dXJuIG5vZGVzXG4gIH1cbiAgdGhpcy5leHBlY3QodHlwZXMuYnJhY2VMKTtcbiAgd2hpbGUgKCF0aGlzLmVhdCh0eXBlcy5icmFjZVIpKSB7XG4gICAgaWYgKCFmaXJzdCkge1xuICAgICAgdGhpcyQxLmV4cGVjdCh0eXBlcy5jb21tYSk7XG4gICAgICBpZiAodGhpcyQxLmFmdGVyVHJhaWxpbmdDb21tYSh0eXBlcy5icmFjZVIpKSB7IGJyZWFrIH1cbiAgICB9IGVsc2UgeyBmaXJzdCA9IGZhbHNlOyB9XG5cbiAgICB2YXIgbm9kZSQyID0gdGhpcyQxLnN0YXJ0Tm9kZSgpO1xuICAgIG5vZGUkMi5pbXBvcnRlZCA9IHRoaXMkMS5wYXJzZUlkZW50KHRydWUpO1xuICAgIGlmICh0aGlzJDEuZWF0Q29udGV4dHVhbChcImFzXCIpKSB7XG4gICAgICBub2RlJDIubG9jYWwgPSB0aGlzJDEucGFyc2VJZGVudCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzJDEuY2hlY2tVbnJlc2VydmVkKG5vZGUkMi5pbXBvcnRlZCk7XG4gICAgICBub2RlJDIubG9jYWwgPSBub2RlJDIuaW1wb3J0ZWQ7XG4gICAgfVxuICAgIHRoaXMkMS5jaGVja0xWYWwobm9kZSQyLmxvY2FsLCBCSU5EX0xFWElDQUwpO1xuICAgIG5vZGVzLnB1c2godGhpcyQxLmZpbmlzaE5vZGUobm9kZSQyLCBcIkltcG9ydFNwZWNpZmllclwiKSk7XG4gIH1cbiAgcmV0dXJuIG5vZGVzXG59O1xuXG4vLyBTZXQgYEV4cHJlc3Npb25TdGF0ZW1lbnQjZGlyZWN0aXZlYCBwcm9wZXJ0eSBmb3IgZGlyZWN0aXZlIHByb2xvZ3Vlcy5cbnBwJDEuYWRhcHREaXJlY3RpdmVQcm9sb2d1ZSA9IGZ1bmN0aW9uKHN0YXRlbWVudHMpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdGF0ZW1lbnRzLmxlbmd0aCAmJiB0aGlzLmlzRGlyZWN0aXZlQ2FuZGlkYXRlKHN0YXRlbWVudHNbaV0pOyArK2kpIHtcbiAgICBzdGF0ZW1lbnRzW2ldLmRpcmVjdGl2ZSA9IHN0YXRlbWVudHNbaV0uZXhwcmVzc2lvbi5yYXcuc2xpY2UoMSwgLTEpO1xuICB9XG59O1xucHAkMS5pc0RpcmVjdGl2ZUNhbmRpZGF0ZSA9IGZ1bmN0aW9uKHN0YXRlbWVudCkge1xuICByZXR1cm4gKFxuICAgIHN0YXRlbWVudC50eXBlID09PSBcIkV4cHJlc3Npb25TdGF0ZW1lbnRcIiAmJlxuICAgIHN0YXRlbWVudC5leHByZXNzaW9uLnR5cGUgPT09IFwiTGl0ZXJhbFwiICYmXG4gICAgdHlwZW9mIHN0YXRlbWVudC5leHByZXNzaW9uLnZhbHVlID09PSBcInN0cmluZ1wiICYmXG4gICAgLy8gUmVqZWN0IHBhcmVudGhlc2l6ZWQgc3RyaW5ncy5cbiAgICAodGhpcy5pbnB1dFtzdGF0ZW1lbnQuc3RhcnRdID09PSBcIlxcXCJcIiB8fCB0aGlzLmlucHV0W3N0YXRlbWVudC5zdGFydF0gPT09IFwiJ1wiKVxuICApXG59O1xuXG52YXIgcHAkMiA9IFBhcnNlci5wcm90b3R5cGU7XG5cbi8vIENvbnZlcnQgZXhpc3RpbmcgZXhwcmVzc2lvbiBhdG9tIHRvIGFzc2lnbmFibGUgcGF0dGVyblxuLy8gaWYgcG9zc2libGUuXG5cbnBwJDIudG9Bc3NpZ25hYmxlID0gZnVuY3Rpb24obm9kZSwgaXNCaW5kaW5nLCByZWZEZXN0cnVjdHVyaW5nRXJyb3JzKSB7XG4gIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIGlmICh0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24gPj0gNiAmJiBub2RlKSB7XG4gICAgc3dpdGNoIChub2RlLnR5cGUpIHtcbiAgICBjYXNlIFwiSWRlbnRpZmllclwiOlxuICAgICAgaWYgKHRoaXMuaW5Bc3luYyAmJiBub2RlLm5hbWUgPT09IFwiYXdhaXRcIilcbiAgICAgICAgeyB0aGlzLnJhaXNlKG5vZGUuc3RhcnQsIFwiQ2Fubm90IHVzZSAnYXdhaXQnIGFzIGlkZW50aWZpZXIgaW5zaWRlIGFuIGFzeW5jIGZ1bmN0aW9uXCIpOyB9XG4gICAgICBicmVha1xuXG4gICAgY2FzZSBcIk9iamVjdFBhdHRlcm5cIjpcbiAgICBjYXNlIFwiQXJyYXlQYXR0ZXJuXCI6XG4gICAgY2FzZSBcIlJlc3RFbGVtZW50XCI6XG4gICAgICBicmVha1xuXG4gICAgY2FzZSBcIk9iamVjdEV4cHJlc3Npb25cIjpcbiAgICAgIG5vZGUudHlwZSA9IFwiT2JqZWN0UGF0dGVyblwiO1xuICAgICAgaWYgKHJlZkRlc3RydWN0dXJpbmdFcnJvcnMpIHsgdGhpcy5jaGVja1BhdHRlcm5FcnJvcnMocmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycywgdHJ1ZSk7IH1cbiAgICAgIGZvciAodmFyIGkgPSAwLCBsaXN0ID0gbm9kZS5wcm9wZXJ0aWVzOyBpIDwgbGlzdC5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICB2YXIgcHJvcCA9IGxpc3RbaV07XG5cbiAgICAgIHRoaXMkMS50b0Fzc2lnbmFibGUocHJvcCwgaXNCaW5kaW5nKTtcbiAgICAgICAgLy8gRWFybHkgZXJyb3I6XG4gICAgICAgIC8vICAgQXNzaWdubWVudFJlc3RQcm9wZXJ0eVtZaWVsZCwgQXdhaXRdIDpcbiAgICAgICAgLy8gICAgIGAuLi5gIERlc3RydWN0dXJpbmdBc3NpZ25tZW50VGFyZ2V0W1lpZWxkLCBBd2FpdF1cbiAgICAgICAgLy9cbiAgICAgICAgLy8gICBJdCBpcyBhIFN5bnRheCBFcnJvciBpZiB8RGVzdHJ1Y3R1cmluZ0Fzc2lnbm1lbnRUYXJnZXR8IGlzIGFuIHxBcnJheUxpdGVyYWx8IG9yIGFuIHxPYmplY3RMaXRlcmFsfC5cbiAgICAgICAgaWYgKFxuICAgICAgICAgIHByb3AudHlwZSA9PT0gXCJSZXN0RWxlbWVudFwiICYmXG4gICAgICAgICAgKHByb3AuYXJndW1lbnQudHlwZSA9PT0gXCJBcnJheVBhdHRlcm5cIiB8fCBwcm9wLmFyZ3VtZW50LnR5cGUgPT09IFwiT2JqZWN0UGF0dGVyblwiKVxuICAgICAgICApIHtcbiAgICAgICAgICB0aGlzJDEucmFpc2UocHJvcC5hcmd1bWVudC5zdGFydCwgXCJVbmV4cGVjdGVkIHRva2VuXCIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBicmVha1xuXG4gICAgY2FzZSBcIlByb3BlcnR5XCI6XG4gICAgICAvLyBBc3NpZ25tZW50UHJvcGVydHkgaGFzIHR5cGUgPT09IFwiUHJvcGVydHlcIlxuICAgICAgaWYgKG5vZGUua2luZCAhPT0gXCJpbml0XCIpIHsgdGhpcy5yYWlzZShub2RlLmtleS5zdGFydCwgXCJPYmplY3QgcGF0dGVybiBjYW4ndCBjb250YWluIGdldHRlciBvciBzZXR0ZXJcIik7IH1cbiAgICAgIHRoaXMudG9Bc3NpZ25hYmxlKG5vZGUudmFsdWUsIGlzQmluZGluZyk7XG4gICAgICBicmVha1xuXG4gICAgY2FzZSBcIkFycmF5RXhwcmVzc2lvblwiOlxuICAgICAgbm9kZS50eXBlID0gXCJBcnJheVBhdHRlcm5cIjtcbiAgICAgIGlmIChyZWZEZXN0cnVjdHVyaW5nRXJyb3JzKSB7IHRoaXMuY2hlY2tQYXR0ZXJuRXJyb3JzKHJlZkRlc3RydWN0dXJpbmdFcnJvcnMsIHRydWUpOyB9XG4gICAgICB0aGlzLnRvQXNzaWduYWJsZUxpc3Qobm9kZS5lbGVtZW50cywgaXNCaW5kaW5nKTtcbiAgICAgIGJyZWFrXG5cbiAgICBjYXNlIFwiU3ByZWFkRWxlbWVudFwiOlxuICAgICAgbm9kZS50eXBlID0gXCJSZXN0RWxlbWVudFwiO1xuICAgICAgdGhpcy50b0Fzc2lnbmFibGUobm9kZS5hcmd1bWVudCwgaXNCaW5kaW5nKTtcbiAgICAgIGlmIChub2RlLmFyZ3VtZW50LnR5cGUgPT09IFwiQXNzaWdubWVudFBhdHRlcm5cIilcbiAgICAgICAgeyB0aGlzLnJhaXNlKG5vZGUuYXJndW1lbnQuc3RhcnQsIFwiUmVzdCBlbGVtZW50cyBjYW5ub3QgaGF2ZSBhIGRlZmF1bHQgdmFsdWVcIik7IH1cbiAgICAgIGJyZWFrXG5cbiAgICBjYXNlIFwiQXNzaWdubWVudEV4cHJlc3Npb25cIjpcbiAgICAgIGlmIChub2RlLm9wZXJhdG9yICE9PSBcIj1cIikgeyB0aGlzLnJhaXNlKG5vZGUubGVmdC5lbmQsIFwiT25seSAnPScgb3BlcmF0b3IgY2FuIGJlIHVzZWQgZm9yIHNwZWNpZnlpbmcgZGVmYXVsdCB2YWx1ZS5cIik7IH1cbiAgICAgIG5vZGUudHlwZSA9IFwiQXNzaWdubWVudFBhdHRlcm5cIjtcbiAgICAgIGRlbGV0ZSBub2RlLm9wZXJhdG9yO1xuICAgICAgdGhpcy50b0Fzc2lnbmFibGUobm9kZS5sZWZ0LCBpc0JpbmRpbmcpO1xuICAgICAgLy8gZmFsbHMgdGhyb3VnaCB0byBBc3NpZ25tZW50UGF0dGVyblxuXG4gICAgY2FzZSBcIkFzc2lnbm1lbnRQYXR0ZXJuXCI6XG4gICAgICBicmVha1xuXG4gICAgY2FzZSBcIlBhcmVudGhlc2l6ZWRFeHByZXNzaW9uXCI6XG4gICAgICB0aGlzLnRvQXNzaWduYWJsZShub2RlLmV4cHJlc3Npb24sIGlzQmluZGluZywgcmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycyk7XG4gICAgICBicmVha1xuXG4gICAgY2FzZSBcIk1lbWJlckV4cHJlc3Npb25cIjpcbiAgICAgIGlmICghaXNCaW5kaW5nKSB7IGJyZWFrIH1cblxuICAgIGRlZmF1bHQ6XG4gICAgICB0aGlzLnJhaXNlKG5vZGUuc3RhcnQsIFwiQXNzaWduaW5nIHRvIHJ2YWx1ZVwiKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAocmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycykgeyB0aGlzLmNoZWNrUGF0dGVybkVycm9ycyhyZWZEZXN0cnVjdHVyaW5nRXJyb3JzLCB0cnVlKTsgfVxuICByZXR1cm4gbm9kZVxufTtcblxuLy8gQ29udmVydCBsaXN0IG9mIGV4cHJlc3Npb24gYXRvbXMgdG8gYmluZGluZyBsaXN0LlxuXG5wcCQyLnRvQXNzaWduYWJsZUxpc3QgPSBmdW5jdGlvbihleHByTGlzdCwgaXNCaW5kaW5nKSB7XG4gIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIHZhciBlbmQgPSBleHByTGlzdC5sZW5ndGg7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgZW5kOyBpKyspIHtcbiAgICB2YXIgZWx0ID0gZXhwckxpc3RbaV07XG4gICAgaWYgKGVsdCkgeyB0aGlzJDEudG9Bc3NpZ25hYmxlKGVsdCwgaXNCaW5kaW5nKTsgfVxuICB9XG4gIGlmIChlbmQpIHtcbiAgICB2YXIgbGFzdCA9IGV4cHJMaXN0W2VuZCAtIDFdO1xuICAgIGlmICh0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24gPT09IDYgJiYgaXNCaW5kaW5nICYmIGxhc3QgJiYgbGFzdC50eXBlID09PSBcIlJlc3RFbGVtZW50XCIgJiYgbGFzdC5hcmd1bWVudC50eXBlICE9PSBcIklkZW50aWZpZXJcIilcbiAgICAgIHsgdGhpcy51bmV4cGVjdGVkKGxhc3QuYXJndW1lbnQuc3RhcnQpOyB9XG4gIH1cbiAgcmV0dXJuIGV4cHJMaXN0XG59O1xuXG4vLyBQYXJzZXMgc3ByZWFkIGVsZW1lbnQuXG5cbnBwJDIucGFyc2VTcHJlYWQgPSBmdW5jdGlvbihyZWZEZXN0cnVjdHVyaW5nRXJyb3JzKSB7XG4gIHZhciBub2RlID0gdGhpcy5zdGFydE5vZGUoKTtcbiAgdGhpcy5uZXh0KCk7XG4gIG5vZGUuYXJndW1lbnQgPSB0aGlzLnBhcnNlTWF5YmVBc3NpZ24oZmFsc2UsIHJlZkRlc3RydWN0dXJpbmdFcnJvcnMpO1xuICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiU3ByZWFkRWxlbWVudFwiKVxufTtcblxucHAkMi5wYXJzZVJlc3RCaW5kaW5nID0gZnVuY3Rpb24oKSB7XG4gIHZhciBub2RlID0gdGhpcy5zdGFydE5vZGUoKTtcbiAgdGhpcy5uZXh0KCk7XG5cbiAgLy8gUmVzdEVsZW1lbnQgaW5zaWRlIG9mIGEgZnVuY3Rpb24gcGFyYW1ldGVyIG11c3QgYmUgYW4gaWRlbnRpZmllclxuICBpZiAodGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uID09PSA2ICYmIHRoaXMudHlwZSAhPT0gdHlwZXMubmFtZSlcbiAgICB7IHRoaXMudW5leHBlY3RlZCgpOyB9XG5cbiAgbm9kZS5hcmd1bWVudCA9IHRoaXMucGFyc2VCaW5kaW5nQXRvbSgpO1xuXG4gIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJSZXN0RWxlbWVudFwiKVxufTtcblxuLy8gUGFyc2VzIGx2YWx1ZSAoYXNzaWduYWJsZSkgYXRvbS5cblxucHAkMi5wYXJzZUJpbmRpbmdBdG9tID0gZnVuY3Rpb24oKSB7XG4gIGlmICh0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24gPj0gNikge1xuICAgIHN3aXRjaCAodGhpcy50eXBlKSB7XG4gICAgY2FzZSB0eXBlcy5icmFja2V0TDpcbiAgICAgIHZhciBub2RlID0gdGhpcy5zdGFydE5vZGUoKTtcbiAgICAgIHRoaXMubmV4dCgpO1xuICAgICAgbm9kZS5lbGVtZW50cyA9IHRoaXMucGFyc2VCaW5kaW5nTGlzdCh0eXBlcy5icmFja2V0UiwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiQXJyYXlQYXR0ZXJuXCIpXG5cbiAgICBjYXNlIHR5cGVzLmJyYWNlTDpcbiAgICAgIHJldHVybiB0aGlzLnBhcnNlT2JqKHRydWUpXG4gICAgfVxuICB9XG4gIHJldHVybiB0aGlzLnBhcnNlSWRlbnQoKVxufTtcblxucHAkMi5wYXJzZUJpbmRpbmdMaXN0ID0gZnVuY3Rpb24oY2xvc2UsIGFsbG93RW1wdHksIGFsbG93VHJhaWxpbmdDb21tYSkge1xuICB2YXIgdGhpcyQxID0gdGhpcztcblxuICB2YXIgZWx0cyA9IFtdLCBmaXJzdCA9IHRydWU7XG4gIHdoaWxlICghdGhpcy5lYXQoY2xvc2UpKSB7XG4gICAgaWYgKGZpcnN0KSB7IGZpcnN0ID0gZmFsc2U7IH1cbiAgICBlbHNlIHsgdGhpcyQxLmV4cGVjdCh0eXBlcy5jb21tYSk7IH1cbiAgICBpZiAoYWxsb3dFbXB0eSAmJiB0aGlzJDEudHlwZSA9PT0gdHlwZXMuY29tbWEpIHtcbiAgICAgIGVsdHMucHVzaChudWxsKTtcbiAgICB9IGVsc2UgaWYgKGFsbG93VHJhaWxpbmdDb21tYSAmJiB0aGlzJDEuYWZ0ZXJUcmFpbGluZ0NvbW1hKGNsb3NlKSkge1xuICAgICAgYnJlYWtcbiAgICB9IGVsc2UgaWYgKHRoaXMkMS50eXBlID09PSB0eXBlcy5lbGxpcHNpcykge1xuICAgICAgdmFyIHJlc3QgPSB0aGlzJDEucGFyc2VSZXN0QmluZGluZygpO1xuICAgICAgdGhpcyQxLnBhcnNlQmluZGluZ0xpc3RJdGVtKHJlc3QpO1xuICAgICAgZWx0cy5wdXNoKHJlc3QpO1xuICAgICAgaWYgKHRoaXMkMS50eXBlID09PSB0eXBlcy5jb21tYSkgeyB0aGlzJDEucmFpc2UodGhpcyQxLnN0YXJ0LCBcIkNvbW1hIGlzIG5vdCBwZXJtaXR0ZWQgYWZ0ZXIgdGhlIHJlc3QgZWxlbWVudFwiKTsgfVxuICAgICAgdGhpcyQxLmV4cGVjdChjbG9zZSk7XG4gICAgICBicmVha1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgZWxlbSA9IHRoaXMkMS5wYXJzZU1heWJlRGVmYXVsdCh0aGlzJDEuc3RhcnQsIHRoaXMkMS5zdGFydExvYyk7XG4gICAgICB0aGlzJDEucGFyc2VCaW5kaW5nTGlzdEl0ZW0oZWxlbSk7XG4gICAgICBlbHRzLnB1c2goZWxlbSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBlbHRzXG59O1xuXG5wcCQyLnBhcnNlQmluZGluZ0xpc3RJdGVtID0gZnVuY3Rpb24ocGFyYW0pIHtcbiAgcmV0dXJuIHBhcmFtXG59O1xuXG4vLyBQYXJzZXMgYXNzaWdubWVudCBwYXR0ZXJuIGFyb3VuZCBnaXZlbiBhdG9tIGlmIHBvc3NpYmxlLlxuXG5wcCQyLnBhcnNlTWF5YmVEZWZhdWx0ID0gZnVuY3Rpb24oc3RhcnRQb3MsIHN0YXJ0TG9jLCBsZWZ0KSB7XG4gIGxlZnQgPSBsZWZ0IHx8IHRoaXMucGFyc2VCaW5kaW5nQXRvbSgpO1xuICBpZiAodGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uIDwgNiB8fCAhdGhpcy5lYXQodHlwZXMuZXEpKSB7IHJldHVybiBsZWZ0IH1cbiAgdmFyIG5vZGUgPSB0aGlzLnN0YXJ0Tm9kZUF0KHN0YXJ0UG9zLCBzdGFydExvYyk7XG4gIG5vZGUubGVmdCA9IGxlZnQ7XG4gIG5vZGUucmlnaHQgPSB0aGlzLnBhcnNlTWF5YmVBc3NpZ24oKTtcbiAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIkFzc2lnbm1lbnRQYXR0ZXJuXCIpXG59O1xuXG4vLyBWZXJpZnkgdGhhdCBhIG5vZGUgaXMgYW4gbHZhbCDigJQgc29tZXRoaW5nIHRoYXQgY2FuIGJlIGFzc2lnbmVkXG4vLyB0by5cbi8vIGJpbmRpbmdUeXBlIGNhbiBiZSBlaXRoZXI6XG4vLyAndmFyJyBpbmRpY2F0aW5nIHRoYXQgdGhlIGx2YWwgY3JlYXRlcyBhICd2YXInIGJpbmRpbmdcbi8vICdsZXQnIGluZGljYXRpbmcgdGhhdCB0aGUgbHZhbCBjcmVhdGVzIGEgbGV4aWNhbCAoJ2xldCcgb3IgJ2NvbnN0JykgYmluZGluZ1xuLy8gJ25vbmUnIGluZGljYXRpbmcgdGhhdCB0aGUgYmluZGluZyBzaG91bGQgYmUgY2hlY2tlZCBmb3IgaWxsZWdhbCBpZGVudGlmaWVycywgYnV0IG5vdCBmb3IgZHVwbGljYXRlIHJlZmVyZW5jZXNcblxucHAkMi5jaGVja0xWYWwgPSBmdW5jdGlvbihleHByLCBiaW5kaW5nVHlwZSwgY2hlY2tDbGFzaGVzKSB7XG4gIHZhciB0aGlzJDEgPSB0aGlzO1xuICBpZiAoIGJpbmRpbmdUeXBlID09PSB2b2lkIDAgKSBiaW5kaW5nVHlwZSA9IEJJTkRfTk9ORTtcblxuICBzd2l0Y2ggKGV4cHIudHlwZSkge1xuICBjYXNlIFwiSWRlbnRpZmllclwiOlxuICAgIGlmICh0aGlzLnN0cmljdCAmJiB0aGlzLnJlc2VydmVkV29yZHNTdHJpY3RCaW5kLnRlc3QoZXhwci5uYW1lKSlcbiAgICAgIHsgdGhpcy5yYWlzZVJlY292ZXJhYmxlKGV4cHIuc3RhcnQsIChiaW5kaW5nVHlwZSA/IFwiQmluZGluZyBcIiA6IFwiQXNzaWduaW5nIHRvIFwiKSArIGV4cHIubmFtZSArIFwiIGluIHN0cmljdCBtb2RlXCIpOyB9XG4gICAgaWYgKGNoZWNrQ2xhc2hlcykge1xuICAgICAgaWYgKGhhcyhjaGVja0NsYXNoZXMsIGV4cHIubmFtZSkpXG4gICAgICAgIHsgdGhpcy5yYWlzZVJlY292ZXJhYmxlKGV4cHIuc3RhcnQsIFwiQXJndW1lbnQgbmFtZSBjbGFzaFwiKTsgfVxuICAgICAgY2hlY2tDbGFzaGVzW2V4cHIubmFtZV0gPSB0cnVlO1xuICAgIH1cbiAgICBpZiAoYmluZGluZ1R5cGUgIT09IEJJTkRfTk9ORSAmJiBiaW5kaW5nVHlwZSAhPT0gQklORF9PVVRTSURFKSB7IHRoaXMuZGVjbGFyZU5hbWUoZXhwci5uYW1lLCBiaW5kaW5nVHlwZSwgZXhwci5zdGFydCk7IH1cbiAgICBicmVha1xuXG4gIGNhc2UgXCJNZW1iZXJFeHByZXNzaW9uXCI6XG4gICAgaWYgKGJpbmRpbmdUeXBlKSB7IHRoaXMucmFpc2VSZWNvdmVyYWJsZShleHByLnN0YXJ0LCBcIkJpbmRpbmcgbWVtYmVyIGV4cHJlc3Npb25cIik7IH1cbiAgICBicmVha1xuXG4gIGNhc2UgXCJPYmplY3RQYXR0ZXJuXCI6XG4gICAgZm9yICh2YXIgaSA9IDAsIGxpc3QgPSBleHByLnByb3BlcnRpZXM7IGkgPCBsaXN0Lmxlbmd0aDsgaSArPSAxKVxuICAgICAge1xuICAgIHZhciBwcm9wID0gbGlzdFtpXTtcblxuICAgIHRoaXMkMS5jaGVja0xWYWwocHJvcCwgYmluZGluZ1R5cGUsIGNoZWNrQ2xhc2hlcyk7XG4gIH1cbiAgICBicmVha1xuXG4gIGNhc2UgXCJQcm9wZXJ0eVwiOlxuICAgIC8vIEFzc2lnbm1lbnRQcm9wZXJ0eSBoYXMgdHlwZSA9PT0gXCJQcm9wZXJ0eVwiXG4gICAgdGhpcy5jaGVja0xWYWwoZXhwci52YWx1ZSwgYmluZGluZ1R5cGUsIGNoZWNrQ2xhc2hlcyk7XG4gICAgYnJlYWtcblxuICBjYXNlIFwiQXJyYXlQYXR0ZXJuXCI6XG4gICAgZm9yICh2YXIgaSQxID0gMCwgbGlzdCQxID0gZXhwci5lbGVtZW50czsgaSQxIDwgbGlzdCQxLmxlbmd0aDsgaSQxICs9IDEpIHtcbiAgICAgIHZhciBlbGVtID0gbGlzdCQxW2kkMV07XG5cbiAgICBpZiAoZWxlbSkgeyB0aGlzJDEuY2hlY2tMVmFsKGVsZW0sIGJpbmRpbmdUeXBlLCBjaGVja0NsYXNoZXMpOyB9XG4gICAgfVxuICAgIGJyZWFrXG5cbiAgY2FzZSBcIkFzc2lnbm1lbnRQYXR0ZXJuXCI6XG4gICAgdGhpcy5jaGVja0xWYWwoZXhwci5sZWZ0LCBiaW5kaW5nVHlwZSwgY2hlY2tDbGFzaGVzKTtcbiAgICBicmVha1xuXG4gIGNhc2UgXCJSZXN0RWxlbWVudFwiOlxuICAgIHRoaXMuY2hlY2tMVmFsKGV4cHIuYXJndW1lbnQsIGJpbmRpbmdUeXBlLCBjaGVja0NsYXNoZXMpO1xuICAgIGJyZWFrXG5cbiAgY2FzZSBcIlBhcmVudGhlc2l6ZWRFeHByZXNzaW9uXCI6XG4gICAgdGhpcy5jaGVja0xWYWwoZXhwci5leHByZXNzaW9uLCBiaW5kaW5nVHlwZSwgY2hlY2tDbGFzaGVzKTtcbiAgICBicmVha1xuXG4gIGRlZmF1bHQ6XG4gICAgdGhpcy5yYWlzZShleHByLnN0YXJ0LCAoYmluZGluZ1R5cGUgPyBcIkJpbmRpbmdcIiA6IFwiQXNzaWduaW5nIHRvXCIpICsgXCIgcnZhbHVlXCIpO1xuICB9XG59O1xuXG4vLyBBIHJlY3Vyc2l2ZSBkZXNjZW50IHBhcnNlciBvcGVyYXRlcyBieSBkZWZpbmluZyBmdW5jdGlvbnMgZm9yIGFsbFxuLy8gc3ludGFjdGljIGVsZW1lbnRzLCBhbmQgcmVjdXJzaXZlbHkgY2FsbGluZyB0aG9zZSwgZWFjaCBmdW5jdGlvblxuLy8gYWR2YW5jaW5nIHRoZSBpbnB1dCBzdHJlYW0gYW5kIHJldHVybmluZyBhbiBBU1Qgbm9kZS4gUHJlY2VkZW5jZVxuLy8gb2YgY29uc3RydWN0cyAoZm9yIGV4YW1wbGUsIHRoZSBmYWN0IHRoYXQgYCF4WzFdYCBtZWFucyBgISh4WzFdKWBcbi8vIGluc3RlYWQgb2YgYCgheClbMV1gIGlzIGhhbmRsZWQgYnkgdGhlIGZhY3QgdGhhdCB0aGUgcGFyc2VyXG4vLyBmdW5jdGlvbiB0aGF0IHBhcnNlcyB1bmFyeSBwcmVmaXggb3BlcmF0b3JzIGlzIGNhbGxlZCBmaXJzdCwgYW5kXG4vLyBpbiB0dXJuIGNhbGxzIHRoZSBmdW5jdGlvbiB0aGF0IHBhcnNlcyBgW11gIHN1YnNjcmlwdHMg4oCUIHRoYXRcbi8vIHdheSwgaXQnbGwgcmVjZWl2ZSB0aGUgbm9kZSBmb3IgYHhbMV1gIGFscmVhZHkgcGFyc2VkLCBhbmQgd3JhcHNcbi8vICp0aGF0KiBpbiB0aGUgdW5hcnkgb3BlcmF0b3Igbm9kZS5cbi8vXG4vLyBBY29ybiB1c2VzIGFuIFtvcGVyYXRvciBwcmVjZWRlbmNlIHBhcnNlcl1bb3BwXSB0byBoYW5kbGUgYmluYXJ5XG4vLyBvcGVyYXRvciBwcmVjZWRlbmNlLCBiZWNhdXNlIGl0IGlzIG11Y2ggbW9yZSBjb21wYWN0IHRoYW4gdXNpbmdcbi8vIHRoZSB0ZWNobmlxdWUgb3V0bGluZWQgYWJvdmUsIHdoaWNoIHVzZXMgZGlmZmVyZW50LCBuZXN0aW5nXG4vLyBmdW5jdGlvbnMgdG8gc3BlY2lmeSBwcmVjZWRlbmNlLCBmb3IgYWxsIG9mIHRoZSB0ZW4gYmluYXJ5XG4vLyBwcmVjZWRlbmNlIGxldmVscyB0aGF0IEphdmFTY3JpcHQgZGVmaW5lcy5cbi8vXG4vLyBbb3BwXTogaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9PcGVyYXRvci1wcmVjZWRlbmNlX3BhcnNlclxuXG52YXIgcHAkMyA9IFBhcnNlci5wcm90b3R5cGU7XG5cbi8vIENoZWNrIGlmIHByb3BlcnR5IG5hbWUgY2xhc2hlcyB3aXRoIGFscmVhZHkgYWRkZWQuXG4vLyBPYmplY3QvY2xhc3MgZ2V0dGVycyBhbmQgc2V0dGVycyBhcmUgbm90IGFsbG93ZWQgdG8gY2xhc2gg4oCUXG4vLyBlaXRoZXIgd2l0aCBlYWNoIG90aGVyIG9yIHdpdGggYW4gaW5pdCBwcm9wZXJ0eSDigJQgYW5kIGluXG4vLyBzdHJpY3QgbW9kZSwgaW5pdCBwcm9wZXJ0aWVzIGFyZSBhbHNvIG5vdCBhbGxvd2VkIHRvIGJlIHJlcGVhdGVkLlxuXG5wcCQzLmNoZWNrUHJvcENsYXNoID0gZnVuY3Rpb24ocHJvcCwgcHJvcEhhc2gsIHJlZkRlc3RydWN0dXJpbmdFcnJvcnMpIHtcbiAgaWYgKHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA+PSA5ICYmIHByb3AudHlwZSA9PT0gXCJTcHJlYWRFbGVtZW50XCIpXG4gICAgeyByZXR1cm4gfVxuICBpZiAodGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uID49IDYgJiYgKHByb3AuY29tcHV0ZWQgfHwgcHJvcC5tZXRob2QgfHwgcHJvcC5zaG9ydGhhbmQpKVxuICAgIHsgcmV0dXJuIH1cbiAgdmFyIGtleSA9IHByb3Aua2V5O1xuICB2YXIgbmFtZTtcbiAgc3dpdGNoIChrZXkudHlwZSkge1xuICBjYXNlIFwiSWRlbnRpZmllclwiOiBuYW1lID0ga2V5Lm5hbWU7IGJyZWFrXG4gIGNhc2UgXCJMaXRlcmFsXCI6IG5hbWUgPSBTdHJpbmcoa2V5LnZhbHVlKTsgYnJlYWtcbiAgZGVmYXVsdDogcmV0dXJuXG4gIH1cbiAgdmFyIGtpbmQgPSBwcm9wLmtpbmQ7XG4gIGlmICh0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24gPj0gNikge1xuICAgIGlmIChuYW1lID09PSBcIl9fcHJvdG9fX1wiICYmIGtpbmQgPT09IFwiaW5pdFwiKSB7XG4gICAgICBpZiAocHJvcEhhc2gucHJvdG8pIHtcbiAgICAgICAgaWYgKHJlZkRlc3RydWN0dXJpbmdFcnJvcnMgJiYgcmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycy5kb3VibGVQcm90byA8IDApIHsgcmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycy5kb3VibGVQcm90byA9IGtleS5zdGFydDsgfVxuICAgICAgICAvLyBCYWNrd2FyZHMtY29tcGF0IGtsdWRnZS4gQ2FuIGJlIHJlbW92ZWQgaW4gdmVyc2lvbiA2LjBcbiAgICAgICAgZWxzZSB7IHRoaXMucmFpc2VSZWNvdmVyYWJsZShrZXkuc3RhcnQsIFwiUmVkZWZpbml0aW9uIG9mIF9fcHJvdG9fXyBwcm9wZXJ0eVwiKTsgfVxuICAgICAgfVxuICAgICAgcHJvcEhhc2gucHJvdG8gPSB0cnVlO1xuICAgIH1cbiAgICByZXR1cm5cbiAgfVxuICBuYW1lID0gXCIkXCIgKyBuYW1lO1xuICB2YXIgb3RoZXIgPSBwcm9wSGFzaFtuYW1lXTtcbiAgaWYgKG90aGVyKSB7XG4gICAgdmFyIHJlZGVmaW5pdGlvbjtcbiAgICBpZiAoa2luZCA9PT0gXCJpbml0XCIpIHtcbiAgICAgIHJlZGVmaW5pdGlvbiA9IHRoaXMuc3RyaWN0ICYmIG90aGVyLmluaXQgfHwgb3RoZXIuZ2V0IHx8IG90aGVyLnNldDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVkZWZpbml0aW9uID0gb3RoZXIuaW5pdCB8fCBvdGhlcltraW5kXTtcbiAgICB9XG4gICAgaWYgKHJlZGVmaW5pdGlvbilcbiAgICAgIHsgdGhpcy5yYWlzZVJlY292ZXJhYmxlKGtleS5zdGFydCwgXCJSZWRlZmluaXRpb24gb2YgcHJvcGVydHlcIik7IH1cbiAgfSBlbHNlIHtcbiAgICBvdGhlciA9IHByb3BIYXNoW25hbWVdID0ge1xuICAgICAgaW5pdDogZmFsc2UsXG4gICAgICBnZXQ6IGZhbHNlLFxuICAgICAgc2V0OiBmYWxzZVxuICAgIH07XG4gIH1cbiAgb3RoZXJba2luZF0gPSB0cnVlO1xufTtcblxuLy8gIyMjIEV4cHJlc3Npb24gcGFyc2luZ1xuXG4vLyBUaGVzZSBuZXN0LCBmcm9tIHRoZSBtb3N0IGdlbmVyYWwgZXhwcmVzc2lvbiB0eXBlIGF0IHRoZSB0b3AgdG9cbi8vICdhdG9taWMnLCBub25kaXZpc2libGUgZXhwcmVzc2lvbiB0eXBlcyBhdCB0aGUgYm90dG9tLiBNb3N0IG9mXG4vLyB0aGUgZnVuY3Rpb25zIHdpbGwgc2ltcGx5IGxldCB0aGUgZnVuY3Rpb24ocykgYmVsb3cgdGhlbSBwYXJzZSxcbi8vIGFuZCwgKmlmKiB0aGUgc3ludGFjdGljIGNvbnN0cnVjdCB0aGV5IGhhbmRsZSBpcyBwcmVzZW50LCB3cmFwXG4vLyB0aGUgQVNUIG5vZGUgdGhhdCB0aGUgaW5uZXIgcGFyc2VyIGdhdmUgdGhlbSBpbiBhbm90aGVyIG5vZGUuXG5cbi8vIFBhcnNlIGEgZnVsbCBleHByZXNzaW9uLiBUaGUgb3B0aW9uYWwgYXJndW1lbnRzIGFyZSB1c2VkIHRvXG4vLyBmb3JiaWQgdGhlIGBpbmAgb3BlcmF0b3IgKGluIGZvciBsb29wcyBpbml0YWxpemF0aW9uIGV4cHJlc3Npb25zKVxuLy8gYW5kIHByb3ZpZGUgcmVmZXJlbmNlIGZvciBzdG9yaW5nICc9JyBvcGVyYXRvciBpbnNpZGUgc2hvcnRoYW5kXG4vLyBwcm9wZXJ0eSBhc3NpZ25tZW50IGluIGNvbnRleHRzIHdoZXJlIGJvdGggb2JqZWN0IGV4cHJlc3Npb25cbi8vIGFuZCBvYmplY3QgcGF0dGVybiBtaWdodCBhcHBlYXIgKHNvIGl0J3MgcG9zc2libGUgdG8gcmFpc2Vcbi8vIGRlbGF5ZWQgc3ludGF4IGVycm9yIGF0IGNvcnJlY3QgcG9zaXRpb24pLlxuXG5wcCQzLnBhcnNlRXhwcmVzc2lvbiA9IGZ1bmN0aW9uKG5vSW4sIHJlZkRlc3RydWN0dXJpbmdFcnJvcnMpIHtcbiAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgdmFyIHN0YXJ0UG9zID0gdGhpcy5zdGFydCwgc3RhcnRMb2MgPSB0aGlzLnN0YXJ0TG9jO1xuICB2YXIgZXhwciA9IHRoaXMucGFyc2VNYXliZUFzc2lnbihub0luLCByZWZEZXN0cnVjdHVyaW5nRXJyb3JzKTtcbiAgaWYgKHRoaXMudHlwZSA9PT0gdHlwZXMuY29tbWEpIHtcbiAgICB2YXIgbm9kZSA9IHRoaXMuc3RhcnROb2RlQXQoc3RhcnRQb3MsIHN0YXJ0TG9jKTtcbiAgICBub2RlLmV4cHJlc3Npb25zID0gW2V4cHJdO1xuICAgIHdoaWxlICh0aGlzLmVhdCh0eXBlcy5jb21tYSkpIHsgbm9kZS5leHByZXNzaW9ucy5wdXNoKHRoaXMkMS5wYXJzZU1heWJlQXNzaWduKG5vSW4sIHJlZkRlc3RydWN0dXJpbmdFcnJvcnMpKTsgfVxuICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJTZXF1ZW5jZUV4cHJlc3Npb25cIilcbiAgfVxuICByZXR1cm4gZXhwclxufTtcblxuLy8gUGFyc2UgYW4gYXNzaWdubWVudCBleHByZXNzaW9uLiBUaGlzIGluY2x1ZGVzIGFwcGxpY2F0aW9ucyBvZlxuLy8gb3BlcmF0b3JzIGxpa2UgYCs9YC5cblxucHAkMy5wYXJzZU1heWJlQXNzaWduID0gZnVuY3Rpb24obm9JbiwgcmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycywgYWZ0ZXJMZWZ0UGFyc2UpIHtcbiAgaWYgKHRoaXMuaXNDb250ZXh0dWFsKFwieWllbGRcIikpIHtcbiAgICBpZiAodGhpcy5pbkdlbmVyYXRvcikgeyByZXR1cm4gdGhpcy5wYXJzZVlpZWxkKG5vSW4pIH1cbiAgICAvLyBUaGUgdG9rZW5pemVyIHdpbGwgYXNzdW1lIGFuIGV4cHJlc3Npb24gaXMgYWxsb3dlZCBhZnRlclxuICAgIC8vIGB5aWVsZGAsIGJ1dCB0aGlzIGlzbid0IHRoYXQga2luZCBvZiB5aWVsZFxuICAgIGVsc2UgeyB0aGlzLmV4cHJBbGxvd2VkID0gZmFsc2U7IH1cbiAgfVxuXG4gIHZhciBvd25EZXN0cnVjdHVyaW5nRXJyb3JzID0gZmFsc2UsIG9sZFBhcmVuQXNzaWduID0gLTEsIG9sZFRyYWlsaW5nQ29tbWEgPSAtMSwgb2xkU2hvcnRoYW5kQXNzaWduID0gLTE7XG4gIGlmIChyZWZEZXN0cnVjdHVyaW5nRXJyb3JzKSB7XG4gICAgb2xkUGFyZW5Bc3NpZ24gPSByZWZEZXN0cnVjdHVyaW5nRXJyb3JzLnBhcmVudGhlc2l6ZWRBc3NpZ247XG4gICAgb2xkVHJhaWxpbmdDb21tYSA9IHJlZkRlc3RydWN0dXJpbmdFcnJvcnMudHJhaWxpbmdDb21tYTtcbiAgICBvbGRTaG9ydGhhbmRBc3NpZ24gPSByZWZEZXN0cnVjdHVyaW5nRXJyb3JzLnNob3J0aGFuZEFzc2lnbjtcbiAgICByZWZEZXN0cnVjdHVyaW5nRXJyb3JzLnBhcmVudGhlc2l6ZWRBc3NpZ24gPSByZWZEZXN0cnVjdHVyaW5nRXJyb3JzLnRyYWlsaW5nQ29tbWEgPSByZWZEZXN0cnVjdHVyaW5nRXJyb3JzLnNob3J0aGFuZEFzc2lnbiA9IC0xO1xuICB9IGVsc2Uge1xuICAgIHJlZkRlc3RydWN0dXJpbmdFcnJvcnMgPSBuZXcgRGVzdHJ1Y3R1cmluZ0Vycm9ycztcbiAgICBvd25EZXN0cnVjdHVyaW5nRXJyb3JzID0gdHJ1ZTtcbiAgfVxuXG4gIHZhciBzdGFydFBvcyA9IHRoaXMuc3RhcnQsIHN0YXJ0TG9jID0gdGhpcy5zdGFydExvYztcbiAgaWYgKHRoaXMudHlwZSA9PT0gdHlwZXMucGFyZW5MIHx8IHRoaXMudHlwZSA9PT0gdHlwZXMubmFtZSlcbiAgICB7IHRoaXMucG90ZW50aWFsQXJyb3dBdCA9IHRoaXMuc3RhcnQ7IH1cbiAgdmFyIGxlZnQgPSB0aGlzLnBhcnNlTWF5YmVDb25kaXRpb25hbChub0luLCByZWZEZXN0cnVjdHVyaW5nRXJyb3JzKTtcbiAgaWYgKGFmdGVyTGVmdFBhcnNlKSB7IGxlZnQgPSBhZnRlckxlZnRQYXJzZS5jYWxsKHRoaXMsIGxlZnQsIHN0YXJ0UG9zLCBzdGFydExvYyk7IH1cbiAgaWYgKHRoaXMudHlwZS5pc0Fzc2lnbikge1xuICAgIHZhciBub2RlID0gdGhpcy5zdGFydE5vZGVBdChzdGFydFBvcywgc3RhcnRMb2MpO1xuICAgIG5vZGUub3BlcmF0b3IgPSB0aGlzLnZhbHVlO1xuICAgIG5vZGUubGVmdCA9IHRoaXMudHlwZSA9PT0gdHlwZXMuZXEgPyB0aGlzLnRvQXNzaWduYWJsZShsZWZ0LCBmYWxzZSwgcmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycykgOiBsZWZ0O1xuICAgIGlmICghb3duRGVzdHJ1Y3R1cmluZ0Vycm9ycykgeyBEZXN0cnVjdHVyaW5nRXJyb3JzLmNhbGwocmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycyk7IH1cbiAgICByZWZEZXN0cnVjdHVyaW5nRXJyb3JzLnNob3J0aGFuZEFzc2lnbiA9IC0xOyAvLyByZXNldCBiZWNhdXNlIHNob3J0aGFuZCBkZWZhdWx0IHdhcyB1c2VkIGNvcnJlY3RseVxuICAgIHRoaXMuY2hlY2tMVmFsKGxlZnQpO1xuICAgIHRoaXMubmV4dCgpO1xuICAgIG5vZGUucmlnaHQgPSB0aGlzLnBhcnNlTWF5YmVBc3NpZ24obm9Jbik7XG4gICAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIkFzc2lnbm1lbnRFeHByZXNzaW9uXCIpXG4gIH0gZWxzZSB7XG4gICAgaWYgKG93bkRlc3RydWN0dXJpbmdFcnJvcnMpIHsgdGhpcy5jaGVja0V4cHJlc3Npb25FcnJvcnMocmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycywgdHJ1ZSk7IH1cbiAgfVxuICBpZiAob2xkUGFyZW5Bc3NpZ24gPiAtMSkgeyByZWZEZXN0cnVjdHVyaW5nRXJyb3JzLnBhcmVudGhlc2l6ZWRBc3NpZ24gPSBvbGRQYXJlbkFzc2lnbjsgfVxuICBpZiAob2xkVHJhaWxpbmdDb21tYSA+IC0xKSB7IHJlZkRlc3RydWN0dXJpbmdFcnJvcnMudHJhaWxpbmdDb21tYSA9IG9sZFRyYWlsaW5nQ29tbWE7IH1cbiAgaWYgKG9sZFNob3J0aGFuZEFzc2lnbiA+IC0xKSB7IHJlZkRlc3RydWN0dXJpbmdFcnJvcnMuc2hvcnRoYW5kQXNzaWduID0gb2xkU2hvcnRoYW5kQXNzaWduOyB9XG4gIHJldHVybiBsZWZ0XG59O1xuXG4vLyBQYXJzZSBhIHRlcm5hcnkgY29uZGl0aW9uYWwgKGA/OmApIG9wZXJhdG9yLlxuXG5wcCQzLnBhcnNlTWF5YmVDb25kaXRpb25hbCA9IGZ1bmN0aW9uKG5vSW4sIHJlZkRlc3RydWN0dXJpbmdFcnJvcnMpIHtcbiAgdmFyIHN0YXJ0UG9zID0gdGhpcy5zdGFydCwgc3RhcnRMb2MgPSB0aGlzLnN0YXJ0TG9jO1xuICB2YXIgZXhwciA9IHRoaXMucGFyc2VFeHByT3BzKG5vSW4sIHJlZkRlc3RydWN0dXJpbmdFcnJvcnMpO1xuICBpZiAodGhpcy5jaGVja0V4cHJlc3Npb25FcnJvcnMocmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycykpIHsgcmV0dXJuIGV4cHIgfVxuICBpZiAodGhpcy5lYXQodHlwZXMucXVlc3Rpb24pKSB7XG4gICAgdmFyIG5vZGUgPSB0aGlzLnN0YXJ0Tm9kZUF0KHN0YXJ0UG9zLCBzdGFydExvYyk7XG4gICAgbm9kZS50ZXN0ID0gZXhwcjtcbiAgICBub2RlLmNvbnNlcXVlbnQgPSB0aGlzLnBhcnNlTWF5YmVBc3NpZ24oKTtcbiAgICB0aGlzLmV4cGVjdCh0eXBlcy5jb2xvbik7XG4gICAgbm9kZS5hbHRlcm5hdGUgPSB0aGlzLnBhcnNlTWF5YmVBc3NpZ24obm9Jbik7XG4gICAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIkNvbmRpdGlvbmFsRXhwcmVzc2lvblwiKVxuICB9XG4gIHJldHVybiBleHByXG59O1xuXG4vLyBTdGFydCB0aGUgcHJlY2VkZW5jZSBwYXJzZXIuXG5cbnBwJDMucGFyc2VFeHByT3BzID0gZnVuY3Rpb24obm9JbiwgcmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycykge1xuICB2YXIgc3RhcnRQb3MgPSB0aGlzLnN0YXJ0LCBzdGFydExvYyA9IHRoaXMuc3RhcnRMb2M7XG4gIHZhciBleHByID0gdGhpcy5wYXJzZU1heWJlVW5hcnkocmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycywgZmFsc2UpO1xuICBpZiAodGhpcy5jaGVja0V4cHJlc3Npb25FcnJvcnMocmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycykpIHsgcmV0dXJuIGV4cHIgfVxuICByZXR1cm4gZXhwci5zdGFydCA9PT0gc3RhcnRQb3MgJiYgZXhwci50eXBlID09PSBcIkFycm93RnVuY3Rpb25FeHByZXNzaW9uXCIgPyBleHByIDogdGhpcy5wYXJzZUV4cHJPcChleHByLCBzdGFydFBvcywgc3RhcnRMb2MsIC0xLCBub0luKVxufTtcblxuLy8gUGFyc2UgYmluYXJ5IG9wZXJhdG9ycyB3aXRoIHRoZSBvcGVyYXRvciBwcmVjZWRlbmNlIHBhcnNpbmdcbi8vIGFsZ29yaXRobS4gYGxlZnRgIGlzIHRoZSBsZWZ0LWhhbmQgc2lkZSBvZiB0aGUgb3BlcmF0b3IuXG4vLyBgbWluUHJlY2AgcHJvdmlkZXMgY29udGV4dCB0aGF0IGFsbG93cyB0aGUgZnVuY3Rpb24gdG8gc3RvcCBhbmRcbi8vIGRlZmVyIGZ1cnRoZXIgcGFyc2VyIHRvIG9uZSBvZiBpdHMgY2FsbGVycyB3aGVuIGl0IGVuY291bnRlcnMgYW5cbi8vIG9wZXJhdG9yIHRoYXQgaGFzIGEgbG93ZXIgcHJlY2VkZW5jZSB0aGFuIHRoZSBzZXQgaXQgaXMgcGFyc2luZy5cblxucHAkMy5wYXJzZUV4cHJPcCA9IGZ1bmN0aW9uKGxlZnQsIGxlZnRTdGFydFBvcywgbGVmdFN0YXJ0TG9jLCBtaW5QcmVjLCBub0luKSB7XG4gIHZhciBwcmVjID0gdGhpcy50eXBlLmJpbm9wO1xuICBpZiAocHJlYyAhPSBudWxsICYmICghbm9JbiB8fCB0aGlzLnR5cGUgIT09IHR5cGVzLl9pbikpIHtcbiAgICBpZiAocHJlYyA+IG1pblByZWMpIHtcbiAgICAgIHZhciBsb2dpY2FsID0gdGhpcy50eXBlID09PSB0eXBlcy5sb2dpY2FsT1IgfHwgdGhpcy50eXBlID09PSB0eXBlcy5sb2dpY2FsQU5EO1xuICAgICAgdmFyIG9wID0gdGhpcy52YWx1ZTtcbiAgICAgIHRoaXMubmV4dCgpO1xuICAgICAgdmFyIHN0YXJ0UG9zID0gdGhpcy5zdGFydCwgc3RhcnRMb2MgPSB0aGlzLnN0YXJ0TG9jO1xuICAgICAgdmFyIHJpZ2h0ID0gdGhpcy5wYXJzZUV4cHJPcCh0aGlzLnBhcnNlTWF5YmVVbmFyeShudWxsLCBmYWxzZSksIHN0YXJ0UG9zLCBzdGFydExvYywgcHJlYywgbm9Jbik7XG4gICAgICB2YXIgbm9kZSA9IHRoaXMuYnVpbGRCaW5hcnkobGVmdFN0YXJ0UG9zLCBsZWZ0U3RhcnRMb2MsIGxlZnQsIHJpZ2h0LCBvcCwgbG9naWNhbCk7XG4gICAgICByZXR1cm4gdGhpcy5wYXJzZUV4cHJPcChub2RlLCBsZWZ0U3RhcnRQb3MsIGxlZnRTdGFydExvYywgbWluUHJlYywgbm9JbilcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGxlZnRcbn07XG5cbnBwJDMuYnVpbGRCaW5hcnkgPSBmdW5jdGlvbihzdGFydFBvcywgc3RhcnRMb2MsIGxlZnQsIHJpZ2h0LCBvcCwgbG9naWNhbCkge1xuICB2YXIgbm9kZSA9IHRoaXMuc3RhcnROb2RlQXQoc3RhcnRQb3MsIHN0YXJ0TG9jKTtcbiAgbm9kZS5sZWZ0ID0gbGVmdDtcbiAgbm9kZS5vcGVyYXRvciA9IG9wO1xuICBub2RlLnJpZ2h0ID0gcmlnaHQ7XG4gIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgbG9naWNhbCA/IFwiTG9naWNhbEV4cHJlc3Npb25cIiA6IFwiQmluYXJ5RXhwcmVzc2lvblwiKVxufTtcblxuLy8gUGFyc2UgdW5hcnkgb3BlcmF0b3JzLCBib3RoIHByZWZpeCBhbmQgcG9zdGZpeC5cblxucHAkMy5wYXJzZU1heWJlVW5hcnkgPSBmdW5jdGlvbihyZWZEZXN0cnVjdHVyaW5nRXJyb3JzLCBzYXdVbmFyeSkge1xuICB2YXIgdGhpcyQxID0gdGhpcztcblxuICB2YXIgc3RhcnRQb3MgPSB0aGlzLnN0YXJ0LCBzdGFydExvYyA9IHRoaXMuc3RhcnRMb2MsIGV4cHI7XG4gIGlmICh0aGlzLmlzQ29udGV4dHVhbChcImF3YWl0XCIpICYmICh0aGlzLmluQXN5bmMgfHwgKCF0aGlzLmluRnVuY3Rpb24gJiYgdGhpcy5vcHRpb25zLmFsbG93QXdhaXRPdXRzaWRlRnVuY3Rpb24pKSkge1xuICAgIGV4cHIgPSB0aGlzLnBhcnNlQXdhaXQoKTtcbiAgICBzYXdVbmFyeSA9IHRydWU7XG4gIH0gZWxzZSBpZiAodGhpcy50eXBlLnByZWZpeCkge1xuICAgIHZhciBub2RlID0gdGhpcy5zdGFydE5vZGUoKSwgdXBkYXRlID0gdGhpcy50eXBlID09PSB0eXBlcy5pbmNEZWM7XG4gICAgbm9kZS5vcGVyYXRvciA9IHRoaXMudmFsdWU7XG4gICAgbm9kZS5wcmVmaXggPSB0cnVlO1xuICAgIHRoaXMubmV4dCgpO1xuICAgIG5vZGUuYXJndW1lbnQgPSB0aGlzLnBhcnNlTWF5YmVVbmFyeShudWxsLCB0cnVlKTtcbiAgICB0aGlzLmNoZWNrRXhwcmVzc2lvbkVycm9ycyhyZWZEZXN0cnVjdHVyaW5nRXJyb3JzLCB0cnVlKTtcbiAgICBpZiAodXBkYXRlKSB7IHRoaXMuY2hlY2tMVmFsKG5vZGUuYXJndW1lbnQpOyB9XG4gICAgZWxzZSBpZiAodGhpcy5zdHJpY3QgJiYgbm9kZS5vcGVyYXRvciA9PT0gXCJkZWxldGVcIiAmJlxuICAgICAgICAgICAgIG5vZGUuYXJndW1lbnQudHlwZSA9PT0gXCJJZGVudGlmaWVyXCIpXG4gICAgICB7IHRoaXMucmFpc2VSZWNvdmVyYWJsZShub2RlLnN0YXJ0LCBcIkRlbGV0aW5nIGxvY2FsIHZhcmlhYmxlIGluIHN0cmljdCBtb2RlXCIpOyB9XG4gICAgZWxzZSB7IHNhd1VuYXJ5ID0gdHJ1ZTsgfVxuICAgIGV4cHIgPSB0aGlzLmZpbmlzaE5vZGUobm9kZSwgdXBkYXRlID8gXCJVcGRhdGVFeHByZXNzaW9uXCIgOiBcIlVuYXJ5RXhwcmVzc2lvblwiKTtcbiAgfSBlbHNlIHtcbiAgICBleHByID0gdGhpcy5wYXJzZUV4cHJTdWJzY3JpcHRzKHJlZkRlc3RydWN0dXJpbmdFcnJvcnMpO1xuICAgIGlmICh0aGlzLmNoZWNrRXhwcmVzc2lvbkVycm9ycyhyZWZEZXN0cnVjdHVyaW5nRXJyb3JzKSkgeyByZXR1cm4gZXhwciB9XG4gICAgd2hpbGUgKHRoaXMudHlwZS5wb3N0Zml4ICYmICF0aGlzLmNhbkluc2VydFNlbWljb2xvbigpKSB7XG4gICAgICB2YXIgbm9kZSQxID0gdGhpcyQxLnN0YXJ0Tm9kZUF0KHN0YXJ0UG9zLCBzdGFydExvYyk7XG4gICAgICBub2RlJDEub3BlcmF0b3IgPSB0aGlzJDEudmFsdWU7XG4gICAgICBub2RlJDEucHJlZml4ID0gZmFsc2U7XG4gICAgICBub2RlJDEuYXJndW1lbnQgPSBleHByO1xuICAgICAgdGhpcyQxLmNoZWNrTFZhbChleHByKTtcbiAgICAgIHRoaXMkMS5uZXh0KCk7XG4gICAgICBleHByID0gdGhpcyQxLmZpbmlzaE5vZGUobm9kZSQxLCBcIlVwZGF0ZUV4cHJlc3Npb25cIik7XG4gICAgfVxuICB9XG5cbiAgaWYgKCFzYXdVbmFyeSAmJiB0aGlzLmVhdCh0eXBlcy5zdGFyc3RhcikpXG4gICAgeyByZXR1cm4gdGhpcy5idWlsZEJpbmFyeShzdGFydFBvcywgc3RhcnRMb2MsIGV4cHIsIHRoaXMucGFyc2VNYXliZVVuYXJ5KG51bGwsIGZhbHNlKSwgXCIqKlwiLCBmYWxzZSkgfVxuICBlbHNlXG4gICAgeyByZXR1cm4gZXhwciB9XG59O1xuXG4vLyBQYXJzZSBjYWxsLCBkb3QsIGFuZCBgW11gLXN1YnNjcmlwdCBleHByZXNzaW9ucy5cblxucHAkMy5wYXJzZUV4cHJTdWJzY3JpcHRzID0gZnVuY3Rpb24ocmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycykge1xuICB2YXIgc3RhcnRQb3MgPSB0aGlzLnN0YXJ0LCBzdGFydExvYyA9IHRoaXMuc3RhcnRMb2M7XG4gIHZhciBleHByID0gdGhpcy5wYXJzZUV4cHJBdG9tKHJlZkRlc3RydWN0dXJpbmdFcnJvcnMpO1xuICB2YXIgc2tpcEFycm93U3Vic2NyaXB0cyA9IGV4cHIudHlwZSA9PT0gXCJBcnJvd0Z1bmN0aW9uRXhwcmVzc2lvblwiICYmIHRoaXMuaW5wdXQuc2xpY2UodGhpcy5sYXN0VG9rU3RhcnQsIHRoaXMubGFzdFRva0VuZCkgIT09IFwiKVwiO1xuICBpZiAodGhpcy5jaGVja0V4cHJlc3Npb25FcnJvcnMocmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycykgfHwgc2tpcEFycm93U3Vic2NyaXB0cykgeyByZXR1cm4gZXhwciB9XG4gIHZhciByZXN1bHQgPSB0aGlzLnBhcnNlU3Vic2NyaXB0cyhleHByLCBzdGFydFBvcywgc3RhcnRMb2MpO1xuICBpZiAocmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycyAmJiByZXN1bHQudHlwZSA9PT0gXCJNZW1iZXJFeHByZXNzaW9uXCIpIHtcbiAgICBpZiAocmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycy5wYXJlbnRoZXNpemVkQXNzaWduID49IHJlc3VsdC5zdGFydCkgeyByZWZEZXN0cnVjdHVyaW5nRXJyb3JzLnBhcmVudGhlc2l6ZWRBc3NpZ24gPSAtMTsgfVxuICAgIGlmIChyZWZEZXN0cnVjdHVyaW5nRXJyb3JzLnBhcmVudGhlc2l6ZWRCaW5kID49IHJlc3VsdC5zdGFydCkgeyByZWZEZXN0cnVjdHVyaW5nRXJyb3JzLnBhcmVudGhlc2l6ZWRCaW5kID0gLTE7IH1cbiAgfVxuICByZXR1cm4gcmVzdWx0XG59O1xuXG5wcCQzLnBhcnNlU3Vic2NyaXB0cyA9IGZ1bmN0aW9uKGJhc2UsIHN0YXJ0UG9zLCBzdGFydExvYywgbm9DYWxscykge1xuICB2YXIgdGhpcyQxID0gdGhpcztcblxuICB2YXIgbWF5YmVBc3luY0Fycm93ID0gdGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uID49IDggJiYgYmFzZS50eXBlID09PSBcIklkZW50aWZpZXJcIiAmJiBiYXNlLm5hbWUgPT09IFwiYXN5bmNcIiAmJlxuICAgICAgdGhpcy5sYXN0VG9rRW5kID09PSBiYXNlLmVuZCAmJiAhdGhpcy5jYW5JbnNlcnRTZW1pY29sb24oKSAmJiB0aGlzLmlucHV0LnNsaWNlKGJhc2Uuc3RhcnQsIGJhc2UuZW5kKSA9PT0gXCJhc3luY1wiO1xuICB3aGlsZSAodHJ1ZSkge1xuICAgIHZhciBlbGVtZW50ID0gdGhpcyQxLnBhcnNlU3Vic2NyaXB0KGJhc2UsIHN0YXJ0UG9zLCBzdGFydExvYywgbm9DYWxscywgbWF5YmVBc3luY0Fycm93KTtcbiAgICBpZiAoZWxlbWVudCA9PT0gYmFzZSB8fCBlbGVtZW50LnR5cGUgPT09IFwiQXJyb3dGdW5jdGlvbkV4cHJlc3Npb25cIikgeyByZXR1cm4gZWxlbWVudCB9XG4gICAgYmFzZSA9IGVsZW1lbnQ7XG4gIH1cbn07XG5cbnBwJDMucGFyc2VTdWJzY3JpcHQgPSBmdW5jdGlvbihiYXNlLCBzdGFydFBvcywgc3RhcnRMb2MsIG5vQ2FsbHMsIG1heWJlQXN5bmNBcnJvdykge1xuICB2YXIgY29tcHV0ZWQgPSB0aGlzLmVhdCh0eXBlcy5icmFja2V0TCk7XG4gIGlmIChjb21wdXRlZCB8fCB0aGlzLmVhdCh0eXBlcy5kb3QpKSB7XG4gICAgdmFyIG5vZGUgPSB0aGlzLnN0YXJ0Tm9kZUF0KHN0YXJ0UG9zLCBzdGFydExvYyk7XG4gICAgbm9kZS5vYmplY3QgPSBiYXNlO1xuICAgIG5vZGUucHJvcGVydHkgPSBjb21wdXRlZCA/IHRoaXMucGFyc2VFeHByZXNzaW9uKCkgOiB0aGlzLnBhcnNlSWRlbnQodHJ1ZSk7XG4gICAgbm9kZS5jb21wdXRlZCA9ICEhY29tcHV0ZWQ7XG4gICAgaWYgKGNvbXB1dGVkKSB7IHRoaXMuZXhwZWN0KHR5cGVzLmJyYWNrZXRSKTsgfVxuICAgIGJhc2UgPSB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJNZW1iZXJFeHByZXNzaW9uXCIpO1xuICB9IGVsc2UgaWYgKCFub0NhbGxzICYmIHRoaXMuZWF0KHR5cGVzLnBhcmVuTCkpIHtcbiAgICB2YXIgcmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycyA9IG5ldyBEZXN0cnVjdHVyaW5nRXJyb3JzLCBvbGRZaWVsZFBvcyA9IHRoaXMueWllbGRQb3MsIG9sZEF3YWl0UG9zID0gdGhpcy5hd2FpdFBvcywgb2xkQXdhaXRJZGVudFBvcyA9IHRoaXMuYXdhaXRJZGVudFBvcztcbiAgICB0aGlzLnlpZWxkUG9zID0gMDtcbiAgICB0aGlzLmF3YWl0UG9zID0gMDtcbiAgICB0aGlzLmF3YWl0SWRlbnRQb3MgPSAwO1xuICAgIHZhciBleHByTGlzdCA9IHRoaXMucGFyc2VFeHByTGlzdCh0eXBlcy5wYXJlblIsIHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA+PSA4LCBmYWxzZSwgcmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycyk7XG4gICAgaWYgKG1heWJlQXN5bmNBcnJvdyAmJiAhdGhpcy5jYW5JbnNlcnRTZW1pY29sb24oKSAmJiB0aGlzLmVhdCh0eXBlcy5hcnJvdykpIHtcbiAgICAgIHRoaXMuY2hlY2tQYXR0ZXJuRXJyb3JzKHJlZkRlc3RydWN0dXJpbmdFcnJvcnMsIGZhbHNlKTtcbiAgICAgIHRoaXMuY2hlY2tZaWVsZEF3YWl0SW5EZWZhdWx0UGFyYW1zKCk7XG4gICAgICBpZiAodGhpcy5hd2FpdElkZW50UG9zID4gMClcbiAgICAgICAgeyB0aGlzLnJhaXNlKHRoaXMuYXdhaXRJZGVudFBvcywgXCJDYW5ub3QgdXNlICdhd2FpdCcgYXMgaWRlbnRpZmllciBpbnNpZGUgYW4gYXN5bmMgZnVuY3Rpb25cIik7IH1cbiAgICAgIHRoaXMueWllbGRQb3MgPSBvbGRZaWVsZFBvcztcbiAgICAgIHRoaXMuYXdhaXRQb3MgPSBvbGRBd2FpdFBvcztcbiAgICAgIHRoaXMuYXdhaXRJZGVudFBvcyA9IG9sZEF3YWl0SWRlbnRQb3M7XG4gICAgICByZXR1cm4gdGhpcy5wYXJzZUFycm93RXhwcmVzc2lvbih0aGlzLnN0YXJ0Tm9kZUF0KHN0YXJ0UG9zLCBzdGFydExvYyksIGV4cHJMaXN0LCB0cnVlKVxuICAgIH1cbiAgICB0aGlzLmNoZWNrRXhwcmVzc2lvbkVycm9ycyhyZWZEZXN0cnVjdHVyaW5nRXJyb3JzLCB0cnVlKTtcbiAgICB0aGlzLnlpZWxkUG9zID0gb2xkWWllbGRQb3MgfHwgdGhpcy55aWVsZFBvcztcbiAgICB0aGlzLmF3YWl0UG9zID0gb2xkQXdhaXRQb3MgfHwgdGhpcy5hd2FpdFBvcztcbiAgICB0aGlzLmF3YWl0SWRlbnRQb3MgPSBvbGRBd2FpdElkZW50UG9zIHx8IHRoaXMuYXdhaXRJZGVudFBvcztcbiAgICB2YXIgbm9kZSQxID0gdGhpcy5zdGFydE5vZGVBdChzdGFydFBvcywgc3RhcnRMb2MpO1xuICAgIG5vZGUkMS5jYWxsZWUgPSBiYXNlO1xuICAgIG5vZGUkMS5hcmd1bWVudHMgPSBleHByTGlzdDtcbiAgICBiYXNlID0gdGhpcy5maW5pc2hOb2RlKG5vZGUkMSwgXCJDYWxsRXhwcmVzc2lvblwiKTtcbiAgfSBlbHNlIGlmICh0aGlzLnR5cGUgPT09IHR5cGVzLmJhY2tRdW90ZSkge1xuICAgIHZhciBub2RlJDIgPSB0aGlzLnN0YXJ0Tm9kZUF0KHN0YXJ0UG9zLCBzdGFydExvYyk7XG4gICAgbm9kZSQyLnRhZyA9IGJhc2U7XG4gICAgbm9kZSQyLnF1YXNpID0gdGhpcy5wYXJzZVRlbXBsYXRlKHtpc1RhZ2dlZDogdHJ1ZX0pO1xuICAgIGJhc2UgPSB0aGlzLmZpbmlzaE5vZGUobm9kZSQyLCBcIlRhZ2dlZFRlbXBsYXRlRXhwcmVzc2lvblwiKTtcbiAgfVxuICByZXR1cm4gYmFzZVxufTtcblxuLy8gUGFyc2UgYW4gYXRvbWljIGV4cHJlc3Npb24g4oCUIGVpdGhlciBhIHNpbmdsZSB0b2tlbiB0aGF0IGlzIGFuXG4vLyBleHByZXNzaW9uLCBhbiBleHByZXNzaW9uIHN0YXJ0ZWQgYnkgYSBrZXl3b3JkIGxpa2UgYGZ1bmN0aW9uYCBvclxuLy8gYG5ld2AsIG9yIGFuIGV4cHJlc3Npb24gd3JhcHBlZCBpbiBwdW5jdHVhdGlvbiBsaWtlIGAoKWAsIGBbXWAsXG4vLyBvciBge31gLlxuXG5wcCQzLnBhcnNlRXhwckF0b20gPSBmdW5jdGlvbihyZWZEZXN0cnVjdHVyaW5nRXJyb3JzKSB7XG4gIC8vIElmIGEgZGl2aXNpb24gb3BlcmF0b3IgYXBwZWFycyBpbiBhbiBleHByZXNzaW9uIHBvc2l0aW9uLCB0aGVcbiAgLy8gdG9rZW5pemVyIGdvdCBjb25mdXNlZCwgYW5kIHdlIGZvcmNlIGl0IHRvIHJlYWQgYSByZWdleHAgaW5zdGVhZC5cbiAgaWYgKHRoaXMudHlwZSA9PT0gdHlwZXMuc2xhc2gpIHsgdGhpcy5yZWFkUmVnZXhwKCk7IH1cblxuICB2YXIgbm9kZSwgY2FuQmVBcnJvdyA9IHRoaXMucG90ZW50aWFsQXJyb3dBdCA9PT0gdGhpcy5zdGFydDtcbiAgc3dpdGNoICh0aGlzLnR5cGUpIHtcbiAgY2FzZSB0eXBlcy5fc3VwZXI6XG4gICAgaWYgKCF0aGlzLmFsbG93U3VwZXIpXG4gICAgICB7IHRoaXMucmFpc2UodGhpcy5zdGFydCwgXCInc3VwZXInIGtleXdvcmQgb3V0c2lkZSBhIG1ldGhvZFwiKTsgfVxuICAgIG5vZGUgPSB0aGlzLnN0YXJ0Tm9kZSgpO1xuICAgIHRoaXMubmV4dCgpO1xuICAgIGlmICh0aGlzLnR5cGUgPT09IHR5cGVzLnBhcmVuTCAmJiAhdGhpcy5hbGxvd0RpcmVjdFN1cGVyKVxuICAgICAgeyB0aGlzLnJhaXNlKG5vZGUuc3RhcnQsIFwic3VwZXIoKSBjYWxsIG91dHNpZGUgY29uc3RydWN0b3Igb2YgYSBzdWJjbGFzc1wiKTsgfVxuICAgIC8vIFRoZSBgc3VwZXJgIGtleXdvcmQgY2FuIGFwcGVhciBhdCBiZWxvdzpcbiAgICAvLyBTdXBlclByb3BlcnR5OlxuICAgIC8vICAgICBzdXBlciBbIEV4cHJlc3Npb24gXVxuICAgIC8vICAgICBzdXBlciAuIElkZW50aWZpZXJOYW1lXG4gICAgLy8gU3VwZXJDYWxsOlxuICAgIC8vICAgICBzdXBlciBBcmd1bWVudHNcbiAgICBpZiAodGhpcy50eXBlICE9PSB0eXBlcy5kb3QgJiYgdGhpcy50eXBlICE9PSB0eXBlcy5icmFja2V0TCAmJiB0aGlzLnR5cGUgIT09IHR5cGVzLnBhcmVuTClcbiAgICAgIHsgdGhpcy51bmV4cGVjdGVkKCk7IH1cbiAgICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiU3VwZXJcIilcblxuICBjYXNlIHR5cGVzLl90aGlzOlxuICAgIG5vZGUgPSB0aGlzLnN0YXJ0Tm9kZSgpO1xuICAgIHRoaXMubmV4dCgpO1xuICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJUaGlzRXhwcmVzc2lvblwiKVxuXG4gIGNhc2UgdHlwZXMubmFtZTpcbiAgICB2YXIgc3RhcnRQb3MgPSB0aGlzLnN0YXJ0LCBzdGFydExvYyA9IHRoaXMuc3RhcnRMb2MsIGNvbnRhaW5zRXNjID0gdGhpcy5jb250YWluc0VzYztcbiAgICB2YXIgaWQgPSB0aGlzLnBhcnNlSWRlbnQoZmFsc2UpO1xuICAgIGlmICh0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24gPj0gOCAmJiAhY29udGFpbnNFc2MgJiYgaWQubmFtZSA9PT0gXCJhc3luY1wiICYmICF0aGlzLmNhbkluc2VydFNlbWljb2xvbigpICYmIHRoaXMuZWF0KHR5cGVzLl9mdW5jdGlvbikpXG4gICAgICB7IHJldHVybiB0aGlzLnBhcnNlRnVuY3Rpb24odGhpcy5zdGFydE5vZGVBdChzdGFydFBvcywgc3RhcnRMb2MpLCAwLCBmYWxzZSwgdHJ1ZSkgfVxuICAgIGlmIChjYW5CZUFycm93ICYmICF0aGlzLmNhbkluc2VydFNlbWljb2xvbigpKSB7XG4gICAgICBpZiAodGhpcy5lYXQodHlwZXMuYXJyb3cpKVxuICAgICAgICB7IHJldHVybiB0aGlzLnBhcnNlQXJyb3dFeHByZXNzaW9uKHRoaXMuc3RhcnROb2RlQXQoc3RhcnRQb3MsIHN0YXJ0TG9jKSwgW2lkXSwgZmFsc2UpIH1cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24gPj0gOCAmJiBpZC5uYW1lID09PSBcImFzeW5jXCIgJiYgdGhpcy50eXBlID09PSB0eXBlcy5uYW1lICYmICFjb250YWluc0VzYykge1xuICAgICAgICBpZCA9IHRoaXMucGFyc2VJZGVudChmYWxzZSk7XG4gICAgICAgIGlmICh0aGlzLmNhbkluc2VydFNlbWljb2xvbigpIHx8ICF0aGlzLmVhdCh0eXBlcy5hcnJvdykpXG4gICAgICAgICAgeyB0aGlzLnVuZXhwZWN0ZWQoKTsgfVxuICAgICAgICByZXR1cm4gdGhpcy5wYXJzZUFycm93RXhwcmVzc2lvbih0aGlzLnN0YXJ0Tm9kZUF0KHN0YXJ0UG9zLCBzdGFydExvYyksIFtpZF0sIHRydWUpXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBpZFxuXG4gIGNhc2UgdHlwZXMucmVnZXhwOlxuICAgIHZhciB2YWx1ZSA9IHRoaXMudmFsdWU7XG4gICAgbm9kZSA9IHRoaXMucGFyc2VMaXRlcmFsKHZhbHVlLnZhbHVlKTtcbiAgICBub2RlLnJlZ2V4ID0ge3BhdHRlcm46IHZhbHVlLnBhdHRlcm4sIGZsYWdzOiB2YWx1ZS5mbGFnc307XG4gICAgcmV0dXJuIG5vZGVcblxuICBjYXNlIHR5cGVzLm51bTogY2FzZSB0eXBlcy5zdHJpbmc6XG4gICAgcmV0dXJuIHRoaXMucGFyc2VMaXRlcmFsKHRoaXMudmFsdWUpXG5cbiAgY2FzZSB0eXBlcy5fbnVsbDogY2FzZSB0eXBlcy5fdHJ1ZTogY2FzZSB0eXBlcy5fZmFsc2U6XG4gICAgbm9kZSA9IHRoaXMuc3RhcnROb2RlKCk7XG4gICAgbm9kZS52YWx1ZSA9IHRoaXMudHlwZSA9PT0gdHlwZXMuX251bGwgPyBudWxsIDogdGhpcy50eXBlID09PSB0eXBlcy5fdHJ1ZTtcbiAgICBub2RlLnJhdyA9IHRoaXMudHlwZS5rZXl3b3JkO1xuICAgIHRoaXMubmV4dCgpO1xuICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJMaXRlcmFsXCIpXG5cbiAgY2FzZSB0eXBlcy5wYXJlbkw6XG4gICAgdmFyIHN0YXJ0ID0gdGhpcy5zdGFydCwgZXhwciA9IHRoaXMucGFyc2VQYXJlbkFuZERpc3Rpbmd1aXNoRXhwcmVzc2lvbihjYW5CZUFycm93KTtcbiAgICBpZiAocmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycykge1xuICAgICAgaWYgKHJlZkRlc3RydWN0dXJpbmdFcnJvcnMucGFyZW50aGVzaXplZEFzc2lnbiA8IDAgJiYgIXRoaXMuaXNTaW1wbGVBc3NpZ25UYXJnZXQoZXhwcikpXG4gICAgICAgIHsgcmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycy5wYXJlbnRoZXNpemVkQXNzaWduID0gc3RhcnQ7IH1cbiAgICAgIGlmIChyZWZEZXN0cnVjdHVyaW5nRXJyb3JzLnBhcmVudGhlc2l6ZWRCaW5kIDwgMClcbiAgICAgICAgeyByZWZEZXN0cnVjdHVyaW5nRXJyb3JzLnBhcmVudGhlc2l6ZWRCaW5kID0gc3RhcnQ7IH1cbiAgICB9XG4gICAgcmV0dXJuIGV4cHJcblxuICBjYXNlIHR5cGVzLmJyYWNrZXRMOlxuICAgIG5vZGUgPSB0aGlzLnN0YXJ0Tm9kZSgpO1xuICAgIHRoaXMubmV4dCgpO1xuICAgIG5vZGUuZWxlbWVudHMgPSB0aGlzLnBhcnNlRXhwckxpc3QodHlwZXMuYnJhY2tldFIsIHRydWUsIHRydWUsIHJlZkRlc3RydWN0dXJpbmdFcnJvcnMpO1xuICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJBcnJheUV4cHJlc3Npb25cIilcblxuICBjYXNlIHR5cGVzLmJyYWNlTDpcbiAgICByZXR1cm4gdGhpcy5wYXJzZU9iaihmYWxzZSwgcmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycylcblxuICBjYXNlIHR5cGVzLl9mdW5jdGlvbjpcbiAgICBub2RlID0gdGhpcy5zdGFydE5vZGUoKTtcbiAgICB0aGlzLm5leHQoKTtcbiAgICByZXR1cm4gdGhpcy5wYXJzZUZ1bmN0aW9uKG5vZGUsIDApXG5cbiAgY2FzZSB0eXBlcy5fY2xhc3M6XG4gICAgcmV0dXJuIHRoaXMucGFyc2VDbGFzcyh0aGlzLnN0YXJ0Tm9kZSgpLCBmYWxzZSlcblxuICBjYXNlIHR5cGVzLl9uZXc6XG4gICAgcmV0dXJuIHRoaXMucGFyc2VOZXcoKVxuXG4gIGNhc2UgdHlwZXMuYmFja1F1b3RlOlxuICAgIHJldHVybiB0aGlzLnBhcnNlVGVtcGxhdGUoKVxuXG4gIGRlZmF1bHQ6XG4gICAgdGhpcy51bmV4cGVjdGVkKCk7XG4gIH1cbn07XG5cbnBwJDMucGFyc2VMaXRlcmFsID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgdmFyIG5vZGUgPSB0aGlzLnN0YXJ0Tm9kZSgpO1xuICBub2RlLnZhbHVlID0gdmFsdWU7XG4gIG5vZGUucmF3ID0gdGhpcy5pbnB1dC5zbGljZSh0aGlzLnN0YXJ0LCB0aGlzLmVuZCk7XG4gIHRoaXMubmV4dCgpO1xuICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiTGl0ZXJhbFwiKVxufTtcblxucHAkMy5wYXJzZVBhcmVuRXhwcmVzc2lvbiA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmV4cGVjdCh0eXBlcy5wYXJlbkwpO1xuICB2YXIgdmFsID0gdGhpcy5wYXJzZUV4cHJlc3Npb24oKTtcbiAgdGhpcy5leHBlY3QodHlwZXMucGFyZW5SKTtcbiAgcmV0dXJuIHZhbFxufTtcblxucHAkMy5wYXJzZVBhcmVuQW5kRGlzdGluZ3Vpc2hFeHByZXNzaW9uID0gZnVuY3Rpb24oY2FuQmVBcnJvdykge1xuICB2YXIgdGhpcyQxID0gdGhpcztcblxuICB2YXIgc3RhcnRQb3MgPSB0aGlzLnN0YXJ0LCBzdGFydExvYyA9IHRoaXMuc3RhcnRMb2MsIHZhbCwgYWxsb3dUcmFpbGluZ0NvbW1hID0gdGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uID49IDg7XG4gIGlmICh0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24gPj0gNikge1xuICAgIHRoaXMubmV4dCgpO1xuXG4gICAgdmFyIGlubmVyU3RhcnRQb3MgPSB0aGlzLnN0YXJ0LCBpbm5lclN0YXJ0TG9jID0gdGhpcy5zdGFydExvYztcbiAgICB2YXIgZXhwckxpc3QgPSBbXSwgZmlyc3QgPSB0cnVlLCBsYXN0SXNDb21tYSA9IGZhbHNlO1xuICAgIHZhciByZWZEZXN0cnVjdHVyaW5nRXJyb3JzID0gbmV3IERlc3RydWN0dXJpbmdFcnJvcnMsIG9sZFlpZWxkUG9zID0gdGhpcy55aWVsZFBvcywgb2xkQXdhaXRQb3MgPSB0aGlzLmF3YWl0UG9zLCBzcHJlYWRTdGFydDtcbiAgICB0aGlzLnlpZWxkUG9zID0gMDtcbiAgICB0aGlzLmF3YWl0UG9zID0gMDtcbiAgICAvLyBEbyBub3Qgc2F2ZSBhd2FpdElkZW50UG9zIHRvIGFsbG93IGNoZWNraW5nIGF3YWl0cyBuZXN0ZWQgaW4gcGFyYW1ldGVyc1xuICAgIHdoaWxlICh0aGlzLnR5cGUgIT09IHR5cGVzLnBhcmVuUikge1xuICAgICAgZmlyc3QgPyBmaXJzdCA9IGZhbHNlIDogdGhpcyQxLmV4cGVjdCh0eXBlcy5jb21tYSk7XG4gICAgICBpZiAoYWxsb3dUcmFpbGluZ0NvbW1hICYmIHRoaXMkMS5hZnRlclRyYWlsaW5nQ29tbWEodHlwZXMucGFyZW5SLCB0cnVlKSkge1xuICAgICAgICBsYXN0SXNDb21tYSA9IHRydWU7XG4gICAgICAgIGJyZWFrXG4gICAgICB9IGVsc2UgaWYgKHRoaXMkMS50eXBlID09PSB0eXBlcy5lbGxpcHNpcykge1xuICAgICAgICBzcHJlYWRTdGFydCA9IHRoaXMkMS5zdGFydDtcbiAgICAgICAgZXhwckxpc3QucHVzaCh0aGlzJDEucGFyc2VQYXJlbkl0ZW0odGhpcyQxLnBhcnNlUmVzdEJpbmRpbmcoKSkpO1xuICAgICAgICBpZiAodGhpcyQxLnR5cGUgPT09IHR5cGVzLmNvbW1hKSB7IHRoaXMkMS5yYWlzZSh0aGlzJDEuc3RhcnQsIFwiQ29tbWEgaXMgbm90IHBlcm1pdHRlZCBhZnRlciB0aGUgcmVzdCBlbGVtZW50XCIpOyB9XG4gICAgICAgIGJyZWFrXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBleHByTGlzdC5wdXNoKHRoaXMkMS5wYXJzZU1heWJlQXNzaWduKGZhbHNlLCByZWZEZXN0cnVjdHVyaW5nRXJyb3JzLCB0aGlzJDEucGFyc2VQYXJlbkl0ZW0pKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIGlubmVyRW5kUG9zID0gdGhpcy5zdGFydCwgaW5uZXJFbmRMb2MgPSB0aGlzLnN0YXJ0TG9jO1xuICAgIHRoaXMuZXhwZWN0KHR5cGVzLnBhcmVuUik7XG5cbiAgICBpZiAoY2FuQmVBcnJvdyAmJiAhdGhpcy5jYW5JbnNlcnRTZW1pY29sb24oKSAmJiB0aGlzLmVhdCh0eXBlcy5hcnJvdykpIHtcbiAgICAgIHRoaXMuY2hlY2tQYXR0ZXJuRXJyb3JzKHJlZkRlc3RydWN0dXJpbmdFcnJvcnMsIGZhbHNlKTtcbiAgICAgIHRoaXMuY2hlY2tZaWVsZEF3YWl0SW5EZWZhdWx0UGFyYW1zKCk7XG4gICAgICB0aGlzLnlpZWxkUG9zID0gb2xkWWllbGRQb3M7XG4gICAgICB0aGlzLmF3YWl0UG9zID0gb2xkQXdhaXRQb3M7XG4gICAgICByZXR1cm4gdGhpcy5wYXJzZVBhcmVuQXJyb3dMaXN0KHN0YXJ0UG9zLCBzdGFydExvYywgZXhwckxpc3QpXG4gICAgfVxuXG4gICAgaWYgKCFleHByTGlzdC5sZW5ndGggfHwgbGFzdElzQ29tbWEpIHsgdGhpcy51bmV4cGVjdGVkKHRoaXMubGFzdFRva1N0YXJ0KTsgfVxuICAgIGlmIChzcHJlYWRTdGFydCkgeyB0aGlzLnVuZXhwZWN0ZWQoc3ByZWFkU3RhcnQpOyB9XG4gICAgdGhpcy5jaGVja0V4cHJlc3Npb25FcnJvcnMocmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycywgdHJ1ZSk7XG4gICAgdGhpcy55aWVsZFBvcyA9IG9sZFlpZWxkUG9zIHx8IHRoaXMueWllbGRQb3M7XG4gICAgdGhpcy5hd2FpdFBvcyA9IG9sZEF3YWl0UG9zIHx8IHRoaXMuYXdhaXRQb3M7XG5cbiAgICBpZiAoZXhwckxpc3QubGVuZ3RoID4gMSkge1xuICAgICAgdmFsID0gdGhpcy5zdGFydE5vZGVBdChpbm5lclN0YXJ0UG9zLCBpbm5lclN0YXJ0TG9jKTtcbiAgICAgIHZhbC5leHByZXNzaW9ucyA9IGV4cHJMaXN0O1xuICAgICAgdGhpcy5maW5pc2hOb2RlQXQodmFsLCBcIlNlcXVlbmNlRXhwcmVzc2lvblwiLCBpbm5lckVuZFBvcywgaW5uZXJFbmRMb2MpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWwgPSBleHByTGlzdFswXTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFsID0gdGhpcy5wYXJzZVBhcmVuRXhwcmVzc2lvbigpO1xuICB9XG5cbiAgaWYgKHRoaXMub3B0aW9ucy5wcmVzZXJ2ZVBhcmVucykge1xuICAgIHZhciBwYXIgPSB0aGlzLnN0YXJ0Tm9kZUF0KHN0YXJ0UG9zLCBzdGFydExvYyk7XG4gICAgcGFyLmV4cHJlc3Npb24gPSB2YWw7XG4gICAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShwYXIsIFwiUGFyZW50aGVzaXplZEV4cHJlc3Npb25cIilcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdmFsXG4gIH1cbn07XG5cbnBwJDMucGFyc2VQYXJlbkl0ZW0gPSBmdW5jdGlvbihpdGVtKSB7XG4gIHJldHVybiBpdGVtXG59O1xuXG5wcCQzLnBhcnNlUGFyZW5BcnJvd0xpc3QgPSBmdW5jdGlvbihzdGFydFBvcywgc3RhcnRMb2MsIGV4cHJMaXN0KSB7XG4gIHJldHVybiB0aGlzLnBhcnNlQXJyb3dFeHByZXNzaW9uKHRoaXMuc3RhcnROb2RlQXQoc3RhcnRQb3MsIHN0YXJ0TG9jKSwgZXhwckxpc3QpXG59O1xuXG4vLyBOZXcncyBwcmVjZWRlbmNlIGlzIHNsaWdodGx5IHRyaWNreS4gSXQgbXVzdCBhbGxvdyBpdHMgYXJndW1lbnQgdG9cbi8vIGJlIGEgYFtdYCBvciBkb3Qgc3Vic2NyaXB0IGV4cHJlc3Npb24sIGJ1dCBub3QgYSBjYWxsIOKAlCBhdCBsZWFzdCxcbi8vIG5vdCB3aXRob3V0IHdyYXBwaW5nIGl0IGluIHBhcmVudGhlc2VzLiBUaHVzLCBpdCB1c2VzIHRoZSBub0NhbGxzXG4vLyBhcmd1bWVudCB0byBwYXJzZVN1YnNjcmlwdHMgdG8gcHJldmVudCBpdCBmcm9tIGNvbnN1bWluZyB0aGVcbi8vIGFyZ3VtZW50IGxpc3QuXG5cbnZhciBlbXB0eSQxID0gW107XG5cbnBwJDMucGFyc2VOZXcgPSBmdW5jdGlvbigpIHtcbiAgdmFyIG5vZGUgPSB0aGlzLnN0YXJ0Tm9kZSgpO1xuICB2YXIgbWV0YSA9IHRoaXMucGFyc2VJZGVudCh0cnVlKTtcbiAgaWYgKHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA+PSA2ICYmIHRoaXMuZWF0KHR5cGVzLmRvdCkpIHtcbiAgICBub2RlLm1ldGEgPSBtZXRhO1xuICAgIHZhciBjb250YWluc0VzYyA9IHRoaXMuY29udGFpbnNFc2M7XG4gICAgbm9kZS5wcm9wZXJ0eSA9IHRoaXMucGFyc2VJZGVudCh0cnVlKTtcbiAgICBpZiAobm9kZS5wcm9wZXJ0eS5uYW1lICE9PSBcInRhcmdldFwiIHx8IGNvbnRhaW5zRXNjKVxuICAgICAgeyB0aGlzLnJhaXNlUmVjb3ZlcmFibGUobm9kZS5wcm9wZXJ0eS5zdGFydCwgXCJUaGUgb25seSB2YWxpZCBtZXRhIHByb3BlcnR5IGZvciBuZXcgaXMgbmV3LnRhcmdldFwiKTsgfVxuICAgIGlmICghdGhpcy5pbk5vbkFycm93RnVuY3Rpb24oKSlcbiAgICAgIHsgdGhpcy5yYWlzZVJlY292ZXJhYmxlKG5vZGUuc3RhcnQsIFwibmV3LnRhcmdldCBjYW4gb25seSBiZSB1c2VkIGluIGZ1bmN0aW9uc1wiKTsgfVxuICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJNZXRhUHJvcGVydHlcIilcbiAgfVxuICB2YXIgc3RhcnRQb3MgPSB0aGlzLnN0YXJ0LCBzdGFydExvYyA9IHRoaXMuc3RhcnRMb2M7XG4gIG5vZGUuY2FsbGVlID0gdGhpcy5wYXJzZVN1YnNjcmlwdHModGhpcy5wYXJzZUV4cHJBdG9tKCksIHN0YXJ0UG9zLCBzdGFydExvYywgdHJ1ZSk7XG4gIGlmICh0aGlzLmVhdCh0eXBlcy5wYXJlbkwpKSB7IG5vZGUuYXJndW1lbnRzID0gdGhpcy5wYXJzZUV4cHJMaXN0KHR5cGVzLnBhcmVuUiwgdGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uID49IDgsIGZhbHNlKTsgfVxuICBlbHNlIHsgbm9kZS5hcmd1bWVudHMgPSBlbXB0eSQxOyB9XG4gIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJOZXdFeHByZXNzaW9uXCIpXG59O1xuXG4vLyBQYXJzZSB0ZW1wbGF0ZSBleHByZXNzaW9uLlxuXG5wcCQzLnBhcnNlVGVtcGxhdGVFbGVtZW50ID0gZnVuY3Rpb24ocmVmKSB7XG4gIHZhciBpc1RhZ2dlZCA9IHJlZi5pc1RhZ2dlZDtcblxuICB2YXIgZWxlbSA9IHRoaXMuc3RhcnROb2RlKCk7XG4gIGlmICh0aGlzLnR5cGUgPT09IHR5cGVzLmludmFsaWRUZW1wbGF0ZSkge1xuICAgIGlmICghaXNUYWdnZWQpIHtcbiAgICAgIHRoaXMucmFpc2VSZWNvdmVyYWJsZSh0aGlzLnN0YXJ0LCBcIkJhZCBlc2NhcGUgc2VxdWVuY2UgaW4gdW50YWdnZWQgdGVtcGxhdGUgbGl0ZXJhbFwiKTtcbiAgICB9XG4gICAgZWxlbS52YWx1ZSA9IHtcbiAgICAgIHJhdzogdGhpcy52YWx1ZSxcbiAgICAgIGNvb2tlZDogbnVsbFxuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgZWxlbS52YWx1ZSA9IHtcbiAgICAgIHJhdzogdGhpcy5pbnB1dC5zbGljZSh0aGlzLnN0YXJ0LCB0aGlzLmVuZCkucmVwbGFjZSgvXFxyXFxuPy9nLCBcIlxcblwiKSxcbiAgICAgIGNvb2tlZDogdGhpcy52YWx1ZVxuICAgIH07XG4gIH1cbiAgdGhpcy5uZXh0KCk7XG4gIGVsZW0udGFpbCA9IHRoaXMudHlwZSA9PT0gdHlwZXMuYmFja1F1b3RlO1xuICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKGVsZW0sIFwiVGVtcGxhdGVFbGVtZW50XCIpXG59O1xuXG5wcCQzLnBhcnNlVGVtcGxhdGUgPSBmdW5jdGlvbihyZWYpIHtcbiAgdmFyIHRoaXMkMSA9IHRoaXM7XG4gIGlmICggcmVmID09PSB2b2lkIDAgKSByZWYgPSB7fTtcbiAgdmFyIGlzVGFnZ2VkID0gcmVmLmlzVGFnZ2VkOyBpZiAoIGlzVGFnZ2VkID09PSB2b2lkIDAgKSBpc1RhZ2dlZCA9IGZhbHNlO1xuXG4gIHZhciBub2RlID0gdGhpcy5zdGFydE5vZGUoKTtcbiAgdGhpcy5uZXh0KCk7XG4gIG5vZGUuZXhwcmVzc2lvbnMgPSBbXTtcbiAgdmFyIGN1ckVsdCA9IHRoaXMucGFyc2VUZW1wbGF0ZUVsZW1lbnQoe2lzVGFnZ2VkOiBpc1RhZ2dlZH0pO1xuICBub2RlLnF1YXNpcyA9IFtjdXJFbHRdO1xuICB3aGlsZSAoIWN1ckVsdC50YWlsKSB7XG4gICAgaWYgKHRoaXMkMS50eXBlID09PSB0eXBlcy5lb2YpIHsgdGhpcyQxLnJhaXNlKHRoaXMkMS5wb3MsIFwiVW50ZXJtaW5hdGVkIHRlbXBsYXRlIGxpdGVyYWxcIik7IH1cbiAgICB0aGlzJDEuZXhwZWN0KHR5cGVzLmRvbGxhckJyYWNlTCk7XG4gICAgbm9kZS5leHByZXNzaW9ucy5wdXNoKHRoaXMkMS5wYXJzZUV4cHJlc3Npb24oKSk7XG4gICAgdGhpcyQxLmV4cGVjdCh0eXBlcy5icmFjZVIpO1xuICAgIG5vZGUucXVhc2lzLnB1c2goY3VyRWx0ID0gdGhpcyQxLnBhcnNlVGVtcGxhdGVFbGVtZW50KHtpc1RhZ2dlZDogaXNUYWdnZWR9KSk7XG4gIH1cbiAgdGhpcy5uZXh0KCk7XG4gIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJUZW1wbGF0ZUxpdGVyYWxcIilcbn07XG5cbnBwJDMuaXNBc3luY1Byb3AgPSBmdW5jdGlvbihwcm9wKSB7XG4gIHJldHVybiAhcHJvcC5jb21wdXRlZCAmJiBwcm9wLmtleS50eXBlID09PSBcIklkZW50aWZpZXJcIiAmJiBwcm9wLmtleS5uYW1lID09PSBcImFzeW5jXCIgJiZcbiAgICAodGhpcy50eXBlID09PSB0eXBlcy5uYW1lIHx8IHRoaXMudHlwZSA9PT0gdHlwZXMubnVtIHx8IHRoaXMudHlwZSA9PT0gdHlwZXMuc3RyaW5nIHx8IHRoaXMudHlwZSA9PT0gdHlwZXMuYnJhY2tldEwgfHwgdGhpcy50eXBlLmtleXdvcmQgfHwgKHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA+PSA5ICYmIHRoaXMudHlwZSA9PT0gdHlwZXMuc3RhcikpICYmXG4gICAgIWxpbmVCcmVhay50ZXN0KHRoaXMuaW5wdXQuc2xpY2UodGhpcy5sYXN0VG9rRW5kLCB0aGlzLnN0YXJ0KSlcbn07XG5cbi8vIFBhcnNlIGFuIG9iamVjdCBsaXRlcmFsIG9yIGJpbmRpbmcgcGF0dGVybi5cblxucHAkMy5wYXJzZU9iaiA9IGZ1bmN0aW9uKGlzUGF0dGVybiwgcmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycykge1xuICB2YXIgdGhpcyQxID0gdGhpcztcblxuICB2YXIgbm9kZSA9IHRoaXMuc3RhcnROb2RlKCksIGZpcnN0ID0gdHJ1ZSwgcHJvcEhhc2ggPSB7fTtcbiAgbm9kZS5wcm9wZXJ0aWVzID0gW107XG4gIHRoaXMubmV4dCgpO1xuICB3aGlsZSAoIXRoaXMuZWF0KHR5cGVzLmJyYWNlUikpIHtcbiAgICBpZiAoIWZpcnN0KSB7XG4gICAgICB0aGlzJDEuZXhwZWN0KHR5cGVzLmNvbW1hKTtcbiAgICAgIGlmICh0aGlzJDEuYWZ0ZXJUcmFpbGluZ0NvbW1hKHR5cGVzLmJyYWNlUikpIHsgYnJlYWsgfVxuICAgIH0gZWxzZSB7IGZpcnN0ID0gZmFsc2U7IH1cblxuICAgIHZhciBwcm9wID0gdGhpcyQxLnBhcnNlUHJvcGVydHkoaXNQYXR0ZXJuLCByZWZEZXN0cnVjdHVyaW5nRXJyb3JzKTtcbiAgICBpZiAoIWlzUGF0dGVybikgeyB0aGlzJDEuY2hlY2tQcm9wQ2xhc2gocHJvcCwgcHJvcEhhc2gsIHJlZkRlc3RydWN0dXJpbmdFcnJvcnMpOyB9XG4gICAgbm9kZS5wcm9wZXJ0aWVzLnB1c2gocHJvcCk7XG4gIH1cbiAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBpc1BhdHRlcm4gPyBcIk9iamVjdFBhdHRlcm5cIiA6IFwiT2JqZWN0RXhwcmVzc2lvblwiKVxufTtcblxucHAkMy5wYXJzZVByb3BlcnR5ID0gZnVuY3Rpb24oaXNQYXR0ZXJuLCByZWZEZXN0cnVjdHVyaW5nRXJyb3JzKSB7XG4gIHZhciBwcm9wID0gdGhpcy5zdGFydE5vZGUoKSwgaXNHZW5lcmF0b3IsIGlzQXN5bmMsIHN0YXJ0UG9zLCBzdGFydExvYztcbiAgaWYgKHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA+PSA5ICYmIHRoaXMuZWF0KHR5cGVzLmVsbGlwc2lzKSkge1xuICAgIGlmIChpc1BhdHRlcm4pIHtcbiAgICAgIHByb3AuYXJndW1lbnQgPSB0aGlzLnBhcnNlSWRlbnQoZmFsc2UpO1xuICAgICAgaWYgKHRoaXMudHlwZSA9PT0gdHlwZXMuY29tbWEpIHtcbiAgICAgICAgdGhpcy5yYWlzZSh0aGlzLnN0YXJ0LCBcIkNvbW1hIGlzIG5vdCBwZXJtaXR0ZWQgYWZ0ZXIgdGhlIHJlc3QgZWxlbWVudFwiKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUocHJvcCwgXCJSZXN0RWxlbWVudFwiKVxuICAgIH1cbiAgICAvLyBUbyBkaXNhbGxvdyBwYXJlbnRoZXNpemVkIGlkZW50aWZpZXIgdmlhIGB0aGlzLnRvQXNzaWduYWJsZSgpYC5cbiAgICBpZiAodGhpcy50eXBlID09PSB0eXBlcy5wYXJlbkwgJiYgcmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycykge1xuICAgICAgaWYgKHJlZkRlc3RydWN0dXJpbmdFcnJvcnMucGFyZW50aGVzaXplZEFzc2lnbiA8IDApIHtcbiAgICAgICAgcmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycy5wYXJlbnRoZXNpemVkQXNzaWduID0gdGhpcy5zdGFydDtcbiAgICAgIH1cbiAgICAgIGlmIChyZWZEZXN0cnVjdHVyaW5nRXJyb3JzLnBhcmVudGhlc2l6ZWRCaW5kIDwgMCkge1xuICAgICAgICByZWZEZXN0cnVjdHVyaW5nRXJyb3JzLnBhcmVudGhlc2l6ZWRCaW5kID0gdGhpcy5zdGFydDtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gUGFyc2UgYXJndW1lbnQuXG4gICAgcHJvcC5hcmd1bWVudCA9IHRoaXMucGFyc2VNYXliZUFzc2lnbihmYWxzZSwgcmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycyk7XG4gICAgLy8gVG8gZGlzYWxsb3cgdHJhaWxpbmcgY29tbWEgdmlhIGB0aGlzLnRvQXNzaWduYWJsZSgpYC5cbiAgICBpZiAodGhpcy50eXBlID09PSB0eXBlcy5jb21tYSAmJiByZWZEZXN0cnVjdHVyaW5nRXJyb3JzICYmIHJlZkRlc3RydWN0dXJpbmdFcnJvcnMudHJhaWxpbmdDb21tYSA8IDApIHtcbiAgICAgIHJlZkRlc3RydWN0dXJpbmdFcnJvcnMudHJhaWxpbmdDb21tYSA9IHRoaXMuc3RhcnQ7XG4gICAgfVxuICAgIC8vIEZpbmlzaFxuICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUocHJvcCwgXCJTcHJlYWRFbGVtZW50XCIpXG4gIH1cbiAgaWYgKHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA+PSA2KSB7XG4gICAgcHJvcC5tZXRob2QgPSBmYWxzZTtcbiAgICBwcm9wLnNob3J0aGFuZCA9IGZhbHNlO1xuICAgIGlmIChpc1BhdHRlcm4gfHwgcmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycykge1xuICAgICAgc3RhcnRQb3MgPSB0aGlzLnN0YXJ0O1xuICAgICAgc3RhcnRMb2MgPSB0aGlzLnN0YXJ0TG9jO1xuICAgIH1cbiAgICBpZiAoIWlzUGF0dGVybilcbiAgICAgIHsgaXNHZW5lcmF0b3IgPSB0aGlzLmVhdCh0eXBlcy5zdGFyKTsgfVxuICB9XG4gIHZhciBjb250YWluc0VzYyA9IHRoaXMuY29udGFpbnNFc2M7XG4gIHRoaXMucGFyc2VQcm9wZXJ0eU5hbWUocHJvcCk7XG4gIGlmICghaXNQYXR0ZXJuICYmICFjb250YWluc0VzYyAmJiB0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24gPj0gOCAmJiAhaXNHZW5lcmF0b3IgJiYgdGhpcy5pc0FzeW5jUHJvcChwcm9wKSkge1xuICAgIGlzQXN5bmMgPSB0cnVlO1xuICAgIGlzR2VuZXJhdG9yID0gdGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uID49IDkgJiYgdGhpcy5lYXQodHlwZXMuc3Rhcik7XG4gICAgdGhpcy5wYXJzZVByb3BlcnR5TmFtZShwcm9wLCByZWZEZXN0cnVjdHVyaW5nRXJyb3JzKTtcbiAgfSBlbHNlIHtcbiAgICBpc0FzeW5jID0gZmFsc2U7XG4gIH1cbiAgdGhpcy5wYXJzZVByb3BlcnR5VmFsdWUocHJvcCwgaXNQYXR0ZXJuLCBpc0dlbmVyYXRvciwgaXNBc3luYywgc3RhcnRQb3MsIHN0YXJ0TG9jLCByZWZEZXN0cnVjdHVyaW5nRXJyb3JzLCBjb250YWluc0VzYyk7XG4gIHJldHVybiB0aGlzLmZpbmlzaE5vZGUocHJvcCwgXCJQcm9wZXJ0eVwiKVxufTtcblxucHAkMy5wYXJzZVByb3BlcnR5VmFsdWUgPSBmdW5jdGlvbihwcm9wLCBpc1BhdHRlcm4sIGlzR2VuZXJhdG9yLCBpc0FzeW5jLCBzdGFydFBvcywgc3RhcnRMb2MsIHJlZkRlc3RydWN0dXJpbmdFcnJvcnMsIGNvbnRhaW5zRXNjKSB7XG4gIGlmICgoaXNHZW5lcmF0b3IgfHwgaXNBc3luYykgJiYgdGhpcy50eXBlID09PSB0eXBlcy5jb2xvbilcbiAgICB7IHRoaXMudW5leHBlY3RlZCgpOyB9XG5cbiAgaWYgKHRoaXMuZWF0KHR5cGVzLmNvbG9uKSkge1xuICAgIHByb3AudmFsdWUgPSBpc1BhdHRlcm4gPyB0aGlzLnBhcnNlTWF5YmVEZWZhdWx0KHRoaXMuc3RhcnQsIHRoaXMuc3RhcnRMb2MpIDogdGhpcy5wYXJzZU1heWJlQXNzaWduKGZhbHNlLCByZWZEZXN0cnVjdHVyaW5nRXJyb3JzKTtcbiAgICBwcm9wLmtpbmQgPSBcImluaXRcIjtcbiAgfSBlbHNlIGlmICh0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24gPj0gNiAmJiB0aGlzLnR5cGUgPT09IHR5cGVzLnBhcmVuTCkge1xuICAgIGlmIChpc1BhdHRlcm4pIHsgdGhpcy51bmV4cGVjdGVkKCk7IH1cbiAgICBwcm9wLmtpbmQgPSBcImluaXRcIjtcbiAgICBwcm9wLm1ldGhvZCA9IHRydWU7XG4gICAgcHJvcC52YWx1ZSA9IHRoaXMucGFyc2VNZXRob2QoaXNHZW5lcmF0b3IsIGlzQXN5bmMpO1xuICB9IGVsc2UgaWYgKCFpc1BhdHRlcm4gJiYgIWNvbnRhaW5zRXNjICYmXG4gICAgICAgICAgICAgdGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uID49IDUgJiYgIXByb3AuY29tcHV0ZWQgJiYgcHJvcC5rZXkudHlwZSA9PT0gXCJJZGVudGlmaWVyXCIgJiZcbiAgICAgICAgICAgICAocHJvcC5rZXkubmFtZSA9PT0gXCJnZXRcIiB8fCBwcm9wLmtleS5uYW1lID09PSBcInNldFwiKSAmJlxuICAgICAgICAgICAgICh0aGlzLnR5cGUgIT09IHR5cGVzLmNvbW1hICYmIHRoaXMudHlwZSAhPT0gdHlwZXMuYnJhY2VSKSkge1xuICAgIGlmIChpc0dlbmVyYXRvciB8fCBpc0FzeW5jKSB7IHRoaXMudW5leHBlY3RlZCgpOyB9XG4gICAgcHJvcC5raW5kID0gcHJvcC5rZXkubmFtZTtcbiAgICB0aGlzLnBhcnNlUHJvcGVydHlOYW1lKHByb3ApO1xuICAgIHByb3AudmFsdWUgPSB0aGlzLnBhcnNlTWV0aG9kKGZhbHNlKTtcbiAgICB2YXIgcGFyYW1Db3VudCA9IHByb3Aua2luZCA9PT0gXCJnZXRcIiA/IDAgOiAxO1xuICAgIGlmIChwcm9wLnZhbHVlLnBhcmFtcy5sZW5ndGggIT09IHBhcmFtQ291bnQpIHtcbiAgICAgIHZhciBzdGFydCA9IHByb3AudmFsdWUuc3RhcnQ7XG4gICAgICBpZiAocHJvcC5raW5kID09PSBcImdldFwiKVxuICAgICAgICB7IHRoaXMucmFpc2VSZWNvdmVyYWJsZShzdGFydCwgXCJnZXR0ZXIgc2hvdWxkIGhhdmUgbm8gcGFyYW1zXCIpOyB9XG4gICAgICBlbHNlXG4gICAgICAgIHsgdGhpcy5yYWlzZVJlY292ZXJhYmxlKHN0YXJ0LCBcInNldHRlciBzaG91bGQgaGF2ZSBleGFjdGx5IG9uZSBwYXJhbVwiKTsgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAocHJvcC5raW5kID09PSBcInNldFwiICYmIHByb3AudmFsdWUucGFyYW1zWzBdLnR5cGUgPT09IFwiUmVzdEVsZW1lbnRcIilcbiAgICAgICAgeyB0aGlzLnJhaXNlUmVjb3ZlcmFibGUocHJvcC52YWx1ZS5wYXJhbXNbMF0uc3RhcnQsIFwiU2V0dGVyIGNhbm5vdCB1c2UgcmVzdCBwYXJhbXNcIik7IH1cbiAgICB9XG4gIH0gZWxzZSBpZiAodGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uID49IDYgJiYgIXByb3AuY29tcHV0ZWQgJiYgcHJvcC5rZXkudHlwZSA9PT0gXCJJZGVudGlmaWVyXCIpIHtcbiAgICBpZiAoaXNHZW5lcmF0b3IgfHwgaXNBc3luYykgeyB0aGlzLnVuZXhwZWN0ZWQoKTsgfVxuICAgIHRoaXMuY2hlY2tVbnJlc2VydmVkKHByb3Aua2V5KTtcbiAgICBpZiAocHJvcC5rZXkubmFtZSA9PT0gXCJhd2FpdFwiICYmICF0aGlzLmF3YWl0SWRlbnRQb3MpXG4gICAgICB7IHRoaXMuYXdhaXRJZGVudFBvcyA9IHN0YXJ0UG9zOyB9XG4gICAgcHJvcC5raW5kID0gXCJpbml0XCI7XG4gICAgaWYgKGlzUGF0dGVybikge1xuICAgICAgcHJvcC52YWx1ZSA9IHRoaXMucGFyc2VNYXliZURlZmF1bHQoc3RhcnRQb3MsIHN0YXJ0TG9jLCBwcm9wLmtleSk7XG4gICAgfSBlbHNlIGlmICh0aGlzLnR5cGUgPT09IHR5cGVzLmVxICYmIHJlZkRlc3RydWN0dXJpbmdFcnJvcnMpIHtcbiAgICAgIGlmIChyZWZEZXN0cnVjdHVyaW5nRXJyb3JzLnNob3J0aGFuZEFzc2lnbiA8IDApXG4gICAgICAgIHsgcmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycy5zaG9ydGhhbmRBc3NpZ24gPSB0aGlzLnN0YXJ0OyB9XG4gICAgICBwcm9wLnZhbHVlID0gdGhpcy5wYXJzZU1heWJlRGVmYXVsdChzdGFydFBvcywgc3RhcnRMb2MsIHByb3Aua2V5KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcHJvcC52YWx1ZSA9IHByb3Aua2V5O1xuICAgIH1cbiAgICBwcm9wLnNob3J0aGFuZCA9IHRydWU7XG4gIH0gZWxzZSB7IHRoaXMudW5leHBlY3RlZCgpOyB9XG59O1xuXG5wcCQzLnBhcnNlUHJvcGVydHlOYW1lID0gZnVuY3Rpb24ocHJvcCkge1xuICBpZiAodGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uID49IDYpIHtcbiAgICBpZiAodGhpcy5lYXQodHlwZXMuYnJhY2tldEwpKSB7XG4gICAgICBwcm9wLmNvbXB1dGVkID0gdHJ1ZTtcbiAgICAgIHByb3Aua2V5ID0gdGhpcy5wYXJzZU1heWJlQXNzaWduKCk7XG4gICAgICB0aGlzLmV4cGVjdCh0eXBlcy5icmFja2V0Uik7XG4gICAgICByZXR1cm4gcHJvcC5rZXlcbiAgICB9IGVsc2Uge1xuICAgICAgcHJvcC5jb21wdXRlZCA9IGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcHJvcC5rZXkgPSB0aGlzLnR5cGUgPT09IHR5cGVzLm51bSB8fCB0aGlzLnR5cGUgPT09IHR5cGVzLnN0cmluZyA/IHRoaXMucGFyc2VFeHByQXRvbSgpIDogdGhpcy5wYXJzZUlkZW50KHRydWUpXG59O1xuXG4vLyBJbml0aWFsaXplIGVtcHR5IGZ1bmN0aW9uIG5vZGUuXG5cbnBwJDMuaW5pdEZ1bmN0aW9uID0gZnVuY3Rpb24obm9kZSkge1xuICBub2RlLmlkID0gbnVsbDtcbiAgaWYgKHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA+PSA2KSB7IG5vZGUuZ2VuZXJhdG9yID0gbm9kZS5leHByZXNzaW9uID0gZmFsc2U7IH1cbiAgaWYgKHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA+PSA4KSB7IG5vZGUuYXN5bmMgPSBmYWxzZTsgfVxufTtcblxuLy8gUGFyc2Ugb2JqZWN0IG9yIGNsYXNzIG1ldGhvZC5cblxucHAkMy5wYXJzZU1ldGhvZCA9IGZ1bmN0aW9uKGlzR2VuZXJhdG9yLCBpc0FzeW5jLCBhbGxvd0RpcmVjdFN1cGVyKSB7XG4gIHZhciBub2RlID0gdGhpcy5zdGFydE5vZGUoKSwgb2xkWWllbGRQb3MgPSB0aGlzLnlpZWxkUG9zLCBvbGRBd2FpdFBvcyA9IHRoaXMuYXdhaXRQb3MsIG9sZEF3YWl0SWRlbnRQb3MgPSB0aGlzLmF3YWl0SWRlbnRQb3M7XG5cbiAgdGhpcy5pbml0RnVuY3Rpb24obm9kZSk7XG4gIGlmICh0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24gPj0gNilcbiAgICB7IG5vZGUuZ2VuZXJhdG9yID0gaXNHZW5lcmF0b3I7IH1cbiAgaWYgKHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA+PSA4KVxuICAgIHsgbm9kZS5hc3luYyA9ICEhaXNBc3luYzsgfVxuXG4gIHRoaXMueWllbGRQb3MgPSAwO1xuICB0aGlzLmF3YWl0UG9zID0gMDtcbiAgdGhpcy5hd2FpdElkZW50UG9zID0gMDtcbiAgdGhpcy5lbnRlclNjb3BlKGZ1bmN0aW9uRmxhZ3MoaXNBc3luYywgbm9kZS5nZW5lcmF0b3IpIHwgU0NPUEVfU1VQRVIgfCAoYWxsb3dEaXJlY3RTdXBlciA/IFNDT1BFX0RJUkVDVF9TVVBFUiA6IDApKTtcblxuICB0aGlzLmV4cGVjdCh0eXBlcy5wYXJlbkwpO1xuICBub2RlLnBhcmFtcyA9IHRoaXMucGFyc2VCaW5kaW5nTGlzdCh0eXBlcy5wYXJlblIsIGZhbHNlLCB0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24gPj0gOCk7XG4gIHRoaXMuY2hlY2tZaWVsZEF3YWl0SW5EZWZhdWx0UGFyYW1zKCk7XG4gIHRoaXMucGFyc2VGdW5jdGlvbkJvZHkobm9kZSwgZmFsc2UsIHRydWUpO1xuXG4gIHRoaXMueWllbGRQb3MgPSBvbGRZaWVsZFBvcztcbiAgdGhpcy5hd2FpdFBvcyA9IG9sZEF3YWl0UG9zO1xuICB0aGlzLmF3YWl0SWRlbnRQb3MgPSBvbGRBd2FpdElkZW50UG9zO1xuICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiRnVuY3Rpb25FeHByZXNzaW9uXCIpXG59O1xuXG4vLyBQYXJzZSBhcnJvdyBmdW5jdGlvbiBleHByZXNzaW9uIHdpdGggZ2l2ZW4gcGFyYW1ldGVycy5cblxucHAkMy5wYXJzZUFycm93RXhwcmVzc2lvbiA9IGZ1bmN0aW9uKG5vZGUsIHBhcmFtcywgaXNBc3luYykge1xuICB2YXIgb2xkWWllbGRQb3MgPSB0aGlzLnlpZWxkUG9zLCBvbGRBd2FpdFBvcyA9IHRoaXMuYXdhaXRQb3MsIG9sZEF3YWl0SWRlbnRQb3MgPSB0aGlzLmF3YWl0SWRlbnRQb3M7XG5cbiAgdGhpcy5lbnRlclNjb3BlKGZ1bmN0aW9uRmxhZ3MoaXNBc3luYywgZmFsc2UpIHwgU0NPUEVfQVJST1cpO1xuICB0aGlzLmluaXRGdW5jdGlvbihub2RlKTtcbiAgaWYgKHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA+PSA4KSB7IG5vZGUuYXN5bmMgPSAhIWlzQXN5bmM7IH1cblxuICB0aGlzLnlpZWxkUG9zID0gMDtcbiAgdGhpcy5hd2FpdFBvcyA9IDA7XG4gIHRoaXMuYXdhaXRJZGVudFBvcyA9IDA7XG5cbiAgbm9kZS5wYXJhbXMgPSB0aGlzLnRvQXNzaWduYWJsZUxpc3QocGFyYW1zLCB0cnVlKTtcbiAgdGhpcy5wYXJzZUZ1bmN0aW9uQm9keShub2RlLCB0cnVlLCBmYWxzZSk7XG5cbiAgdGhpcy55aWVsZFBvcyA9IG9sZFlpZWxkUG9zO1xuICB0aGlzLmF3YWl0UG9zID0gb2xkQXdhaXRQb3M7XG4gIHRoaXMuYXdhaXRJZGVudFBvcyA9IG9sZEF3YWl0SWRlbnRQb3M7XG4gIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJBcnJvd0Z1bmN0aW9uRXhwcmVzc2lvblwiKVxufTtcblxuLy8gUGFyc2UgZnVuY3Rpb24gYm9keSBhbmQgY2hlY2sgcGFyYW1ldGVycy5cblxucHAkMy5wYXJzZUZ1bmN0aW9uQm9keSA9IGZ1bmN0aW9uKG5vZGUsIGlzQXJyb3dGdW5jdGlvbiwgaXNNZXRob2QpIHtcbiAgdmFyIGlzRXhwcmVzc2lvbiA9IGlzQXJyb3dGdW5jdGlvbiAmJiB0aGlzLnR5cGUgIT09IHR5cGVzLmJyYWNlTDtcbiAgdmFyIG9sZFN0cmljdCA9IHRoaXMuc3RyaWN0LCB1c2VTdHJpY3QgPSBmYWxzZTtcblxuICBpZiAoaXNFeHByZXNzaW9uKSB7XG4gICAgbm9kZS5ib2R5ID0gdGhpcy5wYXJzZU1heWJlQXNzaWduKCk7XG4gICAgbm9kZS5leHByZXNzaW9uID0gdHJ1ZTtcbiAgICB0aGlzLmNoZWNrUGFyYW1zKG5vZGUsIGZhbHNlKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgbm9uU2ltcGxlID0gdGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uID49IDcgJiYgIXRoaXMuaXNTaW1wbGVQYXJhbUxpc3Qobm9kZS5wYXJhbXMpO1xuICAgIGlmICghb2xkU3RyaWN0IHx8IG5vblNpbXBsZSkge1xuICAgICAgdXNlU3RyaWN0ID0gdGhpcy5zdHJpY3REaXJlY3RpdmUodGhpcy5lbmQpO1xuICAgICAgLy8gSWYgdGhpcyBpcyBhIHN0cmljdCBtb2RlIGZ1bmN0aW9uLCB2ZXJpZnkgdGhhdCBhcmd1bWVudCBuYW1lc1xuICAgICAgLy8gYXJlIG5vdCByZXBlYXRlZCwgYW5kIGl0IGRvZXMgbm90IHRyeSB0byBiaW5kIHRoZSB3b3JkcyBgZXZhbGBcbiAgICAgIC8vIG9yIGBhcmd1bWVudHNgLlxuICAgICAgaWYgKHVzZVN0cmljdCAmJiBub25TaW1wbGUpXG4gICAgICAgIHsgdGhpcy5yYWlzZVJlY292ZXJhYmxlKG5vZGUuc3RhcnQsIFwiSWxsZWdhbCAndXNlIHN0cmljdCcgZGlyZWN0aXZlIGluIGZ1bmN0aW9uIHdpdGggbm9uLXNpbXBsZSBwYXJhbWV0ZXIgbGlzdFwiKTsgfVxuICAgIH1cbiAgICAvLyBTdGFydCBhIG5ldyBzY29wZSB3aXRoIHJlZ2FyZCB0byBsYWJlbHMgYW5kIHRoZSBgaW5GdW5jdGlvbmBcbiAgICAvLyBmbGFnIChyZXN0b3JlIHRoZW0gdG8gdGhlaXIgb2xkIHZhbHVlIGFmdGVyd2FyZHMpLlxuICAgIHZhciBvbGRMYWJlbHMgPSB0aGlzLmxhYmVscztcbiAgICB0aGlzLmxhYmVscyA9IFtdO1xuICAgIGlmICh1c2VTdHJpY3QpIHsgdGhpcy5zdHJpY3QgPSB0cnVlOyB9XG5cbiAgICAvLyBBZGQgdGhlIHBhcmFtcyB0byB2YXJEZWNsYXJlZE5hbWVzIHRvIGVuc3VyZSB0aGF0IGFuIGVycm9yIGlzIHRocm93blxuICAgIC8vIGlmIGEgbGV0L2NvbnN0IGRlY2xhcmF0aW9uIGluIHRoZSBmdW5jdGlvbiBjbGFzaGVzIHdpdGggb25lIG9mIHRoZSBwYXJhbXMuXG4gICAgdGhpcy5jaGVja1BhcmFtcyhub2RlLCAhb2xkU3RyaWN0ICYmICF1c2VTdHJpY3QgJiYgIWlzQXJyb3dGdW5jdGlvbiAmJiAhaXNNZXRob2QgJiYgdGhpcy5pc1NpbXBsZVBhcmFtTGlzdChub2RlLnBhcmFtcykpO1xuICAgIG5vZGUuYm9keSA9IHRoaXMucGFyc2VCbG9jayhmYWxzZSk7XG4gICAgbm9kZS5leHByZXNzaW9uID0gZmFsc2U7XG4gICAgdGhpcy5hZGFwdERpcmVjdGl2ZVByb2xvZ3VlKG5vZGUuYm9keS5ib2R5KTtcbiAgICB0aGlzLmxhYmVscyA9IG9sZExhYmVscztcbiAgfVxuICB0aGlzLmV4aXRTY29wZSgpO1xuXG4gIC8vIEVuc3VyZSB0aGUgZnVuY3Rpb24gbmFtZSBpc24ndCBhIGZvcmJpZGRlbiBpZGVudGlmaWVyIGluIHN0cmljdCBtb2RlLCBlLmcuICdldmFsJ1xuICBpZiAodGhpcy5zdHJpY3QgJiYgbm9kZS5pZCkgeyB0aGlzLmNoZWNrTFZhbChub2RlLmlkLCBCSU5EX09VVFNJREUpOyB9XG4gIHRoaXMuc3RyaWN0ID0gb2xkU3RyaWN0O1xufTtcblxucHAkMy5pc1NpbXBsZVBhcmFtTGlzdCA9IGZ1bmN0aW9uKHBhcmFtcykge1xuICBmb3IgKHZhciBpID0gMCwgbGlzdCA9IHBhcmFtczsgaSA8IGxpc3QubGVuZ3RoOyBpICs9IDEpXG4gICAge1xuICAgIHZhciBwYXJhbSA9IGxpc3RbaV07XG5cbiAgICBpZiAocGFyYW0udHlwZSAhPT0gXCJJZGVudGlmaWVyXCIpIHsgcmV0dXJuIGZhbHNlXG4gIH0gfVxuICByZXR1cm4gdHJ1ZVxufTtcblxuLy8gQ2hlY2tzIGZ1bmN0aW9uIHBhcmFtcyBmb3IgdmFyaW91cyBkaXNhbGxvd2VkIHBhdHRlcm5zIHN1Y2ggYXMgdXNpbmcgXCJldmFsXCJcbi8vIG9yIFwiYXJndW1lbnRzXCIgYW5kIGR1cGxpY2F0ZSBwYXJhbWV0ZXJzLlxuXG5wcCQzLmNoZWNrUGFyYW1zID0gZnVuY3Rpb24obm9kZSwgYWxsb3dEdXBsaWNhdGVzKSB7XG4gIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIHZhciBuYW1lSGFzaCA9IHt9O1xuICBmb3IgKHZhciBpID0gMCwgbGlzdCA9IG5vZGUucGFyYW1zOyBpIDwgbGlzdC5sZW5ndGg7IGkgKz0gMSlcbiAgICB7XG4gICAgdmFyIHBhcmFtID0gbGlzdFtpXTtcblxuICAgIHRoaXMkMS5jaGVja0xWYWwocGFyYW0sIEJJTkRfVkFSLCBhbGxvd0R1cGxpY2F0ZXMgPyBudWxsIDogbmFtZUhhc2gpO1xuICB9XG59O1xuXG4vLyBQYXJzZXMgYSBjb21tYS1zZXBhcmF0ZWQgbGlzdCBvZiBleHByZXNzaW9ucywgYW5kIHJldHVybnMgdGhlbSBhc1xuLy8gYW4gYXJyYXkuIGBjbG9zZWAgaXMgdGhlIHRva2VuIHR5cGUgdGhhdCBlbmRzIHRoZSBsaXN0LCBhbmRcbi8vIGBhbGxvd0VtcHR5YCBjYW4gYmUgdHVybmVkIG9uIHRvIGFsbG93IHN1YnNlcXVlbnQgY29tbWFzIHdpdGhcbi8vIG5vdGhpbmcgaW4gYmV0d2VlbiB0aGVtIHRvIGJlIHBhcnNlZCBhcyBgbnVsbGAgKHdoaWNoIGlzIG5lZWRlZFxuLy8gZm9yIGFycmF5IGxpdGVyYWxzKS5cblxucHAkMy5wYXJzZUV4cHJMaXN0ID0gZnVuY3Rpb24oY2xvc2UsIGFsbG93VHJhaWxpbmdDb21tYSwgYWxsb3dFbXB0eSwgcmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycykge1xuICB2YXIgdGhpcyQxID0gdGhpcztcblxuICB2YXIgZWx0cyA9IFtdLCBmaXJzdCA9IHRydWU7XG4gIHdoaWxlICghdGhpcy5lYXQoY2xvc2UpKSB7XG4gICAgaWYgKCFmaXJzdCkge1xuICAgICAgdGhpcyQxLmV4cGVjdCh0eXBlcy5jb21tYSk7XG4gICAgICBpZiAoYWxsb3dUcmFpbGluZ0NvbW1hICYmIHRoaXMkMS5hZnRlclRyYWlsaW5nQ29tbWEoY2xvc2UpKSB7IGJyZWFrIH1cbiAgICB9IGVsc2UgeyBmaXJzdCA9IGZhbHNlOyB9XG5cbiAgICB2YXIgZWx0ID0gKHZvaWQgMCk7XG4gICAgaWYgKGFsbG93RW1wdHkgJiYgdGhpcyQxLnR5cGUgPT09IHR5cGVzLmNvbW1hKVxuICAgICAgeyBlbHQgPSBudWxsOyB9XG4gICAgZWxzZSBpZiAodGhpcyQxLnR5cGUgPT09IHR5cGVzLmVsbGlwc2lzKSB7XG4gICAgICBlbHQgPSB0aGlzJDEucGFyc2VTcHJlYWQocmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycyk7XG4gICAgICBpZiAocmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycyAmJiB0aGlzJDEudHlwZSA9PT0gdHlwZXMuY29tbWEgJiYgcmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycy50cmFpbGluZ0NvbW1hIDwgMClcbiAgICAgICAgeyByZWZEZXN0cnVjdHVyaW5nRXJyb3JzLnRyYWlsaW5nQ29tbWEgPSB0aGlzJDEuc3RhcnQ7IH1cbiAgICB9IGVsc2Uge1xuICAgICAgZWx0ID0gdGhpcyQxLnBhcnNlTWF5YmVBc3NpZ24oZmFsc2UsIHJlZkRlc3RydWN0dXJpbmdFcnJvcnMpO1xuICAgIH1cbiAgICBlbHRzLnB1c2goZWx0KTtcbiAgfVxuICByZXR1cm4gZWx0c1xufTtcblxucHAkMy5jaGVja1VucmVzZXJ2ZWQgPSBmdW5jdGlvbihyZWYpIHtcbiAgdmFyIHN0YXJ0ID0gcmVmLnN0YXJ0O1xuICB2YXIgZW5kID0gcmVmLmVuZDtcbiAgdmFyIG5hbWUgPSByZWYubmFtZTtcblxuICBpZiAodGhpcy5pbkdlbmVyYXRvciAmJiBuYW1lID09PSBcInlpZWxkXCIpXG4gICAgeyB0aGlzLnJhaXNlUmVjb3ZlcmFibGUoc3RhcnQsIFwiQ2Fubm90IHVzZSAneWllbGQnIGFzIGlkZW50aWZpZXIgaW5zaWRlIGEgZ2VuZXJhdG9yXCIpOyB9XG4gIGlmICh0aGlzLmluQXN5bmMgJiYgbmFtZSA9PT0gXCJhd2FpdFwiKVxuICAgIHsgdGhpcy5yYWlzZVJlY292ZXJhYmxlKHN0YXJ0LCBcIkNhbm5vdCB1c2UgJ2F3YWl0JyBhcyBpZGVudGlmaWVyIGluc2lkZSBhbiBhc3luYyBmdW5jdGlvblwiKTsgfVxuICBpZiAodGhpcy5rZXl3b3Jkcy50ZXN0KG5hbWUpKVxuICAgIHsgdGhpcy5yYWlzZShzdGFydCwgKFwiVW5leHBlY3RlZCBrZXl3b3JkICdcIiArIG5hbWUgKyBcIidcIikpOyB9XG4gIGlmICh0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24gPCA2ICYmXG4gICAgdGhpcy5pbnB1dC5zbGljZShzdGFydCwgZW5kKS5pbmRleE9mKFwiXFxcXFwiKSAhPT0gLTEpIHsgcmV0dXJuIH1cbiAgdmFyIHJlID0gdGhpcy5zdHJpY3QgPyB0aGlzLnJlc2VydmVkV29yZHNTdHJpY3QgOiB0aGlzLnJlc2VydmVkV29yZHM7XG4gIGlmIChyZS50ZXN0KG5hbWUpKSB7XG4gICAgaWYgKCF0aGlzLmluQXN5bmMgJiYgbmFtZSA9PT0gXCJhd2FpdFwiKVxuICAgICAgeyB0aGlzLnJhaXNlUmVjb3ZlcmFibGUoc3RhcnQsIFwiQ2Fubm90IHVzZSBrZXl3b3JkICdhd2FpdCcgb3V0c2lkZSBhbiBhc3luYyBmdW5jdGlvblwiKTsgfVxuICAgIHRoaXMucmFpc2VSZWNvdmVyYWJsZShzdGFydCwgKFwiVGhlIGtleXdvcmQgJ1wiICsgbmFtZSArIFwiJyBpcyByZXNlcnZlZFwiKSk7XG4gIH1cbn07XG5cbi8vIFBhcnNlIHRoZSBuZXh0IHRva2VuIGFzIGFuIGlkZW50aWZpZXIuIElmIGBsaWJlcmFsYCBpcyB0cnVlICh1c2VkXG4vLyB3aGVuIHBhcnNpbmcgcHJvcGVydGllcyksIGl0IHdpbGwgYWxzbyBjb252ZXJ0IGtleXdvcmRzIGludG9cbi8vIGlkZW50aWZpZXJzLlxuXG5wcCQzLnBhcnNlSWRlbnQgPSBmdW5jdGlvbihsaWJlcmFsLCBpc0JpbmRpbmcpIHtcbiAgdmFyIG5vZGUgPSB0aGlzLnN0YXJ0Tm9kZSgpO1xuICBpZiAobGliZXJhbCAmJiB0aGlzLm9wdGlvbnMuYWxsb3dSZXNlcnZlZCA9PT0gXCJuZXZlclwiKSB7IGxpYmVyYWwgPSBmYWxzZTsgfVxuICBpZiAodGhpcy50eXBlID09PSB0eXBlcy5uYW1lKSB7XG4gICAgbm9kZS5uYW1lID0gdGhpcy52YWx1ZTtcbiAgfSBlbHNlIGlmICh0aGlzLnR5cGUua2V5d29yZCkge1xuICAgIG5vZGUubmFtZSA9IHRoaXMudHlwZS5rZXl3b3JkO1xuXG4gICAgLy8gVG8gZml4IGh0dHBzOi8vZ2l0aHViLmNvbS9hY29ybmpzL2Fjb3JuL2lzc3Vlcy81NzVcbiAgICAvLyBgY2xhc3NgIGFuZCBgZnVuY3Rpb25gIGtleXdvcmRzIHB1c2ggbmV3IGNvbnRleHQgaW50byB0aGlzLmNvbnRleHQuXG4gICAgLy8gQnV0IHRoZXJlIGlzIG5vIGNoYW5jZSB0byBwb3AgdGhlIGNvbnRleHQgaWYgdGhlIGtleXdvcmQgaXMgY29uc3VtZWQgYXMgYW4gaWRlbnRpZmllciBzdWNoIGFzIGEgcHJvcGVydHkgbmFtZS5cbiAgICAvLyBJZiB0aGUgcHJldmlvdXMgdG9rZW4gaXMgYSBkb3QsIHRoaXMgZG9lcyBub3QgYXBwbHkgYmVjYXVzZSB0aGUgY29udGV4dC1tYW5hZ2luZyBjb2RlIGFscmVhZHkgaWdub3JlZCB0aGUga2V5d29yZFxuICAgIGlmICgobm9kZS5uYW1lID09PSBcImNsYXNzXCIgfHwgbm9kZS5uYW1lID09PSBcImZ1bmN0aW9uXCIpICYmXG4gICAgICAgICh0aGlzLmxhc3RUb2tFbmQgIT09IHRoaXMubGFzdFRva1N0YXJ0ICsgMSB8fCB0aGlzLmlucHV0LmNoYXJDb2RlQXQodGhpcy5sYXN0VG9rU3RhcnQpICE9PSA0NikpIHtcbiAgICAgIHRoaXMuY29udGV4dC5wb3AoKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdGhpcy51bmV4cGVjdGVkKCk7XG4gIH1cbiAgdGhpcy5uZXh0KCk7XG4gIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIklkZW50aWZpZXJcIik7XG4gIGlmICghbGliZXJhbCkge1xuICAgIHRoaXMuY2hlY2tVbnJlc2VydmVkKG5vZGUpO1xuICAgIGlmIChub2RlLm5hbWUgPT09IFwiYXdhaXRcIiAmJiAhdGhpcy5hd2FpdElkZW50UG9zKVxuICAgICAgeyB0aGlzLmF3YWl0SWRlbnRQb3MgPSBub2RlLnN0YXJ0OyB9XG4gIH1cbiAgcmV0dXJuIG5vZGVcbn07XG5cbi8vIFBhcnNlcyB5aWVsZCBleHByZXNzaW9uIGluc2lkZSBnZW5lcmF0b3IuXG5cbnBwJDMucGFyc2VZaWVsZCA9IGZ1bmN0aW9uKG5vSW4pIHtcbiAgaWYgKCF0aGlzLnlpZWxkUG9zKSB7IHRoaXMueWllbGRQb3MgPSB0aGlzLnN0YXJ0OyB9XG5cbiAgdmFyIG5vZGUgPSB0aGlzLnN0YXJ0Tm9kZSgpO1xuICB0aGlzLm5leHQoKTtcbiAgaWYgKHRoaXMudHlwZSA9PT0gdHlwZXMuc2VtaSB8fCB0aGlzLmNhbkluc2VydFNlbWljb2xvbigpIHx8ICh0aGlzLnR5cGUgIT09IHR5cGVzLnN0YXIgJiYgIXRoaXMudHlwZS5zdGFydHNFeHByKSkge1xuICAgIG5vZGUuZGVsZWdhdGUgPSBmYWxzZTtcbiAgICBub2RlLmFyZ3VtZW50ID0gbnVsbDtcbiAgfSBlbHNlIHtcbiAgICBub2RlLmRlbGVnYXRlID0gdGhpcy5lYXQodHlwZXMuc3Rhcik7XG4gICAgbm9kZS5hcmd1bWVudCA9IHRoaXMucGFyc2VNYXliZUFzc2lnbihub0luKTtcbiAgfVxuICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiWWllbGRFeHByZXNzaW9uXCIpXG59O1xuXG5wcCQzLnBhcnNlQXdhaXQgPSBmdW5jdGlvbigpIHtcbiAgaWYgKCF0aGlzLmF3YWl0UG9zKSB7IHRoaXMuYXdhaXRQb3MgPSB0aGlzLnN0YXJ0OyB9XG5cbiAgdmFyIG5vZGUgPSB0aGlzLnN0YXJ0Tm9kZSgpO1xuICB0aGlzLm5leHQoKTtcbiAgbm9kZS5hcmd1bWVudCA9IHRoaXMucGFyc2VNYXliZVVuYXJ5KG51bGwsIHRydWUpO1xuICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiQXdhaXRFeHByZXNzaW9uXCIpXG59O1xuXG52YXIgcHAkNCA9IFBhcnNlci5wcm90b3R5cGU7XG5cbi8vIFRoaXMgZnVuY3Rpb24gaXMgdXNlZCB0byByYWlzZSBleGNlcHRpb25zIG9uIHBhcnNlIGVycm9ycy4gSXRcbi8vIHRha2VzIGFuIG9mZnNldCBpbnRlZ2VyIChpbnRvIHRoZSBjdXJyZW50IGBpbnB1dGApIHRvIGluZGljYXRlXG4vLyB0aGUgbG9jYXRpb24gb2YgdGhlIGVycm9yLCBhdHRhY2hlcyB0aGUgcG9zaXRpb24gdG8gdGhlIGVuZFxuLy8gb2YgdGhlIGVycm9yIG1lc3NhZ2UsIGFuZCB0aGVuIHJhaXNlcyBhIGBTeW50YXhFcnJvcmAgd2l0aCB0aGF0XG4vLyBtZXNzYWdlLlxuXG5wcCQ0LnJhaXNlID0gZnVuY3Rpb24ocG9zLCBtZXNzYWdlKSB7XG4gIHZhciBsb2MgPSBnZXRMaW5lSW5mbyh0aGlzLmlucHV0LCBwb3MpO1xuICBtZXNzYWdlICs9IFwiIChcIiArIGxvYy5saW5lICsgXCI6XCIgKyBsb2MuY29sdW1uICsgXCIpXCI7XG4gIHZhciBlcnIgPSBuZXcgU3ludGF4RXJyb3IobWVzc2FnZSk7XG4gIGVyci5wb3MgPSBwb3M7IGVyci5sb2MgPSBsb2M7IGVyci5yYWlzZWRBdCA9IHRoaXMucG9zO1xuICB0aHJvdyBlcnJcbn07XG5cbnBwJDQucmFpc2VSZWNvdmVyYWJsZSA9IHBwJDQucmFpc2U7XG5cbnBwJDQuY3VyUG9zaXRpb24gPSBmdW5jdGlvbigpIHtcbiAgaWYgKHRoaXMub3B0aW9ucy5sb2NhdGlvbnMpIHtcbiAgICByZXR1cm4gbmV3IFBvc2l0aW9uKHRoaXMuY3VyTGluZSwgdGhpcy5wb3MgLSB0aGlzLmxpbmVTdGFydClcbiAgfVxufTtcblxudmFyIHBwJDUgPSBQYXJzZXIucHJvdG90eXBlO1xuXG52YXIgU2NvcGUgPSBmdW5jdGlvbiBTY29wZShmbGFncykge1xuICB0aGlzLmZsYWdzID0gZmxhZ3M7XG4gIC8vIEEgbGlzdCBvZiB2YXItZGVjbGFyZWQgbmFtZXMgaW4gdGhlIGN1cnJlbnQgbGV4aWNhbCBzY29wZVxuICB0aGlzLnZhciA9IFtdO1xuICAvLyBBIGxpc3Qgb2YgbGV4aWNhbGx5LWRlY2xhcmVkIG5hbWVzIGluIHRoZSBjdXJyZW50IGxleGljYWwgc2NvcGVcbiAgdGhpcy5sZXhpY2FsID0gW107XG4gIC8vIEEgbGlzdCBvZiBsZXhpY2FsbHktZGVjbGFyZWQgRnVuY3Rpb25EZWNsYXJhdGlvbiBuYW1lcyBpbiB0aGUgY3VycmVudCBsZXhpY2FsIHNjb3BlXG4gIHRoaXMuZnVuY3Rpb25zID0gW107XG59O1xuXG4vLyBUaGUgZnVuY3Rpb25zIGluIHRoaXMgbW9kdWxlIGtlZXAgdHJhY2sgb2YgZGVjbGFyZWQgdmFyaWFibGVzIGluIHRoZSBjdXJyZW50IHNjb3BlIGluIG9yZGVyIHRvIGRldGVjdCBkdXBsaWNhdGUgdmFyaWFibGUgbmFtZXMuXG5cbnBwJDUuZW50ZXJTY29wZSA9IGZ1bmN0aW9uKGZsYWdzKSB7XG4gIHRoaXMuc2NvcGVTdGFjay5wdXNoKG5ldyBTY29wZShmbGFncykpO1xufTtcblxucHAkNS5leGl0U2NvcGUgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5zY29wZVN0YWNrLnBvcCgpO1xufTtcblxuLy8gVGhlIHNwZWMgc2F5czpcbi8vID4gQXQgdGhlIHRvcCBsZXZlbCBvZiBhIGZ1bmN0aW9uLCBvciBzY3JpcHQsIGZ1bmN0aW9uIGRlY2xhcmF0aW9ucyBhcmVcbi8vID4gdHJlYXRlZCBsaWtlIHZhciBkZWNsYXJhdGlvbnMgcmF0aGVyIHRoYW4gbGlrZSBsZXhpY2FsIGRlY2xhcmF0aW9ucy5cbnBwJDUudHJlYXRGdW5jdGlvbnNBc1ZhckluU2NvcGUgPSBmdW5jdGlvbihzY29wZSkge1xuICByZXR1cm4gKHNjb3BlLmZsYWdzICYgU0NPUEVfRlVOQ1RJT04pIHx8ICF0aGlzLmluTW9kdWxlICYmIChzY29wZS5mbGFncyAmIFNDT1BFX1RPUClcbn07XG5cbnBwJDUuZGVjbGFyZU5hbWUgPSBmdW5jdGlvbihuYW1lLCBiaW5kaW5nVHlwZSwgcG9zKSB7XG4gIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIHZhciByZWRlY2xhcmVkID0gZmFsc2U7XG4gIGlmIChiaW5kaW5nVHlwZSA9PT0gQklORF9MRVhJQ0FMKSB7XG4gICAgdmFyIHNjb3BlID0gdGhpcy5jdXJyZW50U2NvcGUoKTtcbiAgICByZWRlY2xhcmVkID0gc2NvcGUubGV4aWNhbC5pbmRleE9mKG5hbWUpID4gLTEgfHwgc2NvcGUuZnVuY3Rpb25zLmluZGV4T2YobmFtZSkgPiAtMSB8fCBzY29wZS52YXIuaW5kZXhPZihuYW1lKSA+IC0xO1xuICAgIHNjb3BlLmxleGljYWwucHVzaChuYW1lKTtcbiAgICBpZiAodGhpcy5pbk1vZHVsZSAmJiAoc2NvcGUuZmxhZ3MgJiBTQ09QRV9UT1ApKVxuICAgICAgeyBkZWxldGUgdGhpcy51bmRlZmluZWRFeHBvcnRzW25hbWVdOyB9XG4gIH0gZWxzZSBpZiAoYmluZGluZ1R5cGUgPT09IEJJTkRfU0lNUExFX0NBVENIKSB7XG4gICAgdmFyIHNjb3BlJDEgPSB0aGlzLmN1cnJlbnRTY29wZSgpO1xuICAgIHNjb3BlJDEubGV4aWNhbC5wdXNoKG5hbWUpO1xuICB9IGVsc2UgaWYgKGJpbmRpbmdUeXBlID09PSBCSU5EX0ZVTkNUSU9OKSB7XG4gICAgdmFyIHNjb3BlJDIgPSB0aGlzLmN1cnJlbnRTY29wZSgpO1xuICAgIGlmICh0aGlzLnRyZWF0RnVuY3Rpb25zQXNWYXIpXG4gICAgICB7IHJlZGVjbGFyZWQgPSBzY29wZSQyLmxleGljYWwuaW5kZXhPZihuYW1lKSA+IC0xOyB9XG4gICAgZWxzZVxuICAgICAgeyByZWRlY2xhcmVkID0gc2NvcGUkMi5sZXhpY2FsLmluZGV4T2YobmFtZSkgPiAtMSB8fCBzY29wZSQyLnZhci5pbmRleE9mKG5hbWUpID4gLTE7IH1cbiAgICBzY29wZSQyLmZ1bmN0aW9ucy5wdXNoKG5hbWUpO1xuICB9IGVsc2Uge1xuICAgIGZvciAodmFyIGkgPSB0aGlzLnNjb3BlU3RhY2subGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgIHZhciBzY29wZSQzID0gdGhpcyQxLnNjb3BlU3RhY2tbaV07XG4gICAgICBpZiAoc2NvcGUkMy5sZXhpY2FsLmluZGV4T2YobmFtZSkgPiAtMSAmJiAhKChzY29wZSQzLmZsYWdzICYgU0NPUEVfU0lNUExFX0NBVENIKSAmJiBzY29wZSQzLmxleGljYWxbMF0gPT09IG5hbWUpIHx8XG4gICAgICAgICAgIXRoaXMkMS50cmVhdEZ1bmN0aW9uc0FzVmFySW5TY29wZShzY29wZSQzKSAmJiBzY29wZSQzLmZ1bmN0aW9ucy5pbmRleE9mKG5hbWUpID4gLTEpIHtcbiAgICAgICAgcmVkZWNsYXJlZCA9IHRydWU7XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgICBzY29wZSQzLnZhci5wdXNoKG5hbWUpO1xuICAgICAgaWYgKHRoaXMkMS5pbk1vZHVsZSAmJiAoc2NvcGUkMy5mbGFncyAmIFNDT1BFX1RPUCkpXG4gICAgICAgIHsgZGVsZXRlIHRoaXMkMS51bmRlZmluZWRFeHBvcnRzW25hbWVdOyB9XG4gICAgICBpZiAoc2NvcGUkMy5mbGFncyAmIFNDT1BFX1ZBUikgeyBicmVhayB9XG4gICAgfVxuICB9XG4gIGlmIChyZWRlY2xhcmVkKSB7IHRoaXMucmFpc2VSZWNvdmVyYWJsZShwb3MsIChcIklkZW50aWZpZXIgJ1wiICsgbmFtZSArIFwiJyBoYXMgYWxyZWFkeSBiZWVuIGRlY2xhcmVkXCIpKTsgfVxufTtcblxucHAkNS5jaGVja0xvY2FsRXhwb3J0ID0gZnVuY3Rpb24oaWQpIHtcbiAgLy8gc2NvcGUuZnVuY3Rpb25zIG11c3QgYmUgZW1wdHkgYXMgTW9kdWxlIGNvZGUgaXMgYWx3YXlzIHN0cmljdC5cbiAgaWYgKHRoaXMuc2NvcGVTdGFja1swXS5sZXhpY2FsLmluZGV4T2YoaWQubmFtZSkgPT09IC0xICYmXG4gICAgICB0aGlzLnNjb3BlU3RhY2tbMF0udmFyLmluZGV4T2YoaWQubmFtZSkgPT09IC0xKSB7XG4gICAgdGhpcy51bmRlZmluZWRFeHBvcnRzW2lkLm5hbWVdID0gaWQ7XG4gIH1cbn07XG5cbnBwJDUuY3VycmVudFNjb3BlID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLnNjb3BlU3RhY2tbdGhpcy5zY29wZVN0YWNrLmxlbmd0aCAtIDFdXG59O1xuXG5wcCQ1LmN1cnJlbnRWYXJTY29wZSA9IGZ1bmN0aW9uKCkge1xuICB2YXIgdGhpcyQxID0gdGhpcztcblxuICBmb3IgKHZhciBpID0gdGhpcy5zY29wZVN0YWNrLmxlbmd0aCAtIDE7OyBpLS0pIHtcbiAgICB2YXIgc2NvcGUgPSB0aGlzJDEuc2NvcGVTdGFja1tpXTtcbiAgICBpZiAoc2NvcGUuZmxhZ3MgJiBTQ09QRV9WQVIpIHsgcmV0dXJuIHNjb3BlIH1cbiAgfVxufTtcblxuLy8gQ291bGQgYmUgdXNlZnVsIGZvciBgdGhpc2AsIGBuZXcudGFyZ2V0YCwgYHN1cGVyKClgLCBgc3VwZXIucHJvcGVydHlgLCBhbmQgYHN1cGVyW3Byb3BlcnR5XWAuXG5wcCQ1LmN1cnJlbnRUaGlzU2NvcGUgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgZm9yICh2YXIgaSA9IHRoaXMuc2NvcGVTdGFjay5sZW5ndGggLSAxOzsgaS0tKSB7XG4gICAgdmFyIHNjb3BlID0gdGhpcyQxLnNjb3BlU3RhY2tbaV07XG4gICAgaWYgKHNjb3BlLmZsYWdzICYgU0NPUEVfVkFSICYmICEoc2NvcGUuZmxhZ3MgJiBTQ09QRV9BUlJPVykpIHsgcmV0dXJuIHNjb3BlIH1cbiAgfVxufTtcblxudmFyIE5vZGUgPSBmdW5jdGlvbiBOb2RlKHBhcnNlciwgcG9zLCBsb2MpIHtcbiAgdGhpcy50eXBlID0gXCJcIjtcbiAgdGhpcy5zdGFydCA9IHBvcztcbiAgdGhpcy5lbmQgPSAwO1xuICBpZiAocGFyc2VyLm9wdGlvbnMubG9jYXRpb25zKVxuICAgIHsgdGhpcy5sb2MgPSBuZXcgU291cmNlTG9jYXRpb24ocGFyc2VyLCBsb2MpOyB9XG4gIGlmIChwYXJzZXIub3B0aW9ucy5kaXJlY3RTb3VyY2VGaWxlKVxuICAgIHsgdGhpcy5zb3VyY2VGaWxlID0gcGFyc2VyLm9wdGlvbnMuZGlyZWN0U291cmNlRmlsZTsgfVxuICBpZiAocGFyc2VyLm9wdGlvbnMucmFuZ2VzKVxuICAgIHsgdGhpcy5yYW5nZSA9IFtwb3MsIDBdOyB9XG59O1xuXG4vLyBTdGFydCBhbiBBU1Qgbm9kZSwgYXR0YWNoaW5nIGEgc3RhcnQgb2Zmc2V0LlxuXG52YXIgcHAkNiA9IFBhcnNlci5wcm90b3R5cGU7XG5cbnBwJDYuc3RhcnROb2RlID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgTm9kZSh0aGlzLCB0aGlzLnN0YXJ0LCB0aGlzLnN0YXJ0TG9jKVxufTtcblxucHAkNi5zdGFydE5vZGVBdCA9IGZ1bmN0aW9uKHBvcywgbG9jKSB7XG4gIHJldHVybiBuZXcgTm9kZSh0aGlzLCBwb3MsIGxvYylcbn07XG5cbi8vIEZpbmlzaCBhbiBBU1Qgbm9kZSwgYWRkaW5nIGB0eXBlYCBhbmQgYGVuZGAgcHJvcGVydGllcy5cblxuZnVuY3Rpb24gZmluaXNoTm9kZUF0KG5vZGUsIHR5cGUsIHBvcywgbG9jKSB7XG4gIG5vZGUudHlwZSA9IHR5cGU7XG4gIG5vZGUuZW5kID0gcG9zO1xuICBpZiAodGhpcy5vcHRpb25zLmxvY2F0aW9ucylcbiAgICB7IG5vZGUubG9jLmVuZCA9IGxvYzsgfVxuICBpZiAodGhpcy5vcHRpb25zLnJhbmdlcylcbiAgICB7IG5vZGUucmFuZ2VbMV0gPSBwb3M7IH1cbiAgcmV0dXJuIG5vZGVcbn1cblxucHAkNi5maW5pc2hOb2RlID0gZnVuY3Rpb24obm9kZSwgdHlwZSkge1xuICByZXR1cm4gZmluaXNoTm9kZUF0LmNhbGwodGhpcywgbm9kZSwgdHlwZSwgdGhpcy5sYXN0VG9rRW5kLCB0aGlzLmxhc3RUb2tFbmRMb2MpXG59O1xuXG4vLyBGaW5pc2ggbm9kZSBhdCBnaXZlbiBwb3NpdGlvblxuXG5wcCQ2LmZpbmlzaE5vZGVBdCA9IGZ1bmN0aW9uKG5vZGUsIHR5cGUsIHBvcywgbG9jKSB7XG4gIHJldHVybiBmaW5pc2hOb2RlQXQuY2FsbCh0aGlzLCBub2RlLCB0eXBlLCBwb3MsIGxvYylcbn07XG5cbi8vIFRoZSBhbGdvcml0aG0gdXNlZCB0byBkZXRlcm1pbmUgd2hldGhlciBhIHJlZ2V4cCBjYW4gYXBwZWFyIGF0IGFcbi8vIGdpdmVuIHBvaW50IGluIHRoZSBwcm9ncmFtIGlzIGxvb3NlbHkgYmFzZWQgb24gc3dlZXQuanMnIGFwcHJvYWNoLlxuLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9tb3ppbGxhL3N3ZWV0LmpzL3dpa2kvZGVzaWduXG5cbnZhciBUb2tDb250ZXh0ID0gZnVuY3Rpb24gVG9rQ29udGV4dCh0b2tlbiwgaXNFeHByLCBwcmVzZXJ2ZVNwYWNlLCBvdmVycmlkZSwgZ2VuZXJhdG9yKSB7XG4gIHRoaXMudG9rZW4gPSB0b2tlbjtcbiAgdGhpcy5pc0V4cHIgPSAhIWlzRXhwcjtcbiAgdGhpcy5wcmVzZXJ2ZVNwYWNlID0gISFwcmVzZXJ2ZVNwYWNlO1xuICB0aGlzLm92ZXJyaWRlID0gb3ZlcnJpZGU7XG4gIHRoaXMuZ2VuZXJhdG9yID0gISFnZW5lcmF0b3I7XG59O1xuXG52YXIgdHlwZXMkMSA9IHtcbiAgYl9zdGF0OiBuZXcgVG9rQ29udGV4dChcIntcIiwgZmFsc2UpLFxuICBiX2V4cHI6IG5ldyBUb2tDb250ZXh0KFwie1wiLCB0cnVlKSxcbiAgYl90bXBsOiBuZXcgVG9rQ29udGV4dChcIiR7XCIsIGZhbHNlKSxcbiAgcF9zdGF0OiBuZXcgVG9rQ29udGV4dChcIihcIiwgZmFsc2UpLFxuICBwX2V4cHI6IG5ldyBUb2tDb250ZXh0KFwiKFwiLCB0cnVlKSxcbiAgcV90bXBsOiBuZXcgVG9rQ29udGV4dChcImBcIiwgdHJ1ZSwgdHJ1ZSwgZnVuY3Rpb24gKHApIHsgcmV0dXJuIHAudHJ5UmVhZFRlbXBsYXRlVG9rZW4oKTsgfSksXG4gIGZfc3RhdDogbmV3IFRva0NvbnRleHQoXCJmdW5jdGlvblwiLCBmYWxzZSksXG4gIGZfZXhwcjogbmV3IFRva0NvbnRleHQoXCJmdW5jdGlvblwiLCB0cnVlKSxcbiAgZl9leHByX2dlbjogbmV3IFRva0NvbnRleHQoXCJmdW5jdGlvblwiLCB0cnVlLCBmYWxzZSwgbnVsbCwgdHJ1ZSksXG4gIGZfZ2VuOiBuZXcgVG9rQ29udGV4dChcImZ1bmN0aW9uXCIsIGZhbHNlLCBmYWxzZSwgbnVsbCwgdHJ1ZSlcbn07XG5cbnZhciBwcCQ3ID0gUGFyc2VyLnByb3RvdHlwZTtcblxucHAkNy5pbml0aWFsQ29udGV4dCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gW3R5cGVzJDEuYl9zdGF0XVxufTtcblxucHAkNy5icmFjZUlzQmxvY2sgPSBmdW5jdGlvbihwcmV2VHlwZSkge1xuICB2YXIgcGFyZW50ID0gdGhpcy5jdXJDb250ZXh0KCk7XG4gIGlmIChwYXJlbnQgPT09IHR5cGVzJDEuZl9leHByIHx8IHBhcmVudCA9PT0gdHlwZXMkMS5mX3N0YXQpXG4gICAgeyByZXR1cm4gdHJ1ZSB9XG4gIGlmIChwcmV2VHlwZSA9PT0gdHlwZXMuY29sb24gJiYgKHBhcmVudCA9PT0gdHlwZXMkMS5iX3N0YXQgfHwgcGFyZW50ID09PSB0eXBlcyQxLmJfZXhwcikpXG4gICAgeyByZXR1cm4gIXBhcmVudC5pc0V4cHIgfVxuXG4gIC8vIFRoZSBjaGVjayBmb3IgYHR0Lm5hbWUgJiYgZXhwckFsbG93ZWRgIGRldGVjdHMgd2hldGhlciB3ZSBhcmVcbiAgLy8gYWZ0ZXIgYSBgeWllbGRgIG9yIGBvZmAgY29uc3RydWN0LiBTZWUgdGhlIGB1cGRhdGVDb250ZXh0YCBmb3JcbiAgLy8gYHR0Lm5hbWVgLlxuICBpZiAocHJldlR5cGUgPT09IHR5cGVzLl9yZXR1cm4gfHwgcHJldlR5cGUgPT09IHR5cGVzLm5hbWUgJiYgdGhpcy5leHByQWxsb3dlZClcbiAgICB7IHJldHVybiBsaW5lQnJlYWsudGVzdCh0aGlzLmlucHV0LnNsaWNlKHRoaXMubGFzdFRva0VuZCwgdGhpcy5zdGFydCkpIH1cbiAgaWYgKHByZXZUeXBlID09PSB0eXBlcy5fZWxzZSB8fCBwcmV2VHlwZSA9PT0gdHlwZXMuc2VtaSB8fCBwcmV2VHlwZSA9PT0gdHlwZXMuZW9mIHx8IHByZXZUeXBlID09PSB0eXBlcy5wYXJlblIgfHwgcHJldlR5cGUgPT09IHR5cGVzLmFycm93KVxuICAgIHsgcmV0dXJuIHRydWUgfVxuICBpZiAocHJldlR5cGUgPT09IHR5cGVzLmJyYWNlTClcbiAgICB7IHJldHVybiBwYXJlbnQgPT09IHR5cGVzJDEuYl9zdGF0IH1cbiAgaWYgKHByZXZUeXBlID09PSB0eXBlcy5fdmFyIHx8IHByZXZUeXBlID09PSB0eXBlcy5fY29uc3QgfHwgcHJldlR5cGUgPT09IHR5cGVzLm5hbWUpXG4gICAgeyByZXR1cm4gZmFsc2UgfVxuICByZXR1cm4gIXRoaXMuZXhwckFsbG93ZWRcbn07XG5cbnBwJDcuaW5HZW5lcmF0b3JDb250ZXh0ID0gZnVuY3Rpb24oKSB7XG4gIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIGZvciAodmFyIGkgPSB0aGlzLmNvbnRleHQubGVuZ3RoIC0gMTsgaSA+PSAxOyBpLS0pIHtcbiAgICB2YXIgY29udGV4dCA9IHRoaXMkMS5jb250ZXh0W2ldO1xuICAgIGlmIChjb250ZXh0LnRva2VuID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICB7IHJldHVybiBjb250ZXh0LmdlbmVyYXRvciB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlXG59O1xuXG5wcCQ3LnVwZGF0ZUNvbnRleHQgPSBmdW5jdGlvbihwcmV2VHlwZSkge1xuICB2YXIgdXBkYXRlLCB0eXBlID0gdGhpcy50eXBlO1xuICBpZiAodHlwZS5rZXl3b3JkICYmIHByZXZUeXBlID09PSB0eXBlcy5kb3QpXG4gICAgeyB0aGlzLmV4cHJBbGxvd2VkID0gZmFsc2U7IH1cbiAgZWxzZSBpZiAodXBkYXRlID0gdHlwZS51cGRhdGVDb250ZXh0KVxuICAgIHsgdXBkYXRlLmNhbGwodGhpcywgcHJldlR5cGUpOyB9XG4gIGVsc2VcbiAgICB7IHRoaXMuZXhwckFsbG93ZWQgPSB0eXBlLmJlZm9yZUV4cHI7IH1cbn07XG5cbi8vIFRva2VuLXNwZWNpZmljIGNvbnRleHQgdXBkYXRlIGNvZGVcblxudHlwZXMucGFyZW5SLnVwZGF0ZUNvbnRleHQgPSB0eXBlcy5icmFjZVIudXBkYXRlQ29udGV4dCA9IGZ1bmN0aW9uKCkge1xuICBpZiAodGhpcy5jb250ZXh0Lmxlbmd0aCA9PT0gMSkge1xuICAgIHRoaXMuZXhwckFsbG93ZWQgPSB0cnVlO1xuICAgIHJldHVyblxuICB9XG4gIHZhciBvdXQgPSB0aGlzLmNvbnRleHQucG9wKCk7XG4gIGlmIChvdXQgPT09IHR5cGVzJDEuYl9zdGF0ICYmIHRoaXMuY3VyQ29udGV4dCgpLnRva2VuID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBvdXQgPSB0aGlzLmNvbnRleHQucG9wKCk7XG4gIH1cbiAgdGhpcy5leHByQWxsb3dlZCA9ICFvdXQuaXNFeHByO1xufTtcblxudHlwZXMuYnJhY2VMLnVwZGF0ZUNvbnRleHQgPSBmdW5jdGlvbihwcmV2VHlwZSkge1xuICB0aGlzLmNvbnRleHQucHVzaCh0aGlzLmJyYWNlSXNCbG9jayhwcmV2VHlwZSkgPyB0eXBlcyQxLmJfc3RhdCA6IHR5cGVzJDEuYl9leHByKTtcbiAgdGhpcy5leHByQWxsb3dlZCA9IHRydWU7XG59O1xuXG50eXBlcy5kb2xsYXJCcmFjZUwudXBkYXRlQ29udGV4dCA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmNvbnRleHQucHVzaCh0eXBlcyQxLmJfdG1wbCk7XG4gIHRoaXMuZXhwckFsbG93ZWQgPSB0cnVlO1xufTtcblxudHlwZXMucGFyZW5MLnVwZGF0ZUNvbnRleHQgPSBmdW5jdGlvbihwcmV2VHlwZSkge1xuICB2YXIgc3RhdGVtZW50UGFyZW5zID0gcHJldlR5cGUgPT09IHR5cGVzLl9pZiB8fCBwcmV2VHlwZSA9PT0gdHlwZXMuX2ZvciB8fCBwcmV2VHlwZSA9PT0gdHlwZXMuX3dpdGggfHwgcHJldlR5cGUgPT09IHR5cGVzLl93aGlsZTtcbiAgdGhpcy5jb250ZXh0LnB1c2goc3RhdGVtZW50UGFyZW5zID8gdHlwZXMkMS5wX3N0YXQgOiB0eXBlcyQxLnBfZXhwcik7XG4gIHRoaXMuZXhwckFsbG93ZWQgPSB0cnVlO1xufTtcblxudHlwZXMuaW5jRGVjLnVwZGF0ZUNvbnRleHQgPSBmdW5jdGlvbigpIHtcbiAgLy8gdG9rRXhwckFsbG93ZWQgc3RheXMgdW5jaGFuZ2VkXG59O1xuXG50eXBlcy5fZnVuY3Rpb24udXBkYXRlQ29udGV4dCA9IHR5cGVzLl9jbGFzcy51cGRhdGVDb250ZXh0ID0gZnVuY3Rpb24ocHJldlR5cGUpIHtcbiAgaWYgKHByZXZUeXBlLmJlZm9yZUV4cHIgJiYgcHJldlR5cGUgIT09IHR5cGVzLnNlbWkgJiYgcHJldlR5cGUgIT09IHR5cGVzLl9lbHNlICYmXG4gICAgICAhKHByZXZUeXBlID09PSB0eXBlcy5fcmV0dXJuICYmIGxpbmVCcmVhay50ZXN0KHRoaXMuaW5wdXQuc2xpY2UodGhpcy5sYXN0VG9rRW5kLCB0aGlzLnN0YXJ0KSkpICYmXG4gICAgICAhKChwcmV2VHlwZSA9PT0gdHlwZXMuY29sb24gfHwgcHJldlR5cGUgPT09IHR5cGVzLmJyYWNlTCkgJiYgdGhpcy5jdXJDb250ZXh0KCkgPT09IHR5cGVzJDEuYl9zdGF0KSlcbiAgICB7IHRoaXMuY29udGV4dC5wdXNoKHR5cGVzJDEuZl9leHByKTsgfVxuICBlbHNlXG4gICAgeyB0aGlzLmNvbnRleHQucHVzaCh0eXBlcyQxLmZfc3RhdCk7IH1cbiAgdGhpcy5leHByQWxsb3dlZCA9IGZhbHNlO1xufTtcblxudHlwZXMuYmFja1F1b3RlLnVwZGF0ZUNvbnRleHQgPSBmdW5jdGlvbigpIHtcbiAgaWYgKHRoaXMuY3VyQ29udGV4dCgpID09PSB0eXBlcyQxLnFfdG1wbClcbiAgICB7IHRoaXMuY29udGV4dC5wb3AoKTsgfVxuICBlbHNlXG4gICAgeyB0aGlzLmNvbnRleHQucHVzaCh0eXBlcyQxLnFfdG1wbCk7IH1cbiAgdGhpcy5leHByQWxsb3dlZCA9IGZhbHNlO1xufTtcblxudHlwZXMuc3Rhci51cGRhdGVDb250ZXh0ID0gZnVuY3Rpb24ocHJldlR5cGUpIHtcbiAgaWYgKHByZXZUeXBlID09PSB0eXBlcy5fZnVuY3Rpb24pIHtcbiAgICB2YXIgaW5kZXggPSB0aGlzLmNvbnRleHQubGVuZ3RoIC0gMTtcbiAgICBpZiAodGhpcy5jb250ZXh0W2luZGV4XSA9PT0gdHlwZXMkMS5mX2V4cHIpXG4gICAgICB7IHRoaXMuY29udGV4dFtpbmRleF0gPSB0eXBlcyQxLmZfZXhwcl9nZW47IH1cbiAgICBlbHNlXG4gICAgICB7IHRoaXMuY29udGV4dFtpbmRleF0gPSB0eXBlcyQxLmZfZ2VuOyB9XG4gIH1cbiAgdGhpcy5leHByQWxsb3dlZCA9IHRydWU7XG59O1xuXG50eXBlcy5uYW1lLnVwZGF0ZUNvbnRleHQgPSBmdW5jdGlvbihwcmV2VHlwZSkge1xuICB2YXIgYWxsb3dlZCA9IGZhbHNlO1xuICBpZiAodGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uID49IDYgJiYgcHJldlR5cGUgIT09IHR5cGVzLmRvdCkge1xuICAgIGlmICh0aGlzLnZhbHVlID09PSBcIm9mXCIgJiYgIXRoaXMuZXhwckFsbG93ZWQgfHxcbiAgICAgICAgdGhpcy52YWx1ZSA9PT0gXCJ5aWVsZFwiICYmIHRoaXMuaW5HZW5lcmF0b3JDb250ZXh0KCkpXG4gICAgICB7IGFsbG93ZWQgPSB0cnVlOyB9XG4gIH1cbiAgdGhpcy5leHByQWxsb3dlZCA9IGFsbG93ZWQ7XG59O1xuXG4vLyBUaGlzIGZpbGUgY29udGFpbnMgVW5pY29kZSBwcm9wZXJ0aWVzIGV4dHJhY3RlZCBmcm9tIHRoZSBFQ01BU2NyaXB0XG4vLyBzcGVjaWZpY2F0aW9uLiBUaGUgbGlzdHMgYXJlIGV4dHJhY3RlZCBsaWtlIHNvOlxuLy8gJCQoJyN0YWJsZS1iaW5hcnktdW5pY29kZS1wcm9wZXJ0aWVzID4gZmlndXJlID4gdGFibGUgPiB0Ym9keSA+IHRyID4gdGQ6bnRoLWNoaWxkKDEpIGNvZGUnKS5tYXAoZWwgPT4gZWwuaW5uZXJUZXh0KVxuXG4vLyAjdGFibGUtYmluYXJ5LXVuaWNvZGUtcHJvcGVydGllc1xudmFyIGVjbWE5QmluYXJ5UHJvcGVydGllcyA9IFwiQVNDSUkgQVNDSUlfSGV4X0RpZ2l0IEFIZXggQWxwaGFiZXRpYyBBbHBoYSBBbnkgQXNzaWduZWQgQmlkaV9Db250cm9sIEJpZGlfQyBCaWRpX01pcnJvcmVkIEJpZGlfTSBDYXNlX0lnbm9yYWJsZSBDSSBDYXNlZCBDaGFuZ2VzX1doZW5fQ2FzZWZvbGRlZCBDV0NGIENoYW5nZXNfV2hlbl9DYXNlbWFwcGVkIENXQ00gQ2hhbmdlc19XaGVuX0xvd2VyY2FzZWQgQ1dMIENoYW5nZXNfV2hlbl9ORktDX0Nhc2Vmb2xkZWQgQ1dLQ0YgQ2hhbmdlc19XaGVuX1RpdGxlY2FzZWQgQ1dUIENoYW5nZXNfV2hlbl9VcHBlcmNhc2VkIENXVSBEYXNoIERlZmF1bHRfSWdub3JhYmxlX0NvZGVfUG9pbnQgREkgRGVwcmVjYXRlZCBEZXAgRGlhY3JpdGljIERpYSBFbW9qaSBFbW9qaV9Db21wb25lbnQgRW1vamlfTW9kaWZpZXIgRW1vamlfTW9kaWZpZXJfQmFzZSBFbW9qaV9QcmVzZW50YXRpb24gRXh0ZW5kZXIgRXh0IEdyYXBoZW1lX0Jhc2UgR3JfQmFzZSBHcmFwaGVtZV9FeHRlbmQgR3JfRXh0IEhleF9EaWdpdCBIZXggSURTX0JpbmFyeV9PcGVyYXRvciBJRFNCIElEU19UcmluYXJ5X09wZXJhdG9yIElEU1QgSURfQ29udGludWUgSURDIElEX1N0YXJ0IElEUyBJZGVvZ3JhcGhpYyBJZGVvIEpvaW5fQ29udHJvbCBKb2luX0MgTG9naWNhbF9PcmRlcl9FeGNlcHRpb24gTE9FIExvd2VyY2FzZSBMb3dlciBNYXRoIE5vbmNoYXJhY3Rlcl9Db2RlX1BvaW50IE5DaGFyIFBhdHRlcm5fU3ludGF4IFBhdF9TeW4gUGF0dGVybl9XaGl0ZV9TcGFjZSBQYXRfV1MgUXVvdGF0aW9uX01hcmsgUU1hcmsgUmFkaWNhbCBSZWdpb25hbF9JbmRpY2F0b3IgUkkgU2VudGVuY2VfVGVybWluYWwgU1Rlcm0gU29mdF9Eb3R0ZWQgU0QgVGVybWluYWxfUHVuY3R1YXRpb24gVGVybSBVbmlmaWVkX0lkZW9ncmFwaCBVSWRlbyBVcHBlcmNhc2UgVXBwZXIgVmFyaWF0aW9uX1NlbGVjdG9yIFZTIFdoaXRlX1NwYWNlIHNwYWNlIFhJRF9Db250aW51ZSBYSURDIFhJRF9TdGFydCBYSURTXCI7XG52YXIgdW5pY29kZUJpbmFyeVByb3BlcnRpZXMgPSB7XG4gIDk6IGVjbWE5QmluYXJ5UHJvcGVydGllcyxcbiAgMTA6IGVjbWE5QmluYXJ5UHJvcGVydGllcyArIFwiIEV4dGVuZGVkX1BpY3RvZ3JhcGhpY1wiXG59O1xuXG4vLyAjdGFibGUtdW5pY29kZS1nZW5lcmFsLWNhdGVnb3J5LXZhbHVlc1xudmFyIHVuaWNvZGVHZW5lcmFsQ2F0ZWdvcnlWYWx1ZXMgPSBcIkNhc2VkX0xldHRlciBMQyBDbG9zZV9QdW5jdHVhdGlvbiBQZSBDb25uZWN0b3JfUHVuY3R1YXRpb24gUGMgQ29udHJvbCBDYyBjbnRybCBDdXJyZW5jeV9TeW1ib2wgU2MgRGFzaF9QdW5jdHVhdGlvbiBQZCBEZWNpbWFsX051bWJlciBOZCBkaWdpdCBFbmNsb3NpbmdfTWFyayBNZSBGaW5hbF9QdW5jdHVhdGlvbiBQZiBGb3JtYXQgQ2YgSW5pdGlhbF9QdW5jdHVhdGlvbiBQaSBMZXR0ZXIgTCBMZXR0ZXJfTnVtYmVyIE5sIExpbmVfU2VwYXJhdG9yIFpsIExvd2VyY2FzZV9MZXR0ZXIgTGwgTWFyayBNIENvbWJpbmluZ19NYXJrIE1hdGhfU3ltYm9sIFNtIE1vZGlmaWVyX0xldHRlciBMbSBNb2RpZmllcl9TeW1ib2wgU2sgTm9uc3BhY2luZ19NYXJrIE1uIE51bWJlciBOIE9wZW5fUHVuY3R1YXRpb24gUHMgT3RoZXIgQyBPdGhlcl9MZXR0ZXIgTG8gT3RoZXJfTnVtYmVyIE5vIE90aGVyX1B1bmN0dWF0aW9uIFBvIE90aGVyX1N5bWJvbCBTbyBQYXJhZ3JhcGhfU2VwYXJhdG9yIFpwIFByaXZhdGVfVXNlIENvIFB1bmN0dWF0aW9uIFAgcHVuY3QgU2VwYXJhdG9yIFogU3BhY2VfU2VwYXJhdG9yIFpzIFNwYWNpbmdfTWFyayBNYyBTdXJyb2dhdGUgQ3MgU3ltYm9sIFMgVGl0bGVjYXNlX0xldHRlciBMdCBVbmFzc2lnbmVkIENuIFVwcGVyY2FzZV9MZXR0ZXIgTHVcIjtcblxuLy8gI3RhYmxlLXVuaWNvZGUtc2NyaXB0LXZhbHVlc1xudmFyIGVjbWE5U2NyaXB0VmFsdWVzID0gXCJBZGxhbSBBZGxtIEFob20gQWhvbSBBbmF0b2xpYW5fSGllcm9nbHlwaHMgSGx1dyBBcmFiaWMgQXJhYiBBcm1lbmlhbiBBcm1uIEF2ZXN0YW4gQXZzdCBCYWxpbmVzZSBCYWxpIEJhbXVtIEJhbXUgQmFzc2FfVmFoIEJhc3MgQmF0YWsgQmF0ayBCZW5nYWxpIEJlbmcgQmhhaWtzdWtpIEJoa3MgQm9wb21vZm8gQm9wbyBCcmFobWkgQnJhaCBCcmFpbGxlIEJyYWkgQnVnaW5lc2UgQnVnaSBCdWhpZCBCdWhkIENhbmFkaWFuX0Fib3JpZ2luYWwgQ2FucyBDYXJpYW4gQ2FyaSBDYXVjYXNpYW5fQWxiYW5pYW4gQWdoYiBDaGFrbWEgQ2FrbSBDaGFtIENoYW0gQ2hlcm9rZWUgQ2hlciBDb21tb24gWnl5eSBDb3B0aWMgQ29wdCBRYWFjIEN1bmVpZm9ybSBYc3V4IEN5cHJpb3QgQ3BydCBDeXJpbGxpYyBDeXJsIERlc2VyZXQgRHNydCBEZXZhbmFnYXJpIERldmEgRHVwbG95YW4gRHVwbCBFZ3lwdGlhbl9IaWVyb2dseXBocyBFZ3lwIEVsYmFzYW4gRWxiYSBFdGhpb3BpYyBFdGhpIEdlb3JnaWFuIEdlb3IgR2xhZ29saXRpYyBHbGFnIEdvdGhpYyBHb3RoIEdyYW50aGEgR3JhbiBHcmVlayBHcmVrIEd1amFyYXRpIEd1anIgR3VybXVraGkgR3VydSBIYW4gSGFuaSBIYW5ndWwgSGFuZyBIYW51bm9vIEhhbm8gSGF0cmFuIEhhdHIgSGVicmV3IEhlYnIgSGlyYWdhbmEgSGlyYSBJbXBlcmlhbF9BcmFtYWljIEFybWkgSW5oZXJpdGVkIFppbmggUWFhaSBJbnNjcmlwdGlvbmFsX1BhaGxhdmkgUGhsaSBJbnNjcmlwdGlvbmFsX1BhcnRoaWFuIFBydGkgSmF2YW5lc2UgSmF2YSBLYWl0aGkgS3RoaSBLYW5uYWRhIEtuZGEgS2F0YWthbmEgS2FuYSBLYXlhaF9MaSBLYWxpIEtoYXJvc2h0aGkgS2hhciBLaG1lciBLaG1yIEtob2praSBLaG9qIEtodWRhd2FkaSBTaW5kIExhbyBMYW9vIExhdGluIExhdG4gTGVwY2hhIExlcGMgTGltYnUgTGltYiBMaW5lYXJfQSBMaW5hIExpbmVhcl9CIExpbmIgTGlzdSBMaXN1IEx5Y2lhbiBMeWNpIEx5ZGlhbiBMeWRpIE1haGFqYW5pIE1haGogTWFsYXlhbGFtIE1seW0gTWFuZGFpYyBNYW5kIE1hbmljaGFlYW4gTWFuaSBNYXJjaGVuIE1hcmMgTWFzYXJhbV9Hb25kaSBHb25tIE1lZXRlaV9NYXllayBNdGVpIE1lbmRlX0tpa2FrdWkgTWVuZCBNZXJvaXRpY19DdXJzaXZlIE1lcmMgTWVyb2l0aWNfSGllcm9nbHlwaHMgTWVybyBNaWFvIFBscmQgTW9kaSBNb2RpIE1vbmdvbGlhbiBNb25nIE1ybyBNcm9vIE11bHRhbmkgTXVsdCBNeWFubWFyIE15bXIgTmFiYXRhZWFuIE5iYXQgTmV3X1RhaV9MdWUgVGFsdSBOZXdhIE5ld2EgTmtvIE5rb28gTnVzaHUgTnNodSBPZ2hhbSBPZ2FtIE9sX0NoaWtpIE9sY2sgT2xkX0h1bmdhcmlhbiBIdW5nIE9sZF9JdGFsaWMgSXRhbCBPbGRfTm9ydGhfQXJhYmlhbiBOYXJiIE9sZF9QZXJtaWMgUGVybSBPbGRfUGVyc2lhbiBYcGVvIE9sZF9Tb3V0aF9BcmFiaWFuIFNhcmIgT2xkX1R1cmtpYyBPcmtoIE9yaXlhIE9yeWEgT3NhZ2UgT3NnZSBPc21hbnlhIE9zbWEgUGFoYXdoX0htb25nIEhtbmcgUGFsbXlyZW5lIFBhbG0gUGF1X0Npbl9IYXUgUGF1YyBQaGFnc19QYSBQaGFnIFBob2VuaWNpYW4gUGhueCBQc2FsdGVyX1BhaGxhdmkgUGhscCBSZWphbmcgUmpuZyBSdW5pYyBSdW5yIFNhbWFyaXRhbiBTYW1yIFNhdXJhc2h0cmEgU2F1ciBTaGFyYWRhIFNocmQgU2hhdmlhbiBTaGF3IFNpZGRoYW0gU2lkZCBTaWduV3JpdGluZyBTZ253IFNpbmhhbGEgU2luaCBTb3JhX1NvbXBlbmcgU29yYSBTb3lvbWJvIFNveW8gU3VuZGFuZXNlIFN1bmQgU3lsb3RpX05hZ3JpIFN5bG8gU3lyaWFjIFN5cmMgVGFnYWxvZyBUZ2xnIFRhZ2JhbndhIFRhZ2IgVGFpX0xlIFRhbGUgVGFpX1RoYW0gTGFuYSBUYWlfVmlldCBUYXZ0IFRha3JpIFRha3IgVGFtaWwgVGFtbCBUYW5ndXQgVGFuZyBUZWx1Z3UgVGVsdSBUaGFhbmEgVGhhYSBUaGFpIFRoYWkgVGliZXRhbiBUaWJ0IFRpZmluYWdoIFRmbmcgVGlyaHV0YSBUaXJoIFVnYXJpdGljIFVnYXIgVmFpIFZhaWkgV2FyYW5nX0NpdGkgV2FyYSBZaSBZaWlpIFphbmFiYXphcl9TcXVhcmUgWmFuYlwiO1xudmFyIHVuaWNvZGVTY3JpcHRWYWx1ZXMgPSB7XG4gIDk6IGVjbWE5U2NyaXB0VmFsdWVzLFxuICAxMDogZWNtYTlTY3JpcHRWYWx1ZXMgKyBcIiBEb2dyYSBEb2dyIEd1bmphbGFfR29uZGkgR29uZyBIYW5pZmlfUm9oaW5neWEgUm9oZyBNYWthc2FyIE1ha2EgTWVkZWZhaWRyaW4gTWVkZiBPbGRfU29nZGlhbiBTb2dvIFNvZ2RpYW4gU29nZFwiXG59O1xuXG52YXIgZGF0YSA9IHt9O1xuZnVuY3Rpb24gYnVpbGRVbmljb2RlRGF0YShlY21hVmVyc2lvbikge1xuICB2YXIgZCA9IGRhdGFbZWNtYVZlcnNpb25dID0ge1xuICAgIGJpbmFyeTogd29yZHNSZWdleHAodW5pY29kZUJpbmFyeVByb3BlcnRpZXNbZWNtYVZlcnNpb25dICsgXCIgXCIgKyB1bmljb2RlR2VuZXJhbENhdGVnb3J5VmFsdWVzKSxcbiAgICBub25CaW5hcnk6IHtcbiAgICAgIEdlbmVyYWxfQ2F0ZWdvcnk6IHdvcmRzUmVnZXhwKHVuaWNvZGVHZW5lcmFsQ2F0ZWdvcnlWYWx1ZXMpLFxuICAgICAgU2NyaXB0OiB3b3Jkc1JlZ2V4cCh1bmljb2RlU2NyaXB0VmFsdWVzW2VjbWFWZXJzaW9uXSlcbiAgICB9XG4gIH07XG4gIGQubm9uQmluYXJ5LlNjcmlwdF9FeHRlbnNpb25zID0gZC5ub25CaW5hcnkuU2NyaXB0O1xuXG4gIGQubm9uQmluYXJ5LmdjID0gZC5ub25CaW5hcnkuR2VuZXJhbF9DYXRlZ29yeTtcbiAgZC5ub25CaW5hcnkuc2MgPSBkLm5vbkJpbmFyeS5TY3JpcHQ7XG4gIGQubm9uQmluYXJ5LnNjeCA9IGQubm9uQmluYXJ5LlNjcmlwdF9FeHRlbnNpb25zO1xufVxuYnVpbGRVbmljb2RlRGF0YSg5KTtcbmJ1aWxkVW5pY29kZURhdGEoMTApO1xuXG52YXIgcHAkOSA9IFBhcnNlci5wcm90b3R5cGU7XG5cbnZhciBSZWdFeHBWYWxpZGF0aW9uU3RhdGUgPSBmdW5jdGlvbiBSZWdFeHBWYWxpZGF0aW9uU3RhdGUocGFyc2VyKSB7XG4gIHRoaXMucGFyc2VyID0gcGFyc2VyO1xuICB0aGlzLnZhbGlkRmxhZ3MgPSBcImdpbVwiICsgKHBhcnNlci5vcHRpb25zLmVjbWFWZXJzaW9uID49IDYgPyBcInV5XCIgOiBcIlwiKSArIChwYXJzZXIub3B0aW9ucy5lY21hVmVyc2lvbiA+PSA5ID8gXCJzXCIgOiBcIlwiKTtcbiAgdGhpcy51bmljb2RlUHJvcGVydGllcyA9IGRhdGFbcGFyc2VyLm9wdGlvbnMuZWNtYVZlcnNpb24gPj0gMTAgPyAxMCA6IHBhcnNlci5vcHRpb25zLmVjbWFWZXJzaW9uXTtcbiAgdGhpcy5zb3VyY2UgPSBcIlwiO1xuICB0aGlzLmZsYWdzID0gXCJcIjtcbiAgdGhpcy5zdGFydCA9IDA7XG4gIHRoaXMuc3dpdGNoVSA9IGZhbHNlO1xuICB0aGlzLnN3aXRjaE4gPSBmYWxzZTtcbiAgdGhpcy5wb3MgPSAwO1xuICB0aGlzLmxhc3RJbnRWYWx1ZSA9IDA7XG4gIHRoaXMubGFzdFN0cmluZ1ZhbHVlID0gXCJcIjtcbiAgdGhpcy5sYXN0QXNzZXJ0aW9uSXNRdWFudGlmaWFibGUgPSBmYWxzZTtcbiAgdGhpcy5udW1DYXB0dXJpbmdQYXJlbnMgPSAwO1xuICB0aGlzLm1heEJhY2tSZWZlcmVuY2UgPSAwO1xuICB0aGlzLmdyb3VwTmFtZXMgPSBbXTtcbiAgdGhpcy5iYWNrUmVmZXJlbmNlTmFtZXMgPSBbXTtcbn07XG5cblJlZ0V4cFZhbGlkYXRpb25TdGF0ZS5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbiByZXNldCAoc3RhcnQsIHBhdHRlcm4sIGZsYWdzKSB7XG4gIHZhciB1bmljb2RlID0gZmxhZ3MuaW5kZXhPZihcInVcIikgIT09IC0xO1xuICB0aGlzLnN0YXJ0ID0gc3RhcnQgfCAwO1xuICB0aGlzLnNvdXJjZSA9IHBhdHRlcm4gKyBcIlwiO1xuICB0aGlzLmZsYWdzID0gZmxhZ3M7XG4gIHRoaXMuc3dpdGNoVSA9IHVuaWNvZGUgJiYgdGhpcy5wYXJzZXIub3B0aW9ucy5lY21hVmVyc2lvbiA+PSA2O1xuICB0aGlzLnN3aXRjaE4gPSB1bmljb2RlICYmIHRoaXMucGFyc2VyLm9wdGlvbnMuZWNtYVZlcnNpb24gPj0gOTtcbn07XG5cblJlZ0V4cFZhbGlkYXRpb25TdGF0ZS5wcm90b3R5cGUucmFpc2UgPSBmdW5jdGlvbiByYWlzZSAobWVzc2FnZSkge1xuICB0aGlzLnBhcnNlci5yYWlzZVJlY292ZXJhYmxlKHRoaXMuc3RhcnQsIChcIkludmFsaWQgcmVndWxhciBleHByZXNzaW9uOiAvXCIgKyAodGhpcy5zb3VyY2UpICsgXCIvOiBcIiArIG1lc3NhZ2UpKTtcbn07XG5cbi8vIElmIHUgZmxhZyBpcyBnaXZlbiwgdGhpcyByZXR1cm5zIHRoZSBjb2RlIHBvaW50IGF0IHRoZSBpbmRleCAoaXQgY29tYmluZXMgYSBzdXJyb2dhdGUgcGFpcikuXG4vLyBPdGhlcndpc2UsIHRoaXMgcmV0dXJucyB0aGUgY29kZSB1bml0IG9mIHRoZSBpbmRleCAoY2FuIGJlIGEgcGFydCBvZiBhIHN1cnJvZ2F0ZSBwYWlyKS5cblJlZ0V4cFZhbGlkYXRpb25TdGF0ZS5wcm90b3R5cGUuYXQgPSBmdW5jdGlvbiBhdCAoaSkge1xuICB2YXIgcyA9IHRoaXMuc291cmNlO1xuICB2YXIgbCA9IHMubGVuZ3RoO1xuICBpZiAoaSA+PSBsKSB7XG4gICAgcmV0dXJuIC0xXG4gIH1cbiAgdmFyIGMgPSBzLmNoYXJDb2RlQXQoaSk7XG4gIGlmICghdGhpcy5zd2l0Y2hVIHx8IGMgPD0gMHhEN0ZGIHx8IGMgPj0gMHhFMDAwIHx8IGkgKyAxID49IGwpIHtcbiAgICByZXR1cm4gY1xuICB9XG4gIHJldHVybiAoYyA8PCAxMCkgKyBzLmNoYXJDb2RlQXQoaSArIDEpIC0gMHgzNUZEQzAwXG59O1xuXG5SZWdFeHBWYWxpZGF0aW9uU3RhdGUucHJvdG90eXBlLm5leHRJbmRleCA9IGZ1bmN0aW9uIG5leHRJbmRleCAoaSkge1xuICB2YXIgcyA9IHRoaXMuc291cmNlO1xuICB2YXIgbCA9IHMubGVuZ3RoO1xuICBpZiAoaSA+PSBsKSB7XG4gICAgcmV0dXJuIGxcbiAgfVxuICB2YXIgYyA9IHMuY2hhckNvZGVBdChpKTtcbiAgaWYgKCF0aGlzLnN3aXRjaFUgfHwgYyA8PSAweEQ3RkYgfHwgYyA+PSAweEUwMDAgfHwgaSArIDEgPj0gbCkge1xuICAgIHJldHVybiBpICsgMVxuICB9XG4gIHJldHVybiBpICsgMlxufTtcblxuUmVnRXhwVmFsaWRhdGlvblN0YXRlLnByb3RvdHlwZS5jdXJyZW50ID0gZnVuY3Rpb24gY3VycmVudCAoKSB7XG4gIHJldHVybiB0aGlzLmF0KHRoaXMucG9zKVxufTtcblxuUmVnRXhwVmFsaWRhdGlvblN0YXRlLnByb3RvdHlwZS5sb29rYWhlYWQgPSBmdW5jdGlvbiBsb29rYWhlYWQgKCkge1xuICByZXR1cm4gdGhpcy5hdCh0aGlzLm5leHRJbmRleCh0aGlzLnBvcykpXG59O1xuXG5SZWdFeHBWYWxpZGF0aW9uU3RhdGUucHJvdG90eXBlLmFkdmFuY2UgPSBmdW5jdGlvbiBhZHZhbmNlICgpIHtcbiAgdGhpcy5wb3MgPSB0aGlzLm5leHRJbmRleCh0aGlzLnBvcyk7XG59O1xuXG5SZWdFeHBWYWxpZGF0aW9uU3RhdGUucHJvdG90eXBlLmVhdCA9IGZ1bmN0aW9uIGVhdCAoY2gpIHtcbiAgaWYgKHRoaXMuY3VycmVudCgpID09PSBjaCkge1xuICAgIHRoaXMuYWR2YW5jZSgpO1xuICAgIHJldHVybiB0cnVlXG4gIH1cbiAgcmV0dXJuIGZhbHNlXG59O1xuXG5mdW5jdGlvbiBjb2RlUG9pbnRUb1N0cmluZyQxKGNoKSB7XG4gIGlmIChjaCA8PSAweEZGRkYpIHsgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoY2gpIH1cbiAgY2ggLT0gMHgxMDAwMDtcbiAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoKGNoID4+IDEwKSArIDB4RDgwMCwgKGNoICYgMHgwM0ZGKSArIDB4REMwMClcbn1cblxuLyoqXG4gKiBWYWxpZGF0ZSB0aGUgZmxhZ3MgcGFydCBvZiBhIGdpdmVuIFJlZ0V4cExpdGVyYWwuXG4gKlxuICogQHBhcmFtIHtSZWdFeHBWYWxpZGF0aW9uU3RhdGV9IHN0YXRlIFRoZSBzdGF0ZSB0byB2YWxpZGF0ZSBSZWdFeHAuXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xucHAkOS52YWxpZGF0ZVJlZ0V4cEZsYWdzID0gZnVuY3Rpb24oc3RhdGUpIHtcbiAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgdmFyIHZhbGlkRmxhZ3MgPSBzdGF0ZS52YWxpZEZsYWdzO1xuICB2YXIgZmxhZ3MgPSBzdGF0ZS5mbGFncztcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGZsYWdzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGZsYWcgPSBmbGFncy5jaGFyQXQoaSk7XG4gICAgaWYgKHZhbGlkRmxhZ3MuaW5kZXhPZihmbGFnKSA9PT0gLTEpIHtcbiAgICAgIHRoaXMkMS5yYWlzZShzdGF0ZS5zdGFydCwgXCJJbnZhbGlkIHJlZ3VsYXIgZXhwcmVzc2lvbiBmbGFnXCIpO1xuICAgIH1cbiAgICBpZiAoZmxhZ3MuaW5kZXhPZihmbGFnLCBpICsgMSkgPiAtMSkge1xuICAgICAgdGhpcyQxLnJhaXNlKHN0YXRlLnN0YXJ0LCBcIkR1cGxpY2F0ZSByZWd1bGFyIGV4cHJlc3Npb24gZmxhZ1wiKTtcbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogVmFsaWRhdGUgdGhlIHBhdHRlcm4gcGFydCBvZiBhIGdpdmVuIFJlZ0V4cExpdGVyYWwuXG4gKlxuICogQHBhcmFtIHtSZWdFeHBWYWxpZGF0aW9uU3RhdGV9IHN0YXRlIFRoZSBzdGF0ZSB0byB2YWxpZGF0ZSBSZWdFeHAuXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xucHAkOS52YWxpZGF0ZVJlZ0V4cFBhdHRlcm4gPSBmdW5jdGlvbihzdGF0ZSkge1xuICB0aGlzLnJlZ2V4cF9wYXR0ZXJuKHN0YXRlKTtcblxuICAvLyBUaGUgZ29hbCBzeW1ib2wgZm9yIHRoZSBwYXJzZSBpcyB8UGF0dGVyblt+VSwgfk5dfC4gSWYgdGhlIHJlc3VsdCBvZlxuICAvLyBwYXJzaW5nIGNvbnRhaW5zIGEgfEdyb3VwTmFtZXwsIHJlcGFyc2Ugd2l0aCB0aGUgZ29hbCBzeW1ib2xcbiAgLy8gfFBhdHRlcm5bflUsICtOXXwgYW5kIHVzZSB0aGlzIHJlc3VsdCBpbnN0ZWFkLiBUaHJvdyBhICpTeW50YXhFcnJvcipcbiAgLy8gZXhjZXB0aW9uIGlmIF9QXyBkaWQgbm90IGNvbmZvcm0gdG8gdGhlIGdyYW1tYXIsIGlmIGFueSBlbGVtZW50cyBvZiBfUF9cbiAgLy8gd2VyZSBub3QgbWF0Y2hlZCBieSB0aGUgcGFyc2UsIG9yIGlmIGFueSBFYXJseSBFcnJvciBjb25kaXRpb25zIGV4aXN0LlxuICBpZiAoIXN0YXRlLnN3aXRjaE4gJiYgdGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uID49IDkgJiYgc3RhdGUuZ3JvdXBOYW1lcy5sZW5ndGggPiAwKSB7XG4gICAgc3RhdGUuc3dpdGNoTiA9IHRydWU7XG4gICAgdGhpcy5yZWdleHBfcGF0dGVybihzdGF0ZSk7XG4gIH1cbn07XG5cbi8vIGh0dHBzOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvOC4wLyNwcm9kLVBhdHRlcm5cbnBwJDkucmVnZXhwX3BhdHRlcm4gPSBmdW5jdGlvbihzdGF0ZSkge1xuICBzdGF0ZS5wb3MgPSAwO1xuICBzdGF0ZS5sYXN0SW50VmFsdWUgPSAwO1xuICBzdGF0ZS5sYXN0U3RyaW5nVmFsdWUgPSBcIlwiO1xuICBzdGF0ZS5sYXN0QXNzZXJ0aW9uSXNRdWFudGlmaWFibGUgPSBmYWxzZTtcbiAgc3RhdGUubnVtQ2FwdHVyaW5nUGFyZW5zID0gMDtcbiAgc3RhdGUubWF4QmFja1JlZmVyZW5jZSA9IDA7XG4gIHN0YXRlLmdyb3VwTmFtZXMubGVuZ3RoID0gMDtcbiAgc3RhdGUuYmFja1JlZmVyZW5jZU5hbWVzLmxlbmd0aCA9IDA7XG5cbiAgdGhpcy5yZWdleHBfZGlzanVuY3Rpb24oc3RhdGUpO1xuXG4gIGlmIChzdGF0ZS5wb3MgIT09IHN0YXRlLnNvdXJjZS5sZW5ndGgpIHtcbiAgICAvLyBNYWtlIHRoZSBzYW1lIG1lc3NhZ2VzIGFzIFY4LlxuICAgIGlmIChzdGF0ZS5lYXQoMHgyOSAvKiApICovKSkge1xuICAgICAgc3RhdGUucmFpc2UoXCJVbm1hdGNoZWQgJyknXCIpO1xuICAgIH1cbiAgICBpZiAoc3RhdGUuZWF0KDB4NUQgLyogWyAqLykgfHwgc3RhdGUuZWF0KDB4N0QgLyogfSAqLykpIHtcbiAgICAgIHN0YXRlLnJhaXNlKFwiTG9uZSBxdWFudGlmaWVyIGJyYWNrZXRzXCIpO1xuICAgIH1cbiAgfVxuICBpZiAoc3RhdGUubWF4QmFja1JlZmVyZW5jZSA+IHN0YXRlLm51bUNhcHR1cmluZ1BhcmVucykge1xuICAgIHN0YXRlLnJhaXNlKFwiSW52YWxpZCBlc2NhcGVcIik7XG4gIH1cbiAgZm9yICh2YXIgaSA9IDAsIGxpc3QgPSBzdGF0ZS5iYWNrUmVmZXJlbmNlTmFtZXM7IGkgPCBsaXN0Lmxlbmd0aDsgaSArPSAxKSB7XG4gICAgdmFyIG5hbWUgPSBsaXN0W2ldO1xuXG4gICAgaWYgKHN0YXRlLmdyb3VwTmFtZXMuaW5kZXhPZihuYW1lKSA9PT0gLTEpIHtcbiAgICAgIHN0YXRlLnJhaXNlKFwiSW52YWxpZCBuYW1lZCBjYXB0dXJlIHJlZmVyZW5jZWRcIik7XG4gICAgfVxuICB9XG59O1xuXG4vLyBodHRwczovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzguMC8jcHJvZC1EaXNqdW5jdGlvblxucHAkOS5yZWdleHBfZGlzanVuY3Rpb24gPSBmdW5jdGlvbihzdGF0ZSkge1xuICB2YXIgdGhpcyQxID0gdGhpcztcblxuICB0aGlzLnJlZ2V4cF9hbHRlcm5hdGl2ZShzdGF0ZSk7XG4gIHdoaWxlIChzdGF0ZS5lYXQoMHg3QyAvKiB8ICovKSkge1xuICAgIHRoaXMkMS5yZWdleHBfYWx0ZXJuYXRpdmUoc3RhdGUpO1xuICB9XG5cbiAgLy8gTWFrZSB0aGUgc2FtZSBtZXNzYWdlIGFzIFY4LlxuICBpZiAodGhpcy5yZWdleHBfZWF0UXVhbnRpZmllcihzdGF0ZSwgdHJ1ZSkpIHtcbiAgICBzdGF0ZS5yYWlzZShcIk5vdGhpbmcgdG8gcmVwZWF0XCIpO1xuICB9XG4gIGlmIChzdGF0ZS5lYXQoMHg3QiAvKiB7ICovKSkge1xuICAgIHN0YXRlLnJhaXNlKFwiTG9uZSBxdWFudGlmaWVyIGJyYWNrZXRzXCIpO1xuICB9XG59O1xuXG4vLyBodHRwczovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzguMC8jcHJvZC1BbHRlcm5hdGl2ZVxucHAkOS5yZWdleHBfYWx0ZXJuYXRpdmUgPSBmdW5jdGlvbihzdGF0ZSkge1xuICB3aGlsZSAoc3RhdGUucG9zIDwgc3RhdGUuc291cmNlLmxlbmd0aCAmJiB0aGlzLnJlZ2V4cF9lYXRUZXJtKHN0YXRlKSlcbiAgICB7ICB9XG59O1xuXG4vLyBodHRwczovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzguMC8jcHJvZC1hbm5leEItVGVybVxucHAkOS5yZWdleHBfZWF0VGVybSA9IGZ1bmN0aW9uKHN0YXRlKSB7XG4gIGlmICh0aGlzLnJlZ2V4cF9lYXRBc3NlcnRpb24oc3RhdGUpKSB7XG4gICAgLy8gSGFuZGxlIGBRdWFudGlmaWFibGVBc3NlcnRpb24gUXVhbnRpZmllcmAgYWx0ZXJuYXRpdmUuXG4gICAgLy8gYHN0YXRlLmxhc3RBc3NlcnRpb25Jc1F1YW50aWZpYWJsZWAgaXMgdHJ1ZSBpZiB0aGUgbGFzdCBlYXRlbiBBc3NlcnRpb25cbiAgICAvLyBpcyBhIFF1YW50aWZpYWJsZUFzc2VydGlvbi5cbiAgICBpZiAoc3RhdGUubGFzdEFzc2VydGlvbklzUXVhbnRpZmlhYmxlICYmIHRoaXMucmVnZXhwX2VhdFF1YW50aWZpZXIoc3RhdGUpKSB7XG4gICAgICAvLyBNYWtlIHRoZSBzYW1lIG1lc3NhZ2UgYXMgVjguXG4gICAgICBpZiAoc3RhdGUuc3dpdGNoVSkge1xuICAgICAgICBzdGF0ZS5yYWlzZShcIkludmFsaWQgcXVhbnRpZmllclwiKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIGlmIChzdGF0ZS5zd2l0Y2hVID8gdGhpcy5yZWdleHBfZWF0QXRvbShzdGF0ZSkgOiB0aGlzLnJlZ2V4cF9lYXRFeHRlbmRlZEF0b20oc3RhdGUpKSB7XG4gICAgdGhpcy5yZWdleHBfZWF0UXVhbnRpZmllcihzdGF0ZSk7XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIHJldHVybiBmYWxzZVxufTtcblxuLy8gaHR0cHM6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi84LjAvI3Byb2QtYW5uZXhCLUFzc2VydGlvblxucHAkOS5yZWdleHBfZWF0QXNzZXJ0aW9uID0gZnVuY3Rpb24oc3RhdGUpIHtcbiAgdmFyIHN0YXJ0ID0gc3RhdGUucG9zO1xuICBzdGF0ZS5sYXN0QXNzZXJ0aW9uSXNRdWFudGlmaWFibGUgPSBmYWxzZTtcblxuICAvLyBeLCAkXG4gIGlmIChzdGF0ZS5lYXQoMHg1RSAvKiBeICovKSB8fCBzdGF0ZS5lYXQoMHgyNCAvKiAkICovKSkge1xuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICAvLyBcXGIgXFxCXG4gIGlmIChzdGF0ZS5lYXQoMHg1QyAvKiBcXCAqLykpIHtcbiAgICBpZiAoc3RhdGUuZWF0KDB4NDIgLyogQiAqLykgfHwgc3RhdGUuZWF0KDB4NjIgLyogYiAqLykpIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICAgIHN0YXRlLnBvcyA9IHN0YXJ0O1xuICB9XG5cbiAgLy8gTG9va2FoZWFkIC8gTG9va2JlaGluZFxuICBpZiAoc3RhdGUuZWF0KDB4MjggLyogKCAqLykgJiYgc3RhdGUuZWF0KDB4M0YgLyogPyAqLykpIHtcbiAgICB2YXIgbG9va2JlaGluZCA9IGZhbHNlO1xuICAgIGlmICh0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24gPj0gOSkge1xuICAgICAgbG9va2JlaGluZCA9IHN0YXRlLmVhdCgweDNDIC8qIDwgKi8pO1xuICAgIH1cbiAgICBpZiAoc3RhdGUuZWF0KDB4M0QgLyogPSAqLykgfHwgc3RhdGUuZWF0KDB4MjEgLyogISAqLykpIHtcbiAgICAgIHRoaXMucmVnZXhwX2Rpc2p1bmN0aW9uKHN0YXRlKTtcbiAgICAgIGlmICghc3RhdGUuZWF0KDB4MjkgLyogKSAqLykpIHtcbiAgICAgICAgc3RhdGUucmFpc2UoXCJVbnRlcm1pbmF0ZWQgZ3JvdXBcIik7XG4gICAgICB9XG4gICAgICBzdGF0ZS5sYXN0QXNzZXJ0aW9uSXNRdWFudGlmaWFibGUgPSAhbG9va2JlaGluZDtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICB9XG5cbiAgc3RhdGUucG9zID0gc3RhcnQ7XG4gIHJldHVybiBmYWxzZVxufTtcblxuLy8gaHR0cHM6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi84LjAvI3Byb2QtUXVhbnRpZmllclxucHAkOS5yZWdleHBfZWF0UXVhbnRpZmllciA9IGZ1bmN0aW9uKHN0YXRlLCBub0Vycm9yKSB7XG4gIGlmICggbm9FcnJvciA9PT0gdm9pZCAwICkgbm9FcnJvciA9IGZhbHNlO1xuXG4gIGlmICh0aGlzLnJlZ2V4cF9lYXRRdWFudGlmaWVyUHJlZml4KHN0YXRlLCBub0Vycm9yKSkge1xuICAgIHN0YXRlLmVhdCgweDNGIC8qID8gKi8pO1xuICAgIHJldHVybiB0cnVlXG4gIH1cbiAgcmV0dXJuIGZhbHNlXG59O1xuXG4vLyBodHRwczovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzguMC8jcHJvZC1RdWFudGlmaWVyUHJlZml4XG5wcCQ5LnJlZ2V4cF9lYXRRdWFudGlmaWVyUHJlZml4ID0gZnVuY3Rpb24oc3RhdGUsIG5vRXJyb3IpIHtcbiAgcmV0dXJuIChcbiAgICBzdGF0ZS5lYXQoMHgyQSAvKiAqICovKSB8fFxuICAgIHN0YXRlLmVhdCgweDJCIC8qICsgKi8pIHx8XG4gICAgc3RhdGUuZWF0KDB4M0YgLyogPyAqLykgfHxcbiAgICB0aGlzLnJlZ2V4cF9lYXRCcmFjZWRRdWFudGlmaWVyKHN0YXRlLCBub0Vycm9yKVxuICApXG59O1xucHAkOS5yZWdleHBfZWF0QnJhY2VkUXVhbnRpZmllciA9IGZ1bmN0aW9uKHN0YXRlLCBub0Vycm9yKSB7XG4gIHZhciBzdGFydCA9IHN0YXRlLnBvcztcbiAgaWYgKHN0YXRlLmVhdCgweDdCIC8qIHsgKi8pKSB7XG4gICAgdmFyIG1pbiA9IDAsIG1heCA9IC0xO1xuICAgIGlmICh0aGlzLnJlZ2V4cF9lYXREZWNpbWFsRGlnaXRzKHN0YXRlKSkge1xuICAgICAgbWluID0gc3RhdGUubGFzdEludFZhbHVlO1xuICAgICAgaWYgKHN0YXRlLmVhdCgweDJDIC8qICwgKi8pICYmIHRoaXMucmVnZXhwX2VhdERlY2ltYWxEaWdpdHMoc3RhdGUpKSB7XG4gICAgICAgIG1heCA9IHN0YXRlLmxhc3RJbnRWYWx1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChzdGF0ZS5lYXQoMHg3RCAvKiB9ICovKSkge1xuICAgICAgICAvLyBTeW50YXhFcnJvciBpbiBodHRwczovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzguMC8jc2VjLXRlcm1cbiAgICAgICAgaWYgKG1heCAhPT0gLTEgJiYgbWF4IDwgbWluICYmICFub0Vycm9yKSB7XG4gICAgICAgICAgc3RhdGUucmFpc2UoXCJudW1iZXJzIG91dCBvZiBvcmRlciBpbiB7fSBxdWFudGlmaWVyXCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9XG4gICAgfVxuICAgIGlmIChzdGF0ZS5zd2l0Y2hVICYmICFub0Vycm9yKSB7XG4gICAgICBzdGF0ZS5yYWlzZShcIkluY29tcGxldGUgcXVhbnRpZmllclwiKTtcbiAgICB9XG4gICAgc3RhdGUucG9zID0gc3RhcnQ7XG4gIH1cbiAgcmV0dXJuIGZhbHNlXG59O1xuXG4vLyBodHRwczovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzguMC8jcHJvZC1BdG9tXG5wcCQ5LnJlZ2V4cF9lYXRBdG9tID0gZnVuY3Rpb24oc3RhdGUpIHtcbiAgcmV0dXJuIChcbiAgICB0aGlzLnJlZ2V4cF9lYXRQYXR0ZXJuQ2hhcmFjdGVycyhzdGF0ZSkgfHxcbiAgICBzdGF0ZS5lYXQoMHgyRSAvKiAuICovKSB8fFxuICAgIHRoaXMucmVnZXhwX2VhdFJldmVyc2VTb2xpZHVzQXRvbUVzY2FwZShzdGF0ZSkgfHxcbiAgICB0aGlzLnJlZ2V4cF9lYXRDaGFyYWN0ZXJDbGFzcyhzdGF0ZSkgfHxcbiAgICB0aGlzLnJlZ2V4cF9lYXRVbmNhcHR1cmluZ0dyb3VwKHN0YXRlKSB8fFxuICAgIHRoaXMucmVnZXhwX2VhdENhcHR1cmluZ0dyb3VwKHN0YXRlKVxuICApXG59O1xucHAkOS5yZWdleHBfZWF0UmV2ZXJzZVNvbGlkdXNBdG9tRXNjYXBlID0gZnVuY3Rpb24oc3RhdGUpIHtcbiAgdmFyIHN0YXJ0ID0gc3RhdGUucG9zO1xuICBpZiAoc3RhdGUuZWF0KDB4NUMgLyogXFwgKi8pKSB7XG4gICAgaWYgKHRoaXMucmVnZXhwX2VhdEF0b21Fc2NhcGUoc3RhdGUpKSB7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgICBzdGF0ZS5wb3MgPSBzdGFydDtcbiAgfVxuICByZXR1cm4gZmFsc2Vcbn07XG5wcCQ5LnJlZ2V4cF9lYXRVbmNhcHR1cmluZ0dyb3VwID0gZnVuY3Rpb24oc3RhdGUpIHtcbiAgdmFyIHN0YXJ0ID0gc3RhdGUucG9zO1xuICBpZiAoc3RhdGUuZWF0KDB4MjggLyogKCAqLykpIHtcbiAgICBpZiAoc3RhdGUuZWF0KDB4M0YgLyogPyAqLykgJiYgc3RhdGUuZWF0KDB4M0EgLyogOiAqLykpIHtcbiAgICAgIHRoaXMucmVnZXhwX2Rpc2p1bmN0aW9uKHN0YXRlKTtcbiAgICAgIGlmIChzdGF0ZS5lYXQoMHgyOSAvKiApICovKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfVxuICAgICAgc3RhdGUucmFpc2UoXCJVbnRlcm1pbmF0ZWQgZ3JvdXBcIik7XG4gICAgfVxuICAgIHN0YXRlLnBvcyA9IHN0YXJ0O1xuICB9XG4gIHJldHVybiBmYWxzZVxufTtcbnBwJDkucmVnZXhwX2VhdENhcHR1cmluZ0dyb3VwID0gZnVuY3Rpb24oc3RhdGUpIHtcbiAgaWYgKHN0YXRlLmVhdCgweDI4IC8qICggKi8pKSB7XG4gICAgaWYgKHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA+PSA5KSB7XG4gICAgICB0aGlzLnJlZ2V4cF9ncm91cFNwZWNpZmllcihzdGF0ZSk7XG4gICAgfSBlbHNlIGlmIChzdGF0ZS5jdXJyZW50KCkgPT09IDB4M0YgLyogPyAqLykge1xuICAgICAgc3RhdGUucmFpc2UoXCJJbnZhbGlkIGdyb3VwXCIpO1xuICAgIH1cbiAgICB0aGlzLnJlZ2V4cF9kaXNqdW5jdGlvbihzdGF0ZSk7XG4gICAgaWYgKHN0YXRlLmVhdCgweDI5IC8qICkgKi8pKSB7XG4gICAgICBzdGF0ZS5udW1DYXB0dXJpbmdQYXJlbnMgKz0gMTtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICAgIHN0YXRlLnJhaXNlKFwiVW50ZXJtaW5hdGVkIGdyb3VwXCIpO1xuICB9XG4gIHJldHVybiBmYWxzZVxufTtcblxuLy8gaHR0cHM6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi84LjAvI3Byb2QtYW5uZXhCLUV4dGVuZGVkQXRvbVxucHAkOS5yZWdleHBfZWF0RXh0ZW5kZWRBdG9tID0gZnVuY3Rpb24oc3RhdGUpIHtcbiAgcmV0dXJuIChcbiAgICBzdGF0ZS5lYXQoMHgyRSAvKiAuICovKSB8fFxuICAgIHRoaXMucmVnZXhwX2VhdFJldmVyc2VTb2xpZHVzQXRvbUVzY2FwZShzdGF0ZSkgfHxcbiAgICB0aGlzLnJlZ2V4cF9lYXRDaGFyYWN0ZXJDbGFzcyhzdGF0ZSkgfHxcbiAgICB0aGlzLnJlZ2V4cF9lYXRVbmNhcHR1cmluZ0dyb3VwKHN0YXRlKSB8fFxuICAgIHRoaXMucmVnZXhwX2VhdENhcHR1cmluZ0dyb3VwKHN0YXRlKSB8fFxuICAgIHRoaXMucmVnZXhwX2VhdEludmFsaWRCcmFjZWRRdWFudGlmaWVyKHN0YXRlKSB8fFxuICAgIHRoaXMucmVnZXhwX2VhdEV4dGVuZGVkUGF0dGVybkNoYXJhY3RlcihzdGF0ZSlcbiAgKVxufTtcblxuLy8gaHR0cHM6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi84LjAvI3Byb2QtYW5uZXhCLUludmFsaWRCcmFjZWRRdWFudGlmaWVyXG5wcCQ5LnJlZ2V4cF9lYXRJbnZhbGlkQnJhY2VkUXVhbnRpZmllciA9IGZ1bmN0aW9uKHN0YXRlKSB7XG4gIGlmICh0aGlzLnJlZ2V4cF9lYXRCcmFjZWRRdWFudGlmaWVyKHN0YXRlLCB0cnVlKSkge1xuICAgIHN0YXRlLnJhaXNlKFwiTm90aGluZyB0byByZXBlYXRcIik7XG4gIH1cbiAgcmV0dXJuIGZhbHNlXG59O1xuXG4vLyBodHRwczovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzguMC8jcHJvZC1TeW50YXhDaGFyYWN0ZXJcbnBwJDkucmVnZXhwX2VhdFN5bnRheENoYXJhY3RlciA9IGZ1bmN0aW9uKHN0YXRlKSB7XG4gIHZhciBjaCA9IHN0YXRlLmN1cnJlbnQoKTtcbiAgaWYgKGlzU3ludGF4Q2hhcmFjdGVyKGNoKSkge1xuICAgIHN0YXRlLmxhc3RJbnRWYWx1ZSA9IGNoO1xuICAgIHN0YXRlLmFkdmFuY2UoKTtcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG4gIHJldHVybiBmYWxzZVxufTtcbmZ1bmN0aW9uIGlzU3ludGF4Q2hhcmFjdGVyKGNoKSB7XG4gIHJldHVybiAoXG4gICAgY2ggPT09IDB4MjQgLyogJCAqLyB8fFxuICAgIGNoID49IDB4MjggLyogKCAqLyAmJiBjaCA8PSAweDJCIC8qICsgKi8gfHxcbiAgICBjaCA9PT0gMHgyRSAvKiAuICovIHx8XG4gICAgY2ggPT09IDB4M0YgLyogPyAqLyB8fFxuICAgIGNoID49IDB4NUIgLyogWyAqLyAmJiBjaCA8PSAweDVFIC8qIF4gKi8gfHxcbiAgICBjaCA+PSAweDdCIC8qIHsgKi8gJiYgY2ggPD0gMHg3RCAvKiB9ICovXG4gIClcbn1cblxuLy8gaHR0cHM6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi84LjAvI3Byb2QtUGF0dGVybkNoYXJhY3RlclxuLy8gQnV0IGVhdCBlYWdlci5cbnBwJDkucmVnZXhwX2VhdFBhdHRlcm5DaGFyYWN0ZXJzID0gZnVuY3Rpb24oc3RhdGUpIHtcbiAgdmFyIHN0YXJ0ID0gc3RhdGUucG9zO1xuICB2YXIgY2ggPSAwO1xuICB3aGlsZSAoKGNoID0gc3RhdGUuY3VycmVudCgpKSAhPT0gLTEgJiYgIWlzU3ludGF4Q2hhcmFjdGVyKGNoKSkge1xuICAgIHN0YXRlLmFkdmFuY2UoKTtcbiAgfVxuICByZXR1cm4gc3RhdGUucG9zICE9PSBzdGFydFxufTtcblxuLy8gaHR0cHM6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi84LjAvI3Byb2QtYW5uZXhCLUV4dGVuZGVkUGF0dGVybkNoYXJhY3RlclxucHAkOS5yZWdleHBfZWF0RXh0ZW5kZWRQYXR0ZXJuQ2hhcmFjdGVyID0gZnVuY3Rpb24oc3RhdGUpIHtcbiAgdmFyIGNoID0gc3RhdGUuY3VycmVudCgpO1xuICBpZiAoXG4gICAgY2ggIT09IC0xICYmXG4gICAgY2ggIT09IDB4MjQgLyogJCAqLyAmJlxuICAgICEoY2ggPj0gMHgyOCAvKiAoICovICYmIGNoIDw9IDB4MkIgLyogKyAqLykgJiZcbiAgICBjaCAhPT0gMHgyRSAvKiAuICovICYmXG4gICAgY2ggIT09IDB4M0YgLyogPyAqLyAmJlxuICAgIGNoICE9PSAweDVCIC8qIFsgKi8gJiZcbiAgICBjaCAhPT0gMHg1RSAvKiBeICovICYmXG4gICAgY2ggIT09IDB4N0MgLyogfCAqL1xuICApIHtcbiAgICBzdGF0ZS5hZHZhbmNlKCk7XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuICByZXR1cm4gZmFsc2Vcbn07XG5cbi8vIEdyb3VwU3BlY2lmaWVyW1VdIDo6XG4vLyAgIFtlbXB0eV1cbi8vICAgYD9gIEdyb3VwTmFtZVs/VV1cbnBwJDkucmVnZXhwX2dyb3VwU3BlY2lmaWVyID0gZnVuY3Rpb24oc3RhdGUpIHtcbiAgaWYgKHN0YXRlLmVhdCgweDNGIC8qID8gKi8pKSB7XG4gICAgaWYgKHRoaXMucmVnZXhwX2VhdEdyb3VwTmFtZShzdGF0ZSkpIHtcbiAgICAgIGlmIChzdGF0ZS5ncm91cE5hbWVzLmluZGV4T2Yoc3RhdGUubGFzdFN0cmluZ1ZhbHVlKSAhPT0gLTEpIHtcbiAgICAgICAgc3RhdGUucmFpc2UoXCJEdXBsaWNhdGUgY2FwdHVyZSBncm91cCBuYW1lXCIpO1xuICAgICAgfVxuICAgICAgc3RhdGUuZ3JvdXBOYW1lcy5wdXNoKHN0YXRlLmxhc3RTdHJpbmdWYWx1ZSk7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgc3RhdGUucmFpc2UoXCJJbnZhbGlkIGdyb3VwXCIpO1xuICB9XG59O1xuXG4vLyBHcm91cE5hbWVbVV0gOjpcbi8vICAgYDxgIFJlZ0V4cElkZW50aWZpZXJOYW1lWz9VXSBgPmBcbi8vIE5vdGU6IHRoaXMgdXBkYXRlcyBgc3RhdGUubGFzdFN0cmluZ1ZhbHVlYCBwcm9wZXJ0eSB3aXRoIHRoZSBlYXRlbiBuYW1lLlxucHAkOS5yZWdleHBfZWF0R3JvdXBOYW1lID0gZnVuY3Rpb24oc3RhdGUpIHtcbiAgc3RhdGUubGFzdFN0cmluZ1ZhbHVlID0gXCJcIjtcbiAgaWYgKHN0YXRlLmVhdCgweDNDIC8qIDwgKi8pKSB7XG4gICAgaWYgKHRoaXMucmVnZXhwX2VhdFJlZ0V4cElkZW50aWZpZXJOYW1lKHN0YXRlKSAmJiBzdGF0ZS5lYXQoMHgzRSAvKiA+ICovKSkge1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gICAgc3RhdGUucmFpc2UoXCJJbnZhbGlkIGNhcHR1cmUgZ3JvdXAgbmFtZVwiKTtcbiAgfVxuICByZXR1cm4gZmFsc2Vcbn07XG5cbi8vIFJlZ0V4cElkZW50aWZpZXJOYW1lW1VdIDo6XG4vLyAgIFJlZ0V4cElkZW50aWZpZXJTdGFydFs/VV1cbi8vICAgUmVnRXhwSWRlbnRpZmllck5hbWVbP1VdIFJlZ0V4cElkZW50aWZpZXJQYXJ0Wz9VXVxuLy8gTm90ZTogdGhpcyB1cGRhdGVzIGBzdGF0ZS5sYXN0U3RyaW5nVmFsdWVgIHByb3BlcnR5IHdpdGggdGhlIGVhdGVuIG5hbWUuXG5wcCQ5LnJlZ2V4cF9lYXRSZWdFeHBJZGVudGlmaWVyTmFtZSA9IGZ1bmN0aW9uKHN0YXRlKSB7XG4gIHN0YXRlLmxhc3RTdHJpbmdWYWx1ZSA9IFwiXCI7XG4gIGlmICh0aGlzLnJlZ2V4cF9lYXRSZWdFeHBJZGVudGlmaWVyU3RhcnQoc3RhdGUpKSB7XG4gICAgc3RhdGUubGFzdFN0cmluZ1ZhbHVlICs9IGNvZGVQb2ludFRvU3RyaW5nJDEoc3RhdGUubGFzdEludFZhbHVlKTtcbiAgICB3aGlsZSAodGhpcy5yZWdleHBfZWF0UmVnRXhwSWRlbnRpZmllclBhcnQoc3RhdGUpKSB7XG4gICAgICBzdGF0ZS5sYXN0U3RyaW5nVmFsdWUgKz0gY29kZVBvaW50VG9TdHJpbmckMShzdGF0ZS5sYXN0SW50VmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZVxuICB9XG4gIHJldHVybiBmYWxzZVxufTtcblxuLy8gUmVnRXhwSWRlbnRpZmllclN0YXJ0W1VdIDo6XG4vLyAgIFVuaWNvZGVJRFN0YXJ0XG4vLyAgIGAkYFxuLy8gICBgX2Bcbi8vICAgYFxcYCBSZWdFeHBVbmljb2RlRXNjYXBlU2VxdWVuY2VbP1VdXG5wcCQ5LnJlZ2V4cF9lYXRSZWdFeHBJZGVudGlmaWVyU3RhcnQgPSBmdW5jdGlvbihzdGF0ZSkge1xuICB2YXIgc3RhcnQgPSBzdGF0ZS5wb3M7XG4gIHZhciBjaCA9IHN0YXRlLmN1cnJlbnQoKTtcbiAgc3RhdGUuYWR2YW5jZSgpO1xuXG4gIGlmIChjaCA9PT0gMHg1QyAvKiBcXCAqLyAmJiB0aGlzLnJlZ2V4cF9lYXRSZWdFeHBVbmljb2RlRXNjYXBlU2VxdWVuY2Uoc3RhdGUpKSB7XG4gICAgY2ggPSBzdGF0ZS5sYXN0SW50VmFsdWU7XG4gIH1cbiAgaWYgKGlzUmVnRXhwSWRlbnRpZmllclN0YXJ0KGNoKSkge1xuICAgIHN0YXRlLmxhc3RJbnRWYWx1ZSA9IGNoO1xuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICBzdGF0ZS5wb3MgPSBzdGFydDtcbiAgcmV0dXJuIGZhbHNlXG59O1xuZnVuY3Rpb24gaXNSZWdFeHBJZGVudGlmaWVyU3RhcnQoY2gpIHtcbiAgcmV0dXJuIGlzSWRlbnRpZmllclN0YXJ0KGNoLCB0cnVlKSB8fCBjaCA9PT0gMHgyNCAvKiAkICovIHx8IGNoID09PSAweDVGIC8qIF8gKi9cbn1cblxuLy8gUmVnRXhwSWRlbnRpZmllclBhcnRbVV0gOjpcbi8vICAgVW5pY29kZUlEQ29udGludWVcbi8vICAgYCRgXG4vLyAgIGBfYFxuLy8gICBgXFxgIFJlZ0V4cFVuaWNvZGVFc2NhcGVTZXF1ZW5jZVs/VV1cbi8vICAgPFpXTko+XG4vLyAgIDxaV0o+XG5wcCQ5LnJlZ2V4cF9lYXRSZWdFeHBJZGVudGlmaWVyUGFydCA9IGZ1bmN0aW9uKHN0YXRlKSB7XG4gIHZhciBzdGFydCA9IHN0YXRlLnBvcztcbiAgdmFyIGNoID0gc3RhdGUuY3VycmVudCgpO1xuICBzdGF0ZS5hZHZhbmNlKCk7XG5cbiAgaWYgKGNoID09PSAweDVDIC8qIFxcICovICYmIHRoaXMucmVnZXhwX2VhdFJlZ0V4cFVuaWNvZGVFc2NhcGVTZXF1ZW5jZShzdGF0ZSkpIHtcbiAgICBjaCA9IHN0YXRlLmxhc3RJbnRWYWx1ZTtcbiAgfVxuICBpZiAoaXNSZWdFeHBJZGVudGlmaWVyUGFydChjaCkpIHtcbiAgICBzdGF0ZS5sYXN0SW50VmFsdWUgPSBjaDtcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgc3RhdGUucG9zID0gc3RhcnQ7XG4gIHJldHVybiBmYWxzZVxufTtcbmZ1bmN0aW9uIGlzUmVnRXhwSWRlbnRpZmllclBhcnQoY2gpIHtcbiAgcmV0dXJuIGlzSWRlbnRpZmllckNoYXIoY2gsIHRydWUpIHx8IGNoID09PSAweDI0IC8qICQgKi8gfHwgY2ggPT09IDB4NUYgLyogXyAqLyB8fCBjaCA9PT0gMHgyMDBDIC8qIDxaV05KPiAqLyB8fCBjaCA9PT0gMHgyMDBEIC8qIDxaV0o+ICovXG59XG5cbi8vIGh0dHBzOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvOC4wLyNwcm9kLWFubmV4Qi1BdG9tRXNjYXBlXG5wcCQ5LnJlZ2V4cF9lYXRBdG9tRXNjYXBlID0gZnVuY3Rpb24oc3RhdGUpIHtcbiAgaWYgKFxuICAgIHRoaXMucmVnZXhwX2VhdEJhY2tSZWZlcmVuY2Uoc3RhdGUpIHx8XG4gICAgdGhpcy5yZWdleHBfZWF0Q2hhcmFjdGVyQ2xhc3NFc2NhcGUoc3RhdGUpIHx8XG4gICAgdGhpcy5yZWdleHBfZWF0Q2hhcmFjdGVyRXNjYXBlKHN0YXRlKSB8fFxuICAgIChzdGF0ZS5zd2l0Y2hOICYmIHRoaXMucmVnZXhwX2VhdEtHcm91cE5hbWUoc3RhdGUpKVxuICApIHtcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG4gIGlmIChzdGF0ZS5zd2l0Y2hVKSB7XG4gICAgLy8gTWFrZSB0aGUgc2FtZSBtZXNzYWdlIGFzIFY4LlxuICAgIGlmIChzdGF0ZS5jdXJyZW50KCkgPT09IDB4NjMgLyogYyAqLykge1xuICAgICAgc3RhdGUucmFpc2UoXCJJbnZhbGlkIHVuaWNvZGUgZXNjYXBlXCIpO1xuICAgIH1cbiAgICBzdGF0ZS5yYWlzZShcIkludmFsaWQgZXNjYXBlXCIpO1xuICB9XG4gIHJldHVybiBmYWxzZVxufTtcbnBwJDkucmVnZXhwX2VhdEJhY2tSZWZlcmVuY2UgPSBmdW5jdGlvbihzdGF0ZSkge1xuICB2YXIgc3RhcnQgPSBzdGF0ZS5wb3M7XG4gIGlmICh0aGlzLnJlZ2V4cF9lYXREZWNpbWFsRXNjYXBlKHN0YXRlKSkge1xuICAgIHZhciBuID0gc3RhdGUubGFzdEludFZhbHVlO1xuICAgIGlmIChzdGF0ZS5zd2l0Y2hVKSB7XG4gICAgICAvLyBGb3IgU3ludGF4RXJyb3IgaW4gaHR0cHM6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi84LjAvI3NlYy1hdG9tZXNjYXBlXG4gICAgICBpZiAobiA+IHN0YXRlLm1heEJhY2tSZWZlcmVuY2UpIHtcbiAgICAgICAgc3RhdGUubWF4QmFja1JlZmVyZW5jZSA9IG47XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgICBpZiAobiA8PSBzdGF0ZS5udW1DYXB0dXJpbmdQYXJlbnMpIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICAgIHN0YXRlLnBvcyA9IHN0YXJ0O1xuICB9XG4gIHJldHVybiBmYWxzZVxufTtcbnBwJDkucmVnZXhwX2VhdEtHcm91cE5hbWUgPSBmdW5jdGlvbihzdGF0ZSkge1xuICBpZiAoc3RhdGUuZWF0KDB4NkIgLyogayAqLykpIHtcbiAgICBpZiAodGhpcy5yZWdleHBfZWF0R3JvdXBOYW1lKHN0YXRlKSkge1xuICAgICAgc3RhdGUuYmFja1JlZmVyZW5jZU5hbWVzLnB1c2goc3RhdGUubGFzdFN0cmluZ1ZhbHVlKTtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICAgIHN0YXRlLnJhaXNlKFwiSW52YWxpZCBuYW1lZCByZWZlcmVuY2VcIik7XG4gIH1cbiAgcmV0dXJuIGZhbHNlXG59O1xuXG4vLyBodHRwczovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzguMC8jcHJvZC1hbm5leEItQ2hhcmFjdGVyRXNjYXBlXG5wcCQ5LnJlZ2V4cF9lYXRDaGFyYWN0ZXJFc2NhcGUgPSBmdW5jdGlvbihzdGF0ZSkge1xuICByZXR1cm4gKFxuICAgIHRoaXMucmVnZXhwX2VhdENvbnRyb2xFc2NhcGUoc3RhdGUpIHx8XG4gICAgdGhpcy5yZWdleHBfZWF0Q0NvbnRyb2xMZXR0ZXIoc3RhdGUpIHx8XG4gICAgdGhpcy5yZWdleHBfZWF0WmVybyhzdGF0ZSkgfHxcbiAgICB0aGlzLnJlZ2V4cF9lYXRIZXhFc2NhcGVTZXF1ZW5jZShzdGF0ZSkgfHxcbiAgICB0aGlzLnJlZ2V4cF9lYXRSZWdFeHBVbmljb2RlRXNjYXBlU2VxdWVuY2Uoc3RhdGUpIHx8XG4gICAgKCFzdGF0ZS5zd2l0Y2hVICYmIHRoaXMucmVnZXhwX2VhdExlZ2FjeU9jdGFsRXNjYXBlU2VxdWVuY2Uoc3RhdGUpKSB8fFxuICAgIHRoaXMucmVnZXhwX2VhdElkZW50aXR5RXNjYXBlKHN0YXRlKVxuICApXG59O1xucHAkOS5yZWdleHBfZWF0Q0NvbnRyb2xMZXR0ZXIgPSBmdW5jdGlvbihzdGF0ZSkge1xuICB2YXIgc3RhcnQgPSBzdGF0ZS5wb3M7XG4gIGlmIChzdGF0ZS5lYXQoMHg2MyAvKiBjICovKSkge1xuICAgIGlmICh0aGlzLnJlZ2V4cF9lYXRDb250cm9sTGV0dGVyKHN0YXRlKSkge1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gICAgc3RhdGUucG9zID0gc3RhcnQ7XG4gIH1cbiAgcmV0dXJuIGZhbHNlXG59O1xucHAkOS5yZWdleHBfZWF0WmVybyA9IGZ1bmN0aW9uKHN0YXRlKSB7XG4gIGlmIChzdGF0ZS5jdXJyZW50KCkgPT09IDB4MzAgLyogMCAqLyAmJiAhaXNEZWNpbWFsRGlnaXQoc3RhdGUubG9va2FoZWFkKCkpKSB7XG4gICAgc3RhdGUubGFzdEludFZhbHVlID0gMDtcbiAgICBzdGF0ZS5hZHZhbmNlKCk7XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuICByZXR1cm4gZmFsc2Vcbn07XG5cbi8vIGh0dHBzOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvOC4wLyNwcm9kLUNvbnRyb2xFc2NhcGVcbnBwJDkucmVnZXhwX2VhdENvbnRyb2xFc2NhcGUgPSBmdW5jdGlvbihzdGF0ZSkge1xuICB2YXIgY2ggPSBzdGF0ZS5jdXJyZW50KCk7XG4gIGlmIChjaCA9PT0gMHg3NCAvKiB0ICovKSB7XG4gICAgc3RhdGUubGFzdEludFZhbHVlID0gMHgwOTsgLyogXFx0ICovXG4gICAgc3RhdGUuYWR2YW5jZSgpO1xuICAgIHJldHVybiB0cnVlXG4gIH1cbiAgaWYgKGNoID09PSAweDZFIC8qIG4gKi8pIHtcbiAgICBzdGF0ZS5sYXN0SW50VmFsdWUgPSAweDBBOyAvKiBcXG4gKi9cbiAgICBzdGF0ZS5hZHZhbmNlKCk7XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuICBpZiAoY2ggPT09IDB4NzYgLyogdiAqLykge1xuICAgIHN0YXRlLmxhc3RJbnRWYWx1ZSA9IDB4MEI7IC8qIFxcdiAqL1xuICAgIHN0YXRlLmFkdmFuY2UoKTtcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG4gIGlmIChjaCA9PT0gMHg2NiAvKiBmICovKSB7XG4gICAgc3RhdGUubGFzdEludFZhbHVlID0gMHgwQzsgLyogXFxmICovXG4gICAgc3RhdGUuYWR2YW5jZSgpO1xuICAgIHJldHVybiB0cnVlXG4gIH1cbiAgaWYgKGNoID09PSAweDcyIC8qIHIgKi8pIHtcbiAgICBzdGF0ZS5sYXN0SW50VmFsdWUgPSAweDBEOyAvKiBcXHIgKi9cbiAgICBzdGF0ZS5hZHZhbmNlKCk7XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuICByZXR1cm4gZmFsc2Vcbn07XG5cbi8vIGh0dHBzOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvOC4wLyNwcm9kLUNvbnRyb2xMZXR0ZXJcbnBwJDkucmVnZXhwX2VhdENvbnRyb2xMZXR0ZXIgPSBmdW5jdGlvbihzdGF0ZSkge1xuICB2YXIgY2ggPSBzdGF0ZS5jdXJyZW50KCk7XG4gIGlmIChpc0NvbnRyb2xMZXR0ZXIoY2gpKSB7XG4gICAgc3RhdGUubGFzdEludFZhbHVlID0gY2ggJSAweDIwO1xuICAgIHN0YXRlLmFkdmFuY2UoKTtcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG4gIHJldHVybiBmYWxzZVxufTtcbmZ1bmN0aW9uIGlzQ29udHJvbExldHRlcihjaCkge1xuICByZXR1cm4gKFxuICAgIChjaCA+PSAweDQxIC8qIEEgKi8gJiYgY2ggPD0gMHg1QSAvKiBaICovKSB8fFxuICAgIChjaCA+PSAweDYxIC8qIGEgKi8gJiYgY2ggPD0gMHg3QSAvKiB6ICovKVxuICApXG59XG5cbi8vIGh0dHBzOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvOC4wLyNwcm9kLVJlZ0V4cFVuaWNvZGVFc2NhcGVTZXF1ZW5jZVxucHAkOS5yZWdleHBfZWF0UmVnRXhwVW5pY29kZUVzY2FwZVNlcXVlbmNlID0gZnVuY3Rpb24oc3RhdGUpIHtcbiAgdmFyIHN0YXJ0ID0gc3RhdGUucG9zO1xuXG4gIGlmIChzdGF0ZS5lYXQoMHg3NSAvKiB1ICovKSkge1xuICAgIGlmICh0aGlzLnJlZ2V4cF9lYXRGaXhlZEhleERpZ2l0cyhzdGF0ZSwgNCkpIHtcbiAgICAgIHZhciBsZWFkID0gc3RhdGUubGFzdEludFZhbHVlO1xuICAgICAgaWYgKHN0YXRlLnN3aXRjaFUgJiYgbGVhZCA+PSAweEQ4MDAgJiYgbGVhZCA8PSAweERCRkYpIHtcbiAgICAgICAgdmFyIGxlYWRTdXJyb2dhdGVFbmQgPSBzdGF0ZS5wb3M7XG4gICAgICAgIGlmIChzdGF0ZS5lYXQoMHg1QyAvKiBcXCAqLykgJiYgc3RhdGUuZWF0KDB4NzUgLyogdSAqLykgJiYgdGhpcy5yZWdleHBfZWF0Rml4ZWRIZXhEaWdpdHMoc3RhdGUsIDQpKSB7XG4gICAgICAgICAgdmFyIHRyYWlsID0gc3RhdGUubGFzdEludFZhbHVlO1xuICAgICAgICAgIGlmICh0cmFpbCA+PSAweERDMDAgJiYgdHJhaWwgPD0gMHhERkZGKSB7XG4gICAgICAgICAgICBzdGF0ZS5sYXN0SW50VmFsdWUgPSAobGVhZCAtIDB4RDgwMCkgKiAweDQwMCArICh0cmFpbCAtIDB4REMwMCkgKyAweDEwMDAwO1xuICAgICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgc3RhdGUucG9zID0gbGVhZFN1cnJvZ2F0ZUVuZDtcbiAgICAgICAgc3RhdGUubGFzdEludFZhbHVlID0gbGVhZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICAgIGlmIChcbiAgICAgIHN0YXRlLnN3aXRjaFUgJiZcbiAgICAgIHN0YXRlLmVhdCgweDdCIC8qIHsgKi8pICYmXG4gICAgICB0aGlzLnJlZ2V4cF9lYXRIZXhEaWdpdHMoc3RhdGUpICYmXG4gICAgICBzdGF0ZS5lYXQoMHg3RCAvKiB9ICovKSAmJlxuICAgICAgaXNWYWxpZFVuaWNvZGUoc3RhdGUubGFzdEludFZhbHVlKVxuICAgICkge1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gICAgaWYgKHN0YXRlLnN3aXRjaFUpIHtcbiAgICAgIHN0YXRlLnJhaXNlKFwiSW52YWxpZCB1bmljb2RlIGVzY2FwZVwiKTtcbiAgICB9XG4gICAgc3RhdGUucG9zID0gc3RhcnQ7XG4gIH1cblxuICByZXR1cm4gZmFsc2Vcbn07XG5mdW5jdGlvbiBpc1ZhbGlkVW5pY29kZShjaCkge1xuICByZXR1cm4gY2ggPj0gMCAmJiBjaCA8PSAweDEwRkZGRlxufVxuXG4vLyBodHRwczovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzguMC8jcHJvZC1hbm5leEItSWRlbnRpdHlFc2NhcGVcbnBwJDkucmVnZXhwX2VhdElkZW50aXR5RXNjYXBlID0gZnVuY3Rpb24oc3RhdGUpIHtcbiAgaWYgKHN0YXRlLnN3aXRjaFUpIHtcbiAgICBpZiAodGhpcy5yZWdleHBfZWF0U3ludGF4Q2hhcmFjdGVyKHN0YXRlKSkge1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gICAgaWYgKHN0YXRlLmVhdCgweDJGIC8qIC8gKi8pKSB7XG4gICAgICBzdGF0ZS5sYXN0SW50VmFsdWUgPSAweDJGOyAvKiAvICovXG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIHZhciBjaCA9IHN0YXRlLmN1cnJlbnQoKTtcbiAgaWYgKGNoICE9PSAweDYzIC8qIGMgKi8gJiYgKCFzdGF0ZS5zd2l0Y2hOIHx8IGNoICE9PSAweDZCIC8qIGsgKi8pKSB7XG4gICAgc3RhdGUubGFzdEludFZhbHVlID0gY2g7XG4gICAgc3RhdGUuYWR2YW5jZSgpO1xuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICByZXR1cm4gZmFsc2Vcbn07XG5cbi8vIGh0dHBzOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvOC4wLyNwcm9kLURlY2ltYWxFc2NhcGVcbnBwJDkucmVnZXhwX2VhdERlY2ltYWxFc2NhcGUgPSBmdW5jdGlvbihzdGF0ZSkge1xuICBzdGF0ZS5sYXN0SW50VmFsdWUgPSAwO1xuICB2YXIgY2ggPSBzdGF0ZS5jdXJyZW50KCk7XG4gIGlmIChjaCA+PSAweDMxIC8qIDEgKi8gJiYgY2ggPD0gMHgzOSAvKiA5ICovKSB7XG4gICAgZG8ge1xuICAgICAgc3RhdGUubGFzdEludFZhbHVlID0gMTAgKiBzdGF0ZS5sYXN0SW50VmFsdWUgKyAoY2ggLSAweDMwIC8qIDAgKi8pO1xuICAgICAgc3RhdGUuYWR2YW5jZSgpO1xuICAgIH0gd2hpbGUgKChjaCA9IHN0YXRlLmN1cnJlbnQoKSkgPj0gMHgzMCAvKiAwICovICYmIGNoIDw9IDB4MzkgLyogOSAqLylcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG4gIHJldHVybiBmYWxzZVxufTtcblxuLy8gaHR0cHM6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi84LjAvI3Byb2QtQ2hhcmFjdGVyQ2xhc3NFc2NhcGVcbnBwJDkucmVnZXhwX2VhdENoYXJhY3RlckNsYXNzRXNjYXBlID0gZnVuY3Rpb24oc3RhdGUpIHtcbiAgdmFyIGNoID0gc3RhdGUuY3VycmVudCgpO1xuXG4gIGlmIChpc0NoYXJhY3RlckNsYXNzRXNjYXBlKGNoKSkge1xuICAgIHN0YXRlLmxhc3RJbnRWYWx1ZSA9IC0xO1xuICAgIHN0YXRlLmFkdmFuY2UoKTtcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgaWYgKFxuICAgIHN0YXRlLnN3aXRjaFUgJiZcbiAgICB0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24gPj0gOSAmJlxuICAgIChjaCA9PT0gMHg1MCAvKiBQICovIHx8IGNoID09PSAweDcwIC8qIHAgKi8pXG4gICkge1xuICAgIHN0YXRlLmxhc3RJbnRWYWx1ZSA9IC0xO1xuICAgIHN0YXRlLmFkdmFuY2UoKTtcbiAgICBpZiAoXG4gICAgICBzdGF0ZS5lYXQoMHg3QiAvKiB7ICovKSAmJlxuICAgICAgdGhpcy5yZWdleHBfZWF0VW5pY29kZVByb3BlcnR5VmFsdWVFeHByZXNzaW9uKHN0YXRlKSAmJlxuICAgICAgc3RhdGUuZWF0KDB4N0QgLyogfSAqLylcbiAgICApIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICAgIHN0YXRlLnJhaXNlKFwiSW52YWxpZCBwcm9wZXJ0eSBuYW1lXCIpO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlXG59O1xuZnVuY3Rpb24gaXNDaGFyYWN0ZXJDbGFzc0VzY2FwZShjaCkge1xuICByZXR1cm4gKFxuICAgIGNoID09PSAweDY0IC8qIGQgKi8gfHxcbiAgICBjaCA9PT0gMHg0NCAvKiBEICovIHx8XG4gICAgY2ggPT09IDB4NzMgLyogcyAqLyB8fFxuICAgIGNoID09PSAweDUzIC8qIFMgKi8gfHxcbiAgICBjaCA9PT0gMHg3NyAvKiB3ICovIHx8XG4gICAgY2ggPT09IDB4NTcgLyogVyAqL1xuICApXG59XG5cbi8vIFVuaWNvZGVQcm9wZXJ0eVZhbHVlRXhwcmVzc2lvbiA6OlxuLy8gICBVbmljb2RlUHJvcGVydHlOYW1lIGA9YCBVbmljb2RlUHJvcGVydHlWYWx1ZVxuLy8gICBMb25lVW5pY29kZVByb3BlcnR5TmFtZU9yVmFsdWVcbnBwJDkucmVnZXhwX2VhdFVuaWNvZGVQcm9wZXJ0eVZhbHVlRXhwcmVzc2lvbiA9IGZ1bmN0aW9uKHN0YXRlKSB7XG4gIHZhciBzdGFydCA9IHN0YXRlLnBvcztcblxuICAvLyBVbmljb2RlUHJvcGVydHlOYW1lIGA9YCBVbmljb2RlUHJvcGVydHlWYWx1ZVxuICBpZiAodGhpcy5yZWdleHBfZWF0VW5pY29kZVByb3BlcnR5TmFtZShzdGF0ZSkgJiYgc3RhdGUuZWF0KDB4M0QgLyogPSAqLykpIHtcbiAgICB2YXIgbmFtZSA9IHN0YXRlLmxhc3RTdHJpbmdWYWx1ZTtcbiAgICBpZiAodGhpcy5yZWdleHBfZWF0VW5pY29kZVByb3BlcnR5VmFsdWUoc3RhdGUpKSB7XG4gICAgICB2YXIgdmFsdWUgPSBzdGF0ZS5sYXN0U3RyaW5nVmFsdWU7XG4gICAgICB0aGlzLnJlZ2V4cF92YWxpZGF0ZVVuaWNvZGVQcm9wZXJ0eU5hbWVBbmRWYWx1ZShzdGF0ZSwgbmFtZSwgdmFsdWUpO1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gIH1cbiAgc3RhdGUucG9zID0gc3RhcnQ7XG5cbiAgLy8gTG9uZVVuaWNvZGVQcm9wZXJ0eU5hbWVPclZhbHVlXG4gIGlmICh0aGlzLnJlZ2V4cF9lYXRMb25lVW5pY29kZVByb3BlcnR5TmFtZU9yVmFsdWUoc3RhdGUpKSB7XG4gICAgdmFyIG5hbWVPclZhbHVlID0gc3RhdGUubGFzdFN0cmluZ1ZhbHVlO1xuICAgIHRoaXMucmVnZXhwX3ZhbGlkYXRlVW5pY29kZVByb3BlcnR5TmFtZU9yVmFsdWUoc3RhdGUsIG5hbWVPclZhbHVlKTtcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG4gIHJldHVybiBmYWxzZVxufTtcbnBwJDkucmVnZXhwX3ZhbGlkYXRlVW5pY29kZVByb3BlcnR5TmFtZUFuZFZhbHVlID0gZnVuY3Rpb24oc3RhdGUsIG5hbWUsIHZhbHVlKSB7XG4gIGlmICghaGFzKHN0YXRlLnVuaWNvZGVQcm9wZXJ0aWVzLm5vbkJpbmFyeSwgbmFtZSkpXG4gICAgeyBzdGF0ZS5yYWlzZShcIkludmFsaWQgcHJvcGVydHkgbmFtZVwiKTsgfVxuICBpZiAoIXN0YXRlLnVuaWNvZGVQcm9wZXJ0aWVzLm5vbkJpbmFyeVtuYW1lXS50ZXN0KHZhbHVlKSlcbiAgICB7IHN0YXRlLnJhaXNlKFwiSW52YWxpZCBwcm9wZXJ0eSB2YWx1ZVwiKTsgfVxufTtcbnBwJDkucmVnZXhwX3ZhbGlkYXRlVW5pY29kZVByb3BlcnR5TmFtZU9yVmFsdWUgPSBmdW5jdGlvbihzdGF0ZSwgbmFtZU9yVmFsdWUpIHtcbiAgaWYgKCFzdGF0ZS51bmljb2RlUHJvcGVydGllcy5iaW5hcnkudGVzdChuYW1lT3JWYWx1ZSkpXG4gICAgeyBzdGF0ZS5yYWlzZShcIkludmFsaWQgcHJvcGVydHkgbmFtZVwiKTsgfVxufTtcblxuLy8gVW5pY29kZVByb3BlcnR5TmFtZSA6OlxuLy8gICBVbmljb2RlUHJvcGVydHlOYW1lQ2hhcmFjdGVyc1xucHAkOS5yZWdleHBfZWF0VW5pY29kZVByb3BlcnR5TmFtZSA9IGZ1bmN0aW9uKHN0YXRlKSB7XG4gIHZhciBjaCA9IDA7XG4gIHN0YXRlLmxhc3RTdHJpbmdWYWx1ZSA9IFwiXCI7XG4gIHdoaWxlIChpc1VuaWNvZGVQcm9wZXJ0eU5hbWVDaGFyYWN0ZXIoY2ggPSBzdGF0ZS5jdXJyZW50KCkpKSB7XG4gICAgc3RhdGUubGFzdFN0cmluZ1ZhbHVlICs9IGNvZGVQb2ludFRvU3RyaW5nJDEoY2gpO1xuICAgIHN0YXRlLmFkdmFuY2UoKTtcbiAgfVxuICByZXR1cm4gc3RhdGUubGFzdFN0cmluZ1ZhbHVlICE9PSBcIlwiXG59O1xuZnVuY3Rpb24gaXNVbmljb2RlUHJvcGVydHlOYW1lQ2hhcmFjdGVyKGNoKSB7XG4gIHJldHVybiBpc0NvbnRyb2xMZXR0ZXIoY2gpIHx8IGNoID09PSAweDVGIC8qIF8gKi9cbn1cblxuLy8gVW5pY29kZVByb3BlcnR5VmFsdWUgOjpcbi8vICAgVW5pY29kZVByb3BlcnR5VmFsdWVDaGFyYWN0ZXJzXG5wcCQ5LnJlZ2V4cF9lYXRVbmljb2RlUHJvcGVydHlWYWx1ZSA9IGZ1bmN0aW9uKHN0YXRlKSB7XG4gIHZhciBjaCA9IDA7XG4gIHN0YXRlLmxhc3RTdHJpbmdWYWx1ZSA9IFwiXCI7XG4gIHdoaWxlIChpc1VuaWNvZGVQcm9wZXJ0eVZhbHVlQ2hhcmFjdGVyKGNoID0gc3RhdGUuY3VycmVudCgpKSkge1xuICAgIHN0YXRlLmxhc3RTdHJpbmdWYWx1ZSArPSBjb2RlUG9pbnRUb1N0cmluZyQxKGNoKTtcbiAgICBzdGF0ZS5hZHZhbmNlKCk7XG4gIH1cbiAgcmV0dXJuIHN0YXRlLmxhc3RTdHJpbmdWYWx1ZSAhPT0gXCJcIlxufTtcbmZ1bmN0aW9uIGlzVW5pY29kZVByb3BlcnR5VmFsdWVDaGFyYWN0ZXIoY2gpIHtcbiAgcmV0dXJuIGlzVW5pY29kZVByb3BlcnR5TmFtZUNoYXJhY3RlcihjaCkgfHwgaXNEZWNpbWFsRGlnaXQoY2gpXG59XG5cbi8vIExvbmVVbmljb2RlUHJvcGVydHlOYW1lT3JWYWx1ZSA6OlxuLy8gICBVbmljb2RlUHJvcGVydHlWYWx1ZUNoYXJhY3RlcnNcbnBwJDkucmVnZXhwX2VhdExvbmVVbmljb2RlUHJvcGVydHlOYW1lT3JWYWx1ZSA9IGZ1bmN0aW9uKHN0YXRlKSB7XG4gIHJldHVybiB0aGlzLnJlZ2V4cF9lYXRVbmljb2RlUHJvcGVydHlWYWx1ZShzdGF0ZSlcbn07XG5cbi8vIGh0dHBzOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvOC4wLyNwcm9kLUNoYXJhY3RlckNsYXNzXG5wcCQ5LnJlZ2V4cF9lYXRDaGFyYWN0ZXJDbGFzcyA9IGZ1bmN0aW9uKHN0YXRlKSB7XG4gIGlmIChzdGF0ZS5lYXQoMHg1QiAvKiBbICovKSkge1xuICAgIHN0YXRlLmVhdCgweDVFIC8qIF4gKi8pO1xuICAgIHRoaXMucmVnZXhwX2NsYXNzUmFuZ2VzKHN0YXRlKTtcbiAgICBpZiAoc3RhdGUuZWF0KDB4NUQgLyogWyAqLykpIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICAgIC8vIFVucmVhY2hhYmxlIHNpbmNlIGl0IHRocmV3IFwidW50ZXJtaW5hdGVkIHJlZ3VsYXIgZXhwcmVzc2lvblwiIGVycm9yIGJlZm9yZS5cbiAgICBzdGF0ZS5yYWlzZShcIlVudGVybWluYXRlZCBjaGFyYWN0ZXIgY2xhc3NcIik7XG4gIH1cbiAgcmV0dXJuIGZhbHNlXG59O1xuXG4vLyBodHRwczovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzguMC8jcHJvZC1DbGFzc1Jhbmdlc1xuLy8gaHR0cHM6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi84LjAvI3Byb2QtTm9uZW1wdHlDbGFzc1Jhbmdlc1xuLy8gaHR0cHM6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi84LjAvI3Byb2QtTm9uZW1wdHlDbGFzc1Jhbmdlc05vRGFzaFxucHAkOS5yZWdleHBfY2xhc3NSYW5nZXMgPSBmdW5jdGlvbihzdGF0ZSkge1xuICB2YXIgdGhpcyQxID0gdGhpcztcblxuICB3aGlsZSAodGhpcy5yZWdleHBfZWF0Q2xhc3NBdG9tKHN0YXRlKSkge1xuICAgIHZhciBsZWZ0ID0gc3RhdGUubGFzdEludFZhbHVlO1xuICAgIGlmIChzdGF0ZS5lYXQoMHgyRCAvKiAtICovKSAmJiB0aGlzJDEucmVnZXhwX2VhdENsYXNzQXRvbShzdGF0ZSkpIHtcbiAgICAgIHZhciByaWdodCA9IHN0YXRlLmxhc3RJbnRWYWx1ZTtcbiAgICAgIGlmIChzdGF0ZS5zd2l0Y2hVICYmIChsZWZ0ID09PSAtMSB8fCByaWdodCA9PT0gLTEpKSB7XG4gICAgICAgIHN0YXRlLnJhaXNlKFwiSW52YWxpZCBjaGFyYWN0ZXIgY2xhc3NcIik7XG4gICAgICB9XG4gICAgICBpZiAobGVmdCAhPT0gLTEgJiYgcmlnaHQgIT09IC0xICYmIGxlZnQgPiByaWdodCkge1xuICAgICAgICBzdGF0ZS5yYWlzZShcIlJhbmdlIG91dCBvZiBvcmRlciBpbiBjaGFyYWN0ZXIgY2xhc3NcIik7XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG4vLyBodHRwczovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzguMC8jcHJvZC1DbGFzc0F0b21cbi8vIGh0dHBzOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvOC4wLyNwcm9kLUNsYXNzQXRvbU5vRGFzaFxucHAkOS5yZWdleHBfZWF0Q2xhc3NBdG9tID0gZnVuY3Rpb24oc3RhdGUpIHtcbiAgdmFyIHN0YXJ0ID0gc3RhdGUucG9zO1xuXG4gIGlmIChzdGF0ZS5lYXQoMHg1QyAvKiBcXCAqLykpIHtcbiAgICBpZiAodGhpcy5yZWdleHBfZWF0Q2xhc3NFc2NhcGUoc3RhdGUpKSB7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgICBpZiAoc3RhdGUuc3dpdGNoVSkge1xuICAgICAgLy8gTWFrZSB0aGUgc2FtZSBtZXNzYWdlIGFzIFY4LlxuICAgICAgdmFyIGNoJDEgPSBzdGF0ZS5jdXJyZW50KCk7XG4gICAgICBpZiAoY2gkMSA9PT0gMHg2MyAvKiBjICovIHx8IGlzT2N0YWxEaWdpdChjaCQxKSkge1xuICAgICAgICBzdGF0ZS5yYWlzZShcIkludmFsaWQgY2xhc3MgZXNjYXBlXCIpO1xuICAgICAgfVxuICAgICAgc3RhdGUucmFpc2UoXCJJbnZhbGlkIGVzY2FwZVwiKTtcbiAgICB9XG4gICAgc3RhdGUucG9zID0gc3RhcnQ7XG4gIH1cblxuICB2YXIgY2ggPSBzdGF0ZS5jdXJyZW50KCk7XG4gIGlmIChjaCAhPT0gMHg1RCAvKiBbICovKSB7XG4gICAgc3RhdGUubGFzdEludFZhbHVlID0gY2g7XG4gICAgc3RhdGUuYWR2YW5jZSgpO1xuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICByZXR1cm4gZmFsc2Vcbn07XG5cbi8vIGh0dHBzOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvOC4wLyNwcm9kLWFubmV4Qi1DbGFzc0VzY2FwZVxucHAkOS5yZWdleHBfZWF0Q2xhc3NFc2NhcGUgPSBmdW5jdGlvbihzdGF0ZSkge1xuICB2YXIgc3RhcnQgPSBzdGF0ZS5wb3M7XG5cbiAgaWYgKHN0YXRlLmVhdCgweDYyIC8qIGIgKi8pKSB7XG4gICAgc3RhdGUubGFzdEludFZhbHVlID0gMHgwODsgLyogPEJTPiAqL1xuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICBpZiAoc3RhdGUuc3dpdGNoVSAmJiBzdGF0ZS5lYXQoMHgyRCAvKiAtICovKSkge1xuICAgIHN0YXRlLmxhc3RJbnRWYWx1ZSA9IDB4MkQ7IC8qIC0gKi9cbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgaWYgKCFzdGF0ZS5zd2l0Y2hVICYmIHN0YXRlLmVhdCgweDYzIC8qIGMgKi8pKSB7XG4gICAgaWYgKHRoaXMucmVnZXhwX2VhdENsYXNzQ29udHJvbExldHRlcihzdGF0ZSkpIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICAgIHN0YXRlLnBvcyA9IHN0YXJ0O1xuICB9XG5cbiAgcmV0dXJuIChcbiAgICB0aGlzLnJlZ2V4cF9lYXRDaGFyYWN0ZXJDbGFzc0VzY2FwZShzdGF0ZSkgfHxcbiAgICB0aGlzLnJlZ2V4cF9lYXRDaGFyYWN0ZXJFc2NhcGUoc3RhdGUpXG4gIClcbn07XG5cbi8vIGh0dHBzOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvOC4wLyNwcm9kLWFubmV4Qi1DbGFzc0NvbnRyb2xMZXR0ZXJcbnBwJDkucmVnZXhwX2VhdENsYXNzQ29udHJvbExldHRlciA9IGZ1bmN0aW9uKHN0YXRlKSB7XG4gIHZhciBjaCA9IHN0YXRlLmN1cnJlbnQoKTtcbiAgaWYgKGlzRGVjaW1hbERpZ2l0KGNoKSB8fCBjaCA9PT0gMHg1RiAvKiBfICovKSB7XG4gICAgc3RhdGUubGFzdEludFZhbHVlID0gY2ggJSAweDIwO1xuICAgIHN0YXRlLmFkdmFuY2UoKTtcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG4gIHJldHVybiBmYWxzZVxufTtcblxuLy8gaHR0cHM6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi84LjAvI3Byb2QtSGV4RXNjYXBlU2VxdWVuY2VcbnBwJDkucmVnZXhwX2VhdEhleEVzY2FwZVNlcXVlbmNlID0gZnVuY3Rpb24oc3RhdGUpIHtcbiAgdmFyIHN0YXJ0ID0gc3RhdGUucG9zO1xuICBpZiAoc3RhdGUuZWF0KDB4NzggLyogeCAqLykpIHtcbiAgICBpZiAodGhpcy5yZWdleHBfZWF0Rml4ZWRIZXhEaWdpdHMoc3RhdGUsIDIpKSB7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgICBpZiAoc3RhdGUuc3dpdGNoVSkge1xuICAgICAgc3RhdGUucmFpc2UoXCJJbnZhbGlkIGVzY2FwZVwiKTtcbiAgICB9XG4gICAgc3RhdGUucG9zID0gc3RhcnQ7XG4gIH1cbiAgcmV0dXJuIGZhbHNlXG59O1xuXG4vLyBodHRwczovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzguMC8jcHJvZC1EZWNpbWFsRGlnaXRzXG5wcCQ5LnJlZ2V4cF9lYXREZWNpbWFsRGlnaXRzID0gZnVuY3Rpb24oc3RhdGUpIHtcbiAgdmFyIHN0YXJ0ID0gc3RhdGUucG9zO1xuICB2YXIgY2ggPSAwO1xuICBzdGF0ZS5sYXN0SW50VmFsdWUgPSAwO1xuICB3aGlsZSAoaXNEZWNpbWFsRGlnaXQoY2ggPSBzdGF0ZS5jdXJyZW50KCkpKSB7XG4gICAgc3RhdGUubGFzdEludFZhbHVlID0gMTAgKiBzdGF0ZS5sYXN0SW50VmFsdWUgKyAoY2ggLSAweDMwIC8qIDAgKi8pO1xuICAgIHN0YXRlLmFkdmFuY2UoKTtcbiAgfVxuICByZXR1cm4gc3RhdGUucG9zICE9PSBzdGFydFxufTtcbmZ1bmN0aW9uIGlzRGVjaW1hbERpZ2l0KGNoKSB7XG4gIHJldHVybiBjaCA+PSAweDMwIC8qIDAgKi8gJiYgY2ggPD0gMHgzOSAvKiA5ICovXG59XG5cbi8vIGh0dHBzOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvOC4wLyNwcm9kLUhleERpZ2l0c1xucHAkOS5yZWdleHBfZWF0SGV4RGlnaXRzID0gZnVuY3Rpb24oc3RhdGUpIHtcbiAgdmFyIHN0YXJ0ID0gc3RhdGUucG9zO1xuICB2YXIgY2ggPSAwO1xuICBzdGF0ZS5sYXN0SW50VmFsdWUgPSAwO1xuICB3aGlsZSAoaXNIZXhEaWdpdChjaCA9IHN0YXRlLmN1cnJlbnQoKSkpIHtcbiAgICBzdGF0ZS5sYXN0SW50VmFsdWUgPSAxNiAqIHN0YXRlLmxhc3RJbnRWYWx1ZSArIGhleFRvSW50KGNoKTtcbiAgICBzdGF0ZS5hZHZhbmNlKCk7XG4gIH1cbiAgcmV0dXJuIHN0YXRlLnBvcyAhPT0gc3RhcnRcbn07XG5mdW5jdGlvbiBpc0hleERpZ2l0KGNoKSB7XG4gIHJldHVybiAoXG4gICAgKGNoID49IDB4MzAgLyogMCAqLyAmJiBjaCA8PSAweDM5IC8qIDkgKi8pIHx8XG4gICAgKGNoID49IDB4NDEgLyogQSAqLyAmJiBjaCA8PSAweDQ2IC8qIEYgKi8pIHx8XG4gICAgKGNoID49IDB4NjEgLyogYSAqLyAmJiBjaCA8PSAweDY2IC8qIGYgKi8pXG4gIClcbn1cbmZ1bmN0aW9uIGhleFRvSW50KGNoKSB7XG4gIGlmIChjaCA+PSAweDQxIC8qIEEgKi8gJiYgY2ggPD0gMHg0NiAvKiBGICovKSB7XG4gICAgcmV0dXJuIDEwICsgKGNoIC0gMHg0MSAvKiBBICovKVxuICB9XG4gIGlmIChjaCA+PSAweDYxIC8qIGEgKi8gJiYgY2ggPD0gMHg2NiAvKiBmICovKSB7XG4gICAgcmV0dXJuIDEwICsgKGNoIC0gMHg2MSAvKiBhICovKVxuICB9XG4gIHJldHVybiBjaCAtIDB4MzAgLyogMCAqL1xufVxuXG4vLyBodHRwczovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzguMC8jcHJvZC1hbm5leEItTGVnYWN5T2N0YWxFc2NhcGVTZXF1ZW5jZVxuLy8gQWxsb3dzIG9ubHkgMC0zNzcob2N0YWwpIGkuZS4gMC0yNTUoZGVjaW1hbCkuXG5wcCQ5LnJlZ2V4cF9lYXRMZWdhY3lPY3RhbEVzY2FwZVNlcXVlbmNlID0gZnVuY3Rpb24oc3RhdGUpIHtcbiAgaWYgKHRoaXMucmVnZXhwX2VhdE9jdGFsRGlnaXQoc3RhdGUpKSB7XG4gICAgdmFyIG4xID0gc3RhdGUubGFzdEludFZhbHVlO1xuICAgIGlmICh0aGlzLnJlZ2V4cF9lYXRPY3RhbERpZ2l0KHN0YXRlKSkge1xuICAgICAgdmFyIG4yID0gc3RhdGUubGFzdEludFZhbHVlO1xuICAgICAgaWYgKG4xIDw9IDMgJiYgdGhpcy5yZWdleHBfZWF0T2N0YWxEaWdpdChzdGF0ZSkpIHtcbiAgICAgICAgc3RhdGUubGFzdEludFZhbHVlID0gbjEgKiA2NCArIG4yICogOCArIHN0YXRlLmxhc3RJbnRWYWx1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0YXRlLmxhc3RJbnRWYWx1ZSA9IG4xICogOCArIG4yO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzdGF0ZS5sYXN0SW50VmFsdWUgPSBuMTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuICByZXR1cm4gZmFsc2Vcbn07XG5cbi8vIGh0dHBzOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvOC4wLyNwcm9kLU9jdGFsRGlnaXRcbnBwJDkucmVnZXhwX2VhdE9jdGFsRGlnaXQgPSBmdW5jdGlvbihzdGF0ZSkge1xuICB2YXIgY2ggPSBzdGF0ZS5jdXJyZW50KCk7XG4gIGlmIChpc09jdGFsRGlnaXQoY2gpKSB7XG4gICAgc3RhdGUubGFzdEludFZhbHVlID0gY2ggLSAweDMwOyAvKiAwICovXG4gICAgc3RhdGUuYWR2YW5jZSgpO1xuICAgIHJldHVybiB0cnVlXG4gIH1cbiAgc3RhdGUubGFzdEludFZhbHVlID0gMDtcbiAgcmV0dXJuIGZhbHNlXG59O1xuZnVuY3Rpb24gaXNPY3RhbERpZ2l0KGNoKSB7XG4gIHJldHVybiBjaCA+PSAweDMwIC8qIDAgKi8gJiYgY2ggPD0gMHgzNyAvKiA3ICovXG59XG5cbi8vIGh0dHBzOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvOC4wLyNwcm9kLUhleDREaWdpdHNcbi8vIGh0dHBzOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvOC4wLyNwcm9kLUhleERpZ2l0XG4vLyBBbmQgSGV4RGlnaXQgSGV4RGlnaXQgaW4gaHR0cHM6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi84LjAvI3Byb2QtSGV4RXNjYXBlU2VxdWVuY2VcbnBwJDkucmVnZXhwX2VhdEZpeGVkSGV4RGlnaXRzID0gZnVuY3Rpb24oc3RhdGUsIGxlbmd0aCkge1xuICB2YXIgc3RhcnQgPSBzdGF0ZS5wb3M7XG4gIHN0YXRlLmxhc3RJbnRWYWx1ZSA9IDA7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICB2YXIgY2ggPSBzdGF0ZS5jdXJyZW50KCk7XG4gICAgaWYgKCFpc0hleERpZ2l0KGNoKSkge1xuICAgICAgc3RhdGUucG9zID0gc3RhcnQ7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gICAgc3RhdGUubGFzdEludFZhbHVlID0gMTYgKiBzdGF0ZS5sYXN0SW50VmFsdWUgKyBoZXhUb0ludChjaCk7XG4gICAgc3RhdGUuYWR2YW5jZSgpO1xuICB9XG4gIHJldHVybiB0cnVlXG59O1xuXG4vLyBPYmplY3QgdHlwZSB1c2VkIHRvIHJlcHJlc2VudCB0b2tlbnMuIE5vdGUgdGhhdCBub3JtYWxseSwgdG9rZW5zXG4vLyBzaW1wbHkgZXhpc3QgYXMgcHJvcGVydGllcyBvbiB0aGUgcGFyc2VyIG9iamVjdC4gVGhpcyBpcyBvbmx5XG4vLyB1c2VkIGZvciB0aGUgb25Ub2tlbiBjYWxsYmFjayBhbmQgdGhlIGV4dGVybmFsIHRva2VuaXplci5cblxudmFyIFRva2VuID0gZnVuY3Rpb24gVG9rZW4ocCkge1xuICB0aGlzLnR5cGUgPSBwLnR5cGU7XG4gIHRoaXMudmFsdWUgPSBwLnZhbHVlO1xuICB0aGlzLnN0YXJ0ID0gcC5zdGFydDtcbiAgdGhpcy5lbmQgPSBwLmVuZDtcbiAgaWYgKHAub3B0aW9ucy5sb2NhdGlvbnMpXG4gICAgeyB0aGlzLmxvYyA9IG5ldyBTb3VyY2VMb2NhdGlvbihwLCBwLnN0YXJ0TG9jLCBwLmVuZExvYyk7IH1cbiAgaWYgKHAub3B0aW9ucy5yYW5nZXMpXG4gICAgeyB0aGlzLnJhbmdlID0gW3Auc3RhcnQsIHAuZW5kXTsgfVxufTtcblxuLy8gIyMgVG9rZW5pemVyXG5cbnZhciBwcCQ4ID0gUGFyc2VyLnByb3RvdHlwZTtcblxuLy8gTW92ZSB0byB0aGUgbmV4dCB0b2tlblxuXG5wcCQ4Lm5leHQgPSBmdW5jdGlvbigpIHtcbiAgaWYgKHRoaXMub3B0aW9ucy5vblRva2VuKVxuICAgIHsgdGhpcy5vcHRpb25zLm9uVG9rZW4obmV3IFRva2VuKHRoaXMpKTsgfVxuXG4gIHRoaXMubGFzdFRva0VuZCA9IHRoaXMuZW5kO1xuICB0aGlzLmxhc3RUb2tTdGFydCA9IHRoaXMuc3RhcnQ7XG4gIHRoaXMubGFzdFRva0VuZExvYyA9IHRoaXMuZW5kTG9jO1xuICB0aGlzLmxhc3RUb2tTdGFydExvYyA9IHRoaXMuc3RhcnRMb2M7XG4gIHRoaXMubmV4dFRva2VuKCk7XG59O1xuXG5wcCQ4LmdldFRva2VuID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMubmV4dCgpO1xuICByZXR1cm4gbmV3IFRva2VuKHRoaXMpXG59O1xuXG4vLyBJZiB3ZSdyZSBpbiBhbiBFUzYgZW52aXJvbm1lbnQsIG1ha2UgcGFyc2VycyBpdGVyYWJsZVxuaWYgKHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIpXG4gIHsgcHAkOFtTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICByZXR1cm4ge1xuICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdG9rZW4gPSB0aGlzJDEuZ2V0VG9rZW4oKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBkb25lOiB0b2tlbi50eXBlID09PSB0eXBlcy5lb2YsXG4gICAgICAgICAgdmFsdWU6IHRva2VuXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07IH1cblxuLy8gVG9nZ2xlIHN0cmljdCBtb2RlLiBSZS1yZWFkcyB0aGUgbmV4dCBudW1iZXIgb3Igc3RyaW5nIHRvIHBsZWFzZVxuLy8gcGVkYW50aWMgdGVzdHMgKGBcInVzZSBzdHJpY3RcIjsgMDEwO2Agc2hvdWxkIGZhaWwpLlxuXG5wcCQ4LmN1ckNvbnRleHQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuY29udGV4dFt0aGlzLmNvbnRleHQubGVuZ3RoIC0gMV1cbn07XG5cbi8vIFJlYWQgYSBzaW5nbGUgdG9rZW4sIHVwZGF0aW5nIHRoZSBwYXJzZXIgb2JqZWN0J3MgdG9rZW4tcmVsYXRlZFxuLy8gcHJvcGVydGllcy5cblxucHAkOC5uZXh0VG9rZW4gPSBmdW5jdGlvbigpIHtcbiAgdmFyIGN1ckNvbnRleHQgPSB0aGlzLmN1ckNvbnRleHQoKTtcbiAgaWYgKCFjdXJDb250ZXh0IHx8ICFjdXJDb250ZXh0LnByZXNlcnZlU3BhY2UpIHsgdGhpcy5za2lwU3BhY2UoKTsgfVxuXG4gIHRoaXMuc3RhcnQgPSB0aGlzLnBvcztcbiAgaWYgKHRoaXMub3B0aW9ucy5sb2NhdGlvbnMpIHsgdGhpcy5zdGFydExvYyA9IHRoaXMuY3VyUG9zaXRpb24oKTsgfVxuICBpZiAodGhpcy5wb3MgPj0gdGhpcy5pbnB1dC5sZW5ndGgpIHsgcmV0dXJuIHRoaXMuZmluaXNoVG9rZW4odHlwZXMuZW9mKSB9XG5cbiAgaWYgKGN1ckNvbnRleHQub3ZlcnJpZGUpIHsgcmV0dXJuIGN1ckNvbnRleHQub3ZlcnJpZGUodGhpcykgfVxuICBlbHNlIHsgdGhpcy5yZWFkVG9rZW4odGhpcy5mdWxsQ2hhckNvZGVBdFBvcygpKTsgfVxufTtcblxucHAkOC5yZWFkVG9rZW4gPSBmdW5jdGlvbihjb2RlKSB7XG4gIC8vIElkZW50aWZpZXIgb3Iga2V5d29yZC4gJ1xcdVhYWFgnIHNlcXVlbmNlcyBhcmUgYWxsb3dlZCBpblxuICAvLyBpZGVudGlmaWVycywgc28gJ1xcJyBhbHNvIGRpc3BhdGNoZXMgdG8gdGhhdC5cbiAgaWYgKGlzSWRlbnRpZmllclN0YXJ0KGNvZGUsIHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA+PSA2KSB8fCBjb2RlID09PSA5MiAvKiAnXFwnICovKVxuICAgIHsgcmV0dXJuIHRoaXMucmVhZFdvcmQoKSB9XG5cbiAgcmV0dXJuIHRoaXMuZ2V0VG9rZW5Gcm9tQ29kZShjb2RlKVxufTtcblxucHAkOC5mdWxsQ2hhckNvZGVBdFBvcyA9IGZ1bmN0aW9uKCkge1xuICB2YXIgY29kZSA9IHRoaXMuaW5wdXQuY2hhckNvZGVBdCh0aGlzLnBvcyk7XG4gIGlmIChjb2RlIDw9IDB4ZDdmZiB8fCBjb2RlID49IDB4ZTAwMCkgeyByZXR1cm4gY29kZSB9XG4gIHZhciBuZXh0ID0gdGhpcy5pbnB1dC5jaGFyQ29kZUF0KHRoaXMucG9zICsgMSk7XG4gIHJldHVybiAoY29kZSA8PCAxMCkgKyBuZXh0IC0gMHgzNWZkYzAwXG59O1xuXG5wcCQ4LnNraXBCbG9ja0NvbW1lbnQgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgdmFyIHN0YXJ0TG9jID0gdGhpcy5vcHRpb25zLm9uQ29tbWVudCAmJiB0aGlzLmN1clBvc2l0aW9uKCk7XG4gIHZhciBzdGFydCA9IHRoaXMucG9zLCBlbmQgPSB0aGlzLmlucHV0LmluZGV4T2YoXCIqL1wiLCB0aGlzLnBvcyArPSAyKTtcbiAgaWYgKGVuZCA9PT0gLTEpIHsgdGhpcy5yYWlzZSh0aGlzLnBvcyAtIDIsIFwiVW50ZXJtaW5hdGVkIGNvbW1lbnRcIik7IH1cbiAgdGhpcy5wb3MgPSBlbmQgKyAyO1xuICBpZiAodGhpcy5vcHRpb25zLmxvY2F0aW9ucykge1xuICAgIGxpbmVCcmVha0cubGFzdEluZGV4ID0gc3RhcnQ7XG4gICAgdmFyIG1hdGNoO1xuICAgIHdoaWxlICgobWF0Y2ggPSBsaW5lQnJlYWtHLmV4ZWModGhpcy5pbnB1dCkpICYmIG1hdGNoLmluZGV4IDwgdGhpcy5wb3MpIHtcbiAgICAgICsrdGhpcyQxLmN1ckxpbmU7XG4gICAgICB0aGlzJDEubGluZVN0YXJ0ID0gbWF0Y2guaW5kZXggKyBtYXRjaFswXS5sZW5ndGg7XG4gICAgfVxuICB9XG4gIGlmICh0aGlzLm9wdGlvbnMub25Db21tZW50KVxuICAgIHsgdGhpcy5vcHRpb25zLm9uQ29tbWVudCh0cnVlLCB0aGlzLmlucHV0LnNsaWNlKHN0YXJ0ICsgMiwgZW5kKSwgc3RhcnQsIHRoaXMucG9zLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRMb2MsIHRoaXMuY3VyUG9zaXRpb24oKSk7IH1cbn07XG5cbnBwJDguc2tpcExpbmVDb21tZW50ID0gZnVuY3Rpb24oc3RhcnRTa2lwKSB7XG4gIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIHZhciBzdGFydCA9IHRoaXMucG9zO1xuICB2YXIgc3RhcnRMb2MgPSB0aGlzLm9wdGlvbnMub25Db21tZW50ICYmIHRoaXMuY3VyUG9zaXRpb24oKTtcbiAgdmFyIGNoID0gdGhpcy5pbnB1dC5jaGFyQ29kZUF0KHRoaXMucG9zICs9IHN0YXJ0U2tpcCk7XG4gIHdoaWxlICh0aGlzLnBvcyA8IHRoaXMuaW5wdXQubGVuZ3RoICYmICFpc05ld0xpbmUoY2gpKSB7XG4gICAgY2ggPSB0aGlzJDEuaW5wdXQuY2hhckNvZGVBdCgrK3RoaXMkMS5wb3MpO1xuICB9XG4gIGlmICh0aGlzLm9wdGlvbnMub25Db21tZW50KVxuICAgIHsgdGhpcy5vcHRpb25zLm9uQ29tbWVudChmYWxzZSwgdGhpcy5pbnB1dC5zbGljZShzdGFydCArIHN0YXJ0U2tpcCwgdGhpcy5wb3MpLCBzdGFydCwgdGhpcy5wb3MsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydExvYywgdGhpcy5jdXJQb3NpdGlvbigpKTsgfVxufTtcblxuLy8gQ2FsbGVkIGF0IHRoZSBzdGFydCBvZiB0aGUgcGFyc2UgYW5kIGFmdGVyIGV2ZXJ5IHRva2VuLiBTa2lwc1xuLy8gd2hpdGVzcGFjZSBhbmQgY29tbWVudHMsIGFuZC5cblxucHAkOC5za2lwU3BhY2UgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgbG9vcDogd2hpbGUgKHRoaXMucG9zIDwgdGhpcy5pbnB1dC5sZW5ndGgpIHtcbiAgICB2YXIgY2ggPSB0aGlzJDEuaW5wdXQuY2hhckNvZGVBdCh0aGlzJDEucG9zKTtcbiAgICBzd2l0Y2ggKGNoKSB7XG4gICAgY2FzZSAzMjogY2FzZSAxNjA6IC8vICcgJ1xuICAgICAgKyt0aGlzJDEucG9zO1xuICAgICAgYnJlYWtcbiAgICBjYXNlIDEzOlxuICAgICAgaWYgKHRoaXMkMS5pbnB1dC5jaGFyQ29kZUF0KHRoaXMkMS5wb3MgKyAxKSA9PT0gMTApIHtcbiAgICAgICAgKyt0aGlzJDEucG9zO1xuICAgICAgfVxuICAgIGNhc2UgMTA6IGNhc2UgODIzMjogY2FzZSA4MjMzOlxuICAgICAgKyt0aGlzJDEucG9zO1xuICAgICAgaWYgKHRoaXMkMS5vcHRpb25zLmxvY2F0aW9ucykge1xuICAgICAgICArK3RoaXMkMS5jdXJMaW5lO1xuICAgICAgICB0aGlzJDEubGluZVN0YXJ0ID0gdGhpcyQxLnBvcztcbiAgICAgIH1cbiAgICAgIGJyZWFrXG4gICAgY2FzZSA0NzogLy8gJy8nXG4gICAgICBzd2l0Y2ggKHRoaXMkMS5pbnB1dC5jaGFyQ29kZUF0KHRoaXMkMS5wb3MgKyAxKSkge1xuICAgICAgY2FzZSA0MjogLy8gJyonXG4gICAgICAgIHRoaXMkMS5za2lwQmxvY2tDb21tZW50KCk7XG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlIDQ3OlxuICAgICAgICB0aGlzJDEuc2tpcExpbmVDb21tZW50KDIpO1xuICAgICAgICBicmVha1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgYnJlYWsgbG9vcFxuICAgICAgfVxuICAgICAgYnJlYWtcbiAgICBkZWZhdWx0OlxuICAgICAgaWYgKGNoID4gOCAmJiBjaCA8IDE0IHx8IGNoID49IDU3NjAgJiYgbm9uQVNDSUl3aGl0ZXNwYWNlLnRlc3QoU3RyaW5nLmZyb21DaGFyQ29kZShjaCkpKSB7XG4gICAgICAgICsrdGhpcyQxLnBvcztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJyZWFrIGxvb3BcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbi8vIENhbGxlZCBhdCB0aGUgZW5kIG9mIGV2ZXJ5IHRva2VuLiBTZXRzIGBlbmRgLCBgdmFsYCwgYW5kXG4vLyBtYWludGFpbnMgYGNvbnRleHRgIGFuZCBgZXhwckFsbG93ZWRgLCBhbmQgc2tpcHMgdGhlIHNwYWNlIGFmdGVyXG4vLyB0aGUgdG9rZW4sIHNvIHRoYXQgdGhlIG5leHQgb25lJ3MgYHN0YXJ0YCB3aWxsIHBvaW50IGF0IHRoZVxuLy8gcmlnaHQgcG9zaXRpb24uXG5cbnBwJDguZmluaXNoVG9rZW4gPSBmdW5jdGlvbih0eXBlLCB2YWwpIHtcbiAgdGhpcy5lbmQgPSB0aGlzLnBvcztcbiAgaWYgKHRoaXMub3B0aW9ucy5sb2NhdGlvbnMpIHsgdGhpcy5lbmRMb2MgPSB0aGlzLmN1clBvc2l0aW9uKCk7IH1cbiAgdmFyIHByZXZUeXBlID0gdGhpcy50eXBlO1xuICB0aGlzLnR5cGUgPSB0eXBlO1xuICB0aGlzLnZhbHVlID0gdmFsO1xuXG4gIHRoaXMudXBkYXRlQ29udGV4dChwcmV2VHlwZSk7XG59O1xuXG4vLyAjIyMgVG9rZW4gcmVhZGluZ1xuXG4vLyBUaGlzIGlzIHRoZSBmdW5jdGlvbiB0aGF0IGlzIGNhbGxlZCB0byBmZXRjaCB0aGUgbmV4dCB0b2tlbi4gSXRcbi8vIGlzIHNvbWV3aGF0IG9ic2N1cmUsIGJlY2F1c2UgaXQgd29ya3MgaW4gY2hhcmFjdGVyIGNvZGVzIHJhdGhlclxuLy8gdGhhbiBjaGFyYWN0ZXJzLCBhbmQgYmVjYXVzZSBvcGVyYXRvciBwYXJzaW5nIGhhcyBiZWVuIGlubGluZWRcbi8vIGludG8gaXQuXG4vL1xuLy8gQWxsIGluIHRoZSBuYW1lIG9mIHNwZWVkLlxuLy9cbnBwJDgucmVhZFRva2VuX2RvdCA9IGZ1bmN0aW9uKCkge1xuICB2YXIgbmV4dCA9IHRoaXMuaW5wdXQuY2hhckNvZGVBdCh0aGlzLnBvcyArIDEpO1xuICBpZiAobmV4dCA+PSA0OCAmJiBuZXh0IDw9IDU3KSB7IHJldHVybiB0aGlzLnJlYWROdW1iZXIodHJ1ZSkgfVxuICB2YXIgbmV4dDIgPSB0aGlzLmlucHV0LmNoYXJDb2RlQXQodGhpcy5wb3MgKyAyKTtcbiAgaWYgKHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA+PSA2ICYmIG5leHQgPT09IDQ2ICYmIG5leHQyID09PSA0NikgeyAvLyA0NiA9IGRvdCAnLidcbiAgICB0aGlzLnBvcyArPSAzO1xuICAgIHJldHVybiB0aGlzLmZpbmlzaFRva2VuKHR5cGVzLmVsbGlwc2lzKVxuICB9IGVsc2Uge1xuICAgICsrdGhpcy5wb3M7XG4gICAgcmV0dXJuIHRoaXMuZmluaXNoVG9rZW4odHlwZXMuZG90KVxuICB9XG59O1xuXG5wcCQ4LnJlYWRUb2tlbl9zbGFzaCA9IGZ1bmN0aW9uKCkgeyAvLyAnLydcbiAgdmFyIG5leHQgPSB0aGlzLmlucHV0LmNoYXJDb2RlQXQodGhpcy5wb3MgKyAxKTtcbiAgaWYgKHRoaXMuZXhwckFsbG93ZWQpIHsgKyt0aGlzLnBvczsgcmV0dXJuIHRoaXMucmVhZFJlZ2V4cCgpIH1cbiAgaWYgKG5leHQgPT09IDYxKSB7IHJldHVybiB0aGlzLmZpbmlzaE9wKHR5cGVzLmFzc2lnbiwgMikgfVxuICByZXR1cm4gdGhpcy5maW5pc2hPcCh0eXBlcy5zbGFzaCwgMSlcbn07XG5cbnBwJDgucmVhZFRva2VuX211bHRfbW9kdWxvX2V4cCA9IGZ1bmN0aW9uKGNvZGUpIHsgLy8gJyUqJ1xuICB2YXIgbmV4dCA9IHRoaXMuaW5wdXQuY2hhckNvZGVBdCh0aGlzLnBvcyArIDEpO1xuICB2YXIgc2l6ZSA9IDE7XG4gIHZhciB0b2tlbnR5cGUgPSBjb2RlID09PSA0MiA/IHR5cGVzLnN0YXIgOiB0eXBlcy5tb2R1bG87XG5cbiAgLy8gZXhwb25lbnRpYXRpb24gb3BlcmF0b3IgKiogYW5kICoqPVxuICBpZiAodGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uID49IDcgJiYgY29kZSA9PT0gNDIgJiYgbmV4dCA9PT0gNDIpIHtcbiAgICArK3NpemU7XG4gICAgdG9rZW50eXBlID0gdHlwZXMuc3RhcnN0YXI7XG4gICAgbmV4dCA9IHRoaXMuaW5wdXQuY2hhckNvZGVBdCh0aGlzLnBvcyArIDIpO1xuICB9XG5cbiAgaWYgKG5leHQgPT09IDYxKSB7IHJldHVybiB0aGlzLmZpbmlzaE9wKHR5cGVzLmFzc2lnbiwgc2l6ZSArIDEpIH1cbiAgcmV0dXJuIHRoaXMuZmluaXNoT3AodG9rZW50eXBlLCBzaXplKVxufTtcblxucHAkOC5yZWFkVG9rZW5fcGlwZV9hbXAgPSBmdW5jdGlvbihjb2RlKSB7IC8vICd8JidcbiAgdmFyIG5leHQgPSB0aGlzLmlucHV0LmNoYXJDb2RlQXQodGhpcy5wb3MgKyAxKTtcbiAgaWYgKG5leHQgPT09IGNvZGUpIHsgcmV0dXJuIHRoaXMuZmluaXNoT3AoY29kZSA9PT0gMTI0ID8gdHlwZXMubG9naWNhbE9SIDogdHlwZXMubG9naWNhbEFORCwgMikgfVxuICBpZiAobmV4dCA9PT0gNjEpIHsgcmV0dXJuIHRoaXMuZmluaXNoT3AodHlwZXMuYXNzaWduLCAyKSB9XG4gIHJldHVybiB0aGlzLmZpbmlzaE9wKGNvZGUgPT09IDEyNCA/IHR5cGVzLmJpdHdpc2VPUiA6IHR5cGVzLmJpdHdpc2VBTkQsIDEpXG59O1xuXG5wcCQ4LnJlYWRUb2tlbl9jYXJldCA9IGZ1bmN0aW9uKCkgeyAvLyAnXidcbiAgdmFyIG5leHQgPSB0aGlzLmlucHV0LmNoYXJDb2RlQXQodGhpcy5wb3MgKyAxKTtcbiAgaWYgKG5leHQgPT09IDYxKSB7IHJldHVybiB0aGlzLmZpbmlzaE9wKHR5cGVzLmFzc2lnbiwgMikgfVxuICByZXR1cm4gdGhpcy5maW5pc2hPcCh0eXBlcy5iaXR3aXNlWE9SLCAxKVxufTtcblxucHAkOC5yZWFkVG9rZW5fcGx1c19taW4gPSBmdW5jdGlvbihjb2RlKSB7IC8vICcrLSdcbiAgdmFyIG5leHQgPSB0aGlzLmlucHV0LmNoYXJDb2RlQXQodGhpcy5wb3MgKyAxKTtcbiAgaWYgKG5leHQgPT09IGNvZGUpIHtcbiAgICBpZiAobmV4dCA9PT0gNDUgJiYgIXRoaXMuaW5Nb2R1bGUgJiYgdGhpcy5pbnB1dC5jaGFyQ29kZUF0KHRoaXMucG9zICsgMikgPT09IDYyICYmXG4gICAgICAgICh0aGlzLmxhc3RUb2tFbmQgPT09IDAgfHwgbGluZUJyZWFrLnRlc3QodGhpcy5pbnB1dC5zbGljZSh0aGlzLmxhc3RUb2tFbmQsIHRoaXMucG9zKSkpKSB7XG4gICAgICAvLyBBIGAtLT5gIGxpbmUgY29tbWVudFxuICAgICAgdGhpcy5za2lwTGluZUNvbW1lbnQoMyk7XG4gICAgICB0aGlzLnNraXBTcGFjZSgpO1xuICAgICAgcmV0dXJuIHRoaXMubmV4dFRva2VuKClcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuZmluaXNoT3AodHlwZXMuaW5jRGVjLCAyKVxuICB9XG4gIGlmIChuZXh0ID09PSA2MSkgeyByZXR1cm4gdGhpcy5maW5pc2hPcCh0eXBlcy5hc3NpZ24sIDIpIH1cbiAgcmV0dXJuIHRoaXMuZmluaXNoT3AodHlwZXMucGx1c01pbiwgMSlcbn07XG5cbnBwJDgucmVhZFRva2VuX2x0X2d0ID0gZnVuY3Rpb24oY29kZSkgeyAvLyAnPD4nXG4gIHZhciBuZXh0ID0gdGhpcy5pbnB1dC5jaGFyQ29kZUF0KHRoaXMucG9zICsgMSk7XG4gIHZhciBzaXplID0gMTtcbiAgaWYgKG5leHQgPT09IGNvZGUpIHtcbiAgICBzaXplID0gY29kZSA9PT0gNjIgJiYgdGhpcy5pbnB1dC5jaGFyQ29kZUF0KHRoaXMucG9zICsgMikgPT09IDYyID8gMyA6IDI7XG4gICAgaWYgKHRoaXMuaW5wdXQuY2hhckNvZGVBdCh0aGlzLnBvcyArIHNpemUpID09PSA2MSkgeyByZXR1cm4gdGhpcy5maW5pc2hPcCh0eXBlcy5hc3NpZ24sIHNpemUgKyAxKSB9XG4gICAgcmV0dXJuIHRoaXMuZmluaXNoT3AodHlwZXMuYml0U2hpZnQsIHNpemUpXG4gIH1cbiAgaWYgKG5leHQgPT09IDMzICYmIGNvZGUgPT09IDYwICYmICF0aGlzLmluTW9kdWxlICYmIHRoaXMuaW5wdXQuY2hhckNvZGVBdCh0aGlzLnBvcyArIDIpID09PSA0NSAmJlxuICAgICAgdGhpcy5pbnB1dC5jaGFyQ29kZUF0KHRoaXMucG9zICsgMykgPT09IDQ1KSB7XG4gICAgLy8gYDwhLS1gLCBhbiBYTUwtc3R5bGUgY29tbWVudCB0aGF0IHNob3VsZCBiZSBpbnRlcnByZXRlZCBhcyBhIGxpbmUgY29tbWVudFxuICAgIHRoaXMuc2tpcExpbmVDb21tZW50KDQpO1xuICAgIHRoaXMuc2tpcFNwYWNlKCk7XG4gICAgcmV0dXJuIHRoaXMubmV4dFRva2VuKClcbiAgfVxuICBpZiAobmV4dCA9PT0gNjEpIHsgc2l6ZSA9IDI7IH1cbiAgcmV0dXJuIHRoaXMuZmluaXNoT3AodHlwZXMucmVsYXRpb25hbCwgc2l6ZSlcbn07XG5cbnBwJDgucmVhZFRva2VuX2VxX2V4Y2wgPSBmdW5jdGlvbihjb2RlKSB7IC8vICc9ISdcbiAgdmFyIG5leHQgPSB0aGlzLmlucHV0LmNoYXJDb2RlQXQodGhpcy5wb3MgKyAxKTtcbiAgaWYgKG5leHQgPT09IDYxKSB7IHJldHVybiB0aGlzLmZpbmlzaE9wKHR5cGVzLmVxdWFsaXR5LCB0aGlzLmlucHV0LmNoYXJDb2RlQXQodGhpcy5wb3MgKyAyKSA9PT0gNjEgPyAzIDogMikgfVxuICBpZiAoY29kZSA9PT0gNjEgJiYgbmV4dCA9PT0gNjIgJiYgdGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uID49IDYpIHsgLy8gJz0+J1xuICAgIHRoaXMucG9zICs9IDI7XG4gICAgcmV0dXJuIHRoaXMuZmluaXNoVG9rZW4odHlwZXMuYXJyb3cpXG4gIH1cbiAgcmV0dXJuIHRoaXMuZmluaXNoT3AoY29kZSA9PT0gNjEgPyB0eXBlcy5lcSA6IHR5cGVzLnByZWZpeCwgMSlcbn07XG5cbnBwJDguZ2V0VG9rZW5Gcm9tQ29kZSA9IGZ1bmN0aW9uKGNvZGUpIHtcbiAgc3dpdGNoIChjb2RlKSB7XG4gIC8vIFRoZSBpbnRlcnByZXRhdGlvbiBvZiBhIGRvdCBkZXBlbmRzIG9uIHdoZXRoZXIgaXQgaXMgZm9sbG93ZWRcbiAgLy8gYnkgYSBkaWdpdCBvciBhbm90aGVyIHR3byBkb3RzLlxuICBjYXNlIDQ2OiAvLyAnLidcbiAgICByZXR1cm4gdGhpcy5yZWFkVG9rZW5fZG90KClcblxuICAvLyBQdW5jdHVhdGlvbiB0b2tlbnMuXG4gIGNhc2UgNDA6ICsrdGhpcy5wb3M7IHJldHVybiB0aGlzLmZpbmlzaFRva2VuKHR5cGVzLnBhcmVuTClcbiAgY2FzZSA0MTogKyt0aGlzLnBvczsgcmV0dXJuIHRoaXMuZmluaXNoVG9rZW4odHlwZXMucGFyZW5SKVxuICBjYXNlIDU5OiArK3RoaXMucG9zOyByZXR1cm4gdGhpcy5maW5pc2hUb2tlbih0eXBlcy5zZW1pKVxuICBjYXNlIDQ0OiArK3RoaXMucG9zOyByZXR1cm4gdGhpcy5maW5pc2hUb2tlbih0eXBlcy5jb21tYSlcbiAgY2FzZSA5MTogKyt0aGlzLnBvczsgcmV0dXJuIHRoaXMuZmluaXNoVG9rZW4odHlwZXMuYnJhY2tldEwpXG4gIGNhc2UgOTM6ICsrdGhpcy5wb3M7IHJldHVybiB0aGlzLmZpbmlzaFRva2VuKHR5cGVzLmJyYWNrZXRSKVxuICBjYXNlIDEyMzogKyt0aGlzLnBvczsgcmV0dXJuIHRoaXMuZmluaXNoVG9rZW4odHlwZXMuYnJhY2VMKVxuICBjYXNlIDEyNTogKyt0aGlzLnBvczsgcmV0dXJuIHRoaXMuZmluaXNoVG9rZW4odHlwZXMuYnJhY2VSKVxuICBjYXNlIDU4OiArK3RoaXMucG9zOyByZXR1cm4gdGhpcy5maW5pc2hUb2tlbih0eXBlcy5jb2xvbilcbiAgY2FzZSA2MzogKyt0aGlzLnBvczsgcmV0dXJuIHRoaXMuZmluaXNoVG9rZW4odHlwZXMucXVlc3Rpb24pXG5cbiAgY2FzZSA5NjogLy8gJ2AnXG4gICAgaWYgKHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA8IDYpIHsgYnJlYWsgfVxuICAgICsrdGhpcy5wb3M7XG4gICAgcmV0dXJuIHRoaXMuZmluaXNoVG9rZW4odHlwZXMuYmFja1F1b3RlKVxuXG4gIGNhc2UgNDg6IC8vICcwJ1xuICAgIHZhciBuZXh0ID0gdGhpcy5pbnB1dC5jaGFyQ29kZUF0KHRoaXMucG9zICsgMSk7XG4gICAgaWYgKG5leHQgPT09IDEyMCB8fCBuZXh0ID09PSA4OCkgeyByZXR1cm4gdGhpcy5yZWFkUmFkaXhOdW1iZXIoMTYpIH0gLy8gJzB4JywgJzBYJyAtIGhleCBudW1iZXJcbiAgICBpZiAodGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uID49IDYpIHtcbiAgICAgIGlmIChuZXh0ID09PSAxMTEgfHwgbmV4dCA9PT0gNzkpIHsgcmV0dXJuIHRoaXMucmVhZFJhZGl4TnVtYmVyKDgpIH0gLy8gJzBvJywgJzBPJyAtIG9jdGFsIG51bWJlclxuICAgICAgaWYgKG5leHQgPT09IDk4IHx8IG5leHQgPT09IDY2KSB7IHJldHVybiB0aGlzLnJlYWRSYWRpeE51bWJlcigyKSB9IC8vICcwYicsICcwQicgLSBiaW5hcnkgbnVtYmVyXG4gICAgfVxuXG4gIC8vIEFueXRoaW5nIGVsc2UgYmVnaW5uaW5nIHdpdGggYSBkaWdpdCBpcyBhbiBpbnRlZ2VyLCBvY3RhbFxuICAvLyBudW1iZXIsIG9yIGZsb2F0LlxuICBjYXNlIDQ5OiBjYXNlIDUwOiBjYXNlIDUxOiBjYXNlIDUyOiBjYXNlIDUzOiBjYXNlIDU0OiBjYXNlIDU1OiBjYXNlIDU2OiBjYXNlIDU3OiAvLyAxLTlcbiAgICByZXR1cm4gdGhpcy5yZWFkTnVtYmVyKGZhbHNlKVxuXG4gIC8vIFF1b3RlcyBwcm9kdWNlIHN0cmluZ3MuXG4gIGNhc2UgMzQ6IGNhc2UgMzk6IC8vICdcIicsIFwiJ1wiXG4gICAgcmV0dXJuIHRoaXMucmVhZFN0cmluZyhjb2RlKVxuXG4gIC8vIE9wZXJhdG9ycyBhcmUgcGFyc2VkIGlubGluZSBpbiB0aW55IHN0YXRlIG1hY2hpbmVzLiAnPScgKDYxKSBpc1xuICAvLyBvZnRlbiByZWZlcnJlZCB0by4gYGZpbmlzaE9wYCBzaW1wbHkgc2tpcHMgdGhlIGFtb3VudCBvZlxuICAvLyBjaGFyYWN0ZXJzIGl0IGlzIGdpdmVuIGFzIHNlY29uZCBhcmd1bWVudCwgYW5kIHJldHVybnMgYSB0b2tlblxuICAvLyBvZiB0aGUgdHlwZSBnaXZlbiBieSBpdHMgZmlyc3QgYXJndW1lbnQuXG5cbiAgY2FzZSA0NzogLy8gJy8nXG4gICAgcmV0dXJuIHRoaXMucmVhZFRva2VuX3NsYXNoKClcblxuICBjYXNlIDM3OiBjYXNlIDQyOiAvLyAnJSonXG4gICAgcmV0dXJuIHRoaXMucmVhZFRva2VuX211bHRfbW9kdWxvX2V4cChjb2RlKVxuXG4gIGNhc2UgMTI0OiBjYXNlIDM4OiAvLyAnfCYnXG4gICAgcmV0dXJuIHRoaXMucmVhZFRva2VuX3BpcGVfYW1wKGNvZGUpXG5cbiAgY2FzZSA5NDogLy8gJ14nXG4gICAgcmV0dXJuIHRoaXMucmVhZFRva2VuX2NhcmV0KClcblxuICBjYXNlIDQzOiBjYXNlIDQ1OiAvLyAnKy0nXG4gICAgcmV0dXJuIHRoaXMucmVhZFRva2VuX3BsdXNfbWluKGNvZGUpXG5cbiAgY2FzZSA2MDogY2FzZSA2MjogLy8gJzw+J1xuICAgIHJldHVybiB0aGlzLnJlYWRUb2tlbl9sdF9ndChjb2RlKVxuXG4gIGNhc2UgNjE6IGNhc2UgMzM6IC8vICc9ISdcbiAgICByZXR1cm4gdGhpcy5yZWFkVG9rZW5fZXFfZXhjbChjb2RlKVxuXG4gIGNhc2UgMTI2OiAvLyAnfidcbiAgICByZXR1cm4gdGhpcy5maW5pc2hPcCh0eXBlcy5wcmVmaXgsIDEpXG4gIH1cblxuICB0aGlzLnJhaXNlKHRoaXMucG9zLCBcIlVuZXhwZWN0ZWQgY2hhcmFjdGVyICdcIiArIGNvZGVQb2ludFRvU3RyaW5nKGNvZGUpICsgXCInXCIpO1xufTtcblxucHAkOC5maW5pc2hPcCA9IGZ1bmN0aW9uKHR5cGUsIHNpemUpIHtcbiAgdmFyIHN0ciA9IHRoaXMuaW5wdXQuc2xpY2UodGhpcy5wb3MsIHRoaXMucG9zICsgc2l6ZSk7XG4gIHRoaXMucG9zICs9IHNpemU7XG4gIHJldHVybiB0aGlzLmZpbmlzaFRva2VuKHR5cGUsIHN0cilcbn07XG5cbnBwJDgucmVhZFJlZ2V4cCA9IGZ1bmN0aW9uKCkge1xuICB2YXIgdGhpcyQxID0gdGhpcztcblxuICB2YXIgZXNjYXBlZCwgaW5DbGFzcywgc3RhcnQgPSB0aGlzLnBvcztcbiAgZm9yICg7Oykge1xuICAgIGlmICh0aGlzJDEucG9zID49IHRoaXMkMS5pbnB1dC5sZW5ndGgpIHsgdGhpcyQxLnJhaXNlKHN0YXJ0LCBcIlVudGVybWluYXRlZCByZWd1bGFyIGV4cHJlc3Npb25cIik7IH1cbiAgICB2YXIgY2ggPSB0aGlzJDEuaW5wdXQuY2hhckF0KHRoaXMkMS5wb3MpO1xuICAgIGlmIChsaW5lQnJlYWsudGVzdChjaCkpIHsgdGhpcyQxLnJhaXNlKHN0YXJ0LCBcIlVudGVybWluYXRlZCByZWd1bGFyIGV4cHJlc3Npb25cIik7IH1cbiAgICBpZiAoIWVzY2FwZWQpIHtcbiAgICAgIGlmIChjaCA9PT0gXCJbXCIpIHsgaW5DbGFzcyA9IHRydWU7IH1cbiAgICAgIGVsc2UgaWYgKGNoID09PSBcIl1cIiAmJiBpbkNsYXNzKSB7IGluQ2xhc3MgPSBmYWxzZTsgfVxuICAgICAgZWxzZSBpZiAoY2ggPT09IFwiL1wiICYmICFpbkNsYXNzKSB7IGJyZWFrIH1cbiAgICAgIGVzY2FwZWQgPSBjaCA9PT0gXCJcXFxcXCI7XG4gICAgfSBlbHNlIHsgZXNjYXBlZCA9IGZhbHNlOyB9XG4gICAgKyt0aGlzJDEucG9zO1xuICB9XG4gIHZhciBwYXR0ZXJuID0gdGhpcy5pbnB1dC5zbGljZShzdGFydCwgdGhpcy5wb3MpO1xuICArK3RoaXMucG9zO1xuICB2YXIgZmxhZ3NTdGFydCA9IHRoaXMucG9zO1xuICB2YXIgZmxhZ3MgPSB0aGlzLnJlYWRXb3JkMSgpO1xuICBpZiAodGhpcy5jb250YWluc0VzYykgeyB0aGlzLnVuZXhwZWN0ZWQoZmxhZ3NTdGFydCk7IH1cblxuICAvLyBWYWxpZGF0ZSBwYXR0ZXJuXG4gIHZhciBzdGF0ZSA9IHRoaXMucmVnZXhwU3RhdGUgfHwgKHRoaXMucmVnZXhwU3RhdGUgPSBuZXcgUmVnRXhwVmFsaWRhdGlvblN0YXRlKHRoaXMpKTtcbiAgc3RhdGUucmVzZXQoc3RhcnQsIHBhdHRlcm4sIGZsYWdzKTtcbiAgdGhpcy52YWxpZGF0ZVJlZ0V4cEZsYWdzKHN0YXRlKTtcbiAgdGhpcy52YWxpZGF0ZVJlZ0V4cFBhdHRlcm4oc3RhdGUpO1xuXG4gIC8vIENyZWF0ZSBMaXRlcmFsI3ZhbHVlIHByb3BlcnR5IHZhbHVlLlxuICB2YXIgdmFsdWUgPSBudWxsO1xuICB0cnkge1xuICAgIHZhbHVlID0gbmV3IFJlZ0V4cChwYXR0ZXJuLCBmbGFncyk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBFU1RyZWUgcmVxdWlyZXMgbnVsbCBpZiBpdCBmYWlsZWQgdG8gaW5zdGFudGlhdGUgUmVnRXhwIG9iamVjdC5cbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vZXN0cmVlL2VzdHJlZS9ibG9iL2EyNzAwM2FkZjRmZDdiZmFkNDRkZTljZWYzNzJhMmVhY2Q1MjdiMWMvZXM1Lm1kI3JlZ2V4cGxpdGVyYWxcbiAgfVxuXG4gIHJldHVybiB0aGlzLmZpbmlzaFRva2VuKHR5cGVzLnJlZ2V4cCwge3BhdHRlcm46IHBhdHRlcm4sIGZsYWdzOiBmbGFncywgdmFsdWU6IHZhbHVlfSlcbn07XG5cbi8vIFJlYWQgYW4gaW50ZWdlciBpbiB0aGUgZ2l2ZW4gcmFkaXguIFJldHVybiBudWxsIGlmIHplcm8gZGlnaXRzXG4vLyB3ZXJlIHJlYWQsIHRoZSBpbnRlZ2VyIHZhbHVlIG90aGVyd2lzZS4gV2hlbiBgbGVuYCBpcyBnaXZlbiwgdGhpc1xuLy8gd2lsbCByZXR1cm4gYG51bGxgIHVubGVzcyB0aGUgaW50ZWdlciBoYXMgZXhhY3RseSBgbGVuYCBkaWdpdHMuXG5cbnBwJDgucmVhZEludCA9IGZ1bmN0aW9uKHJhZGl4LCBsZW4pIHtcbiAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgdmFyIHN0YXJ0ID0gdGhpcy5wb3MsIHRvdGFsID0gMDtcbiAgZm9yICh2YXIgaSA9IDAsIGUgPSBsZW4gPT0gbnVsbCA/IEluZmluaXR5IDogbGVuOyBpIDwgZTsgKytpKSB7XG4gICAgdmFyIGNvZGUgPSB0aGlzJDEuaW5wdXQuY2hhckNvZGVBdCh0aGlzJDEucG9zKSwgdmFsID0gKHZvaWQgMCk7XG4gICAgaWYgKGNvZGUgPj0gOTcpIHsgdmFsID0gY29kZSAtIDk3ICsgMTA7IH0gLy8gYVxuICAgIGVsc2UgaWYgKGNvZGUgPj0gNjUpIHsgdmFsID0gY29kZSAtIDY1ICsgMTA7IH0gLy8gQVxuICAgIGVsc2UgaWYgKGNvZGUgPj0gNDggJiYgY29kZSA8PSA1NykgeyB2YWwgPSBjb2RlIC0gNDg7IH0gLy8gMC05XG4gICAgZWxzZSB7IHZhbCA9IEluZmluaXR5OyB9XG4gICAgaWYgKHZhbCA+PSByYWRpeCkgeyBicmVhayB9XG4gICAgKyt0aGlzJDEucG9zO1xuICAgIHRvdGFsID0gdG90YWwgKiByYWRpeCArIHZhbDtcbiAgfVxuICBpZiAodGhpcy5wb3MgPT09IHN0YXJ0IHx8IGxlbiAhPSBudWxsICYmIHRoaXMucG9zIC0gc3RhcnQgIT09IGxlbikgeyByZXR1cm4gbnVsbCB9XG5cbiAgcmV0dXJuIHRvdGFsXG59O1xuXG5wcCQ4LnJlYWRSYWRpeE51bWJlciA9IGZ1bmN0aW9uKHJhZGl4KSB7XG4gIHRoaXMucG9zICs9IDI7IC8vIDB4XG4gIHZhciB2YWwgPSB0aGlzLnJlYWRJbnQocmFkaXgpO1xuICBpZiAodmFsID09IG51bGwpIHsgdGhpcy5yYWlzZSh0aGlzLnN0YXJ0ICsgMiwgXCJFeHBlY3RlZCBudW1iZXIgaW4gcmFkaXggXCIgKyByYWRpeCk7IH1cbiAgaWYgKGlzSWRlbnRpZmllclN0YXJ0KHRoaXMuZnVsbENoYXJDb2RlQXRQb3MoKSkpIHsgdGhpcy5yYWlzZSh0aGlzLnBvcywgXCJJZGVudGlmaWVyIGRpcmVjdGx5IGFmdGVyIG51bWJlclwiKTsgfVxuICByZXR1cm4gdGhpcy5maW5pc2hUb2tlbih0eXBlcy5udW0sIHZhbClcbn07XG5cbi8vIFJlYWQgYW4gaW50ZWdlciwgb2N0YWwgaW50ZWdlciwgb3IgZmxvYXRpbmctcG9pbnQgbnVtYmVyLlxuXG5wcCQ4LnJlYWROdW1iZXIgPSBmdW5jdGlvbihzdGFydHNXaXRoRG90KSB7XG4gIHZhciBzdGFydCA9IHRoaXMucG9zO1xuICBpZiAoIXN0YXJ0c1dpdGhEb3QgJiYgdGhpcy5yZWFkSW50KDEwKSA9PT0gbnVsbCkgeyB0aGlzLnJhaXNlKHN0YXJ0LCBcIkludmFsaWQgbnVtYmVyXCIpOyB9XG4gIHZhciBvY3RhbCA9IHRoaXMucG9zIC0gc3RhcnQgPj0gMiAmJiB0aGlzLmlucHV0LmNoYXJDb2RlQXQoc3RhcnQpID09PSA0ODtcbiAgaWYgKG9jdGFsICYmIHRoaXMuc3RyaWN0KSB7IHRoaXMucmFpc2Uoc3RhcnQsIFwiSW52YWxpZCBudW1iZXJcIik7IH1cbiAgaWYgKG9jdGFsICYmIC9bODldLy50ZXN0KHRoaXMuaW5wdXQuc2xpY2Uoc3RhcnQsIHRoaXMucG9zKSkpIHsgb2N0YWwgPSBmYWxzZTsgfVxuICB2YXIgbmV4dCA9IHRoaXMuaW5wdXQuY2hhckNvZGVBdCh0aGlzLnBvcyk7XG4gIGlmIChuZXh0ID09PSA0NiAmJiAhb2N0YWwpIHsgLy8gJy4nXG4gICAgKyt0aGlzLnBvcztcbiAgICB0aGlzLnJlYWRJbnQoMTApO1xuICAgIG5leHQgPSB0aGlzLmlucHV0LmNoYXJDb2RlQXQodGhpcy5wb3MpO1xuICB9XG4gIGlmICgobmV4dCA9PT0gNjkgfHwgbmV4dCA9PT0gMTAxKSAmJiAhb2N0YWwpIHsgLy8gJ2VFJ1xuICAgIG5leHQgPSB0aGlzLmlucHV0LmNoYXJDb2RlQXQoKyt0aGlzLnBvcyk7XG4gICAgaWYgKG5leHQgPT09IDQzIHx8IG5leHQgPT09IDQ1KSB7ICsrdGhpcy5wb3M7IH0gLy8gJystJ1xuICAgIGlmICh0aGlzLnJlYWRJbnQoMTApID09PSBudWxsKSB7IHRoaXMucmFpc2Uoc3RhcnQsIFwiSW52YWxpZCBudW1iZXJcIik7IH1cbiAgfVxuICBpZiAoaXNJZGVudGlmaWVyU3RhcnQodGhpcy5mdWxsQ2hhckNvZGVBdFBvcygpKSkgeyB0aGlzLnJhaXNlKHRoaXMucG9zLCBcIklkZW50aWZpZXIgZGlyZWN0bHkgYWZ0ZXIgbnVtYmVyXCIpOyB9XG5cbiAgdmFyIHN0ciA9IHRoaXMuaW5wdXQuc2xpY2Uoc3RhcnQsIHRoaXMucG9zKTtcbiAgdmFyIHZhbCA9IG9jdGFsID8gcGFyc2VJbnQoc3RyLCA4KSA6IHBhcnNlRmxvYXQoc3RyKTtcbiAgcmV0dXJuIHRoaXMuZmluaXNoVG9rZW4odHlwZXMubnVtLCB2YWwpXG59O1xuXG4vLyBSZWFkIGEgc3RyaW5nIHZhbHVlLCBpbnRlcnByZXRpbmcgYmFja3NsYXNoLWVzY2FwZXMuXG5cbnBwJDgucmVhZENvZGVQb2ludCA9IGZ1bmN0aW9uKCkge1xuICB2YXIgY2ggPSB0aGlzLmlucHV0LmNoYXJDb2RlQXQodGhpcy5wb3MpLCBjb2RlO1xuXG4gIGlmIChjaCA9PT0gMTIzKSB7IC8vICd7J1xuICAgIGlmICh0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24gPCA2KSB7IHRoaXMudW5leHBlY3RlZCgpOyB9XG4gICAgdmFyIGNvZGVQb3MgPSArK3RoaXMucG9zO1xuICAgIGNvZGUgPSB0aGlzLnJlYWRIZXhDaGFyKHRoaXMuaW5wdXQuaW5kZXhPZihcIn1cIiwgdGhpcy5wb3MpIC0gdGhpcy5wb3MpO1xuICAgICsrdGhpcy5wb3M7XG4gICAgaWYgKGNvZGUgPiAweDEwRkZGRikgeyB0aGlzLmludmFsaWRTdHJpbmdUb2tlbihjb2RlUG9zLCBcIkNvZGUgcG9pbnQgb3V0IG9mIGJvdW5kc1wiKTsgfVxuICB9IGVsc2Uge1xuICAgIGNvZGUgPSB0aGlzLnJlYWRIZXhDaGFyKDQpO1xuICB9XG4gIHJldHVybiBjb2RlXG59O1xuXG5mdW5jdGlvbiBjb2RlUG9pbnRUb1N0cmluZyhjb2RlKSB7XG4gIC8vIFVURi0xNiBEZWNvZGluZ1xuICBpZiAoY29kZSA8PSAweEZGRkYpIHsgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoY29kZSkgfVxuICBjb2RlIC09IDB4MTAwMDA7XG4gIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKChjb2RlID4+IDEwKSArIDB4RDgwMCwgKGNvZGUgJiAxMDIzKSArIDB4REMwMClcbn1cblxucHAkOC5yZWFkU3RyaW5nID0gZnVuY3Rpb24ocXVvdGUpIHtcbiAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgdmFyIG91dCA9IFwiXCIsIGNodW5rU3RhcnQgPSArK3RoaXMucG9zO1xuICBmb3IgKDs7KSB7XG4gICAgaWYgKHRoaXMkMS5wb3MgPj0gdGhpcyQxLmlucHV0Lmxlbmd0aCkgeyB0aGlzJDEucmFpc2UodGhpcyQxLnN0YXJ0LCBcIlVudGVybWluYXRlZCBzdHJpbmcgY29uc3RhbnRcIik7IH1cbiAgICB2YXIgY2ggPSB0aGlzJDEuaW5wdXQuY2hhckNvZGVBdCh0aGlzJDEucG9zKTtcbiAgICBpZiAoY2ggPT09IHF1b3RlKSB7IGJyZWFrIH1cbiAgICBpZiAoY2ggPT09IDkyKSB7IC8vICdcXCdcbiAgICAgIG91dCArPSB0aGlzJDEuaW5wdXQuc2xpY2UoY2h1bmtTdGFydCwgdGhpcyQxLnBvcyk7XG4gICAgICBvdXQgKz0gdGhpcyQxLnJlYWRFc2NhcGVkQ2hhcihmYWxzZSk7XG4gICAgICBjaHVua1N0YXJ0ID0gdGhpcyQxLnBvcztcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGlzTmV3TGluZShjaCwgdGhpcyQxLm9wdGlvbnMuZWNtYVZlcnNpb24gPj0gMTApKSB7IHRoaXMkMS5yYWlzZSh0aGlzJDEuc3RhcnQsIFwiVW50ZXJtaW5hdGVkIHN0cmluZyBjb25zdGFudFwiKTsgfVxuICAgICAgKyt0aGlzJDEucG9zO1xuICAgIH1cbiAgfVxuICBvdXQgKz0gdGhpcy5pbnB1dC5zbGljZShjaHVua1N0YXJ0LCB0aGlzLnBvcysrKTtcbiAgcmV0dXJuIHRoaXMuZmluaXNoVG9rZW4odHlwZXMuc3RyaW5nLCBvdXQpXG59O1xuXG4vLyBSZWFkcyB0ZW1wbGF0ZSBzdHJpbmcgdG9rZW5zLlxuXG52YXIgSU5WQUxJRF9URU1QTEFURV9FU0NBUEVfRVJST1IgPSB7fTtcblxucHAkOC50cnlSZWFkVGVtcGxhdGVUb2tlbiA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmluVGVtcGxhdGVFbGVtZW50ID0gdHJ1ZTtcbiAgdHJ5IHtcbiAgICB0aGlzLnJlYWRUbXBsVG9rZW4oKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgaWYgKGVyciA9PT0gSU5WQUxJRF9URU1QTEFURV9FU0NBUEVfRVJST1IpIHtcbiAgICAgIHRoaXMucmVhZEludmFsaWRUZW1wbGF0ZVRva2VuKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IGVyclxuICAgIH1cbiAgfVxuXG4gIHRoaXMuaW5UZW1wbGF0ZUVsZW1lbnQgPSBmYWxzZTtcbn07XG5cbnBwJDguaW52YWxpZFN0cmluZ1Rva2VuID0gZnVuY3Rpb24ocG9zaXRpb24sIG1lc3NhZ2UpIHtcbiAgaWYgKHRoaXMuaW5UZW1wbGF0ZUVsZW1lbnQgJiYgdGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uID49IDkpIHtcbiAgICB0aHJvdyBJTlZBTElEX1RFTVBMQVRFX0VTQ0FQRV9FUlJPUlxuICB9IGVsc2Uge1xuICAgIHRoaXMucmFpc2UocG9zaXRpb24sIG1lc3NhZ2UpO1xuICB9XG59O1xuXG5wcCQ4LnJlYWRUbXBsVG9rZW4gPSBmdW5jdGlvbigpIHtcbiAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgdmFyIG91dCA9IFwiXCIsIGNodW5rU3RhcnQgPSB0aGlzLnBvcztcbiAgZm9yICg7Oykge1xuICAgIGlmICh0aGlzJDEucG9zID49IHRoaXMkMS5pbnB1dC5sZW5ndGgpIHsgdGhpcyQxLnJhaXNlKHRoaXMkMS5zdGFydCwgXCJVbnRlcm1pbmF0ZWQgdGVtcGxhdGVcIik7IH1cbiAgICB2YXIgY2ggPSB0aGlzJDEuaW5wdXQuY2hhckNvZGVBdCh0aGlzJDEucG9zKTtcbiAgICBpZiAoY2ggPT09IDk2IHx8IGNoID09PSAzNiAmJiB0aGlzJDEuaW5wdXQuY2hhckNvZGVBdCh0aGlzJDEucG9zICsgMSkgPT09IDEyMykgeyAvLyAnYCcsICckeydcbiAgICAgIGlmICh0aGlzJDEucG9zID09PSB0aGlzJDEuc3RhcnQgJiYgKHRoaXMkMS50eXBlID09PSB0eXBlcy50ZW1wbGF0ZSB8fCB0aGlzJDEudHlwZSA9PT0gdHlwZXMuaW52YWxpZFRlbXBsYXRlKSkge1xuICAgICAgICBpZiAoY2ggPT09IDM2KSB7XG4gICAgICAgICAgdGhpcyQxLnBvcyArPSAyO1xuICAgICAgICAgIHJldHVybiB0aGlzJDEuZmluaXNoVG9rZW4odHlwZXMuZG9sbGFyQnJhY2VMKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICsrdGhpcyQxLnBvcztcbiAgICAgICAgICByZXR1cm4gdGhpcyQxLmZpbmlzaFRva2VuKHR5cGVzLmJhY2tRdW90ZSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgb3V0ICs9IHRoaXMkMS5pbnB1dC5zbGljZShjaHVua1N0YXJ0LCB0aGlzJDEucG9zKTtcbiAgICAgIHJldHVybiB0aGlzJDEuZmluaXNoVG9rZW4odHlwZXMudGVtcGxhdGUsIG91dClcbiAgICB9XG4gICAgaWYgKGNoID09PSA5MikgeyAvLyAnXFwnXG4gICAgICBvdXQgKz0gdGhpcyQxLmlucHV0LnNsaWNlKGNodW5rU3RhcnQsIHRoaXMkMS5wb3MpO1xuICAgICAgb3V0ICs9IHRoaXMkMS5yZWFkRXNjYXBlZENoYXIodHJ1ZSk7XG4gICAgICBjaHVua1N0YXJ0ID0gdGhpcyQxLnBvcztcbiAgICB9IGVsc2UgaWYgKGlzTmV3TGluZShjaCkpIHtcbiAgICAgIG91dCArPSB0aGlzJDEuaW5wdXQuc2xpY2UoY2h1bmtTdGFydCwgdGhpcyQxLnBvcyk7XG4gICAgICArK3RoaXMkMS5wb3M7XG4gICAgICBzd2l0Y2ggKGNoKSB7XG4gICAgICBjYXNlIDEzOlxuICAgICAgICBpZiAodGhpcyQxLmlucHV0LmNoYXJDb2RlQXQodGhpcyQxLnBvcykgPT09IDEwKSB7ICsrdGhpcyQxLnBvczsgfVxuICAgICAgY2FzZSAxMDpcbiAgICAgICAgb3V0ICs9IFwiXFxuXCI7XG4gICAgICAgIGJyZWFrXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBvdXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShjaCk7XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgICBpZiAodGhpcyQxLm9wdGlvbnMubG9jYXRpb25zKSB7XG4gICAgICAgICsrdGhpcyQxLmN1ckxpbmU7XG4gICAgICAgIHRoaXMkMS5saW5lU3RhcnQgPSB0aGlzJDEucG9zO1xuICAgICAgfVxuICAgICAgY2h1bmtTdGFydCA9IHRoaXMkMS5wb3M7XG4gICAgfSBlbHNlIHtcbiAgICAgICsrdGhpcyQxLnBvcztcbiAgICB9XG4gIH1cbn07XG5cbi8vIFJlYWRzIGEgdGVtcGxhdGUgdG9rZW4gdG8gc2VhcmNoIGZvciB0aGUgZW5kLCB3aXRob3V0IHZhbGlkYXRpbmcgYW55IGVzY2FwZSBzZXF1ZW5jZXNcbnBwJDgucmVhZEludmFsaWRUZW1wbGF0ZVRva2VuID0gZnVuY3Rpb24oKSB7XG4gIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIGZvciAoOyB0aGlzLnBvcyA8IHRoaXMuaW5wdXQubGVuZ3RoOyB0aGlzLnBvcysrKSB7XG4gICAgc3dpdGNoICh0aGlzJDEuaW5wdXRbdGhpcyQxLnBvc10pIHtcbiAgICBjYXNlIFwiXFxcXFwiOlxuICAgICAgKyt0aGlzJDEucG9zO1xuICAgICAgYnJlYWtcblxuICAgIGNhc2UgXCIkXCI6XG4gICAgICBpZiAodGhpcyQxLmlucHV0W3RoaXMkMS5wb3MgKyAxXSAhPT0gXCJ7XCIpIHtcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICAvLyBmYWxscyB0aHJvdWdoXG5cbiAgICBjYXNlIFwiYFwiOlxuICAgICAgcmV0dXJuIHRoaXMkMS5maW5pc2hUb2tlbih0eXBlcy5pbnZhbGlkVGVtcGxhdGUsIHRoaXMkMS5pbnB1dC5zbGljZSh0aGlzJDEuc3RhcnQsIHRoaXMkMS5wb3MpKVxuXG4gICAgLy8gbm8gZGVmYXVsdFxuICAgIH1cbiAgfVxuICB0aGlzLnJhaXNlKHRoaXMuc3RhcnQsIFwiVW50ZXJtaW5hdGVkIHRlbXBsYXRlXCIpO1xufTtcblxuLy8gVXNlZCB0byByZWFkIGVzY2FwZWQgY2hhcmFjdGVyc1xuXG5wcCQ4LnJlYWRFc2NhcGVkQ2hhciA9IGZ1bmN0aW9uKGluVGVtcGxhdGUpIHtcbiAgdmFyIGNoID0gdGhpcy5pbnB1dC5jaGFyQ29kZUF0KCsrdGhpcy5wb3MpO1xuICArK3RoaXMucG9zO1xuICBzd2l0Y2ggKGNoKSB7XG4gIGNhc2UgMTEwOiByZXR1cm4gXCJcXG5cIiAvLyAnbicgLT4gJ1xcbidcbiAgY2FzZSAxMTQ6IHJldHVybiBcIlxcclwiIC8vICdyJyAtPiAnXFxyJ1xuICBjYXNlIDEyMDogcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUodGhpcy5yZWFkSGV4Q2hhcigyKSkgLy8gJ3gnXG4gIGNhc2UgMTE3OiByZXR1cm4gY29kZVBvaW50VG9TdHJpbmcodGhpcy5yZWFkQ29kZVBvaW50KCkpIC8vICd1J1xuICBjYXNlIDExNjogcmV0dXJuIFwiXFx0XCIgLy8gJ3QnIC0+ICdcXHQnXG4gIGNhc2UgOTg6IHJldHVybiBcIlxcYlwiIC8vICdiJyAtPiAnXFxiJ1xuICBjYXNlIDExODogcmV0dXJuIFwiXFx1MDAwYlwiIC8vICd2JyAtPiAnXFx1MDAwYidcbiAgY2FzZSAxMDI6IHJldHVybiBcIlxcZlwiIC8vICdmJyAtPiAnXFxmJ1xuICBjYXNlIDEzOiBpZiAodGhpcy5pbnB1dC5jaGFyQ29kZUF0KHRoaXMucG9zKSA9PT0gMTApIHsgKyt0aGlzLnBvczsgfSAvLyAnXFxyXFxuJ1xuICBjYXNlIDEwOiAvLyAnIFxcbidcbiAgICBpZiAodGhpcy5vcHRpb25zLmxvY2F0aW9ucykgeyB0aGlzLmxpbmVTdGFydCA9IHRoaXMucG9zOyArK3RoaXMuY3VyTGluZTsgfVxuICAgIHJldHVybiBcIlwiXG4gIGRlZmF1bHQ6XG4gICAgaWYgKGNoID49IDQ4ICYmIGNoIDw9IDU1KSB7XG4gICAgICB2YXIgb2N0YWxTdHIgPSB0aGlzLmlucHV0LnN1YnN0cih0aGlzLnBvcyAtIDEsIDMpLm1hdGNoKC9eWzAtN10rLylbMF07XG4gICAgICB2YXIgb2N0YWwgPSBwYXJzZUludChvY3RhbFN0ciwgOCk7XG4gICAgICBpZiAob2N0YWwgPiAyNTUpIHtcbiAgICAgICAgb2N0YWxTdHIgPSBvY3RhbFN0ci5zbGljZSgwLCAtMSk7XG4gICAgICAgIG9jdGFsID0gcGFyc2VJbnQob2N0YWxTdHIsIDgpO1xuICAgICAgfVxuICAgICAgdGhpcy5wb3MgKz0gb2N0YWxTdHIubGVuZ3RoIC0gMTtcbiAgICAgIGNoID0gdGhpcy5pbnB1dC5jaGFyQ29kZUF0KHRoaXMucG9zKTtcbiAgICAgIGlmICgob2N0YWxTdHIgIT09IFwiMFwiIHx8IGNoID09PSA1NiB8fCBjaCA9PT0gNTcpICYmICh0aGlzLnN0cmljdCB8fCBpblRlbXBsYXRlKSkge1xuICAgICAgICB0aGlzLmludmFsaWRTdHJpbmdUb2tlbihcbiAgICAgICAgICB0aGlzLnBvcyAtIDEgLSBvY3RhbFN0ci5sZW5ndGgsXG4gICAgICAgICAgaW5UZW1wbGF0ZVxuICAgICAgICAgICAgPyBcIk9jdGFsIGxpdGVyYWwgaW4gdGVtcGxhdGUgc3RyaW5nXCJcbiAgICAgICAgICAgIDogXCJPY3RhbCBsaXRlcmFsIGluIHN0cmljdCBtb2RlXCJcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKG9jdGFsKVxuICAgIH1cbiAgICBpZiAoaXNOZXdMaW5lKGNoKSkge1xuICAgICAgLy8gVW5pY29kZSBuZXcgbGluZSBjaGFyYWN0ZXJzIGFmdGVyIFxcIGdldCByZW1vdmVkIGZyb20gb3V0cHV0IGluIGJvdGhcbiAgICAgIC8vIHRlbXBsYXRlIGxpdGVyYWxzIGFuZCBzdHJpbmdzXG4gICAgICByZXR1cm4gXCJcIlxuICAgIH1cbiAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShjaClcbiAgfVxufTtcblxuLy8gVXNlZCB0byByZWFkIGNoYXJhY3RlciBlc2NhcGUgc2VxdWVuY2VzICgnXFx4JywgJ1xcdScsICdcXFUnKS5cblxucHAkOC5yZWFkSGV4Q2hhciA9IGZ1bmN0aW9uKGxlbikge1xuICB2YXIgY29kZVBvcyA9IHRoaXMucG9zO1xuICB2YXIgbiA9IHRoaXMucmVhZEludCgxNiwgbGVuKTtcbiAgaWYgKG4gPT09IG51bGwpIHsgdGhpcy5pbnZhbGlkU3RyaW5nVG9rZW4oY29kZVBvcywgXCJCYWQgY2hhcmFjdGVyIGVzY2FwZSBzZXF1ZW5jZVwiKTsgfVxuICByZXR1cm4gblxufTtcblxuLy8gUmVhZCBhbiBpZGVudGlmaWVyLCBhbmQgcmV0dXJuIGl0IGFzIGEgc3RyaW5nLiBTZXRzIGB0aGlzLmNvbnRhaW5zRXNjYFxuLy8gdG8gd2hldGhlciB0aGUgd29yZCBjb250YWluZWQgYSAnXFx1JyBlc2NhcGUuXG4vL1xuLy8gSW5jcmVtZW50YWxseSBhZGRzIG9ubHkgZXNjYXBlZCBjaGFycywgYWRkaW5nIG90aGVyIGNodW5rcyBhcy1pc1xuLy8gYXMgYSBtaWNyby1vcHRpbWl6YXRpb24uXG5cbnBwJDgucmVhZFdvcmQxID0gZnVuY3Rpb24oKSB7XG4gIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIHRoaXMuY29udGFpbnNFc2MgPSBmYWxzZTtcbiAgdmFyIHdvcmQgPSBcIlwiLCBmaXJzdCA9IHRydWUsIGNodW5rU3RhcnQgPSB0aGlzLnBvcztcbiAgdmFyIGFzdHJhbCA9IHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA+PSA2O1xuICB3aGlsZSAodGhpcy5wb3MgPCB0aGlzLmlucHV0Lmxlbmd0aCkge1xuICAgIHZhciBjaCA9IHRoaXMkMS5mdWxsQ2hhckNvZGVBdFBvcygpO1xuICAgIGlmIChpc0lkZW50aWZpZXJDaGFyKGNoLCBhc3RyYWwpKSB7XG4gICAgICB0aGlzJDEucG9zICs9IGNoIDw9IDB4ZmZmZiA/IDEgOiAyO1xuICAgIH0gZWxzZSBpZiAoY2ggPT09IDkyKSB7IC8vIFwiXFxcIlxuICAgICAgdGhpcyQxLmNvbnRhaW5zRXNjID0gdHJ1ZTtcbiAgICAgIHdvcmQgKz0gdGhpcyQxLmlucHV0LnNsaWNlKGNodW5rU3RhcnQsIHRoaXMkMS5wb3MpO1xuICAgICAgdmFyIGVzY1N0YXJ0ID0gdGhpcyQxLnBvcztcbiAgICAgIGlmICh0aGlzJDEuaW5wdXQuY2hhckNvZGVBdCgrK3RoaXMkMS5wb3MpICE9PSAxMTcpIC8vIFwidVwiXG4gICAgICAgIHsgdGhpcyQxLmludmFsaWRTdHJpbmdUb2tlbih0aGlzJDEucG9zLCBcIkV4cGVjdGluZyBVbmljb2RlIGVzY2FwZSBzZXF1ZW5jZSBcXFxcdVhYWFhcIik7IH1cbiAgICAgICsrdGhpcyQxLnBvcztcbiAgICAgIHZhciBlc2MgPSB0aGlzJDEucmVhZENvZGVQb2ludCgpO1xuICAgICAgaWYgKCEoZmlyc3QgPyBpc0lkZW50aWZpZXJTdGFydCA6IGlzSWRlbnRpZmllckNoYXIpKGVzYywgYXN0cmFsKSlcbiAgICAgICAgeyB0aGlzJDEuaW52YWxpZFN0cmluZ1Rva2VuKGVzY1N0YXJ0LCBcIkludmFsaWQgVW5pY29kZSBlc2NhcGVcIik7IH1cbiAgICAgIHdvcmQgKz0gY29kZVBvaW50VG9TdHJpbmcoZXNjKTtcbiAgICAgIGNodW5rU3RhcnQgPSB0aGlzJDEucG9zO1xuICAgIH0gZWxzZSB7XG4gICAgICBicmVha1xuICAgIH1cbiAgICBmaXJzdCA9IGZhbHNlO1xuICB9XG4gIHJldHVybiB3b3JkICsgdGhpcy5pbnB1dC5zbGljZShjaHVua1N0YXJ0LCB0aGlzLnBvcylcbn07XG5cbi8vIFJlYWQgYW4gaWRlbnRpZmllciBvciBrZXl3b3JkIHRva2VuLiBXaWxsIGNoZWNrIGZvciByZXNlcnZlZFxuLy8gd29yZHMgd2hlbiBuZWNlc3NhcnkuXG5cbnBwJDgucmVhZFdvcmQgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHdvcmQgPSB0aGlzLnJlYWRXb3JkMSgpO1xuICB2YXIgdHlwZSA9IHR5cGVzLm5hbWU7XG4gIGlmICh0aGlzLmtleXdvcmRzLnRlc3Qod29yZCkpIHtcbiAgICBpZiAodGhpcy5jb250YWluc0VzYykgeyB0aGlzLnJhaXNlUmVjb3ZlcmFibGUodGhpcy5zdGFydCwgXCJFc2NhcGUgc2VxdWVuY2UgaW4ga2V5d29yZCBcIiArIHdvcmQpOyB9XG4gICAgdHlwZSA9IGtleXdvcmRzJDFbd29yZF07XG4gIH1cbiAgcmV0dXJuIHRoaXMuZmluaXNoVG9rZW4odHlwZSwgd29yZClcbn07XG5cbi8vIEFjb3JuIGlzIGEgdGlueSwgZmFzdCBKYXZhU2NyaXB0IHBhcnNlciB3cml0dGVuIGluIEphdmFTY3JpcHQuXG4vL1xuLy8gQWNvcm4gd2FzIHdyaXR0ZW4gYnkgTWFyaWpuIEhhdmVyYmVrZSwgSW5ndmFyIFN0ZXBhbnlhbiwgYW5kXG4vLyB2YXJpb3VzIGNvbnRyaWJ1dG9ycyBhbmQgcmVsZWFzZWQgdW5kZXIgYW4gTUlUIGxpY2Vuc2UuXG4vL1xuLy8gR2l0IHJlcG9zaXRvcmllcyBmb3IgQWNvcm4gYXJlIGF2YWlsYWJsZSBhdFxuLy9cbi8vICAgICBodHRwOi8vbWFyaWpuaGF2ZXJiZWtlLm5sL2dpdC9hY29yblxuLy8gICAgIGh0dHBzOi8vZ2l0aHViLmNvbS9hY29ybmpzL2Fjb3JuLmdpdFxuLy9cbi8vIFBsZWFzZSB1c2UgdGhlIFtnaXRodWIgYnVnIHRyYWNrZXJdW2doYnRdIHRvIHJlcG9ydCBpc3N1ZXMuXG4vL1xuLy8gW2doYnRdOiBodHRwczovL2dpdGh1Yi5jb20vYWNvcm5qcy9hY29ybi9pc3N1ZXNcbi8vXG4vLyBbd2Fsa106IHV0aWwvd2Fsay5qc1xuXG52YXIgdmVyc2lvbiA9IFwiNi4xLjFcIjtcblxuLy8gVGhlIG1haW4gZXhwb3J0ZWQgaW50ZXJmYWNlICh1bmRlciBgc2VsZi5hY29ybmAgd2hlbiBpbiB0aGVcbi8vIGJyb3dzZXIpIGlzIGEgYHBhcnNlYCBmdW5jdGlvbiB0aGF0IHRha2VzIGEgY29kZSBzdHJpbmcgYW5kXG4vLyByZXR1cm5zIGFuIGFic3RyYWN0IHN5bnRheCB0cmVlIGFzIHNwZWNpZmllZCBieSBbTW96aWxsYSBwYXJzZXJcbi8vIEFQSV1bYXBpXS5cbi8vXG4vLyBbYXBpXTogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9TcGlkZXJNb25rZXkvUGFyc2VyX0FQSVxuXG5mdW5jdGlvbiBwYXJzZShpbnB1dCwgb3B0aW9ucykge1xuICByZXR1cm4gUGFyc2VyLnBhcnNlKGlucHV0LCBvcHRpb25zKVxufVxuXG4vLyBUaGlzIGZ1bmN0aW9uIHRyaWVzIHRvIHBhcnNlIGEgc2luZ2xlIGV4cHJlc3Npb24gYXQgYSBnaXZlblxuLy8gb2Zmc2V0IGluIGEgc3RyaW5nLiBVc2VmdWwgZm9yIHBhcnNpbmcgbWl4ZWQtbGFuZ3VhZ2UgZm9ybWF0c1xuLy8gdGhhdCBlbWJlZCBKYXZhU2NyaXB0IGV4cHJlc3Npb25zLlxuXG5mdW5jdGlvbiBwYXJzZUV4cHJlc3Npb25BdChpbnB1dCwgcG9zLCBvcHRpb25zKSB7XG4gIHJldHVybiBQYXJzZXIucGFyc2VFeHByZXNzaW9uQXQoaW5wdXQsIHBvcywgb3B0aW9ucylcbn1cblxuLy8gQWNvcm4gaXMgb3JnYW5pemVkIGFzIGEgdG9rZW5pemVyIGFuZCBhIHJlY3Vyc2l2ZS1kZXNjZW50IHBhcnNlci5cbi8vIFRoZSBgdG9rZW5pemVyYCBleHBvcnQgcHJvdmlkZXMgYW4gaW50ZXJmYWNlIHRvIHRoZSB0b2tlbml6ZXIuXG5cbmZ1bmN0aW9uIHRva2VuaXplcihpbnB1dCwgb3B0aW9ucykge1xuICByZXR1cm4gUGFyc2VyLnRva2VuaXplcihpbnB1dCwgb3B0aW9ucylcbn1cblxuZXhwb3J0IHsgdmVyc2lvbiwgcGFyc2UsIHBhcnNlRXhwcmVzc2lvbkF0LCB0b2tlbml6ZXIsIFBhcnNlciwgZGVmYXVsdE9wdGlvbnMsIFBvc2l0aW9uLCBTb3VyY2VMb2NhdGlvbiwgZ2V0TGluZUluZm8sIE5vZGUsIFRva2VuVHlwZSwgdHlwZXMgYXMgdG9rVHlwZXMsIGtleXdvcmRzJDEgYXMga2V5d29yZFR5cGVzLCBUb2tDb250ZXh0LCB0eXBlcyQxIGFzIHRva0NvbnRleHRzLCBpc0lkZW50aWZpZXJDaGFyLCBpc0lkZW50aWZpZXJTdGFydCwgVG9rZW4sIGlzTmV3TGluZSwgbGluZUJyZWFrLCBsaW5lQnJlYWtHLCBub25BU0NJSXdoaXRlc3BhY2UgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFjb3JuLm1qcy5tYXBcbiIsImltcG9ydCAqIGFzIHBhcGVyIGZyb20gJ3BhcGVyJztcblxuaW1wb3J0IHsgUG9pbnQsIE1hdHJpeCB9IGZyb20gJ3BhcGVyJztcblxuaW1wb3J0IHsgR3JpZCB9IGZyb20gJy4vZ3JpZCc7XG5pbXBvcnQgeyBBdXRvbWF0YSB9IGZyb20gJy4vYXV0b21hdGEnXG5cbmNsYXNzIFJlbmRlcmVyIHtcblxuICBwcml2YXRlIHNwYWNpbmc6IG51bWJlcjtcbiAgcHJpdmF0ZSB0b0hleE1hdHJpeDogTWF0cml4O1xuICBwcml2YXRlIHRvRXVjbGlkZWFuTWF0cml4OiBNYXRyaXg7XG5cbiAgY29uc3RydWN0b3Ioc3BhY2luZzogbnVtYmVyKSB7XG4gICAgcGFwZXIuc2V0dXAoPEhUTUxDYW52YXNFbGVtZW50PmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhdXRvbWF0YVZpZXcnKSk7XG4gICAgdGhpcy5zcGFjaW5nID0gc3BhY2luZztcblxuICAgIHRoaXMudG9IZXhNYXRyaXggPSAobmV3IE1hdHJpeCgxLCAwLCAwLCAxLCAwLCAwKSlcbiAgICAgIC5za2V3KDMwLCAwKVxuICAgICAgLnNjYWxlKDEsIE1hdGguc2luKE1hdGguUEkgLyAzKSlcbiAgICAgIC5zY2FsZSh0aGlzLnNwYWNpbmcpO1xuXG4gICAgdGhpcy50b0V1Y2xpZGVhbk1hdHJpeCA9IHRoaXMudG9IZXhNYXRyaXguaW52ZXJ0ZWQoKTtcbiAgfVxuXG4gIHByaXZhdGUgdG9IZXhDb29yZChldWNsaWRlYW5Db29yZDogUG9pbnQpOiBQb2ludCB7XG4gICAgcmV0dXJuIHRoaXMudG9IZXhNYXRyaXgudHJhbnNmb3JtKGV1Y2xpZGVhbkNvb3JkKTtcbiAgfVxuXG4gIHByaXZhdGUgdG9FdWNsaWRlYW5Db29yZChoZXhDb29yZDogUG9pbnQpOiBQb2ludCB7XG4gICAgcmV0dXJuIHRoaXMudG9FdWNsaWRlYW5NYXRyaXgudHJhbnNmb3JtKGhleENvb3JkKTtcbiAgfVxuXG4gIHByaXZhdGUgKmhleENvb3JkcyhldWNsaWRlYW5Db29yZHM6IEl0ZXJhYmxlPFBvaW50Pik6IEl0ZXJhYmxlPFBvaW50PiB7XG4gICAgZm9yIChsZXQgZXVjbGlkZWFuQ29vcmQgb2YgZXVjbGlkZWFuQ29vcmRzKSB7XG4gICAgICB5aWVsZCB0aGlzLnRvSGV4Q29vcmQoZXVjbGlkZWFuQ29vcmQpO1xuICAgIH1cbiAgfVxuXG4gIHJlbmRlcihncmlkOiBHcmlkLCBhdXRvbWF0YTogQXV0b21hdGEpIHtcbiAgICBwYXBlci5wcm9qZWN0LmNsZWFyKCk7XG5cbiAgICBmb3IgKGxldCBwb2ludENvb3JkIG9mIHRoaXMuaGV4Q29vcmRzKGdyaWQuZ2V0UG9pbnRDb29yZHMoKSkpIHtcbiAgICAgIGxldCBwb2ludFNoYXBlID0gcGFwZXIuU2hhcGUuQ2lyY2xlKHBvaW50Q29vcmQsIDEpO1xuICAgICAgcG9pbnRTaGFwZS5zdHJva2VDb2xvciA9ICcjQ0NDJztcbiAgICB9XG5cbiAgICBsZXQgZXVjbGlkZWFuQ2lyY2xlQ29vcmRzID0gYXV0b21hdGEuZ2V0Q2lyY2xlQ29vcmRzKCk7XG4gICAgZm9yIChsZXQgY2lyY2xlQ29vcmQgb2YgdGhpcy5oZXhDb29yZHMoZXVjbGlkZWFuQ2lyY2xlQ29vcmRzKSkge1xuICAgICAgbGV0IGNpcmNsZVNoYXBlID0gcGFwZXIuU2hhcGUuQ2lyY2xlKGNpcmNsZUNvb3JkLCB0aGlzLnNwYWNpbmcgLyAyKTtcbiAgICAgIGNpcmNsZVNoYXBlLnN0cm9rZUNvbG9yID0gJyNibGFjayc7XG4gICAgfVxuXG4gICAgcGFwZXIudmlldy5kcmF3KCk7XG4gIH1cbn1cblxuZXhwb3J0IHsgUmVuZGVyZXIgfTsiLCJpbXBvcnQgeyBQb2ludCwgU2l6ZSwgTWF0cml4IH0gZnJvbSAncGFwZXInXG5pbXBvcnQgeyBDaXJjbGUgfSBmcm9tICcuL2NpcmNsZSc7XG5cbmNsYXNzIEdyaWQge1xuICBvZmZzZXQ6IFBvaW50O1xuICBzaXplOiBTaXplO1xuXG4gIGNvbnN0cnVjdG9yKG9mZnNldDogUG9pbnQsIHNpemU6IFNpemUpIHtcbiAgICB0aGlzLm9mZnNldCA9IG9mZnNldDtcbiAgICB0aGlzLnNpemUgPSBzaXplO1xuICB9XG5cbiAgKmdldFBvaW50Q29vcmRzKCk6IEl0ZXJhYmxlPFBvaW50PiB7XG4gICAgZm9yIChsZXQgeCA9IHRoaXMub2Zmc2V0Lng7IHggPCB0aGlzLnNpemUud2lkdGg7IHgrKykge1xuICAgICAgZm9yIChsZXQgeSA9IHRoaXMub2Zmc2V0Lnk7IHkgPCB0aGlzLnNpemUuaGVpZ2h0OyB5KyspIHtcbiAgICAgICAgeWllbGQgbmV3IFBvaW50KHgsIHkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgeyBHcmlkIH0iLCJpbXBvcnQgeyBQb2ludCB9IGZyb20gJ3BhcGVyJ1xuXG5jb25zdCBjYW5vbmljYWxfbmVpZ2hib3Job29kX2RlbHRhcyA9IFtcbiAgbmV3IFBvaW50KDEsIDApLFxuICBuZXcgUG9pbnQoMCwgMSksXG4gIG5ldyBQb2ludCgtMSwgMSksXG4gIG5ldyBQb2ludCgtMSwgMCksXG4gIG5ldyBQb2ludCgwLCAtMSksXG4gIG5ldyBQb2ludCgxLCAtMSksXG5dO1xuXG5jb25zdCBjYW5vbmljYWxfYmxvY2tlcl9kZWx0YXMgPSBbXG4gIG5ldyBQb2ludCgxLCAxKSxcbiAgbmV3IFBvaW50KC0xLCAyKSxcbiAgbmV3IFBvaW50KC0yLCAxKSxcbiAgbmV3IFBvaW50KC0xLCAtMSksXG4gIG5ldyBQb2ludCgxLCAtMiksXG4gIG5ldyBQb2ludCgyLCAtMSksXG5dO1xuXG5jbGFzcyBDaXJjbGUge1xuICBwcml2YXRlIHBvc2l0aW9uOiBQb2ludDtcblxuICBjb25zdHJ1Y3Rvcihwb3NpdGlvbjogUG9pbnQpIHtcbiAgICB0aGlzLnBvc2l0aW9uID0gcG9zaXRpb247XG4gIH1cblxuICBnZXRQb3NpdGlvbigpOiBQb2ludCB7XG4gICAgcmV0dXJuIHRoaXMucG9zaXRpb247XG4gIH1cblxuICBzZXRQb3NpdGlvbihwb3NpdGlvbjogUG9pbnQpIHtcbiAgICB0aGlzLnBvc2l0aW9uID0gcG9zaXRpb247XG4gIH1cblxuICBuZWlnaGJvcmhvb2RQb2ludHMoKTogUG9pbnRbXSB7XG4gICAgcmV0dXJuIGNhbm9uaWNhbF9uZWlnaGJvcmhvb2RfZGVsdGFzLm1hcCgoZGVsdGEpID0+IHRoaXMucG9zaXRpb24uYWRkKGRlbHRhKSk7XG4gIH1cblxuICBibG9ja2luZ1BvaW50cygpOiBQb2ludFtdIHtcbiAgICByZXR1cm4gY2Fub25pY2FsX2Jsb2NrZXJfZGVsdGFzLm1hcCgoZGVsdGEpID0+IHRoaXMucG9zaXRpb24uYWRkKGRlbHRhKSk7XG4gIH1cbn1cblxuZXhwb3J0IHsgQ2lyY2xlIH0iLCJcbmVudW0gRGlyZWN0aW9uIHtcbiAgQ1csXG4gIENDV1xufVxuXG5jbGFzcyBNb3ZlIHtcbiAgcmVhZG9ubHkgZGlyZWN0aW9uOiBEaXJlY3Rpb247XG4gIHJlYWRvbmx5IGRpc3RhbmNlOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqXG4gICAqIEBwYXJhbSB7RGlyZWN0aW9ufSBkaXJlY3Rpb25cbiAgICogIFRoZSBkaXJlY3Rpb24gdG8gbW92ZSBhcm91bmQgdGhlIGNpcmNsZS5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGRpc3RhbmNlXG4gICAqICBUaGUgbnVtYmVyIG9mIHBvc2l0aW9ucyB0byBtb3ZlIGFyb3VuZCB0aGUgY2lyY2xlLlxuICAgKiAgQW4gaW50ZWdlciBiZXR3ZWVuIDEgYW5kIDUgKGluY2x1c2l2ZSkuXG4gICAqICBFYWNoIGluY3JlbWVudCBpcyBhIHN0ZXAgb2Ygz4AvNiBvciAzMMKwXG4gICAqL1xuICBjb25zdHJ1Y3RvcihkaXJlY3Rpb246IERpcmVjdGlvbiwgZGlzdGFuY2U6IG51bWJlcikge1xuICAgIGlmIChkaXN0YW5jZSA8IDEgfHwgZGlzdGFuY2UgPiA1KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Rpc3RhbmNlIG11c3QgYmUgZnJvbSAxIHRvIDUgKGluY2x1c2l2ZSknKTtcbiAgICB9XG5cbiAgICB0aGlzLmRpcmVjdGlvbiA9IGRpcmVjdGlvbjtcbiAgICB0aGlzLmRpc3RhbmNlID0gZGlzdGFuY2U7XG4gIH1cblxuICB0b0tleSgpOiBzdHJpbmcge1xuICAgIGxldCBkaXJlY3Rpb25TdHJpbmcgPSB0aGlzLmRpcmVjdGlvbiA9PT0gRGlyZWN0aW9uLkNXID8gJ0NXJyA6ICdDQ1cnO1xuICAgIHJldHVybiBgJHt0aGlzLmRpc3RhbmNlfSR7ZGlyZWN0aW9uU3RyaW5nfWA7XG4gIH1cblxuICBzdGF0aWMga2V5KGRpcmVjdGlvbjogRGlyZWN0aW9uLCBkaXN0YW5jZTogbnVtYmVyKTogc3RyaW5nIHtcbiAgICByZXR1cm4gbmV3IE1vdmUoZGlyZWN0aW9uLCBkaXN0YW5jZSkudG9LZXkoKTtcbiAgfVxufVxuXG5leHBvcnQge1xuICBEaXJlY3Rpb24sXG4gIE1vdmVcbn0iLCJpbXBvcnQgeyBQb2ludCB9IGZyb20gJ3BhcGVyJztcblxuaW1wb3J0IHsgTW92ZSB9IGZyb20gJy4vbW92ZSc7XG5cbmNsYXNzIE1vdmVNYXAge1xuICBwcml2YXRlIG1hcDogTWFwPFN0cmluZywgUG9pbnQ+O1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMubWFwID0gbmV3IE1hcDxTdHJpbmcsIFBvaW50PigpO1xuICB9XG5cbiAgZ2V0KG1vdmU6IE1vdmUpOiBQb2ludCB7XG4gICAgcmV0dXJuIHRoaXMubWFwLmdldChtb3ZlLnRvS2V5KCkpO1xuICB9XG5cbiAgc2V0KG1vdmU6IE1vdmUsIHBvaW50OiBQb2ludCkge1xuICAgIHRoaXMubWFwLnNldChtb3ZlLnRvS2V5KCksIHBvaW50KTtcbiAgfVxuXG4gIGhhcyhtb3ZlOiBNb3ZlKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMubWFwLmhhcyhtb3ZlLnRvS2V5KCkpO1xuICB9XG59XG5cbmV4cG9ydCB7IE1vdmVNYXAgfSIsImltcG9ydCB7IFBvaW50IH0gZnJvbSAncGFwZXInO1xuXG5pbXBvcnQgeyBDaXJjbGUgfSBmcm9tICcuL2NpcmNsZSc7XG5pbXBvcnQgeyBHcmlkIH0gZnJvbSAnLi9ncmlkJztcbmltcG9ydCB7IE1vdmUsIERpcmVjdGlvbiB9IGZyb20gJy4vbW92ZSc7XG5pbXBvcnQgeyBNb3ZlTWFwIH0gZnJvbSAnLi9tb3ZlX21hcCc7XG5cbmNsYXNzIEF1dG9tYXRhIHtcbiAgZ3JpZDogR3JpZDtcbiAgY2lyY2xlczogQ2lyY2xlW107XG5cbiAgaXRlcmF0aW9uOiBudW1iZXI7XG5cbiAgY29uc3RydWN0b3IoZ3JpZDogR3JpZCwgY2lyY2xlczogQ2lyY2xlW10pIHtcbiAgICB0aGlzLmdyaWQgPSBncmlkO1xuICAgIHRoaXMuY2lyY2xlcyA9IGNpcmNsZXM7XG5cbiAgICB0aGlzLml0ZXJhdGlvbiA9IDA7XG4gIH1cblxuICBnZXRDaXJjbGVDb29yZHMoKTogSXRlcmFibGU8UG9pbnQ+IHtcbiAgICByZXR1cm4gdGhpcy5jaXJjbGVzLm1hcCgoY2lyY2xlKSA9PiBjaXJjbGUuZ2V0UG9zaXRpb24oKSlcbiAgfVxuXG4gIGdldExlZ2FsTW92ZVBvaW50cyhjaXJjbGVDb29yZDogUG9pbnQpOiBNb3ZlTWFwIHtcbiAgICAvLyBmb3IgZWFjaCBqb2luZWQgY2lyY2xlXG4gICAgLy8gZmluZCByZWxhdGl2ZSBtYXggYW5kIG1pbiBuZWlnaGJvcnMgYXJvdW5kIGpvaW5lZCBjaXJjbGUgLSB0aG9zZSBhcmUgYmxvY2tlcnMgQ19rXG4gICAgLy8gZmluZCByZWxhdGl2ZSBtYXggYW5kIG1pbiBibG9ja2VycyBhcm91bmQgam9pbmVkIGNpcmNsZSAtIHRob3NlIGFyZSBibG9ja2VycyBCX2tcblxuICAgIGxldCBtb3ZlTWFwID0gbmV3IE1vdmVNYXAoKTtcbiAgICBtb3ZlTWFwLnNldChuZXcgTW92ZShEaXJlY3Rpb24uQ0NXLCAxKSwgbmV3IFBvaW50KDE1LCAxNSkpXG4gICAgbW92ZU1hcC5zZXQobmV3IE1vdmUoRGlyZWN0aW9uLkNDVywgMiksIG5ldyBQb2ludCgxNiwgMTYpKVxuICAgIG1vdmVNYXAuc2V0KG5ldyBNb3ZlKERpcmVjdGlvbi5DQ1csIDMpLCBuZXcgUG9pbnQoMTYsIDE3KSlcblxuICAgIHJldHVybiBtb3ZlTWFwO1xuICB9XG5cbiAgaXRlcmF0ZShcbiAgICBjaG9vc2VDaXJjbGU6IChpdGVyYXRpb246IG51bWJlciwgY2lyY2xlQ29vcmRzOiBJdGVyYWJsZTxQb2ludD4pID0+IG51bWJlcixcbiAgICBjaG9vc2VEZXNpcmVkTW92ZTogKGl0ZXJhdGlvbjogbnVtYmVyLCBjaG9zZW5DaXJjbGU6IG51bWJlcikgPT4gTW92ZVxuICApOiBDaXJjbGUge1xuICAgIGxldCBjaXJjbGVDb29yZHMgPSB0aGlzLmdldENpcmNsZUNvb3JkcygpO1xuICAgIGxldCBjaXJjbGVJbmRleCA9IGNob29zZUNpcmNsZSh0aGlzLml0ZXJhdGlvbiwgY2lyY2xlQ29vcmRzKTtcblxuICAgIGxldCBjaG9zZW5DaXJjbGVDb29yZDogUG9pbnQgPSBjaXJjbGVDb29yZHNbY2lyY2xlSW5kZXhdO1xuICAgIGxldCBsZWdhbE1vdmVzID0gdGhpcy5nZXRMZWdhbE1vdmVQb2ludHMoY2hvc2VuQ2lyY2xlQ29vcmQpO1xuICAgIGxldCBkZXNpcmVkTW92ZSA9IGNob29zZURlc2lyZWRNb3ZlKHRoaXMuaXRlcmF0aW9uLCBjaXJjbGVJbmRleCk7XG5cbiAgICBpZiAobGVnYWxNb3Zlcy5oYXMoZGVzaXJlZE1vdmUpKSB7XG4gICAgICBsZXQgbmV3Q29vcmQgPSBsZWdhbE1vdmVzLmdldChkZXNpcmVkTW92ZSk7XG4gICAgICB0aGlzLmNpcmNsZXNbY2lyY2xlSW5kZXhdLnNldFBvc2l0aW9uKG5ld0Nvb3JkKTtcbiAgICB9XG5cbiAgICB0aGlzLml0ZXJhdGlvbisrO1xuICAgIHJldHVybiBudWxsO1xuICB9XG59XG5cbmV4cG9ydCB7IEF1dG9tYXRhIH0iLCJpbXBvcnQgKiBhcyAkIGZyb20gJ2pxdWVyeSc7XG5pbXBvcnQgeyBTaXplLCBQb2ludCB9IGZyb20gJ3BhcGVyJztcblxuaW1wb3J0IHsgUmVuZGVyZXIgfSBmcm9tICcuL3JlbmRlcmVyJztcbmltcG9ydCB7IEdyaWQgfSBmcm9tICcuL2dyaWQnXG5pbXBvcnQgeyBDaXJjbGUgfSBmcm9tICcuL2NpcmNsZSdcbmltcG9ydCB7IEF1dG9tYXRhIH0gZnJvbSAnLi9hdXRvbWF0YSc7XG5pbXBvcnQgeyBNb3ZlLCBEaXJlY3Rpb24gfSBmcm9tICcuL21vdmUnO1xuXG4kKGZ1bmN0aW9uICgpIHtcbiAgbGV0IGNpcmNsZSA9IG5ldyBDaXJjbGUobmV3IFBvaW50KDEwLCAxMCkpXG4gIGxldCBjaXJjbGVzID0gW2NpcmNsZV1cbiAgICAuY29uY2F0KGNpcmNsZS5ibG9ja2luZ1BvaW50cygpLm1hcCgocG9pbnQpID0+IG5ldyBDaXJjbGUocG9pbnQpKSlcbiAgICAuY29uY2F0KGNpcmNsZS5uZWlnaGJvcmhvb2RQb2ludHMoKS5tYXAoKHBvaW50KSA9PiBuZXcgQ2lyY2xlKHBvaW50KSkpO1xuXG4gIGxldCBncmlkT2Zmc2V0ID0gbmV3IFBvaW50KC0xMCwgMCk7XG4gIGxldCBncmlkU2l6ZSA9IG5ldyBTaXplKDMwLCAzMCk7XG4gIGxldCBncmlkU3BhY2luZyA9IDEwO1xuXG4gIGxldCBncmlkID0gbmV3IEdyaWQoZ3JpZE9mZnNldCwgZ3JpZFNpemUpO1xuICBsZXQgYXV0b21hdGEgPSBuZXcgQXV0b21hdGEoZ3JpZCwgY2lyY2xlcyk7XG5cbiAgLy8gVE9ETzogd2h5IGRvIGFsbCAucmVuZGVyKCkgY2FsbHMgc2VlbSB0byBiZSBoYXBwZW5pbmcgdHdpY2Ug8J+klFxuXG4gIGxldCByZW5kZXJlciA9IG5ldyBSZW5kZXJlcihncmlkU3BhY2luZyk7XG4gIHJlbmRlcmVyLnJlbmRlcihncmlkLCBhdXRvbWF0YSk7XG5cbiAgc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xuICAgIGF1dG9tYXRhLml0ZXJhdGUoXG4gICAgICAoaXRlcmF0aW9uLCBjaXJjbGVDb29yZHMpID0+IGl0ZXJhdGlvbiAlIDMsXG4gICAgICAoaXRlcmF0aW9uLCBjaG9zZW5DaXJjbGUpID0+IG5ldyBNb3ZlKERpcmVjdGlvbi5DQ1csIChpdGVyYXRpb24gJSAzKSArIDEpXG4gICAgKTtcblxuICAgIHJlbmRlcmVyLnJlbmRlcihncmlkLCBhdXRvbWF0YSk7XG4gIH0sIDEwMDApO1xufSk7Il0sInNvdXJjZVJvb3QiOiIifQ==